--
-- Create Schema Script
--   Database Version          : 10.2.0.1.0
--   Database Compatible Level : 10.2.0.1.0
--   Script Compatible Level   : 10.2.0.1.0
--   Toad Version              : 12.5.0.99
--   DB Connect String         : MASTER
--   Schema                    : MASTER
--   Script Created by         : SYS
--   Script Created at         : 12/12/2019 12:42:17
--   Notes                     : 
--

-- Object Counts: 
--   Roles: 2           System Privileges: 11Roles: 0             
--   Users: 1           System Privileges: 19Roles: 2             
--   Tablespaces: 6     Datafiles: 5        Tempfiles: 1 
-- 
--   DBMS Jobs: 5 
--   Directories: 7 
--   Functions: 70      Lines of Code: 2521 
--   Indexes: 1474      Columns: 1902       
--   Materialized Views: 6 
--   Object Privileges: 38 
--   Packages: 45       Lines of Code: 1754 
--   Package Bodies: 45 Lines of Code: 23570 
--   Procedures: 160    Lines of Code: 10827 
--   Refresh Groups: 1 
--   Sequences: 112 
--   Synonym: 48 
--   Tables: 512        Columns: 6233       Constraints: 3101   
--   Triggers: 236 
--   Views: 485         Columns: 9718       


-- "Set define off" turns off substitution variables.
Set define off; 

--
-- LOADER  (Tablespace) 
--
CREATE TABLESPACE LOADER DATAFILE 
  'E:\ORACLE\MASTER\ORADATA\LOADER01.DBF' SIZE 1000M AUTOEXTEND ON NEXT 100M MAXSIZE 16000M
NOLOGGING
ONLINE
EXTENT MANAGEMENT LOCAL AUTOALLOCATE
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK ON;


--
-- LOADERINDX  (Tablespace) 
--
CREATE TABLESPACE LOADERINDX DATAFILE 
  'E:\ORACLE\MASTER\ORADATA\LOADERINDX01.DBF' SIZE 1100M AUTOEXTEND ON NEXT 100M MAXSIZE 16000M
LOGGING
ONLINE
EXTENT MANAGEMENT LOCAL AUTOALLOCATE
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK ON;


--
-- TEMP  (Tablespace) 
--
CREATE TEMPORARY TABLESPACE TEMP TEMPFILE 
  'E:\ORACLE\MASTER\ORADATA\TEMP01.ORA' SIZE 16000M AUTOEXTEND ON NEXT 100M MAXSIZE 16000M
TABLESPACE GROUP ''
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 1M;


--
-- USERS  (Tablespace) 
--
CREATE TABLESPACE USERS DATAFILE 
  'E:\ORACLE\MASTER\ORADATA\USERS01.DBF' SIZE 5350M AUTOEXTEND ON NEXT 100M MAXSIZE 16000M
LOGGING
ONLINE
EXTENT MANAGEMENT LOCAL AUTOALLOCATE
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK ON;


--
-- USERS2  (Tablespace) 
--
CREATE TABLESPACE USERS2 DATAFILE 
  'E:\ORACLE\MASTER\ORADATA\USERS02.DBF' SIZE 8300M AUTOEXTEND ON NEXT 100M MAXSIZE 16000M
LOGGING
ONLINE
EXTENT MANAGEMENT LOCAL AUTOALLOCATE
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK ON;


--
-- USERSINDX  (Tablespace) 
--
CREATE TABLESPACE USERSINDX DATAFILE 
  'E:\ORACLE\MASTER\ORADATA\USERSINDX01.DBF' SIZE 5000M AUTOEXTEND ON NEXT 100M MAXSIZE 16000M
LOGGING
ONLINE
EXTENT MANAGEMENT LOCAL AUTOALLOCATE
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK ON;


--
-- "DEFAULT"  (Profile) 
--
CREATE PROFILE "DEFAULT" LIMIT
  SESSIONS_PER_USER UNLIMITED
  CPU_PER_SESSION UNLIMITED
  CPU_PER_CALL UNLIMITED
  CONNECT_TIME UNLIMITED
  IDLE_TIME UNLIMITED
  LOGICAL_READS_PER_SESSION UNLIMITED
  LOGICAL_READS_PER_CALL UNLIMITED
  COMPOSITE_LIMIT UNLIMITED
  PRIVATE_SGA UNLIMITED
  FAILED_LOGIN_ATTEMPTS UNLIMITED
  PASSWORD_LIFE_TIME UNLIMITED
  PASSWORD_REUSE_TIME UNLIMITED
  PASSWORD_REUSE_MAX UNLIMITED
  PASSWORD_LOCK_TIME UNLIMITED
  PASSWORD_GRACE_TIME UNLIMITED
  PASSWORD_VERIFY_FUNCTION NULL;


--
-- CONNECT  (Role) 
--
CREATE ROLE CONNECT NOT IDENTIFIED;

-- System privileges granted to CONNECT
GRANT CREATE SESSION TO CONNECT;



--
-- RESOURCE  (Role) 
--
CREATE ROLE RESOURCE NOT IDENTIFIED;

-- System privileges granted to RESOURCE
GRANT CREATE SEQUENCE TO RESOURCE;
GRANT CREATE TRIGGER TO RESOURCE;
GRANT CREATE CLUSTER TO RESOURCE;
GRANT CREATE PROCEDURE TO RESOURCE;
GRANT CREATE INDEXTYPE TO RESOURCE;
GRANT CREATE OPERATOR TO RESOURCE;
GRANT CREATE VIEW TO RESOURCE;
GRANT CREATE TABLE TO RESOURCE;
GRANT DEBUG CONNECT SESSION TO RESOURCE;
GRANT CREATE TYPE TO RESOURCE;



--
-- MASTER  (User) 
--
CREATE USER MASTER
  IDENTIFIED BY VALUES '76626E2F3790C349'
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  -- 2 Roles for MASTER 
  GRANT CONNECT TO MASTER;
  GRANT RESOURCE TO MASTER;
  ALTER USER MASTER DEFAULT ROLE ALL;
  -- 19 System Privileges for MASTER 
  GRANT BECOME USER TO MASTER WITH ADMIN OPTION;
  GRANT CREATE ANY TABLE TO MASTER WITH ADMIN OPTION;
  GRANT CREATE DATABASE LINK TO MASTER WITH ADMIN OPTION;
  GRANT CREATE MATERIALIZED VIEW TO MASTER WITH ADMIN OPTION;
  GRANT CREATE PUBLIC DATABASE LINK TO MASTER WITH ADMIN OPTION;
  GRANT CREATE PUBLIC SYNONYM TO MASTER WITH ADMIN OPTION;
  GRANT CREATE VIEW TO MASTER WITH ADMIN OPTION;
  GRANT DEBUG ANY PROCEDURE TO MASTER WITH ADMIN OPTION;
  GRANT DEBUG CONNECT SESSION TO MASTER WITH ADMIN OPTION;
  GRANT DELETE ANY TABLE TO MASTER WITH ADMIN OPTION;
  GRANT DROP ANY TABLE TO MASTER WITH ADMIN OPTION;
  GRANT EXECUTE ANY PROCEDURE TO MASTER;
  GRANT INSERT ANY TABLE TO MASTER;
  GRANT RESTRICTED SESSION TO MASTER WITH ADMIN OPTION;
  GRANT SELECT ANY DICTIONARY TO MASTER WITH ADMIN OPTION;
  GRANT SELECT ANY SEQUENCE TO MASTER WITH ADMIN OPTION;
  GRANT SELECT ANY TABLE TO MASTER;
  GRANT UNLIMITED TABLESPACE TO MASTER;
  GRANT UPDATE ANY TABLE TO MASTER;


--
-- PROD_ID_NPR_T  (Type) 
--
CREATE OR REPLACE TYPE MASTER."PROD_ID_NPR_T"                                                                          AS TABLE OF VARCHAR2(5);
/

--
-- ADMIN_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
ADMIN_DIR AS 
'C:\ADE\aime_10.2_nt_push\oracle/md/admin';


--
-- DATA_PUMP_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
DATA_PUMP_DIR AS 
'C:\oracle\product\10.2.0\db_1\rdbms\log\';


--
-- QUEST_SOO_ADUMP_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
QUEST_SOO_ADUMP_DIR AS 
'E:\ORACLE\MASTER\ADUMP\';


--
-- QUEST_SOO_BDUMP_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
QUEST_SOO_BDUMP_DIR AS 
'E:\ORACLE\MASTER\BDUMP\';


--
-- QUEST_SOO_CDUMP_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
QUEST_SOO_CDUMP_DIR AS 
'E:\ORACLE\MASTER\CDUMP\';


--
-- QUEST_SOO_UDUMP_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
QUEST_SOO_UDUMP_DIR AS 
'E:\ORACLE\MASTER\UDUMP\';


--
-- WORK_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
WORK_DIR AS 
'C:\ADE\aime_10.2_nt_push\oracle/work';


--
-- AGENT_GDPLAN_FOR_ANTON  (Table) 
--
CREATE TABLE MASTER.AGENT_GDPLAN_FOR_ANTON
(
  STAN_ID      NUMBER,
  PROD_NPR_ID  VARCHAR2(5 BYTE),
  VES          NUMBER,
  TARIF        NUMBER,
  PLAT_ID      NUMBER,
  DATE_PLAN    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- APPL_SESSION  (Table) 
--
CREATE TABLE MASTER.APPL_SESSION
(
  SID           NUMBER,
  DATETIME      DATE,
  USERNAME      VARCHAR2(30 BYTE),
  STATUS        VARCHAR2(8 BYTE),
  OSUSER        VARCHAR2(120 BYTE),
  COMPUTER      VARCHAR2(64 BYTE),
  MODULE        VARCHAR2(256 BYTE),
  PROGRAM       VARCHAR2(9 BYTE),
  LOGON_TIME    DATE,
  LAST_CALL_ET  NUMBER
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- APP_USERS  (Table) 
--
CREATE TABLE MASTER.APP_USERS
(
  ID         NUMBER(10)                         NOT NULL,
  NAME       VARCHAR2(30 BYTE),
  PASSW      VARCHAR2(15 BYTE),
  NETNAME    VARCHAR2(30 BYTE),
  SNP        NUMBER(1)                          DEFAULT 0,
  UNP        NUMBER(1)                          DEFAULT 0,
  IS_ADMIN   NUMBER(1)                          DEFAULT 0,
  MNOS       NUMBER(1)                          DEFAULT 0,
  POST       VARCHAR2(40 BYTE),
  FULLNAME   VARCHAR2(50 BYTE),
  FILE_SIGN  VARCHAR2(12 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.APP_USERS IS 'Пользователи приложения';

COMMENT ON COLUMN MASTER.APP_USERS.NAME IS 'ФИО';

COMMENT ON COLUMN MASTER.APP_USERS.PASSW IS 'Пароль';

COMMENT ON COLUMN MASTER.APP_USERS.NETNAME IS 'Сетевое имя пользователя';

COMMENT ON COLUMN MASTER.APP_USERS.SNP IS '1-Пользователь СНП';

COMMENT ON COLUMN MASTER.APP_USERS.UNP IS '1-Пользователь УНП';

COMMENT ON COLUMN MASTER.APP_USERS.IS_ADMIN IS 'Пользователь-админ?';

COMMENT ON COLUMN MASTER.APP_USERS.MNOS IS 'Пользователь МНОС';

COMMENT ON COLUMN MASTER.APP_USERS.POST IS 'Должность оператора';



--
-- ARH_DATE  (Table) 
--
CREATE TABLE MASTER.ARH_DATE
(
  TABLENAME  VARCHAR2(30 BYTE)                  NOT NULL,
  LAST_DATE  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ARH_DATE IS 'Дата запрета на изменение данных';

COMMENT ON COLUMN MASTER.ARH_DATE.TABLENAME IS 'Таблица';

COMMENT ON COLUMN MASTER.ARH_DATE.LAST_DATE IS 'Дата';



--
-- AZC_FROM_PARUS  (Table) 
--
CREATE TABLE MASTER.AZC_FROM_PARUS
(
  ID             NUMBER(10)                     NOT NULL,
  OSUSER_NAME    VARCHAR2(30 BYTE),
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  NNOMEN         NUMBER(17),
  SNOMEN         VARCHAR2(20 BYTE),
  NSTORE         NUMBER(17),
  SSTORE         VARCHAR2(20 BYTE),
  REALIZ_ALL     NUMBER(20,3)                   DEFAULT 0,
  REALIZ_AZC     NUMBER(20,3)                   DEFAULT 0,
  OSTATOK        NUMBER(20,3)                   DEFAULT 0,
  IS_AZC         NUMBER(1)                      DEFAULT 0,
  REALIZ_AVG     NUMBER(20,3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.AZC_FROM_PARUS IS 'Реализация из Паруса';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.ID IS 'Реализация из Паруса';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.OSUSER_NAME IS 'Пользователь';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.TERMINAL_NAME IS 'Терминал';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.NNOMEN IS 'Продукт';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.SNOMEN IS 'Продукт';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.NSTORE IS 'Склад';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.SSTORE IS 'Склад';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.REALIZ_ALL IS 'Реализовано всего';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.REALIZ_AZC IS 'Реализовано с АЗС';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.OSTATOK IS 'Остаток';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.IS_AZC IS 'Признак АЗС';

COMMENT ON COLUMN MASTER.AZC_FROM_PARUS.REALIZ_AVG IS 'Средневная реализация';



--
-- AZC_OPERATION_ARCH  (Table) 
--
CREATE TABLE MASTER.AZC_OPERATION_ARCH
(
  ID             NUMBER(15)                     NOT NULL,
  DATE_OPER      DATE,
  DENCITY        NUMBER(6,4)                    DEFAULT 0,
  VOLUME         NUMBER(10)                     DEFAULT 0,
  VES            NUMBER(12,2)                   DEFAULT 0,
  NOTE           VARCHAR2(100 BYTE),
  TYPE_OPER_ID   NUMBER(10),
  PLACE_SEND_ID  NUMBER(10),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  SOBSTV_ID      NUMBER(6),
  ORG_STRU_ID    NUMBER(10),
  SUMMA          NUMBER(10,2),
  PRICE          NUMBER(10,2),
  DISCOUNT       NUMBER(5)                      DEFAULT 0,
  DISCOUNT_TYPE  CHAR(17 BYTE),
  DATE_INTO      DATE                           DEFAULT SYSDATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.AZC_OPERATION_ARCH IS 'Архив AZC_operation_arch';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.ID IS 'ID операции';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.DATE_OPER IS 'Дата операции';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.DENCITY IS 'Плотность подукта';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.VOLUME IS 'Объем продукта';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.VES IS 'Вес продукиа';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.NOTE IS 'Примечание';

COMMENT ON COLUMN MASTER.AZC_OPERATION_ARCH.ORG_STRU_ID IS 'ID ОСЕ';



--
-- AZC_OPERATION_TMP  (Table) 
--
CREATE TABLE MASTER.AZC_OPERATION_TMP
(
  ID             NUMBER(15)                     NOT NULL,
  DATE_OPER      DATE,
  DENCITY        NUMBER(6,4)                    DEFAULT 0,
  VOLUME         NUMBER(10)                     DEFAULT 0,
  VES            NUMBER(12,2)                   DEFAULT 0,
  NOTE           VARCHAR2(100 BYTE),
  TYPE_OPER_ID   NUMBER(10),
  PLACE_SEND_ID  NUMBER(10),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  SOBSTV_ID      NUMBER(6),
  ORG_STRU_ID    NUMBER(10),
  SUMMA          NUMBER(10,2),
  PRICE          NUMBER(10,2),
  DISCOUNT       NUMBER(5)                      DEFAULT 0,
  DISCOUNT_TYPE  CHAR(17 BYTE),
  DATE_INTO      DATE                           DEFAULT SYSDATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.ID IS 'ID операции';

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.DATE_OPER IS 'Дата операции';

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.DENCITY IS 'Плотность подукта';

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.VOLUME IS 'Объем продукта';

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.VES IS 'Вес продукиа';

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.NOTE IS 'Примечание';

COMMENT ON COLUMN MASTER.AZC_OPERATION_TMP.ORG_STRU_ID IS 'ID ОСЕ';



--
-- AZC_OPER_FIELDS  (Table) 
--
CREATE TABLE MASTER.AZC_OPER_FIELDS
(
  ID          NUMBER,
  N_PAGE      NUMBER,
  N_ORDER     NUMBER,
  NAME        VARCHAR2(20 BYTE),
  CAPTION     VARCHAR2(20 BYTE),
  SIZE_FIELD  NUMBER                            DEFAULT 100
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZC_OPER_MAIN  (Table) 
--
CREATE TABLE MASTER.AZC_OPER_MAIN
(
  ID    NUMBER                                  NOT NULL,
  NAME  VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.AZC_OPER_MAIN.ID IS 'ID закладки';



--
-- AZC_OPER_PAGE  (Table) 
--
CREATE TABLE MASTER.AZC_OPER_PAGE
(
  ID       NUMBER,
  PAGE     NUMBER,
  SQL_STR  NUMBER,
  SQL_ROW  VARCHAR2(500 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZC_PLACE_SEND  (Table) 
--
CREATE TABLE MASTER.AZC_PLACE_SEND
(
  ID           NUMBER(10)                       NOT NULL,
  NAME         VARCHAR2(50 BYTE),
  ORG_STRU_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.AZC_PLACE_SEND.NAME IS 'Место отправки (налив и т.д.)';



--
-- AZC_PROD_GROUP  (Table) 
--
CREATE TABLE MASTER.AZC_PROD_GROUP
(
  ID      NUMBER(10)                            NOT NULL,
  NAME    VARCHAR2(70 BYTE),
  NOTE_   VARCHAR2(15 BYTE),
  GRP_ID  NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.AZC_PROD_GROUP.NAME IS 'Группа продуктов';



--
-- AZC_STATIC_REP  (Table) 
--
CREATE TABLE MASTER.AZC_STATIC_REP
(
  ID              NUMBER                        NOT NULL,
  STYPE           VARCHAR2(15 BYTE)             NOT NULL,
  OBJ             VARCHAR2(30 BYTE)             NOT NULL,
  SNOMEN          VARCHAR2(70 BYTE)             NOT NULL,
  QUANT           NUMBER,
  USER_ID         VARCHAR2(70 BYTE)             NOT NULL,
  GROUP_NAME_AZS  VARCHAR2(40 BYTE),
  KOD_OKDP        VARCHAR2(20 BYTE),
  DATE_FROM       DATE,
  DATE_TO         DATE
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- AZC_SYS_FIELDS  (Table) 
--
CREATE TABLE MASTER.AZC_SYS_FIELDS
(
  ID        NUMBER                              NOT NULL,
  NAME      VARCHAR2(50 BYTE),
  QUERY_    VARCHAR2(210 BYTE),
  ALIAS_    VARCHAR2(21 BYTE),
  NOTE      VARCHAR2(21 BYTE),
  TYPE_OBJ  VARCHAR2(11 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZC_SYS_PAGE  (Table) 
--
CREATE TABLE MASTER.AZC_SYS_PAGE
(
  ID      NUMBER                                NOT NULL,
  NAME    VARCHAR2(21 BYTE),
  QUERY_  VARCHAR2(180 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZC_TARIF  (Table) 
--
CREATE TABLE MASTER.AZC_TARIF
(
  ID           NUMBER(10),
  AGENT        VARCHAR2(255 BYTE),
  SKLAD_FROM   VARCHAR2(255 BYTE),
  SKLAD_TO     VARCHAR2(255 BYTE),
  DISTANCE     NUMBER(10),
  TARIF_TONN   NUMBER(10,2),
  TARIF_1000V  NUMBER(10,2),
  DATE_        DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZC_TYPE_OPERATION  (Table) 
--
CREATE TABLE MASTER.AZC_TYPE_OPERATION
(
  ID          NUMBER(10)                        NOT NULL,
  NAME        VARCHAR2(50 BYTE),
  KIND_OPER   NUMBER(1),
  PRICE_FLAG  VARCHAR2(1 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.AZC_TYPE_OPERATION.NAME IS 'Вид операции (отгрузка и т.д.)';



--
-- AZC_WEEK_PARUS  (Table) 
--
CREATE TABLE MASTER.AZC_WEEK_PARUS
(
  ID          NUMBER                            NOT NULL,
  ID_ORG      NUMBER,
  ID_PROD     VARCHAR2(5 BYTE),
  ALL_VES     NUMBER,
  REALIZ_VES  NUMBER,
  OSTATOK     NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZS_REPORTS_TMP  (Table) 
--
CREATE TABLE MASTER.AZS_REPORTS_TMP
(
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  OSUSER_NAME    VARCHAR2(30 BYTE),
  TYPE_OPER_ID   NUMBER(10),
  ORG_STRU_ID    NUMBER(10),
  PROD_ID_NPR    NUMBER(10),
  OPER_DAY       DATE,
  PRICE          NUMBER(20,3)                   DEFAULT 0,
  VOLUME         NUMBER(20,3)                   DEFAULT 0,
  MASSA          NUMBER(20,3)                   DEFAULT 0,
  SUMMA          NUMBER(20,3)                   DEFAULT 0,
  DISCOUNT       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- AZS_R_TMP  (Table) 
--
CREATE TABLE MASTER.AZS_R_TMP
(
  AZS_R       VARCHAR2(4 BYTE),
  NREC_R      NUMBER(4)                         DEFAULT 0,
  VDATE_R     DATE,
  DATE_R      DATE,
  TRK_R       VARCHAR2(2 BYTE)                  DEFAULT '?',
  GUN_R       CHAR(2 BYTE)                      DEFAULT '?',
  REZ_R       VARCHAR2(2 BYTE)                  DEFAULT '?',
  TYPE_R      CHAR(1 BYTE)                      DEFAULT '?',
  MODEPAY_R   NUMBER(3)                         DEFAULT 0,
  SNOMEN_R    VARCHAR2(20 BYTE)                 DEFAULT '?',
  UNIT_R      VARCHAR2(10 BYTE)                 DEFAULT '?',
  NNOMEN_R    NUMBER(4)                         DEFAULT 0,
  SVOL_R      NUMBER(7,3)                       DEFAULT 0,
  FVOL_R      NUMBER(7,3)                       DEFAULT 0,
  PRICE_R     NUMBER(12,5)                      DEFAULT 0,
  SUMM_R      NUMBER(12,5)                      DEFAULT 0,
  SUMMDISC_R  NUMBER(12,5)                      DEFAULT 0,
  PL_R        NUMBER(6,5)                       DEFAULT 1,
  CARD_R      VARCHAR2(50 BYTE),
  HDATE_R     DATE,
  ERROR_R     NUMBER(3)                         DEFAULT -1,
  ACTUAL_R    NUMBER(3)                         DEFAULT 1,
  RNPARUS_R   NUMBER(17)                        DEFAULT -1,
  USER_R      VARCHAR2(20 BYTE)                 DEFAULT USER,
  USERDATE_R  DATE                              DEFAULT SYSDATE,
  AUTODATE_R  DATE                              DEFAULT SYSDATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- BILL_POS_ROW  (Table) 
--
CREATE TABLE MASTER.BILL_POS_ROW
(
  NOM_DOK      NUMBER(7),
  BILL_POS_ID  NUMBER(7),
  VES          NUMBER(15,6)                     DEFAULT 0,
  CENA_BN      NUMBER(16,6)                     DEFAULT 0,
  CENA         NUMBER(16,6)                     DEFAULT 0,
  SUMMA_BN     NUMBER(20,6)                     DEFAULT 0,
  SUMMA_AKCIZ  NUMBER(20,6)                     DEFAULT 0,
  SUMMA_NDS20  NUMBER(20,6)                     DEFAULT 0,
  SUMMA        NUMBER(20,6)                     DEFAULT 0,
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  NPP          NUMBER(10)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.BILL_POS_ROW.NOM_DOK IS 'ID СФ';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.BILL_POS_ID IS '№ позиции';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.VES IS 'Вес';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.CENA_BN IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.CENA IS 'Отпускная цена';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.SUMMA_BN IS 'Сумма без налогов';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.SUMMA_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.SUMMA_NDS20 IS 'НДС';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.SUMMA IS 'Сумма с налогами';

COMMENT ON COLUMN MASTER.BILL_POS_ROW.PROD_ID_NPR IS 'Продукт';



--
-- BILL_POS_TMP  (Table) 
--
CREATE TABLE MASTER.BILL_POS_TMP
(
  NOM_DOK            NUMBER(10),
  BILL_POS_ID        NUMBER(7),
  VES                NUMBER(15,6)               DEFAULT 0,
  CENA_BN            NUMBER(16,6)               DEFAULT 0,
  CENA               NUMBER(16,6)               DEFAULT 0,
  SUMMA_BN           NUMBER(20,6)               DEFAULT 0,
  SUMMA_AKCIZ        NUMBER(20,6)               DEFAULT 0,
  SUMMA_NDS20        NUMBER(20,6)               DEFAULT 0,
  SUMMA_GSM25        NUMBER(20,6)               DEFAULT 0,
  SUMMA              NUMBER(20,6)               DEFAULT 0,
  CENA_POKUP         NUMBER(16,6)               DEFAULT 0,
  SUMMA_BN_POKUP     NUMBER(20,6)               DEFAULT 0,
  SUMMA_NDS20_POKUP  NUMBER(20,6)               DEFAULT 0,
  SUMMA_GSM25_POKUP  NUMBER(20,6)               DEFAULT 0,
  DATE_REALIZ        DATE,
  ID_OLD             NUMBER(7),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  OWNERSHIP_ID       NUMBER(3),
  ANALIT_ID          NUMBER(3),
  IS_AGENT           NUMBER(1),
  IS_LUK             NUMBER(1),
  NACENKA            NUMBER(10,2)               DEFAULT 0,
  NUM_AKT            NUMBER(10),
  PROTO_NUM          VARCHAR2(15 BYTE),
  PROTO_DATE         DATE,
  NO_AKCIZ           NUMBER(1)                  DEFAULT 0,
  SUPPLIER_ID        NUMBER(10),
  NOM_SF_POKUP       VARCHAR2(10 BYTE),
  NOM_DOK_POKUP      NUMBER(10),
  IS_POKUP           NUMBER(10)                 DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- BILLS_NO_UPDATE  (Table) 
--
CREATE TABLE MASTER.BILLS_NO_UPDATE
(
  NOM_DOK  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- BILLS_PREPAY  (Table) 
--
CREATE TABLE MASTER.BILLS_PREPAY
(
  NOM_DOK          NUMBER(10)                   NOT NULL,
  NOM_SF           NUMBER(10),
  PROD_ID_NPR      VARCHAR2(5 BYTE),
  DATE_VYP_SF      DATE,
  DATE_KVIT        DATE,
  DATE_BUXG        DATE,
  DATE_MOS         DATE,
  DATE_OTGR        DATE,
  SVED_NUM         NUMBER(10),
  NUM_5_DAY        NUMBER(1),
  SUMMA_DOK        NUMBER(15,2)                 DEFAULT 0,
  SUMMA_PROD       NUMBER(15,2)                 DEFAULT 0,
  SUMMA_PROD_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUMMA_AKCIZ      NUMBER(15,2)                 DEFAULT 0,
  SUMMA_GSM        NUMBER(15,2)                 DEFAULT 0,
  SUMMA_TARIF      NUMBER(15,2)                 DEFAULT 0,
  SUMMA_TARIF_NDS  NUMBER(15,2)                 DEFAULT 0,
  SUMMA_VOZN       NUMBER(15,2)                 DEFAULT 0,
  SUMMA_VOZN_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUMMA_STRAH      NUMBER(15,2)                 DEFAULT 0,
  NOM_ZD           VARCHAR2(12 BYTE),
  OWNER_ID         NUMBER(6),
  IS_AGENT         NUMBER(1),
  DOG_ID           NUMBER(10),
  USL_NUMBER       NUMBER(3),
  KOL_DN           NUMBER(5)                    DEFAULT 0,
  LUK_DOG_ID       NUMBER(10),
  LUK_USL_NUMBER   NUMBER(3),
  LUK_SUMMA_DOK    NUMBER(15,2),
  LUK_NDS_DOK      NUMBER(15,2),
  LUK_KOL_DN       NUMBER(15,2),
  SNP_DOG_ID       NUMBER(10),
  SNP_USL_NUMBER   NUMBER(3),
  SNP_KOL_DN       NUMBER(15,2),
  NAZN_OTG_ID      NUMBER(2)                    DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.BILLS_PREPAY IS 'Счета на предоплату';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.NOM_DOK IS 'Счет на предоплату';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.NOM_SF IS 'N счета на предоплату';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.DATE_VYP_SF IS 'Дата выписки счета';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.DATE_KVIT IS 'Дата квитанции';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.DATE_BUXG IS 'Дата бухгалтерии';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.DATE_MOS IS 'Дата пятидневки';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.DATE_OTGR IS 'Дата сведения';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SVED_NUM IS 'N сведения';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.NUM_5_DAY IS 'N пятидневки';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_DOK IS 'Сумма счета';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_PROD IS 'Сумма за продукт (вкл.акциз и НДС)';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_PROD_NDS IS 'НДС за продукт';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_GSM IS 'ГСМ';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_TARIF IS 'Тариф (вкл.НДС)';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_TARIF_NDS IS 'НДС за тариф';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_VOZN IS 'Вознаграждение (вкл.НДС)';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_VOZN_NDS IS 'НДС за вознаграждение';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SUMMA_STRAH IS 'Страхование';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.IS_AGENT IS 'Группа договора';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.KOL_DN IS 'Отсрочка';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.LUK_SUMMA_DOK IS 'Сумма по счету от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.LUK_NDS_DOK IS 'НДС по счету от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.LUK_KOL_DN IS 'Отсрочка по счету от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS_PREPAY.SNP_KOL_DN IS 'Отсрочка по счету НПО';



--
-- BILLS_PRIMARY  (Table) 
--
CREATE TABLE MASTER.BILLS_PRIMARY
(
  ID            NUMBER(10)                      NOT NULL,
  BEGIN_DATE    DATE,
  END_DATE      DATE,
  PRIMARY_APPL  VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.BILLS_PRIMARY IS 'Таблица первичных систем, в которых выставлялись счета-фактуры от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS_PRIMARY.ID IS 'Период выставления счетов';

COMMENT ON COLUMN MASTER.BILLS_PRIMARY.BEGIN_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.BILLS_PRIMARY.END_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.BILLS_PRIMARY.PRIMARY_APPL IS 'Первичная система';



--
-- BILLS_TMP  (Table) 
--
CREATE TABLE MASTER.BILLS_TMP
(
  NOM_DOK         NUMBER(10),
  NOM_SF          NUMBER(7),
  DATE_VYP_SF     DATE,
  DATE_KVIT       DATE,
  DATE_BUXG       DATE,
  SUMMA_DOK       NUMBER(15,2)                  DEFAULT 0,
  NDS_DOK         NUMBER(15,2)                  DEFAULT 0,
  GSM_DOK         NUMBER(15,2)                  DEFAULT 0,
  AKCIZ_DOK       NUMBER(15,2)                  DEFAULT 0,
  PRIM            VARCHAR2(65 BYTE),
  FIO_ISPOL       VARCHAR2(40 BYTE),
  KOL_DN          NUMBER(5)                     DEFAULT 0,
  OLD_NOM_DOK     NUMBER(7),
  NOM_ZD          VARCHAR2(12 BYTE),
  OWNER_ID        NUMBER(6),
  DOG_ID          NUMBER(10),
  USL_NUMBER      NUMBER(3),
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  PROD_SUM        NUMBER(15,2)                  DEFAULT 0,
  PROD_NDS        NUMBER(15,2)                  DEFAULT 0,
  PROD_GSM        NUMBER(15,2)                  DEFAULT 0,
  PROD_AKCIZ      NUMBER(15,2)                  DEFAULT 0,
  DATE_MOS        DATE,
  NPO_SF          VARCHAR2(200 BYTE),
  OLD_NOM_SF      NUMBER(7),
  IS_AGENT        NUMBER(1),
  NUM_5_DAY       NUMBER(1),
  LUK_DOG_ID      NUMBER(10),
  LUK_USL_NUMBER  NUMBER(3),
  LUK_SUMMA_DOK   NUMBER(15,2),
  LUK_NDS_DOK     NUMBER(15,2),
  SNP_DOG_ID      NUMBER(10),
  SNP_USL_NUMBER  NUMBER(3),
  LUK_KOL_DN      NUMBER(5),
  SNP_KOL_DN      NUMBER(5),
  NAZN_OTG_ID     NUMBER(10)                    DEFAULT NULL,
  KORR_5_DAY      NUMBER(1),
  PROTO_NUM       VARCHAR2(15 BYTE),
  PROTO_DATE      DATE,
  NO_AKCIZ        NUMBER(1)                     DEFAULT 0,
  KORR_PROD       NUMBER(1)                     DEFAULT 0,
  DATE_PLAT       DATE,
  IS_KORR         NUMBER(1)                     DEFAULT 0,
  TO_KORR         NUMBER(1)                     DEFAULT 0,
  ISU_KOD         VARCHAR2(10 BYTE),
  ISU_NOM_SF      VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.BILLS_TMP.ISU_NOM_SF IS 'Бухгалтерский № СФ из ИСУ';



--
-- BUF_V_INT  (Table) 
--
CREATE TABLE MASTER.BUF_V_INT
(
  SYB_RNK      NUMBER(3),
  N_OB         NUMBER(8),
  N_FID        NUMBER(4),
  N_GR_TY      NUMBER(4),
  N_SH         NUMBER(10),
  DD_MM_YYYY   DATE,
  N_INTER_RAS  NUMBER(4),
  KOL_DB       NUMBER(7),
  KOL          NUMBER(7),
  VAL          NUMBER,
  STAT         VARCHAR2(1 BYTE),
  MIN_0        NUMBER(4),
  MIN_1        NUMBER(4),
  INTERV       NUMBER(2),
  AK_SUM       NUMBER,
  POK_START    NUMBER,
  RASH_POLN    NUMBER,
  IMPULSES     NUMBER,
  IS_COPYED    NUMBER
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- CHAINED_ROWS  (Table) 
--
CREATE TABLE MASTER.CHAINED_ROWS
(
  OWNER_NAME         VARCHAR2(30 BYTE),
  TABLE_NAME         VARCHAR2(30 BYTE),
  CLUSTER_NAME       VARCHAR2(30 BYTE),
  PARTITION_NAME     VARCHAR2(30 BYTE),
  SUBPARTITION_NAME  VARCHAR2(30 BYTE),
  HEAD_ROWID         ROWID,
  ANALYZE_TIMESTAMP  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- DIAGRAM  (Table) 
--
CREATE TABLE MASTER.DIAGRAM
(
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  OSUSER_NAME    VARCHAR2(30 BYTE),
  COL_X1_NAME    VARCHAR2(100 BYTE),
  COL_X1_VALUE   VARCHAR2(100 BYTE),
  COL_X2_NAME    VARCHAR2(100 BYTE),
  COL_X2_VALUE   VARCHAR2(100 BYTE),
  COL_X3_NAME    VARCHAR2(100 BYTE),
  COL_X3_VALUE   VARCHAR2(100 BYTE),
  COL_Y1_NAME    VARCHAR2(100 BYTE),
  COL_Y1_VALUE   VARCHAR2(100 BYTE),
  COL_Y2_NAME    VARCHAR2(100 BYTE),
  COL_Y2_VALUE   VARCHAR2(100 BYTE),
  COL_Y3_NAME    VARCHAR2(100 BYTE),
  COL_Y3_VALUE   VARCHAR2(100 BYTE),
  COL_Y4_NAME    VARCHAR2(100 BYTE),
  COL_Y4_VALUE   VARCHAR2(100 BYTE),
  COL_Y5_NAME    VARCHAR2(100 BYTE),
  COL_Y5_VALUE   VARCHAR2(100 BYTE),
  COL_Y6_NAME    VARCHAR2(100 BYTE),
  COL_Y6_VALUE   VARCHAR2(100 BYTE),
  COL_Y7_NAME    VARCHAR2(100 BYTE),
  COL_Y7_VALUE   VARCHAR2(100 BYTE),
  COL_Y8_NAME    VARCHAR2(100 BYTE),
  COL_Y8_VALUE   VARCHAR2(100 BYTE),
  COL_Y9_NAME    VARCHAR2(100 BYTE),
  COL_Y9_VALUE   VARCHAR2(100 BYTE),
  COL_SORT       VARCHAR2(50 BYTE),
  PRIM           VARCHAR2(200 BYTE),
  TITLE          VARCHAR2(50 BYTE),
  COL_Y10_NAME   VARCHAR2(100 BYTE),
  COL_Y10_VALUE  VARCHAR2(100 BYTE),
  COL_Y11_NAME   VARCHAR2(100 BYTE),
  COL_Y11_VALUE  VARCHAR2(100 BYTE),
  COL_Y12_NAME   VARCHAR2(100 BYTE),
  COL_Y12_VALUE  VARCHAR2(100 BYTE),
  COL_Y13_NAME   VARCHAR2(100 BYTE),
  COL_Y13_VALUE  VARCHAR2(100 BYTE),
  COL_Y14_NAME   VARCHAR2(100 BYTE),
  COL_Y14_VALUE  VARCHAR2(100 BYTE),
  COL_Y15_NAME   VARCHAR2(100 BYTE),
  COL_Y15_VALUE  VARCHAR2(100 BYTE),
  COL_Y16_NAME   VARCHAR2(100 BYTE),
  COL_Y16_VALUE  VARCHAR2(100 BYTE),
  COL_Y17_NAME   VARCHAR2(100 BYTE),
  COL_Y17_VALUE  VARCHAR2(100 BYTE),
  COL_Y18_NAME   VARCHAR2(100 BYTE),
  COL_Y18_VALUE  VARCHAR2(100 BYTE),
  COL_Y19_NAME   VARCHAR2(100 BYTE),
  COL_Y19_VALUE  VARCHAR2(100 BYTE),
  COL_Y20_NAME   VARCHAR2(100 BYTE),
  COL_Y20_VALUE  VARCHAR2(100 BYTE),
  VIEW_ROW       NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.DIAGRAM.PRIM IS 'Примечание к отчету';

COMMENT ON COLUMN MASTER.DIAGRAM.TITLE IS 'Добавить к заголовку отчета';

COMMENT ON COLUMN MASTER.DIAGRAM.VIEW_ROW IS '1-Отображать строку в отчете';



--
-- DIS_DOCS_  (Table) 
--
CREATE TABLE MASTER.DIS_DOCS_
(
  DOCUMENT_ID    NUMBER(10)                     NOT NULL,
  OWNER          VARCHAR2(30 BYTE),
  DOCUMENT_NAME  VARCHAR2(254 BYTE),
  COMMENTS       VARCHAR2(254 BYTE),
  CREATE_DATE    DATE,
  MODIFIED_DATE  DATE,
  MODIFIED_BY    VARCHAR2(30 BYTE),
  DOC_LENGTH     NUMBER(22),
  DOCUMENT       LONG RAW,
  BATCH          NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- DIS_GRANTS_  (Table) 
--
CREATE TABLE MASTER.DIS_GRANTS_
(
  DOCUMENT_ID  NUMBER(10)                       NOT NULL,
  OWNER        VARCHAR2(30 BYTE),
  GRANTEE      VARCHAR2(30 BYTE)                NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- DISP_AZS_MANUAL  (Table) 
--
CREATE TABLE MASTER.DISP_AZS_MANUAL
(
  ID           NUMBER(10)                       NOT NULL,
  OSUSER       VARCHAR2(50 BYTE),
  TERMINAL     VARCHAR2(50 BYTE),
  BEG_DATE     DATE,
  END_DATE     DATE,
  ORG_STRU_ID  NUMBER(10),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  IN_O_VOL     NUMBER(20,3)                     DEFAULT 0,
  IN_O_MAS     NUMBER(20,3)                     DEFAULT 0,
  OUT_O_VOL    NUMBER(20,3)                     DEFAULT 0,
  OUT_O_MAS    NUMBER(20,3)                     DEFAULT 0,
  END_VOLUME   NUMBER(20,3)                     DEFAULT 0,
  END_MASSA    NUMBER(20,3)                     DEFAULT 0,
  OUT_O_1_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_1_MAS  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_2_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_2_MAS  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_3_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_3_MAS  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_4_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_4_MAS  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_5_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_5_MAS  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_6_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_6_MAS  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_7_VOL  NUMBER(20,3)                     DEFAULT 0,
  OUT_O_7_MAS  NUMBER(20,3)                     DEFAULT 0,
  LAST_DAY     DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.DISP_AZS_MANUAL IS 'Временная таблица для отчета disp_azs (НЕ автоматизированные АЗС)';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.ID IS 'ID';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.OSUSER IS 'Пользователь';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.TERMINAL IS 'Терминал';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.ORG_STRU_ID IS 'Склад (АЗС)';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.OUT_O_VOL IS 'Реализовано (л) с начала месяца';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.OUT_O_MAS IS 'Реализовано (т) с начала месяца';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.END_VOLUME IS 'Остаток (л)';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.END_MASSA IS 'Остаток (т)';

COMMENT ON COLUMN MASTER.DISP_AZS_MANUAL.LAST_DAY IS 'На конец дня';



--
-- DOC_STREAM  (Table) 
--
CREATE TABLE MASTER.DOC_STREAM
(
  ID    NUMBER(10)                              NOT NULL,
  TAG   VARCHAR2(10 BYTE),
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.DOC_STREAM IS 'Потоки документов';

COMMENT ON COLUMN MASTER.DOC_STREAM.ID IS 'Потоки документов';

COMMENT ON COLUMN MASTER.DOC_STREAM.TAG IS 'Тег потока';

COMMENT ON COLUMN MASTER.DOC_STREAM.NAME IS 'Наименование';



--
-- DOC_STREAM_STAGES  (Table) 
--
CREATE TABLE MASTER.DOC_STREAM_STAGES
(
  ID                NUMBER(10)                  NOT NULL,
  STREAM_ID         NUMBER(10),
  TABLE_TAG         VARCHAR2(50 BYTE),
  MASTER_ID         NUMBER(10),
  MASTER_CONDITION  VARCHAR2(100 BYTE),
  NEXT_ID           NUMBER(10),
  NEXT_CONDITION    VARCHAR2(100 BYTE),
  TITLE_MASK        VARCHAR2(100 BYTE),
  CONDITION         VARCHAR2(100 BYTE),
  RIGHT_ID          VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.DOC_STREAM_STAGES IS 'Этапы потока документов';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.ID IS 'ID документа в потоке';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.STREAM_ID IS 'ID потока';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.TABLE_TAG IS 'ТЕГ документа (MASTER_KLS_STRUCTURE)';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.MASTER_ID IS 'Родительский документ';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.MASTER_CONDITION IS 'Условие поиска родительского док-та';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.NEXT_ID IS 'Дочерний документ';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.NEXT_CONDITION IS 'Условие поиска дочернего документа';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.TITLE_MASK IS 'Шаблон заголовка, отображаемый в форме';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.CONDITION IS 'Условие для идентификации текущего документа';

COMMENT ON COLUMN MASTER.DOC_STREAM_STAGES.RIGHT_ID IS 'Право на просмотр';



--
-- DOP_KVIT_TMP  (Table) 
--
CREATE TABLE MASTER.DOP_KVIT_TMP
(
  ID                 NUMBER(7),
  FLG_OPERDATA       NUMBER(1),
  MESTO_ID           NUMBER(2),
  NOM_ZD             VARCHAR2(12 BYTE),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  TEX_PD_ID          NUMBER(10),
  NUM_CIST           VARCHAR2(10 BYTE),
  DATE_OTGR          DATE,
  VES                NUMBER(10,3),
  VES_BRUTTO         NUMBER(10,3),
  VES_ED             NUMBER(10,3),
  KOL_ED             NUMBER(6),
  TARIF              NUMBER(12,2),
  TARIF19            NUMBER(12,2),
  TARIF_ORIG         NUMBER(12,2),
  NUM_KVIT           NUMBER(10),
  DATE_KVIT          DATE,
  NUM_MILITARY       VARCHAR2(20 BYTE),
  FLG_DOP_CIST       NUMBER(1),
  FLG_VAG_KLIENT     NUMBER(1),
  VAGOWNER_ID        NUMBER(3),
  VAGONTYPE_ID       NUMBER(2),
  KALIBR_ID          VARCHAR2(5 BYTE),
  VES_CIST           NUMBER(10,3),
  DATE_VOZ           DATE,
  KVIT_VOZ           VARCHAR2(12 BYTE),
  SUM_VOZ            NUMBER(12,2),
  DATE_OTV           DATE,
  PLOMBA1            VARCHAR2(15 BYTE),
  PLOMBA2            VARCHAR2(15 BYTE),
  ROSINSPL1          VARCHAR2(6 BYTE),
  ROSINSPL2          VARCHAR2(6 BYTE),
  VZLIV              NUMBER(6),
  TEMPER             NUMBER(10,1),
  FAKT_PL            NUMBER(10,4),
  FORMNAKL_ID        NUMBER(2),
  SHABEXP_ID         NUMBER(2),
  GTD                VARCHAR2(23 BYTE),
  EXPED_ID           NUMBER(6),
  VETKA_OTP_ID       NUMBER(10),
  NUM_EXP_MAR        VARCHAR2(10 BYTE),
  BILL_ID            NUMBER(10)                 DEFAULT 0,
  SVED_ID            VARCHAR2(9 BYTE),
  DATE_OFORML        DATE,
  SVED_NUM           NUMBER(6)                  DEFAULT 0,
  PASP_ID            VARCHAR2(9 BYTE),
  NUM_NAR            VARCHAR2(15 BYTE),
  NUM_DOVER          VARCHAR2(15 BYTE),
  PERER_ID           NUMBER(6),
  DATE_EDIT          DATE,
  JKCOMMIT           NUMBER(1),
  GROTP_ID           NUMBER(6)                  DEFAULT 0,
  PERECH_TEXPD_DATE  DATE,
  PERECH_TEXPD_NUM   VARCHAR2(10 BYTE),
  SUM_PROD           NUMBER(15,2)               DEFAULT 0,
  SUM_AKCIZ          NUMBER(15,2)               DEFAULT 0,
  SUM_PROD_NDS       NUMBER(15,2)               DEFAULT 0,
  TARIF_NDS          NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_STRAH          NUMBER(15,2)               DEFAULT 0,
  CENA               NUMBER(10,2),
  CENA_OTP           NUMBER(10,2),
  DATE_CENA          DATE,
  CENA_VOZN          NUMBER(10,2)               DEFAULT 0,
  CAPACITY           VARCHAR2(10 BYTE),
  TARIF_GUARD        NUMBER(12,2),
  TARIF_GUARD_NDS    NUMBER(12,2),
  TARIF_ALT          NUMBER(12,2),
  NACENKA            NUMBER(10,2)               DEFAULT 0,
  PODDONS            NUMBER(5),
  SHIELDS            NUMBER(5),
  UPAK_ID            NUMBER(10),
  UPAK_VES           NUMBER(15,6),
  KOL_NET            NUMBER(19,5),
  UPAK_VES_ED        NUMBER(7,2),
  SHIELD_VES         NUMBER(7,2),
  PODDON_VES         NUMBER(7,2),
  PL                 NUMBER(10,4),
  NUM_AKT            NUMBER(10),
  BILL_POS_ID        NUMBER(10),
  PROTO_NUM          VARCHAR2(15 BYTE),
  PROTO_DATE         DATE,
  NO_AKCIZ           NUMBER(1),
  PERECH_GUARD_DATE  DATE,
  PERECH_GUARD_NUM   VARCHAR2(10 BYTE),
  TTN_ID             NUMBER(15),
  DATE_DOVER         DATE,
  FIO_DRIVER         VARCHAR2(30 BYTE),
  IS_LOADED          NUMBER(1),
  AXES               NUMBER(3),
  CTLV               NUMBER(6,4),
  DEFI_MASS_ID       NUMBER(2),
  VOLUME             NUMBER(10),
  VOLUME15           NUMBER(10),
  ZPU_TYPE1          NUMBER(5),
  ZPU_TYPE2          NUMBER(5),
  PL15               NUMBER(6,4)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- ENVIRONMENT  (Table) 
--
CREATE TABLE MASTER.ENVIRONMENT
(
  ID            NUMBER(10)                      NOT NULL,
  ENV_NAME      VARCHAR2(30 BYTE),
  ENV_VALUE     VARCHAR2(200 BYTE),
  ENV_COMMENT   VARCHAR2(100 BYTE),
  SOURCESQL     VARCHAR2(200 BYTE),
  ENV_TYPES_ID  NUMBER(10),
  ENV_GRP_ID    NUMBER(10),
  MASTER_ID     NUMBER(10),
  NETUSER       VARCHAR2(50 BYTE),
  APPL_NAME     VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ENVIRONMENT IS 'Переменные окружения';

COMMENT ON COLUMN MASTER.ENVIRONMENT.ID IS 'Переменная окружения';

COMMENT ON COLUMN MASTER.ENVIRONMENT.ENV_NAME IS 'Наименование (идентификатор)';

COMMENT ON COLUMN MASTER.ENVIRONMENT.ENV_VALUE IS 'Значение переменной';

COMMENT ON COLUMN MASTER.ENVIRONMENT.ENV_COMMENT IS 'Наименование (комментарий)';

COMMENT ON COLUMN MASTER.ENVIRONMENT.SOURCESQL IS 'SQL-запрос возможных значений';

COMMENT ON COLUMN MASTER.ENVIRONMENT.ENV_TYPES_ID IS 'Тип переменной';

COMMENT ON COLUMN MASTER.ENVIRONMENT.ENV_GRP_ID IS 'Группа переменных';

COMMENT ON COLUMN MASTER.ENVIRONMENT.MASTER_ID IS 'Переменная окружения';

COMMENT ON COLUMN MASTER.ENVIRONMENT.NETUSER IS 'Сетевое имя пользователя';

COMMENT ON COLUMN MASTER.ENVIRONMENT.APPL_NAME IS 'Приложение';



--
-- ENVIRONMENT_GRP  (Table) 
--
CREATE TABLE MASTER.ENVIRONMENT_GRP
(
  ID           NUMBER(10)                       NOT NULL,
  GRP_NAME     VARCHAR2(30 BYTE),
  GRP_COMMENT  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ENVIRONMENT_GRP IS 'Группы переменных окружения';

COMMENT ON COLUMN MASTER.ENVIRONMENT_GRP.ID IS 'Группа переменных';

COMMENT ON COLUMN MASTER.ENVIRONMENT_GRP.GRP_NAME IS 'Наименование группы';

COMMENT ON COLUMN MASTER.ENVIRONMENT_GRP.GRP_COMMENT IS 'Описание группы';



--
-- ENVIRONMENT_TYPES  (Table) 
--
CREATE TABLE MASTER.ENVIRONMENT_TYPES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ENVIRONMENT_TYPES IS 'Типы переменных окружения';

COMMENT ON COLUMN MASTER.ENVIRONMENT_TYPES.ID IS 'Тип переменной';

COMMENT ON COLUMN MASTER.ENVIRONMENT_TYPES.NAME IS 'Наименование';



--
-- EUL_APP_PARAMS  (Table) 
--
CREATE TABLE MASTER.EUL_APP_PARAMS
(
  APP_ID              NUMBER(10)                NOT NULL,
  APP_TYPE            VARCHAR2(10 BYTE),
  APP_NAME_MN         NUMBER(10),
  APP_DESCRIPTION_MN  NUMBER(10),
  SP_DEFAULT_VALUE    VARCHAR2(240 BYTE),
  SP_VALUE            VARCHAR2(240 BYTE),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BUSINESS_AREAS  (Table) 
--
CREATE TABLE MASTER.EUL_BUSINESS_AREAS
(
  BA_ID           NUMBER(10)                    NOT NULL,
  BA_NAME         VARCHAR2(100 BYTE),
  BA_DESCRIPTION  VARCHAR2(240 BYTE),
  NOTM            NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_EUL_USERS  (Table) 
--
CREATE TABLE MASTER.EUL_EUL_USERS
(
  EU_ID               NUMBER(10)                NOT NULL,
  EU_USERNAME         VARCHAR2(64 BYTE),
  EU_USE_PUB_PRIVS    NUMBER(1),
  EU_QUERY_TIME_LMT   NUMBER(22),
  EU_QUERY_EST_LMT    NUMBER(22),
  EU_ROW_FETCH_LMT    NUMBER(22),
  EU_ROLE_FLAG        NUMBER(1),
  EU_BATCH_JOBS_LMT   NUMBER(22),
  EU_BATCH_WND_START  DATE,
  EU_BATCH_WND_END    DATE,
  EU_BATCH_QTIME_LMT  NUMBER(22),
  EU_BATCH_EXPIRY     NUMBER(22),
  EU_BATCH_CMT_SZ     NUMBER(22),
  EU_BATCH_REP_USER   VARCHAR2(64 BYTE),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_FREQ_UNITS  (Table) 
--
CREATE TABLE MASTER.EUL_FREQ_UNITS
(
  RFU_ID              NUMBER(10)                NOT NULL,
  RFU_NAME_MN         NUMBER(10),
  RFU_SQL_EXPRESSION  VARCHAR2(240 BYTE),
  RFU_SEQUENCE        NUMBER(22),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_FUN_CATEGORIES  (Table) 
--
CREATE TABLE MASTER.EUL_FUN_CATEGORIES
(
  FC_ID              NUMBER(10)                 NOT NULL,
  FC_NAME_S          VARCHAR2(100 BYTE),
  FC_NAME_MN         NUMBER(10),
  FC_DESCRIPTION_S   VARCHAR2(240 BYTE),
  FC_DESCRIPTION_MN  NUMBER(10),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_FUNCTIONS  (Table) 
--
CREATE TABLE MASTER.EUL_FUNCTIONS
(
  FUN_ID              NUMBER(10)                NOT NULL,
  FUN_NAME            VARCHAR2(100 BYTE),
  FUN_DESCRIPTION_S   VARCHAR2(240 BYTE),
  FUN_DESCRIPTION_MN  NUMBER(10),
  FUN_FUNCTION_TYPE   NUMBER(2),
  FUN_HIDDEN          NUMBER(1),
  FUN_DATA_TYPE       NUMBER(2),
  FUN_AVAILABLE       NUMBER(1),
  FUN_MAXIMUM_ARGS    NUMBER(22),
  FUN_MINIMUM_ARGS    NUMBER(22),
  FUN_BUILT_IN        NUMBER(1),
  FUN_PACKAGE         VARCHAR2(64 BYTE),
  FUN_OWNER           VARCHAR2(64 BYTE),
  FUN_DATABASE_LINK   VARCHAR2(64 BYTE),
  FUN_DISPLAY_NAME    VARCHAR2(100 BYTE),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_FUN_FC_LINKS  (Table) 
--
CREATE TABLE MASTER.EUL_FUN_FC_LINKS
(
  FFL_ID      NUMBER(10)                        NOT NULL,
  FFL_FUN_ID  NUMBER(10),
  FFL_FC_ID   NUMBER(10),
  NOTM        NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_GATEWAYS  (Table) 
--
CREATE TABLE MASTER.EUL_GATEWAYS
(
  GW_ID              NUMBER(10)                 NOT NULL,
  GW_TYPE            VARCHAR2(10 BYTE),
  GW_GATEWAY_NAME    VARCHAR2(100 BYTE),
  GW_PRODUCT_NAME    VARCHAR2(100 BYTE),
  GW_DESCRIPTION     VARCHAR2(240 BYTE),
  EGW_VERSION        VARCHAR2(30 BYTE),
  EGW_DATABASE_LINK  VARCHAR2(64 BYTE),
  EGW_SCHEMA         VARCHAR2(64 BYTE),
  EGW_SQL_PARADIGM   VARCHAR2(10 BYTE),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_HIERARCHIES  (Table) 
--
CREATE TABLE MASTER.EUL_HIERARCHIES
(
  HI_ID             NUMBER(10)                  NOT NULL,
  HI_TYPE           VARCHAR2(10 BYTE),
  HI_NAME           VARCHAR2(100 BYTE),
  HI_DESCRIPTION    VARCHAR2(240 BYTE),
  HI_SYS_GENERATED  NUMBER(1),
  HI_EXT_HIERARCHY  VARCHAR2(64 BYTE),
  DBH_DEFAULT       NUMBER(1),
  IBH_DBH_ID        NUMBER(10),
  NOTM              NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_HI_NODES  (Table) 
--
CREATE TABLE MASTER.EUL_HI_NODES
(
  HN_ID           NUMBER(10)                    NOT NULL,
  HN_NAME         VARCHAR2(100 BYTE),
  HN_DESCRIPTION  VARCHAR2(240 BYTE),
  HN_HI_ID        NUMBER(10),
  HN_EXT_NODE     VARCHAR2(64 BYTE),
  NOTM            NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_JOIN_COMBS  (Table) 
--
CREATE TABLE MASTER.EUL_JOIN_COMBS
(
  JC_ID    NUMBER(10)                           NOT NULL,
  JC_TYPE  VARCHAR2(10 BYTE),
  NOTM     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_OBJS  (Table) 
--
CREATE TABLE MASTER.EUL_OBJS
(
  OBJ_ID             NUMBER(10)                 NOT NULL,
  OBJ_TYPE           VARCHAR2(10 BYTE),
  OBJ_NAME           VARCHAR2(100 BYTE),
  OBJ_DESCRIPTION    VARCHAR2(240 BYTE),
  OBJ_HIDDEN         NUMBER(1),
  OBJ_DISTINCT_FLAG  NUMBER(1),
  OBJ_CBO_HINT       VARCHAR2(240 BYTE),
  OBJ_EXT_OBJECT     VARCHAR2(64 BYTE),
  OBJ_EXT_OWNER      VARCHAR2(64 BYTE),
  OBJ_EXT_DB_LINK    VARCHAR2(64 BYTE),
  OBJ_OBJECT_SQL1    VARCHAR2(250 BYTE),
  OBJ_OBJECT_SQL2    VARCHAR2(250 BYTE),
  OBJ_OBJECT_SQL3    VARCHAR2(250 BYTE),
  OBJ_OBJECT_SQL4    VARCHAR2(250 BYTE),
  SOBJ_EXT_TABLE     VARCHAR2(64 BYTE),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_PLAN_TABLE  (Table) 
--
CREATE TABLE MASTER.EUL_PLAN_TABLE
(
  STATEMENT_ID     VARCHAR2(30 BYTE),
  TIMESTAMP        DATE,
  REMARKS          VARCHAR2(80 BYTE),
  OPERATION        VARCHAR2(30 BYTE),
  OPTIONS          VARCHAR2(30 BYTE),
  OBJECT_NODE      VARCHAR2(128 BYTE),
  OBJECT_OWNER     VARCHAR2(30 BYTE),
  OBJECT_NAME      VARCHAR2(30 BYTE),
  OBJECT_INSTANCE  NUMBER,
  OBJECT_TYPE      VARCHAR2(30 BYTE),
  OPTIMIZER        VARCHAR2(255 BYTE),
  SEARCH_COLUMNS   NUMBER(38),
  ID               NUMBER(38),
  PARENT_ID        NUMBER(38),
  POSITION         NUMBER(38),
  COST             NUMBER(38),
  CARDINALITY      NUMBER(38),
  BYTES            NUMBER(38),
  OTHER_TAG        VARCHAR2(255 BYTE),
  PARTITION_START  VARCHAR2(255 BYTE),
  PARTITION_STOP   VARCHAR2(255 BYTE),
  PARTITION_ID     NUMBER,
  OTHER            LONG
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_QPP_STATISTICS  (Table) 
--
CREATE TABLE MASTER.EUL_QPP_STATISTICS
(
  QS_ID              NUMBER(10)                 NOT NULL,
  QS_COST            NUMBER,
  QS_ACT_CPU_TIME    NUMBER,
  QS_ACT_ELAP_TIME   NUMBER,
  QS_EST_ELAP_TIME   NUMBER,
  QS_DATE_STAMP      DATE,
  QS_OBJECT_USE_KEY  VARCHAR2(240 BYTE),
  QS_SUMMARY_FIT     NUMBER(2),
  QS_USERNAME        VARCHAR2(64 BYTE),
  QS_SDO_ID          NUMBER(10),
  QS_DBMP0           RAW(250),
  QS_DBMP1           RAW(250),
  QS_DBMP2           RAW(250),
  QS_DBMP3           RAW(250),
  QS_DBMP4           RAW(250),
  QS_DBMP5           RAW(250),
  QS_DBMP6           RAW(250),
  QS_DBMP7           RAW(250),
  QS_MBMP0           RAW(250),
  QS_MBMP1           RAW(250),
  QS_MBMP2           RAW(250),
  QS_MBMP3           RAW(250),
  QS_MBMP4           RAW(250),
  QS_MBMP5           RAW(250),
  QS_MBMP6           RAW(250),
  QS_MBMP7           RAW(250),
  QS_JBMP0           RAW(250),
  QS_JBMP1           RAW(250),
  QS_JBMP2           RAW(250),
  QS_JBMP3           RAW(250),
  QS_JBMP4           RAW(250),
  QS_JBMP5           RAW(250),
  QS_JBMP6           RAW(250),
  QS_JBMP7           RAW(250)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_SEQUENCES  (Table) 
--
CREATE TABLE MASTER.EUL_SEQUENCES
(
  SEQ_ID       NUMBER(10),
  SEQ_NAME     VARCHAR2(100 BYTE),
  SEQ_NEXTVAL  NUMBER(22)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_SUM_RFRSH_SETS  (Table) 
--
CREATE TABLE MASTER.EUL_SUM_RFRSH_SETS
(
  SRS_ID              NUMBER(10)                NOT NULL,
  SRS_NAME            VARCHAR2(100 BYTE),
  SRS_DESCRIPTION     VARCHAR2(240 BYTE),
  SRS_STATE           NUMBER(2),
  SRS_ONLINE          NUMBER(1),
  SRS_AUTO_REFRESH    NUMBER(1),
  SRS_LAST_REFRESH    DATE,
  SRS_NEXT_REFRESH    DATE,
  SRS_JOB_ID          NUMBER(22),
  SRS_EU_ID           NUMBER(10),
  SRS_NUM_FREQ_UNITS  NUMBER(22),
  SRS_RFU_ID          NUMBER(10),
  SRS_UPGRADE_REQD    NUMBER(1),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_VERSIONS  (Table) 
--
CREATE TABLE MASTER.EUL_VERSIONS
(
  VER_EUL_TIMESTAMP  VARCHAR2(30 BYTE),
  VER_MIN_CODE_VER   VARCHAR2(30 BYTE),
  VER_RELEASE        VARCHAR2(30 BYTE),
  VER_SA             NUMBER(22),
  VER_NAME           VARCHAR2(100 BYTE),
  VER_DESCRIPTION    VARCHAR2(240 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EXPORT2INFIN  (Table) 
--
CREATE TABLE MASTER.EXPORT2INFIN
(
  KLS_NAME    VARCHAR2(50 BYTE),
  QUERY_TEXT  VARCHAR2(4000 BYTE),
  FNAME       VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- FORMULA  (Table) 
--
CREATE TABLE MASTER.FORMULA
(
  ID            NUMBER(10)                      NOT NULL,
  TAG           VARCHAR2(15 BYTE),
  DESCRIPT      VARCHAR2(50 BYTE),
  FORMULA_KIND  VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.FORMULA IS 'Справочник формул';

COMMENT ON COLUMN MASTER.FORMULA.ID IS 'Уникальный код';

COMMENT ON COLUMN MASTER.FORMULA.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.FORMULA.DESCRIPT IS 'Описание';

COMMENT ON COLUMN MASTER.FORMULA.FORMULA_KIND IS 'Вид формулы';



--
-- GD_TIME  (Table) 
--
CREATE TABLE MASTER.GD_TIME
(
  NUM_OTGR     VARCHAR2(10 BYTE)                NOT NULL,
  DATE_OTGR    DATE                             NOT NULL,
  DATE_OFORML  DATE,
  MESTO_ID     NUMBER(10)                       NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.GD_TIME.NUM_OTGR IS '№ цистерны';

COMMENT ON COLUMN MASTER.GD_TIME.DATE_OTGR IS 'Дата отгрузки';

COMMENT ON COLUMN MASTER.GD_TIME.DATE_OFORML IS 'Дата оформления';

COMMENT ON COLUMN MASTER.GD_TIME.MESTO_ID IS 'Место отгрузки';



--
-- GR_INTEGR  (Table) 
--
CREATE TABLE MASTER.GR_INTEGR
(
  ELEM_BAL       NUMBER(3)                      NOT NULL,
  VID_OBEKT_RAB  NUMBER(3)                      NOT NULL,
  VID_RASH       NUMBER(3)                      NOT NULL,
  N_OB           NUMBER(8)                      NOT NULL,
  SYB_RNK        NUMBER(3)                      NOT NULL,
  N_GR_INTEGR    NUMBER(4)                      NOT NULL,
  TYP_POK        NUMBER(4)                      NOT NULL,
  INTERV         NUMBER(3),
  VAR_VR_ZON     NUMBER(3)                      DEFAULT 0                     NOT NULL,
  DAT_START      DATE,
  DAT_END        DATE,
  N_KON          NUMBER(10),
  TXT            VARCHAR2(80 BYTE),
  KTO            VARCHAR2(15 BYTE),
  DAT            DATE,
  N_GR_KON       NUMBER(3),
  SYB_RNK_K      NUMBER(3),
  N_OB_K         NUMBER(8),
  TYPE           NUMBER(1)                      DEFAULT 0                     NOT NULL,
  AB             VARCHAR2(1 BYTE),
  IS_COPYED      INTEGER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- GU12_A  (Table) 
--
CREATE TABLE MASTER.GU12_A
(
  ID            NUMBER(10)                      NOT NULL,
  NOM_Z         VARCHAR2(20 BYTE),
  FROM_DATE     DATE,
  TO_DATE       DATE,
  SOGL_DATE     DATE,
  REG_DATE      DATE,
  DOGOVOR       VARCHAR2(10 BYTE),
  STANOTPR_ID   NUMBER(10),
  GROTP_ID      NUMBER(10),
  EXPED_ID      NUMBER(6),
  GR_GRUZ_ID    NUMBER(10),
  VIDSOOB_ID    NUMBER(10),
  PODACH_ID     NUMBER(10),
  SOGL          INTEGER,
  PLATTAR_ID    NUMBER(7),
  PROD_ID       NUMBER(6),
  PRIZNOTPR_ID  INTEGER,
  VLADPUT_ID    INTEGER,
  RODVAG_ID     INTEGER,
  ID_NOSOGL     NUMBER(10),
  FOX_KOD       VARCHAR2(10 BYTE),
  ISCOR         NUMBER,
  ZAKR_DATE     DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.GU12_A IS 'Месячная разнарядка';

COMMENT ON COLUMN MASTER.GU12_A.ID IS 'Месячная заявка';

COMMENT ON COLUMN MASTER.GU12_A.NOM_Z IS 'Номер заявки';

COMMENT ON COLUMN MASTER.GU12_A.FROM_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.GU12_A.TO_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.GU12_A.SOGL_DATE IS 'Дата согласования';

COMMENT ON COLUMN MASTER.GU12_A.REG_DATE IS 'Дата регистрации';

COMMENT ON COLUMN MASTER.GU12_A.DOGOVOR IS '№ договора об организации перевозок';

COMMENT ON COLUMN MASTER.GU12_A.STANOTPR_ID IS 'Станция отправления';

COMMENT ON COLUMN MASTER.GU12_A.GROTP_ID IS 'Грузоотравитель';

COMMENT ON COLUMN MASTER.GU12_A.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.GU12_A.GR_GRUZ_ID IS 'Группа груза';

COMMENT ON COLUMN MASTER.GU12_A.VIDSOOB_ID IS 'Вид сообщения';

COMMENT ON COLUMN MASTER.GU12_A.PODACH_ID IS 'Вид подачи';

COMMENT ON COLUMN MASTER.GU12_A.SOGL IS 'Отметка о согласовании';

COMMENT ON COLUMN MASTER.GU12_A.PLATTAR_ID IS 'Плательщик тарифа';

COMMENT ON COLUMN MASTER.GU12_A.PROD_ID IS 'Груз';

COMMENT ON COLUMN MASTER.GU12_A.PRIZNOTPR_ID IS 'Признак отправки';

COMMENT ON COLUMN MASTER.GU12_A.VLADPUT_ID IS 'Владелец пути';

COMMENT ON COLUMN MASTER.GU12_A.RODVAG_ID IS 'Род вагона';

COMMENT ON COLUMN MASTER.GU12_A.ID_NOSOGL IS 'Несогласованная заявка';



--
-- GU12_A_TEST  (Table) 
--
CREATE TABLE MASTER.GU12_A_TEST
(
  ID            NUMBER(10),
  NOM_Z         VARCHAR2(15 BYTE),
  FROM_DATE     DATE,
  TO_DATE       DATE,
  SOGL_DATE     DATE,
  REG_DATE      DATE,
  DOGOVOR       VARCHAR2(10 BYTE),
  STANOTPR_ID   NUMBER(10),
  GROTP_ID      NUMBER(10),
  EXPED_ID      NUMBER(6),
  GR_GRUZ_ID    NUMBER(10),
  VIDSOOB_ID    NUMBER(10),
  PODACH_ID     NUMBER(10),
  SOGL          INTEGER,
  PLATTAR_ID    NUMBER(7),
  PROD_ID       NUMBER(6),
  PRIZNOTPR_ID  INTEGER,
  VLADPUT_ID    INTEGER,
  RODVAG_ID     INTEGER,
  ID_NOSOGL     NUMBER(10),
  FOX_KOD       VARCHAR2(10 BYTE),
  ISCOR         NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- GU12_B  (Table) 
--
CREATE TABLE MASTER.GU12_B
(
  PDATE         DATE,
  SOBSTVVAG_ID  NUMBER(8),
  STAN_ID       NUMBER(8),
  STAN_PER_ID   NUMBER(8),
  GRUZPOL_ID    NUMBER(8),
  KOL_VAG       NUMBER(8)                       DEFAULT 0,
  VES           NUMBER(8)                       DEFAULT 0,
  VIDOTPR_ID    NUMBER(8),
  MRK           CHAR(1 BYTE),
  ID_A          NUMBER(10),
  ID            NUMBER,
  PLAT_ID       NUMBER(8),
  FOX_KOD       VARCHAR2(10 BYTE),
  ISCOR         NUMBER,
  DATE_LETTER   DATE,
  NOM_LETTER    VARCHAR2(20 BYTE),
  DATE_VHOD     DATE,
  NOM_VHOD      VARCHAR2(20 BYTE),
  PRINVAG_ID    NUMBER(8),
  OLD_ID        NUMBER,
  STATES_ID     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.GU12_B.PRINVAG_ID IS 'Принадлежность вагона';



--
-- GU12_BR  (Table) 
--
CREATE TABLE MASTER.GU12_BR
(
  ID             NUMBER,
  ID_B           NUMBER,
  DATE_R         DATE,
  KOL_VAG        NUMBER(8)                      DEFAULT 0,
  VES            NUMBER(8)                      DEFAULT 0,
  ID_NPR         VARCHAR2(5 BYTE),
  METKA          NUMBER(1),
  ZAKAZ_HIST_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.GU12_BR.ZAKAZ_HIST_ID IS 'Позиция заказа клиента';



--
-- GU12_BR_TEST  (Table) 
--
CREATE TABLE MASTER.GU12_BR_TEST
(
  ID       NUMBER,
  ID_B     NUMBER,
  DATE_R   DATE,
  KOL_VAG  NUMBER(8)                            DEFAULT 0,
  VES      NUMBER(8)                            DEFAULT 0,
  ID_NPR   VARCHAR2(5 BYTE),
  METKA    NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- GU12_B_TEST  (Table) 
--
CREATE TABLE MASTER.GU12_B_TEST
(
  PDATE         DATE,
  SOBSTVVAG_ID  NUMBER(8),
  STAN_ID       NUMBER(8),
  STAN_PER_ID   NUMBER(8),
  GRUZPOL_ID    NUMBER(8),
  KOL_VAG       NUMBER(8)                       DEFAULT 0,
  VES           NUMBER(8)                       DEFAULT 0,
  VIDOTPR_ID    NUMBER(8),
  MRK           CHAR(1 BYTE),
  ID_A          NUMBER(10),
  ID            NUMBER,
  PLAT_ID       NUMBER(8),
  FOX_KOD       VARCHAR2(10 BYTE),
  ISCOR         NUMBER,
  DATE_LETTER   DATE,
  NOM_LETTER    VARCHAR2(20 BYTE),
  DATE_VHOD     DATE,
  NOM_VHOD      VARCHAR2(20 BYTE),
  PRINVAG_ID    NUMBER(8),
  OLD_ID        NUMBER,
  STATES_ID     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- GU12_ISPOLN  (Table) 
--
CREATE TABLE MASTER.GU12_ISPOLN
(
  PROD       VARCHAR2(40 BYTE),
  STAN       VARCHAR2(60 BYTE),
  PRINVAG    VARCHAR2(2 BYTE),
  PLAN_VAG   NUMBER,
  PLAN_VES   NUMBER,
  FAKT_VAG   NUMBER,
  FAKT_VES   NUMBER,
  EXPORT     NUMBER,
  D01        NUMBER,
  D02        NUMBER,
  D03        NUMBER,
  D04        NUMBER,
  D05        NUMBER,
  D06        NUMBER,
  D07        NUMBER,
  D08        NUMBER,
  D09        NUMBER,
  D10        NUMBER,
  D11        NUMBER,
  D12        NUMBER,
  D13        NUMBER,
  D14        NUMBER,
  D15        NUMBER,
  D16        NUMBER,
  D17        NUMBER,
  D18        NUMBER,
  D19        NUMBER,
  D20        NUMBER,
  D21        NUMBER,
  D22        NUMBER,
  D23        NUMBER,
  D24        NUMBER,
  D25        NUMBER,
  D26        NUMBER,
  D27        NUMBER,
  D28        NUMBER,
  D29        NUMBER,
  D30        NUMBER,
  D31        NUMBER,
  USER_NAME  VARCHAR2(30 BYTE),
  FORDEL     NUMBER,
  STAN_ID    NUMBER,
  DATE_O     DATE,
  PROD_ID    NUMBER,
  TIME_O     NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- GU12_PODPIS  (Table) 
--
CREATE TABLE MASTER.GU12_PODPIS
(
  ID         NUMBER(3),
  FIO        VARCHAR2(30 BYTE),
  DOLGNOST   VARCHAR2(100 BYTE),
  DOVER      VARCHAR2(30 BYTE),
  DOVER_OLD  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- INF2PB_SCH  (Table) 
--
CREATE TABLE MASTER.INF2PB_SCH
(
  ID         NUMBER(10)                         NOT NULL,
  SCH        VARCHAR2(4 BYTE),
  CONT_AN    NUMBER(1),
  RAS_AN     NUMBER(1),
  SCH_NAME   VARCHAR2(50 BYTE),
  DOG_AN     NUMBER(1),
  NUM_AN     NUMBER(1),
  PAYOFF_AN  NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- ISU_BILL_POS  (Table) 
--
CREATE TABLE MASTER.ISU_BILL_POS
(
  ISU_KOD_POS      VARCHAR2(16 BYTE)            NOT NULL,
  ISU_KOD_POS_OLD  VARCHAR2(16 BYTE),
  MATERIAL_KSSS    VARCHAR2(10 BYTE),
  AKCIZ_GRP        NUMBER(2),
  PRICE            NUMBER(10,2),
  VES              NUMBER(13,6),
  SUMMA_BN         NUMBER(12,2),
  SUMMA_AKCIZ      NUMBER(12,2),
  SUMMA_NDS        NUMBER(12,2),
  SUMMA            NUMBER(12,2),
  OWNER_KSSS       VARCHAR2(10 BYTE),
  NDS              NUMBER(6,3),
  TARIF_BN         NUMBER(12,2),
  SUMMA_RAZN_BN    NUMBER(12,2),
  TARIF_NDS        NUMBER(12,2),
  TARIF_GUARD_BN   NUMBER(12,2),
  TARIF_GUARD_NDS  NUMBER(12,2),
  SUMMA_VOZN_BN    NUMBER(12,2),
  SUMMA_OSOB       NUMBER(12,2),
  IS_AKCIZ         NUMBER(1),
  EX_SVID          VARCHAR2(30 BYTE),
  PRICE_WITH_NDS   NUMBER(10,2),
  AKCIZ_RUB        NUMBER(10,2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ISU_BILL_POS IS 'Позиции счет-фактуры из ИСУ Переработка';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.ISU_KOD_POS IS 'Код позиции счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.ISU_KOD_POS_OLD IS 'Код позиции сторнируемого счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.MATERIAL_KSSS IS 'Код нефтепродукта';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.AKCIZ_GRP IS 'Группа акциза';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.PRICE IS 'Цена';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.VES IS 'Вес';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA_BN IS 'Сумма без НДС';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA_AKCIZ IS 'Сумма акциза';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA_NDS IS 'Сумма НДС';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA IS 'Сумма общая';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.OWNER_KSSS IS 'Код собственника';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.NDS IS 'Ставка НДС';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.TARIF_BN IS 'Провозная плата';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA_RAZN_BN IS 'Разница тарифов (по арендованным вагонам)';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.TARIF_NDS IS 'НДС провозной платы';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.TARIF_GUARD_BN IS 'Охрана вагона';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.TARIF_GUARD_NDS IS 'НДС Охраны вагона';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA_VOZN_BN IS 'Вознаграждение';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.SUMMA_OSOB IS 'Перевозка Особые Условия';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.IS_AKCIZ IS 'Признак наличие свидетельства';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.EX_SVID IS 'Номер свидетельства';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.PRICE_WITH_NDS IS 'Цена нефтепродукта с НДС';

COMMENT ON COLUMN MASTER.ISU_BILL_POS.AKCIZ_RUB IS 'Акциз в руб./тонну';



--
-- ISU_BILL_POS_ROW  (Table) 
--
CREATE TABLE MASTER.ISU_BILL_POS_ROW
(
  ISU_KOD      VARCHAR2(10 BYTE)                NOT NULL,
  ISU_KOD_POS  VARCHAR2(16 BYTE)                NOT NULL,
  ISU_TTN_ID   VARCHAR2(16 BYTE)                NOT NULL,
  TTN_ID       VARCHAR2(20 BYTE),
  VES          NUMBER(13,6),
  KVIT_ID      NUMBER(16)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ISU_BILL_POS_ROW IS 'Соответствие позиции поставки – позиции счет-фактуры из ИСУ Переработка';

COMMENT ON COLUMN MASTER.ISU_BILL_POS_ROW.ISU_KOD IS 'Код счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILL_POS_ROW.ISU_KOD_POS IS 'Код позиции счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILL_POS_ROW.ISU_TTN_ID IS 'Код позиции ТТН';

COMMENT ON COLUMN MASTER.ISU_BILL_POS_ROW.TTN_ID IS 'Код ТТН';

COMMENT ON COLUMN MASTER.ISU_BILL_POS_ROW.VES IS 'Вес';



--
-- ISU_BILLS  (Table) 
--
CREATE TABLE MASTER.ISU_BILLS
(
  ISU_KOD      VARCHAR2(10 BYTE)                NOT NULL,
  ISU_KOD_OLD  VARCHAR2(10 BYTE),
  NOM_SF       VARCHAR2(10 BYTE),
  DATE_VYP_SF  DATE,
  ISU_KOD_DOG  VARCHAR2(13 BYTE),
  POLUCH_KSSS  VARCHAR2(10 BYTE),
  USL_PLAT     VARCHAR2(6 BYTE),
  GROTP_KSSS   VARCHAR2(10 BYTE),
  PRIM         VARCHAR2(100 BYTE),
  DOPOLN       VARCHAR2(50 BYTE),
  NUMDATEKVIT  VARCHAR2(1024 BYTE),
  DATE_KVIT    DATE,
  STATUS       NUMBER(1),
  LATENT       VARCHAR2(1 BYTE),
  NOM_AVANS    VARCHAR2(200 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ISU_BILLS IS 'Заголовок счет-фактуры из ИСУ Переработка';

COMMENT ON COLUMN MASTER.ISU_BILLS.ISU_KOD IS 'Код счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILLS.ISU_KOD_OLD IS 'Код сторнируемого счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILLS.NOM_SF IS 'Номер счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILLS.DATE_VYP_SF IS 'Дата счета-фактуры';

COMMENT ON COLUMN MASTER.ISU_BILLS.ISU_KOD_DOG IS 'Код договора';

COMMENT ON COLUMN MASTER.ISU_BILLS.POLUCH_KSSS IS 'Код грузополучателя';

COMMENT ON COLUMN MASTER.ISU_BILLS.USL_PLAT IS 'Условие платежа';

COMMENT ON COLUMN MASTER.ISU_BILLS.GROTP_KSSS IS 'Код грузоотправителя';

COMMENT ON COLUMN MASTER.ISU_BILLS.PRIM IS 'Примечание';

COMMENT ON COLUMN MASTER.ISU_BILLS.STATUS IS '0 - основная, 1 - сторнированная, 2 - сторнирующая, 3 - окончательная';

COMMENT ON COLUMN MASTER.ISU_BILLS.LATENT IS 'Х - скрытый, пусто - официальный';



--
-- ISU_TAX_CONTR  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_CONTR
(
  ID          NUMBER,
  CONTR_NAME  VARCHAR2(255 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ISU_TAX_DOCS  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_DOCS
(
  ID             NUMBER,
  DOC_NUM        VARCHAR2(50 BYTE),
  DOC_DATE       DATE,
  PACKAGE_ID     NUMBER,
  FILE_ID        NUMBER,
  FILE_POS_NUM   NUMBER,
  CONTRACTOR_ID  NUMBER
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ISU_TAX_EXIST  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.ISU_TAX_EXIST
(
  DOC_ID        NUMBER                          NOT NULL,
  REASON_ID     NUMBER,
  FILE_ID       NUMBER,
  FILE_POS_NUM  NUMBER
)
ON COMMIT DELETE ROWS;


--
-- ISU_TAX_FILES  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_FILES
(
  ID           NUMBER,
  FILE_NAME    VARCHAR2(255 BYTE),
  USER_ID      NUMBER,
  SOURCE_ID    NUMBER,
  UPLOAD_DATE  DATE
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ISU_TAX_PACKAGE  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_PACKAGE
(
  ID         NUMBER,
  PACK_NUM   VARCHAR2(10 BYTE),
  PACK_DATE  DATE
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ISU_TAX_REASON  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_REASON
(
  ID      NUMBER,
  REASON  VARCHAR2(255 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ISU_TAX_SOURCE  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_SOURCE
(
  ID    NUMBER,
  NAME  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ISU_TAX_TMP_NEW_PACKAGE  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.ISU_TAX_TMP_NEW_PACKAGE
(
  ID  NUMBER
)
ON COMMIT DELETE ROWS;


--
-- ISU_TAX_USER  (Table) 
--
CREATE TABLE MASTER.ISU_TAX_USER
(
  ID         NUMBER,
  USER_NAME  VARCHAR2(255 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- JKCOMMIT_PLAN2DOG  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT_PLAN2DOG
(
  PLANSTRU_ID  NUMBER(20),
  DOG_ID       NUMBER(5)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKCOMMIT_SESSION  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT_SESSION
(
  ID            NUMBER(10)                      NOT NULL,
  SESSION_TIME  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKCOMMIT_SPROKUSHEV  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT_SPROKUSHEV
(
  MESTO_ID       NUMBER(2),
  FLG_COMMIT     NUMBER(1),
  SVED_NUM       NUMBER(6),
  SVED_DATE      DATE,
  DATE_OFORML    DATE,
  DATE_EDIT      DATE,
  SVED_CNT       NUMBER(4),
  SVED_VES       NUMBER(15,6),
  SVED_ID        VARCHAR2(9 BYTE),
  NOM_ZD         VARCHAR2(12 BYTE),
  PROD_NAME      VARCHAR2(30 BYTE),
  NOM_ZD_COMMIT  NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ANALIT  (Table) 
--
CREATE TABLE MASTER.KLS_ANALIT
(
  ID           NUMBER(3)                        NOT NULL,
  ANALIT_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_AR_TOV  (Table) 
--
CREATE TABLE MASTER.KLS_AR_TOV
(
  ID    NUMBER(2)                               NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_BANK  (Table) 
--
CREATE TABLE MASTER.KLS_BANK
(
  KORS       VARCHAR2(20 BYTE)                  NOT NULL,
  BANK_NAME  VARCHAR2(75 BYTE),
  ADDRESS    VARCHAR2(100 BYTE),
  BIK        VARCHAR2(9 BYTE),
  POSTINDEX  VARCHAR2(6 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_BANK IS 'Кор.счета';

COMMENT ON COLUMN MASTER.KLS_BANK.KORS IS 'Корсчет';

COMMENT ON COLUMN MASTER.KLS_BANK.BANK_NAME IS 'Наименование банка';

COMMENT ON COLUMN MASTER.KLS_BANK.ADDRESS IS 'Адрес банка';

COMMENT ON COLUMN MASTER.KLS_BANK.BIK IS 'БИК банка';

COMMENT ON COLUMN MASTER.KLS_BANK.POSTINDEX IS 'Почтовый код';



--
-- KLS_BANKS  (Table) 
--
CREATE TABLE MASTER.KLS_BANKS
(
  ID         NUMBER(10)                         NOT NULL,
  KORS       VARCHAR2(20 BYTE),
  BIK        VARCHAR2(9 BYTE),
  BANK_NAME  VARCHAR2(100 BYTE),
  POSTINDEX  VARCHAR2(6 BYTE),
  ADDRESS    VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_BANKS IS 'Банки';

COMMENT ON COLUMN MASTER.KLS_BANKS.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_BANKS.KORS IS 'Корсчет';

COMMENT ON COLUMN MASTER.KLS_BANKS.BIK IS 'БИК';

COMMENT ON COLUMN MASTER.KLS_BANKS.BANK_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_BANKS.POSTINDEX IS 'Почтовый индекс';

COMMENT ON COLUMN MASTER.KLS_BANKS.ADDRESS IS 'Адрес';



--
-- KLS_BILL_POS_TYPE  (Table) 
--
CREATE TABLE MASTER.KLS_BILL_POS_TYPE
(
  ID         NUMBER(10)                         NOT NULL,
  NAME       VARCHAR2(50 BYTE),
  DEST_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_BILL_POS_TYPE IS 'Варианты назначений платежки';

COMMENT ON COLUMN MASTER.KLS_BILL_POS_TYPE.DEST_NAME IS 'Для назначения платежа';



--
-- KLS_BILLS_ALGORTHMS  (Table) 
--
CREATE TABLE MASTER.KLS_BILLS_ALGORTHMS
(
  ID        NUMBER                              NOT NULL,
  NAME_ALG  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_BILLS_ALGORTHMS IS 'Алгоритмы расчета услуг для счетов без отгрузки';



--
-- KLS_CAT_CEN  (Table) 
--
CREATE TABLE MASTER.KLS_CAT_CEN
(
  ID                NUMBER(3)                   NOT NULL,
  CAT_CEN_NAME      VARCHAR2(70 BYTE),
  GROUPDOG_ID       NUMBER(2),
  PREDPR_ID         NUMBER(6),
  CAT_CEN_GROUP_ID  NUMBER(2),
  FOX_ID            NUMBER(6),
  DOG_ID            NUMBER(5),
  FOR_AZC           VARCHAR2(21 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_CAT_CEN_GROUP  (Table) 
--
CREATE TABLE MASTER.KLS_CAT_CEN_GROUP
(
  ID                  NUMBER(2)                 NOT NULL,
  CAT_CEN_GROUP_NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_CIST  (Table) 
--
CREATE TABLE MASTER.KLS_CIST
(
  NUM_CIST      NUMBER(9)                       NOT NULL,
  KALIBR_ID     VARCHAR2(5 BYTE),
  CAPACITY      VARCHAR2(10 BYTE),
  DATE_BILD     DATE,
  PLACE_BILD    VARCHAR2(5 BYTE),
  VES_CIST      NUMBER(10,3),
  DATE_TO       DATE,
  DATE_REMONT   DATE,
  VAGOWNER_ID   NUMBER(10),
  MODEL         VARCHAR2(10 BYTE),
  GR1_TXT       VARCHAR2(60 BYTE),
  GR2_TXT       VARCHAR2(60 BYTE),
  WES1          VARCHAR2(5 BYTE),
  TIP1          VARCHAR2(5 BYTE),
  VAGONTYPE_ID  NUMBER(10),
  AXES          NUMBER(2)                       DEFAULT 4,
  RAZMET_FACT   VARCHAR2(30 BYTE),
  NCISTDOP      NUMBER(2)                       DEFAULT 20,
  PROD_ID_NPR   VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_CIST IS 'Справочник цистерн';

COMMENT ON COLUMN MASTER.KLS_CIST.NUM_CIST IS 'Вагон';

COMMENT ON COLUMN MASTER.KLS_CIST.KALIBR_ID IS 'Тип вагона';

COMMENT ON COLUMN MASTER.KLS_CIST.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.KLS_CIST.DATE_BILD IS 'Дата постройки';

COMMENT ON COLUMN MASTER.KLS_CIST.PLACE_BILD IS 'Место постройки';

COMMENT ON COLUMN MASTER.KLS_CIST.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.KLS_CIST.DATE_TO IS 'Дата ТО';

COMMENT ON COLUMN MASTER.KLS_CIST.DATE_REMONT IS 'Дата ремонта';

COMMENT ON COLUMN MASTER.KLS_CIST.VAGOWNER_ID IS 'Собственник / владелец';

COMMENT ON COLUMN MASTER.KLS_CIST.MODEL IS 'Модель';

COMMENT ON COLUMN MASTER.KLS_CIST.GR1_TXT IS 'Под наименованием груза 1';

COMMENT ON COLUMN MASTER.KLS_CIST.GR2_TXT IS 'Под наименованием груза 2';

COMMENT ON COLUMN MASTER.KLS_CIST.WES1 IS 'через / для ПВ и КВ';

COMMENT ON COLUMN MASTER.KLS_CIST.TIP1 IS '61205 для 25 типа';

COMMENT ON COLUMN MASTER.KLS_CIST.VAGONTYPE_ID IS 'Род вагона';

COMMENT ON COLUMN MASTER.KLS_CIST.AXES IS 'Кол-во осей';

COMMENT ON COLUMN MASTER.KLS_CIST.RAZMET_FACT IS 'Разметка под груз';

COMMENT ON COLUMN MASTER.KLS_CIST.NCISTDOP IS 'Признак дорог СНГ';

COMMENT ON COLUMN MASTER.KLS_CIST.PROD_ID_NPR IS 'Последний продукт';



--
-- KLS_CIST_DENI  (Table) 
--
CREATE TABLE MASTER.KLS_CIST_DENI
(
  NUM_CIST  NUMBER(9)                           NOT NULL,
  BEG_DENI  DATE,
  END_DENI  DATE,
  PRIM      VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_CIST_DENI IS 'Предупреждения по вагонам';



--
-- KLS_COUNTER  (Table) 
--
CREATE TABLE MASTER.KLS_COUNTER
(
  ID                NUMBER                      NOT NULL,
  COUNTER_NAME      VARCHAR2(50 BYTE),
  COUNTER_QUESRY    VARCHAR2(1024 BYTE),
  DETAIL_QUERY      VARCHAR2(1024 BYTE),
  XCAPTION          VARCHAR2(50 BYTE),
  YCAPTION          VARCHAR2(50 BYTE),
  DETAILINFO_QUERY  VARCHAR2(2048 BYTE),
  LOGIN             VARCHAR2(30 BYTE),
  PASSWORD          VARCHAR2(30 BYTE),
  DATABASE          VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_DATES  (Table) 
--
CREATE TABLE MASTER.KLS_DATES
(
  VALUE        DATE                             NOT NULL,
  DAY_OF_WEEK  NUMBER(2),
  IS_WORK      NUMBER(1)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_DATES.DAY_OF_WEEK IS 'День недели (1-Понедельник)';

COMMENT ON COLUMN MASTER.KLS_DATES.IS_WORK IS 'Рабочий день';



--
-- KLS_DECADA  (Table) 
--
CREATE TABLE MASTER.KLS_DECADA
(
  KOD       NUMBER(5)                           NOT NULL,
  DATEPLAN  DATE,
  YEARDEC   NUMBER(4),
  MONTHDEC  NUMBER(2),
  DEC       NUMBER(1),
  DATEDECN  DATE,
  DATEDECK  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_DEFI_MASS  (Table) 
--
CREATE TABLE MASTER.KLS_DEFI_MASS
(
  ID       NUMBER(10)                           NOT NULL,
  NAME     VARCHAR2(20 BYTE),
  GD_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DEFI_MASS IS 'Методы определения массы';



--
-- KLS_DIAGRAM_KIND  (Table) 
--
CREATE TABLE MASTER.KLS_DIAGRAM_KIND
(
  ID            NUMBER(10)                      NOT NULL,
  TAG           VARCHAR2(30 BYTE),
  DIAGRAM_TYPE  VARCHAR2(10 BYTE),
  NAME          VARCHAR2(50 BYTE),
  SORTBY        NUMBER(10),
  ICON_NUM      NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_KIND.ID IS 'Вид диаграммы';

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_KIND.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_KIND.DIAGRAM_TYPE IS 'Тип диаграммы';

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_KIND.NAME IS 'Наименование';



--
-- KLS_DIAGRAM_TYPE  (Table) 
--
CREATE TABLE MASTER.KLS_DIAGRAM_TYPE
(
  ID    NUMBER(10)                              NOT NULL,
  TAG   VARCHAR2(10 BYTE),
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_TYPE.ID IS 'Тип диаграммы';

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_TYPE.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.KLS_DIAGRAM_TYPE.NAME IS 'Наименование';



--
-- KLS_DOC_RESERV  (Table) 
--
CREATE TABLE MASTER.KLS_DOC_RESERV
(
  TERMINAL_NAME  VARCHAR2(50 BYTE)              NOT NULL,
  OSUSER_NAME    VARCHAR2(50 BYTE)              NOT NULL,
  DOC_TYPE_ID    NUMBER(10)                     NOT NULL,
  MESTO_ID       NUMBER(10)                     NOT NULL,
  NEXT_DOC_NUM   NUMBER(10),
  DOC_NUMS_ID    NUMBER(10),
  DOC_PREFIX     VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOC_RESERV IS 'Зарезервированные номера документов';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.TERMINAL_NAME IS 'Машина';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.OSUSER_NAME IS 'Пользователь';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.DOC_TYPE_ID IS 'Тип документа';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.NEXT_DOC_NUM IS 'Следующий номер документа';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.DOC_NUMS_ID IS 'Диапазон номеров';

COMMENT ON COLUMN MASTER.KLS_DOC_RESERV.DOC_PREFIX IS 'Префикс документа';



--
-- KLS_DOC_RULES  (Table) 
--
CREATE TABLE MASTER.KLS_DOC_RULES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOC_RULES IS 'Правила формирования номера документа';



--
-- KLS_DOC_TYPES  (Table) 
--
CREATE TABLE MASTER.KLS_DOC_TYPES
(
  ID             NUMBER(10)                     NOT NULL,
  NAME           VARCHAR2(50 BYTE),
  FIELD_NUM      VARCHAR2(30 BYTE),
  FIELD_DATE     VARCHAR2(30 BYTE),
  FIELD_PREFIX   VARCHAR2(30 BYTE),
  TABLENAME      VARCHAR2(50 BYTE),
  FIELD_ID       VARCHAR2(30 BYTE),
  FIELD_MESTO    VARCHAR2(30 BYTE),
  FIELD_ID_TYPE  VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOC_TYPES IS 'Справочник документов';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.FIELD_NUM IS 'Поле НОМЕР';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.FIELD_DATE IS 'Поле ДАТА';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.FIELD_PREFIX IS 'Поле "Префикс номера"';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.TABLENAME IS 'Таблица';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.FIELD_ID IS 'Поле "ID"';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.FIELD_MESTO IS 'Поле "Место оформления"';

COMMENT ON COLUMN MASTER.KLS_DOC_TYPES.FIELD_ID_TYPE IS 'Тип поля ID';



--
-- KLS_DOG_PARUS  (Table) 
--
CREATE TABLE MASTER.KLS_DOG_PARUS
(
  BASE_NUMB     VARCHAR2(20 BYTE),
  DOG_ID        NUMBER(10),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  NAME_PLAT     VARCHAR2(50 BYTE),
  IS_ACTUAL     NUMBER(1)                       DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOG_PARUS IS 'Связь договоро из Паруса и Финансов';

COMMENT ON COLUMN MASTER.KLS_DOG_PARUS.BASE_NUMB IS 'N договора из Паруса';

COMMENT ON COLUMN MASTER.KLS_DOG_PARUS.DOG_ID IS 'ID договора из Финансов';



--
-- KLS_DOVER  (Table) 
--
CREATE TABLE MASTER.KLS_DOVER
(
  ID          NUMBER(10)                        NOT NULL,
  NUM_DOVER   VARCHAR2(15 BYTE),
  DATE_DOVER  DATE,
  DATE_END    DATE,
  FIO_DOVER   VARCHAR2(50 BYTE),
  DOLJ_DOVER  VARCHAR2(30 BYTE),
  PREDPR_ID   NUMBER(6),
  IS_LOADED   NUMBER(1)                         DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_DOVER_DATES  (Table) 
--
CREATE TABLE MASTER.KLS_DOVER_DATES
(
  BEGIN_DATE  DATE,
  END_DATE    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_DOV_LINE  (Table) 
--
CREATE TABLE MASTER.KLS_DOV_LINE
(
  ID           NUMBER(10)                       NOT NULL,
  VES          NUMBER(14,3),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  DOVER_ID     NUMBER(10),
  IS_LOADED    NUMBER(1)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_EVENT  (Table) 
--
CREATE TABLE MASTER.KLS_EVENT
(
  ID          NUMBER(2)                         NOT NULL,
  EVENT_NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_FORMA_2  (Table) 
--
CREATE TABLE MASTER.KLS_FORMA_2
(
  ID           NUMBER(10)                       NOT NULL,
  NAME         VARCHAR2(50 BYTE),
  FOX_FORMA_2  NUMBER(2),
  GRUZ1_NAME   VARCHAR2(50 BYTE),
  GRUZ2_NAME   VARCHAR2(50 BYTE),
  VZISK1_NAME  VARCHAR2(50 BYTE),
  VZISK2_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_FORMA_2.ID IS 'Вид расчета тарифа';

COMMENT ON COLUMN MASTER.KLS_FORMA_2.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_FORMA_2.GRUZ1_NAME IS 'Под наименованием груза';

COMMENT ON COLUMN MASTER.KLS_FORMA_2.GRUZ2_NAME IS 'Под наименованием груза';

COMMENT ON COLUMN MASTER.KLS_FORMA_2.VZISK1_NAME IS 'В графе "Взыскано"';

COMMENT ON COLUMN MASTER.KLS_FORMA_2.VZISK2_NAME IS 'В графе "Взыскано"';



--
-- KLS_FORMNAKL  (Table) 
--
CREATE TABLE MASTER.KLS_FORMNAKL
(
  ID            NUMBER(2)                       NOT NULL,
  FLG_DOSTUP    NUMBER(1),
  FORM_NAME     VARCHAR2(30 BYTE),
  FLG_GROUP     NUMBER(1),
  IS_RUS        NUMBER(1)                       DEFAULT 0,
  LOAD_TYPE_ID  NUMBER(10)                      DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_FORMNAKL.IS_RUS IS '1-российские накладные';



--
-- KLS_FORMSHAB  (Table) 
--
CREATE TABLE MASTER.KLS_FORMSHAB
(
  ID            NUMBER(10)                      NOT NULL,
  FORMNAKL_ID   NUMBER(10),
  NAME          VARCHAR2(30 BYTE),
  DOSTUP        NUMBER(1)                       DEFAULT 0,
  FILENAME      VARCHAR2(20 BYTE),
  IS_RUS        NUMBER(1)                       DEFAULT 0,
  IS_OPD        NUMBER(1)                       DEFAULT 0,
  LOAD_TYPE_ID  NUMBER(10),
  P_RAZR_MPS    NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_FORMSHAB IS 'Формы накладных';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.ID IS 'Шаблон накладной';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.FORMNAKL_ID IS 'Форма накладной';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.DOSTUP IS '1-Доступна';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.FILENAME IS 'Имя файла';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.IS_RUS IS '1-Русская';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.IS_OPD IS '1-ОПД';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.KLS_FORMSHAB.P_RAZR_MPS IS '1-печатать разрешение МПС на курсирование';



--
-- KLS_GD_GROUP  (Table) 
--
CREATE TABLE MASTER.KLS_GD_GROUP
(
  ID    NUMBER(10)                              NOT NULL,
  ABBR  VARCHAR2(10 BYTE),
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_GD_GROUP IS 'Группы ж/д грузов';

COMMENT ON COLUMN MASTER.KLS_GD_GROUP.ID IS 'Группа ж/д груза';

COMMENT ON COLUMN MASTER.KLS_GD_GROUP.ABBR IS 'Код';

COMMENT ON COLUMN MASTER.KLS_GD_GROUP.NAME IS 'Наименование';



--
-- KLS_GDOR  (Table) 
--
CREATE TABLE MASTER.KLS_GDOR
(
  ID              NUMBER(2)                     NOT NULL,
  GDOR_NAME       VARCHAR2(25 BYTE),
  SHORT_NAME      VARCHAR2(8 BYTE),
  ISU_POSTAV_KOD  VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GD_OTPR  (Table) 
--
CREATE TABLE MASTER.KLS_GD_OTPR
(
  ID    NUMBER(10)                              NOT NULL,
  TAG   VARCHAR2(10 BYTE),
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_GD_OTPR IS 'Признаки отправки';

COMMENT ON COLUMN MASTER.KLS_GD_OTPR.ID IS 'Признак отправки';

COMMENT ON COLUMN MASTER.KLS_GD_OTPR.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.KLS_GD_OTPR.NAME IS 'Наименование';



--
-- KLS_GD_PODACH  (Table) 
--
CREATE TABLE MASTER.KLS_GD_PODACH
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GD_PRICH  (Table) 
--
CREATE TABLE MASTER.KLS_GD_PRICH
(
  ID      NUMBER(10)                            NOT NULL,
  NAME    VARCHAR2(100 BYTE),
  SORTBY  NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GD_PRINVAG  (Table) 
--
CREATE TABLE MASTER.KLS_GD_PRINVAG
(
  ID    NUMBER(10)                              NOT NULL,
  ABBR  VARCHAR2(1 BYTE),
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GD_SOBSTVVAG  (Table) 
--
CREATE TABLE MASTER.KLS_GD_SOBSTVVAG
(
  ID           NUMBER(12),
  NAME         VARCHAR2(30 BYTE),
  VAGOWNER_ID  NUMBER(10),
  LOAD_ABBR    VARCHAR2(3 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GD_SOOB  (Table) 
--
CREATE TABLE MASTER.KLS_GD_SOOB
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GD_TIP_PATH  (Table) 
--
CREATE TABLE MASTER.KLS_GD_TIP_PATH
(
  ID           NUMBER(10)                       NOT NULL,
  NAME_STAN    VARCHAR2(100 BYTE),
  NAME_VETKA   VARCHAR2(100 BYTE),
  NAME_POLUCH  VARCHAR2(100 BYTE),
  NAME_STATE   VARCHAR2(100 BYTE),
  SORTBY       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_GD_TIP_PATH IS 'Типы пунктов маршрута';

COMMENT ON COLUMN MASTER.KLS_GD_TIP_PATH.ID IS 'Тип пункта маршрута';

COMMENT ON COLUMN MASTER.KLS_GD_TIP_PATH.NAME_STAN IS 'Наименование типа станции';

COMMENT ON COLUMN MASTER.KLS_GD_TIP_PATH.NAME_VETKA IS 'Наименование типа ветки';

COMMENT ON COLUMN MASTER.KLS_GD_TIP_PATH.NAME_POLUCH IS 'Наименование типа получателя';

COMMENT ON COLUMN MASTER.KLS_GD_TIP_PATH.NAME_STATE IS 'Наименование типа страны';

COMMENT ON COLUMN MASTER.KLS_GD_TIP_PATH.SORTBY IS 'Порядок';



--
-- KLS_GD_VID_OTPR  (Table) 
--
CREATE TABLE MASTER.KLS_GD_VID_OTPR
(
  ID    NUMBER(10)                              NOT NULL,
  TAG   VARCHAR2(10 BYTE),
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_GD_VID_OTPR IS 'Виды отправки';

COMMENT ON COLUMN MASTER.KLS_GD_VID_OTPR.ID IS 'Вид отправки';

COMMENT ON COLUMN MASTER.KLS_GD_VID_OTPR.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.KLS_GD_VID_OTPR.NAME IS 'Наименование';



--
-- KLS_GOSPROG  (Table) 
--
CREATE TABLE MASTER.KLS_GOSPROG
(
  ID            NUMBER(2)                       NOT NULL,
  GOSPROG_NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GOST  (Table) 
--
CREATE TABLE MASTER.KLS_GOST
(
  ID    NUMBER(2)                               NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_GOST IS 'ГОСТы';



--
-- KLS_GOST_OLD  (Table) 
--
CREATE TABLE MASTER.KLS_GOST_OLD
(
  PL1   NUMBER(6,4)                             DEFAULT 0                     NOT NULL,
  PL2   NUMBER(6,4)                             DEFAULT 0                     NOT NULL,
  KOEF  NUMBER(8,6)                             DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GOST_390085  (Table) 
--
CREATE TABLE MASTER.KLS_GOST_390085
(
  TEMPER  NUMBER(6,2),
  PL20    NUMBER(6,4),
  KOEF    NUMBER(6,4)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GOST_8595_54A  (Table) 
--
CREATE TABLE MASTER.KLS_GOST_8595_54A
(
  TEMPER  NUMBER(6,1),
  PL15    NUMBER(6,4),
  KOEF    NUMBER(6,4)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GOST_8595_54B  (Table) 
--
CREATE TABLE MASTER.KLS_GOST_8595_54B
(
  TEMPER  NUMBER(6,1),
  PL15    NUMBER(6,4),
  KOEF    NUMBER(6,4)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_GP_NAPR  (Table) 
--
CREATE TABLE MASTER.KLS_GP_NAPR
(
  ID              NUMBER(10)                    NOT NULL,
  NAME            VARCHAR2(30 BYTE),
  GOSPROG_ID      NUMBER(2),
  KSSS_ID         VARCHAR2(10 BYTE),
  PARENT_KSSS_ID  VARCHAR2(10 BYTE),
  PARENT_NAME     VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_GP_NAPR.ID IS 'Получатель по госпрограмме';

COMMENT ON COLUMN MASTER.KLS_GP_NAPR.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_GP_NAPR.KSSS_ID IS 'Код КССС';

COMMENT ON COLUMN MASTER.KLS_GP_NAPR.PARENT_KSSS_ID IS 'Код КССС для отчета';

COMMENT ON COLUMN MASTER.KLS_GP_NAPR.PARENT_NAME IS 'Наименование для отчета';



--
-- KLS_GROUPDOG  (Table) 
--
CREATE TABLE MASTER.KLS_GROUPDOG
(
  ID             NUMBER(2)                      NOT NULL,
  GROUPDOG_NAME  VARCHAR2(40 BYTE),
  FIN_NAME1      VARCHAR2(40 BYTE),
  FIN_NAME2      VARCHAR2(40 BYTE),
  ISU_KOD        NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_GROUPDOG.ISU_KOD IS 'Вид договора из ИСУ Переработка';



--
-- KLS_GTD  (Table) 
--
CREATE TABLE MASTER.KLS_GTD
(
  GTD       VARCHAR2(20 BYTE)                   NOT NULL,
  DATE_GTD  DATE,
  N_NP      VARCHAR2(24 BYTE),
  T_GTD     VARCHAR2(1 BYTE),
  PRED_DEC  VARCHAR2(20 BYTE),
  KVED      VARCHAR2(10 BYTE),
  KOLG      NUMBER(10,3),
  STOF      NUMBER(12,2),
  STOS      NUMBER(12,2),
  STOT      NUMBER(12,2),
  V_10      NUMBER(12,2),
  V_11      NUMBER(12,2),
  V_25      NUMBER(12,2),
  V_26      NUMBER(12,2),
  KURS      NUMBER(9,4),
  DVYP      DATE,
  TAMG      VARCHAR2(5 BYTE),
  KNMT      NUMBER(2),
  OTVL      VARCHAR2(24 BYTE),
  NAGN      VARCHAR2(24 BYTE),
  DKTS      DATE,
  S_GR      VARCHAR2(24 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_HOLDING  (Table) 
--
CREATE TABLE MASTER.KLS_HOLDING
(
  ID            NUMBER(3)                       NOT NULL,
  HOLDING_NAME  VARCHAR2(50 BYTE),
  BOSS          VARCHAR2(3 BYTE),
  SORTBY        NUMBER(10)                      DEFAULT 99
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_HOLDING.SORTBY IS 'Порядок';



--
-- KLS_INCOTERM  (Table) 
--
CREATE TABLE MASTER.KLS_INCOTERM
(
  ID       NUMBER(10)                           NOT NULL,
  TAG      VARCHAR2(3 BYTE),
  NAME     VARCHAR2(50 BYTE),
  KSSS_ID  NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_INCOTERM IS 'Условия поставки';



--
-- KLS_INSURE  (Table) 
--
CREATE TABLE MASTER.KLS_INSURE
(
  ID             NUMBER(5)                      NOT NULL,
  INSURE_NUMBER  VARCHAR2(25 BYTE),
  INSURE_YEAR    NUMBER(4),
  INSURE_DATE    DATE,
  INSURE_NAME    VARCHAR2(15 BYTE),
  FULL_SUM       NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ISKL_TAR  (Table) 
--
CREATE TABLE MASTER.KLS_ISKL_TAR
(
  ID         NUMBER(10)                         NOT NULL,
  K_TAR      VARCHAR2(10 BYTE),
  K_TAR_TXT  VARCHAR2(30 BYTE),
  GR3_TXT    VARCHAR2(60 BYTE),
  GR4_TXT    VARCHAR2(60 BYTE),
  VZISK3     VARCHAR2(40 BYTE),
  VZISK4     VARCHAR2(40 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_ISKL_TAR IS 'Исключительные тарифы';



--
-- KLS_KALIBR  (Table) 
--
CREATE TABLE MASTER.KLS_KALIBR
(
  ID             VARCHAR2(5 BYTE)               NOT NULL,
  KALIBR_NAME    VARCHAR2(20 BYTE),
  VAGON_MAX_VES  NUMBER(10,3),
  VAGON_AXES     NUMBER(1),
  KOD_ISU        VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_KODIF  (Table) 
--
CREATE TABLE MASTER.KLS_KODIF
(
  ID          NUMBER(5)                         NOT NULL,
  NAME        VARCHAR2(100 BYTE),
  FIELD_TYPE  VARCHAR2(1 BYTE),
  FIELD_LEN   NUMBER(3),
  FIELD_DEC   NUMBER(3),
  FIELD_SVED  VARCHAR2(10 BYTE),
  KOD_MOSCOW  NUMBER(10),
  ID_R3       VARCHAR2(20 BYTE),
  ID_SAYBOLT  VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_KODIF_PASP_UNP  (Table) 
--
CREATE TABLE MASTER.KLS_KODIF_PASP_UNP
(
  KOD_POKAZATEL  NUMBER                         NOT NULL,
  KODIF_ID       NUMBER(10),
  IS_AUTO_LINK   NUMBER(1)                      DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_KTS  (Table) 
--
CREATE TABLE MASTER.KLS_KTS
(
  KTS  VARCHAR2(8 BYTE)                         NOT NULL,
  GTD  VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_LOAD_TYPE_MOS  (Table) 
--
CREATE TABLE MASTER.KLS_LOAD_TYPE_MOS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_MASTER_POGR  (Table) 
--
CREATE TABLE MASTER.KLS_MASTER_POGR
(
  ID    NUMBER(7),
  NAME  VARCHAR2(50 BYTE),
  POST  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_MASTER_POGR IS 'Справочник мастеров погрузки(для печати накладных из Модуля отгрузки)';

COMMENT ON COLUMN MASTER.KLS_MASTER_POGR.NAME IS 'ФИО мастера погрузки';

COMMENT ON COLUMN MASTER.KLS_MASTER_POGR.POST IS 'Должность';



--
-- KLS_MASTER_SGS  (Table) 
--
CREATE TABLE MASTER.KLS_MASTER_SGS
(
  ID    NUMBER(7),
  NAME  VARCHAR2(50 BYTE),
  POST  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_MASTER_SGS IS 'Справочник представителей СЖС (для печати автов об остатках нефти из Модуля отгрузки)';

COMMENT ON COLUMN MASTER.KLS_MASTER_SGS.NAME IS 'ФИО ';

COMMENT ON COLUMN MASTER.KLS_MASTER_SGS.POST IS 'Должность';



--
-- KLS_MESTO  (Table) 
--
CREATE TABLE MASTER.KLS_MESTO
(
  ID              NUMBER(2)                     NOT NULL,
  MESTO_NAME      VARCHAR2(35 BYTE),
  MESTO_SVEDNAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_NAPR_MOS  (Table) 
--
CREATE TABLE MASTER.KLS_NAPR_MOS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_NAPR_POST  (Table) 
--
CREATE TABLE MASTER.KLS_NAPR_POST
(
  ID       NUMBER(10)                           NOT NULL,
  NAME     VARCHAR2(50 BYTE),
  IS_VIEW  NUMBER(1),
  SORTBY   NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_NAPR_POST IS 'Направления поставки';



--
-- KLS_NARIAD  (Table) 
--
CREATE TABLE MASTER.KLS_NARIAD
(
  ID            NUMBER(10)                      NOT NULL,
  NUM_NAR       VARCHAR2(15 BYTE),
  DATE_NAR      DATE,
  DATE_END      DATE,
  DOVER_ID      NUMBER(10),
  MESTO_ID      NUMBER(2),
  IS_LOADED     NUMBER(1)                       DEFAULT 0,
  LOAD_TYPE_ID  NUMBER(10),
  DATE_BEG      DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_NARIAD IS 'Разрешения на отгрузку / Наряды';

COMMENT ON COLUMN MASTER.KLS_NARIAD.NUM_NAR IS '№ наряда';

COMMENT ON COLUMN MASTER.KLS_NARIAD.DATE_NAR IS 'Дата наряда';

COMMENT ON COLUMN MASTER.KLS_NARIAD.DATE_END IS 'Дата окончания действия';

COMMENT ON COLUMN MASTER.KLS_NARIAD.DOVER_ID IS 'Доверенность';

COMMENT ON COLUMN MASTER.KLS_NARIAD.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.KLS_NARIAD.IS_LOADED IS '1 - загружен из DBF';

COMMENT ON COLUMN MASTER.KLS_NARIAD.LOAD_TYPE_ID IS 'тип транспортировки';

COMMENT ON COLUMN MASTER.KLS_NARIAD.DATE_BEG IS 'С даты';



--
-- KLS_NAR_LINE  (Table) 
--
CREATE TABLE MASTER.KLS_NAR_LINE
(
  ID         NUMBER(10)                         NOT NULL,
  NARIAD_ID  NUMBER(10),
  NOM_ZD     VARCHAR2(12 BYTE),
  IS_LOADED  NUMBER(1)                          DEFAULT 0,
  VES        NUMBER(14,3)                       DEFAULT 0,
  KOL        NUMBER(5)                          DEFAULT 0,
  FACT_VES   NUMBER(14,3)                       DEFAULT 0,
  FACT_KOL   NUMBER(5)                          DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_NAR_LINE IS 'Позиции наряда / разрешения на отгрузку';

COMMENT ON COLUMN MASTER.KLS_NAR_LINE.NARIAD_ID IS 'ID наряда';

COMMENT ON COLUMN MASTER.KLS_NAR_LINE.NOM_ZD IS '№ задания';

COMMENT ON COLUMN MASTER.KLS_NAR_LINE.VES IS 'Вес к отгрузке, тн';

COMMENT ON COLUMN MASTER.KLS_NAR_LINE.KOL IS 'Кол-во к отгрузке';

COMMENT ON COLUMN MASTER.KLS_NAR_LINE.FACT_VES IS 'Фактически отгружено, тн';

COMMENT ON COLUMN MASTER.KLS_NAR_LINE.FACT_KOL IS 'Фактически отгружено, кол-во';



--
-- KLS_NAZN_OTG  (Table) 
--
CREATE TABLE MASTER.KLS_NAZN_OTG
(
  ID             NUMBER(2)                      NOT NULL,
  NAZN_OTG_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ORATODBF  (Table) 
--
CREATE TABLE MASTER.KLS_ORATODBF
(
  ID                VARCHAR2(15 BYTE)           NOT NULL,
  SOURCEQUERY       CLOB,
  DESTINATIONTABLE  VARCHAR2(150 BYTE),
  COPYTOTABLE       VARCHAR2(150 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ORG_KIND  (Table) 
--
CREATE TABLE MASTER.KLS_ORG_KIND
(
  ID               NUMBER(10)                   NOT NULL,
  NAME             VARCHAR2(70 BYTE),
  GROUP_KIND_ID    NUMBER(10),
  GROUP_KIND_NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_ORG_KIND.NAME IS 'вид ОСЕ';

COMMENT ON COLUMN MASTER.KLS_ORG_KIND.GROUP_KIND_ID IS 'Группа объектов';

COMMENT ON COLUMN MASTER.KLS_ORG_KIND.GROUP_KIND_NAME IS 'Группа объектов';



--
-- KLS_ORG_KIND_RELATIONS  (Table) 
--
CREATE TABLE MASTER.KLS_ORG_KIND_RELATIONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ORG_TYPE  (Table) 
--
CREATE TABLE MASTER.KLS_ORG_TYPE
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(70 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_ORG_TYPE.NAME IS 'тип ОСЕ';



--
-- KLS_OTGR_POST_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_OTGR_POST_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_OTGR_POST_KONS IS 'Конс.отчетность: Отгрузка/поставка';

COMMENT ON COLUMN MASTER.KLS_OTGR_POST_KONS.ID IS 'Отгрузка_поставка';

COMMENT ON COLUMN MASTER.KLS_OTGR_POST_KONS.NAME IS 'Наименование';



--
-- KLS_OWNERSHIP  (Table) 
--
CREATE TABLE MASTER.KLS_OWNERSHIP
(
  ID              NUMBER(3)                     NOT NULL,
  OWNERSHIP_NAME  VARCHAR2(70 BYTE),
  ANALIT_ID       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PASP  (Table) 
--
CREATE TABLE MASTER.KLS_PASP
(
  ID           VARCHAR2(9 BYTE)                 NOT NULL,
  PASP_NUM     VARCHAR2(15 BYTE),
  REZ_NUM      VARCHAR2(15 BYTE),
  PASP_DATE    DATE,
  INSPEKTOR    VARCHAR2(20 BYTE),
  DATE_OFORML  DATE,
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  MESTO_ID     NUMBER(2),
  DATEUPLOAD   DATE,
  DATE_VIR     DATE,
  PASP_TYP     NUMBER(2)                        DEFAULT 1,
  VZLIV        NUMBER(10,2)                     DEFAULT 0,
  PERER_ID     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PASP IS 'Паспорта';

COMMENT ON COLUMN MASTER.KLS_PASP.ID IS 'Паспорт';

COMMENT ON COLUMN MASTER.KLS_PASP.PASP_NUM IS 'N паспорта';

COMMENT ON COLUMN MASTER.KLS_PASP.REZ_NUM IS 'N резервуара';

COMMENT ON COLUMN MASTER.KLS_PASP.PASP_DATE IS 'Дата выписки паспорта';

COMMENT ON COLUMN MASTER.KLS_PASP.INSPEKTOR IS 'Инспектор';

COMMENT ON COLUMN MASTER.KLS_PASP.DATE_OFORML IS 'Дата ввода в систему';

COMMENT ON COLUMN MASTER.KLS_PASP.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.KLS_PASP.MESTO_ID IS 'Место ввода';

COMMENT ON COLUMN MASTER.KLS_PASP.DATEUPLOAD IS 'Дата загрузки';

COMMENT ON COLUMN MASTER.KLS_PASP.DATE_VIR IS 'Дата изготовления продукта';

COMMENT ON COLUMN MASTER.KLS_PASP.PASP_TYP IS 'Тип паспорта (1-на отгрузку, 2-резервуарный)';

COMMENT ON COLUMN MASTER.KLS_PASP.VZLIV IS 'Взлив в см';

COMMENT ON COLUMN MASTER.KLS_PASP.PERER_ID IS 'Переработчик / производитель';



--
-- KLS_PASP_INSP  (Table) 
--
CREATE TABLE MASTER.KLS_PASP_INSP
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PAYDELAY  (Table) 
--
CREATE TABLE MASTER.KLS_PAYDELAY
(
  ID             NUMBER(2)                      NOT NULL,
  PAYDELAY_NAME  VARCHAR2(35 BYTE),
  SHORT_NAME     VARCHAR2(6 BYTE),
  ISU_KOD        VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_PAYDELAY.ISU_KOD IS 'Код отсрочки платежа в ИСУ Переработка';



--
-- KLS_PAYFORM_GRP  (Table) 
--
CREATE TABLE MASTER.KLS_PAYFORM_GRP
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PERTYPE  (Table) 
--
CREATE TABLE MASTER.KLS_PERTYPE
(
  ID            NUMBER(3)                       NOT NULL,
  PERTYPE_NAME  VARCHAR2(50 BYTE),
  BOSS          NUMBER(3),
  SORTBY        NUMBER(10)                      DEFAULT 99
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PERTYPE IS 'Классификатор предприятий по видам деятельности (ОТРАСЛЬ)';

COMMENT ON COLUMN MASTER.KLS_PERTYPE.SORTBY IS '№ по порядку';



--
-- KLS_PLAN_KIND  (Table) 
--
CREATE TABLE MASTER.KLS_PLAN_KIND
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_PLAN_KIND.NAME IS 'Наименование';



--
-- KLS_PLANSTRU  (Table) 
--
CREATE TABLE MASTER.KLS_PLANSTRU
(
  ID               NUMBER(20)                   NOT NULL,
  BEGIN_DATE       DATE,
  END_DATE         DATE,
  NAME             VARCHAR2(50 BYTE),
  LEVEL_POS        NUMBER(5),
  INPUT_DATE       DATE,
  KOD_SGR          NUMBER(3),
  KOD_SPG          NUMBER(3),
  KOD_RZD          NUMBER(3),
  KOD_PRZ          NUMBER(3),
  KOD_GRP          NUMBER(3),
  KOD_PGR          NUMBER(3),
  PARENT_ID        NUMBER(20),
  NAZN_OTG_ID      NUMBER(2),
  VIEW_LEVEL       NUMBER(2),
  REGION_ID        NUMBER(10),
  ORG_KIND_ID      NUMBER(10),
  TIP_REAL_ID      NUMBER(10),
  FOR_ID           NUMBER(3)                    DEFAULT 0,
  FOR_NAME         VARCHAR2(60 BYTE),
  FOR_MOS_ID       NUMBER(20),
  SPF_GROUP_ORDER  NUMBER(2),
  SPF_GROUP_NAME   VARCHAR2(30 BYTE),
  SPF_ORDER        NUMBER(2),
  SPF_NAME         VARCHAR2(30 BYTE),
  LUKOIL_ID        VARCHAR2(10 BYTE),
  IS_RESURS        NUMBER(1)                    DEFAULT 0,
  IS_TO_HRAN       NUMBER(1)                    DEFAULT 0,
  POS_PREDPR_ID    NUMBER(10),
  ISU_KOD          VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.REGION_ID IS 'Регион';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.ORG_KIND_ID IS 'Вид подразделения (1-Нефтебаза, 5-АЗС)';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.TIP_REAL_ID IS 'Тип реализации (1-реализация, 2-транзит)';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.FOR_ID IS 'Порядок ДЛЯ''ки';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.FOR_NAME IS 'Наименование ДЛЯ''ки';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.FOR_MOS_ID IS 'ID плана поставки для Москвы';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.SPF_GROUP_ORDER IS 'Порядок группы позиций';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.SPF_GROUP_NAME IS 'Группа позиций';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.SPF_ORDER IS 'Порядок подгруппы позиций';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.SPF_NAME IS 'Подгруппа позиций';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.LUKOIL_ID IS 'Код плана для Москвы';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.IS_RESURS IS 'Признак нераспределенного ресурса';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.IS_TO_HRAN IS '1-Отгрузка на хранение';

COMMENT ON COLUMN MASTER.KLS_PLANSTRU.POS_PREDPR_ID IS 'Контрагент';



--
-- KLS_PREDPR_AKCIZ  (Table) 
--
CREATE TABLE MASTER.KLS_PREDPR_AKCIZ
(
  ID              NUMBER(10)                    NOT NULL,
  PLAT_ID         NUMBER(10),
  DATE_BEG        DATE,
  DATE_END        DATE,
  EX_SVID         NUMBER(10)                    DEFAULT 0,
  EX_SVID_PREF    VARCHAR2(15 BYTE),
  EX_SVID_NUMB    VARCHAR2(30 BYTE),
  DATE_CANCEL     DATE,
  DATE_GIVE       DATE,
  IS_OPT          NUMBER(1)                     DEFAULT 1,
  IS_ROZN         NUMBER(1)                     DEFAULT 1,
  PROD_GROUPS_ID  NUMBER(10)                    DEFAULT 114,
  NAPR_POST_ID    NUMBER(10)                    DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PREDPR_AKCIZ IS 'Периоды действия акцизных свидетельств';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.PLAT_ID IS 'Плательщик';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.DATE_BEG IS 'С даты';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.DATE_END IS 'По дату';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.EX_SVID IS 'Признак действия акцизного свидетельства';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.EX_SVID_PREF IS 'Серия';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.EX_SVID_NUMB IS 'Номер';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.DATE_CANCEL IS 'Дата аннулирования';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.DATE_GIVE IS 'Дата выдачи';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.IS_OPT IS 'Опт';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.IS_ROZN IS 'Розница';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.PROD_GROUPS_ID IS 'Группа продуктов';

COMMENT ON COLUMN MASTER.KLS_PREDPR_AKCIZ.NAPR_POST_ID IS 'Направление поставки';



--
-- KLS_PREDPR_CLASS  (Table) 
--
CREATE TABLE MASTER.KLS_PREDPR_CLASS
(
  ID        NUMBER(10)                          NOT NULL,
  NAME      VARCHAR2(100 BYTE),
  KOD_STAT  NUMBER(10),
  KOD_MOSC  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PREDPR_CLASS IS 'Классификатор предприятий по видам хоз.деятельности (МИНИСТЕРСТВА и ВЕДОМСТВА)';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CLASS.ID IS 'Классификатор предприятий';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CLASS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CLASS.KOD_STAT IS 'Код статистики';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CLASS.KOD_MOSC IS 'Код для Москвы';



--
-- KLS_PRICHIN  (Table) 
--
CREATE TABLE MASTER.KLS_PRICHIN
(
  ID         NUMBER,
  KOD_CLASS  NUMBER,
  KOD_GROUP  NUMBER,
  NAME       VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PRIORITY_MONTH_REESTR  (Table) 
--
CREATE TABLE MASTER.KLS_PRIORITY_MONTH_REESTR
(
  ID          NUMBER(10)                        NOT NULL,
  NAME        VARCHAR2(50 BYTE),
  SHORT_NAME  VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PRIORITY_MONTH_REESTR IS 'Справочник приоритетов заданий в реестре';

COMMENT ON COLUMN MASTER.KLS_PRIORITY_MONTH_REESTR.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_PRIORITY_MONTH_REESTR.NAME IS 'Наименование';



--
-- KLS_PROD_AKCIZ  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_AKCIZ
(
  FROM_DATE       DATE                          NOT NULL,
  TO_DATE         DATE                          NOT NULL,
  PROD_GROUPS_ID  NUMBER(10)                    NOT NULL,
  VALUE           NUMBER(15,6)                  DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_AKCIZ IS 'Ставки акциза';



--
-- KLS_PROD_GR_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_GR_KONS
(
  ID_GR           VARCHAR2(12 BYTE)             NOT NULL,
  NAME            VARCHAR2(30 BYTE),
  ABBR            VARCHAR2(12 BYTE),
  ID_GLOBAL_GR    VARCHAR2(12 BYTE),
  NAME_GLOBAL_GR  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_GR_KONS IS 'Конс.отчетность: Группа нефтепродуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_GR_KONS.ID_GR IS 'Группа нефтепродуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_GR_KONS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_GR_KONS.ABBR IS 'Краткое наименование';



--
-- KLS_PROD_GROUPS  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_GROUPS
(
  ID                NUMBER(10)                  NOT NULL,
  PROD_TYPE_GRP_ID  NUMBER(10),
  GROUP_ORDER       NUMBER(10),
  GROUP_NAME        VARCHAR2(50 BYTE),
  GROUP_VISIBLE     NUMBER(1)                   DEFAULT 1,
  GROUP_ABBR        VARCHAR2(10 BYTE),
  MOSCOW_ID         NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_GROUPS IS 'Виды группировок продуктов в рамках классификации группировок';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.ID IS 'Виды группировок продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.PROD_TYPE_GRP_ID IS 'Тип группировки';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.GROUP_ORDER IS 'Порядок';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.GROUP_NAME IS 'Наименование группы';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.GROUP_VISIBLE IS 'Видима в отчетах';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.GROUP_ABBR IS 'Сокращенное наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS.MOSCOW_ID IS 'Код для Москвы';



--
-- KLS_PROD_GROUPS_DESC  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_GROUPS_DESC
(
  ID                NUMBER(10)                  NOT NULL,
  PROD_ID_NPR       VARCHAR2(5 BYTE),
  PROD_GROUPS_ID    NUMBER(10),
  IS_AUTO_LINK      NUMBER(1)                   DEFAULT 1,
  PROD_TYPE_GRP_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_GROUPS_DESC IS 'Группировки продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS_DESC.ID IS 'Группировки продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS_DESC.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS_DESC.PROD_GROUPS_ID IS 'Вид группировки';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS_DESC.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.KLS_PROD_GROUPS_DESC.PROD_TYPE_GRP_ID IS 'Тип классификации продуктов';



--
-- KLS_PROD_GR2GR_DESC  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_GR2GR_DESC
(
  ID                  NUMBER(10)                NOT NULL,
  PROD_GROUPS_ID_1    NUMBER(10),
  PROD_GROUPS_ID_2    NUMBER(10),
  IS_AUTO_LINK        NUMBER(1)                 DEFAULT 1,
  PROD_TYPE_GRP_ID_1  NUMBER(10),
  PROD_TYPE_GRP_ID_2  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_GR2GR_DESC IS 'Группировки продуктов между собой';

COMMENT ON COLUMN MASTER.KLS_PROD_GR2GR_DESC.ID IS 'Группировки продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_GR2GR_DESC.PROD_GROUPS_ID_1 IS 'Группировка 1';

COMMENT ON COLUMN MASTER.KLS_PROD_GR2GR_DESC.PROD_GROUPS_ID_2 IS 'Группировка 2';

COMMENT ON COLUMN MASTER.KLS_PROD_GR2GR_DESC.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.KLS_PROD_GR2GR_DESC.PROD_TYPE_GRP_ID_1 IS 'Тип группировки 1';

COMMENT ON COLUMN MASTER.KLS_PROD_GR2GR_DESC.PROD_TYPE_GRP_ID_2 IS 'Тип группировки 2';



--
-- KLS_PROD_KONS_GROUPS_DESC  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_KONS_GROUPS_DESC
(
  ID              NUMBER(10)                    NOT NULL,
  PROD_KONS_ID    VARCHAR2(21 BYTE),
  PROD_GROUPS_ID  NUMBER(10),
  IS_AUTO_LINK    NUMBER(1)                     DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_KONS_GROUPS_DESC IS 'Связь "Продукты КО" - "Продукты для диаграмм по КО"';



--
-- KLS_PROD_MOSGRP  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_MOSGRP
(
  ID          VARCHAR2(10 BYTE)                 NOT NULL,
  NAME        VARCHAR2(30 BYTE),
  ORDER_GDPL  NUMBER(2),
  NAME_GDPL   VARCHAR2(30 BYTE),
  COLOR_GDPL  NUMBER(1),
  COLOR_NAME  VARCHAR2(20 BYTE),
  IS_SEND     NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_MOSGRP IS 'Группа н/пр (для Москвы - сообщение ТРАНС)';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.ID IS 'Группа н/пр (для Москвы)';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.ORDER_GDPL IS 'Порядок в сообщении ТРАНС';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.NAME_GDPL IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.COLOR_GDPL IS 'Порядок в сообщении ТРАНС';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.COLOR_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_MOSGRP.IS_SEND IS 'Признак отправки';



--
-- KLS_PROD_NAR  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_NAR
(
  ID         NUMBER(10)                         NOT NULL,
  NAME_NPR   VARCHAR2(40 BYTE),
  ABBR_NPR   VARCHAR2(20 BYTE),
  ORDER_NPR  NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PROD_NOMENKLATOR  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_NOMENKLATOR
(
  MODIF           VARCHAR2(20 BYTE),
  MOD_MODIF       VARCHAR2(20 BYTE),
  NAME_PR         VARCHAR2(100 BYTE),
  KOD_OKP         VARCHAR2(20 BYTE),
  PROD            VARCHAR2(5 BYTE),
  NAME_GROUP      VARCHAR2(100 BYTE),
  PARUS_RN        NUMBER(18)                    NOT NULL,
  PARUS_PRN       NUMBER(18)                    NOT NULL,
  IS_AUTO_LINK    NUMBER(1)                     DEFAULT 1,
  IS_ACTUAL       NUMBER(1)                     DEFAULT 1,
  TAXGR_RN        NUMBER,
  TAXGR_CODE      VARCHAR2(20 BYTE),
  TAXGR_CODE_NEW  VARCHAR2(20 BYTE),
  TAXGR_INCOME    VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_NOMENKLATOR IS 'Связь "Модификация номенклатора (Парус) - Продукт"';



--
-- KLS_PROD_PASP_UNP  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_PASP_UNP
(
  KOD_OIL_PRODUCT  NUMBER                       NOT NULL,
  PROD_ID_NPR      VARCHAR2(5 BYTE),
  IS_AUTO_LINK     NUMBER(1)                    DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PROD_PLAN  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_PLAN
(
  ID           NUMBER(10)                       NOT NULL,
  NAME_NPR     VARCHAR2(40 BYTE),
  ABBR_NPR     VARCHAR2(20 BYTE),
  ORDER_NPR    NUMBER(3),
  PARENT_ID    NUMBER(10),
  FLG_ALLOWED  NUMBER(1)                        DEFAULT 0,
  AVG_FACT_PL  NUMBER(6,4)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_PROD_PLAN.AVG_FACT_PL IS 'Средневзвешенная фактическая плотность';



--
-- KLS_PROD_RAZMET  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_RAZMET
(
  RAZMET        VARCHAR2(30 BYTE)               NOT NULL,
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_RAZMET IS 'Соответствия разметки и продуктов';



--
-- KLS_PROD_TYPE_GRP  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_TYPE_GRP
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_TYPE_GRP IS 'Типы классификации продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_TYPE_GRP.ID IS 'Типы классификации продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_TYPE_GRP.NAME IS 'Наименование';



--
-- KLS_RASST  (Table) 
--
CREATE TABLE MASTER.KLS_RASST
(
  MIN_RASST   NUMBER,
  MAX_RASST   NUMBER,
  NAME_RASST  VARCHAR2(25 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_RIGHTS  (Table) 
--
CREATE TABLE MASTER.KLS_RIGHTS
(
  ID           VARCHAR2(30 BYTE)                NOT NULL,
  DESCRIPT     VARCHAR2(80 BYTE),
  PARENT_ID    VARCHAR2(30 BYTE),
  IMAGE_INDEX  NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ROLE  (Table) 
--
CREATE TABLE MASTER.KLS_ROLE
(
  ID           NUMBER(2)                        NOT NULL,
  PREDPR_ROLE  VARCHAR2(50 BYTE),
  STAN_ROLE    VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_RS  (Table) 
--
CREATE TABLE MASTER.KLS_RS
(
  ID       NUMBER                               NOT NULL,
  RS       VARCHAR2(20 BYTE),
  RS_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_RS IS 'Рассчетные счета УНП';



--
-- KLS_SHABVOZ  (Table) 
--
CREATE TABLE MASTER.KLS_SHABVOZ
(
  ID           NUMBER(10),
  STANOTP_ID   NUMBER(10),
  TEX_PD_ID    NUMBER(10),
  GROTP_ID     NUMBER(6),
  STAN_ID      NUMBER(10),
  VETKA_ID     NUMBER(4),
  POLUCH_ID    NUMBER(6),
  FLG_FORMA_2  NUMBER(10),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  PRIM         VARCHAR2(100 BYTE),
  GR4          VARCHAR2(100 BYTE),
  K_TAR        VARCHAR2(10 BYTE),
  INPUT_DATE   DATE,
  TRANSPORT    VARCHAR2(20 BYTE),
  IS_EXP       NUMBER(1),
  EXPED_ID     NUMBER(6),
  GU12_A_ID    NUMBER(10),
  VZISK_ID     NUMBER(10),
  GROTP_BANK   VARCHAR2(60 BYTE),
  GROTP_RS     VARCHAR2(20 BYTE),
  TEX_PD_BANK  VARCHAR2(60 BYTE),
  TEX_PD_RS    VARCHAR2(20 BYTE),
  SHAB_NUM     NUMBER(10),
  SHAB_DATE    DATE,
  SHAB_NAME    VARCHAR2(30 BYTE),
  DOP_GRINF1   VARCHAR2(80 BYTE),
  DOP_GRINF2   VARCHAR2(80 BYTE),
  VZISK2       VARCHAR2(80 BYTE),
  VZISK3       VARCHAR2(80 BYTE),
  DOP_PLAT     VARCHAR2(60 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_SHABVOZ IS 'Шаблоны накладных на возврат';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.STANOTP_ID IS 'Станция отправления';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.TEX_PD_ID IS 'ТЕХ ПД';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.VETKA_ID IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.POLUCH_ID IS 'Получатель';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.FLG_FORMA_2 IS 'Вид расчета тарифа';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.PROD_ID_NPR IS 'Нефтепродукт';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.PRIM IS 'Примечание';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.GR4 IS 'Графа 4';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.K_TAR IS 'Код искл. тарифа';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.INPUT_DATE IS 'Дата ввода';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.TRANSPORT IS 'N транспорта';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.IS_EXP IS '1-Экспорт, 0-по России';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.GU12_A_ID IS 'Заявка на перевозку';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.GROTP_BANK IS 'Банк грузоотправителя';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.GROTP_RS IS 'Р/с грузоотправителя';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.TEX_PD_BANK IS 'Банк плательщика тарифа';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.TEX_PD_RS IS 'Р/с плательщика тарифа';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.SHAB_NUM IS 'N шаблона';

COMMENT ON COLUMN MASTER.KLS_SHABVOZ.SHAB_DATE IS 'Дата шаблона';



--
-- KLS_STATUS_MONTH_REESTR  (Table) 
--
CREATE TABLE MASTER.KLS_STATUS_MONTH_REESTR
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_STATUS_MONTH_REESTR IS 'Статус реестра заданий';



--
-- KLS_STATUS_ZAKAZ  (Table) 
--
CREATE TABLE MASTER.KLS_STATUS_ZAKAZ
(
  ID     NUMBER(10)                             NOT NULL,
  NAME   VARCHAR2(50 BYTE),
  NAME2  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_STATUS_ZAKAZ IS 'Статус заказа потребителя';

COMMENT ON COLUMN MASTER.KLS_STATUS_ZAKAZ.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_STATUS_ZAKAZ.NAME IS 'Наименование';



--
-- KLS_ST_PRIH_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_ST_PRIH_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_ST_PRIH_KONS IS 'Конс.отчетность: Статьи прихода';

COMMENT ON COLUMN MASTER.KLS_ST_PRIH_KONS.ID IS 'Статья прихода';

COMMENT ON COLUMN MASTER.KLS_ST_PRIH_KONS.NAME IS 'Наименование';



--
-- KLS_ST_RASH_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_ST_RASH_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_ST_RASH_KONS IS 'Конс.отчетность: Статьи расхода';

COMMENT ON COLUMN MASTER.KLS_ST_RASH_KONS.ID IS 'Статья расхода';

COMMENT ON COLUMN MASTER.KLS_ST_RASH_KONS.NAME IS 'Наименование';



--
-- KLS_TABLPOK  (Table) 
--
CREATE TABLE MASTER.KLS_TABLPOK
(
  PROD_ID_NPR  VARCHAR2(5 BYTE)                 NOT NULL,
  KODIF_ID     NUMBER(5)                        NOT NULL,
  NPP          NUMBER(10),
  SORTBY       NUMBER(10),
  NORMTU       VARCHAR2(50 BYTE),
  DATEUPLOAD   DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_TIP_AKCIZ  (Table) 
--
CREATE TABLE MASTER.KLS_TIP_AKCIZ
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(150 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_TIP_AKCIZ IS 'Конс.отчетность: Тип акциза';

COMMENT ON COLUMN MASTER.KLS_TIP_AKCIZ.ID IS 'Тип акциза';

COMMENT ON COLUMN MASTER.KLS_TIP_AKCIZ.NAME IS 'Наименование';



--
-- KLS_TIP_OP_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_TIP_OP_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_TIP_OP_KONS IS 'Конс.отчетность: Типы операций';

COMMENT ON COLUMN MASTER.KLS_TIP_OP_KONS.ID IS 'Тип операции';

COMMENT ON COLUMN MASTER.KLS_TIP_OP_KONS.NAME IS 'Наименование';



--
-- KLS_TIP_REAL_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_TIP_REAL_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_TIP_REAL_KONS IS 'Конс.отчетность: Тип реализации';

COMMENT ON COLUMN MASTER.KLS_TIP_REAL_KONS.ID IS 'Тип реализации';

COMMENT ON COLUMN MASTER.KLS_TIP_REAL_KONS.NAME IS 'Наименование';



--
-- KLS_TYPE_ZAKAZ  (Table) 
--
CREATE TABLE MASTER.KLS_TYPE_ZAKAZ
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_TYPE_ZAKAZ IS 'Типы заказов потребителя';

COMMENT ON COLUMN MASTER.KLS_TYPE_ZAKAZ.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_TYPE_ZAKAZ.NAME IS 'Наименование';



--
-- KLS_UPAK  (Table) 
--
CREATE TABLE MASTER.KLS_UPAK
(
  ID        NUMBER(10)                          NOT NULL,
  NAME      VARCHAR2(30 BYTE),
  ABBR      VARCHAR2(10 BYTE),
  VOL_FAS   NUMBER(10,3),
  KOD_MOSC  VARCHAR2(5 BYTE),
  BAG_ID    NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_UPAK.ID IS 'Упаковка';

COMMENT ON COLUMN MASTER.KLS_UPAK.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_UPAK.ABBR IS 'Краткое наименование';

COMMENT ON COLUMN MASTER.KLS_UPAK.VOL_FAS IS 'Объем';

COMMENT ON COLUMN MASTER.KLS_UPAK.KOD_MOSC IS 'Код для Москвы';

COMMENT ON COLUMN MASTER.KLS_UPAK.BAG_ID IS 'Упаковка (на Эстакаде)';



--
-- KLS_USER  (Table) 
--
CREATE TABLE MASTER.KLS_USER
(
  ID         NUMBER(5)                          NOT NULL,
  USER_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_USL_OPL  (Table) 
--
CREATE TABLE MASTER.KLS_USL_OPL
(
  ID      NUMBER(10)                            NOT NULL,
  NAME    VARCHAR2(40 BYTE),
  KOL_DN  NUMBER(5)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_VAGONTYPE  (Table) 
--
CREATE TABLE MASTER.KLS_VAGONTYPE
(
  ID              NUMBER(2)                     NOT NULL,
  VAGONTYPE_NAME  VARCHAR2(20 BYTE),
  ED_IZM          VARCHAR2(5 BYTE),
  ABBR_NAME       VARCHAR2(3 BYTE),
  ABBR_UNPZ       VARCHAR2(4 BYTE),
  ISU_KOD         VARCHAR2(4 BYTE),
  ISU_KOD2        VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_VAGONTYPE.ISU_KOD IS 'Код ИСУ';



--
-- KLS_VAGON_VZLIV  (Table) 
--
CREATE TABLE MASTER.KLS_VAGON_VZLIV
(
  KALIBR_ID  VARCHAR2(5 BYTE)                   NOT NULL,
  VZLIV      NUMBER(6)                          NOT NULL,
  VOLUME     NUMBER(6)                          DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VAGON_VZLIV IS 'Калибровочные таблицы вагонов';

COMMENT ON COLUMN MASTER.KLS_VAGON_VZLIV.KALIBR_ID IS 'Тип вагона';

COMMENT ON COLUMN MASTER.KLS_VAGON_VZLIV.VZLIV IS 'Взлив';

COMMENT ON COLUMN MASTER.KLS_VAGON_VZLIV.VOLUME IS 'Объем';



--
-- KLS_VAGOWNER_MOS  (Table) 
--
CREATE TABLE MASTER.KLS_VAGOWNER_MOS
(
  ID    NUMBER(10)                              NOT NULL,
  ABBR  VARCHAR2(10 BYTE),
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VAGOWNER_MOS IS 'Владельцы вагонов (ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER_MOS.ABBR IS 'Кратко';



--
-- KLS_VAGOWNER_TYPES  (Table) 
--
CREATE TABLE MASTER.KLS_VAGOWNER_TYPES
(
  ID       NUMBER(10)                           NOT NULL,
  NAME     VARCHAR2(30 BYTE),
  ISU_KOD  NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_VAGOWNER_TYPES.ID IS 'Тип собственности';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER_TYPES.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER_TYPES.ISU_KOD IS 'Код ИСУ';



--
-- KLS_VAG_STATUS  (Table) 
--
CREATE TABLE MASTER.KLS_VAG_STATUS
(
  ID         NUMBER(10)                         NOT NULL,
  NAME       VARCHAR2(20 BYTE),
  FULL_NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VAG_STATUS IS 'Состояние вагона';



--
-- KLS_VAG_STOIM_ISPOLZ  (Table) 
--
CREATE TABLE MASTER.KLS_VAG_STOIM_ISPOLZ
(
  ID           NUMBER(10),
  VAGOWNER_ID  NUMBER(10),
  BEG_DIST     NUMBER(10),
  END_DIST     NUMBER(10),
  STOIMOST     NUMBER(10,2),
  KOL_DN       NUMBER(10),
  BEG_DATE     DATE,
  END_DATE     DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_VALPASP  (Table) 
--
CREATE TABLE MASTER.KLS_VALPASP
(
  PASP_ID     VARCHAR2(9 BYTE)                  NOT NULL,
  KODIF_ID    NUMBER(5)                         NOT NULL,
  QUAL        VARCHAR2(12 BYTE),
  DATEUPLOAD  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_VALSVED  (Table) 
--
CREATE TABLE MASTER.KLS_VALSVED
(
  SVED_ID            VARCHAR2(9 BYTE)           NOT NULL,
  KODIF_ID           NUMBER(5)                  NOT NULL,
  QUAL               VARCHAR2(12 BYTE),
  DATEUPLOAD         DATE                       DEFAULT SYSDATE,
  FROM_DBF           NUMBER(1)                  DEFAULT 0,
  SVED_FLG_OPERDATA  NUMBER(1)                  DEFAULT 1                     NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_VALSVED.FROM_DBF IS 'Признак загрузки из DBF';

COMMENT ON COLUMN MASTER.KLS_VALSVED.SVED_FLG_OPERDATA IS '1-оперативная, 0-документированная';



--
-- KLS_VIDDOG  (Table) 
--
CREATE TABLE MASTER.KLS_VIDDOG
(
  ID           NUMBER(2)                        NOT NULL,
  VIDDOG_NAME  VARCHAR2(30 BYTE),
  IS_AGENT     NUMBER(2),
  ISU_KOD      NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_VIDDOG.ISU_KOD IS 'Вид договора в ИСУ Переработка';



--
-- KLS_VID_POST_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_VID_POST_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VID_POST_KONS IS 'Конс.отчетность: Вид поставки';

COMMENT ON COLUMN MASTER.KLS_VID_POST_KONS.ID IS 'Вид поставки';

COMMENT ON COLUMN MASTER.KLS_VID_POST_KONS.NAME IS 'Наименование';



--
-- KLS_VID_REAL_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_VID_REAL_KONS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VID_REAL_KONS IS 'Конс.отчетность: Вид реализации';

COMMENT ON COLUMN MASTER.KLS_VID_REAL_KONS.ID IS 'Вид реализации';

COMMENT ON COLUMN MASTER.KLS_VID_REAL_KONS.NAME IS 'Наименование';



--
-- KLS_VID_USL  (Table) 
--
CREATE TABLE MASTER.KLS_VID_USL
(
  ID            NUMBER(2)                       NOT NULL,
  USL_NAME      VARCHAR2(82 BYTE),
  OWNERSHIP_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_VOZN_RST  (Table) 
--
CREATE TABLE MASTER.KLS_VOZN_RST
(
  ID             NUMBER(10)                     NOT NULL,
  IS_AGENT       NUMBER(10)                     DEFAULT NULL,
  BEGIN_DATE     DATE,
  END_DATE       DATE,
  ID_GROUP_NPR   VARCHAR2(5 BYTE),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  VAGOWN_TYP_ID  NUMBER(10),
  RAST_MIN       NUMBER(10)                     DEFAULT 0,
  RAST_MAX       NUMBER(10)                     DEFAULT 0,
  CENA_VOZN      NUMBER(15,2)                   DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VOZN_RST IS 'Вознаграждения в зависимости от расстояния';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.ID IS 'Вознаграждение';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.IS_AGENT IS 'Признак вида договора с ЛУКОЙЛом';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.BEGIN_DATE IS 'Действет с';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.END_DATE IS 'Действует по';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.ID_GROUP_NPR IS 'Группа продукта';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.VAGOWN_TYP_ID IS 'Тип собственности';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.RAST_MIN IS 'Минимальное расстояние';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.RAST_MAX IS 'Максимальное расстояние';

COMMENT ON COLUMN MASTER.KLS_VOZN_RST.CENA_VOZN IS 'Цена вознаграждения (руб за тн)';



--
-- KLS_VZISKTXT  (Table) 
--
CREATE TABLE MASTER.KLS_VZISKTXT
(
  ID      NUMBER,
  GR1     VARCHAR2(50 BYTE),
  GR2     VARCHAR2(50 BYTE),
  VZISK1  VARCHAR2(50 BYTE),
  VZISK2  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_ZAKAZ_PERIOD  (Table) 
--
CREATE TABLE MASTER.KLS_ZAKAZ_PERIOD
(
  ID    NUMBER(10),
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_ZAKAZ_PERIOD IS 'Периоды заказов';



--
-- KLS_ZAKAZ_TIP_CORP  (Table) 
--
CREATE TABLE MASTER.KLS_ZAKAZ_TIP_CORP
(
  ID    NUMBER(10),
  NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_ZAKAZ_TIP_CORP IS 'Тип заказа внутрикорпоративный или собственный';



--
-- KLS_ZPU_TYPES  (Table) 
--
CREATE TABLE MASTER.KLS_ZPU_TYPES
(
  ID          NUMBER(10)                        NOT NULL,
  NAME        VARCHAR2(30 BYTE),
  PREFIX      VARCHAR2(30 BYTE),
  PREFIX_NUM  VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_ZPU_TYPES IS 'Справочник типов пломб';

COMMENT ON COLUMN MASTER.KLS_ZPU_TYPES.ID IS 'ID типа пломбы';

COMMENT ON COLUMN MASTER.KLS_ZPU_TYPES.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_ZPU_TYPES.PREFIX IS 'Тип пломбы';

COMMENT ON COLUMN MASTER.KLS_ZPU_TYPES.PREFIX_NUM IS 'Префикс перед номером';



--
-- KSSS_DG  (Table) 
--
CREATE TABLE MASTER.KSSS_DG
(
  KUNNR  VARCHAR2(15 BYTE),
  NAME   VARCHAR2(50 BYTE),
  CITY   VARCHAR2(20 BYTE),
  OKPO   VARCHAR2(15 BYTE),
  INN    VARCHAR2(15 BYTE),
  KSSS   VARCHAR2(15 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KSSS_DG IS 'Грузополучатели из ИСУ поставки';



--
-- KSSS_MATERIAL  (Table) 
--
CREATE TABLE MASTER.KSSS_MATERIAL
(
  MATERIAL_ID         NUMBER,
  MATNR               VARCHAR2(18 BYTE),
  KLS_NAME            VARCHAR2(40 BYTE),
  ZFASOVKA_ID         NUMBER,
  ZCRPOKP             VARCHAR2(30 BYTE),
  MATERIAL_GROUP1     VARCHAR2(10 BYTE),
  MATERIAL_GROUP2     VARCHAR2(10 BYTE),
  MATERIAL_GROUP3     VARCHAR2(10 BYTE),
  MATERIAL_GROUP4     VARCHAR2(10 BYTE),
  MATERIAL_GROUP5     VARCHAR2(10 BYTE),
  PLGTP               VARCHAR2(2 BYTE),
  EXCISE_GROUP_ID     NUMBER,
  EXCISE_GROUP        VARCHAR2(30 BYTE),
  LANGUAGE_ID         NUMBER,
  FULL_NAME           VARCHAR2(288 BYTE),
  MATERIAL_TYPE_ID    VARCHAR2(25 BYTE),
  UNIT_OF_MEASURE_ID  VARCHAR2(3 BYTE),
  ZCRPOST             VARCHAR2(30 BYTE),
  CLASS               VARCHAR2(18 BYTE),
  ATWRT_TU            VARCHAR2(30 BYTE),
  ATWRT_GOST          VARCHAR2(30 BYTE),
  GROUP_S             VARCHAR2(4 BYTE),
  ATWTB               VARCHAR2(30 BYTE),
  PARENT_MATERIAL_ID  NUMBER,
  S_FLAG              NUMBER,
  SPRAS               VARCHAR2(1 BYTE),
  DATE_FROM           VARCHAR2(9 BYTE),
  DATE_TO             VARCHAR2(9 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KSSS_PARTNERS  (Table) 
--
CREATE TABLE MASTER.KSSS_PARTNERS
(
  CONTRAGENT_ID   NUMBER,
  LIFNR           VARCHAR2(10 BYTE),
  KUNNR           VARCHAR2(10 BYTE),
  KLS_NAME        VARCHAR2(140 BYTE),
  SHORTNAME       VARCHAR2(40 BYTE),
  FORM_ID         NUMBER,
  P1              VARCHAR2(16 BYTE),
  STCD2           VARCHAR2(11 BYTE),
  KPP             VARCHAR2(9 BYTE),
  BAHNSK          VARCHAR2(25 BYTE),
  BAHNSD          VARCHAR2(25 BYTE),
  STKZN           NUMBER,
  TYPE_ID         NUMBER,
  DEPENDCOMP_ID   NUMBER,
  HEADCOMP        VARCHAR2(10 BYTE),
  AM_COUNTRY_ID   NUMBER,
  AM_REGION_ID    NUMBER,
  POST_CODE1      VARCHAR2(10 BYTE),
  CITY_NAME       VARCHAR2(255 BYTE),
  STR_SUPPL1      VARCHAR2(255 BYTE),
  STREET          VARCHAR2(255 BYTE),
  HOUSE_NUM1      VARCHAR2(10 BYTE),
  TEL_NUMBER      VARCHAR2(30 BYTE),
  TEL_EXTENDS     VARCHAR2(10 BYTE),
  FAX_NUMBER      VARCHAR2(30 BYTE),
  SMTP_ADDR       VARCHAR2(241 BYTE),
  PA_COUNTRY_ID   NUMBER,
  PA_REGION_ID    NUMBER,
  PO_BOX          VARCHAR2(10 BYTE),
  PO_BOX_LOC      VARCHAR2(255 BYTE),
  STR_SUPPL2      VARCHAR2(40 BYTE),
  LOCATION        VARCHAR2(255 BYTE),
  KVERM           VARCHAR2(30 BYTE),
  S_FLAG          NUMBER(1),
  SPRAS           VARCHAR2(1 BYTE),
  PBG             NUMBER,
  BUDGET_UNIT_ID  NUMBER,
  PROJECT_ID      NUMBER,
  BBUDGMETH       NUMBER,
  BPBGZ_CAT       NUMBER,
  RESIDENT        NUMBER,
  MPS_PROVIDER    NUMBER,
  MPS_KLIENT      NUMBER,
  INDUSTRY_ID     NUMBER,
  DATE_FROM       VARCHAR2(8 BYTE),
  DATE_TO         VARCHAR2(8 BYTE),
  EXTERNAL_ID     NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KSSS_PREDPR  (Table) 
--
CREATE TABLE MASTER.KSSS_PREDPR
(
  KSSS_PREDPR_ID      NUMBER(10)                NOT NULL,
  NAME                VARCHAR2(150 BYTE),
  OKONX               VARCHAR2(20 BYTE),
  KSSS_STATE_ID       NUMBER(10),
  INDEX_J             VARCHAR2(15 BYTE),
  CITY_J              VARCHAR2(30 BYTE),
  STREET_J            VARCHAR2(60 BYTE),
  INN                 VARCHAR2(15 BYTE),
  OKPO                VARCHAR2(10 BYTE),
  KSSS_BANK_STATE_ID  NUMBER(10),
  KSSS_BANK_ID        NUMBER(10),
  KORR                VARCHAR2(20 BYTE),
  PREDPR_ID           NUMBER(10),
  IS_AUTO_LINK        NUMBER(1)                 DEFAULT 1,
  TAG                 VARCHAR2(150 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KSSS_PREDPR IS 'КССС: Справочник предприятий';

COMMENT ON COLUMN MASTER.KSSS_PREDPR.PREDPR_ID IS 'Контрагент из KLS_PREDPR';

COMMENT ON COLUMN MASTER.KSSS_PREDPR.IS_AUTO_LINK IS 'Признак автоматической привязки';



--
-- KSSS_PROD  (Table) 
--
CREATE TABLE MASTER.KSSS_PROD
(
  KSSS_PROD_ID  VARCHAR2(10 BYTE),
  FOX_ID        VARCHAR2(5 BYTE),
  NAIM_NPR      VARCHAR2(25 BYTE),
  MATNR         VARCHAR2(8 BYTE),
  OKDP          VARCHAR2(10 BYTE),
  IS_MAIN       NUMBER(1)                       DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KSSS_PROD.IS_MAIN IS 'Основной';



--
-- KTU_2_NPO_PREF_KVIT  (Table) 
--
CREATE TABLE MASTER.KTU_2_NPO_PREF_KVIT
(
  PREF_NAME  VARCHAR2(20 BYTE)                  NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KTU_2_NPO_PREF_SVED  (Table) 
--
CREATE TABLE MASTER.KTU_2_NPO_PREF_SVED
(
  PREF_NAME  VARCHAR2(20 BYTE)                  NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KTU_2_NPO_SF  (Table) 
--
CREATE TABLE MASTER.KTU_2_NPO_SF
(
  NOM_DOK  NUMBER(10),
  NOM_SF   NUMBER(10),
  NPO_SF   VARCHAR2(200 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KVIT_ALFA  (Table) 
--
CREATE TABLE MASTER.KVIT_ALFA
(
  CON_ID     NUMBER(10)                         NOT NULL,
  KVIT_ID    NUMBER(16)                         NOT NULL,
  VES        NUMBER(19,5)                       DEFAULT 0,
  KOL_NET    NUMBER(19,5)                       DEFAULT 0,
  DATE_OTGR  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KVIT_ALFA.CON_ID IS 'ID экспортной партии';

COMMENT ON COLUMN MASTER.KVIT_ALFA.KVIT_ID IS 'Квитанция';

COMMENT ON COLUMN MASTER.KVIT_ALFA.VES IS 'Вес-брутто';

COMMENT ON COLUMN MASTER.KVIT_ALFA.KOL_NET IS 'Вес-нетто';



--
-- KVIT_DATE_VIR  (Table) 
--
CREATE TABLE MASTER.KVIT_DATE_VIR
(
  ID               NUMBER(10)                   NOT NULL,
  BILL_ID          NUMBER(10),
  KVIT_ID          NUMBER(16),
  BILL_POS_ID      NUMBER(10),
  DATE_VIR         DATE,
  VES              NUMBER(14,6)                 DEFAULT 0,
  VES_CIST         NUMBER(14,6)                 DEFAULT 0,
  VZLIV            NUMBER(6)                    DEFAULT 0,
  KOL_NET          NUMBER(14,6)                 DEFAULT 0,
  SUM_PROD         NUMBER(15,2)                 DEFAULT 0,
  SUM_PROD_NDS     NUMBER(15,2)                 DEFAULT 0,
  SUM_AKCIZ        NUMBER(15,2)                 DEFAULT 0,
  SUM_GSM          NUMBER(15,2)                 DEFAULT 0,
  TARIF_ORIG       NUMBER(15,2)                 DEFAULT 0,
  TARIF_ALT        NUMBER(15,2)                 DEFAULT 0,
  TARIF            NUMBER(15,2)                 DEFAULT 0,
  TARIF_NDS        NUMBER(15,2)                 DEFAULT 0,
  TARIF_GUARD      NUMBER(15,2)                 DEFAULT 0,
  TARIF_GUARD_NDS  NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN11       NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN11_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN12       NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN12_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUM_STRAH        NUMBER(15,2)                 DEFAULT 0,
  NOM_SF_POKUP     VARCHAR2(10 BYTE),
  NOM_DOK_POKUP    NUMBER(10),
  DATE_PLAN        DATE,
  TARIF19          NUMBER(15,2)                 DEFAULT 0,
  VES_BRUTTO       NUMBER(14,6)                 DEFAULT 0,
  OWNERSHIP_ID     NUMBER(1)                    DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KVIT_DATE_VIR IS 'Счета фактуры и вагоны по дате выработки';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.ID IS 'ID';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.KVIT_ID IS 'Цистерна';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.BILL_POS_ID IS 'N позиции';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.DATE_VIR IS 'Дата выработки';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.VES IS 'Вес';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.VZLIV IS 'Взлив или объем';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.KOL_NET IS 'Вес НЕТТО (для НЕФТИ)';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_PROD IS 'За продукт (без НДС)';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_PROD_NDS IS 'НДС';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_GSM IS 'ГСМ';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF_ORIG IS 'Тариф из квитанции';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF_ALT IS 'Тариф по альтернативной схеме';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF IS 'Тариф (без НДС)';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF_NDS IS 'НДС';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF_GUARD IS 'За охрану';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF_GUARD_NDS IS 'НДС за охрану';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_VOZN11 IS 'Вознаграждение за тонну (без НДС)';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_VOZN11_NDS IS 'НДС';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_VOZN12 IS 'Вознаграждение 19-20 (без НДС)';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_VOZN12_NDS IS 'НДС';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.SUM_STRAH IS 'Страховка';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.NOM_SF_POKUP IS 'СФ на приобретение товара';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.NOM_DOK_POKUP IS 'ID сф на приобретение';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.DATE_PLAN IS 'Месяц';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.TARIF19 IS 'Тариф + Вознаграждение';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.VES_BRUTTO IS 'Вес';

COMMENT ON COLUMN MASTER.KVIT_DATE_VIR.OWNERSHIP_ID IS 'Собственный/Приобретенный';



--
-- KVIT_NOMSF  (Table) 
--
CREATE TABLE MASTER.KVIT_NOMSF
(
  KVIT_ID  NUMBER(16),
  NOM_SF   NUMBER(7)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KVIT_NUMAKT  (Table) 
--
CREATE TABLE MASTER.KVIT_NUMAKT
(
  NUM_AKT   NUMBER(10),
  DATE_AKT  DATE,
  NOM_DOK   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KVIT_VNEPLAN  (Table) 
--
CREATE TABLE MASTER.KVIT_VNEPLAN
(
  NOM_Z       VARCHAR2(15 BYTE)                 NOT NULL,
  NUM_KVIT    NUMBER(15)                        NOT NULL,
  IS_VNEPLAN  NUMBER(1)                         DEFAULT 1                     NOT NULL
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- LINK_PARUS_PREDPR  (Table) 
--
CREATE TABLE MASTER.LINK_PARUS_PREDPR
(
  ID            NUMBER(10),
  RN            NUMBER(17),
  PREDPR_ID     NUMBER(6),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.LINK_PARUS_PREDPR.ID IS 'Связь предприятий Паруса и предприятий Финансов';

COMMENT ON COLUMN MASTER.LINK_PARUS_PREDPR.RN IS 'Предприятие Паруса';

COMMENT ON COLUMN MASTER.LINK_PARUS_PREDPR.PREDPR_ID IS 'Предприятие Финансов';

COMMENT ON COLUMN MASTER.LINK_PARUS_PREDPR.IS_AUTO_LINK IS '1 - связь автоматическая';



--
-- LOAD_FILE  (Table) 
--
CREATE TABLE MASTER.LOAD_FILE
(
  LINE  NUMBER(8),
  TEXT  VARCHAR2(80 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- LOAD_FIL_PROD  (Table) 
--
CREATE TABLE MASTER.LOAD_FIL_PROD
(
  ID            NUMBER(10)                      NOT NULL,
  TAG           VARCHAR2(30 BYTE),
  NAME          VARCHAR2(50 BYTE),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  PROD_ID_NPR   VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.LOAD_FIL_PROD IS 'Загружаемые продукты';

COMMENT ON COLUMN MASTER.LOAD_FIL_PROD.ID IS 'Загружаемый продукт';

COMMENT ON COLUMN MASTER.LOAD_FIL_PROD.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.LOAD_FIL_PROD.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.LOAD_FIL_PROD.IS_AUTO_LINK IS 'Признак автомат.привязки';



--
-- LOAD_FIL_REP_TYPES  (Table) 
--
CREATE TABLE MASTER.LOAD_FIL_REP_TYPES
(
  ID           NUMBER(10)                       NOT NULL,
  NAME         VARCHAR2(50 BYTE),
  FILE_PREFIX  VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.LOAD_FIL_REP_TYPES.ID IS 'Тип загружаемого отчета';

COMMENT ON COLUMN MASTER.LOAD_FIL_REP_TYPES.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.LOAD_FIL_REP_TYPES.FILE_PREFIX IS 'Префикс отчета в имени файла';



--
-- MAP_AZS  (Table) 
--
CREATE TABLE MASTER.MAP_AZS
(
  AZS_ID        NUMBER(17),
  X             NUMBER(10),
  Y             NUMBER(10),
  COL           NUMBER(10),
  NOTE          VARCHAR2(255 BYTE),
  VISIBLE       VARCHAR2(1 BYTE),
  SETLEMENT_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MAP_PRIMITIVES  (Table) 
--
CREATE TABLE MASTER.MAP_PRIMITIVES
(
  X          NUMBER(10,2),
  Y          NUMBER(10,2),
  ORDER_REC  NUMBER(10),
  ID         NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MAP_REGIONS  (Table) 
--
CREATE TABLE MASTER.MAP_REGIONS
(
  ID           NUMBER(10)                       NOT NULL,
  FIGURE       NUMBER(10),
  FILLCOLOR    NUMBER(10),
  BORDERCOLOR  NUMBER(10),
  CAPTION      VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MAP_SETTLEMENTS  (Table) 
--
CREATE TABLE MASTER.MAP_SETTLEMENTS
(
  ID             NUMBER(10),
  X              NUMBER(10),
  Y              NUMBER(10),
  NAME           CHAR(255 BYTE),
  SYSTEMID       NUMBER(10)                     DEFAULT 0,
  SIZE1          NUMBER(10),
  SIZE2          NUMBER(10),
  UNDER_LINE     NUMBER(2),
  CAPTION_PLACE  NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MAP_WAYS  (Table) 
--
CREATE TABLE MASTER.MAP_WAYS
(
  SRC_ID   NUMBER(10),
  DEST_ID  NUMBER(10),
  TYPE     NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MASTER_KLS_FIELD_STRUCTURE  (Table) 
--
CREATE TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE
(
  ID                    NUMBER(10)              NOT NULL,
  STRUCTURE_ID          VARCHAR2(50 BYTE),
  FIELD_ID              NUMBER(5),
  FIELD_NAME            VARCHAR2(50 BYTE),
  FIELD_CAPTION         VARCHAR2(50 BYTE),
  FIELD_READONLY        NUMBER(1)               DEFAULT 0,
  MASK                  VARCHAR2(10 BYTE),
  DISPLAY_WIDTH         NUMBER(5),
  FIELD_KIND            NUMBER(1)               DEFAULT 0,
  LOOKUP_SOURCE_QUERY   VARCHAR2(512 BYTE),
  LOOKUP_DISPLAY_FIELD  VARCHAR2(50 BYTE),
  LOOKUP_KEY_FIELD      VARCHAR2(50 BYTE),
  LOOKUP_TABLE          VARCHAR2(30 BYTE),
  FIELD_TYPE            VARCHAR2(1 BYTE),
  REL_OPER              VARCHAR2(4 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE IS 'Описание полей запросов к БД';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.ID IS 'Уникальное ID';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.STRUCTURE_ID IS 'Запрос к БД';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.FIELD_ID IS '№ поля по порядку';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.FIELD_NAME IS 'Имя поля';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.FIELD_CAPTION IS 'Описание';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.FIELD_READONLY IS 'Только для чтения';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.MASK IS 'Маска';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.DISPLAY_WIDTH IS 'Ширина поля в GRID';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.FIELD_KIND IS 'Вид поля (0-Обычное, 1-Lookup, 2-CheckBox)';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.LOOKUP_SOURCE_QUERY IS 'Lookup-запрос';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.LOOKUP_DISPLAY_FIELD IS 'Отображаемое Lookup-поле';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.LOOKUP_KEY_FIELD IS 'Ключевое Lookup-поле';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.LOOKUP_TABLE IS 'Lookup-таблица';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.FIELD_TYPE IS 'Тип поля: N-число, C-символ, D-дата';

COMMENT ON COLUMN MASTER.MASTER_KLS_FIELD_STRUCTURE.REL_OPER IS 'оператор связи';



--
-- MASTER_KLS_STRUCTURE  (Table) 
--
CREATE TABLE MASTER.MASTER_KLS_STRUCTURE
(
  ID                   VARCHAR2(50 BYTE)        NOT NULL,
  CAPTION              VARCHAR2(100 BYTE),
  SORTBY               NUMBER(3),
  TABLE_NAME           VARCHAR2(50 BYTE),
  UNIQUE_FIELD         VARCHAR2(30 BYTE)        DEFAULT 'ID',
  QUERY                VARCHAR2(1024 BYTE),
  START_ORDER          VARCHAR2(50 BYTE),
  SEQUENCES            VARCHAR2(30 BYTE),
  NAME_FIELD           VARCHAR2(30 BYTE),
  NAME_FIELD_2         VARCHAR2(30 BYTE),
  DATE_FIELD_BEGIN     VARCHAR2(15 BYTE),
  DATE_FIELD_END       VARCHAR2(15 BYTE),
  VIEW_TIME            NUMBER(1)                DEFAULT 0,
  FILTER_1             VARCHAR2(30 BYTE),
  FILTER_1_CAPTION     VARCHAR2(50 BYTE),
  FILTER_2             VARCHAR2(30 BYTE),
  FILTER_2_CAPTION     VARCHAR2(50 BYTE),
  FILTER_3             VARCHAR2(30 BYTE),
  FILTER_3_CAPTION     VARCHAR2(50 BYTE),
  ADD_FORM             VARCHAR2(30 BYTE),
  RIGHTS_ID            VARCHAR2(30 BYTE),
  FOX_UPDATE_QUERY     VARCHAR2(300 BYTE),
  FOX_INSERT_QUERY     VARCHAR2(300 BYTE),
  FOX_DELETE_QUERY     VARCHAR2(300 BYTE),
  UNIQID_SELECT_QUERY  VARCHAR2(300 BYTE),
  UNIQID_UPDATE_QUERY  VARCHAR2(300 BYTE),
  CHILD_FORM           VARCHAR2(30 BYTE),
  CHILD_NAME           VARCHAR2(30 BYTE),
  FROZEN_COLS          NUMBER(2),
  MASTER_FIELD         VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MASTER_KLS_STRUCTURE IS 'Справочник запросов к БД';

COMMENT ON COLUMN MASTER.MASTER_KLS_STRUCTURE.VIEW_TIME IS 'Запрашивать время (в режиме "Запросы")';

COMMENT ON COLUMN MASTER.MASTER_KLS_STRUCTURE.CHILD_FORM IS 'Дочернее окно';

COMMENT ON COLUMN MASTER.MASTER_KLS_STRUCTURE.CHILD_NAME IS 'Наименование "дочернего" окна';

COMMENT ON COLUMN MASTER.MASTER_KLS_STRUCTURE.FROZEN_COLS IS '"Замороженных столбцов"';

COMMENT ON COLUMN MASTER.MASTER_KLS_STRUCTURE.MASTER_FIELD IS 'Ссылка на Мастер-таблицу';



--
-- MASTER_LINKS_STRUCTURE  (Table) 
--
CREATE TABLE MASTER.MASTER_LINKS_STRUCTURE
(
  ID                  VARCHAR2(50 BYTE),
  CAPTION             VARCHAR2(100 BYTE),
  SORTBY              NUMBER(10),
  TABLE_LINK          VARCHAR2(50 BYTE),
  QUERY_LINK          VARCHAR2(300 BYTE),
  TABLE_LINK_TYPE     VARCHAR2(3 BYTE)          DEFAULT '1-1',
  TABLE_LINK_PK       VARCHAR2(50 BYTE),
  TABLE_LINK_PK_TYPE  VARCHAR2(1 BYTE),
  TABLE_LINK_ONE_PK   VARCHAR2(50 BYTE),
  TABLE_ONE           VARCHAR2(50 BYTE),
  TABLE_LINK_TWO_PK   VARCHAR2(50 BYTE),
  TABLE_TWO           VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MASTER_LINKS_STRUCTURE IS 'Описание ассоциаций (связи между таблицами)';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.ID IS 'ID связи';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.CAPTION IS 'Описание';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.SORTBY IS '№ по порядку';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_LINK IS 'Таблица связи';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.QUERY_LINK IS 'Запрос - выборка всех записей из таблицы связи, относящихся к данной ассоциации';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_LINK_TYPE IS 'Тип связи';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_LINK_PK IS 'PK таблицы связи';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_LINK_PK_TYPE IS 'Тип PK таблицы связи';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_LINK_ONE_PK IS 'PK таблицы "Что привязываем"';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_ONE IS 'Таблица "Что привязываем"';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_LINK_TWO_PK IS 'PK таблицы "К чему привязываем"';

COMMENT ON COLUMN MASTER.MASTER_LINKS_STRUCTURE.TABLE_TWO IS 'Таблица "К чему привязываем"';



--
-- MASTER_QUERY_TYPES  (Table) 
--
CREATE TABLE MASTER.MASTER_QUERY_TYPES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE),
  TAG   VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MASTER_QUERY_TYPES IS 'Типы запросов к БД';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES.ID IS 'Тип запроса';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES.TAG IS 'ТЕГ';



--
-- MASTER_QUERY_TYPES_DESC  (Table) 
--
CREATE TABLE MASTER.MASTER_QUERY_TYPES_DESC
(
  ID            NUMBER(10)                      NOT NULL,
  STRUCTURE_ID  VARCHAR2(50 BYTE),
  TYPE_ID       NUMBER(10),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MASTER_QUERY_TYPES_DESC IS 'Таблица связи "Запросы" - "Типы запросов"';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES_DESC.ID IS 'Пересечение Запрос-Тип';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES_DESC.STRUCTURE_ID IS 'Запрос';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES_DESC.TYPE_ID IS 'Тип запроса';

COMMENT ON COLUMN MASTER.MASTER_QUERY_TYPES_DESC.IS_AUTO_LINK IS 'Признак автоматической связи';



--
-- MASTER_REPORTS  (Table) 
--
CREATE TABLE MASTER.MASTER_REPORTS
(
  ID             NUMBER(10)                     NOT NULL,
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  OSUSER_NAME    VARCHAR2(30 BYTE),
  APP_NAME       VARCHAR2(30 BYTE),
  REP_ID         NUMBER(10),
  REPORT_NAME    VARCHAR2(80 BYTE),
  REPORT_FILE    VARCHAR2(30 BYTE),
  REPORT_GROUP   VARCHAR2(15 BYTE),
  REPORT_TYPE    VARCHAR2(15 BYTE),
  REPORT_TITLE   VARCHAR2(250 BYTE),
  BEGIN_DATE     DATE,
  BEGIN_TIME     VARCHAR2(20 BYTE),
  END_DATE       DATE,
  END_TIME       VARCHAR2(20 BYTE),
  DATE_REE       VARCHAR2(30 BYTE),
  DATE_PLAN      VARCHAR2(30 BYTE),
  FROM_PARUS     NUMBER(3),
  VIEW_PROD      NUMBER(3),
  VIEW_DAYS      NUMBER(3),
  IS_AGENT       NUMBER(3),
  DIAGRAM_TYPE   VARCHAR2(15 BYTE),
  DIAGRAM_KIND   VARCHAR2(30 BYTE),
  AXES_X_NAME    VARCHAR2(30 BYTE),
  COUNT_COLS_X   NUMBER(3),
  AXES_Y_NAME    VARCHAR2(30 BYTE),
  COUNT_COLS_Y   NUMBER(3),
  REPORT_AGE     DATE                           DEFAULT TRUNC(SYSDATE+2),
  FILIAL_ID      NUMBER(10),
  GROUP_KIND_ID  NUMBER(10),
  AZC_ID         NUMBER(10),
  DOG_NUMBER     VARCHAR2(30 BYTE),
  PLAT_ID        NUMBER(10),
  GRP_ID_NPR     VARCHAR2(10 BYTE),
  PROD_ID_NPR    VARCHAR2(10 BYTE),
  IS_SNP         NUMBER(1),
  IS_UNP         NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.MASTER_REPORTS.REPORT_AGE IS 'Срок жизни';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.FILIAL_ID IS 'Филиал';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.GROUP_KIND_ID IS 'Вид подразделения';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.AZC_ID IS 'Подразделение';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.DOG_NUMBER IS 'N договора';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.PLAT_ID IS 'Плательщик';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.GRP_ID_NPR IS 'Группа н/пр';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.PROD_ID_NPR IS 'Нефтепродукт';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.IS_SNP IS 'Пользователь из СНП';

COMMENT ON COLUMN MASTER.MASTER_REPORTS.IS_UNP IS 'Пользователь из УНП';



--
-- MESTO_LOG  (Table) 
--
CREATE TABLE MASTER.MESTO_LOG
(
  ID         NUMBER(10),
  LOG_ID     VARCHAR2(10 BYTE),
  DATE_LOG   DATE,
  PROG_NAME  CLOB,
  LOG_INFO   CLOB,
  MESTO_ID   NUMBER(2),
  EVENT_ID   NUMBER(2),
  USER_ID    NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MONTH_ALFA  (Table) 
--
CREATE TABLE MASTER.MONTH_ALFA
(
  CON_ID              NUMBER(10)                NOT NULL,
  XCONFIRM            NUMBER(10)                DEFAULT 0,
  DATE_PLAN           DATE,
  KOL_NET             NUMBER(19,5)              DEFAULT 0,
  MON_DOB             NUMBER(2)                 DEFAULT 0,
  MON_DELIV           NUMBER(2)                 DEFAULT 0,
  N_MAR_POR           VARCHAR2(14 BYTE),
  N_MAR_DATE          DATE,
  PRODUCER_ID         NUMBER(10),
  PRODUCER_NAME       VARCHAR2(36 BYTE),
  ROUT_NAME           VARCHAR2(90 BYTE),
  CONTRACT            VARCHAR2(50 BYTE),
  CONTRACT_DATE       DATE,
  BUYER_ID            NUMBER(10),
  BUYER_NAME          VARCHAR2(75 BYTE),
  EXPED_ID            NUMBER(10),
  EXPED_NAME          VARCHAR2(75 BYTE),
  GROTP_ID            NUMBER(10),
  GROTP_NAME          VARCHAR2(75 BYTE),
  POLUCH_ID           NUMBER(10),
  POLUCH_NAME         VARCHAR2(75 BYTE),
  INCOTERMS_RUS_ID    NUMBER(10),
  INCOTERMS_RUS_NAME  VARCHAR2(127 BYTE),
  STAN_ID             NUMBER(10),
  STAN_NAME           VARCHAR2(30 BYTE),
  STAN_KOD            VARCHAR2(12 BYTE),
  STATUS              NUMBER(10)                DEFAULT 2
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.MONTH_ALFA.CON_ID IS 'ID экспортной партии';

COMMENT ON COLUMN MASTER.MONTH_ALFA.XCONFIRM IS 'N экспортной партии';

COMMENT ON COLUMN MASTER.MONTH_ALFA.DATE_PLAN IS 'Период';

COMMENT ON COLUMN MASTER.MONTH_ALFA.KOL_NET IS 'Вес-нетто';

COMMENT ON COLUMN MASTER.MONTH_ALFA.MON_DOB IS 'Месяц добычи';

COMMENT ON COLUMN MASTER.MONTH_ALFA.MON_DELIV IS 'Месяц переработки';

COMMENT ON COLUMN MASTER.MONTH_ALFA.N_MAR_POR IS 'N маршрутного поручения';

COMMENT ON COLUMN MASTER.MONTH_ALFA.N_MAR_DATE IS 'Дата маршрутного поручения';

COMMENT ON COLUMN MASTER.MONTH_ALFA.PRODUCER_ID IS 'Производитель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.PRODUCER_NAME IS 'Производитель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.ROUT_NAME IS 'Маршрут транспортировки';

COMMENT ON COLUMN MASTER.MONTH_ALFA.CONTRACT IS 'Экспортный контракт';

COMMENT ON COLUMN MASTER.MONTH_ALFA.CONTRACT_DATE IS 'Дата контракта';

COMMENT ON COLUMN MASTER.MONTH_ALFA.BUYER_ID IS 'Покупатель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.BUYER_NAME IS 'Покупатель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.MONTH_ALFA.EXPED_NAME IS 'Экспедитор';

COMMENT ON COLUMN MASTER.MONTH_ALFA.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.GROTP_NAME IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.POLUCH_ID IS 'Грузополучатель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.POLUCH_NAME IS 'Грузополучатель';

COMMENT ON COLUMN MASTER.MONTH_ALFA.INCOTERMS_RUS_ID IS 'ИНКОТЕРМС';

COMMENT ON COLUMN MASTER.MONTH_ALFA.INCOTERMS_RUS_NAME IS 'ИНКОТЕРМС';

COMMENT ON COLUMN MASTER.MONTH_ALFA.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.MONTH_ALFA.STAN_NAME IS 'Станция назначения';

COMMENT ON COLUMN MASTER.MONTH_ALFA.STAN_KOD IS 'Станция назначения (код)';

COMMENT ON COLUMN MASTER.MONTH_ALFA.STATUS IS 'Статус партии';



--
-- MONTH_OILSPACE  (Table) 
--
CREATE TABLE MASTER.MONTH_OILSPACE
(
  DOC_ID      VARCHAR2(25 BYTE),
  DOC_OUTNUM  VARCHAR2(10 BYTE),
  LUKOIL_ID   NUMBER(10)                        NOT NULL,
  FACTORY_ID  NUMBER(10),
  FACTORYNAM  VARCHAR2(20 BYTE),
  PRODUCT_ID  NUMBER(10),
  PROD_ID_R3  NUMBER(10),
  PROD_NAME   VARCHAR2(50 BYTE),
  PROD_KCCC   NUMBER(10),
  PROD_ETCNG  NUMBER(10),
  PROD_GNG    NUMBER(10),
  PROD_TYPE   VARCHAR2(50 BYTE),
  CONTRACT    VARCHAR2(10 BYTE),
  VOLUME      NUMBER,
  BASIS       VARCHAR2(3 BYTE),
  CLIENT      VARCHAR2(50 BYTE),
  POLU        VARCHAR2(50 BYTE),
  POLU_ID     NUMBER(10),
  POLU_KCCC   NUMBER(10),
  POLU_INN    VARCHAR2(13 BYTE),
  CUSTOMER    VARCHAR2(50 BYTE),
  CUST_ID     NUMBER(10),
  CUST_KCCC   NUMBER(10),
  CUST_INN    VARCHAR2(13 BYTE),
  EXPEDITOR   VARCHAR2(50 BYTE),
  TYP_VAG     VARCHAR2(30 BYTE),
  STATION_ID  VARCHAR2(10 BYTE),
  STATION     VARCHAR2(50 BYTE),
  TIT_RSK_ID  VARCHAR2(6 BYTE),
  TITLE_RISK  VARCHAR2(50 BYTE),
  NAPR        VARCHAR2(100 BYTE),
  COUNTRY     VARCHAR2(100 BYTE),
  CNTRY_KCCC  NUMBER(10),
  STATE       NUMBER(1),
  CATEGORY    NUMBER(1),
  NOTES       VARCHAR2(100 BYTE),
  RCAR_OWNR   VARCHAR2(20 BYTE),
  RCAR_TYPE   VARCHAR2(20 BYTE),
  RCAR_PHTYP  NUMBER(10),
  RCAR_OSTYP  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MONTH_OILSPACE IS 'Экспортные разнарядки из OILSpace';



--
-- MONTH_REE  (Table) 
--
CREATE TABLE MASTER.MONTH_REE
(
  DATE_REE  DATE                                NOT NULL,
  DOP_REE   NUMBER(1)                           NOT NULL,
  NOM_ZD    VARCHAR2(12 BYTE)                   NOT NULL,
  VES       NUMBER(14,3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MONTH_REE IS '"Старый" суточный реестр заданий';



--
-- MONTH_REESTR  (Table) 
--
CREATE TABLE MASTER.MONTH_REESTR
(
  ID                NUMBER(10)                  NOT NULL,
  NUM_REE           NUMBER(10),
  DATE_REE          DATE,
  DATE_TO           DATE,
  DATE_PLAN         DATE,
  USE_GRAFIK        NUMBER(1),
  GRAFIK_DATE_FROM  DATE,
  GRAFIK_DATE_TO    DATE,
  STATUS            NUMBER(10),
  DOP_REE           NUMBER(10),
  UHTA_XLS_NAME     VARCHAR2(50 BYTE),
  MOS_DBF_NAME      VARCHAR2(50 BYTE),
  MOS_XLS_NAME      VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MONTH_REESTR IS 'Суточные реестры заданий';

COMMENT ON COLUMN MASTER.MONTH_REESTR.ID IS 'ID реестра';

COMMENT ON COLUMN MASTER.MONTH_REESTR.NUM_REE IS 'Номер реестра';

COMMENT ON COLUMN MASTER.MONTH_REESTR.DATE_REE IS 'Дата реестра';

COMMENT ON COLUMN MASTER.MONTH_REESTR.DATE_TO IS 'Отгрузка по дату';

COMMENT ON COLUMN MASTER.MONTH_REESTR.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.MONTH_REESTR.USE_GRAFIK IS '1-использовать график';

COMMENT ON COLUMN MASTER.MONTH_REESTR.GRAFIK_DATE_FROM IS 'С даты';

COMMENT ON COLUMN MASTER.MONTH_REESTR.GRAFIK_DATE_TO IS 'По дату';

COMMENT ON COLUMN MASTER.MONTH_REESTR.STATUS IS 'Статус реестра';

COMMENT ON COLUMN MASTER.MONTH_REESTR.DOP_REE IS '№ доп.реестра';

COMMENT ON COLUMN MASTER.MONTH_REESTR.UHTA_XLS_NAME IS 'Ухтинский реестр (XLS)';

COMMENT ON COLUMN MASTER.MONTH_REESTR.MOS_DBF_NAME IS 'Московский реестр (DBF)';



--
-- MONTH_REESTR_POS  (Table) 
--
CREATE TABLE MASTER.MONTH_REESTR_POS
(
  MONTH_REESTR_ID  NUMBER(10)                   NOT NULL,
  NOM_ZD           VARCHAR2(12 BYTE)            NOT NULL,
  TONN_REE         NUMBER(15,3)                 DEFAULT 0,
  PRIORITY         NUMBER(10),
  TONN_MOS         NUMBER(15,3)                 DEFAULT 0,
  R3_VBAK_ID       VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MONTH_REESTR_POS IS 'Позиции суточного реестра заданий';

COMMENT ON COLUMN MASTER.MONTH_REESTR_POS.MONTH_REESTR_ID IS 'ID реестра';

COMMENT ON COLUMN MASTER.MONTH_REESTR_POS.NOM_ZD IS 'ID задания';

COMMENT ON COLUMN MASTER.MONTH_REESTR_POS.TONN_REE IS 'Объем по реестру';

COMMENT ON COLUMN MASTER.MONTH_REESTR_POS.PRIORITY IS 'Подтверждение/запрет';

COMMENT ON COLUMN MASTER.MONTH_REESTR_POS.TONN_MOS IS 'Согласованный объем';

COMMENT ON COLUMN MASTER.MONTH_REESTR_POS.R3_VBAK_ID IS 'разнарядка из SAP';



--
-- MONTH_VISIR  (Table) 
--
CREATE TABLE MASTER.MONTH_VISIR
(
  ID            NUMBER(10)                      NOT NULL,
  DATE_REE      DATE,
  DOP_REE       NUMBER(1),
  NOM_ZD        VARCHAR2(12 BYTE),
  PRICHIN       VARCHAR2(200 BYTE),
  APP_USERS_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MONTH_VISIR_LOC  (Table) 
--
CREATE TABLE MASTER.MONTH_VISIR_LOC
(
  ID            NUMBER(10)                      NOT NULL,
  DATE_REE      DATE,
  DOP_REE       NUMBER(1),
  NOM_ZD        VARCHAR2(12 BYTE),
  PRICHIN       VARCHAR2(200 BYTE),
  APP_USERS_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MOVEPROD  (Table) 
--
CREATE TABLE MASTER.MOVEPROD
(
  MONTH        DATE,
  OPER         NUMBER,
  KIND         NUMBER,
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  QUAN         NUMBER,
  PERIOD       DATE,
  BUYINVC      VARCHAR2(10 BYTE),
  IDINVOICE    NUMBER,
  IDCLIENT     NUMBER,
  SELLDATE     DATE,
  SUBOPER      NUMBER,
  NUM_KVIT     NUMBER,
  NUM_CIST     VARCHAR2(10 BYTE),
  IS_RE        NUMBER                           DEFAULT 0,
  ID           NUMBER,
  MOVEPROD_ID  NUMBER,
  DATE_OFORML  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- MOVEPROD_OST  (Table) 
--
CREATE TABLE MASTER.MOVEPROD_OST
(
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  Q_ALL        NUMBER,
  PERIOD       DATE,
  OPER         NUMBER,
  MONTH        DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- NPR_PRICES_KTU  (Table) 
--
CREATE TABLE MASTER.NPR_PRICES_KTU
(
  ID                   NUMBER(6)                NOT NULL,
  CAT_CEN_ID           NUMBER(3),
  PROD_ID_NPR          VARCHAR2(5 BYTE),
  CENA                 NUMBER(9,2),
  NDS20                NUMBER(9,2),
  NGSM25               NUMBER(9,2),
  AKCIZ                NUMBER(9,2),
  CENA_OTP             NUMBER(9,2),
  BEGIN_DATE           DATE,
  END_DATE             DATE,
  INPUT_DATE           DATE,
  OWNERSHIP_ID         NUMBER(3),
  SUPPLIER_ID          NUMBER(6),
  PROTOKOL_DATE        DATE,
  PROTOKOL_NUM         VARCHAR2(15 BYTE),
  IS_ORIGINAL          NUMBER(1)                DEFAULT 0,
  PROTOKOL_BEGIN_DATE  DATE,
  NDS20_NPO            NUMBER(9,2),
  CENA_NPO             NUMBER(9,2),
  CENA_OTP_NPO         NUMBER(9,2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OBOROT_KONS  (Table) 
--
CREATE TABLE MASTER.OBOROT_KONS
(
  ID_OPER             NUMBER(18)                NOT NULL,
  DATE_OPER           DATE,
  KOL                 NUMBER(15,3)              DEFAULT 0,
  KG                  NUMBER(15,3)              DEFAULT 0,
  LIT                 NUMBER(15,3)              DEFAULT 0,
  CENA_POKUP_BN       NUMBER(15,2)              DEFAULT 0,
  CENA_POKUP          NUMBER(15,2)              DEFAULT 0,
  SUMMA_POKUP_BN      NUMBER(15,2)              DEFAULT 0,
  SUMMA_POKUP_NDS     NUMBER(15,2)              DEFAULT 0,
  SUMMA_POKUP_AKCIZ   NUMBER(15,2)              DEFAULT 0,
  SUMMA_POKUP         NUMBER(15,2)              DEFAULT 0,
  CENA_REALIZ_BN      NUMBER(15,2)              DEFAULT 0,
  CENA_REALIZ         NUMBER(15,2)              DEFAULT 0,
  SUMMA_REALIZ_BN     NUMBER(15,2)              DEFAULT 0,
  SUMMA_REALIZ_NDS    NUMBER(15,2)              DEFAULT 0,
  SUMMA_REALIZ_AKCIZ  NUMBER(15,2)              DEFAULT 0,
  SUMMA_REALIZ        NUMBER(15,2)              DEFAULT 0,
  CENA_UCHET          NUMBER(15,2)              DEFAULT 0,
  SUMMA_UCHET         NUMBER(15,2)              DEFAULT 0,
  UPDATE_USER         VARCHAR2(20 BYTE),
  UPDATE_DATE         DATE,
  AKCIZ_SVED          NUMBER(1)                 DEFAULT 0,
  ORG_STRU_ID         NUMBER(10),
  PREDPR_KONS_ID      NUMBER(20),
  PROD_KONS_ID        VARCHAR2(21 BYTE),
  PREDPR_CLASS_ID     NUMBER(10),
  TIP_OP_ID           NUMBER(10),
  ST_PRIH_ID          NUMBER(10),
  ST_RASH_ID          NUMBER(10),
  TIP_REAL_ID         NUMBER(10),
  VID_REAL_ID         NUMBER(10),
  VID_POST_ID         NUMBER(10),
  OTGR_POST_ID        NUMBER(10),
  LOAD_TYPE_ID        NUMBER(2),
  REGION_ID           NUMBER(3),
  ORG_POLUCH_ID       NUMBER(10),
  FILIAL_ID           NUMBER(10)                NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.OBOROT_KONS IS 'Конс.отчетность: Обороты';

COMMENT ON COLUMN MASTER.OBOROT_KONS.ID_OPER IS 'Уникальный ID';

COMMENT ON COLUMN MASTER.OBOROT_KONS.DATE_OPER IS 'Дата';

COMMENT ON COLUMN MASTER.OBOROT_KONS.KOL IS 'Кол-во';

COMMENT ON COLUMN MASTER.OBOROT_KONS.KG IS 'Вес (кг)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.LIT IS 'Объем (литр)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.CENA_POKUP_BN IS 'Цена приобретения (без налогов)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.CENA_POKUP IS 'Цена приобретения';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_POKUP_BN IS 'Сумма приобретения (без налогов)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_POKUP_NDS IS 'НДС по приобретению';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_POKUP_AKCIZ IS 'АКЦИЗ по приобретению';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_POKUP IS 'Сумма приобретения';

COMMENT ON COLUMN MASTER.OBOROT_KONS.CENA_REALIZ_BN IS 'Цена реализации (без налогов)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.CENA_REALIZ IS 'Цена реализации';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_REALIZ_BN IS 'Сумма реализации (без налогов)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_REALIZ_NDS IS 'НДС по реализации';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_REALIZ_AKCIZ IS 'Акциз по реализации';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_REALIZ IS 'Сумма реализации';

COMMENT ON COLUMN MASTER.OBOROT_KONS.CENA_UCHET IS 'Учетная цена';

COMMENT ON COLUMN MASTER.OBOROT_KONS.SUMMA_UCHET IS 'Учетная сумма';

COMMENT ON COLUMN MASTER.OBOROT_KONS.UPDATE_USER IS 'Пользователь';

COMMENT ON COLUMN MASTER.OBOROT_KONS.UPDATE_DATE IS 'Дата-время обновления';

COMMENT ON COLUMN MASTER.OBOROT_KONS.AKCIZ_SVED IS 'Признак акцизного свидетельства';

COMMENT ON COLUMN MASTER.OBOROT_KONS.ORG_STRU_ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.OBOROT_KONS.PREDPR_KONS_ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.OBOROT_KONS.PROD_KONS_ID IS 'Продукт (конс.отчетность)';

COMMENT ON COLUMN MASTER.OBOROT_KONS.PREDPR_CLASS_ID IS 'Классификатор предприятий';

COMMENT ON COLUMN MASTER.OBOROT_KONS.TIP_OP_ID IS 'Тип операции';

COMMENT ON COLUMN MASTER.OBOROT_KONS.ST_PRIH_ID IS 'Статья прихода';

COMMENT ON COLUMN MASTER.OBOROT_KONS.ST_RASH_ID IS 'Статья расхода';

COMMENT ON COLUMN MASTER.OBOROT_KONS.TIP_REAL_ID IS 'Тип реализации';

COMMENT ON COLUMN MASTER.OBOROT_KONS.VID_REAL_ID IS 'Вид реализации';

COMMENT ON COLUMN MASTER.OBOROT_KONS.VID_POST_ID IS 'Вид поставки';

COMMENT ON COLUMN MASTER.OBOROT_KONS.OTGR_POST_ID IS 'Отгрузка-поставка';

COMMENT ON COLUMN MASTER.OBOROT_KONS.ORG_POLUCH_ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.OBOROT_KONS.FILIAL_ID IS 'ID ОСЕ';



--
-- OIL_GRAFIK  (Table) 
--
CREATE TABLE MASTER.OIL_GRAFIK
(
  KOD          NUMBER,
  KOD_PLAN     NUMBER,
  DATAGRAF     DATE,
  POSTAV       NUMBER,
  PER          NUMBER,
  PROD         NUMBER,
  MESTOR       NUMBER,
  OSTATKI      NUMBER,
  GRAFIK       NUMBER,
  PLANPERER    NUMBER,
  ID_PROD_NPR  VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OIL_MESTOR  (Table) 
--
CREATE TABLE MASTER.OIL_MESTOR
(
  KOD     NUMBER,
  MESTOR  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OIL_PPRIEMA  (Table) 
--
CREATE TABLE MASTER.OIL_PPRIEMA
(
  KOD    NUMBER,
  PRIEM  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OIL_QUALITY  (Table) 
--
CREATE TABLE MASTER.OIL_QUALITY
(
  OIL_QUALITY_ID  NUMBER,
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  PERIOD          DATE,
  PL20C           NUMBER                        DEFAULT 0,
  PL15C           NUMBER                        DEFAULT 0,
  VOL_WATER       NUMBER                        DEFAULT 0,
  VOL_MEX         NUMBER                        DEFAULT 0,
  VOL_SERA        NUMBER                        DEFAULT 0,
  VOL_HLOR        NUMBER                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OIL_TRACE  (Table) 
--
CREATE TABLE MASTER.OIL_TRACE
(
  KOD          NUMBER,
  KOD_PLAN     NUMBER,
  DATAPOR      DATE,
  NOMER        VARCHAR2(20 BYTE),
  SOBSTV       NUMBER,
  POSTAVSH     NUMBER,
  PRODUKT      NUMBER,
  MESTOR       NUMBER,
  PRIEM        NUMBER,
  SDACHA       NUMBER,
  PERERAB      NUMBER,
  VSEGO        NUMBER,
  POTERI       NUMBER,
  POTERIFAKT   NUMBER,
  OSTAT        NUMBER,
  FOR_SOBST    VARCHAR2(100 BYTE),
  IS_CLOSE     NUMBER,
  ID_PROD_NPR  VARCHAR2(5 BYTE),
  LICENSIAR    NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OPL  (Table) 
--
CREATE TABLE MASTER.OPL
(
  KOD_PLD     NUMBER,
  RS_PLD      VARCHAR2(12 BYTE),
  PLAT_DOG    VARCHAR2(60 BYTE),
  SUMMA       NUMBER,
  NOM_POR     VARCHAR2(7 BYTE),
  DATA_POR    DATE,
  KOD_PLP     NUMBER,
  PLAT_POR    VARCHAR2(60 BYTE),
  NAZN_PLAT   VARCHAR2(255 BYTE),
  DATA_POST   DATE,
  TIP         NUMBER,
  DAV_ORG     NUMBER,
  N_SCHET     NUMBER,
  BANK_NOM    NUMBER,
  NOM_DOG     VARCHAR2(10 BYTE),
  KOL         NUMBER,
  BANK        NUMBER,
  N_BANK      VARCHAR2(30 BYTE),
  NAM_VEK     VARCHAR2(20 BYTE),
  PATH        VARCHAR2(20 BYTE),
  T_TIME      VARCHAR2(8 BYTE),
  T_DATE      DATE,
  K_SCHET     VARCHAR2(4 BYTE),
  NOM_DOK     NUMBER,
  STN_DOK     NUMBER,
  DISKONT     NUMBER,
  DATA_VIP    DATE,
  PR_DOG      NUMBER,
  DATECANCEL  DATE,
  EMITENT     NUMBER,
  INV         NUMBER,
  AVIZO       VARCHAR2(1 BYTE),
  DEN_SOP     VARCHAR2(1 BYTE),
  VZ          VARCHAR2(1 BYTE),
  PROGRAM     NUMBER(2)                         DEFAULT 0,
  DOG_ID      NUMBER(10),
  IS_SNP      NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- ORG_LINKS  (Table) 
--
CREATE TABLE MASTER.ORG_LINKS
(
  ORG_STRU_1_ID  NUMBER(10),
  ORG_STRU_2_ID  NUMBER(10)                     DEFAULT 0,
  KIND_RELA_ID   NUMBER(10),
  IS_ROOT        NUMBER(1)                      DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OSTAT_KONS  (Table) 
--
CREATE TABLE MASTER.OSTAT_KONS
(
  ID_OST             NUMBER(18)                 NOT NULL,
  DATE_OST           DATE,
  KOL                VARCHAR2(240 BYTE)         DEFAULT '0',
  KG                 NUMBER(15,3)               DEFAULT 0,
  LIT                NUMBER(15,3)               DEFAULT 0,
  SUMMA_POKUP_BN     NUMBER(15,2)               DEFAULT 0,
  SUMMA_POKUP_NDS    NUMBER(15,2)               DEFAULT 0,
  SUMMA_POKUP_AKCIZ  NUMBER(15,2)               DEFAULT 0,
  SUMMA_POKUP        NUMBER(15,2)               DEFAULT 0,
  SUMMA_UCHET        NUMBER(15,2)               DEFAULT 0,
  ORG_STRU_ID        NUMBER(10),
  PREDPR_KONS_ID     NUMBER(20),
  PROD_KONS_ID       VARCHAR2(21 BYTE),
  FILIAL_ID          NUMBER(10)                 NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.OSTAT_KONS IS 'Конс.отчетность: остатки';

COMMENT ON COLUMN MASTER.OSTAT_KONS.ID_OST IS 'ID';

COMMENT ON COLUMN MASTER.OSTAT_KONS.DATE_OST IS 'Дата';

COMMENT ON COLUMN MASTER.OSTAT_KONS.KOL IS 'Кол-во';

COMMENT ON COLUMN MASTER.OSTAT_KONS.KG IS 'Вес (кг)';

COMMENT ON COLUMN MASTER.OSTAT_KONS.LIT IS 'Объем (литр)';

COMMENT ON COLUMN MASTER.OSTAT_KONS.SUMMA_POKUP_BN IS 'Сумма приобретения (без налогов)';

COMMENT ON COLUMN MASTER.OSTAT_KONS.SUMMA_POKUP_NDS IS 'НДС';

COMMENT ON COLUMN MASTER.OSTAT_KONS.SUMMA_POKUP_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.OSTAT_KONS.SUMMA_POKUP IS 'Сумма приобретения';

COMMENT ON COLUMN MASTER.OSTAT_KONS.SUMMA_UCHET IS 'Учетная сумма';

COMMENT ON COLUMN MASTER.OSTAT_KONS.ORG_STRU_ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.OSTAT_KONS.PREDPR_KONS_ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.OSTAT_KONS.PROD_KONS_ID IS 'Продукт (конс.отчетность)';

COMMENT ON COLUMN MASTER.OSTAT_KONS.FILIAL_ID IS 'ID ОСЕ';



--
-- OSTAT_NPZ  (Table) 
--
CREATE TABLE MASTER.OSTAT_NPZ
(
  NPZ_DATE     DATE,
  SOBSTV_ID    NUMBER,
  OST          NUMBER,
  PASP         NUMBER,
  OTGR         NUMBER,
  HRAN         NUMBER,
  ID_PROD_NPR  VARCHAR2(5 BYTE),
  M_OST        NUMBER                           DEFAULT 0,
  REQUEST      NUMBER                           DEFAULT 0,
  KOMP         NUMBER(10,3)                     DEFAULT 0,
  REZERV       NUMBER(10,3)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PARUS_FIN  (Table) 
--
CREATE TABLE MASTER.PARUS_FIN
(
  KVIT_ID     NUMBER,
  TASK        VARCHAR2(40 BYTE),
  RN          NUMBER,
  SUBTASK     NUMBER,
  MONTH_ID    VARCHAR2(12 BYTE),
  STATUS      NUMBER                            DEFAULT 0,
  FACEACC_RN  NUMBER,
  AUTHID      VARCHAR2(30 BYTE),
  ID          NUMBER,
  SVED_NUM    NUMBER,
  DATE_KVIT   DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PARUS_NOMEN_PROD_LINK  (Table) 
--
CREATE TABLE MASTER.PARUS_NOMEN_PROD_LINK
(
  ID            NUMBER(10)                      NOT NULL,
  NOMEN_RN      NUMBER(15),
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  IS_MAIN       NUMBER(1)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PARUS_NOMEN_PROD_LINK IS 'Связь "Номенклатор (Парус) и Продукт"';

COMMENT ON COLUMN MASTER.PARUS_NOMEN_PROD_LINK.NOMEN_RN IS 'RN номенклатора';

COMMENT ON COLUMN MASTER.PARUS_NOMEN_PROD_LINK.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.PARUS_NOMEN_PROD_LINK.IS_AUTO_LINK IS 'Признак авт.связи';

COMMENT ON COLUMN MASTER.PARUS_NOMEN_PROD_LINK.IS_MAIN IS 'Основной';



--
-- PARUS_STORE_ORG_STRU_LINK  (Table) 
--
CREATE TABLE MASTER.PARUS_STORE_ORG_STRU_LINK
(
  ID            NUMBER(10)                      NOT NULL,
  STORE_RN      NUMBER(15),
  ORG_STRU_ID   NUMBER(10),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  IS_MAIN       NUMBER(1)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PARUS_STORE_ORG_STRU_LINK IS 'Связь "Склад (Парус) - Подразделение"';

COMMENT ON COLUMN MASTER.PARUS_STORE_ORG_STRU_LINK.STORE_RN IS 'RN склада в Парусе';

COMMENT ON COLUMN MASTER.PARUS_STORE_ORG_STRU_LINK.ORG_STRU_ID IS 'ID подразделения';

COMMENT ON COLUMN MASTER.PARUS_STORE_ORG_STRU_LINK.IS_AUTO_LINK IS 'Признак автоматической связи';

COMMENT ON COLUMN MASTER.PARUS_STORE_ORG_STRU_LINK.IS_MAIN IS 'Основной';



--
-- PAYMENTS_ON_BILL_050208  (Table) 
--
CREATE TABLE MASTER.PAYMENTS_ON_BILL_050208
(
  ID           NUMBER(10),
  NOM_DOK      NUMBER(7),
  BILL_POS_ID  NUMBER(7),
  PAYMENTS_ID  NUMBER,
  SUMMA        NUMBER(15,2),
  DATE_REALIZ  DATE,
  SUMMA_NDS    NUMBER(20,6),
  SUMMA_AKCIZ  NUMBER(20,6)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PLAN_FACT  (Table) 
--
CREATE TABLE MASTER.PLAN_FACT
(
  ID               NUMBER(10)                   NOT NULL,
  TERMINAL_NAME    VARCHAR2(30 BYTE),
  OSUSER_NAME      VARCHAR2(30 BYTE),
  TIP_ROW          VARCHAR2(10 BYTE),
  GROUP_ORDER      NUMBER(10),
  GROUP_NAME       VARCHAR2(30 BYTE),
  PROD_ORDER       NUMBER(10),
  PROD_ID_NPR      VARCHAR2(10 BYTE),
  PLANSTRU_ORDER   VARCHAR2(18 BYTE),
  PLANSTRU_ID      NUMBER(10),
  DATE_PLAN        DATE,
  PLAN_MON_C       NUMBER(18,6)                 DEFAULT 0,
  PLAN_MON_V       NUMBER(18,6)                 DEFAULT 0,
  PLAN_MON_SOBS_C  NUMBER(18,6)                 DEFAULT 0,
  PLAN_MON_SOBS_V  NUMBER(18,6)                 DEFAULT 0,
  PLAN_NAR_C       NUMBER(18,6)                 DEFAULT 0,
  PLAN_NAR_V       NUMBER(18,6)                 DEFAULT 0,
  PLAN_NAR_SOBS_C  NUMBER(18,6)                 DEFAULT 0,
  PLAN_NAR_SOBS_V  NUMBER(18,6)                 DEFAULT 0,
  DATE_ZAYV        DATE,
  ZAYV             NUMBER(18,6)                 DEFAULT 0,
  DATE_BEG_OST     DATE,
  TIME_BEG_OST     VARCHAR2(5 BYTE),
  BEG_OST          NUMBER(18,6)                 DEFAULT 0,
  DATE_FACT        DATE,
  TIME_FACT        VARCHAR2(5 BYTE),
  FACT_C           NUMBER(18,6)                 DEFAULT 0,
  FACT_V           NUMBER(18,6)                 DEFAULT 0,
  FACT_SOBS_C      NUMBER(18,6)                 DEFAULT 0,
  FACT_SOBS_V      NUMBER(18,6)                 DEFAULT 0,
  DATE_EMPTY_VOL   DATE,
  TIME_EMPTY_VOL   VARCHAR2(5 BYTE),
  MAX_VOL          NUMBER(18,6)                 DEFAULT 0,
  DEAD_VOL         NUMBER(18,6)                 DEFAULT 0,
  VOL              NUMBER(18,6)                 DEFAULT 0,
  EMPTY_VOL        NUMBER(18,6)                 DEFAULT 0,
  DATE_OST         DATE,
  TIME_OST         VARCHAR2(5 BYTE),
  OST              NUMBER(18,6)                 DEFAULT 0,
  NB_NAME          VARCHAR2(30 BYTE),
  NOMMODIF_NAME    VARCHAR2(100 BYTE),
  DICNOMNS_RN      NUMBER(17),
  NOMMODIF_RN      NUMBER(17),
  CONTRACTS_RN     NUMBER(17),
  STAGES_RN        NUMBER(17),
  FACEACC_RN       NUMBER(17),
  FACEACC_CODE     VARCHAR2(20 BYTE),
  ZAYV_RN          NUMBER(17),
  ZAYV_PREF        VARCHAR2(20 BYTE),
  TIP_OTGR_RN      NUMBER,
  TIP_OTGR_NAME    VARCHAR2(30 BYTE),
  PAYTYPE_RN       NUMBER(17),
  PAYTYPE_NAME     VARCHAR2(30 BYTE),
  POLUCH_RN        NUMBER(17),
  POLUCH_NAME      VARCHAR2(200 BYTE),
  CONTRACTS_NUMB   VARCHAR2(50 BYTE),
  AGENT_RN         NUMBER(17),
  AGENT_NAME       VARCHAR2(100 BYTE),
  OBR_MON_V        NUMBER(18,6),
  OBR_NAR_V        NUMBER(18,6),
  PLAN_NAR_RASP    NUMBER(18,6),
  OBR_NAR_RASP     NUMBER(18,6),
  KORR_MON_V       NUMBER(18,6),
  KORR_NAR_V       NUMBER(18,6),
  KORR_NAR_RASP    NUMBER(18,6),
  FACT_SUT_C       NUMBER(18,6)                 DEFAULT 0,
  FACT_SUT_V       NUMBER(18,6)                 DEFAULT 0,
  FACT_SOBS_SUT_C  NUMBER(18,6)                 DEFAULT 0,
  FACT_SOBS_SUT_V  NUMBER(18,6)                 DEFAULT 0,
  PLAN_NAR_RASP_7  NUMBER(18,6),
  OBR_NAR_RASP_7   NUMBER(18,6),
  FACT_NAR_7       NUMBER(18,6),
  FACT_DECADA_1    NUMBER(18,6)                 DEFAULT 0,
  FACT_DECADA_2    NUMBER(18,6)                 DEFAULT 0,
  FACT_DECADA_3    NUMBER(18,6)                 DEFAULT 0,
  PLAN_DECADA_1    NUMBER(18,6)                 DEFAULT 0,
  PLAN_DECADA_2    NUMBER(18,6)                 DEFAULT 0,
  PLAN_DECADA_3    NUMBER(18,6)                 DEFAULT 0,
  NUM_DECADA       NUMBER(1)                    DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PLAN_FACT IS 'ПЛАН-ФАКТ';

COMMENT ON COLUMN MASTER.PLAN_FACT.ID IS 'План-факт';

COMMENT ON COLUMN MASTER.PLAN_FACT.TERMINAL_NAME IS 'Сетевое имя машины';

COMMENT ON COLUMN MASTER.PLAN_FACT.OSUSER_NAME IS 'Сетевое имя пользователя';

COMMENT ON COLUMN MASTER.PLAN_FACT.TIP_ROW IS 'Тип данных';

COMMENT ON COLUMN MASTER.PLAN_FACT.GROUP_ORDER IS 'Порядок групп';

COMMENT ON COLUMN MASTER.PLAN_FACT.GROUP_NAME IS 'Группа';

COMMENT ON COLUMN MASTER.PLAN_FACT.PROD_ORDER IS 'Порядок продуктов';

COMMENT ON COLUMN MASTER.PLAN_FACT.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLANSTRU_ORDER IS 'Порядок позиций';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLANSTRU_ID IS 'Позиция плана';

COMMENT ON COLUMN MASTER.PLAN_FACT.DATE_PLAN IS 'Дата плана (по дату вкл.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_MON_C IS 'План за месяц в цист.';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_MON_V IS 'План за месяц в тн.';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_MON_SOBS_C IS 'План за месяц в цист. (собс.ваг.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_MON_SOBS_V IS 'План за месяц в тн. (собс.ваг.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_NAR_C IS 'План нарастающий в цист.';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_NAR_V IS 'План нарастающий в тн.';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_NAR_SOBS_C IS 'План нарастающий в цист. (собс.ваг.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_NAR_SOBS_V IS 'План нарастающий в тн. (собс.ваг.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.DATE_ZAYV IS 'Дата заявленного объема (по дату вкл.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.ZAYV IS 'Заявлено';

COMMENT ON COLUMN MASTER.PLAN_FACT.DATE_BEG_OST IS 'Дата начального остатка';

COMMENT ON COLUMN MASTER.PLAN_FACT.TIME_BEG_OST IS 'Время начального остатка';

COMMENT ON COLUMN MASTER.PLAN_FACT.BEG_OST IS 'Остаток в начале';

COMMENT ON COLUMN MASTER.PLAN_FACT.DATE_FACT IS 'Дата факта (по дату вкл.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.TIME_FACT IS 'Время факта';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_C IS 'Факт в цист.';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_V IS 'Факт в тн.';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_SOBS_C IS 'Факт в цист. (собс.ваг.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_SOBS_V IS 'Факт в тн. (собс.ваг.)';

COMMENT ON COLUMN MASTER.PLAN_FACT.DATE_EMPTY_VOL IS 'Дата свободных емкостей';

COMMENT ON COLUMN MASTER.PLAN_FACT.TIME_EMPTY_VOL IS 'Время свободных емкостей';

COMMENT ON COLUMN MASTER.PLAN_FACT.EMPTY_VOL IS 'Свободная емкость';

COMMENT ON COLUMN MASTER.PLAN_FACT.DATE_OST IS 'Дата конечного остатка';

COMMENT ON COLUMN MASTER.PLAN_FACT.TIME_OST IS 'Время конечного остатка';

COMMENT ON COLUMN MASTER.PLAN_FACT.OST IS 'Конечный остаток';

COMMENT ON COLUMN MASTER.PLAN_FACT.NB_NAME IS 'Нефтебаза';

COMMENT ON COLUMN MASTER.PLAN_FACT.OBR_MON_V IS 'ОБР за месяц в тн.';

COMMENT ON COLUMN MASTER.PLAN_FACT.OBR_NAR_V IS 'ОБР нарастающий за месяц в тн.';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_NAR_RASP IS 'План нарастающий без нераспред.ресурса';

COMMENT ON COLUMN MASTER.PLAN_FACT.OBR_NAR_RASP IS 'ОБР без нераспред.ресурса';

COMMENT ON COLUMN MASTER.PLAN_FACT.KORR_MON_V IS 'Заявка на корректировку в тн';

COMMENT ON COLUMN MASTER.PLAN_FACT.KORR_NAR_V IS 'Заявка на корректировку нараст';

COMMENT ON COLUMN MASTER.PLAN_FACT.KORR_NAR_RASP IS 'Заявка на корректировку без нераспр. ресурса';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_SUT_C IS 'Факт в цист. за отчетные сутки';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_SUT_V IS 'Факт в тн. за отчетные сутки';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_SOBS_SUT_C IS 'Факт в цист. за отчетные сутки (собс.ваг)';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_SOBS_SUT_V IS 'Факт в тн. за отчетные сутки (собс.ваг)';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_NAR_RASP_7 IS 'План нарастающий 7 дней назад';

COMMENT ON COLUMN MASTER.PLAN_FACT.OBR_NAR_RASP_7 IS 'ОБР нарастающий 7 дней назад';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_NAR_7 IS 'Факт нарастающий 7 дней назад';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_DECADA_1 IS 'Факт за 1 декаду';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_DECADA_2 IS 'Факт за 2 декаду';

COMMENT ON COLUMN MASTER.PLAN_FACT.FACT_DECADA_3 IS 'Факт за 3 декаду';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_DECADA_1 IS 'План за 1 декаду';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_DECADA_2 IS 'План за 2 декаду';

COMMENT ON COLUMN MASTER.PLAN_FACT.PLAN_DECADA_3 IS 'План за 3 декаду';

COMMENT ON COLUMN MASTER.PLAN_FACT.NUM_DECADA IS '№ декады';



--
-- PLAN_FACT_REALIZ  (Table) 
--
CREATE TABLE MASTER.PLAN_FACT_REALIZ
(
  TERMINAL_NAME       VARCHAR2(30 BYTE),
  OSUSER_NAME         VARCHAR2(30 BYTE),
  TIP_ROW             VARCHAR2(40 BYTE),
  DATE_BEGIN          DATE,
  DATE_END            DATE,
  DATE_PLAN           DATE,
  FILIAL_ORDER        NUMBER(10),
  FILIAL_ID           NUMBER(10),
  FILIAL_NAME         VARCHAR2(100 BYTE),
  REGION_ORDER        NUMBER(10),
  REGION_NAME         VARCHAR2(30 BYTE),
  NAPR_ORDER          NUMBER(10),
  NAPR_NAME           VARCHAR2(30 BYTE),
  PROD_ID_NPR         VARCHAR2(6 BYTE),
  PROD_ORDER          NUMBER(10),
  PROD_NAME           VARCHAR2(100 BYTE),
  GROUP_ORDER         NUMBER(10),
  GROUP_NAME          VARCHAR2(100 BYTE),
  BEGIN_OST           NUMBER(15,6)              DEFAULT 0,
  PLAN_POST_VES       NUMBER(15,6)              DEFAULT 0,
  NORMA_POST_VES      NUMBER(15,6)              DEFAULT 0,
  FACT_POST_VES       NUMBER(15,6)              DEFAULT 0,
  RESURS              NUMBER(15,6)              DEFAULT 0,
  PLAN_REAL_VES       NUMBER(15,6)              DEFAULT 0,
  NORMA_REAL_VES      NUMBER(15,6)              DEFAULT 0,
  FACT_REAL_VES       NUMBER(15,6)              DEFAULT 0,
  END_OST             NUMBER(20,6)              DEFAULT 0,
  ORG_KIND_ORDER      NUMBER(10),
  ORG_KIND_ID         NUMBER(10),
  ORG_KIND_NAME       VARCHAR2(30 BYTE),
  ORG_STRU_ORDER      NUMBER(10),
  ORG_STRU_ID         NUMBER(10),
  ORG_STRU_NAME       VARCHAR2(50 BYTE),
  AVG_SUT_REAL_VES    NUMBER(15,6)              DEFAULT 0,
  GROUP_FULL_NAME     VARCHAR2(50 BYTE),
  FACT_REAL_SUMMA     NUMBER(15,2),
  AVG_SUT_REAL_SUMMA  NUMBER(15,2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PLAN_FACT_REALIZ IS 'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.TERMINAL_NAME IS 'Сетевое имя машины';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.OSUSER_NAME IS 'Сетевое имя пользователя';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.TIP_ROW IS 'Тип данных';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.DATE_BEGIN IS 'С даты';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.DATE_END IS 'По дату';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.FILIAL_ORDER IS 'Филиал';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.FILIAL_ID IS 'Филиал';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.FILIAL_NAME IS 'Филиал';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.REGION_ORDER IS 'Регион реализации';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.REGION_NAME IS 'Регион реализации';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.NAPR_ORDER IS 'Направление реализации';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.NAPR_NAME IS 'Направление реализации';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.PROD_ORDER IS 'Продукт';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.PROD_NAME IS 'Продукт';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.GROUP_ORDER IS 'Порядок групп продуктов';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.GROUP_NAME IS 'Группа продуктов';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.BEGIN_OST IS 'Начальный остаток';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.PLAN_POST_VES IS 'План поставки';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.FACT_POST_VES IS 'Факт поставки';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.RESURS IS 'Ресурс';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.PLAN_REAL_VES IS 'План реализации';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.FACT_REAL_VES IS 'Факт реализации';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.END_OST IS 'Конечный остаток';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.ORG_KIND_ORDER IS 'Вид подразделения';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.ORG_KIND_ID IS 'Вид подразделения';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.ORG_KIND_NAME IS 'Вид подразделения';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.ORG_STRU_ORDER IS 'Подразделение';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.ORG_STRU_ID IS 'Подразделение';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.ORG_STRU_NAME IS 'Подразделение';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.AVG_SUT_REAL_VES IS 'Среднесуточная реализация';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.GROUP_FULL_NAME IS 'Полное наименование группы нефтепродуктов';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.FACT_REAL_SUMMA IS 'Факт реализации в рублях';

COMMENT ON COLUMN MASTER.PLAN_FACT_REALIZ.AVG_SUT_REAL_SUMMA IS 'Среднесуточная реализация в рублях';



--
-- PLAN_POST_PRICHIN  (Table) 
--
CREATE TABLE MASTER.PLAN_POST_PRICHIN
(
  ID           NUMBER,
  BEG_DATE     DATE,
  END_DATE     DATE,
  TO_MOS       NUMBER(1),
  ORDNUNG      NUMBER,
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  PLANSTRU_ID  NUMBER,
  OWNER_ID     NUMBER,
  PLAN         NUMBER,
  IZM_PLAN     NUMBER,
  OBPR         NUMBER,
  NORMA        NUMBER,
  NORMA_OBPR   NUMBER,
  FACT         NUMBER,
  RAZN_TONN    NUMBER,
  RAZN_DAT     DATE,
  ZAYV_TONN    NUMBER,
  ZAYV_DAT     DATE,
  PRICHIN_ID   NUMBER,
  NOTE         VARCHAR2(250 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PLAN_REALIZ  (Table) 
--
CREATE TABLE MASTER.PLAN_REALIZ
(
  ID              NUMBER(10)                    NOT NULL,
  DATE_PLAN       DATE,
  VES             NUMBER(18,6)                  DEFAULT 0,
  SUPPLIER_ID     NUMBER(6),
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  TIP_REAL_ID     NUMBER(10),
  VID_REAL_ID     NUMBER(10),
  ORG_KIND_ID     NUMBER(10),
  ORG_STRU_ID     NUMBER(10),
  PARUS_RN        NUMBER(17),
  PARUS_NOMEN     NUMBER(17),
  PARUS_NOMMODIF  NUMBER(17),
  SKLAD_ID        NUMBER(10),
  IS_KORR         NUMBER(1)                     DEFAULT 0,
  PLANSTRU_ID     NUMBER(10),
  SUMMA           NUMBER(15,2)                  DEFAULT 0,
  IS_SIGN1        NUMBER(1)                     DEFAULT 1,
  IS_SIGN2        NUMBER(1)                     DEFAULT 0,
  FIRST_PLAN      NUMBER(18,6)                  DEFAULT 0,
  SKLAD_ID_FROM   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PLAN_REALIZ IS 'План реализации';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.ID IS 'План реализации';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.VES IS 'План, тн';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.SUPPLIER_ID IS 'Поставщик';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.PROD_ID_NPR IS 'Продукт (MASTER)';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.TIP_REAL_ID IS 'Реализация_транзит';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.VID_REAL_ID IS 'Продажа Франчайзинг';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.ORG_KIND_ID IS 'АЗС Нефтебаза';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.ORG_STRU_ID IS 'Филиал';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.PARUS_RN IS 'Позиция графика (PARUS)';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.PARUS_NOMEN IS 'Продукт (PARUS)';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.PARUS_NOMMODIF IS 'Продукт (PARUS)';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.SKLAD_ID IS 'Склад';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.IS_KORR IS 'Признак корректировки';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.PLANSTRU_ID IS 'Позиция плана (для внутрикорп.транзита)';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.SUMMA IS 'План, руб';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.IS_SIGN1 IS 'Подпись 1 Внесено';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.IS_SIGN2 IS 'Подпись 2 Утверждено';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.FIRST_PLAN IS 'Первоначальный план';

COMMENT ON COLUMN MASTER.PLAN_REALIZ.SKLAD_ID_FROM IS 'Склад снабжения';



--
-- PLAN_REFINERY  (Table) 
--
CREATE TABLE MASTER.PLAN_REFINERY
(
  KOD        NUMBER(10),
  DATA       DATE,
  PROD       VARCHAR2(5 BYTE),
  PERER      NUMBER(6),
  SOBSTV     NUMBER(6)                          DEFAULT 0,
  OSTAT      NUMBER(10,3)                       DEFAULT 0,
  OSTATTOV   NUMBER(10,3)                       DEFAULT 0,
  HRAN       NUMBER(10,3)                       DEFAULT 0,
  PLANUTMSK  NUMBER(10,3)                       DEFAULT 0,
  OSTUTMSK   NUMBER(10,3)                       DEFAULT 0,
  HRANUTMSK  NUMBER(10,3)                       DEFAULT 0,
  DAVUTMSK   NUMBER(10,3)                       DEFAULT 0,
  PLAN       NUMBER(10,3)                       DEFAULT 0,
  DEC1       NUMBER(10,3)                       DEFAULT 0,
  DEC2       NUMBER(10,3)                       DEFAULT 0,
  DEC3       NUMBER(10,3)                       DEFAULT 0,
  UNPD1      NUMBER(10,3)                       DEFAULT 0,
  UNPD2      NUMBER(10,3)                       DEFAULT 0,
  UNPD3      NUMBER(10,3)                       DEFAULT 0,
  OPERPLAN   NUMBER(10,3)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PLAN_TABLE  (Table) 
--
CREATE TABLE MASTER.PLAN_TABLE
(
  STATEMENT_ID     VARCHAR2(30 BYTE),
  TIMESTAMP        DATE,
  REMARKS          VARCHAR2(80 BYTE),
  OPERATION        VARCHAR2(30 BYTE),
  OPTIONS          VARCHAR2(30 BYTE),
  OBJECT_NODE      VARCHAR2(128 BYTE),
  OBJECT_OWNER     VARCHAR2(30 BYTE),
  OBJECT_NAME      VARCHAR2(30 BYTE),
  OBJECT_INSTANCE  INTEGER,
  OBJECT_TYPE      VARCHAR2(30 BYTE),
  OPTIMIZER        VARCHAR2(255 BYTE),
  SEARCH_COLUMNS   INTEGER,
  ID               INTEGER,
  PARENT_ID        INTEGER,
  POSITION         INTEGER,
  COST             INTEGER,
  CARDINALITY      INTEGER,
  BYTES            INTEGER,
  OTHER_TAG        VARCHAR2(255 BYTE),
  PARTITION_START  VARCHAR2(255 BYTE),
  PARTITION_STOP   VARCHAR2(255 BYTE),
  PARTITION_ID     INTEGER,
  OTHER            LONG,
  DISTRIBUTION     VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PREDPR_TEMP  (Table) 
--
CREATE TABLE MASTER.PREDPR_TEMP
(
  NAIM  VARCHAR2(60 BYTE),
  RS    VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PROGRAM_USERS  (Table) 
--
CREATE TABLE MASTER.PROGRAM_USERS
(
  ORGANIZATION  VARCHAR2(15 BYTE)               NOT NULL,
  APPLICATION   VARCHAR2(30 BYTE)               NOT NULL,
  FIO           VARCHAR2(50 BYTE)               NOT NULL,
  DEPARTMENT    VARCHAR2(100 BYTE)              NOT NULL,
  SL            VARCHAR2(3 BYTE)                DEFAULT 'SL2'                 NOT NULL
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- QUEST_SL_TEMP_EXPLAIN1  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.QUEST_SL_TEMP_EXPLAIN1
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(80 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_INSTANCE    NUMBER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 NUMBER,
  PARENT_ID          NUMBER,
  POSITION           NUMBER,
  COST               NUMBER,
  CARDINALITY        NUMBER,
  BYTES              NUMBER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       NUMBER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           NUMBER(38),
  IO_COST            NUMBER(38),
  TEMP_SPACE         NUMBER(38),
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE)
)
ON COMMIT PRESERVE ROWS;


--
-- QUEST_SL_TEMP_EXPLAIN2  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.QUEST_SL_TEMP_EXPLAIN2
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  PLAN_ID            NUMBER,
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(80 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_ALIAS       VARCHAR2(65 BYTE),
  OBJECT_INSTANCE    NUMBER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 NUMBER,
  PARENT_ID          NUMBER,
  DEPTH              NUMBER,
  POSITION           NUMBER,
  COST               NUMBER,
  CARDINALITY        NUMBER,
  BYTES              NUMBER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       NUMBER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           NUMBER(38),
  IO_COST            NUMBER(38),
  TEMP_SPACE         NUMBER(38),
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE)
)
ON COMMIT PRESERVE ROWS;


--
-- QUEST_TEMP_EXPLAIN  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.QUEST_TEMP_EXPLAIN
(
  STATEMENT_ID     VARCHAR2(30 BYTE),
  TIMESTAMP        DATE,
  REMARKS          VARCHAR2(80 BYTE),
  OPERATION        VARCHAR2(30 BYTE),
  OPTIONS          VARCHAR2(30 BYTE),
  OBJECT_NODE      VARCHAR2(128 BYTE),
  OBJECT_OWNER     VARCHAR2(30 BYTE),
  OBJECT_NAME      VARCHAR2(30 BYTE),
  OBJECT_INSTANCE  INTEGER,
  OBJECT_TYPE      VARCHAR2(30 BYTE),
  OPTIMIZER        VARCHAR2(255 BYTE),
  SEARCH_COLUMNS   INTEGER,
  ID               INTEGER,
  PARENT_ID        INTEGER,
  POSITION         INTEGER,
  COST             INTEGER,
  CARDINALITY      INTEGER,
  BYTES            INTEGER,
  OTHER_TAG        VARCHAR2(255 BYTE),
  PARTITION_START  VARCHAR2(255 BYTE),
  PARTITION_STOP   VARCHAR2(255 BYTE),
  PARTITION_ID     INTEGER,
  OTHER            LONG,
  DISTRIBUTION     VARCHAR2(30 BYTE),
  CPU_COST         INTEGER,
  IO_COST          INTEGER,
  TEMP_SPACE       INTEGER
)
ON COMMIT PRESERVE ROWS;


--
-- RAZNAR  (Table) 
--
CREATE TABLE MASTER.RAZNAR
(
  ID           NUMBER(10)                       NOT NULL,
  NOM_ZD       VARCHAR2(12 BYTE),
  DATE_RAZN    DATE,
  DATE_SEND    DATE,
  TIME_SEND    VARCHAR2(8 BYTE),
  USER_SEND    VARCHAR2(30 BYTE),
  MESTO_ID     NUMBER(10),
  FLAG_SEND    NUMBER(1),
  TONN_RAZNAR  NUMBER(10,3)                     DEFAULT 0,
  CIST_RAZNAR  NUMBER(5)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.RAZNAR IS 'Разнарядки на места отгрузки (История заявки)';

COMMENT ON COLUMN MASTER.RAZNAR.NOM_ZD IS 'Заявка';

COMMENT ON COLUMN MASTER.RAZNAR.DATE_RAZN IS 'Дата изменения заявки';

COMMENT ON COLUMN MASTER.RAZNAR.DATE_SEND IS 'Дата отправки на место отгрузки';

COMMENT ON COLUMN MASTER.RAZNAR.TIME_SEND IS 'Время отправки на место отгрузки';

COMMENT ON COLUMN MASTER.RAZNAR.USER_SEND IS 'Пользователь';

COMMENT ON COLUMN MASTER.RAZNAR.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.RAZNAR.FLAG_SEND IS 'Флаг передачи';

COMMENT ON COLUMN MASTER.RAZNAR.TONN_RAZNAR IS 'Тонн разнаряжено';

COMMENT ON COLUMN MASTER.RAZNAR.CIST_RAZNAR IS 'Цистерн разнаряжено';



--
-- REAL_OPL  (Table) 
--
CREATE TABLE MASTER.REAL_OPL
(
  NOM_DOK     NUMBER,
  KOD_NFP     VARCHAR2(5 BYTE),
  CENA_NFP    NUMBER,
  VES         NUMBER,
  D_41        NUMBER,
  SUM_AKCIZ   NUMBER,
  D_191       NUMBER,
  D_67        NUMBER,
  CPEC_PROD   NUMBER,
  SUM_NALIV   NUMBER,
  NDC_NAL20   NUMBER,
  NDC_NAL03   NUMBER,
  D_441       NUMBER,
  D_194       NUMBER,
  CPEC_TARIF  NUMBER,
  D_443       NUMBER,
  NDC_VN20    NUMBER,
  NDC_VN03    NUMBER,
  D_442       NUMBER,
  NDC_TR20    NUMBER,
  NDC_TR03    NUMBER,
  USL_PPZT    NUMBER,
  NDC_PPZT    NUMBER,
  CN_PPZT     NUMBER,
  SUM_NACEN   NUMBER,
  DATA_BUXG   DATE,
  CLOSE_DATE  DATE,
  SOBSTV      NUMBER,
  UN_DOK      NUMBER,
  DATA_POST   DATE,
  N_SCHET     NUMBER,
  VID_OPL     NUMBER,
  KOD_REALP   NUMBER,
  DOG_REALP   VARCHAR2(10 BYTE),
  CORR_DATE   DATE,
  SUMMA_DOK1  NUMBER,
  KR          NUMBER,
  OST_SUM     NUMBER,
  AVANS       NUMBER,
  UBIT        NUMBER,
  NOM_SF      NUMBER,
  KOD_KR      NUMBER,
  ID          NUMBER,
  ID_UB       NUMBER,
  TAX_SALE    NUMBER,
  CENA_POK    NUMBER,
  D_41POK     NUMBER,
  D_191POK    NUMBER,
  D_67POK     NUMBER,
  DATASCHF    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REAL_OPL_KTU  (Table) 
--
CREATE TABLE MASTER.REAL_OPL_KTU
(
  NOM_DOK     NUMBER,
  KOD_NFP     VARCHAR2(5 BYTE),
  CENA_NFP    NUMBER,
  VES         NUMBER,
  D_41        NUMBER,
  SUM_AKCIZ   NUMBER,
  D_191       NUMBER,
  D_67        NUMBER,
  CPEC_PROD   NUMBER,
  SUM_NALIV   NUMBER,
  NDC_NAL20   NUMBER,
  NDC_NAL03   NUMBER,
  D_441       NUMBER,
  D_194       NUMBER,
  CPEC_TARIF  NUMBER,
  D_443       NUMBER,
  NDC_VN20    NUMBER,
  NDC_VN03    NUMBER,
  D_442       NUMBER,
  NDC_TR20    NUMBER,
  NDC_TR03    NUMBER,
  USL_PPZT    NUMBER,
  NDC_PPZT    NUMBER,
  CN_PPZT     NUMBER,
  SUM_NACEN   NUMBER,
  DATA_BUXG   DATE,
  CLOSE_DATE  DATE,
  SOBSTV      NUMBER,
  UN_DOK      NUMBER,
  DATA_POST   DATE,
  N_SCHET     NUMBER,
  VID_OPL     NUMBER,
  KOD_REALP   NUMBER,
  DOG_REALP   VARCHAR2(10 BYTE),
  CORR_DATE   DATE,
  SUMMA_DOK1  NUMBER,
  KR          NUMBER,
  OST_SUM     NUMBER,
  AVANS       NUMBER,
  UBIT        NUMBER,
  NOM_SF      NUMBER,
  KOD_KR      NUMBER,
  ID          NUMBER,
  ID_UB       NUMBER,
  TAX_SALE    NUMBER,
  CENA_POK    NUMBER,
  D_41POK     NUMBER,
  D_191POK    NUMBER,
  D_67POK     NUMBER,
  DATASCHF    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR_RAIL  (Table) 
--
CREATE TABLE MASTER.REESTR_RAIL
(
  NUM_PER         VARCHAR2(10 BYTE),
  DATA_PER        DATE,
  DATE_OTGR       DATE,
  NUM_KVIT        NUMBER,
  TARIF           NUMBER                        DEFAULT 0,
  TARNDS          NUMBER                        DEFAULT 0,
  NOM_ZD          VARCHAR2(12 BYTE),
  GUARD           NUMBER                        DEFAULT 0,
  GUARDNDS        NUMBER                        DEFAULT 0,
  REESTR_RAIL_ID  NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR_RAIL_DOP_SF  (Table) 
--
CREATE TABLE MASTER.REESTR_RAIL_DOP_SF
(
  V_DOK                  VARCHAR2(1 BYTE),
  V_PLAY                 VARCHAR2(2 BYTE),
  MES_DOK                VARCHAR2(2 BYTE),
  GOD_DOK                VARCHAR2(4 BYTE),
  SUMMA                  NUMBER(22,2),
  NOM_DOK                VARCHAR2(10 BYTE),
  NOM_PERECH             VARCHAR2(10 BYTE),
  DAT_PERECH             DATE,
  NOM_SF_GD              VARCHAR2(10 BYTE),
  DAT_SF                 DATE,
  NUM_CIST               NUMBER,
  REM                    VARCHAR2(20 BYTE),
  SOBST                  NUMBER,
  KST                    NUMBER,
  REESTR_RAIL_DOP_SF_ID  NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR_RAIL_RGD_SF  (Table) 
--
CREATE TABLE MASTER.REESTR_RAIL_RGD_SF
(
  NOM_SCH                VARCHAR2(10 BYTE),
  DATE_SCH               DATE,
  NOM_PERECH             VARCHAR2(10 BYTE),
  DAT_PERECH             DATE,
  R21                    NUMBER,
  KST                    NUMBER,
  REESTR_RAIL_RGD_SF_ID  NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR_RAIL_SF  (Table) 
--
CREATE TABLE MASTER.REESTR_RAIL_SF
(
  NUM_PER            VARCHAR2(10 BYTE),
  DATA_PER           DATE,
  TARIF              NUMBER                     DEFAULT 0,
  TARNDS             NUMBER                     DEFAULT 0,
  REESTR_RAIL_SF_ID  NUMBER                     NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR_TEMP  (Table) 
--
CREATE TABLE MASTER.REESTR_TEMP
(
  SSTAN           VARCHAR2(6 BYTE),
  SNUM_PER        VARCHAR2(4 BYTE),
  DDAT_PER        DATE,
  SNUM_KVIT       VARCHAR2(8 BYTE),
  DDATE_KVIT      DATE,
  NSUMMA          NUMBER(12,2),
  NNDS            NUMBER(12,2),
  REESTR_TEMP_ID  NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.REESTR_TEMP.SSTAN IS 'Код станции';

COMMENT ON COLUMN MASTER.REESTR_TEMP.SNUM_PER IS 'номер перечня';

COMMENT ON COLUMN MASTER.REESTR_TEMP.DDAT_PER IS 'дата перечня';

COMMENT ON COLUMN MASTER.REESTR_TEMP.SNUM_KVIT IS '№ квитанции';

COMMENT ON COLUMN MASTER.REESTR_TEMP.DDATE_KVIT IS 'дата квитанции';

COMMENT ON COLUMN MASTER.REESTR_TEMP.NSUMMA IS 'сумма';

COMMENT ON COLUMN MASTER.REESTR_TEMP.NNDS IS 'ндс';

COMMENT ON COLUMN MASTER.REESTR_TEMP.REESTR_TEMP_ID IS 'PK';



--
-- REPL_CHECK_MODES  (Table) 
--
CREATE TABLE MASTER.REPL_CHECK_MODES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_CHECK_MODES IS 'Режимы проверки необходимости запуска репликации';

COMMENT ON COLUMN MASTER.REPL_CHECK_MODES.ID IS 'Режим проверки необходимости запуска';

COMMENT ON COLUMN MASTER.REPL_CHECK_MODES.NAME IS 'Наименование';



--
-- REPL_DEPENDENCE  (Table) 
--
CREATE TABLE MASTER.REPL_DEPENDENCE
(
  ID           NUMBER(10)                       NOT NULL,
  SORTBY       NUMBER(10)                       DEFAULT 1,
  REPL_PARENT  NUMBER(10),
  REPL_CHILD   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_DEPENDENCE IS 'Дерево зависимых репликаций';

COMMENT ON COLUMN MASTER.REPL_DEPENDENCE.ID IS 'Зависимости';

COMMENT ON COLUMN MASTER.REPL_DEPENDENCE.SORTBY IS 'Порядок опроса';

COMMENT ON COLUMN MASTER.REPL_DEPENDENCE.REPL_PARENT IS 'Репликация-родитель (кто зависит)';

COMMENT ON COLUMN MASTER.REPL_DEPENDENCE.REPL_CHILD IS 'Репликация-дочка (от кого зависит)';



--
-- REPL_DSN_TYPES  (Table) 
--
CREATE TABLE MASTER.REPL_DSN_TYPES
(
  ID          VARCHAR2(15 BYTE)                 NOT NULL,
  NAME        VARCHAR2(30 BYTE),
  DESCRIPT    VARCHAR2(200 BYTE),
  CHECK_FILE  NUMBER(1)                         DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_DSN_TYPES IS 'Типы источников данных';

COMMENT ON COLUMN MASTER.REPL_DSN_TYPES.ID IS 'Тип источника';

COMMENT ON COLUMN MASTER.REPL_DSN_TYPES.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPL_DSN_TYPES.DESCRIPT IS 'Описание';

COMMENT ON COLUMN MASTER.REPL_DSN_TYPES.CHECK_FILE IS 'Проверять на изменение файла';



--
-- REPL_FILE_KINDS  (Table) 
--
CREATE TABLE MASTER.REPL_FILE_KINDS
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_FILE_KINDS IS 'Виды транспортных файлов';

COMMENT ON COLUMN MASTER.REPL_FILE_KINDS.ID IS 'Вид транспортного файла';

COMMENT ON COLUMN MASTER.REPL_FILE_KINDS.NAME IS 'Наименование';



--
-- REPL_FILE_TYPES  (Table) 
--
CREATE TABLE MASTER.REPL_FILE_TYPES
(
  ID         NUMBER(10)                         NOT NULL,
  TAG        VARCHAR2(15 BYTE),
  NAME       VARCHAR2(50 BYTE),
  FILE_KIND  NUMBER(10),
  FILE_MASK  VARCHAR2(20 BYTE),
  FILE_PATH  VARCHAR2(240 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_FILE_TYPES IS 'Типы транспортных файлов';

COMMENT ON COLUMN MASTER.REPL_FILE_TYPES.ID IS 'Тип транспортного файла';

COMMENT ON COLUMN MASTER.REPL_FILE_TYPES.TAG IS 'Префикс файла';

COMMENT ON COLUMN MASTER.REPL_FILE_TYPES.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPL_FILE_TYPES.FILE_KIND IS 'Вид транспортного файла';

COMMENT ON COLUMN MASTER.REPL_FILE_TYPES.FILE_MASK IS 'Маска файла';

COMMENT ON COLUMN MASTER.REPL_FILE_TYPES.FILE_PATH IS 'Каталог';



--
-- REPL_INFO_TYPES  (Table) 
--
CREATE TABLE MASTER.REPL_INFO_TYPES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_INFO_TYPES IS 'Типы источников';

COMMENT ON COLUMN MASTER.REPL_INFO_TYPES.ID IS 'Тип источника';

COMMENT ON COLUMN MASTER.REPL_INFO_TYPES.NAME IS 'Наименование';



--
-- REPL_KINDS  (Table) 
--
CREATE TABLE MASTER.REPL_KINDS
(
  ID        NUMBER(10)                          NOT NULL,
  NAME      VARCHAR2(50 BYTE),
  DESCRIPT  VARCHAR2(250 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_KINDS IS 'Виды репликаций';

COMMENT ON COLUMN MASTER.REPL_KINDS.ID IS 'Вид репликации';

COMMENT ON COLUMN MASTER.REPL_KINDS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPL_KINDS.DESCRIPT IS 'Описание';



--
-- REPL_PROC_TYPES  (Table) 
--
CREATE TABLE MASTER.REPL_PROC_TYPES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_PROC_TYPES IS 'Типы процедур обработки';

COMMENT ON COLUMN MASTER.REPL_PROC_TYPES.ID IS 'Тип процедуры обработки';

COMMENT ON COLUMN MASTER.REPL_PROC_TYPES.NAME IS 'Наименование';



--
-- REPL_SESSION  (Table) 
--
CREATE TABLE MASTER.REPL_SESSION
(
  ID             NUMBER(10)                     NOT NULL,
  STATUS         NUMBER(10)                     DEFAULT 0,
  DATE_START     DATE,
  DATE_FINISH    DATE,
  DESCRIPT       VARCHAR2(100 BYTE),
  OSUSER_NAME    VARCHAR2(30 BYTE),
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  APPL_NAME      VARCHAR2(30 BYTE),
  SESSIONID      NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_SESSION IS 'Сессии приложений';

COMMENT ON COLUMN MASTER.REPL_SESSION.ID IS 'Сессия';

COMMENT ON COLUMN MASTER.REPL_SESSION.STATUS IS 'Статус';

COMMENT ON COLUMN MASTER.REPL_SESSION.DATE_START IS 'Старт';

COMMENT ON COLUMN MASTER.REPL_SESSION.DATE_FINISH IS 'Финиш';

COMMENT ON COLUMN MASTER.REPL_SESSION.DESCRIPT IS 'Доп.текст';

COMMENT ON COLUMN MASTER.REPL_SESSION.OSUSER_NAME IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPL_SESSION.TERMINAL_NAME IS 'Машина';

COMMENT ON COLUMN MASTER.REPL_SESSION.APPL_NAME IS 'Приложение';



--
-- REPL_SESSION_LOG  (Table) 
--
CREATE TABLE MASTER.REPL_SESSION_LOG
(
  ID           NUMBER(10)                       NOT NULL,
  SESSION_ID   NUMBER(10),
  STATUS       NUMBER(10)                       DEFAULT 0,
  DESCRIPT     VARCHAR2(500 BYTE),
  LOG_TIME     DATE,
  MODULE_NAME  VARCHAR2(30 BYTE),
  SITE_RN      NUMBER(17)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_SESSION_LOG IS 'Журнал сессий';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.ID IS 'ID этапа сессии';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.SESSION_ID IS 'Сессия';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.STATUS IS 'Статус';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.DESCRIPT IS 'Описание';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.LOG_TIME IS 'Дата записи в журнал';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.MODULE_NAME IS 'Модуль приложения';

COMMENT ON COLUMN MASTER.REPL_SESSION_LOG.SITE_RN IS 'Узел, на котором произошло событие';



--
-- REPL_SITE_TYPES  (Table) 
--
CREATE TABLE MASTER.REPL_SITE_TYPES
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(50 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_SITE_TYPES IS 'Типы узлов репликации';

COMMENT ON COLUMN MASTER.REPL_SITE_TYPES.ID IS 'Тип узла репликации';

COMMENT ON COLUMN MASTER.REPL_SITE_TYPES.NAME IS 'Наименование';



--
-- REPL_TABLE  (Table) 
--
CREATE TABLE MASTER.REPL_TABLE
(
  REPL_ID     NUMBER(17)                        NOT NULL,
  ID          NUMBER(10),
  REPL_OPER   VARCHAR2(1 BYTE),
  REPL_DATE   DATE,
  REPL_ANSW   DATE,
  REPLSTATUS  NUMBER(1)                         DEFAULT 1,
  REPL_ERROR  VARCHAR2(100 BYTE),
  REPL_LIST   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_TABLE IS 'Репликационная таблица';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPL_ID IS 'Запись в репликационной таблице';

COMMENT ON COLUMN MASTER.REPL_TABLE.ID IS 'Уникальный ID реплицируемой таблицы';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPL_OPER IS 'Операция (I,U,D)';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPL_DATE IS 'Дата операции';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPL_ANSW IS 'Дата ответа';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPLSTATUS IS 'Статус';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPL_ERROR IS 'Ошибка';

COMMENT ON COLUMN MASTER.REPL_TABLE.REPL_LIST IS 'Репликация';



--
-- REPORT_GROUPS  (Table) 
--
CREATE TABLE MASTER.REPORT_GROUPS
(
  ID                 NUMBER                     NOT NULL,
  REPORT_GROUP       VARCHAR2(15 BYTE),
  REPORT_GROUP_NAME  VARCHAR2(80 BYTE),
  SORTBY             NUMBER(2),
  REP_KIND           VARCHAR2(30 BYTE),
  VIEW_TAB           VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORT_GROUPS IS 'Группы отчетов';

COMMENT ON COLUMN MASTER.REPORT_GROUPS.ID IS 'Группа отчетов';

COMMENT ON COLUMN MASTER.REPORT_GROUPS.REPORT_GROUP IS 'Мнемокод';

COMMENT ON COLUMN MASTER.REPORT_GROUPS.REPORT_GROUP_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPORT_GROUPS.SORTBY IS 'Порядок сортировки (для записей с одинаковым REP_KIND)';

COMMENT ON COLUMN MASTER.REPORT_GROUPS.REP_KIND IS 'Принадлежность к подразделению';

COMMENT ON COLUMN MASTER.REPORT_GROUPS.VIEW_TAB IS 'Страница параметров';



--
-- REPORTS  (Table) 
--
CREATE TABLE MASTER.REPORTS
(
  ID               NUMBER                       NOT NULL,
  REPORT_NAME      VARCHAR2(80 BYTE),
  REPORT_FILE      VARCHAR2(30 BYTE),
  REPORT_GROUP     VARCHAR2(15 BYTE),
  SORTBY           NUMBER(5),
  PARAM1           VARCHAR2(15 BYTE),
  REPORT_TITLE     VARCHAR2(250 BYTE),
  IS_MSSQL         NUMBER(1)                    DEFAULT 0,
  IS_VIP           NUMBER(1)                    DEFAULT 0,
  COPY_FILE        VARCHAR2(100 BYTE),
  REPORT_TYPE      VARCHAR2(7 BYTE),
  DIAGRAM_TYPE     VARCHAR2(10 BYTE),
  DIAGRAM_KIND     VARCHAR2(30 BYTE),
  AXES_X_NAME      VARCHAR2(30 BYTE),
  COUNT_COLS_X     NUMBER(2)                    DEFAULT 1,
  AXES_Y_NAME      VARCHAR2(30 BYTE),
  COUNT_COLS_Y     NUMBER(2)                    DEFAULT 1,
  PROC_PACKET      VARCHAR2(30 BYTE),
  PROC_NAME        VARCHAR2(30 BYTE),
  DEF_BEG_VAL      VARCHAR2(30 BYTE),
  DEF_END_VAL      VARCHAR2(30 BYTE),
  DEF_BEG_TIME     VARCHAR2(8 BYTE),
  DEF_END_TIME     VARCHAR2(8 BYTE),
  VIEW_TIME        NUMBER(1)                    DEFAULT NULL,
  TIP_DATE         VARCHAR2(30 BYTE),
  PARUS_PROC       VARCHAR2(30 BYTE),
  REP_FORM         VARCHAR2(30 BYTE),
  LAST_NUM_REP     NUMBER(10),
  SQL_SOURCE       VARCHAR2(4000 BYTE),
  EMAIL_DBF        VARCHAR2(200 BYTE),
  ARCHIVE          VARCHAR2(100 BYTE),
  DBF_FOR_DBF      VARCHAR2(100 BYTE),
  FIELDS_NAME      VARCHAR2(1000 BYTE),
  FIELDS_SUM       VARCHAR2(100 BYTE),
  SEND_DBF         NUMBER(1)                    DEFAULT 0,
  SEND_XLS         NUMBER(1)                    DEFAULT 0,
  SEND_DBF_NAME    VARCHAR2(100 BYTE),
  DBF_FOR_XLS      VARCHAR2(100 BYTE),
  SEND_XLS_NAME    VARCHAR2(100 BYTE),
  EMAIL_XLS        VARCHAR2(200 BYTE),
  SQL_SOURCE_TYPE  VARCHAR2(3 BYTE),
  SQL_DATABASE     VARCHAR2(30 BYTE),
  SQL_USERNAME     VARCHAR2(30 BYTE),
  SQL_PASSWORD     VARCHAR2(30 BYTE),
  ZIP_DBF          NUMBER(1),
  PREPARE_XLS      NUMBER(1)                    DEFAULT 0,
  ASK_RUN_PROC     NUMBER(1)                    DEFAULT 0,
  ASK_RUN_TEXT     VARCHAR2(50 BYTE),
  SEND_CSV         NUMBER(1)                    DEFAULT 0,
  SEND_CSV_NAME    VARCHAR2(100 BYTE),
  EMAIL_CSV        VARCHAR2(200 BYTE),
  ZIP_CSV          NUMBER(1)                    DEFAULT 0,
  DOS_CODEPAGE     NUMBER(1)                    DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORTS IS 'Отчеты';

COMMENT ON COLUMN MASTER.REPORTS.ID IS 'Отчет';

COMMENT ON COLUMN MASTER.REPORTS.REPORT_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPORTS.REPORT_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.REPORTS.REPORT_GROUP IS 'Группа';

COMMENT ON COLUMN MASTER.REPORTS.SORTBY IS 'Порядок';

COMMENT ON COLUMN MASTER.REPORTS.PARAM1 IS 'Параметр (будет передан в отчет)';

COMMENT ON COLUMN MASTER.REPORTS.REPORT_TITLE IS 'Заголовок';

COMMENT ON COLUMN MASTER.REPORTS.IS_MSSQL IS 'Использовать MS SQL Server';

COMMENT ON COLUMN MASTER.REPORTS.IS_VIP IS 'Для руководства';

COMMENT ON COLUMN MASTER.REPORTS.COPY_FILE IS 'Скопировать файл';

COMMENT ON COLUMN MASTER.REPORTS.REPORT_TYPE IS 'Тип отчета';

COMMENT ON COLUMN MASTER.REPORTS.DIAGRAM_TYPE IS 'Тип диаграммы';

COMMENT ON COLUMN MASTER.REPORTS.DIAGRAM_KIND IS 'Вид диаграммы';

COMMENT ON COLUMN MASTER.REPORTS.AXES_X_NAME IS 'Наименование оси X';

COMMENT ON COLUMN MASTER.REPORTS.COUNT_COLS_X IS 'Кол-во категорий по оси X';

COMMENT ON COLUMN MASTER.REPORTS.AXES_Y_NAME IS 'Наименование оси Y';

COMMENT ON COLUMN MASTER.REPORTS.COUNT_COLS_Y IS 'Кол-во категорий по оси Y';

COMMENT ON COLUMN MASTER.REPORTS.PROC_PACKET IS 'Пакет';

COMMENT ON COLUMN MASTER.REPORTS.PROC_NAME IS 'Процедура';

COMMENT ON COLUMN MASTER.REPORTS.DEF_BEG_VAL IS 'Значение по умолчанию';

COMMENT ON COLUMN MASTER.REPORTS.DEF_END_VAL IS 'Значение по умолчанию';

COMMENT ON COLUMN MASTER.REPORTS.DEF_BEG_TIME IS 'Время начала по умолчанию';

COMMENT ON COLUMN MASTER.REPORTS.DEF_END_TIME IS 'Время окончания по умолчанию';

COMMENT ON COLUMN MASTER.REPORTS.VIEW_TIME IS 'Показывать время';

COMMENT ON COLUMN MASTER.REPORTS.TIP_DATE IS 'Тип даты';

COMMENT ON COLUMN MASTER.REPORTS.PARUS_PROC IS 'Процедура из Паруса';

COMMENT ON COLUMN MASTER.REPORTS.REP_FORM IS 'Форма, которая открывается при выборе отчета';

COMMENT ON COLUMN MASTER.REPORTS.LAST_NUM_REP IS '№ последнего отправленного отчета';

COMMENT ON COLUMN MASTER.REPORTS.SQL_SOURCE IS 'Запрос на отбор данных для отчета';

COMMENT ON COLUMN MASTER.REPORTS.EMAIL_DBF IS 'Список адресов для отправки DBF-файла';

COMMENT ON COLUMN MASTER.REPORTS.ARCHIVE IS 'Каталог, в котором сохраняются отправленные файлы';

COMMENT ON COLUMN MASTER.REPORTS.DBF_FOR_DBF IS 'Шаблон файла DBF для формирования и отсылки DBF';

COMMENT ON COLUMN MASTER.REPORTS.FIELDS_NAME IS 'Наименования полей (через ;)';

COMMENT ON COLUMN MASTER.REPORTS.FIELDS_SUM IS 'Поля, по которым нужны итоги (через ;)';

COMMENT ON COLUMN MASTER.REPORTS.SEND_DBF IS 'Кнопка "Отправить DBF-файл"';

COMMENT ON COLUMN MASTER.REPORTS.SEND_XLS IS 'Кнопка "Отправить XLS-файл"';

COMMENT ON COLUMN MASTER.REPORTS.SEND_DBF_NAME IS 'Правила наименования файла для отправки DBF-файла';

COMMENT ON COLUMN MASTER.REPORTS.DBF_FOR_XLS IS 'Шаблон файла DBF для формирования и отсылки XLS';

COMMENT ON COLUMN MASTER.REPORTS.SEND_XLS_NAME IS 'Правила наименования файла для отправки XLS';

COMMENT ON COLUMN MASTER.REPORTS.EMAIL_XLS IS 'Список адресов для отправки XLS-файла';

COMMENT ON COLUMN MASTER.REPORTS.SQL_SOURCE_TYPE IS 'Тип запроса';

COMMENT ON COLUMN MASTER.REPORTS.SQL_DATABASE IS 'БД';

COMMENT ON COLUMN MASTER.REPORTS.SQL_USERNAME IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPORTS.SQL_PASSWORD IS 'Пароль';

COMMENT ON COLUMN MASTER.REPORTS.ZIP_DBF IS 'Упаковывать DBF-файл';

COMMENT ON COLUMN MASTER.REPORTS.PREPARE_XLS IS 'Кнопка "Сформировать XLS-файл"';

COMMENT ON COLUMN MASTER.REPORTS.ASK_RUN_PROC IS 'Запрашивать запуск процедуры';

COMMENT ON COLUMN MASTER.REPORTS.ASK_RUN_TEXT IS 'Текст при запросе запуска процедуры';

COMMENT ON COLUMN MASTER.REPORTS.SEND_CSV IS 'Кнопка "Отправить CSV-файл"';

COMMENT ON COLUMN MASTER.REPORTS.SEND_CSV_NAME IS 'Правила наименования файла для отправки CSV-файла';

COMMENT ON COLUMN MASTER.REPORTS.EMAIL_CSV IS 'Список адресов для отправки CSV-файла';

COMMENT ON COLUMN MASTER.REPORTS.ZIP_CSV IS 'Упаковывать CSV-файл';

COMMENT ON COLUMN MASTER.REPORTS.DOS_CODEPAGE IS '1-Кодовая страница DOS';



--
-- REPORTS_NUM_REP  (Table) 
--
CREATE TABLE MASTER.REPORTS_NUM_REP
(
  REP_ID      NUMBER(10),
  BEGIN_DATE  DATE,
  END_DATE    DATE,
  IS_CRT      NUMBER(1)                         DEFAULT 0,
  NUM_REP     NUMBER(10)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORTS_NUM_REP IS 'Нумерация отчетов';

COMMENT ON COLUMN MASTER.REPORTS_NUM_REP.REP_ID IS 'Отчет';

COMMENT ON COLUMN MASTER.REPORTS_NUM_REP.BEGIN_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.REPORTS_NUM_REP.END_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.REPORTS_NUM_REP.IS_CRT IS 'Признак корректировки';

COMMENT ON COLUMN MASTER.REPORTS_NUM_REP.NUM_REP IS 'Номер отчета';



--
-- REPORTS_PARAM  (Table) 
--
CREATE TABLE MASTER.REPORTS_PARAM
(
  ID                      NUMBER(10)            NOT NULL,
  REPORTS_ID              NUMBER(10),
  PARAM_NAME              VARCHAR2(30 BYTE),
  PARAM_ORDER             NUMBER(10),
  PARAM_VISIBLE           NUMBER(1),
  PROC_PARAM_NAME         VARCHAR2(30 BYTE),
  PROC_PARAM_ORDER        NUMBER(10),
  MASTER_TAG              VARCHAR2(30 BYTE),
  PARUS_PROC_PARAM_NAME   VARCHAR2(30 BYTE),
  PARUS_PROC_PARAM_ORDER  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORTS_PARAM IS 'Параметры отчетов';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.ID IS 'Параметры отчета';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.REPORTS_ID IS 'Отчет';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PARAM_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PARAM_ORDER IS 'Порядок параметров в отчете';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PARAM_VISIBLE IS 'Видимость параметра в интерфейсе';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PROC_PARAM_NAME IS 'Параметр процедуры';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PROC_PARAM_ORDER IS 'Порядок параметров в процедуре';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.MASTER_TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PARUS_PROC_PARAM_NAME IS 'Параметр процедуры из Паруса';

COMMENT ON COLUMN MASTER.REPORTS_PARAM.PARUS_PROC_PARAM_ORDER IS 'Порядок параметра процедуры из Паруса';



--
-- REPORTS_REALIZ  (Table) 
--
CREATE TABLE MASTER.REPORTS_REALIZ
(
  ID          NUMBER(10)                        NOT NULL,
  BEGIN_DATE  DATE,
  END_DATE    DATE,
  IS_CRT      NUMBER(1)                         DEFAULT 0,
  NUM_REP     NUMBER(10),
  INN_SRC     NUMBER(12)                        DEFAULT 0,
  SRC         VARCHAR2(250 BYTE),
  REP_ROW     NUMBER(10),
  REP_CRT     NUMBER(10),
  KVIT_NUM    NUMBER(12),
  KV_DATA     DATE,
  CNTR        VARCHAR2(250 BYTE),
  INN_CNTR    NUMBER(12)                        DEFAULT 0,
  DOG_NUM     VARCHAR2(30 BYTE),
  DOG_ID      NUMBER(10),
  PLT_NUM     NUMBER(10),
  PLT_DATA    DATE,
  PROT_NUM    VARCHAR2(30 BYTE),
  TOVAR       VARCHAR2(250 BYTE),
  TOVAR_ID    NUMBER(10),
  PACK        VARCHAR2(50 BYTE),
  PACK_ID     NUMBER(10)                        DEFAULT 0,
  TOV_SRC     NUMBER(1)                         DEFAULT 0,
  TOV_CLS     NUMBER(1)                         DEFAULT 0,
  WEGHT       NUMBER(15,3)                      DEFAULT 0,
  CLR_PRC     NUMBER(15,2)                      DEFAULT 0,
  NDS         NUMBER(15,2)                      DEFAULT 0,
  AKCIZ       NUMBER(15,2)                      DEFAULT 0,
  FULL_PRC    NUMBER(15,2)                      DEFAULT 0,
  CLR_CST     NUMBER(15,2)                      DEFAULT 0,
  FULL_CST    NUMBER(15,2)                      DEFAULT 0,
  INN_RES     NUMBER(12)                        DEFAULT 0,
  RES         VARCHAR2(250 BYTE),
  STANTION    VARCHAR2(250 BYTE),
  REG_ID      NUMBER(10)                        DEFAULT 0,
  REG         VARCHAR2(250 BYTE),
  USER_SEND   VARCHAR2(30 BYTE),
  DATE_SEND   DATE,
  USERCREATE  VARCHAR2(30 BYTE),
  DATECREATE  DATE,
  BILL_ID     NUMBER(10),
  INCO1_ID    NUMBER(10),
  INCO1       VARCHAR2(50 BYTE),
  INCO2_ID    NUMBER(10),
  INCO2       VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORTS_REALIZ IS 'Отчет по реализации';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.ID IS 'ID';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.BEGIN_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.END_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.IS_CRT IS '0-отчет 1-корректировка';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.NUM_REP IS 'N отчета';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INN_SRC IS 'ИНН предпр. представившего отчет';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.SRC IS 'Наименование предпр. представившего отчет';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.REP_ROW IS 'N строки';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.REP_CRT IS 'N отчета, к которому приводится корректировка';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.KVIT_NUM IS 'N квитанции';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.KV_DATA IS 'Дата квитанции';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.CNTR IS 'Покупатель';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INN_CNTR IS 'ИНН покупателя';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.DOG_NUM IS 'Договор';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.DOG_ID IS 'ID договора';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.PLT_NUM IS 'N СФ';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.PLT_DATA IS 'Дата СФ';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.PROT_NUM IS 'Протокол цен';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.TOVAR IS 'Продукт';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.TOVAR_ID IS 'ID продукта';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.PACK IS 'Упаковка';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.PACK_ID IS 'ID упаковки';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.TOV_SRC IS '0-собс 1-приобр';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.TOV_CLS IS '0-н/п';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.WEGHT IS 'Вес';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.CLR_PRC IS 'цена без НДС';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.NDS IS 'НДС';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.AKCIZ IS 'ставка акциза';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.FULL_PRC IS 'цена с НДС';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.CLR_CST IS 'стоимость без НДС';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.FULL_CST IS 'стоимость с НДС';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INN_RES IS 'ИНН получателя';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.RES IS 'Получатель';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.STANTION IS 'Станция';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.REG_ID IS 'ID регисона';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.REG IS 'Регион';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.USER_SEND IS 'Пользователь, отправивший отчет';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.DATE_SEND IS 'Дата отправки';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.USERCREATE IS 'Пользователь, сформировавший отчет';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.DATECREATE IS 'Дата формирования';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.BILL_ID IS 'ID СФ';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INCO1_ID IS 'Пункт перехода';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INCO1 IS 'Пункт перехода';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INCO2_ID IS 'Условия поставки';

COMMENT ON COLUMN MASTER.REPORTS_REALIZ.INCO2 IS 'Условия поставки';



--
-- REPORT_TAGS  (Table) 
--
CREATE TABLE MASTER.REPORT_TAGS
(
  NAME        VARCHAR2(30 BYTE),
  INFO        VARCHAR2(30 BYTE),
  OWNER_TAB   VARCHAR2(15 BYTE),
  QUERY_NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORT_TAGS IS 'Теги полей ввода параметров отчетов';

COMMENT ON COLUMN MASTER.REPORT_TAGS.NAME IS 'Мнемокод';

COMMENT ON COLUMN MASTER.REPORT_TAGS.INFO IS 'Пояснение';

COMMENT ON COLUMN MASTER.REPORT_TAGS.OWNER_TAB IS 'Страница-владелец (в форме AllRep)';

COMMENT ON COLUMN MASTER.REPORT_TAGS.QUERY_NAME IS 'Название запроса в форме AllRep для этого параметра';



--
-- REPORT_TIP_DATES  (Table) 
--
CREATE TABLE MASTER.REPORT_TIP_DATES
(
  ID           NUMBER,
  REP_KIND     VARCHAR2(30 BYTE),
  SORTBY       NUMBER(10),
  TIP_DATE     VARCHAR2(30 BYTE),
  DEF_TIP      NUMBER(1)                        DEFAULT 0,
  DEF_BEG_VAL  VARCHAR2(30 BYTE),
  DEF_END_VAL  VARCHAR2(30 BYTE),
  VIEW_TIME    NUMBER(1)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPORT_TIP_DATES IS 'Отчеты: Типы дат';

COMMENT ON COLUMN MASTER.REPORT_TIP_DATES.REP_KIND IS 'Вид отчета';

COMMENT ON COLUMN MASTER.REPORT_TIP_DATES.SORTBY IS 'Порядок';

COMMENT ON COLUMN MASTER.REPORT_TIP_DATES.TIP_DATE IS 'Наименование типа даты';

COMMENT ON COLUMN MASTER.REPORT_TIP_DATES.DEF_TIP IS 'Тип по умолчанию';

COMMENT ON COLUMN MASTER.REPORT_TIP_DATES.DEF_BEG_VAL IS 'Значение по умолчанию';

COMMENT ON COLUMN MASTER.REPORT_TIP_DATES.DEF_END_VAL IS 'Значение по умолчанию';



--
-- R3_AUART  (Table) 
--
CREATE TABLE MASTER.R3_AUART
(
  VBAK_AUART   VARCHAR2(10 BYTE)                NOT NULL,
  TVAKT_BEZEI  VARCHAR2(100 BYTE),
  NAZN_OTG_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_AUART.VBAK_AUART IS 'Вид разнарядки';

COMMENT ON COLUMN MASTER.R3_AUART.TVAKT_BEZEI IS 'Наименование';



--
-- R3_BILLS  (Table) 
--
CREATE TABLE MASTER.R3_BILLS
(
  VBELN            NUMBER(15)                   NOT NULL,
  NOM_R3           NUMBER(15),
  NOM_DOK          NUMBER(15),
  NOM_SF           NUMBER(15),
  DATE_VYP_SF      DATE,
  SUMMA_DOK        NUMBER(15,2)                 DEFAULT 0,
  SUMMA_PROD       NUMBER(15,2)                 DEFAULT 0,
  SUMMA_PROD_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUMMA_AKCIZ      NUMBER(15,2)                 DEFAULT 0,
  SUMMA_TARIF      NUMBER(15,2)                 DEFAULT 0,
  SUMMA_TARIF_NDS  NUMBER(15,2)                 DEFAULT 0,
  SUMMA_VOZN       NUMBER(15,2)                 DEFAULT 0,
  SUMMA_VOZN_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUMMA_STRAH      NUMBER(15,2)                 DEFAULT 0,
  VBAP_MATNR       VARCHAR2(10 BYTE),
  IS_AGENT         NUMBER(1),
  VES              NUMBER(15,6)                 DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_BILLS.VBELN IS 'Счет из R3';

COMMENT ON COLUMN MASTER.R3_BILLS.NOM_R3 IS 'N счета R3';

COMMENT ON COLUMN MASTER.R3_BILLS.NOM_DOK IS 'N счета НПО';

COMMENT ON COLUMN MASTER.R3_BILLS.NOM_SF IS 'N счета НПО';

COMMENT ON COLUMN MASTER.R3_BILLS.DATE_VYP_SF IS 'Дата счета';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_DOK IS 'Сумма счет-фактуры';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_PROD IS 'Сумма за продукт (вкл.НДС и акциз)';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_PROD_NDS IS 'НДС за продукт';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_TARIF IS 'Тариф (вкл.НДС)';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_TARIF_NDS IS 'НДС за тариф';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_VOZN IS 'Вознаграждение (вкл.НДС)';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_VOZN_NDS IS 'НДС за вознаграждение';

COMMENT ON COLUMN MASTER.R3_BILLS.SUMMA_STRAH IS 'Страховка';

COMMENT ON COLUMN MASTER.R3_BILLS.VBAP_MATNR IS 'Материал';

COMMENT ON COLUMN MASTER.R3_BILLS.VES IS 'Вес';



--
-- R3_BLOCKS  (Table) 
--
CREATE TABLE MASTER.R3_BLOCKS
(
  V_TJ30_TXT04  VARCHAR2(5 BYTE)                NOT NULL,
  NAME          VARCHAR2(100 BYTE),
  KERNEL_ID     NUMBER(18)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_BLOCKS.V_TJ30_TXT04 IS 'Признак блокировки';

COMMENT ON COLUMN MASTER.R3_BLOCKS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_BLOCKS.KERNEL_ID IS 'ID в KERNEL';



--
-- R3_CAT_CEN  (Table) 
--
CREATE TABLE MASTER.R3_CAT_CEN
(
  ID            NUMBER(10)                      NOT NULL,
  NUM_ISP       VARCHAR2(10 BYTE),
  CUSTOMERS_ID  VARCHAR2(10 BYTE),
  NAME          VARCHAR2(50 BYTE),
  CAT_CEN_ID    NUMBER(10),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.R3_CAT_CEN IS 'Напрвления использования из R3';

COMMENT ON COLUMN MASTER.R3_CAT_CEN.ID IS 'Направление использования из R3';

COMMENT ON COLUMN MASTER.R3_CAT_CEN.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_CAT_CEN.CAT_CEN_ID IS 'Категория цены';

COMMENT ON COLUMN MASTER.R3_CAT_CEN.IS_AUTO_LINK IS 'Признак автоматической связи';



--
-- R3_GD  (Table) 
--
CREATE TABLE MASTER.R3_GD
(
  BAHNR   VARCHAR2(3 BYTE)                      NOT NULL,
  STREKL  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_GD.BAHNR IS 'Железная дорога';

COMMENT ON COLUMN MASTER.R3_GD.STREKL IS 'Наименование';



--
-- R3_LPRIO  (Table) 
--
CREATE TABLE MASTER.R3_LPRIO
(
  VBAP_LPRIO  NUMBER(2)                         NOT NULL,
  BEZEI       VARCHAR2(100 BYTE),
  KERNEL_ID   NUMBER(18)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_LPRIO.VBAP_LPRIO IS 'Приоритет';

COMMENT ON COLUMN MASTER.R3_LPRIO.BEZEI IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_LPRIO.KERNEL_ID IS 'ID в KERNEL';



--
-- R3_MATERIALS_GRP  (Table) 
--
CREATE TABLE MASTER.R3_MATERIALS_GRP
(
  GROUP_S  VARCHAR2(2 BYTE)                     NOT NULL,
  ATWTB    VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_MATERIALS_GRP.GROUP_S IS 'Группа материалов';

COMMENT ON COLUMN MASTER.R3_MATERIALS_GRP.ATWTB IS 'Наименование';



--
-- R3_ROUTENODES  (Table) 
--
CREATE TABLE MASTER.R3_ROUTENODES
(
  KNOTE  VARCHAR2(10 BYTE)                      NOT NULL,
  BEZEI  VARCHAR2(100 BYTE),
  BAHNR  VARCHAR2(3 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_ROUTENODES.KNOTE IS 'Узел маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTENODES.BEZEI IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_ROUTENODES.BAHNR IS 'Железная дорога';



--
-- R3_ROUTES  (Table) 
--
CREATE TABLE MASTER.R3_ROUTES
(
  ROUTE        VARCHAR2(10 BYTE)                NOT NULL,
  KNANF        VARCHAR2(10 BYTE),
  KNEND        VARCHAR2(10 BYTE),
  BEZEI        VARCHAR2(100 BYTE),
  ZZZZ_STATUS  VARCHAR2(1 BYTE),
  ZZZZ_FILE    VARCHAR2(50 BYTE),
  ZZZZ_DATE    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_ROUTES.ROUTE IS 'Маршрут';

COMMENT ON COLUMN MASTER.R3_ROUTES.KNANF IS 'Узел маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTES.KNEND IS 'Узел маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTES.BEZEI IS 'Наименование маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTES.ZZZZ_STATUS IS 'Статус прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_ROUTES.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_ROUTES.ZZZZ_DATE IS 'Дата прокачки в KERNEL';



--
-- R3_TRATY  (Table) 
--
CREATE TABLE MASTER.R3_TRATY
(
  VBKD_TRATY    VARCHAR2(5 BYTE)                NOT NULL,
  NAME          VARCHAR2(100 BYTE),
  KERNEL_ID     NUMBER(18),
  FOX_ID        NUMBER(10),
  LOAD_TYPE_ID  NUMBER(10),
  LOAD_ABBR     VARCHAR2(3 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_TRATY.VBKD_TRATY IS 'Род вагона';

COMMENT ON COLUMN MASTER.R3_TRATY.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_TRATY.KERNEL_ID IS 'ID в KERNEL';

COMMENT ON COLUMN MASTER.R3_TRATY.FOX_ID IS 'ID в MASTER';



--
-- R3_VSART  (Table) 
--
CREATE TABLE MASTER.R3_VSART
(
  VBKD_VSART  VARCHAR2(3 BYTE)                  NOT NULL,
  NAME        VARCHAR2(100 BYTE),
  KERNEL_ID   NUMBER(18),
  LOAD_ABBR   VARCHAR2(3 BYTE),
  FOX_ID      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_VSART.VBKD_VSART IS 'Собственник вагона';

COMMENT ON COLUMN MASTER.R3_VSART.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_VSART.KERNEL_ID IS 'ID в KERNEL';



--
-- R3_VSBED  (Table) 
--
CREATE TABLE MASTER.R3_VSBED
(
  VBAK_VSBED  VARCHAR2(3 BYTE)                  NOT NULL,
  NAME        VARCHAR2(100 BYTE),
  KERNEL_ID   NUMBER(18),
  FOX_ID      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_VSBED.VBAK_VSBED IS 'Вид транспортировки';

COMMENT ON COLUMN MASTER.R3_VSBED.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_VSBED.KERNEL_ID IS 'ID в KERNEL';

COMMENT ON COLUMN MASTER.R3_VSBED.FOX_ID IS 'ID в MASTER';



--
-- R3_VSTEL  (Table) 
--
CREATE TABLE MASTER.R3_VSTEL
(
  VBAP_VSTEL  VARCHAR2(3 BYTE)                  NOT NULL,
  VTEXT       VARCHAR2(100 BYTE),
  KERNEL_ID   NUMBER(18),
  FOX_ID      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_VSTEL.VBAP_VSTEL IS 'ID пункта отгрузки';

COMMENT ON COLUMN MASTER.R3_VSTEL.VTEXT IS 'Наименование пункта отгрузки';

COMMENT ON COLUMN MASTER.R3_VSTEL.KERNEL_ID IS 'ID в KERNEL';

COMMENT ON COLUMN MASTER.R3_VSTEL.FOX_ID IS 'ID в MASTER';



--
-- R3_WERKS_LGORT  (Table) 
--
CREATE TABLE MASTER.R3_WERKS_LGORT
(
  VBAP_WERKS  VARCHAR2(3 BYTE)                  NOT NULL,
  LGORT       VARCHAR2(5 BYTE)                  NOT NULL,
  LGOBE       VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_WERKS_LGORT.VBAP_WERKS IS 'Завод';

COMMENT ON COLUMN MASTER.R3_WERKS_LGORT.LGORT IS 'Склад';

COMMENT ON COLUMN MASTER.R3_WERKS_LGORT.LGOBE IS 'Наименование';



--
-- SAIO_CHECK  (Table) 
--
CREATE TABLE MASTER.SAIO_CHECK
(
  OUTPUTFILE   VARCHAR2(10 BYTE)                NOT NULL,
  SELECTQUERY  VARCHAR2(914 BYTE),
  CREATEQUERY  VARCHAR2(100 BYTE),
  IS_ACTIVE    NUMBER(1)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- SF_DOVER  (Table) 
--
CREATE TABLE MASTER.SF_DOVER
(
  ID                  NUMBER,
  POST_COMPANY        VARCHAR2(100 BYTE),
  POST_DOLJ           VARCHAR2(100 BYTE),
  POST_FIO            VARCHAR2(100 BYTE),
  POST_DOVER          VARCHAR2(100 BYTE),
  POKUP_COMPANY       VARCHAR2(100 BYTE),
  POKUP_DOLJ          VARCHAR2(100 BYTE),
  POKUP_FIO           VARCHAR2(100 BYTE),
  POKUP_DOVER         VARCHAR2(100 BYTE),
  POST_DOLJ_SIGN      VARCHAR2(100 BYTE),
  POST_FIO_SIGN       VARCHAR2(100 BYTE),
  POKUP_DOLJ_SIGN     VARCHAR2(100 BYTE),
  POKUP_FIO_SIGN      VARCHAR2(100 BYTE),
  POKUP_COMPANY_SIGN  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- SF_NUMBERS  (Table) 
--
CREATE TABLE MASTER.SF_NUMBERS
(
  FROM_DATE  DATE,
  TO_DATE    DATE,
  START_NUM  NUMBER                             DEFAULT 0,
  CURR_NUM   NUMBER                             DEFAULT 0,
  RANGE      NUMBER                             DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- SF_SIGNS  (Table) 
--
CREATE TABLE MASTER.SF_SIGNS
(
  BOSS           VARCHAR2(50 BYTE),
  BLAVBUH        VARCHAR2(50 BYTE),
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  USER_NAME      VARCHAR2(30 BYTE),
  SF_DOVER_ID    NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.SF_SIGNS.TERMINAL_NAME IS 'Терминал';

COMMENT ON COLUMN MASTER.SF_SIGNS.USER_NAME IS 'Пользователь';



--
-- SOOB_EXP  (Table) 
--
CREATE TABLE MASTER.SOOB_EXP
(
  ID            NUMBER                          NOT NULL,
  REP_DATE      DATE,
  POS_ID        NUMBER,
  SORTBY        NUMBER,
  DOG_ID        NUMBER,
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  STAN_ID       NUMBER,
  EXPED_ID      NUMBER,
  LOAD_TYPE_ID  NUMBER,
  FACT_YEAR     NUMBER,
  PLAN_POST     NUMBER,
  PLAN_IZM      NUMBER,
  OBPR          NUMBER,
  PLAN_GD       NUMBER,
  NORMA_MON     NUMBER,
  FACT_MON      NUMBER,
  FACT_SUT      NUMBER,
  IS_BAD        NUMBER(1),
  PRICH         VARCHAR2(100 BYTE),
  ZAPR_MPS      VARCHAR2(250 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- STAN_ROLE  (Table) 
--
CREATE TABLE MASTER.STAN_ROLE
(
  STAN_KOD     NUMBER(6),
  KLS_ROLE_ID  NUMBER(2),
  STAN_ID      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- SVED_IN  (Table) 
--
CREATE TABLE MASTER.SVED_IN
(
  ID              VARCHAR2(9 BYTE)              NOT NULL,
  SVED_NUM        NUMBER(10),
  SVED_DATE       DATE,
  SVED_VES        NUMBER(15,7)                  DEFAULT 0,
  SVED_CNT        NUMBER(5)                     DEFAULT 0,
  GOTOV_TIME      DATE,
  BEG_NALIV_TIME  DATE,
  END_NALIV_TIME  DATE,
  DATE_OFORML     DATE,
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  MESTO_ID        NUMBER(10),
  VES_NETTO       NUMBER(15,7)                  DEFAULT 0,
  VES_KVIT        NUMBER(12,3)                  DEFAULT 0,
  PASP_NUM        VARCHAR2(15 BYTE),
  REZ_NUM         VARCHAR2(15 BYTE),
  PASP_DATE       DATE,
  PL              NUMBER(6,4),
  P_VOD           NUMBER(7,4),
  P_DIRT          NUMBER(7,4),
  MG_SOL          NUMBER(8,4),
  P_SOL           NUMBER(7,4),
  PL15            NUMBER(6,4),
  VES_NETTO_KVIT  NUMBER(16,7)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.SVED_IN IS 'Сведения по разгрузке/сливу';

COMMENT ON COLUMN MASTER.SVED_IN.SVED_NUM IS '№ сведения';

COMMENT ON COLUMN MASTER.SVED_IN.SVED_DATE IS 'Дата поступления под разгрузку';

COMMENT ON COLUMN MASTER.SVED_IN.SVED_VES IS 'Чистый вес (расчетный)';

COMMENT ON COLUMN MASTER.SVED_IN.SVED_CNT IS 'Кол-во';

COMMENT ON COLUMN MASTER.SVED_IN.GOTOV_TIME IS 'Дата/время готовности к разгрузке';

COMMENT ON COLUMN MASTER.SVED_IN.BEG_NALIV_TIME IS 'Начало разгрузки';

COMMENT ON COLUMN MASTER.SVED_IN.END_NALIV_TIME IS 'Окончание разгрузки';

COMMENT ON COLUMN MASTER.SVED_IN.DATE_OFORML IS 'Время оформления сведения о разгрузке';

COMMENT ON COLUMN MASTER.SVED_IN.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.SVED_IN.MESTO_ID IS 'Место слива';

COMMENT ON COLUMN MASTER.SVED_IN.VES_NETTO IS 'Вес нетто (расчетный)';

COMMENT ON COLUMN MASTER.SVED_IN.VES_KVIT IS 'Вес по накладным';

COMMENT ON COLUMN MASTER.SVED_IN.PASP_NUM IS '№ паспорта УНП';

COMMENT ON COLUMN MASTER.SVED_IN.REZ_NUM IS '№ резервуара УНП';

COMMENT ON COLUMN MASTER.SVED_IN.PASP_DATE IS 'Дата паспорта УНП';

COMMENT ON COLUMN MASTER.SVED_IN.PL IS 'Плотность из паспорта УНП';

COMMENT ON COLUMN MASTER.SVED_IN.P_VOD IS '% воды';

COMMENT ON COLUMN MASTER.SVED_IN.P_DIRT IS '% мех.примесей';

COMMENT ON COLUMN MASTER.SVED_IN.MG_SOL IS 'содержание солей мг/л';

COMMENT ON COLUMN MASTER.SVED_IN.P_SOL IS '% солей';

COMMENT ON COLUMN MASTER.SVED_IN.VES_NETTO_KVIT IS 'Плотность при 15''C';



--
-- TEMP_BILL_KVIT  (Table) 
--
CREATE TABLE MASTER.TEMP_BILL_KVIT
(
  KVIT_ID          NUMBER,
  NUM_KVIT         INTEGER,
  TERMINAL_NAME    VARCHAR2(30 BYTE),
  OSUSER_NAME      VARCHAR2(30 BYTE),
  NUM_CIST         VARCHAR2(10 BYTE),
  VES              NUMBER(10,3)                 DEFAULT 0,
  TARIF            NUMBER(12,2)                 DEFAULT 0,
  TARIF19          NUMBER(12,2)                 DEFAULT 0,
  SVED_NUM         NUMBER(6)                    DEFAULT 0,
  SUM_PROD         NUMBER(15,2)                 DEFAULT 0,
  SUM_AKCIZ        NUMBER(15,2)                 DEFAULT 0,
  SUM_PROD_NDS     NUMBER(15,2)                 DEFAULT 0,
  TARIF_NDS        NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN11       NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN11_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN12       NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN12_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUM_STRAH        NUMBER(15,2)                 DEFAULT 0,
  CENA             NUMBER(10,2),
  CENA_OTP         NUMBER(10,2),
  DATE_CENA        DATE,
  DATE_KVIT        DATE,
  PROTO_NUM        VARCHAR2(15 BYTE),
  PROTO_DATE       DATE,
  CENA_VOZN        NUMBER(10,2),
  TARIF_GUARD      NUMBER(12,2),
  TARIF_GUARD_NDS  NUMBER(12,2),
  NACENKA          NUMBER(10,2),
  NUM_AKT          NUMBER(10),
  BILL_POS_ID      NUMBER(10),
  NO_AKCIZ         NUMBER(1),
  NPR_PRICES_ID    NUMBER,
  CAT_CEN_ID       NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_BILL_KVIT_POSSIBLE  (Table) 
--
CREATE TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE
(
  KVIT_ID          NUMBER,
  NUM_KVIT         INTEGER,
  TERMINAL_NAME    VARCHAR2(30 BYTE),
  OSUSER_NAME      VARCHAR2(30 BYTE),
  NUM_CIST         VARCHAR2(10 BYTE),
  VES              NUMBER(10,3)                 DEFAULT 0,
  TARIF            NUMBER(12,2)                 DEFAULT 0,
  TARIF19          NUMBER(12,2)                 DEFAULT 0,
  SVED_NUM         NUMBER(6)                    DEFAULT 0,
  SUM_PROD         NUMBER(15,2)                 DEFAULT 0,
  SUM_AKCIZ        NUMBER(15,2)                 DEFAULT 0,
  SUM_PROD_NDS     NUMBER(15,2)                 DEFAULT 0,
  TARIF_NDS        NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN11       NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN11_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN12       NUMBER(15,2)                 DEFAULT 0,
  SUM_VOZN12_NDS   NUMBER(15,2)                 DEFAULT 0,
  SUM_STRAH        NUMBER(15,2)                 DEFAULT 0,
  CENA             NUMBER(10,2),
  CENA_OTP         NUMBER(10,2),
  DATE_CENA        DATE,
  DATE_KVIT        DATE,
  PROTO_NUM        VARCHAR2(15 BYTE),
  PROTO_DATE       DATE,
  CENA_VOZN        NUMBER(10,2),
  TARIF_GUARD      NUMBER(12,2),
  TARIF_GUARD_NDS  NUMBER(12,2),
  NACENKA          NUMBER(10,2),
  NUM_AKT          NUMBER(10),
  BILL_POS_ID      NUMBER(10),
  NO_AKCIZ         NUMBER(1),
  NPR_PRICES_ID    NUMBER,
  CAT_CEN_ID       NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_BILL_POS  (Table) 
--
CREATE TABLE MASTER.TEMP_BILL_POS
(
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  OSUSER_NAME    VARCHAR2(30 BYTE),
  NOM_DOK        NUMBER(7),
  BILL_POS_ID    NUMBER(7),
  VES            NUMBER(15,6)                   DEFAULT 0,
  CENA_BN        NUMBER(16,6)                   DEFAULT 0,
  CENA           NUMBER(16,6)                   DEFAULT 0,
  SUMMA_BN       NUMBER(20,6)                   DEFAULT 0,
  SUMMA_AKCIZ    NUMBER(20,6)                   DEFAULT 0,
  SUMMA_NDS20    NUMBER(20,6)                   DEFAULT 0,
  SUMMA          NUMBER(20,6)                   DEFAULT 0,
  PROD_ID_NPR    VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_NAKL  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.TEMP_NAKL
(
  NAKL_POS        NUMBER(10),
  REESTR_ID       NUMBER(10),
  NOM_ZD          VARCHAR2(12 BYTE),
  STAN_NAME       VARCHAR2(50 BYTE),
  POLUCH_NAME     VARCHAR2(30 BYTE),
  NUM_CIST        VARCHAR2(10 BYTE),
  VAGOWNER_NAME   VARCHAR2(50 BYTE),
  VES             NUMBER(14,3),
  DATE_OFORML     DATE,
  PROD_NAME       VARCHAR2(30 BYTE),
  SVED_NUM        NUMBER(10),
  POD_NUM         NUMBER(10),
  VETKA_OTP_NAME  VARCHAR2(30 BYTE),
  SVED_POS        NUMBER(10),
  PASP_NUM        VARCHAR2(20 BYTE),
  SVED_DATE       DATE,
  VAG_STATUS      VARCHAR2(30 BYTE),
  VES_ALL         NUMBER(14,3),
  VES_CIST        NUMBER(14,3),
  VES_UPAK        NUMBER(14,3)
)
ON COMMIT PRESERVE ROWS;

COMMENT ON TABLE MASTER.TEMP_NAKL IS 'Временная таблица для формирования накладной';



--
-- TEMP_NAME  (Table) 
--
CREATE TABLE MASTER.TEMP_NAME
(
  P1  VARCHAR2(255 BYTE),
  P2  VARCHAR2(255 BYTE),
  P3  VARCHAR2(255 BYTE),
  P4  VARCHAR2(255 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- TEMP_NAR_LINE  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.TEMP_NAR_LINE
(
  NOM_ZD        VARCHAR2(12 BYTE)               NOT NULL,
  KOL           NUMBER(5)                       DEFAULT 0,
  VES           NUMBER(14,3)                    DEFAULT 0,
  FACT_KOL      NUMBER(5)                       DEFAULT 0                     NOT NULL,
  FACT_VES      NUMBER(14,3)                    DEFAULT 0                     NOT NULL,
  MON_KOL       NUMBER(5)                       DEFAULT 0                     NOT NULL,
  MON_VES       NUMBER(14,3)                    DEFAULT 0                     NOT NULL,
  MON_FACT_KOL  NUMBER(5)                       DEFAULT 0                     NOT NULL,
  MON_FACT_VES  NUMBER(14,3)                    DEFAULT 0                     NOT NULL,
  STAN_NAME     VARCHAR2(50 BYTE),
  PROD_NAME     VARCHAR2(20 BYTE),
  POLUCH_NAME   VARCHAR2(30 BYTE),
  TONN_REE      NUMBER(14,3)                    DEFAULT 0                     NOT NULL,
  NORMOTGR      NUMBER(4,1)                     DEFAULT 0                     NOT NULL,
  LOAD_TYPE_ID  NUMBER(10)
)
ON COMMIT PRESERVE ROWS;

COMMENT ON TABLE MASTER.TEMP_NAR_LINE IS 'Временная таблица для заполнения разрешения на отгрузку';



--
-- TEMP_PAYMENTS_PROD  (Table) 
--
CREATE TABLE MASTER.TEMP_PAYMENTS_PROD
(
  OSUSER_NAME    VARCHAR2(50 BYTE),
  TERMINAL_NAME  VARCHAR2(50 BYTE),
  PAYMENTS_ID    NUMBER                         NOT NULL,
  PROD_ID_NPR    VARCHAR2(5 BYTE)               NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_PAYMENTS_TO_BILLS  (Table) 
--
CREATE TABLE MASTER.TEMP_PAYMENTS_TO_BILLS
(
  OSUSER_NAME    VARCHAR2(50 BYTE),
  TERMINAL_NAME  VARCHAR2(50 BYTE),
  PAYMENTS_ID    NUMBER,
  NOM_DOK        NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_PREDPR_REGION  (Table) 
--
CREATE TABLE MASTER.TEMP_PREDPR_REGION
(
  PREDPR_NAME  VARCHAR2(100 BYTE),
  REGION_NAME  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_REESTR_PARAMS  (Table) 
--
CREATE TABLE MASTER.TEMP_REESTR_PARAMS
(
  TERMINAL_NAME    VARCHAR2(30 BYTE)            NOT NULL,
  OSUSER_NAME      VARCHAR2(30 BYTE)            NOT NULL,
  DATE_PLAN        DATE,
  DATETIME_REPORT  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEMP_UVED  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.TEMP_UVED
(
  UVED_POS        NUMBER(10),
  REESTR_ID       NUMBER(10),
  NOM_ZD          VARCHAR2(12 BYTE),
  STAN_NAME       VARCHAR2(50 BYTE),
  POLUCH_NAME     VARCHAR2(30 BYTE),
  NUM_CIST        VARCHAR2(10 BYTE),
  VAGOWNER_NAME   VARCHAR2(50 BYTE),
  VES             NUMBER(14,3),
  DATE_OFORML     DATE,
  PROD_NAME       VARCHAR2(30 BYTE),
  SVED_NUM        NUMBER(10),
  POD_NUM         NUMBER(10),
  VETKA_OTP_NAME  VARCHAR2(30 BYTE),
  SVED_POS        NUMBER(10),
  SVED_DATE       DATE,
  PASP_NUM        VARCHAR2(20 BYTE),
  VAG_STATUS      VARCHAR2(30 BYTE),
  NAKL_NUM        NUMBER(10),
  VES_ALL         NUMBER(14,3),
  VES_CIST        NUMBER(14,3),
  VES_UPAK        NUMBER(14,3)
)
ON COMMIT PRESERVE ROWS;

COMMENT ON TABLE MASTER.TEMP_UVED IS 'Временная таблица для формирования уведомления об уборке';



--
-- TEMP_VALSVED  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.TEMP_VALSVED
(
  KODIF_ID    NUMBER(10),
  TAG         VARCHAR2(10 BYTE),
  NAME        VARCHAR2(50 BYTE),
  VALUE       VARCHAR2(12 BYTE),
  NORMA       VARCHAR2(20 BYTE),
  FIELD_TYPE  VARCHAR2(1 BYTE),
  FIELD_LEN   NUMBER(3),
  FIELD_DEC   NUMBER(3),
  F_DEL       NUMBER(1),
  SORTBY      NUMBER(10)
)
ON COMMIT PRESERVE ROWS;

COMMENT ON TABLE MASTER.TEMP_VALSVED IS 'Временная таблица для ввода реквизитов паспорта в сведении';

COMMENT ON COLUMN MASTER.TEMP_VALSVED.SORTBY IS '№ п/п';



--
-- TEMPVARI  (Table) 
--
CREATE TABLE MASTER.TEMPVARI
(
  ID             NUMBER                         NOT NULL,
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  OSUSER_NAME    VARCHAR2(30 BYTE),
  APP_NAME       VARCHAR2(30 BYTE),
  UNIT_NAME      VARCHAR2(30 BYTE),
  BEGIN_DATE     DATE,
  END_DATE       DATE,
  VARI_TYPE      VARCHAR2(10 BYTE),
  VARI_NAME      VARCHAR2(50 BYTE),
  NUM1           NUMBER,
  CHAR1          VARCHAR2(250 BYTE),
  DATE1          DATE,
  NUM2           NUMBER,
  CHAR2          VARCHAR2(250 BYTE),
  DATE2          DATE,
  NUM3           NUMBER,
  CHAR3          VARCHAR2(250 BYTE),
  DATE3          DATE,
  NUM4           NUMBER,
  CHAR4          VARCHAR2(250 BYTE),
  DATE4          DATE,
  NUM5           NUMBER,
  CHAR5          VARCHAR2(250 BYTE),
  DATE5          DATE,
  NUM6           NUMBER,
  CHAR6          VARCHAR2(250 BYTE),
  DATE6          DATE,
  NUM7           NUMBER,
  CHAR7          VARCHAR2(250 BYTE),
  DATE7          DATE,
  NUM8           NUMBER,
  CHAR8          VARCHAR2(250 BYTE),
  DATE8          DATE,
  NUM9           NUMBER,
  CHAR9          VARCHAR2(250 BYTE),
  DATE9          DATE,
  NUM10          NUMBER,
  CHAR10         VARCHAR2(250 BYTE),
  DATE10         DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.TEMPVARI.TERMINAL_NAME IS 'Компьютер - заполняется автоматически';

COMMENT ON COLUMN MASTER.TEMPVARI.OSUSER_NAME IS 'Пользователь (Login) - заполняется автоматически';

COMMENT ON COLUMN MASTER.TEMPVARI.APP_NAME IS 'Приложение - заполняется по желанию';

COMMENT ON COLUMN MASTER.TEMPVARI.UNIT_NAME IS 'Модуль - заполняется по желанию';

COMMENT ON COLUMN MASTER.TEMPVARI.BEGIN_DATE IS 'Начало периода действия';

COMMENT ON COLUMN MASTER.TEMPVARI.END_DATE IS 'Окончание периода действия';

COMMENT ON COLUMN MASTER.TEMPVARI.VARI_TYPE IS 'Тип переменной (TABLE - таблица, NUM - число, CHAR - строка, DATE - дата/время)';

COMMENT ON COLUMN MASTER.TEMPVARI.VARI_NAME IS 'Имя переменной';

COMMENT ON COLUMN MASTER.TEMPVARI.NUM1 IS 'Числовое значение переменной';

COMMENT ON COLUMN MASTER.TEMPVARI.CHAR1 IS 'Строковое значение переменной';

COMMENT ON COLUMN MASTER.TEMPVARI.DATE1 IS 'Значение переменной типа Дата';



--
-- TEMP_VES  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER.TEMP_VES
(
  TAG    VARCHAR2(20 BYTE),
  VALUE  VARCHAR2(20 BYTE),
  NORMA  VARCHAR2(20 BYTE)
)
ON COMMIT PRESERVE ROWS;

COMMENT ON TABLE MASTER.TEMP_VES IS 'Стек передачи параметров для процедуры расчета веса';



--
-- TEMP_VES_OLD  (Table) 
--
CREATE TABLE MASTER.TEMP_VES_OLD
(
  TAG    VARCHAR2(20 BYTE),
  VALUE  VARCHAR2(20 BYTE),
  NORMA  VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TEST  (Table) 
--
CREATE TABLE MASTER.TEST
(
  ID    NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.TEST.ID IS 'ID';

COMMENT ON COLUMN MASTER.TEST.NAME IS 'Наименование';



--
-- TOAD_PLAN_SQL  (Table) 
--
CREATE TABLE MASTER.TOAD_PLAN_SQL
(
  USERNAME      VARCHAR2(30 BYTE),
  STATEMENT_ID  VARCHAR2(32 BYTE),
  TIMESTAMP     DATE,
  STATEMENT     VARCHAR2(2000 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- TO_SS  (Table) 
--
CREATE TABLE MASTER.TO_SS
(
  NOM_SF      FLOAT(126),
  NOM_DOK     FLOAT(126)                        NOT NULL,
  DATA_DOK    DATE,
  DATA_KVIT   DATE,
  SUMMA_DOK   FLOAT(126),
  NOM_DOG     VARCHAR2(10 BYTE),
  DATA_DOG    DATE,
  K_USL       FLOAT(126),
  KOD_PLAT    FLOAT(126),
  PRIM        VARCHAR2(63 BYTE),
  PRIZN_CEN   FLOAT(126),
  KATEG_PR    FLOAT(126),
  KOD_NFP     VARCHAR2(5 BYTE),
  CENA_NFP    FLOAT(126),
  DATE_CEN    DATE,
  VES         FLOAT(126),
  KOD_ZATAR   VARCHAR2(5 BYTE),
  CEN_ZATAR   FLOAT(126),
  SUM_ZATAR   FLOAT(126),
  NACENKA     FLOAT(126),
  SUM_NACEN   FLOAT(126),
  D_41        FLOAT(126),
  SUM_AKCIZ   FLOAT(126),
  D_191       FLOAT(126),
  D_67        FLOAT(126),
  D_441       FLOAT(126),
  D_442       FLOAT(126),
  D_443       FLOAT(126),
  D_194       FLOAT(126),
  CPEC_PROD   FLOAT(126),
  CPEC_TARIF  FLOAT(126),
  SUMMA_POR   FLOAT(126),
  TIP_OTGR    FLOAT(126),
  KOD_GROTP   FLOAT(126),
  KOD_POTR    FLOAT(126),
  KOD_STAN    FLOAT(126),
  KOD_GD      FLOAT(126),
  FIO_ISPOL   VARCHAR2(16 BYTE),
  M_VS        FLOAT(126),
  OLD_SF      FLOAT(126),
  OLD_NOM     FLOAT(126),
  OLD_DATA    DATE,
  DATA_BUXG   DATE,
  WRITE       FLOAT(126),
  GR_DVZ      FLOAT(126),
  OGR_TAR     FLOAT(126),
  KOD_USL     FLOAT(126),
  KSOB_USL    FLOAT(126),
  SUM_NALIV   FLOAT(126),
  NDC_NAL20   FLOAT(126),
  NDC_NAL03   FLOAT(126),
  NDC_VN20    FLOAT(126),
  NDC_VN03    FLOAT(126),
  NDC_TR20    FLOAT(126),
  NDC_TR03    FLOAT(126),
  VID_OPL     FLOAT(126),
  KOL_DN      FLOAT(126),
  USL_PPZT    FLOAT(126),
  NDC_PPZT    FLOAT(126),
  CN_PPZT     FLOAT(126),
  KOD_OTGR    FLOAT(126),
  VES_KOM     FLOAT(126),
  KOM_V       FLOAT(126),
  NDS_KOM     FLOAT(126),
  NDF_KOM     FLOAT(126),
  CN_KOM      FLOAT(126),
  PATH        VARCHAR2(18 BYTE),
  T_DATE      DATE,
  T_TIME      VARCHAR2(8 BYTE),
  VES_NAL     FLOAT(126),
  MESTO       FLOAT(126),
  M_KORR      FLOAT(126),
  G_KORR      FLOAT(126),
  G_KORR4     FLOAT(126),
  K_VARPOST   FLOAT(126),
  VIDOG       FLOAT(126),
  DEN_SOD     FLOAT(126),
  NOM_ZD      VARCHAR2(12 BYTE),
  NOM_ZV      VARCHAR2(12 BYTE),
  UN_CODE     VARCHAR2(15 BYTE),
  MOSC_OUT    VARCHAR2(7 BYTE),
  KOD_POST    FLOAT(126),
  KOD_SOB     FLOAT(126),
  SOB_GD      FLOAT(126),
  TAX_SALE    FLOAT(126),
  PRICE_GET   FLOAT(126),
  SUM_PGET    FLOAT(126),
  NDS_PGET    FLOAT(126),
  GSM_PGET    FLOAT(126),
  M_SS        FLOAT(126),
  Y_SS        FLOAT(126),
  PR_DIVIDE   FLOAT(126),
  NUM_SS      FLOAT(126),
  BILL_POS    NUMBER(1),
  DOG_ID      NUMBER(10),
  DOP_TARIF   NUMBER(12,2),
  NDC_DOPTAR  NUMBER(12,2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- TOW_PUT_KONS  (Table) 
--
CREATE TABLE MASTER.TOW_PUT_KONS
(
  ID_OPER            NUMBER(18)                 NOT NULL,
  DATE_OPER          DATE,
  KOL_1              NUMBER(15,3)               DEFAULT 0,
  KG_1               NUMBER(15,3)               DEFAULT 0,
  CENA_POK_BN_1      NUMBER(15,2)               DEFAULT 0,
  CENA_POK_1         NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_BN_1     NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_NDS_1    NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_AKCIZ_1  NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_1        NUMBER(15,2)               DEFAULT 0,
  KOL_2              NUMBER(15,3)               DEFAULT 0,
  KG_2               NUMBER(15,3)               DEFAULT 0,
  CENA_POK_BN_2      NUMBER(15,2)               DEFAULT 0,
  CENA_POK_2         NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_BN_2     NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_NDS_2    NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_AKCIZ_2  NUMBER(15,2)               DEFAULT 0,
  SUMMA_POK_2        NUMBER(15,2)               DEFAULT 0,
  ORG_STRU_ID        NUMBER(10),
  PREDPR_KONS_ID     NUMBER(20),
  PROD_KONS_ID       VARCHAR2(21 BYTE),
  LOAD_TYPE_ID       NUMBER(2),
  ORG_POLUCH_ID      NUMBER(10),
  FILIAL_ID          NUMBER(10)                 NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.TOW_PUT_KONS IS 'Конс.отчетность: Товары в пути';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.ID_OPER IS 'Товар в пути';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.DATE_OPER IS 'Дата';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.KOL_1 IS 'Кол-во';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.KG_1 IS 'Вес';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.CENA_POK_BN_1 IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.CENA_POK_1 IS 'Цена';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_BN_1 IS 'Сумма без налогов';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_NDS_1 IS 'НДС';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_AKCIZ_1 IS 'Акциз';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_1 IS 'Сумма';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.KOL_2 IS 'Кол-во';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.KG_2 IS 'Вес';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.CENA_POK_BN_2 IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.CENA_POK_2 IS 'Цена';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_BN_2 IS 'Сумма без налогов';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_NDS_2 IS 'НДС';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_AKCIZ_2 IS 'Акциз';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.SUMMA_POK_2 IS 'Сумма';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.ORG_STRU_ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.PREDPR_KONS_ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.PROD_KONS_ID IS 'Продукт (конс.отчетность)';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.ORG_POLUCH_ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.TOW_PUT_KONS.FILIAL_ID IS 'ID ОСЕ';



--
-- T_SNPORDEXP_UPLOAD_KSE  (Table) 
--
CREATE TABLE MASTER.T_SNPORDEXP_UPLOAD_KSE
(
  UPLOADID  NUMBER(17)                          NOT NULL,
  DATETIME  DATE                                DEFAULT SYSDATE,
  USERNAME  VARCHAR2(30 BYTE),
  RESULT    VARCHAR2(30 CHAR)
)
TABLESPACE USERS
NOCOMPRESS ;

COMMENT ON TABLE MASTER.T_SNPORDEXP_UPLOAD_KSE IS 'Журнал выгрузок заявок из Мастера в Р3.';

COMMENT ON COLUMN MASTER.T_SNPORDEXP_UPLOAD_KSE.UPLOADID IS 'Идентификатор выгрузки';

COMMENT ON COLUMN MASTER.T_SNPORDEXP_UPLOAD_KSE.DATETIME IS 'Дата и время выгрузки';

COMMENT ON COLUMN MASTER.T_SNPORDEXP_UPLOAD_KSE.USERNAME IS 'Пользователь, запустивший выгрузку';

COMMENT ON COLUMN MASTER.T_SNPORDEXP_UPLOAD_KSE.RESULT IS 'Результат выгрузки';



--
-- UF_RELTOPHD_OTGR  (Table) 
--
CREATE TABLE MASTER.UF_RELTOPHD_OTGR
(
  BEDAT            DATE                         NOT NULL,
  MFRPN            VARCHAR2(10 BYTE),
  ZZNETTO          FLOAT(3),
  ZZKOL            INTEGER,
  ZZWEU            VARCHAR2(30 BYTE),
  ZEVD101          DATE,
  ZEVT101          VARCHAR2(10 BYTE),
  ZEVD102          DATE,
  ZEVT102          VARCHAR2(10 BYTE),
  ZEVD103          DATE,
  ZEVT103          VARCHAR2(10 BYTE),
  ZEVD104          DATE,
  ZEVT104          VARCHAR2(10 BYTE),
  ZEVD113          DATE,
  ZEVT113          VARCHAR2(10 BYTE),
  ZEVD117          DATE,
  ZEVT117          VARCHAR2(10 BYTE),
  ZNAME            VARCHAR2(60 BYTE),
  ZZPROD           VARCHAR2(10 BYTE),
  FILENAME         VARCHAR2(20 BYTE),
  PARSEDATETIME    DATE,
  PROPAGATESTATUS  NUMBER
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- USER_RIGHTS  (Table) 
--
CREATE TABLE MASTER.USER_RIGHTS
(
  GIVENRIGHT  VARCHAR2(30 BYTE),
  USERNAME    VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- UVED  (Table) 
--
CREATE TABLE MASTER.UVED
(
  ID            NUMBER(10)                      NOT NULL,
  UVED_NUM      NUMBER(10),
  UVED_DATE     DATE,
  LOAD_TYPE_ID  NUMBER(10),
  MESTO_ID      NUMBER(10),
  LUKOMA_NUM    NUMBER(10),
  MPS_NUM       NUMBER(10),
  CHER_NUM      NUMBER(10),
  VETL_NUM      NUMBER(10),
  OPERSGS_ID    NUMBER(10),
  PROD_ID_NPR   VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.UVED IS 'Уведомление об уборке';

COMMENT ON COLUMN MASTER.UVED.UVED_NUM IS '№ уведобления об уборке';

COMMENT ON COLUMN MASTER.UVED.UVED_DATE IS 'Дата уведомления';

COMMENT ON COLUMN MASTER.UVED.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.UVED.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.UVED.LUKOMA_NUM IS '№ списка для охраны УНП';

COMMENT ON COLUMN MASTER.UVED.MPS_NUM IS '№ акта для охраны РЖД';

COMMENT ON COLUMN MASTER.UVED.CHER_NUM IS '№ реестра для ЛУКОЙЛ-Черноморье';

COMMENT ON COLUMN MASTER.UVED.VETL_NUM IS '№ уведомления для приемосдатчиков Ветласян';

COMMENT ON COLUMN MASTER.UVED.OPERSGS_ID IS 'Представитель СГС';

COMMENT ON COLUMN MASTER.UVED.PROD_ID_NPR IS 'Марка продукта';



--
-- VAL_INT  (Table) 
--
CREATE TABLE MASTER.VAL_INT
(
  DD_MM_YYYY   DATE,
  INTERV       NUMBER(3),
  N_INTER      NUMBER(4),
  SYB_RNK      NUMBER(5),
  N_OB         NUMBER(8),
  N_GR_INTEGR  NUMBER(4),
  VAR_VR_ZON   NUMBER(4),
  VR_ZON       NUMBER(4),
  KOL_DB       NUMBER(7),
  KOL          NUMBER(7),
  STAT         VARCHAR2(1 BYTE),
  VAL          NUMBER,
  MIN_0        NUMBER(4),
  MIN_1        NUMBER(4),
  SK           VARCHAR2(1 BYTE),
  RASH_POLN    NUMBER,
  IS_COPYED    NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- VAL_INT_D  (Table) 
--
CREATE TABLE MASTER.VAL_INT_D
(
  DD_MM_YYYY   DATE,
  SYB_RNK      NUMBER(5),
  N_OB         NUMBER(8),
  N_GR_INTEGR  NUMBER(4),
  KOL_DB       NUMBER(7),
  KOL          NUMBER(7),
  NET_INT      NUMBER(4),
  VAL          NUMBER,
  STAT         VARCHAR2(1 BYTE),
  KOL_DB_BP    NUMBER(7),
  KOL_BP       NUMBER(7),
  VAL_BP       NUMBER,
  RS           VARCHAR2(1 BYTE),
  VAL_PR       NUMBER,
  R            NUMBER,
  IS_COPYED    INTEGER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- VED_OSMOTR_PODPIS  (Table) 
--
CREATE TABLE MASTER.VED_OSMOTR_PODPIS
(
  NAME  VARCHAR2(50 BYTE),
  ID    NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.VED_OSMOTR_PODPIS IS 'Справочник подписей';



--
-- VED_OSMOTR_SMENA  (Table) 
--
CREATE TABLE MASTER.VED_OSMOTR_SMENA
(
  NAME  VARCHAR2(50 BYTE),
  ID    NUMBER(10)                              NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.VED_OSMOTR_SMENA IS 'Справочник операторов';



--
-- VOZVRAT  (Table) 
--
CREATE TABLE MASTER.VOZVRAT
(
  ID          NUMBER(10)                        NOT NULL,
  NUM_CIST    VARCHAR2(10 BYTE),
  NUM_KVIT    NUMBER(12),
  NUM_NAKL    VARCHAR2(12 BYTE),
  DATE_NAKL   DATE,
  DATE_VOZ    DATE,
  TIME_VOZ    VARCHAR2(6 BYTE),
  DATE_RASK   DATE,
  TARIF       NUMBER(14,3),
  SUMMA       NUMBER(14,2),
  NUM_AKT     VARCHAR2(10 BYTE),
  NUM_PERECH  VARCHAR2(10 BYTE),
  DAT_PERECH  DATE,
  VOZVRAT     NUMBER(1),
  FLG_KVIT    NUMBER(1),
  OLD_KVIT    NUMBER(12),
  SF_POROJN   VARCHAR2(10 BYTE),
  DAT_POROJN  DATE,
  SOBST       NUMBER(1),
  PRSTBETW1   DATE,
  PRSTBETT1   VARCHAR2(5 BYTE),
  PRSTBETW2   DATE,
  PRSTBETT2   VARCHAR2(5 BYTE),
  PRSTBETSF   VARCHAR2(10 BYTE),
  STAN_ID     NUMBER(10),
  PRST_N_AKT  VARCHAR2(15 BYTE),
  PRST_S_AKT  NUMBER(12,2),
  PRIM        VARCHAR2(50 BYTE),
  DATE_OTP    DATE,
  TIME_OTP    VARCHAR2(6 BYTE),
  OTSTOI      NUMBER(2),
  DATE_REP    DATE,
  DATE_EDIT   DATE,
  DATE_KVIT   DATE,
  KVIT_ID     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- VOZVRAT_TEMP  (Table) 
--
CREATE TABLE MASTER.VOZVRAT_TEMP
(
  NUM_AKT    VARCHAR2(10 BYTE),
  USER_NAME  VARCHAR2(30 BYTE),
  NUM_KVIT   VARCHAR2(10 BYTE),
  NUM_CIST   NUMBER,
  DATE_KVIT  DATE,
  PRIZNAK    NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.VOZVRAT_TEMP.PRIZNAK IS '1 - для отчета, 2 - для новых или редактирования';



--
-- VOZVRAT_TEST  (Table) 
--
CREATE TABLE MASTER.VOZVRAT_TEST
(
  ID          NUMBER(10),
  NUM_CIST    VARCHAR2(10 BYTE),
  NUM_KVIT    NUMBER(12),
  NUM_NAKL    VARCHAR2(12 BYTE),
  DATE_NAKL   DATE,
  DATE_VOZ    DATE,
  TIME_VOZ    VARCHAR2(6 BYTE),
  DATE_RASK   DATE,
  TARIF       NUMBER(14,3),
  SUMMA       NUMBER(14,2),
  NUM_AKT     VARCHAR2(10 BYTE),
  NUM_PERECH  VARCHAR2(10 BYTE),
  DAT_PERECH  DATE,
  VOZVRAT     NUMBER(1),
  FLG_KVIT    NUMBER(1),
  OLD_KVIT    NUMBER(12),
  SF_POROJN   VARCHAR2(10 BYTE),
  DAT_POROJN  DATE,
  SOBST       NUMBER(1),
  PRSTBETW1   DATE,
  PRSTBETT1   VARCHAR2(5 BYTE),
  PRSTBETW2   DATE,
  PRSTBETT2   VARCHAR2(5 BYTE),
  PRSTBETSF   VARCHAR2(10 BYTE),
  STAN_ID     NUMBER(10),
  PRST_N_AKT  VARCHAR2(15 BYTE),
  PRST_S_AKT  NUMBER(12,2),
  PRIM        VARCHAR2(50 BYTE),
  DATE_OTP    DATE,
  TIME_OTP    VARCHAR2(6 BYTE),
  OTSTOI      NUMBER(2),
  DATE_REP    DATE,
  DATE_EDIT   DATE,
  DATE_KVIT   DATE,
  KVIT_ID     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- XX100A  (Table) 
--
CREATE TABLE MASTER.XX100A
(
  ANAME  VARCHAR2(20 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_KVIT  (Table) 
--
CREATE TABLE MASTER.XX101_KVIT
(
  ID                 NUMBER(7),
  FLG_OPERDATA       NUMBER(1),
  MESTO_ID           NUMBER(2),
  NOM_ZD             VARCHAR2(12 BYTE),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  TEX_PD_ID          NUMBER(7),
  NUM_CIST           VARCHAR2(10 BYTE),
  DATE_OTGR          DATE,
  VES                NUMBER(10,3),
  VES_BRUTTO         NUMBER(10,3),
  VES_ED             NUMBER(10,3),
  KOL_ED             NUMBER(6),
  TARIF              NUMBER(12,2),
  TARIF19            NUMBER(12,2),
  TARIF_ORIG         NUMBER(12,2),
  NUM_KVIT           NUMBER(10),
  DATE_KVIT          DATE,
  NUM_MILITARY       VARCHAR2(20 BYTE),
  FLG_DOP_CIST       NUMBER(1),
  FLG_VAG_KLIENT     NUMBER(1),
  VAGOWNER_ID        NUMBER(3),
  VAGONTYPE_ID       NUMBER(2),
  KALIBR_ID          VARCHAR2(5 BYTE),
  VES_CIST           NUMBER(10,3),
  DATE_VOZ           DATE,
  KVIT_VOZ           VARCHAR2(12 BYTE),
  SUM_VOZ            NUMBER(12,2),
  DATE_OTV           DATE,
  PLOMBA1            VARCHAR2(15 BYTE),
  PLOMBA2            VARCHAR2(15 BYTE),
  ROSINSPL1          VARCHAR2(6 BYTE),
  ROSINSPL2          VARCHAR2(6 BYTE),
  VZLIV              NUMBER(6),
  TEMPER             NUMBER(10,1),
  FAKT_PL            NUMBER(10,4),
  FORMNAKL_ID        NUMBER(2),
  SHABEXP_ID         NUMBER(10),
  GTD                VARCHAR2(23 BYTE),
  EXPED_ID           NUMBER(6),
  VETKA_OTP_ID       NUMBER(10),
  NUM_EXP_MAR        VARCHAR2(10 BYTE),
  BILL_ID            NUMBER(10)                 DEFAULT 0,
  SVED_ID            VARCHAR2(9 BYTE),
  DATE_OFORML        DATE,
  SVED_NUM           NUMBER(6)                  DEFAULT 0,
  PASP_ID            VARCHAR2(10 BYTE),
  NUM_NAR            VARCHAR2(15 BYTE),
  NUM_DOVER          VARCHAR2(15 BYTE),
  PERER_ID           NUMBER(6),
  DATE_EDIT          DATE,
  JKCOMMIT           NUMBER(1),
  GROTP_ID           NUMBER(6)                  DEFAULT 0,
  PERECH_TEXPD_DATE  DATE,
  PERECH_TEXPD_NUM   VARCHAR2(10 BYTE),
  SUM_PROD           NUMBER(15,2)               DEFAULT 0,
  SUM_AKCIZ          NUMBER(15,2)               DEFAULT 0,
  SUM_PROD_NDS       NUMBER(15,2)               DEFAULT 0,
  TARIF_NDS          NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_STRAH          NUMBER(15,2)               DEFAULT 0,
  CENA               NUMBER(10,2),
  CENA_OTP           NUMBER(10,2),
  DATE_CENA          DATE,
  CENA_VOZN          NUMBER(10,2)               DEFAULT 0,
  CAPACITY           VARCHAR2(10 BYTE),
  TARIF_GUARD        NUMBER(12,2)               DEFAULT 0,
  TARIF_GUARD_NDS    NUMBER(12,2)               DEFAULT 0,
  TARIF_ALT          NUMBER(12,2),
  NACENKA            NUMBER(10,2)               DEFAULT 0,
  PODDONS            NUMBER(5),
  SHIELDS            NUMBER(5),
  UPAK_ID            NUMBER(10),
  UPAK_VES           NUMBER(15,6),
  KOL_NET            NUMBER(19,5),
  UPAK_VES_ED        NUMBER(7,2),
  SHIELD_VES         NUMBER(7,2),
  PODDON_VES         NUMBER(7,2),
  PL                 NUMBER(10,4),
  NUM_AKT            NUMBER(10),
  BILL_POS_ID        NUMBER(10),
  PROTO_NUM          VARCHAR2(15 BYTE),
  PROTO_DATE         DATE,
  NO_AKCIZ           NUMBER(1),
  PERECH_GUARD_DATE  DATE,
  PERECH_GUARD_NUM   VARCHAR2(10 BYTE),
  TTN_ID             NUMBER(15),
  DATE_DOVER         DATE,
  FIO_DRIVER         VARCHAR2(30 BYTE),
  IS_LOADED          NUMBER(1)                  DEFAULT 0,
  AXES               NUMBER(3),
  CTLV               NUMBER(6,4),
  DEFI_MASS_ID       NUMBER(2),
  VOLUME             NUMBER(10),
  VOLUME15           NUMBER(10),
  ZPU_TYPE1          NUMBER(5),
  ZPU_TYPE2          NUMBER(5),
  PL15               NUMBER(6,4),
  DATE_IN            DATE,
  WAYBILLROWID       VARCHAR2(6 BYTE),
  WAYBILLID          VARCHAR2(10 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_MONTH  (Table) 
--
CREATE TABLE MASTER.XX101_MONTH
(
  NOM_ZD            VARCHAR2(12 BYTE),
  STANOTP_ID        NUMBER(10),
  NPR_SOBSTV_ID     NUMBER(6),
  STAN_ID           NUMBER(10),
  VETKA_ID          NUMBER(4),
  POLUCH_ID         NUMBER(6),
  TEX_PD_ID         NUMBER(7),
  NAZN_OTG_ID       NUMBER(2),
  LOAD_ABBR         VARCHAR2(3 BYTE),
  DOG_ID            NUMBER(5),
  USL_NUMBER        NUMBER(3),
  GOSPROG_ID        NUMBER(2),
  PROD_ID_NPR       VARCHAR2(5 BYTE),
  TONN_DECLARED     NUMBER(10,3),
  TONN_LOADED       NUMBER(10,3),
  CIST_DECLARED     NUMBER(4),
  CIST_LOADED       NUMBER(4),
  FLG_ALLOW_8_AXES  NUMBER(1),
  FLG_UPPER_SLIV    NUMBER(1),
  FLG_DOP_CIST      NUMBER(1),
  FLG_FORMA_2       NUMBER(10),
  FLG_OBOGR         NUMBER(1),
  DATE_PLAN         DATE,
  PRIM              VARCHAR2(100 BYTE),
  CENA              NUMBER(15,6),
  CENA_OTP          NUMBER(15,6),
  SUM_ZD            NUMBER(12,2),
  GR4               VARCHAR2(100 BYTE),
  K_TAR             VARCHAR2(10 BYTE),
  INPUT_DATE        DATE,
  UPDATE_DATE       DATE,
  TARIF1TONN        NUMBER(10,2)                DEFAULT 0,
  POTREB_ID         NUMBER(6),
  PLANSTRU_ID       NUMBER(20),
  NPODOG_ID         NUMBER(5),
  GROTP_ID          NUMBER(6)                   DEFAULT 0,
  DATE_CEN          DATE,
  GP_NAPR_ID        NUMBER(10),
  TONN_R            NUMBER(15,6)                DEFAULT 0,
  CIST_R            NUMBER(4)                   DEFAULT 0,
  TRANSPORT         VARCHAR2(20 BYTE),
  IS_EXP            NUMBER(1)                   DEFAULT 0,
  SUPPLIER_ID       NUMBER(6),
  APPL_TAG          VARCHAR2(6 BYTE),
  CENA_NPO          NUMBER(15,6)                DEFAULT 0,
  CENA_OTP_NPO      NUMBER(15,6)                DEFAULT 0,
  KOL_DN_NPO        NUMBER(3),
  TONN_RAZNAR       NUMBER(10,3),
  CIST_RAZNAR       NUMBER(10,3),
  ZAKAZ_ID          NUMBER(10),
  EXPED_ID          NUMBER(6),
  GU12_A_ID         NUMBER(10),
  ZAKAZ_HIST_ID     NUMBER(10),
  POKUP_DOG_ID      NUMBER(10),
  POKUP_USL_NUMBER  NUMBER(3),
  NAPR_POST_ID      NUMBER(10),
  CIST_FACT         NUMBER(5)                   DEFAULT 0,
  TONN_FACT         NUMBER(10,3)                DEFAULT 0,
  STAN_PER_ID       NUMBER(10),
  INCOTERM_ID       NUMBER(10),
  VZISK_ID          NUMBER(10)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_STATISTICS  (Table) 
--
CREATE TABLE MASTER.XX101_STATISTICS
(
  ID          NUMBER(10),
  ACTIONTYPE  NUMBER(1)                         NOT NULL,
  INFO        VARCHAR2(50 BYTE),
  DATETIME    DATE                              NOT NULL
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_ZKERP_DATA  (Table) 
--
CREATE TABLE MASTER.XX101_ZKERP_DATA
(
  FILENAME               VARCHAR2(20 BYTE),
  PARSEDATETIME          DATE,
  PROPAGATESTATUS        NUMBER(1),
  FILEROWNUM             VARCHAR2(7 BYTE),
  WAYBILLID              VARCHAR2(10 BYTE),
  WAYBILLROWID           VARCHAR2(6 BYTE),
  TRANSPORTKIND          VARCHAR2(2 BYTE),
  SHIPMENTDATE           DATE,
  SHIPMENTTIME           VARCHAR2(8 BYTE),
  TRANSPORTNUM           VARCHAR2(128 BYTE),
  OWNERSHIPTYPE          NUMBER(4),
  OWNER                  VARCHAR2(35 BYTE),
  AXESCOUNT              NUMBER(1),
  TRANSPORTTYPECODE      VARCHAR2(4 BYTE),
  TRANSPORTTYPE          VARCHAR2(40 BYTE),
  PRODUCTCODE            NUMBER(18),
  PRODUCTNAME            VARCHAR2(128 BYTE),
  PASSPORTNUM            VARCHAR2(10 BYTE),
  FILLINGHEIGHT          NUMBER(7,1),
  DENSITYFACT            NUMBER(13,4),
  DENSITYONSTANDARTTEMP  NUMBER(13,4),
  STANDARTTEMP           NUMBER(5),
  TEMPOFFILLING          NUMBER(5,1),
  PUREWEIGHT             NUMBER(15,3),
  TOTALWEIGHT            NUMBER(15,3),
  REESTRNUM              VARCHAR2(10 BYTE),
  STATE                  NUMBER(1),
  DELIVERYDIRECTION      NUMBER(1),
  KVITNUM                VARCHAR2(12 BYTE),
  KVITDATE               DATE,
  PACKINGITEMCOUNT       NUMBER(5),
  PACKINGITEMWEIGHT      NUMBER(15,3),
  TAREWEIGHTFORPACKING   NUMBER(15,3),
  ACTIONCODE             NUMBER(1),
  DEPOT                  VARCHAR2(4 BYTE),
  ORDERCODE              VARCHAR2(15 BYTE),
  TARIFF                 VARCHAR2(15 BYTE),
  TAREVAGONWEIGHT        VARCHAR2(15 BYTE),
  SEAL1                  VARCHAR2(15 BYTE),
  SEAL2                  VARCHAR2(15 BYTE),
  TTNSAMPLECODE          VARCHAR2(10 BYTE),
  WARRANTNUM             VARCHAR2(15 BYTE),
  WARRANTDATE            DATE,
  DRIVERFIO              VARCHAR2(50 BYTE),
  VAGONTONNAGE           VARCHAR2(15 BYTE),
  GUARDPAYMENT           VARCHAR2(15 BYTE),
  PRODUCTVOLUME          VARCHAR2(15 BYTE),
  PANCOUNT               NUMBER(15,3),
  PANWEIGHT              VARCHAR2(15 BYTE),
  PACKINGKIND            VARCHAR2(10 BYTE),
  TRANSPORTUNITTYPE      VARCHAR2(40 BYTE),
  WEIGHTEVALUATEMETHOD   VARCHAR2(10 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_ZKERP_DATA_X  (Table) 
--
CREATE TABLE MASTER.XX101_ZKERP_DATA_X
(
  FILENAME               VARCHAR2(20 BYTE),
  PARSEDATETIME          DATE,
  PROPAGATESTATUS        NUMBER(1),
  FILEROWNUM             VARCHAR2(7 BYTE),
  WAYBILLID              VARCHAR2(10 BYTE),
  WAYBILLROWID           VARCHAR2(6 BYTE),
  TRANSPORTKIND          VARCHAR2(2 BYTE),
  SHIPMENTDATE           DATE,
  SHIPMENTTIME           VARCHAR2(8 BYTE),
  TRANSPORTNUM           VARCHAR2(128 BYTE),
  OWNERSHIPTYPE          NUMBER(4),
  OWNER                  VARCHAR2(35 BYTE),
  AXESCOUNT              NUMBER(1),
  TRANSPORTTYPECODE      VARCHAR2(4 BYTE),
  TRANSPORTTYPE          VARCHAR2(40 BYTE),
  PRODUCTCODE            NUMBER(18),
  PRODUCTNAME            VARCHAR2(128 BYTE),
  PASSPORTNUM            VARCHAR2(10 BYTE),
  FILLINGHEIGHT          NUMBER(7,1),
  DENSITYFACT            NUMBER(13,4),
  DENSITYONSTANDARTTEMP  NUMBER(13,4),
  STANDARTTEMP           NUMBER(5),
  TEMPOFFILLING          NUMBER(5,1),
  PUREWEIGHT             NUMBER(15,3),
  TOTALWEIGHT            NUMBER(15,3),
  REESTRNUM              VARCHAR2(10 BYTE),
  STATE                  NUMBER(1),
  DELIVERYDIRECTION      NUMBER(1),
  KVITNUM                VARCHAR2(12 BYTE),
  KVITDATE               DATE,
  PACKINGITEMCOUNT       NUMBER(5),
  PACKINGITEMWEIGHT      NUMBER(15,3),
  TAREWEIGHTFORPACKING   NUMBER(15,3),
  ACTIONCODE             NUMBER(1),
  DEPOT                  VARCHAR2(4 BYTE),
  ORDERCODE              VARCHAR2(15 BYTE),
  TARIFF                 VARCHAR2(15 BYTE),
  TAREVAGONWEIGHT        VARCHAR2(15 BYTE),
  SEAL1                  VARCHAR2(15 BYTE),
  SEAL2                  VARCHAR2(15 BYTE),
  TTNSAMPLECODE          VARCHAR2(10 BYTE),
  WARRANTNUM             VARCHAR2(15 BYTE),
  WARRANTDATE            DATE,
  DRIVERFIO              VARCHAR2(50 BYTE),
  VAGONTONNAGE           VARCHAR2(15 BYTE),
  GUARDPAYMENT           VARCHAR2(15 BYTE),
  PRODUCTVOLUME          VARCHAR2(15 BYTE),
  PANCOUNT               NUMBER(15,3),
  PANWEIGHT              VARCHAR2(15 BYTE),
  PACKINGKIND            VARCHAR2(10 BYTE),
  TRANSPORTUNITTYPE      VARCHAR2(40 BYTE),
  WEIGHTEVALUATEMETHOD   VARCHAR2(10 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_ZPOSTAV  (Table) 
--
CREATE TABLE MASTER.XX101_ZPOSTAV
(
  WAYBILLID     VARCHAR2(16 BYTE),
  WAYBILLROWID  VARCHAR2(16 BYTE),
  NUM_CIST      VARCHAR2(10 BYTE),
  DATE_OTGR     DATE
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_ZRAZNAR  (Table) 
--
CREATE TABLE MASTER.XX101_ZRAZNAR
(
  ORDERNUM    VARCHAR2(16 BYTE)                 NOT NULL,
  BEGIN_DATE  DATE,
  END_DATE    DATE
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- XX101_ZVZAV_DATA  (Table) 
--
CREATE TABLE MASTER.XX101_ZVZAV_DATA
(
  FILENAME                  VARCHAR2(20 BYTE),
  PARSEDATETIME             DATE,
  PROPAGATESTATUS           NUMBER(1),
  FILEROWNUM                VARCHAR2(5 BYTE),
  ORDERNUM                  NUMBER(16),
  BEGINDATE                 DATE,
  ENDDATE                   DATE,
  PLANWEIGHT                NUMBER(15,6),
  PLANCOUNT                 NUMBER(5),
  PLANVAGONSCOUNT           NUMBER(5),
  PRODUCTKSSSCODE           VARCHAR2(10 BYTE),
  MEASUREUNIT               VARCHAR2(2 BYTE),
  RECIPIENTNAME             VARCHAR2(128 BYTE),
  PRODUCTTYPE               NUMBER(1),
  ORDERSTATUS               NUMBER(1),
  ACTIONCODE                NUMBER(1),
  DELIVERYDIRECTION         NUMBER(1),
  PRIORITY                  NUMBER(2),
  SOURCESTATIONCODE         VARCHAR2(6 BYTE),
  DESTINATIONSTATIONCODE    VARCHAR2(6 BYTE),
  UNLOADINGSTATIONNAME      VARCHAR2(50 BYTE),
  PRODUCTRECIPIENTKSSSCODE  VARCHAR2(10 BYTE),
  TARIFFPAYERKSSSCODE       VARCHAR2(10 BYTE),
  SHIPMENTKINDCODE          VARCHAR2(2 BYTE),
  CONTRACT                  VARCHAR2(20 BYTE),
  GOSSUPPLYDIRECTION        VARCHAR2(20 BYTE),
  REMARKTEXT                VARCHAR2(100 BYTE),
  PRICE                     VARCHAR2(16 BYTE),
  EXCISE                    VARCHAR2(16 BYTE),
  SENDERSPECIALMARK         VARCHAR2(100 BYTE),
  CONSUMERKSSSCODE          VARCHAR2(10 BYTE),
  PLANNINGGROUPSHIERARCHY   VARCHAR2(20 BYTE),
  CONSIGNERKSSSCODE         VARCHAR2(10 BYTE),
  FORWARDERKSSSCODE         VARCHAR2(10 BYTE),
  NUMOFETRANSYSTEM          VARCHAR2(50 BYTE),
  VAGONSOWNERSHIPCODE       VARCHAR2(10 BYTE),
  SHIPMENTREQUESTID         VARCHAR2(15 BYTE),
  SUPPLYORDERNUM            VARCHAR2(20 BYTE),
  SUPPLYORDERDATE           DATE,
  ORDERPOSITION             VARCHAR2(10 BYTE),
  NPOORDERID                VARCHAR2(15 BYTE),
  ORDERWEIGHT               NUMBER(15,6),
  PACKING_COUNT             NUMBER(10,3),
  VAGONSCOUNT               NUMBER(10)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ZAKAZ  (Table) 
--
CREATE TABLE MASTER.ZAKAZ
(
  ID             NUMBER(10)                     NOT NULL,
  IS_AGENT       NUMBER(1)                      DEFAULT 2,
  DATE_PLAN      DATE,
  CLIENT_NUMBER  VARCHAR2(50 BYTE),
  CLIENT_DATE    DATE,
  INPUT_NUMBER   VARCHAR2(50 BYTE),
  INPUT_DATE     DATE,
  BEGIN_DATE     DATE,
  IS_ACCEPT      NUMBER(1)                      DEFAULT 0,
  FILIAL_ID      NUMBER(10),
  PLAT_ID        NUMBER(10),
  DOG_ID         NUMBER(10),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  USL_OPL_ID     NUMBER(10),
  LOAD_ABBR      VARCHAR2(3 BYTE),
  STAN_ID        NUMBER(10),
  VETKA_ID       NUMBER(10),
  POLUCH_ID      NUMBER(10),
  POTREB_ID      NUMBER(10),
  POTREB_NAME    VARCHAR2(200 BYTE),
  NEFTEBASA      VARCHAR2(50 BYTE),
  PAYFORM_ID     NUMBER(10),
  PLANSTRU_ID    NUMBER(10),
  PRICE_CLIENT   NUMBER(12,5)                   DEFAULT NULL,
  PRICE          NUMBER(12,5)                   DEFAULT NULL,
  VES            NUMBER(16,6)                   DEFAULT 0,
  KOL            NUMBER(10)                     DEFAULT 0,
  SPEED_VES      NUMBER(16,6)                   DEFAULT 0,
  SPEED_KOL      NUMBER(10)                     DEFAULT 0,
  NOM_ZD_LIST    VARCHAR2(150 BYTE),
  FACT_VES       NUMBER(16,6)                   DEFAULT 0,
  FACT_KOL       NUMBER(10)                     DEFAULT 0,
  PRIM           VARCHAR2(100 BYTE),
  GR4            VARCHAR2(100 BYTE),
  LOAD_VES       NUMBER(16,6)                   DEFAULT 0,
  LOAD_KOL       NUMBER(10)                     DEFAULT 0,
  ZAKAZ_PREV_ID  NUMBER(10),
  GOSPROG_ID     NUMBER(2),
  GP_NAPR_ID     NUMBER(10),
  LUKDOG_ID      NUMBER(10),
  IS_AUTO        NUMBER(1)                      DEFAULT 0,
  LINK_ID        NUMBER(10),
  LINK_HIST_ID   NUMBER(10),
  PERIOD_ID      NUMBER(10)                     DEFAULT 1,
  TIP_CORP_ID    NUMBER(10)                     DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ZAKAZ IS 'Заказы потребителей';

COMMENT ON COLUMN MASTER.ZAKAZ.ID IS 'ID';

COMMENT ON COLUMN MASTER.ZAKAZ.IS_AGENT IS '1-Агентский 2-Поставка';

COMMENT ON COLUMN MASTER.ZAKAZ.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.ZAKAZ.CLIENT_NUMBER IS 'Исходящий номер клиента';

COMMENT ON COLUMN MASTER.ZAKAZ.CLIENT_DATE IS 'Исходящяя дата';

COMMENT ON COLUMN MASTER.ZAKAZ.INPUT_NUMBER IS 'Рег.номер';

COMMENT ON COLUMN MASTER.ZAKAZ.INPUT_DATE IS 'Дата регистрации';

COMMENT ON COLUMN MASTER.ZAKAZ.BEGIN_DATE IS 'Дата начала действия заказа';

COMMENT ON COLUMN MASTER.ZAKAZ.IS_ACCEPT IS 'Утвержден';

COMMENT ON COLUMN MASTER.ZAKAZ.FILIAL_ID IS 'Филиал';

COMMENT ON COLUMN MASTER.ZAKAZ.PLAT_ID IS 'Плательщик';

COMMENT ON COLUMN MASTER.ZAKAZ.DOG_ID IS 'Договор';

COMMENT ON COLUMN MASTER.ZAKAZ.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.ZAKAZ.USL_OPL_ID IS 'Условия оплаты';

COMMENT ON COLUMN MASTER.ZAKAZ.LOAD_ABBR IS 'Вид отгрузки';

COMMENT ON COLUMN MASTER.ZAKAZ.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.ZAKAZ.VETKA_ID IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.ZAKAZ.POLUCH_ID IS 'Полкчатель';

COMMENT ON COLUMN MASTER.ZAKAZ.POTREB_ID IS 'Потребитель';

COMMENT ON COLUMN MASTER.ZAKAZ.POTREB_NAME IS 'Потребитель';

COMMENT ON COLUMN MASTER.ZAKAZ.NEFTEBASA IS 'Склад (нефтебаза)';

COMMENT ON COLUMN MASTER.ZAKAZ.PAYFORM_ID IS 'Форма оплаты';

COMMENT ON COLUMN MASTER.ZAKAZ.PLANSTRU_ID IS 'Позиция плана поставок';

COMMENT ON COLUMN MASTER.ZAKAZ.PRICE_CLIENT IS 'Цена клиента';

COMMENT ON COLUMN MASTER.ZAKAZ.PRICE IS 'Цена продажи';

COMMENT ON COLUMN MASTER.ZAKAZ.VES IS 'Заказанный объем';

COMMENT ON COLUMN MASTER.ZAKAZ.KOL IS 'Кол-во вагонов';

COMMENT ON COLUMN MASTER.ZAKAZ.SPEED_VES IS 'Срочная перевозка, тн';

COMMENT ON COLUMN MASTER.ZAKAZ.SPEED_KOL IS 'Срочная перевозка, вц';

COMMENT ON COLUMN MASTER.ZAKAZ.NOM_ZD_LIST IS 'Заявки ФИНАНСЫ по данному заказу';

COMMENT ON COLUMN MASTER.ZAKAZ.FACT_VES IS 'Фактически отгружено, тн';

COMMENT ON COLUMN MASTER.ZAKAZ.FACT_KOL IS 'Фактически отгружено, вц';

COMMENT ON COLUMN MASTER.ZAKAZ.PRIM IS 'Причина';

COMMENT ON COLUMN MASTER.ZAKAZ.GR4 IS 'Гр.4';

COMMENT ON COLUMN MASTER.ZAKAZ.LOAD_VES IS 'Вес к отгрузке';

COMMENT ON COLUMN MASTER.ZAKAZ.LOAD_KOL IS 'Вагонов к отгрузке';

COMMENT ON COLUMN MASTER.ZAKAZ.ZAKAZ_PREV_ID IS 'Предыдущий заказ';

COMMENT ON COLUMN MASTER.ZAKAZ.GOSPROG_ID IS 'Госпрограмма';

COMMENT ON COLUMN MASTER.ZAKAZ.GP_NAPR_ID IS 'Направление по госпрограмме';

COMMENT ON COLUMN MASTER.ZAKAZ.LUKDOG_ID IS 'Договор с Компанией';

COMMENT ON COLUMN MASTER.ZAKAZ.IS_AUTO IS '1-Добавлен автоматически';

COMMENT ON COLUMN MASTER.ZAKAZ.LINK_ID IS 'Ссылка на заказ';

COMMENT ON COLUMN MASTER.ZAKAZ.LINK_HIST_ID IS 'Ссылка на позицию заказа';

COMMENT ON COLUMN MASTER.ZAKAZ.PERIOD_ID IS 'Период планирования';

COMMENT ON COLUMN MASTER.ZAKAZ.TIP_CORP_ID IS 'Тип 1-собствен., 2-внутрикорпорат. транзит';



--
-- ZAKAZ_GRAFIK_TEMP  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_GRAFIK_TEMP
(
  TERMINAL_NAME  VARCHAR2(30 BYTE),
  USER_NAME      VARCHAR2(30 BYTE),
  DATE_LOAD      DATE,
  TONN_LOAD      NUMBER(16,6)                   DEFAULT 0,
  CIST_LOAD      NUMBER(10)                     DEFAULT 0
)
TABLESPACE LOADER
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ZAKAZ_GRAFIK_TEMP IS 'Временная таблица для графика отгрузки';



--
-- ZAKAZ_HIST  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_HIST
(
  ID               NUMBER(10)                   NOT NULL,
  ZAKAZ_ID         NUMBER(10),
  SORTBY           NUMBER(5),
  STATUS_ZAKAZ_ID  NUMBER(10)                   DEFAULT 10,
  CLIENT_NUMBER    VARCHAR2(50 BYTE),
  CLIENT_DATE      DATE,
  INPUT_NUMBER     VARCHAR2(50 BYTE),
  INPUT_DATE       DATE,
  PROD_ID_NPR      VARCHAR2(5 BYTE),
  OLD_STAN_ID      NUMBER(10),
  STAN_ID          NUMBER(10),
  POLUCH_ID        NUMBER(10),
  PRICE            NUMBER(12,5)                 DEFAULT NULL,
  VES              NUMBER(16,6)                 DEFAULT 0,
  KOL              NUMBER(10)                   DEFAULT 0,
  SPEED_VES        NUMBER(16,6)                 DEFAULT 0,
  SPEED_KOL        NUMBER(10)                   DEFAULT 0,
  NOM_ZD           VARCHAR2(12 BYTE),
  FACT_VES         NUMBER(16,6)                 DEFAULT 0,
  FACT_KOL         NUMBER(10)                   DEFAULT 0,
  GU12_A_ID        NUMBER(10),
  IS_AUTO          NUMBER(1)                    DEFAULT 1,
  BEGIN_DATE       DATE,
  GRAFIK           VARCHAR2(100 BYTE),
  POTREB_ID        NUMBER(10),
  LOAD_VES         NUMBER(16,6)                 DEFAULT 0,
  LOAD_KOL         NUMBER(10)                   DEFAULT 0,
  LINK_ID          NUMBER(10),
  LINK_HIST_ID     NUMBER(10),
  IS_AUTO_MONTH    NUMBER(1)                    DEFAULT 0,
  KOD_ISU          VARCHAR2(15 BYTE),
  IS_AUTO_LINK     NUMBER(1)                    DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ZAKAZ_HIST IS 'История Заказов потребителей';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.ID IS 'ID';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.ZAKAZ_ID IS 'ID заказа';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.SORTBY IS 'Порядок';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.STATUS_ZAKAZ_ID IS 'Статус';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.CLIENT_NUMBER IS 'Исходящий номер клиента';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.CLIENT_DATE IS 'Исходящяя дата';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.INPUT_NUMBER IS 'Рег.номер';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.INPUT_DATE IS 'Дата регистрации';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.OLD_STAN_ID IS 'Станция назначения (предыдущая)';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.POLUCH_ID IS 'Полкчатель';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.PRICE IS 'Цена продажи';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.VES IS 'Заказанный объем';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.KOL IS 'Кол-во вагонов';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.SPEED_VES IS 'Срочная перевозка, тн';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.SPEED_KOL IS 'Срочная перевозка, вц';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.NOM_ZD IS 'Заявка ФИНАНСЫ по данному заказу';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.FACT_VES IS 'Фактически отгружено, тн';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.FACT_KOL IS 'Фактически отгружено, вц';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.GU12_A_ID IS 'Заявка на перевозку';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.IS_AUTO IS 'Позиция добавлена автоматически';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.BEGIN_DATE IS 'Дата начала действия позиции';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.GRAFIK IS 'График отгрузки';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.POTREB_ID IS 'Потребитель';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.LOAD_VES IS 'К отгрузке, тн';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.LOAD_KOL IS 'К отгрузке, вц';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.LINK_ID IS 'Ссылка на заказ';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.LINK_HIST_ID IS 'Ссылка на позицию заказа';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.IS_AUTO_MONTH IS 'Добавлено из MONTH';

COMMENT ON COLUMN MASTER.ZAKAZ_HIST.KOD_ISU IS 'Номер из ИСУ Переработка';



--
-- ZAKAZ_HIST_ISU  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_HIST_ISU
(
  ZAKAZ_HIST_ID  NUMBER(10)                     NOT NULL,
  KOD_ISU        VARCHAR2(15 BYTE)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ZAKAZ_PARUS  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_PARUS
(
  PARUS_RN          NUMBER(17),
  DATE_PLAN         DATE,
  CLIENT_NUMBER     VARCHAR2(50 BYTE),
  CLIENT_DATE       DATE,
  INPUT_NUMBER      VARCHAR2(50 BYTE),
  INPUT_DATE        DATE,
  IS_ACCEPT         NUMBER(1)                   DEFAULT 0,
  FILIAL_ID         NUMBER(10),
  PARUS_AGENT_RN    NUMBER(17),
  PARUS_AGENT_TAG   VARCHAR2(20 BYTE),
  PARUS_AGENT_NAME  VARCHAR2(200 BYTE),
  PARUS_DOGOVOR     VARCHAR2(30 BYTE),
  PARUS_NOMEN_RN    NUMBER(17),
  PARUS_NOMEN_TAG   VARCHAR2(20 BYTE),
  PARUS_NOMEN_NAME  VARCHAR2(200 BYTE),
  PARUS_MODIF_RN    NUMBER(17),
  PARUS_MODIF_TAG   VARCHAR2(20 BYTE),
  PARUS_MODIF_NAME  VARCHAR2(200 BYTE),
  USL_OPL_ID        NUMBER(10),
  POLUCH_NAME       VARCHAR2(200 BYTE),
  POTREB_NAME       VARCHAR2(200 BYTE),
  NEFTEBASA         VARCHAR2(50 BYTE),
  PRICE_CLIENT      NUMBER(12,5)                DEFAULT NULL,
  PRICE             NUMBER(12,5)                DEFAULT NULL,
  VES               NUMBER(16,6)                DEFAULT 0,
  FACT_VES          NUMBER(16,6)                DEFAULT 0,
  PRIM              VARCHAR2(100 BYTE),
  IS_WORK           NUMBER(1)                   DEFAULT 1,
  LOAD_ABBR         VARCHAR2(10 BYTE),
  PARUS_PRN         NUMBER(17)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ZAKAZ_PARUS IS 'Заказы потребителей (ПАРУС)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_RN IS 'Ссылка на заявку из Паруса';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.CLIENT_NUMBER IS 'Исходящий номер клиента';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.CLIENT_DATE IS 'Исходящяя дата';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.INPUT_NUMBER IS 'Рег.номер';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.INPUT_DATE IS 'Дата регистрации';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.IS_ACCEPT IS 'Утвержден';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.FILIAL_ID IS 'Филиал';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_AGENT_RN IS 'Плательщик по договору (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_AGENT_TAG IS 'Плательщик по договору (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_AGENT_NAME IS 'Плательщик по договору (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_DOGOVOR IS 'Договор (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_NOMEN_RN IS 'Продукт (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_NOMEN_TAG IS 'Продукт (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_NOMEN_NAME IS 'Продукт (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_MODIF_RN IS 'Модификация (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_MODIF_TAG IS 'Модицикация (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PARUS_MODIF_NAME IS 'Модификация (Парус)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.USL_OPL_ID IS 'Условия оплаты';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.POLUCH_NAME IS 'Получатель';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.POTREB_NAME IS 'Потребитель';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.NEFTEBASA IS 'Склад (нефтебаза)';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PRICE_CLIENT IS 'Цена клиента';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PRICE IS 'Цена продажи';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.VES IS 'Заказанный объем';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.FACT_VES IS 'Фактически отгружено';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.PRIM IS 'Причина';

COMMENT ON COLUMN MASTER.ZAKAZ_PARUS.IS_WORK IS 'К отгрузке';



--
-- ZAKAZ_SNP_LINKS  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_SNP_LINKS
(
  DOC301_ID     NUMBER(16)                      NOT NULL,
  ZAKAZ_SNP_ID  NUMBER(16)                      NOT NULL
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- ZAKAZ_TEMP  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_TEMP
(
  TERMINAL_NAME     VARCHAR2(30 BYTE),
  USER_NAME         VARCHAR2(30 BYTE),
  IS_AGENT          NUMBER(2),
  KIND_VALUE        NUMBER(2),
  FILIAL_ID         NUMBER(10),
  PROD_ID_NPR       VARCHAR2(5 BYTE),
  PARUS_NOMEN_TAG   VARCHAR2(20 BYTE),
  PLAT_ID           NUMBER(10),
  PARUS_AGENT_TAG   VARCHAR2(20 BYTE),
  DOG_ID            NUMBER(10),
  PARUS_DOGOVOR     VARCHAR2(30 BYTE),
  PROD_NAME         VARCHAR2(200 BYTE),
  PLAN_NB           NUMBER(15,3),
  PLAN_AZS          NUMBER(15,3),
  PLAN_TRAN         NUMBER(15,3),
  PLAN_VNCORPTR     NUMBER(15,3),
  PLAN_OTHER        NUMBER(15,3),
  PLAN_PROD         NUMBER(15,3),
  PLAN_DOG          NUMBER(15,3),
  ZAYV_ALL_PROD     NUMBER(15,3),
  ZAYV_ACCEPT_PROD  NUMBER(15,3),
  ZAYV_FACT_PROD    NUMBER(15,3),
  ZAYV_ALL_PLAT     NUMBER(15,3),
  ZAYV_ACCEPT_PLAT  NUMBER(15,3),
  ZAYV_FACT_PLAT    NUMBER(15,3),
  ZAYV_ALL_DOG      NUMBER(15,3),
  ZAYV_ACCEPT_DOG   NUMBER(15,3),
  ZAYV_FACT_DOG     NUMBER(15,3),
  SALDO             NUMBER(16,2)
)
TABLESPACE LOADER
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ZAKAZ_TEMP IS 'Временная таблица для заказов потребителей';



--
-- EUL_ID_SEQ  (Sequence) 
--
CREATE SEQUENCE MASTER.EUL_ID_SEQ
  START WITH 100140
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- JKA_SEQ_2  (Sequence) 
--
CREATE SEQUENCE MASTER.JKA_SEQ_2
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_FROM_PARUS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_FROM_PARUS
  START WITH 644
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_GOOD_IN_WAY  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_GOOD_IN_WAY
  START WITH 19
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_OPERATION  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_OPERATION
  START WITH 9879392
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_PERIODS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_PERIODS
  START WITH 2
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_PLACE_SEND  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_PLACE_SEND
  START WITH 9
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_PROD_GROUP  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_PROD_GROUP
  START WITH 8
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_REALIZ_LIKARD  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_REALIZ_LIKARD
  START WITH 31
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_SYS_COMM  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_SYS_COMM
  START WITH 145
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_SYS_FIELDS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_SYS_FIELDS
  START WITH 19
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_SYS_PAGE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_SYS_PAGE
  START WITH 10
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_TARIF  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_TARIF
  START WITH 295
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_TYPE_OPERATION  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_TYPE_OPERATION
  START WITH 19
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_AZC_WEEK_PARUS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_AZC_WEEK_PARUS
  START WITH 11843
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_BILLS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_BILLS
  START WITH 6500022
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_DAYLY_FACT  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_DAYLY_FACT
  START WITH 183054
  MAXVALUE 999999999999999999999999999
  MINVALUE 62818
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_DEC_PLAN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_DEC_PLAN
  START WITH 1659
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_DIAGRAM_KIND  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_DIAGRAM_KIND
  START WITH 32
  MAXVALUE 999999999999999999999999999
  MINVALUE 22
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_DISP_AZS_MANUAL  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_DISP_AZS_MANUAL
  START WITH 160063
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_DOVER  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_DOVER
  START WITH 10013
  MAXVALUE 999999999999999999999999999
  MINVALUE 10000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_DOV_LINE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_DOV_LINE
  START WITH 10001
  MAXVALUE 999999999999999999999999999
  MINVALUE 10000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_ENVIRONMENT  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_ENVIRONMENT
  START WITH 301
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_ENVIRONMENT_GRP  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_ENVIRONMENT_GRP
  START WITH 8
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_GD_PLAN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_GD_PLAN
  START WITH 21540
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_GD_RAZN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_GD_RAZN
  START WITH 22
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_GU12_A  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_GU12_A
  START WITH 33321
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_GU12_A_TEST  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_GU12_A_TEST
  START WITH 100003
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_GU12_B  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_GU12_B
  START WITH 156701
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_GU12_B_TEST  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_GU12_B_TEST
  START WITH 100027
  MAXVALUE 99999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_ID  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_ID
  START WITH 1897926
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 5
  NOORDER;


--
-- SEQ_INF2PB_ACCOUNTS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_INF2PB_ACCOUNTS
  START WITH 2381
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_INF2PB_SCH  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_INF2PB_SCH
  START WITH 15
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS
  START WITH 185
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_BANKS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_BANKS
  START WITH 1000029
  MAXVALUE 999999999999999999999999999
  MINVALUE 1000000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_DEKADA  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_DEKADA
  START WITH 735
  MAXVALUE 999999999999999999999999999
  MINVALUE 205
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_DOG  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_DOG
  START WITH 10007
  MAXVALUE 999999999999999999999999999
  MINVALUE 10000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_ORG_KIND  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_ORG_KIND
  START WITH 15
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_ORG_KIND_RELATIONS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_ORG_KIND_RELATIONS
  START WITH 3
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_ORG_TYPE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_ORG_TYPE
  START WITH 10
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PASP  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PASP
  START WITH 22
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PREDPR_AKCIZ  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PREDPR_AKCIZ
  START WITH 155
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PREDPR_CONTACTS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PREDPR_CONTACTS
  START WITH 337
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PREDPR_RS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PREDPR_RS
  START WITH 8
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PROD_GROUPS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PROD_GROUPS
  START WITH 293
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PROD_GROUPS_DESC  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PROD_GROUPS_DESC
  START WITH 2238
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PROD_KONS_GROUPS_DESC  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PROD_KONS_GROUPS_DESC
  START WITH 10744
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_PROD_TYPE_GRP  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_PROD_TYPE_GRP
  START WITH 5
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KLS_VETKA  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_VETKA
  START WITH 204935
  MAXVALUE 999999
  MINVALUE 200000
  NOCYCLE
  NOCACHE
  ORDER;


--
-- SEQ_KLS_VOZN_RST  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KLS_VOZN_RST
  START WITH 217
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_KVIT_DATE_VIR  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_KVIT_DATE_VIR
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LINK_PARUS_PREDPR  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LINK_PARUS_PREDPR
  START WITH 12
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LOAD_FIL_ORG  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LOAD_FIL_ORG
  START WITH 157
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LOAD_FIL_PERIODS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LOAD_FIL_PERIODS
  START WITH 300
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LOAD_FIL_PROD  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LOAD_FIL_PROD
  START WITH 32
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LOAD_FIL_REALIZ  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LOAD_FIL_REALIZ
  START WITH 12165313
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LOAD_FIL_REGIONS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LOAD_FIL_REGIONS
  START WITH 2
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_LOAD_SESSION  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_LOAD_SESSION
  START WITH 300
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MASTER_KLS_FIELD_STRUCTURE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MASTER_KLS_FIELD_STRUCTURE
  START WITH 1175
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MASTER_QUERY_TYPES_DESC  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MASTER_QUERY_TYPES_DESC
  START WITH 56
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MESTO_LOG  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MESTO_LOG
  START WITH 4384824
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MONTH_ALL  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MONTH_ALL
  START WITH 5863507
  MAXVALUE 999999999999999999999999999
  MINVALUE 25000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MONTH_VISIR  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MONTH_VISIR
  START WITH 15
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MONTH_VISIR_LOC  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MONTH_VISIR_LOC
  START WITH 1733
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_MOVEPROD  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_MOVEPROD
  START WITH 272055
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_NARIAD  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_NARIAD
  START WITH 10032
  MAXVALUE 999999999999999999999999999
  MINVALUE 10000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_NAR_LINE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_NAR_LINE
  START WITH 10000
  MAXVALUE 999999999999999999999999999
  MINVALUE 10000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_NPR_PRICES  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_NPR_PRICES
  START WITH 60321
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_NUM_AKT  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_NUM_AKT
  START WITH 102
  MAXVALUE 999999999999999999999999999
  MINVALUE 100
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_OF  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_OF
  START WITH 867
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_ORG_STRUCTURE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_ORG_STRUCTURE
  START WITH 86
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PARUS_NOMEN_PROD_LINK  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PARUS_NOMEN_PROD_LINK
  START WITH 39494
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PARUS_STORE_ORG_STRU_LINK  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PARUS_STORE_ORG_STRU_LINK
  START WITH 484
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PAYMENTS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PAYMENTS
  START WITH 212176
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN
  START WITH 3
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_FACT  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_FACT
  START WITH 3583717
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_FACT_REALIZ  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_FACT_REALIZ
  START WITH 747
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_KIND  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_KIND
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_PERIODS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_PERIODS
  START WITH 859
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_POST  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_POST
  START WITH 54841
  MAXVALUE 999999999999999999999999999
  MINVALUE 5
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_POST_PRICHIN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_POST_PRICHIN
  START WITH 88552
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_POST_SVOD  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_POST_SVOD
  START WITH 98
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_REALIZ  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_REALIZ
  START WITH 17245
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_REFINERY  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_REFINERY
  START WITH 227630
  MAXVALUE 999999999999999999999999999
  MINVALUE 12000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLAN_RESU  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLAN_RESU
  START WITH 2
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PLANSTRU  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PLANSTRU
  START WITH 1027
  MAXVALUE 99998
  MINVALUE 1000
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PODACHA  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PODACHA
  START WITH 130
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_PODACHA_ROWS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_PODACHA_ROWS
  START WITH 7134
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REESTR_RAIL  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REESTR_RAIL
  START WITH 70199
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPL  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPL
  START WITH 3301
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPL_DEPENDENCE  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPL_DEPENDENCE
  START WITH 85
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPL_LIST  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPL_LIST
  START WITH 222
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPL_LOCAL  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPL_LOCAL
  START WITH 34219645
  MAXVALUE 89999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPORT_GROUPS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPORT_GROUPS
  START WITH 19
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPORTS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPORTS
  START WITH 304
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_REPORTS_PARAM  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_REPORTS_PARAM
  START WITH 1676
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_R3_CAT_CEN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_R3_CAT_CEN
  START WITH 206
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_R3_MATERIALS_LINK  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_R3_MATERIALS_LINK
  START WITH 10
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SHAB_EXP  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SHAB_EXP
  START WITH 404
  MAXVALUE 9999999
  MINVALUE 400
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SHAB_VOZ  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SHAB_VOZ
  START WITH 7
  MAXVALUE 9999999999
  MINVALUE 2
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SHABVOZ_NUM  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SHABVOZ_NUM
  START WITH 13
  MAXVALUE 9999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SOOB_EXP  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SOOB_EXP
  START WITH 14400
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SPECIF  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SPECIF
  START WITH 8268
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_STAN_PREDPR  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_STAN_PREDPR
  START WITH 3901
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SVED  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SVED
  START WITH 134
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_SVED_IN  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_SVED_IN
  START WITH 100005110
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_TABLE_ACTIVITY_LOG  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_TABLE_ACTIVITY_LOG
  START WITH 3879315
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_TAX_ID  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_TAX_ID
  START WITH 16281
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  ORDER;


--
-- SEQ_TEMP_TABLES  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_TEMP_TABLES
  START WITH 3093
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_TEMPVARI  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_TEMPVARI
  START WITH 2395512
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_TEST  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_TEST
  START WITH 3297
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_XX101_STATISTICS  (Sequence) 
--
CREATE SEQUENCE MASTER.SEQ_XX101_STATISTICS
  START WITH 464
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- ANALIT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ANALIT_PK ON MASTER.KLS_ANALIT
(ID)
TABLESPACE USERSINDX;


--
-- APP_USERS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.APP_USERS_PK ON MASTER.APP_USERS
(ID)
TABLESPACE USERSINDX;


--
-- ARCH_OPERATION_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.ARCH_OPERATION_ORG_STRU_FK_I ON MASTER.AZC_OPERATION_ARCH
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- ARCH_OPERATION_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ARCH_OPERATION_PK ON MASTER.AZC_OPERATION_ARCH
(ID)
TABLESPACE USERSINDX;


--
-- ARCH_OPERATION_PLACE_SEND_FK_I  (Index) 
--
CREATE INDEX MASTER.ARCH_OPERATION_PLACE_SEND_FK_I ON MASTER.AZC_OPERATION_ARCH
(PLACE_SEND_ID)
TABLESPACE USERSINDX;


--
-- ARCH_OPERATION_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.ARCH_OPERATION_PREDPR_FK_I ON MASTER.AZC_OPERATION_ARCH
(SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- ARCH_OPERATION_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.ARCH_OPERATION_PROD_FK_I ON MASTER.AZC_OPERATION_ARCH
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- ARCH_OPERATION_TYPE_OPER_FK_I  (Index) 
--
CREATE INDEX MASTER.ARCH_OPERATION_TYPE_OPER_FK_I ON MASTER.AZC_OPERATION_ARCH
(TYPE_OPER_ID)
TABLESPACE USERSINDX;


--
-- ARH_DATE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ARH_DATE_PK ON MASTER.ARH_DATE
(TABLENAME)
TABLESPACE USERSINDX;


--
-- ARH_OPERATION_DATE_OPER  (Index) 
--
CREATE INDEX MASTER.ARH_OPERATION_DATE_OPER ON MASTER.AZC_OPERATION_ARCH
(DATE_OPER)
TABLESPACE USERSINDX;


--
-- AR_TOV_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.AR_TOV_PK ON MASTER.KLS_AR_TOV
(ID)
TABLESPACE USERSINDX;


--
-- AUART_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.AUART_PK ON MASTER.R3_AUART
(VBAK_AUART)
TABLESPACE USERSINDX;


--
-- AZC_FROM_PARUS_OSUSER  (Index) 
--
CREATE INDEX MASTER.AZC_FROM_PARUS_OSUSER ON MASTER.AZC_FROM_PARUS
(OSUSER_NAME)
TABLESPACE USERSINDX;


--
-- AZC_FROM_PARUS_TERMINAL  (Index) 
--
CREATE INDEX MASTER.AZC_FROM_PARUS_TERMINAL ON MASTER.AZC_FROM_PARUS
(TERMINAL_NAME)
TABLESPACE USERSINDX;


--
-- AZC_PR_GRP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.AZC_PR_GRP_PK ON MASTER.AZC_PROD_GROUP
(ID)
TABLESPACE USERSINDX;


--
-- AZC_STATIC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.AZC_STATIC_PK ON MASTER.AZC_STATIC_REP
(ID)
TABLESPACE USERS;


--
-- AZS_REPORTS_TMP_AK  (Index) 
--
CREATE UNIQUE INDEX MASTER.AZS_REPORTS_TMP_AK ON MASTER.AZS_REPORTS_TMP
(OSUSER_NAME, TERMINAL_NAME, ORG_STRU_ID, PROD_ID_NPR, TYPE_OPER_ID, 
DISCOUNT, OPER_DAY, PRICE)
TABLESPACE USERSINDX;


--
-- AZS_REPORTS_TMP_OSUSER_I  (Index) 
--
CREATE INDEX MASTER.AZS_REPORTS_TMP_OSUSER_I ON MASTER.AZS_REPORTS_TMP
(OSUSER_NAME)
TABLESPACE USERSINDX;


--
-- AZS_REPORTS_TMP_TERMINAL_I  (Index) 
--
CREATE INDEX MASTER.AZS_REPORTS_TMP_TERMINAL_I ON MASTER.AZS_REPORTS_TMP
(TERMINAL_NAME)
TABLESPACE USERSINDX;


--
-- BANK_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BANK_PK ON MASTER.KLS_BANK
(KORS)
TABLESPACE USERSINDX;


--
-- BANKS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BANKS_PK ON MASTER.KLS_BANKS
(ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_ROW_U01  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILL_POS_ROW_U01 ON MASTER.BILL_POS_ROW
(NOM_DOK, BILL_POS_ID, NPP)
TABLESPACE USERSINDX;


--
-- BILLS_PREPAY_DATE_BUXG  (Index) 
--
CREATE INDEX MASTER.BILLS_PREPAY_DATE_BUXG ON MASTER.BILLS_PREPAY
(DATE_BUXG)
TABLESPACE USERSINDX;


--
-- BILLS_PREPAY_SUMMA_DOK  (Index) 
--
CREATE INDEX MASTER.BILLS_PREPAY_SUMMA_DOK ON MASTER.BILLS_PREPAY
(SUMMA_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_DATE_KVIT_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_DATE_KVIT_I ON MASTER.BILLS_PREPAY
(DATE_KVIT)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_DATE_MOS_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_DATE_MOS_I ON MASTER.BILLS_PREPAY
(DATE_MOS)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_DATE_OTGR_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_DATE_OTGR_I ON MASTER.BILLS_PREPAY
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_DATE_VYP_SF_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_DATE_VYP_SF_I ON MASTER.BILLS_PREPAY
(DATE_VYP_SF)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_LUK_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_LUK_USL_DOG_FK_I ON MASTER.BILLS_PREPAY
(LUK_DOG_ID, LUK_USL_NUMBER)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_MONTH_FK_I ON MASTER.BILLS_PREPAY
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_NAZN_OTG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_NAZN_OTG_FK_I ON MASTER.BILLS_PREPAY
(NAZN_OTG_ID)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_NOM_SF_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_NOM_SF_I ON MASTER.BILLS_PREPAY
(NOM_SF)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_NUM_5_DAY_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_NUM_5_DAY_I ON MASTER.BILLS_PREPAY
(NUM_5_DAY)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_OWNER_FK_I ON MASTER.BILLS_PREPAY
(OWNER_ID)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILLS_PREP_PK ON MASTER.BILLS_PREPAY
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_PROD_FK_I ON MASTER.BILLS_PREPAY
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_SNP_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_SNP_USL_DOG_FK_I ON MASTER.BILLS_PREPAY
(SNP_DOG_ID, SNP_USL_NUMBER)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_SVED_NUM_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_SVED_NUM_I ON MASTER.BILLS_PREPAY
(SVED_NUM)
TABLESPACE USERSINDX;


--
-- BILLS_PREP_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PREP_USL_DOG_FK_I ON MASTER.BILLS_PREPAY
(DOG_ID, USL_NUMBER)
TABLESPACE USERSINDX;


--
-- BILLS_PRIMARY_APPL_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PRIMARY_APPL_I ON MASTER.BILLS_PRIMARY
(PRIMARY_APPL)
TABLESPACE USERSINDX;


--
-- BILLS_PRIMARY_BEGIN_DATE_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PRIMARY_BEGIN_DATE_I ON MASTER.BILLS_PRIMARY
(BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- BILLS_PRIMARY_END_DATE_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PRIMARY_END_DATE_I ON MASTER.BILLS_PRIMARY
(END_DATE)
TABLESPACE USERSINDX;


--
-- BLOCKS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BLOCKS_PK ON MASTER.R3_BLOCKS
(V_TJ30_TXT04)
TABLESPACE USERSINDX;


--
-- BUF_V_INT_IS  (Index) 
--
CREATE INDEX MASTER.BUF_V_INT_IS ON MASTER.BUF_V_INT
(IS_COPYED)
TABLESPACE USERS;


--
-- BUF_V_INT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BUF_V_INT_PK ON MASTER.BUF_V_INT
(DD_MM_YYYY, SYB_RNK, N_OB, N_FID, MIN_0, 
MIN_1, N_INTER_RAS, N_GR_TY)
TABLESPACE USERS;


--
-- CAT_CEN_CAT_CEN_GR_FK_I  (Index) 
--
CREATE INDEX MASTER.CAT_CEN_CAT_CEN_GR_FK_I ON MASTER.KLS_CAT_CEN
(CAT_CEN_GROUP_ID)
TABLESPACE USERSINDX;


--
-- CAT_CEN_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.CAT_CEN_DOG_FK_I ON MASTER.KLS_CAT_CEN
(DOG_ID)
TABLESPACE USERSINDX;


--
-- CAT_CEN_FOX_ID  (Index) 
--
CREATE UNIQUE INDEX MASTER.CAT_CEN_FOX_ID ON MASTER.KLS_CAT_CEN
(FOX_ID)
TABLESPACE USERSINDX;


--
-- CAT_CEN_GROUPDOG_FK_I  (Index) 
--
CREATE INDEX MASTER.CAT_CEN_GROUPDOG_FK_I ON MASTER.KLS_CAT_CEN
(GROUPDOG_ID)
TABLESPACE USERSINDX;


--
-- CAT_CEN_GR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.CAT_CEN_GR_PK ON MASTER.KLS_CAT_CEN_GROUP
(ID)
TABLESPACE USERSINDX;


--
-- CAT_CEN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.CAT_CEN_PK ON MASTER.KLS_CAT_CEN
(ID)
TABLESPACE USERSINDX;


--
-- CIST_DENI_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.CIST_DENI_PK ON MASTER.KLS_CIST_DENI
(NUM_CIST, BEG_DENI)
TABLESPACE USERSINDX;


--
-- DEC_BEGIN_DATE  (Index) 
--
CREATE INDEX MASTER.DEC_BEGIN_DATE ON MASTER.KLS_DECADA
(DATEDECN)
TABLESPACE USERSINDX;


--
-- DEC_DATE_PLAN  (Index) 
--
CREATE INDEX MASTER.DEC_DATE_PLAN ON MASTER.KLS_DECADA
(DATEPLAN)
TABLESPACE USERSINDX;


--
-- DEC_NUM_DEC  (Index) 
--
CREATE INDEX MASTER.DEC_NUM_DEC ON MASTER.KLS_DECADA
(DEC)
TABLESPACE USERSINDX;


--
-- DEC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DEC_PK ON MASTER.KLS_DECADA
(KOD)
TABLESPACE USERSINDX;


--
-- DIS_DD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DIS_DD_PK ON MASTER.DIS_DOCS_
(DOCUMENT_ID)
TABLESPACE USERSINDX;


--
-- DIS_DG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DIS_DG_PK ON MASTER.DIS_GRANTS_
(DOCUMENT_ID, GRANTEE)
TABLESPACE USERSINDX;


--
-- DOC_STREAM_STAGES_AK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOC_STREAM_STAGES_AK ON MASTER.DOC_STREAM_STAGES
(STREAM_ID, TABLE_TAG)
TABLESPACE USERSINDX;


--
-- DOC_STREAM_STAGES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOC_STREAM_STAGES_PK ON MASTER.DOC_STREAM_STAGES
(ID)
TABLESPACE USERSINDX;


--
-- DOVER_DATE_DOVER  (Index) 
--
CREATE INDEX MASTER.DOVER_DATE_DOVER ON MASTER.KLS_DOVER
(DATE_DOVER)
TABLESPACE USERSINDX;


--
-- DOVER_DATE_END  (Index) 
--
CREATE INDEX MASTER.DOVER_DATE_END ON MASTER.KLS_DOVER
(DATE_END)
TABLESPACE USERSINDX;


--
-- DOVER_DATE_NUM_PREDPR  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOVER_DATE_NUM_PREDPR ON MASTER.KLS_DOVER
(DATE_DOVER, NUM_DOVER, PREDPR_ID)
TABLESPACE USERSINDX;


--
-- DOVER_FIO_DOVER  (Index) 
--
CREATE INDEX MASTER.DOVER_FIO_DOVER ON MASTER.KLS_DOVER
(FIO_DOVER)
TABLESPACE USERSINDX;


--
-- DOVER_NUM_DOVER  (Index) 
--
CREATE INDEX MASTER.DOVER_NUM_DOVER ON MASTER.KLS_DOVER
(NUM_DOVER)
TABLESPACE USERSINDX;


--
-- DOVER_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOVER_PK ON MASTER.KLS_DOVER
(ID)
TABLESPACE USERSINDX;


--
-- DOVER_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.DOVER_PREDPR_FK_I ON MASTER.KLS_DOVER
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- DOV_LINE_DOVER_FK_I  (Index) 
--
CREATE INDEX MASTER.DOV_LINE_DOVER_FK_I ON MASTER.KLS_DOV_LINE
(DOVER_ID)
TABLESPACE USERSINDX;


--
-- DOV_LINE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOV_LINE_PK ON MASTER.KLS_DOV_LINE
(ID)
TABLESPACE USERSINDX;


--
-- DOV_LINE_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.DOV_LINE_PROD_FK_I ON MASTER.KLS_DOV_LINE
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- ENV_ENV_FK_I  (Index) 
--
CREATE INDEX MASTER.ENV_ENV_FK_I ON MASTER.ENVIRONMENT
(MASTER_ID)
TABLESPACE USERSINDX;


--
-- ENV_ENV_GRP_FK_I  (Index) 
--
CREATE INDEX MASTER.ENV_ENV_GRP_FK_I ON MASTER.ENVIRONMENT
(ENV_GRP_ID)
TABLESPACE USERSINDX;


--
-- ENV_ENV_TYPES_FK_I  (Index) 
--
CREATE INDEX MASTER.ENV_ENV_TYPES_FK_I ON MASTER.ENVIRONMENT
(ENV_TYPES_ID)
TABLESPACE USERSINDX;


--
-- ENV_GRP_ENV_GRP_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ENV_GRP_ENV_GRP_AK_UK ON MASTER.ENVIRONMENT_GRP
(GRP_NAME)
TABLESPACE USERSINDX;


--
-- ENV_GRP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ENV_GRP_PK ON MASTER.ENVIRONMENT_GRP
(ID)
TABLESPACE USERSINDX;


--
-- ENV_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ENV_PK ON MASTER.ENVIRONMENT
(ID)
TABLESPACE USERSINDX;


--
-- ENV_TYPES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ENV_TYPES_PK ON MASTER.ENVIRONMENT_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- ENV_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ENV_UK ON MASTER.ENVIRONMENT
(APPL_NAME, ENV_GRP_ID, NETUSER, ENV_NAME)
TABLESPACE USERSINDX;


--
-- EUL_APP_APP2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_APP_APP2_UK ON MASTER.EUL_APP_PARAMS
(APP_NAME_MN)
TABLESPACE USERSINDX;


--
-- EUL_APP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_APP_PK ON MASTER.EUL_APP_PARAMS
(APP_ID)
TABLESPACE USERSINDX;


--
-- EUL_BA_BA1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BA_BA1_UK ON MASTER.EUL_BUSINESS_AREAS
(BA_NAME)
TABLESPACE USERSINDX;


--
-- EUL_BA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BA_PK ON MASTER.EUL_BUSINESS_AREAS
(BA_ID)
TABLESPACE USERSINDX;


--
-- EUL_EU_EU2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_EU_EU2_UK ON MASTER.EUL_EUL_USERS
(EU_USERNAME)
TABLESPACE USERSINDX;


--
-- EUL_EU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_EU_PK ON MASTER.EUL_EUL_USERS
(EU_ID)
TABLESPACE USERSINDX;


--
-- EUL_FC_FC2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FC_FC2_UK ON MASTER.EUL_FUN_CATEGORIES
(FC_NAME_MN, FC_NAME_S)
TABLESPACE USERSINDX;


--
-- EUL_FC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FC_PK ON MASTER.EUL_FUN_CATEGORIES
(FC_ID)
TABLESPACE USERSINDX;


--
-- EUL_FFL_FC_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_FFL_FC_FK_I ON MASTER.EUL_FUN_FC_LINKS
(FFL_FC_ID)
TABLESPACE USERSINDX;


--
-- EUL_FFL_FFL2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FFL_FFL2_UK ON MASTER.EUL_FUN_FC_LINKS
(FFL_FUN_ID, FFL_FC_ID)
TABLESPACE USERSINDX;


--
-- EUL_FFL_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_FFL_FUN_FK_I ON MASTER.EUL_FUN_FC_LINKS
(FFL_FUN_ID)
TABLESPACE USERSINDX;


--
-- EUL_FFL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FFL_PK ON MASTER.EUL_FUN_FC_LINKS
(FFL_ID)
TABLESPACE USERSINDX;


--
-- EUL_FUN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FUN_PK ON MASTER.EUL_FUNCTIONS
(FUN_ID)
TABLESPACE USERSINDX;


--
-- EUL_FUN1_I  (Index) 
--
CREATE INDEX MASTER.EUL_FUN1_I ON MASTER.EUL_FUNCTIONS
(FUN_FUNCTION_TYPE)
TABLESPACE USERSINDX;


--
-- EUL_FUN2_I  (Index) 
--
CREATE INDEX MASTER.EUL_FUN2_I ON MASTER.EUL_FUNCTIONS
(FUN_NAME)
TABLESPACE USERSINDX;


--
-- EUL_GW_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_GW_PK ON MASTER.EUL_GATEWAYS
(GW_ID)
TABLESPACE USERSINDX;


--
-- EUL_HI_HI1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_HI_HI1_UK ON MASTER.EUL_HIERARCHIES
(HI_NAME)
TABLESPACE USERSINDX;


--
-- EUL_HI_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_HI_PK ON MASTER.EUL_HIERARCHIES
(HI_ID)
TABLESPACE USERSINDX;


--
-- EUL_HN_HN2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_HN_HN2_UK ON MASTER.EUL_HI_NODES
(HN_HI_ID, HN_NAME)
TABLESPACE USERSINDX;


--
-- EUL_HN_IBH_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_HN_IBH_FK_I ON MASTER.EUL_HI_NODES
(HN_HI_ID)
TABLESPACE USERSINDX;


--
-- EUL_HN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_HN_PK ON MASTER.EUL_HI_NODES
(HN_ID)
TABLESPACE USERSINDX;


--
-- EUL_IBH_DBH_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IBH_DBH_FK_I ON MASTER.EUL_HIERARCHIES
(IBH_DBH_ID)
TABLESPACE USERSINDX;


--
-- EUL_JC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_JC_PK ON MASTER.EUL_JOIN_COMBS
(JC_ID)
TABLESPACE USERSINDX;


--
-- EUL_OBJ_OBJ1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OBJ_OBJ1_UK ON MASTER.EUL_OBJS
(OBJ_NAME)
TABLESPACE USERSINDX;


--
-- EUL_OBJ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OBJ_PK ON MASTER.EUL_OBJS
(OBJ_ID)
TABLESPACE USERSINDX;


--
-- EUL_OBJ2_I  (Index) 
--
CREATE INDEX MASTER.EUL_OBJ2_I ON MASTER.EUL_OBJS
(OBJ_EXT_OBJECT, OBJ_EXT_OWNER, OBJ_EXT_DB_LINK)
TABLESPACE USERSINDX;


--
-- EUL_QS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_QS_PK ON MASTER.EUL_QPP_STATISTICS
(QS_ID)
TABLESPACE USERSINDX;


--
-- EUL_QS1_I  (Index) 
--
CREATE INDEX MASTER.EUL_QS1_I ON MASTER.EUL_QPP_STATISTICS
(QS_DATE_STAMP)
TABLESPACE USERSINDX;


--
-- EUL_QS2_I  (Index) 
--
CREATE INDEX MASTER.EUL_QS2_I ON MASTER.EUL_QPP_STATISTICS
(QS_OBJECT_USE_KEY)
TABLESPACE USERSINDX;


--
-- EUL_RFU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_RFU_PK ON MASTER.EUL_FREQ_UNITS
(RFU_ID)
TABLESPACE USERSINDX;


--
-- EUL_RFU_RFU2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_RFU_RFU2_UK ON MASTER.EUL_FREQ_UNITS
(RFU_NAME_MN)
TABLESPACE USERSINDX;


--
-- EUL_SRS_EU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SRS_EU_FK_I ON MASTER.EUL_SUM_RFRSH_SETS
(SRS_EU_ID)
TABLESPACE USERSINDX;


--
-- EUL_SRS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SRS_PK ON MASTER.EUL_SUM_RFRSH_SETS
(SRS_ID)
TABLESPACE USERSINDX;


--
-- EUL_SRS_RFU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SRS_RFU_FK_I ON MASTER.EUL_SUM_RFRSH_SETS
(SRS_RFU_ID)
TABLESPACE USERSINDX;


--
-- EUL_SRS_SRS2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SRS_SRS2_UK ON MASTER.EUL_SUM_RFRSH_SETS
(SRS_NAME)
TABLESPACE USERSINDX;


--
-- FIL_PROD_FIL_PROD_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_PROD_FIL_PROD_AK_UK ON MASTER.LOAD_FIL_PROD
(TAG)
TABLESPACE USERSINDX;


--
-- FIL_PROD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_PROD_PK ON MASTER.LOAD_FIL_PROD
(ID)
TABLESPACE USERSINDX;


--
-- FIL_PROD_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_PROD_PROD_FK_I ON MASTER.LOAD_FIL_PROD
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- FORMA_2_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FORMA_2_PK ON MASTER.KLS_FORMA_2
(ID)
TABLESPACE USERSINDX;


--
-- FORMNAKL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FORMNAKL_PK ON MASTER.KLS_FORMNAKL
(ID)
TABLESPACE USERSINDX;


--
-- GD_GROUP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_GROUP_PK ON MASTER.KLS_GD_GROUP
(ID)
TABLESPACE USERSINDX;


--
-- GDOR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GDOR_PK ON MASTER.KLS_GDOR
(ID)
TABLESPACE USERSINDX;


--
-- GD_OTPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_OTPR_PK ON MASTER.KLS_GD_OTPR
(ID)
TABLESPACE USERSINDX;


--
-- GD_PODACH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_PODACH_PK ON MASTER.KLS_GD_PODACH
(ID)
TABLESPACE USERSINDX;


--
-- GD_PRICH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_PRICH_PK ON MASTER.KLS_GD_PRICH
(ID)
TABLESPACE USERSINDX;


--
-- GD_PRINVAG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_PRINVAG_PK ON MASTER.KLS_GD_PRINVAG
(ID)
TABLESPACE USERSINDX;


--
-- GD_SOOB_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_SOOB_PK ON MASTER.KLS_GD_SOOB
(ID)
TABLESPACE USERSINDX;


--
-- GOSPROG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GOSPROG_PK ON MASTER.KLS_GOSPROG
(ID)
TABLESPACE USERSINDX;


--
-- GOST_390085_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GOST_390085_PK ON MASTER.KLS_GOST_390085
(TEMPER, PL20)
TABLESPACE USERSINDX;


--
-- GOST_390085_TK_I  (Index) 
--
CREATE INDEX MASTER.GOST_390085_TK_I ON MASTER.KLS_GOST_390085
(TEMPER, KOEF)
TABLESPACE USERSINDX;


--
-- GOST_8595_54A_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GOST_8595_54A_PK ON MASTER.KLS_GOST_8595_54A
(TEMPER, PL15)
TABLESPACE USERSINDX;


--
-- GOST_8595_54B_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GOST_8595_54B_PK ON MASTER.KLS_GOST_8595_54B
(TEMPER, PL15)
TABLESPACE USERSINDX;


--
-- GP_NAPR_GOSPROG_FK_I  (Index) 
--
CREATE INDEX MASTER.GP_NAPR_GOSPROG_FK_I ON MASTER.KLS_GP_NAPR
(GOSPROG_ID)
TABLESPACE USERSINDX;


--
-- GP_NAPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GP_NAPR_PK ON MASTER.KLS_GP_NAPR
(ID)
TABLESPACE USERSINDX;


--
-- GROUPDOG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GROUPDOG_PK ON MASTER.KLS_GROUPDOG
(ID)
TABLESPACE USERSINDX;


--
-- GTD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GTD_PK ON MASTER.KLS_GTD
(GTD)
TABLESPACE USERSINDX;


--
-- GU12_A_NOM_Z_I  (Index) 
--
CREATE INDEX MASTER.GU12_A_NOM_Z_I ON MASTER.GU12_A
(NOM_Z)
TABLESPACE USERS;


--
-- GU12_A_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_A_PK ON MASTER.GU12_A
(ID)
TABLESPACE USERSINDX;


--
-- GU12_A_PK_TEST  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_A_PK_TEST ON MASTER.GU12_A_TEST
(ID)
TABLESPACE USERSINDX;


--
-- GU12_A_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_A_UK ON MASTER.GU12_A
(FOX_KOD)
TABLESPACE USERSINDX;


--
-- GU12_B_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_B_PK ON MASTER.GU12_B
(ID)
TABLESPACE USERSINDX;


--
-- GU12_B_PK_TEST  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_B_PK_TEST ON MASTER.GU12_B_TEST
(ID)
TABLESPACE USERSINDX;


--
-- GU12_B_PRN  (Index) 
--
CREATE INDEX MASTER.GU12_B_PRN ON MASTER.GU12_B
(ID_A)
TABLESPACE USERSINDX;


--
-- GU12_B_PRN_TEST  (Index) 
--
CREATE INDEX MASTER.GU12_B_PRN_TEST ON MASTER.GU12_B_TEST
(ID_A)
TABLESPACE USERSINDX;


--
-- GU12_BR_DATE_R  (Index) 
--
CREATE INDEX MASTER.GU12_BR_DATE_R ON MASTER.GU12_BR
(DATE_R)
TABLESPACE USERSINDX;


--
-- GU12_BR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_BR_PK ON MASTER.GU12_BR
(ID)
TABLESPACE USERSINDX;


--
-- GU12_BR_TEST_ID  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_BR_TEST_ID ON MASTER.GU12_BR_TEST
(ID)
TABLESPACE USERSINDX;


--
-- GU12_BR_TEST_ID_B  (Index) 
--
CREATE INDEX MASTER.GU12_BR_TEST_ID_B ON MASTER.GU12_BR_TEST
(ID_B)
TABLESPACE USERSINDX;


--
-- GU12_BR_UK  (Index) 
--
CREATE INDEX MASTER.GU12_BR_UK ON MASTER.GU12_BR
(ID_B, DATE_R)
TABLESPACE USERSINDX;


--
-- GU12_B_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GU12_B_UK ON MASTER.GU12_B
(FOX_KOD)
TABLESPACE USERSINDX;


--
-- GU12_FROM_DATE  (Index) 
--
CREATE INDEX MASTER.GU12_FROM_DATE ON MASTER.GU12_A
(FROM_DATE)
TABLESPACE USERSINDX;


--
-- GU12_FROM_DATE_TEST  (Index) 
--
CREATE INDEX MASTER.GU12_FROM_DATE_TEST ON MASTER.GU12_A_TEST
(FROM_DATE)
TABLESPACE USERSINDX;


--
-- HOLDING_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.HOLDING_PK ON MASTER.KLS_HOLDING
(ID)
TABLESPACE USERSINDX;


--
-- I_GR_INTEGR_K  (Index) 
--
CREATE INDEX MASTER.I_GR_INTEGR_K ON MASTER.GR_INTEGR
(N_OB_K, SYB_RNK_K)
TABLESPACE USERSINDX;


--
-- I_GR_INTEGR_U  (Index) 
--
CREATE UNIQUE INDEX MASTER.I_GR_INTEGR_U ON MASTER.GR_INTEGR
(N_GR_INTEGR, N_OB, SYB_RNK)
TABLESPACE USERSINDX;


--
-- I_GR_INTEGR_1  (Index) 
--
CREATE INDEX MASTER.I_GR_INTEGR_1 ON MASTER.GR_INTEGR
(ELEM_BAL, VID_OBEKT_RAB, VID_RASH)
TABLESPACE USERSINDX;


--
-- I_ID  (Index) 
--
CREATE UNIQUE INDEX MASTER.I_ID ON MASTER.PARUS_FIN
(ID)
TABLESPACE USERSINDX;


--
-- I_KVIT_ID  (Index) 
--
CREATE INDEX MASTER.I_KVIT_ID ON MASTER.PARUS_FIN
(KVIT_ID, DATE_KVIT)
TABLESPACE USERSINDX;


--
-- INDX_TIP_CORP_ID  (Index) 
--
CREATE INDEX MASTER.INDX_TIP_CORP_ID ON MASTER.ZAKAZ
(TIP_CORP_ID)
TABLESPACE USERSINDX;


--
-- INF2PB_SCH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.INF2PB_SCH_PK ON MASTER.INF2PB_SCH
(ID)
TABLESPACE USERSINDX;


--
-- INF2PB_SCH_SCH  (Index) 
--
CREATE UNIQUE INDEX MASTER.INF2PB_SCH_SCH ON MASTER.INF2PB_SCH
(SCH)
TABLESPACE USERSINDX;


--
-- INSURE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.INSURE_PK ON MASTER.KLS_INSURE
(ID)
TABLESPACE USERSINDX;


--
-- I_PLAN_REFINERY_MAIN  (Index) 
--
CREATE INDEX MASTER.I_PLAN_REFINERY_MAIN ON MASTER.PLAN_REFINERY
(DATA, PROD, PERER, SOBSTV)
TABLESPACE USERS;


--
-- ISU_BILL_POS_BILL_I  (Index) 
--
CREATE INDEX MASTER.ISU_BILL_POS_BILL_I ON MASTER.ISU_BILL_POS
(SUBSTR("ISU_KOD_POS",1,10))
TABLESPACE USERSINDX;


--
-- ISU_BILL_POS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_BILL_POS_PK ON MASTER.ISU_BILL_POS
(ISU_KOD_POS)
TABLESPACE USERSINDX;


--
-- ISU_BILL_POS_ROW_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_BILL_POS_ROW_PK ON MASTER.ISU_BILL_POS_ROW
(ISU_KOD, ISU_KOD_POS, ISU_TTN_ID)
TABLESPACE USERSINDX;


--
-- ISU_BILLS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_BILLS_PK ON MASTER.ISU_BILLS
(ISU_KOD)
TABLESPACE USERSINDX;


--
-- ISU_DOCSOURCE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_DOCSOURCE_PK ON MASTER.ISU_TAX_SOURCE
(ID)
TABLESPACE USERS;


--
-- ISU_TAX_DODCS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_TAX_DODCS_PK ON MASTER.ISU_TAX_DOCS
(ID)
TABLESPACE USERS;


--
-- ISU_TAX_FILES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_TAX_FILES_PK ON MASTER.ISU_TAX_FILES
(ID)
TABLESPACE USERS;


--
-- ISU_TAX_PACK_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_TAX_PACK_PK ON MASTER.ISU_TAX_PACKAGE
(ID)
TABLESPACE USERS;


--
-- ISU_TAX_REASON_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_TAX_REASON_PK ON MASTER.ISU_TAX_REASON
(ID)
TABLESPACE USERS;


--
-- ISU_TAX_USER_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ISU_TAX_USER_PK ON MASTER.ISU_TAX_USER
(ID)
TABLESPACE USERS;


--
-- I_VAL_INT_D_U  (Index) 
--
CREATE UNIQUE INDEX MASTER.I_VAL_INT_D_U ON MASTER.VAL_INT_D
(DD_MM_YYYY, N_OB, N_GR_INTEGR, SYB_RNK)
TABLESPACE USERSINDX;


--
-- I_VAL_INT_D_1  (Index) 
--
CREATE INDEX MASTER.I_VAL_INT_D_1 ON MASTER.VAL_INT_D
(KOL, KOL_DB)
TABLESPACE USERSINDX;


--
-- I_VAL_INT_D_2  (Index) 
--
CREATE INDEX MASTER.I_VAL_INT_D_2 ON MASTER.VAL_INT_D
(KOL_BP, KOL_DB_BP)
TABLESPACE USERSINDX;


--
-- JKC_SES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.JKC_SES_PK ON MASTER.JKCOMMIT_SESSION
(ID)
TABLESPACE USERSINDX;


--
-- KALIBR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KALIBR_PK ON MASTER.KLS_KALIBR
(ID)
TABLESPACE USERSINDX;


--
-- KIND_RELA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KIND_RELA_PK ON MASTER.KLS_ORG_KIND_RELATIONS
(ID)
TABLESPACE USERSINDX;


--
-- KLS_CIST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_CIST_PK ON MASTER.KLS_CIST
(NUM_CIST)
TABLESPACE USERSINDX;


--
-- KLS_DOC_RESERV_DOC_TYPE_I  (Index) 
--
CREATE INDEX MASTER.KLS_DOC_RESERV_DOC_TYPE_I ON MASTER.KLS_DOC_RESERV
(DOC_TYPE_ID, MESTO_ID)
TABLESPACE USERSINDX;


--
-- KLS_DOC_RESERV_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_DOC_RESERV_PK ON MASTER.KLS_DOC_RESERV
(TERMINAL_NAME, OSUSER_NAME, DOC_TYPE_ID, MESTO_ID)
TABLESPACE USERSINDX;


--
-- KLS_DOG_PARUS_DOG_ID_I  (Index) 
--
CREATE INDEX MASTER.KLS_DOG_PARUS_DOG_ID_I ON MASTER.KLS_DOG_PARUS
(DOG_ID)
TABLESPACE USERSINDX;


--
-- KLS_DOG_PARUS_IS_ACTUAL_I  (Index) 
--
CREATE INDEX MASTER.KLS_DOG_PARUS_IS_ACTUAL_I ON MASTER.KLS_DOG_PARUS
(IS_ACTUAL)
TABLESPACE USERSINDX;


--
-- KLS_EVENT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_EVENT_PK ON MASTER.KLS_EVENT
(ID)
TABLESPACE USERSINDX;


--
-- KLS_ORATODBF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_ORATODBF_PK ON MASTER.KLS_ORATODBF
(ID)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_AKCIZ_DATE_BEG  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_AKCIZ_DATE_BEG ON MASTER.KLS_PREDPR_AKCIZ
(DATE_BEG)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_AKCIZ_DATE_END  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_AKCIZ_DATE_END ON MASTER.KLS_PREDPR_AKCIZ
(DATE_END)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_AKCIZ_EX_SVID_I  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_AKCIZ_EX_SVID_I ON MASTER.KLS_PREDPR_AKCIZ
(EX_SVID)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_AKCIZ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_PREDPR_AKCIZ_PK ON MASTER.KLS_PREDPR_AKCIZ
(ID)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_AKCIZ_PROD  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_AKCIZ_PROD ON MASTER.KLS_PREDPR_AKCIZ
(PROD_GROUPS_ID)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_PLAT_FK_I  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_PLAT_FK_I ON MASTER.KLS_PREDPR_AKCIZ
(PLAT_ID)
TABLESPACE USERSINDX;


--
-- KLS_PRICHIN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_PRICHIN_PK ON MASTER.KLS_PRICHIN
(ID)
TABLESPACE USERSINDX;


--
-- KLS_PROD_GROUP_DESC_PROD  (Index) 
--
CREATE INDEX MASTER.KLS_PROD_GROUP_DESC_PROD ON MASTER.KLS_PROD_GROUPS_DESC
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- KLS_PROD_GROUP_DESC_PROD_ID  (Index) 
--
CREATE INDEX MASTER.KLS_PROD_GROUP_DESC_PROD_ID ON MASTER.KLS_PROD_GROUPS_DESC
(PROD_GROUPS_ID)
TABLESPACE USERSINDX;


--
-- KLS_PROD_GROUP_DESC_TYPE_ID  (Index) 
--
CREATE INDEX MASTER.KLS_PROD_GROUP_DESC_TYPE_ID ON MASTER.KLS_PROD_GROUPS_DESC
(PROD_TYPE_GRP_ID)
TABLESPACE USERSINDX;


--
-- KLS_PROD_GROUPS_TYPE_GRP_ID  (Index) 
--
CREATE INDEX MASTER.KLS_PROD_GROUPS_TYPE_GRP_ID ON MASTER.KLS_PROD_GROUPS
(PROD_TYPE_GRP_ID)
TABLESPACE USERSINDX;


--
-- KLS_RIGHTS_DESCRIPT_UI  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_RIGHTS_DESCRIPT_UI ON MASTER.KLS_RIGHTS
(DESCRIPT)
TABLESPACE USERSINDX;


--
-- KLS_USER_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_USER_PK ON MASTER.KLS_USER
(ID)
TABLESPACE USERSINDX;


--
-- KLS_ZAKAZ_PERIOD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_ZAKAZ_PERIOD_PK ON MASTER.KLS_ZAKAZ_PERIOD
(ID)
TABLESPACE USERSINDX;


--
-- KODIF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KODIF_PK ON MASTER.KLS_KODIF
(ID)
TABLESPACE USERSINDX;


--
-- KSSS_PREDPR_INN_I  (Index) 
--
CREATE INDEX MASTER.KSSS_PREDPR_INN_I ON MASTER.KSSS_PREDPR
(INN)
TABLESPACE USERSINDX;


--
-- KSSS_PREDPR_NAME  (Index) 
--
CREATE INDEX MASTER.KSSS_PREDPR_NAME ON MASTER.KSSS_PREDPR
(NAME)
TABLESPACE USERSINDX;


--
-- KSSS_PREDPR_OKPO_I  (Index) 
--
CREATE INDEX MASTER.KSSS_PREDPR_OKPO_I ON MASTER.KSSS_PREDPR
(OKPO)
TABLESPACE USERSINDX;


--
-- KSSS_PREDPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KSSS_PREDPR_PK ON MASTER.KSSS_PREDPR
(KSSS_PREDPR_ID)
TABLESPACE USERSINDX;


--
-- KSSS_PREDPR_PREDPR_ID_I  (Index) 
--
CREATE INDEX MASTER.KSSS_PREDPR_PREDPR_ID_I ON MASTER.KSSS_PREDPR
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- KSSS_PREDPR_TAG_I  (Index) 
--
CREATE INDEX MASTER.KSSS_PREDPR_TAG_I ON MASTER.KSSS_PREDPR
(TAG)
TABLESPACE USERSINDX;


--
-- KSSS_PROD_FOX_ID_I  (Index) 
--
CREATE INDEX MASTER.KSSS_PROD_FOX_ID_I ON MASTER.KSSS_PROD
(FOX_ID)
TABLESPACE USERSINDX;


--
-- KTS_GTD_FK_I  (Index) 
--
CREATE INDEX MASTER.KTS_GTD_FK_I ON MASTER.KLS_KTS
(GTD)
TABLESPACE USERSINDX;


--
-- KTS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KTS_PK ON MASTER.KLS_KTS
(KTS)
TABLESPACE USERSINDX;


--
-- KVIT_ALFA_MONTH_ALFA_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_ALFA_MONTH_ALFA_FK_I ON MASTER.KVIT_ALFA
(CON_ID)
TABLESPACE USERSINDX;


--
-- KVIT_ALFA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KVIT_ALFA_PK ON MASTER.KVIT_ALFA
(CON_ID, KVIT_ID)
TABLESPACE USERSINDX;


--
-- KVITDATE_IDX  (Index) 
--
CREATE INDEX MASTER.KVITDATE_IDX ON MASTER.XX101_ZKERP_DATA
(KVITDATE)
TABLESPACE USERS;


--
-- KVIT_DATE_VIR_BILL_I  (Index) 
--
CREATE INDEX MASTER.KVIT_DATE_VIR_BILL_I ON MASTER.KVIT_DATE_VIR
(BILL_ID, KVIT_ID)
TABLESPACE USERSINDX;


--
-- KVIT_DATE_VIR_DATE_PALN_I  (Index) 
--
CREATE INDEX MASTER.KVIT_DATE_VIR_DATE_PALN_I ON MASTER.KVIT_DATE_VIR
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- KVIT_NUMAKT_UK  (Index) 
--
CREATE INDEX MASTER.KVIT_NUMAKT_UK ON MASTER.KVIT_NUMAKT
(NUM_AKT, DATE_AKT)
TABLESPACE USERSINDX;


--
-- KVIT_NUMAKT_UK2  (Index) 
--
CREATE UNIQUE INDEX MASTER.KVIT_NUMAKT_UK2 ON MASTER.KVIT_NUMAKT
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- KVIT_VNEPLAN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KVIT_VNEPLAN_PK ON MASTER.KVIT_VNEPLAN
(NUM_KVIT, NOM_Z)
TABLESPACE USERS;


--
-- LINK_PARUS_PREDPR_AUTO_LINK_I  (Index) 
--
CREATE INDEX MASTER.LINK_PARUS_PREDPR_AUTO_LINK_I ON MASTER.LINK_PARUS_PREDPR
(IS_AUTO_LINK)
TABLESPACE USERSINDX;


--
-- LINK_PARUS_PREDPR_PREDPR_ID_I  (Index) 
--
CREATE INDEX MASTER.LINK_PARUS_PREDPR_PREDPR_ID_I ON MASTER.LINK_PARUS_PREDPR
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- LINK_PARUS_PREDPR_RN_I  (Index) 
--
CREATE INDEX MASTER.LINK_PARUS_PREDPR_RN_I ON MASTER.LINK_PARUS_PREDPR
(RN)
TABLESPACE USERSINDX;


--
-- LOAD_MOS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.LOAD_MOS_PK ON MASTER.KLS_LOAD_TYPE_MOS
(ID)
TABLESPACE USERSINDX;


--
-- LPRIO_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.LPRIO_PK ON MASTER.R3_LPRIO
(VBAP_LPRIO)
TABLESPACE USERSINDX;


--
-- MAP_AZS  (Index) 
--
CREATE UNIQUE INDEX MASTER.MAP_AZS ON MASTER.MAP_AZS
(AZS_ID)
TABLESPACE USERSINDX;


--
-- MASTER_KLS_FIELD_STRUCTURE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MASTER_KLS_FIELD_STRUCTURE_PK ON MASTER.MASTER_KLS_FIELD_STRUCTURE
(ID)
TABLESPACE USERSINDX;


--
-- MASTER_KLS_FIELD_STRUCTURE_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MASTER_KLS_FIELD_STRUCTURE_UK ON MASTER.MASTER_KLS_FIELD_STRUCTURE
(STRUCTURE_ID, FIELD_ID)
TABLESPACE USERSINDX;


--
-- MASTER_REPORTS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MASTER_REPORTS_PK ON MASTER.MASTER_REPORTS
(ID)
TABLESPACE USERSINDX;


--
-- MASTER_REPORTS_REP_ID_I  (Index) 
--
CREATE INDEX MASTER.MASTER_REPORTS_REP_ID_I ON MASTER.MASTER_REPORTS
(REP_ID)
TABLESPACE USERSINDX;


--
-- MASTER_REPORTS_REPORT_FILE_I  (Index) 
--
CREATE INDEX MASTER.MASTER_REPORTS_REPORT_FILE_I ON MASTER.MASTER_REPORTS
(REPORT_FILE)
TABLESPACE USERSINDX;


--
-- MATERIAL_ID_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MATERIAL_ID_PK ON MASTER.KSSS_MATERIAL
(MATERIAL_ID)
TABLESPACE USERSINDX;


--
-- MATERIAL_NAME  (Index) 
--
CREATE INDEX MASTER.MATERIAL_NAME ON MASTER.KSSS_MATERIAL
(KLS_NAME)
TABLESPACE USERSINDX;


--
-- MESTO_LOG_DATE_LOG  (Index) 
--
CREATE INDEX MASTER.MESTO_LOG_DATE_LOG ON MASTER.MESTO_LOG
(DATE_LOG)
TABLESPACE USERSINDX;


--
-- MESTO_LOG_LOG_ID  (Index) 
--
CREATE INDEX MASTER.MESTO_LOG_LOG_ID ON MASTER.MESTO_LOG
(LOG_ID)
TABLESPACE USERSINDX;


--
-- MESTO_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MESTO_PK ON MASTER.KLS_MESTO
(ID)
TABLESPACE USERSINDX;


--
-- MON_REE_POS_NOM_ZD_I  (Index) 
--
CREATE INDEX MASTER.MON_REE_POS_NOM_ZD_I ON MASTER.MONTH_REESTR_POS
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- MON_REE_POS_PRIORITY_I  (Index) 
--
CREATE INDEX MASTER.MON_REE_POS_PRIORITY_I ON MASTER.MONTH_REESTR_POS
(PRIORITY)
TABLESPACE USERSINDX;


--
-- MONTH_ALFA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MONTH_ALFA_PK ON MASTER.MONTH_ALFA
(CON_ID)
TABLESPACE USERSINDX;


--
-- MONTH_REE_DATE_REE_I  (Index) 
--
CREATE INDEX MASTER.MONTH_REE_DATE_REE_I ON MASTER.MONTH_REE
(DATE_REE)
TABLESPACE USERSINDX;


--
-- MONTH_REE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MONTH_REE_PK ON MASTER.MONTH_REE
(DATE_REE, DOP_REE, NOM_ZD)
TABLESPACE USERSINDX;


--
-- MONTH_REESTR_AK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MONTH_REESTR_AK ON MASTER.MONTH_REESTR
(DATE_REE, DOP_REE)
TABLESPACE USERSINDX;


--
-- MONTH_REESTR_STATUS_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_REESTR_STATUS_FK_I ON MASTER.MONTH_REESTR
(STATUS)
TABLESPACE USERSINDX;


--
-- MONTH_REESTR_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MONTH_REESTR_UK ON MASTER.MONTH_REESTR
(NUM_REE)
TABLESPACE USERSINDX;


--
-- MON_VISIR_APP_USERS_FK_I  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_APP_USERS_FK_I ON MASTER.MONTH_VISIR
(APP_USERS_ID)
TABLESPACE USERSINDX;


--
-- MON_VISIR_DATE_REE  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_DATE_REE ON MASTER.MONTH_VISIR
(DATE_REE)
TABLESPACE USERSINDX;


--
-- MON_VISIR_DOP_REE  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_DOP_REE ON MASTER.MONTH_VISIR
(DOP_REE)
TABLESPACE USERSINDX;


--
-- MON_VISIR_LOC_APP_USERS_FK_I  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_LOC_APP_USERS_FK_I ON MASTER.MONTH_VISIR_LOC
(APP_USERS_ID)
TABLESPACE USERSINDX;


--
-- MON_VISIR_LOC_DATE_REE  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_LOC_DATE_REE ON MASTER.MONTH_VISIR_LOC
(DATE_REE)
TABLESPACE USERSINDX;


--
-- MON_VISIR_LOC_DOP_REE  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_LOC_DOP_REE ON MASTER.MONTH_VISIR_LOC
(DOP_REE)
TABLESPACE USERSINDX;


--
-- MON_VISIR_LOC_NOM_ZD  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_LOC_NOM_ZD ON MASTER.MONTH_VISIR_LOC
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- MON_VISIR_LOC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MON_VISIR_LOC_PK ON MASTER.MONTH_VISIR_LOC
(ID)
TABLESPACE USERSINDX;


--
-- MON_VISIR_NOM_ZD  (Index) 
--
CREATE INDEX MASTER.MON_VISIR_NOM_ZD ON MASTER.MONTH_VISIR
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- MON_VISIR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MON_VISIR_PK ON MASTER.MONTH_VISIR
(ID)
TABLESPACE USERSINDX;


--
-- MON_VISIR_UNIQ  (Index) 
--
CREATE UNIQUE INDEX MASTER.MON_VISIR_UNIQ ON MASTER.MONTH_VISIR
(DATE_REE, DOP_REE, NOM_ZD)
TABLESPACE USERSINDX;


--
-- MOS_GRP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MOS_GRP_PK ON MASTER.KLS_PROD_MOSGRP
(ID)
TABLESPACE USERSINDX;


--
-- MOVEPROD_MOVEPROD_ID_I  (Index) 
--
CREATE INDEX MASTER.MOVEPROD_MOVEPROD_ID_I ON MASTER.MOVEPROD
(MOVEPROD_ID)
TABLESPACE USERS;


--
-- NAPR_MOS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NAPR_MOS_PK ON MASTER.KLS_NAPR_MOS
(ID)
TABLESPACE USERSINDX;


--
-- NARIAD_DATE_END  (Index) 
--
CREATE INDEX MASTER.NARIAD_DATE_END ON MASTER.KLS_NARIAD
(DATE_END)
TABLESPACE USERSINDX;


--
-- NARIAD_DATE_NAR  (Index) 
--
CREATE INDEX MASTER.NARIAD_DATE_NAR ON MASTER.KLS_NARIAD
(DATE_NAR)
TABLESPACE USERSINDX;


--
-- NARIAD_DATE_NUM_DOVER  (Index) 
--
CREATE UNIQUE INDEX MASTER.NARIAD_DATE_NUM_DOVER ON MASTER.KLS_NARIAD
(DATE_NAR, NUM_NAR, DOVER_ID)
TABLESPACE USERSINDX;


--
-- NARIAD_DOVER_FK_I  (Index) 
--
CREATE INDEX MASTER.NARIAD_DOVER_FK_I ON MASTER.KLS_NARIAD
(DOVER_ID)
TABLESPACE USERSINDX;


--
-- NARIAD_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.NARIAD_MESTO_FK_I ON MASTER.KLS_NARIAD
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- NARIAD_NUM_NAR  (Index) 
--
CREATE INDEX MASTER.NARIAD_NUM_NAR ON MASTER.KLS_NARIAD
(NUM_NAR)
TABLESPACE USERSINDX;


--
-- NARIAD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NARIAD_PK ON MASTER.KLS_NARIAD
(ID)
TABLESPACE USERSINDX;


--
-- NAR_LINE_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.NAR_LINE_MONTH_FK_I ON MASTER.KLS_NAR_LINE
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- NAR_LINE_NARIAD_FK_I  (Index) 
--
CREATE INDEX MASTER.NAR_LINE_NARIAD_FK_I ON MASTER.KLS_NAR_LINE
(NARIAD_ID)
TABLESPACE USERSINDX;


--
-- NAR_LINE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NAR_LINE_PK ON MASTER.KLS_NAR_LINE
(ID)
TABLESPACE USERSINDX;


--
-- NAZN_OTG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NAZN_OTG_PK ON MASTER.KLS_NAZN_OTG
(ID)
TABLESPACE USERSINDX;


--
-- NOM_DOK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NOM_DOK ON MASTER.KTU_2_NPO_SF
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_BEGIN_DATE  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_KTU_BEGIN_DATE ON MASTER.NPR_PRICES_KTU
(BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_KTU_CAT_CEN_FK_I ON MASTER.NPR_PRICES_KTU
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_END_DATE  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_KTU_END_DATE ON MASTER.NPR_PRICES_KTU
(END_DATE)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_IS_ORIGINAL  (Index) 
--
CREATE BITMAP INDEX MASTER.NPR_PRICES_KTU_IS_ORIGINAL ON MASTER.NPR_PRICES_KTU
(IS_ORIGINAL)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_OWNERSHIP_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_KTU_OWNERSHIP_FK_I ON MASTER.NPR_PRICES_KTU
(OWNERSHIP_ID)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NPR_PRICES_KTU_PK ON MASTER.NPR_PRICES_KTU
(ID)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_KTU_PROD_FK_I ON MASTER.NPR_PRICES_KTU
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_KTU_SUPPLIER_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_KTU_SUPPLIER_FK_I ON MASTER.NPR_PRICES_KTU
(SUPPLIER_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_CLASS_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_CLASS_FK_I ON MASTER.OBOROT_KONS
(PREDPR_CLASS_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_FILIAL_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_FILIAL_FK_I ON MASTER.OBOROT_KONS
(FILIAL_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_KONS_DATE_OPER_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_KONS_DATE_OPER_I ON MASTER.OBOROT_KONS
(DATE_OPER)
TABLESPACE USERSINDX;


--
-- OBOROT_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_LOAD_TYPE_FK_I ON MASTER.OBOROT_KONS
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_ORG_POLUCH_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_ORG_POLUCH_FK_I ON MASTER.OBOROT_KONS
(ORG_POLUCH_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_ORG_STRU_FK_I ON MASTER.OBOROT_KONS
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_OTGR_POST_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_OTGR_POST_FK_I ON MASTER.OBOROT_KONS
(OTGR_POST_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OBOROT_PK ON MASTER.OBOROT_KONS
(FILIAL_ID, ID_OPER)
TABLESPACE USERSINDX;


--
-- OBOROT_PREDPRKONS_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_PREDPRKONS_FK_I ON MASTER.OBOROT_KONS
(PREDPR_KONS_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_PROD_KONS_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_PROD_KONS_FK_I ON MASTER.OBOROT_KONS
(PROD_KONS_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_REGION_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_REGION_FK_I ON MASTER.OBOROT_KONS
(REGION_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_ST_PRIH_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_ST_PRIH_FK_I ON MASTER.OBOROT_KONS
(ST_PRIH_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_ST_RASH_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_ST_RASH_FK_I ON MASTER.OBOROT_KONS
(ST_RASH_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_TIP_OP_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_TIP_OP_FK_I ON MASTER.OBOROT_KONS
(TIP_OP_ID, DATE_OPER)
TABLESPACE USERSINDX;


--
-- OBOROT_TIP_REAL_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_TIP_REAL_FK_I ON MASTER.OBOROT_KONS
(TIP_REAL_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_VID_POST_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_VID_POST_FK_I ON MASTER.OBOROT_KONS
(VID_POST_ID)
TABLESPACE USERSINDX;


--
-- OBOROT_VID_REAL_FK_I  (Index) 
--
CREATE INDEX MASTER.OBOROT_VID_REAL_FK_I ON MASTER.OBOROT_KONS
(VID_REAL_ID)
TABLESPACE USERSINDX;


--
-- OIL_GRAFIK_MAIN  (Index) 
--
CREATE INDEX MASTER.OIL_GRAFIK_MAIN ON MASTER.OIL_GRAFIK
(DATAGRAF, PROD)
TABLESPACE USERSINDX;


--
-- OIL_GRAFIK_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_GRAFIK_PK ON MASTER.OIL_GRAFIK
(KOD)
TABLESPACE USERSINDX;


--
-- OIL_MESTOR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_MESTOR_PK ON MASTER.OIL_MESTOR
(KOD)
TABLESPACE USERSINDX;


--
-- OIL_PPRIEMA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_PPRIEMA_PK ON MASTER.OIL_PPRIEMA
(KOD)
TABLESPACE USERSINDX;


--
-- OIL_QUALITY_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_QUALITY_PK ON MASTER.OIL_QUALITY
(OIL_QUALITY_ID)
TABLESPACE USERSINDX;


--
-- OIL_TRACE_MAIN  (Index) 
--
CREATE INDEX MASTER.OIL_TRACE_MAIN ON MASTER.OIL_TRACE
(DATAPOR, NOMER)
TABLESPACE USERSINDX;


--
-- OIL_TRACE_OTHER  (Index) 
--
CREATE INDEX MASTER.OIL_TRACE_OTHER ON MASTER.OIL_TRACE
(SOBSTV, POSTAVSH, PRODUKT, MESTOR, PRIEM, 
SDACHA, PERERAB)
TABLESPACE USERSINDX;


--
-- OIL_TRACE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_TRACE_PK ON MASTER.OIL_TRACE
(KOD)
TABLESPACE USERSINDX;


--
-- OPL_DATA_POR  (Index) 
--
CREATE INDEX MASTER.OPL_DATA_POR ON MASTER.OPL
(DATA_POR)
TABLESPACE USERSINDX;


--
-- OPL_DATA_POST  (Index) 
--
CREATE INDEX MASTER.OPL_DATA_POST ON MASTER.OPL
(DATA_POST)
TABLESPACE USERSINDX;


--
-- OPL_DOG_ID  (Index) 
--
CREATE INDEX MASTER.OPL_DOG_ID ON MASTER.OPL
(DOG_ID)
TABLESPACE USERSINDX;


--
-- OPL_NOM_DOG  (Index) 
--
CREATE INDEX MASTER.OPL_NOM_DOG ON MASTER.OPL
(NOM_DOG)
TABLESPACE USERSINDX;


--
-- OPL_NOM_DOK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OPL_NOM_DOK ON MASTER.OPL
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- ORG_KIND_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ORG_KIND_PK ON MASTER.KLS_ORG_KIND
(ID)
TABLESPACE USERSINDX;


--
-- ORG_LINKS_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ORG_LINKS_UK ON MASTER.ORG_LINKS
(ORG_STRU_1_ID, ORG_STRU_2_ID)
TABLESPACE USERSINDX;


--
-- ORG_TYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ORG_TYPE_PK ON MASTER.KLS_ORG_TYPE
(ID)
TABLESPACE USERSINDX;


--
-- OSTAT_FILIAL_FK_I  (Index) 
--
CREATE INDEX MASTER.OSTAT_FILIAL_FK_I ON MASTER.OSTAT_KONS
(FILIAL_ID)
TABLESPACE USERSINDX;


--
-- OSTAT_KONS_DATE_OST_I  (Index) 
--
CREATE INDEX MASTER.OSTAT_KONS_DATE_OST_I ON MASTER.OSTAT_KONS
(DATE_OST)
TABLESPACE USERSINDX;


--
-- OSTAT_NPZ_MAIN  (Index) 
--
CREATE INDEX MASTER.OSTAT_NPZ_MAIN ON MASTER.OSTAT_NPZ
(NPZ_DATE, ID_PROD_NPR, SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- OSTAT_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.OSTAT_ORG_STRU_FK_I ON MASTER.OSTAT_KONS
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- OSTAT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OSTAT_PK ON MASTER.OSTAT_KONS
(FILIAL_ID, ID_OST)
TABLESPACE USERSINDX;


--
-- OSTAT_PREDPRKONS_FK_I  (Index) 
--
CREATE INDEX MASTER.OSTAT_PREDPRKONS_FK_I ON MASTER.OSTAT_KONS
(PREDPR_KONS_ID)
TABLESPACE USERSINDX;


--
-- OSTAT_PROD_KONS_FK_I  (Index) 
--
CREATE INDEX MASTER.OSTAT_PROD_KONS_FK_I ON MASTER.OSTAT_KONS
(PROD_KONS_ID)
TABLESPACE USERSINDX;


--
-- OTGR_POST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OTGR_POST_PK ON MASTER.KLS_OTGR_POST_KONS
(ID)
TABLESPACE USERSINDX;


--
-- OWNERSHIP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OWNERSHIP_PK ON MASTER.KLS_OWNERSHIP
(ID)
TABLESPACE USERSINDX;


--
-- PAR_STORE_LINK_ORG_STRU_I  (Index) 
--
CREATE INDEX MASTER.PAR_STORE_LINK_ORG_STRU_I ON MASTER.PARUS_STORE_ORG_STRU_LINK
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- PARUS_FIN_I_KVIT_ID_TASK_SUBTA  (Index) 
--
CREATE INDEX MASTER.PARUS_FIN_I_KVIT_ID_TASK_SUBTA ON MASTER.PARUS_FIN
(KVIT_ID, TASK, SUBTASK)
TABLESPACE USERSINDX;


--
-- PARUS_FIN_I_MONTH_ID_TASK  (Index) 
--
CREATE INDEX MASTER.PARUS_FIN_I_MONTH_ID_TASK ON MASTER.PARUS_FIN
(MONTH_ID, TASK)
TABLESPACE USERSINDX;


--
-- PARUS_NOMEN_PROD_LINK_NOMEN_FK  (Index) 
--
CREATE INDEX MASTER.PARUS_NOMEN_PROD_LINK_NOMEN_FK ON MASTER.PARUS_NOMEN_PROD_LINK
(NOMEN_RN)
TABLESPACE USERSINDX;


--
-- PARUS_NOMEN_PROD_LINK_PROD_FK  (Index) 
--
CREATE INDEX MASTER.PARUS_NOMEN_PROD_LINK_PROD_FK ON MASTER.PARUS_NOMEN_PROD_LINK
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PARUS_STORE_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PARUS_STORE_UK ON MASTER.PARUS_STORE_ORG_STRU_LINK
(STORE_RN)
TABLESPACE USERSINDX;


--
-- PASP_DATEUPLOAD  (Index) 
--
CREATE INDEX MASTER.PASP_DATEUPLOAD ON MASTER.KLS_PASP
(DATEUPLOAD)
TABLESPACE USERSINDX;


--
-- PASP_DATE_VIR_I  (Index) 
--
CREATE INDEX MASTER.PASP_DATE_VIR_I ON MASTER.KLS_PASP
(DATE_VIR)
TABLESPACE USERSINDX;


--
-- PASP_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.PASP_MESTO_FK_I ON MASTER.KLS_PASP
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- PASP_PASP_DATE  (Index) 
--
CREATE INDEX MASTER.PASP_PASP_DATE ON MASTER.KLS_PASP
(PASP_DATE)
TABLESPACE USERSINDX;


--
-- PASP_PASP_NUM  (Index) 
--
CREATE INDEX MASTER.PASP_PASP_NUM ON MASTER.KLS_PASP
(PASP_NUM)
TABLESPACE USERSINDX;


--
-- PASP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PASP_PK ON MASTER.KLS_PASP
(ID)
TABLESPACE USERSINDX;


--
-- PASP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PASP_PROD_FK_I ON MASTER.KLS_PASP
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PASP_REZ_NUM  (Index) 
--
CREATE INDEX MASTER.PASP_REZ_NUM ON MASTER.KLS_PASP
(REZ_NUM)
TABLESPACE USERSINDX;


--
-- PAYDELAY_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PAYDELAY_PK ON MASTER.KLS_PAYDELAY
(ID)
TABLESPACE USERSINDX;


--
-- PAYFORM_GR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PAYFORM_GR_PK ON MASTER.KLS_PAYFORM_GRP
(ID)
TABLESPACE USERSINDX;


--
-- PERTYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PERTYPE_PK ON MASTER.KLS_PERTYPE
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_FROM_PARUS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_FROM_PARUS ON MASTER.AZC_FROM_PARUS
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_OPERATION_TMP  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_OPERATION_TMP ON MASTER.AZC_OPERATION_TMP
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_OPER_FIELDS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_OPER_FIELDS ON MASTER.AZC_OPER_FIELDS
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_OPER_MAIN  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_OPER_MAIN ON MASTER.AZC_OPER_MAIN
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_OPER_PAGE  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_OPER_PAGE ON MASTER.AZC_OPER_PAGE
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_SYS_FIELDS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_SYS_FIELDS ON MASTER.AZC_SYS_FIELDS
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_SYS_PAGE  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_SYS_PAGE ON MASTER.AZC_SYS_PAGE
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_WEEK_PARUS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_WEEK_PARUS ON MASTER.AZC_WEEK_PARUS
(ID)
TABLESPACE USERSINDX;


--
-- PK_BILLS_PRIMARY  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_BILLS_PRIMARY ON MASTER.BILLS_PRIMARY
(ID)
TABLESPACE USERSINDX;


--
-- PK_DISP_AZS_MANUAL  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_DISP_AZS_MANUAL ON MASTER.DISP_AZS_MANUAL
(ID)
TABLESPACE USERSINDX;


--
-- PK_DOC_STREAM  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_DOC_STREAM ON MASTER.DOC_STREAM
(ID)
TABLESPACE USERSINDX;


--
-- PK_FORMULA  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_FORMULA ON MASTER.FORMULA
(ID)
TABLESPACE USERSINDX;


--
-- PK_GD_TIME  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_GD_TIME ON MASTER.GD_TIME
(MESTO_ID, NUM_OTGR, DATE_OTGR)
TABLESPACE USERSINDX;


--
-- PK_ID  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_ID ON MASTER.KLS_ZAKAZ_TIP_CORP
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_BILLS_ALGORTHMS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_BILLS_ALGORTHMS ON MASTER.KLS_BILLS_ALGORTHMS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_CIST_VZLIV  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_CIST_VZLIV ON MASTER.KLS_VAGON_VZLIV
(KALIBR_ID, VZLIV)
TABLESPACE USERSINDX;


--
-- PK_KLS_COUNTER  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_COUNTER ON MASTER.KLS_COUNTER
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_DATES  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DATES ON MASTER.KLS_DATES
(VALUE)
TABLESPACE USERSINDX;


--
-- PK_KLS_DEFI_MASS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DEFI_MASS ON MASTER.KLS_DEFI_MASS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_DIAGRAM_KIND  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DIAGRAM_KIND ON MASTER.KLS_DIAGRAM_KIND
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_DIAGRAM_TYPE  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DIAGRAM_TYPE ON MASTER.KLS_DIAGRAM_TYPE
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_DOC_RULES  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DOC_RULES ON MASTER.KLS_DOC_RULES
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_DOC_TYPES  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DOC_TYPES ON MASTER.KLS_DOC_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_FORMSHAB  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_FORMSHAB ON MASTER.KLS_FORMSHAB
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_GOST  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_GOST ON MASTER.KLS_GOST
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_GOST_OLD  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_GOST_OLD ON MASTER.KLS_GOST_OLD
(PL1, PL2)
TABLESPACE USERSINDX;


--
-- PK_KLS_INCOTERM  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_INCOTERM ON MASTER.KLS_INCOTERM
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_ISKL_TAR  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_ISKL_TAR ON MASTER.KLS_ISKL_TAR
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_KODIF_PASP_UNP  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_KODIF_PASP_UNP ON MASTER.KLS_KODIF_PASP_UNP
(KOD_POKAZATEL)
TABLESPACE USERSINDX;


--
-- PK_KLS_MONTH_REESTR_PRIORITY  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_MONTH_REESTR_PRIORITY ON MASTER.KLS_PRIORITY_MONTH_REESTR
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_NAPR_POST  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_NAPR_POST ON MASTER.KLS_NAPR_POST
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PASP_INSP  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PASP_INSP ON MASTER.KLS_PASP_INSP
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PAYMENTS_DEST  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PAYMENTS_DEST ON MASTER.KLS_BILL_POS_TYPE
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PREDPR_CLASS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PREDPR_CLASS ON MASTER.KLS_PREDPR_CLASS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_AKCIZ  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_AKCIZ ON MASTER.KLS_PROD_AKCIZ
(FROM_DATE, TO_DATE, PROD_GROUPS_ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_GROUPS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_GROUPS ON MASTER.KLS_PROD_GROUPS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_GROUPS_DESC  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_GROUPS_DESC ON MASTER.KLS_PROD_GROUPS_DESC
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_GR2GR_DESC  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_GR2GR_DESC ON MASTER.KLS_PROD_GR2GR_DESC
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_KONS_GROUPS_DESC  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_KONS_GROUPS_DESC ON MASTER.KLS_PROD_KONS_GROUPS_DESC
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_PASP_UNP  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_PASP_UNP ON MASTER.KLS_PROD_PASP_UNP
(KOD_OIL_PRODUCT)
TABLESPACE USERSINDX;


--
-- PK_KLS_PROD_TYPE_GRP  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PROD_TYPE_GRP ON MASTER.KLS_PROD_TYPE_GRP
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_RIGHTS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_RIGHTS ON MASTER.KLS_RIGHTS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_RS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_RS ON MASTER.KLS_RS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_STATUS_MONTH_REESTR  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_STATUS_MONTH_REESTR ON MASTER.KLS_STATUS_MONTH_REESTR
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_STATUS_ZAKAZ  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_STATUS_ZAKAZ ON MASTER.KLS_STATUS_ZAKAZ
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_TYPE_ZAKAZ  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_TYPE_ZAKAZ ON MASTER.KLS_TYPE_ZAKAZ
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_VAG_STATUS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_VAG_STATUS ON MASTER.KLS_VAG_STATUS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_VZISKTXT  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_VZISKTXT ON MASTER.KLS_VZISKTXT
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_ZPU_TYPES  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_ZPU_TYPES ON MASTER.KLS_ZPU_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- PK_KTU_2_NPO_PREF_KVIT  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KTU_2_NPO_PREF_KVIT ON MASTER.KTU_2_NPO_PREF_KVIT
(PREF_NAME)
TABLESPACE USERSINDX;


--
-- PK_KTU_2_NPO_PREF_SVED  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KTU_2_NPO_PREF_SVED ON MASTER.KTU_2_NPO_PREF_SVED
(PREF_NAME)
TABLESPACE USERSINDX;


--
-- PK_KVIT_DATE_VIR  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KVIT_DATE_VIR ON MASTER.KVIT_DATE_VIR
(ID)
TABLESPACE USERSINDX;


--
-- PK_MAP_REGIONS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MAP_REGIONS ON MASTER.MAP_REGIONS
(ID)
TABLESPACE USERSINDX;


--
-- PK_MASTER_KLS_STRUCTURE  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MASTER_KLS_STRUCTURE ON MASTER.MASTER_KLS_STRUCTURE
(ID)
TABLESPACE USERSINDX;


--
-- PK_MASTER_QUERY_TYPES  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MASTER_QUERY_TYPES ON MASTER.MASTER_QUERY_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- PK_MASTER_QUERY_TYPES_DESC  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MASTER_QUERY_TYPES_DESC ON MASTER.MASTER_QUERY_TYPES_DESC
(ID)
TABLESPACE USERSINDX;


--
-- PK_MONTH_OILSPACE  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MONTH_OILSPACE ON MASTER.MONTH_OILSPACE
(LUKOIL_ID)
TABLESPACE USERSINDX;


--
-- PK_MONTH_REESTR  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MONTH_REESTR ON MASTER.MONTH_REESTR
(ID)
TABLESPACE USERSINDX;


--
-- PK_MONTH_REESTR_POS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_MONTH_REESTR_POS ON MASTER.MONTH_REESTR_POS
(MONTH_REESTR_ID, NOM_ZD)
TABLESPACE USERSINDX;


--
-- PK_PARUS_NOMEN_PROD_LINK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PARUS_NOMEN_PROD_LINK ON MASTER.PARUS_NOMEN_PROD_LINK
(ID)
TABLESPACE USERSINDX;


--
-- PK_PARUS_PREDPR_LINK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PARUS_PREDPR_LINK ON MASTER.LINK_PARUS_PREDPR
(ID)
TABLESPACE USERSINDX;


--
-- PK_PARUS_STORE_ORG_STRU_LINK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PARUS_STORE_ORG_STRU_LINK ON MASTER.PARUS_STORE_ORG_STRU_LINK
(ID)
TABLESPACE USERSINDX;


--
-- PK_REPORT_GROUPS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_REPORT_GROUPS ON MASTER.REPORT_GROUPS
(ID)
TABLESPACE USERSINDX;


--
-- PK_REPORTS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_REPORTS ON MASTER.REPORTS
(ID)
TABLESPACE USERSINDX;


--
-- PK_REPORTS_PARAM  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_REPORTS_PARAM ON MASTER.REPORTS_PARAM
(ID)
TABLESPACE USERSINDX;


--
-- PK_REPORTS_REALIZ  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_REPORTS_REALIZ ON MASTER.REPORTS_REALIZ
(ID)
TABLESPACE USERSINDX;


--
-- PK_R3_CAT_CEN  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_R3_CAT_CEN ON MASTER.R3_CAT_CEN
(ID)
TABLESPACE USERSINDX;


--
-- PK_SAIO_CHECK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_SAIO_CHECK ON MASTER.SAIO_CHECK
(OUTPUTFILE)
TABLESPACE USERSINDX;


--
-- PK_SVED_OIL  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_SVED_OIL ON MASTER.SVED_IN
(ID)
TABLESPACE USERSINDX;


--
-- PK_TEMP_PAYMENTS_PROD  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_TEMP_PAYMENTS_PROD ON MASTER.TEMP_PAYMENTS_PROD
(OSUSER_NAME, TERMINAL_NAME, PAYMENTS_ID, PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PK_TEMP_REESTR_PARAMS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_TEMP_REESTR_PARAMS ON MASTER.TEMP_REESTR_PARAMS
(TERMINAL_NAME, OSUSER_NAME)
TABLESPACE USERSINDX;


--
-- PK_TEMPVARI  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_TEMPVARI ON MASTER.TEMPVARI
(ID)
TABLESPACE USERSINDX;


--
-- PK_TPARTNER  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_TPARTNER ON MASTER.KSSS_PARTNERS
(CONTRAGENT_ID)
TABLESPACE USERSINDX;


--
-- PK_UVED  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_UVED ON MASTER.UVED
(ID)
TABLESPACE USERSINDX;


--
-- PK_V_TEMP_PAYMENTS_TO_BILLS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_V_TEMP_PAYMENTS_TO_BILLS ON MASTER.TEMP_PAYMENTS_TO_BILLS
(OSUSER_NAME, TERMINAL_NAME, PAYMENTS_ID, NOM_DOK)
TABLESPACE USERSINDX;


--
-- PLACE_SEND_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLACE_SEND_PK ON MASTER.AZC_PLACE_SEND
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_BEG_OST_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_BEG_OST_I ON MASTER.PLAN_FACT
(DATE_BEG_OST, TIME_BEG_OST)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_DATE_EMPTY_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_DATE_EMPTY_I ON MASTER.PLAN_FACT
(DATE_EMPTY_VOL, TIME_EMPTY_VOL)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_DATE_FACT_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_DATE_FACT_I ON MASTER.PLAN_FACT
(DATE_FACT, TIME_FACT)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_DATE_OST_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_DATE_OST_I ON MASTER.PLAN_FACT
(DATE_OST, TIME_OST)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_DATE_PLAN_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_DATE_PLAN_I ON MASTER.PLAN_FACT
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_DATE_ZAYV_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_DATE_ZAYV_I ON MASTER.PLAN_FACT
(DATE_ZAYV)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_GROUP_ORDER_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_GROUP_ORDER_I ON MASTER.PLAN_FACT
(GROUP_ORDER)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_OSUSER_NAME_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_OSUSER_NAME_I ON MASTER.PLAN_FACT
(OSUSER_NAME)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_FACT_PK ON MASTER.PLAN_FACT
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_PLANSTRU_ORDER_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_PLANSTRU_ORDER_I ON MASTER.PLAN_FACT
(PLANSTRU_ORDER)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_PROD_ID_NPR_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_PROD_ID_NPR_I ON MASTER.PLAN_FACT
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_REAL_FILIAL_ID_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_REAL_FILIAL_ID_I ON MASTER.PLAN_FACT_REALIZ
(FILIAL_ID)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_REALIZ_GROUP_ORDER_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_REALIZ_GROUP_ORDER_I ON MASTER.PLAN_FACT_REALIZ
(GROUP_ORDER)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_REALIZ_OSUSER_NAME_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_REALIZ_OSUSER_NAME_I ON MASTER.PLAN_FACT_REALIZ
(OSUSER_NAME)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_REALIZ_PROD_ID_NPR_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_REALIZ_PROD_ID_NPR_I ON MASTER.PLAN_FACT_REALIZ
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_REALIZ_TIP_ROW_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_REALIZ_TIP_ROW_I ON MASTER.PLAN_FACT_REALIZ
(TIP_ROW)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_REAL_TERM_NAME_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_REAL_TERM_NAME_I ON MASTER.PLAN_FACT_REALIZ
(TERMINAL_NAME)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_TERMINAL_NAME_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_TERMINAL_NAME_I ON MASTER.PLAN_FACT
(TERMINAL_NAME)
TABLESPACE USERSINDX;


--
-- PLAN_FACT_TIP_ROW_I  (Index) 
--
CREATE INDEX MASTER.PLAN_FACT_TIP_ROW_I ON MASTER.PLAN_FACT
(TIP_ROW)
TABLESPACE USERSINDX;


--
-- PLAN_KIND_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_KIND_PK ON MASTER.KLS_PLAN_KIND
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PRICHIN_AK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_POST_PRICHIN_AK ON MASTER.PLAN_POST_PRICHIN
(BEG_DATE, END_DATE, PROD_ID_NPR, PLANSTRU_ID, OWNER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PRICHIN_END_DATE_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_PRICHIN_END_DATE_I ON MASTER.PLAN_POST_PRICHIN
(END_DATE)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PRICHIN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_POST_PRICHIN_PK ON MASTER.PLAN_POST_PRICHIN
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_DATE_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_DATE_I ON MASTER.PLAN_REALIZ
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_ORG_KIND_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_ORG_KIND_FK_I ON MASTER.PLAN_REALIZ
(ORG_KIND_ID)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_ORG_STRU_FK_I ON MASTER.PLAN_REALIZ
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_REAL_PK ON MASTER.PLAN_REALIZ
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_PREDPR_FK_I ON MASTER.PLAN_REALIZ
(SUPPLIER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_PROD_FK_I ON MASTER.PLAN_REALIZ
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_TIP_REAL_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_TIP_REAL_FK_I ON MASTER.PLAN_REALIZ
(TIP_REAL_ID)
TABLESPACE USERSINDX;


--
-- PLAN_REAL_VID_REAL_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_REAL_VID_REAL_FK_I ON MASTER.PLAN_REALIZ
(VID_REAL_ID)
TABLESPACE USERSINDX;


--
-- PLAN_REF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_REF_PK ON MASTER.PLAN_REFINERY
(KOD)
TABLESPACE USERSINDX;


--
-- PLANSTRU_BEGIN_DATE_I  (Index) 
--
CREATE INDEX MASTER.PLANSTRU_BEGIN_DATE_I ON MASTER.KLS_PLANSTRU
(BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- PLANSTRU_END_DATE_I  (Index) 
--
CREATE INDEX MASTER.PLANSTRU_END_DATE_I ON MASTER.KLS_PLANSTRU
(END_DATE)
TABLESPACE USERSINDX;


--
-- PLANSTRU_INPUT_DATE_I  (Index) 
--
CREATE INDEX MASTER.PLANSTRU_INPUT_DATE_I ON MASTER.KLS_PLANSTRU
(INPUT_DATE)
TABLESPACE USERSINDX;


--
-- PLANSTRU_NAZN_OTG_FK_I  (Index) 
--
CREATE INDEX MASTER.PLANSTRU_NAZN_OTG_FK_I ON MASTER.KLS_PLANSTRU
(NAZN_OTG_ID)
TABLESPACE USERSINDX;


--
-- PLANSTRU_PARENT_FK_I  (Index) 
--
CREATE INDEX MASTER.PLANSTRU_PARENT_FK_I ON MASTER.KLS_PLANSTRU
(PARENT_ID)
TABLESPACE USERSINDX;


--
-- PLANSTRU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLANSTRU_PK ON MASTER.KLS_PLANSTRU
(ID)
TABLESPACE USERSINDX;


--
-- PLANSTRU_PLANSTRU_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLANSTRU_PLANSTRU_AK_UK ON MASTER.KLS_PLANSTRU
(LEVEL_POS, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
KOD_GRP, KOD_PGR)
TABLESPACE USERSINDX;


--
-- PLAN2DOG_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN2DOG_DOG_FK_I ON MASTER.JKCOMMIT_PLAN2DOG
(DOG_ID)
TABLESPACE USERSINDX;


--
-- PLAN2DOG_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN2DOG_PLANSTRU_FK_I ON MASTER.JKCOMMIT_PLAN2DOG
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN2DOG_PLAN2DOG_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN2DOG_PLAN2DOG_UK ON MASTER.JKCOMMIT_PLAN2DOG
(DOG_ID, PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_AKCIZ_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PREDPR_AKCIZ_UK ON MASTER.KLS_PREDPR_AKCIZ
(PLAT_ID, PROD_GROUPS_ID, DATE_BEG, EX_SVID, IS_OPT, 
IS_ROZN)
TABLESPACE USERSINDX;


--
-- PROD_GR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_GR_PK ON MASTER.KLS_PROD_GR_KONS
(ID_GR)
TABLESPACE USERSINDX;


--
-- PROD_NAR_ORDER_NPR  (Index) 
--
CREATE INDEX MASTER.PROD_NAR_ORDER_NPR ON MASTER.KLS_PROD_NAR
(ORDER_NPR)
TABLESPACE USERSINDX;


--
-- PROD_NAR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_NAR_PK ON MASTER.KLS_PROD_NAR
(ID)
TABLESPACE USERSINDX;


--
-- PROD_NOMEN_IS_ACTUAL_I  (Index) 
--
CREATE INDEX MASTER.PROD_NOMEN_IS_ACTUAL_I ON MASTER.KLS_PROD_NOMENKLATOR
(IS_ACTUAL)
TABLESPACE USERSINDX;


--
-- PROD_NOMEN_MODIF_I  (Index) 
--
CREATE INDEX MASTER.PROD_NOMEN_MODIF_I ON MASTER.KLS_PROD_NOMENKLATOR
(MODIF)
TABLESPACE USERSINDX;


--
-- PROD_NOMEN_MOD_MODIF_I  (Index) 
--
CREATE INDEX MASTER.PROD_NOMEN_MOD_MODIF_I ON MASTER.KLS_PROD_NOMENKLATOR
(MOD_MODIF)
TABLESPACE USERSINDX;


--
-- PROD_NOMEN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_NOMEN_PK ON MASTER.KLS_PROD_NOMENKLATOR
(PARUS_RN, PARUS_PRN)
TABLESPACE USERSINDX;


--
-- PROD_NOMEN_PROD_I  (Index) 
--
CREATE INDEX MASTER.PROD_NOMEN_PROD_I ON MASTER.KLS_PROD_NOMENKLATOR
(PROD)
TABLESPACE USERSINDX;


--
-- PROD_PLAN_ORDER_NPR  (Index) 
--
CREATE INDEX MASTER.PROD_PLAN_ORDER_NPR ON MASTER.KLS_PROD_PLAN
(ORDER_NPR)
TABLESPACE USERSINDX;


--
-- PROD_PLAN_PARENT_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_PLAN_PARENT_FK_I ON MASTER.KLS_PROD_PLAN
(PARENT_ID)
TABLESPACE USERSINDX;


--
-- PROD_PLAN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_PLAN_PK ON MASTER.KLS_PROD_PLAN
(ID)
TABLESPACE USERSINDX;


--
-- PROD_RAZMET_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_RAZMET_PK ON MASTER.KLS_PROD_RAZMET
(RAZMET)
TABLESPACE USERSINDX;


--
-- PROGRAM_USERS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROGRAM_USERS_PK ON MASTER.PROGRAM_USERS
(ORGANIZATION, APPLICATION, FIO)
TABLESPACE USERS;


--
-- RAZNAR_DATE_RAZN_I  (Index) 
--
CREATE INDEX MASTER.RAZNAR_DATE_RAZN_I ON MASTER.RAZNAR
(DATE_RAZN)
TABLESPACE USERSINDX;


--
-- RAZNAR_MESTO_ID_I  (Index) 
--
CREATE INDEX MASTER.RAZNAR_MESTO_ID_I ON MASTER.RAZNAR
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- RAZNAR_NOM_ZD_I  (Index) 
--
CREATE INDEX MASTER.RAZNAR_NOM_ZD_I ON MASTER.RAZNAR
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- RAZNAR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.RAZNAR_PK ON MASTER.RAZNAR
(ID)
TABLESPACE USERSINDX;


--
-- R_CHK_M_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_CHK_M_PK ON MASTER.REPL_CHECK_MODES
(ID)
TABLESPACE USERSINDX;


--
-- R_DEPENC_REPL_PARENT_FK_I  (Index) 
--
CREATE INDEX MASTER.R_DEPENC_REPL_PARENT_FK_I ON MASTER.REPL_DEPENDENCE
(REPL_PARENT)
TABLESPACE USERSINDX;


--
-- R_DEPEND_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_DEPEND_PK ON MASTER.REPL_DEPENDENCE
(ID)
TABLESPACE USERSINDX;


--
-- R_DEPEND_REPL_CHILD_FK_I  (Index) 
--
CREATE INDEX MASTER.R_DEPEND_REPL_CHILD_FK_I ON MASTER.REPL_DEPENDENCE
(REPL_CHILD)
TABLESPACE USERSINDX;


--
-- R_DSNTYP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_DSNTYP_PK ON MASTER.REPL_DSN_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- REAL_OPL_DATA_BUXG  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_DATA_BUXG ON MASTER.REAL_OPL
(DATA_BUXG)
TABLESPACE USERSINDX;


--
-- REAL_OPL_ID  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_ID ON MASTER.REAL_OPL
(ID)
TABLESPACE USERSINDX;


--
-- REAL_OPL_KTU_DATA_BUXG  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_KTU_DATA_BUXG ON MASTER.REAL_OPL_KTU
(DATA_BUXG)
TABLESPACE USERSINDX;


--
-- REAL_OPL_KTU_ID  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_KTU_ID ON MASTER.REAL_OPL_KTU
(ID)
TABLESPACE USERSINDX;


--
-- REAL_OPL_KTU_NOM_DOK  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_KTU_NOM_DOK ON MASTER.REAL_OPL_KTU
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- REAL_OPL_KTU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REAL_OPL_KTU_PK ON MASTER.REAL_OPL_KTU
(NOM_DOK, SOBSTV, ID)
TABLESPACE USERSINDX;


--
-- REAL_OPL_KTU_SOBSTV  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_KTU_SOBSTV ON MASTER.REAL_OPL_KTU
(SOBSTV)
TABLESPACE USERSINDX;


--
-- REAL_OPL_KTU_UN_DOK  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_KTU_UN_DOK ON MASTER.REAL_OPL_KTU
(UN_DOK)
TABLESPACE USERSINDX;


--
-- REAL_OPL_NOM_DOK  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_NOM_DOK ON MASTER.REAL_OPL
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- REAL_OPL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REAL_OPL_PK ON MASTER.REAL_OPL
(NOM_DOK, SOBSTV, ID)
TABLESPACE USERSINDX;


--
-- REAL_OPL_SOBSTV  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_SOBSTV ON MASTER.REAL_OPL
(SOBSTV)
TABLESPACE USERSINDX;


--
-- REAL_OPL_UN_DOK  (Index) 
--
CREATE INDEX MASTER.REAL_OPL_UN_DOK ON MASTER.REAL_OPL
(UN_DOK)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_DOP_SF_DOK  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_DOP_SF_DOK ON MASTER.REESTR_RAIL_DOP_SF
(V_DOK, V_PLAY)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_DOP_SF_PER  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_DOP_SF_PER ON MASTER.REESTR_RAIL_DOP_SF
(NOM_PERECH, DAT_PERECH)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_DOP_SF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_RAIL_DOP_SF_PK ON MASTER.REESTR_RAIL_DOP_SF
(REESTR_RAIL_DOP_SF_ID)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_DOP_SF_SF  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_DOP_SF_SF ON MASTER.REESTR_RAIL_DOP_SF
(NOM_SF_GD, DAT_SF)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_D_OTGR  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_D_OTGR ON MASTER.REESTR_RAIL
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_KVIT  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_KVIT ON MASTER.REESTR_RAIL
(NUM_KVIT, DATE_OTGR)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_PER  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_PER ON MASTER.REESTR_RAIL
(NUM_PER, DATA_PER)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_RAIL_PK ON MASTER.REESTR_RAIL
(REESTR_RAIL_ID)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_RGD_SF_DATE_SCH_I  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_RGD_SF_DATE_SCH_I ON MASTER.REESTR_RAIL_RGD_SF
(DATE_SCH)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_RGD_SF_KST  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_RGD_SF_KST ON MASTER.REESTR_RAIL_RGD_SF
(KST, R21)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_RGD_SF_PER  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_RGD_SF_PER ON MASTER.REESTR_RAIL_RGD_SF
(NOM_PERECH, DAT_PERECH)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_RGD_SF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_RAIL_RGD_SF_PK ON MASTER.REESTR_RAIL_RGD_SF
(REESTR_RAIL_RGD_SF_ID)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_RGD_SF_SCH  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_RGD_SF_SCH ON MASTER.REESTR_RAIL_RGD_SF
(NOM_SCH, DATE_SCH)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_SF_PER  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_SF_PER ON MASTER.REESTR_RAIL_SF
(NUM_PER, DATA_PER)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_SF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_RAIL_SF_PK ON MASTER.REESTR_RAIL_SF
(REESTR_RAIL_SF_ID)
TABLESPACE USERSINDX;


--
-- REESTR_RAIL_ZD  (Index) 
--
CREATE INDEX MASTER.REESTR_RAIL_ZD ON MASTER.REESTR_RAIL
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- REPORT_GROUPS_AK1  (Index) 
--
CREATE UNIQUE INDEX MASTER.REPORT_GROUPS_AK1 ON MASTER.REPORT_GROUPS
(REPORT_GROUP)
TABLESPACE USERSINDX;


--
-- REPORT_REALIZ_I1  (Index) 
--
CREATE INDEX MASTER.REPORT_REALIZ_I1 ON MASTER.REPORTS_REALIZ
(IS_CRT, BILL_ID, KVIT_NUM, TOV_SRC)
TABLESPACE USERSINDX;


--
-- REPORTS_NUM_REP_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REPORTS_NUM_REP_UK ON MASTER.REPORTS_NUM_REP
(REP_ID, BEGIN_DATE, END_DATE, IS_CRT)
TABLESPACE USERSINDX;


--
-- REPORTS_REALIZ_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REPORTS_REALIZ_UK ON MASTER.REPORTS_REALIZ
(BEGIN_DATE, END_DATE, IS_CRT, BILL_ID, KVIT_NUM, 
TOV_SRC, TOVAR_ID)
TABLESPACE USERSINDX;


--
-- REP_TYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REP_TYPE_PK ON MASTER.LOAD_FIL_REP_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- R_FILETYP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_FILETYP_PK ON MASTER.REPL_FILE_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- R_FILETYP_R_FILKND_FK_I  (Index) 
--
CREATE INDEX MASTER.R_FILETYP_R_FILKND_FK_I ON MASTER.REPL_FILE_TYPES
(FILE_KIND)
TABLESPACE USERSINDX;


--
-- R_FILKND_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_FILKND_PK ON MASTER.REPL_FILE_KINDS
(ID)
TABLESPACE USERSINDX;


--
-- R_INFO_T_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_INFO_T_PK ON MASTER.REPL_INFO_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- R_KIND_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_KIND_PK ON MASTER.REPL_KINDS
(ID)
TABLESPACE USERSINDX;


--
-- RN_R  (Index) 
--
CREATE UNIQUE INDEX MASTER.RN_R ON MASTER.AZS_R_TMP
(AZS_R, DATE_R, TYPE_R, TRK_R)
TABLESPACE USERSINDX;


--
-- ROLE_SPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ROLE_SPR_PK ON MASTER.KLS_ROLE
(ID)
TABLESPACE USERSINDX;


--
-- ROUTENODES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ROUTENODES_PK ON MASTER.R3_ROUTENODES
(KNOTE)
TABLESPACE USERSINDX;


--
-- ROUTENODES_R3_GD_FK_I  (Index) 
--
CREATE INDEX MASTER.ROUTENODES_R3_GD_FK_I ON MASTER.R3_ROUTENODES
(BAHNR)
TABLESPACE USERSINDX;


--
-- ROUTES_KNANF_FK_I  (Index) 
--
CREATE INDEX MASTER.ROUTES_KNANF_FK_I ON MASTER.R3_ROUTES
(KNANF)
TABLESPACE USERSINDX;


--
-- ROUTES_KNEND_FK_I  (Index) 
--
CREATE INDEX MASTER.ROUTES_KNEND_FK_I ON MASTER.R3_ROUTES
(KNEND)
TABLESPACE USERSINDX;


--
-- ROUTES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ROUTES_PK ON MASTER.R3_ROUTES
(ROUTE)
TABLESPACE USERSINDX;


--
-- ROUTES_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.ROUTES_ZZZZ_DATE_I ON MASTER.R3_ROUTES
(ZZZZ_DATE)
TABLESPACE USERSINDX;


--
-- R_P_TYPE_1_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_P_TYPE_1_PK ON MASTER.REPL_PROC_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- R_SESS_L_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_SESS_L_PK ON MASTER.REPL_SESSION_LOG
(ID)
TABLESPACE USERSINDX;


--
-- R_SESS_L_R_SESS_FK_I  (Index) 
--
CREATE INDEX MASTER.R_SESS_L_R_SESS_FK_I ON MASTER.REPL_SESSION_LOG
(SESSION_ID)
TABLESPACE USERSINDX;


--
-- R_SESS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_SESS_PK ON MASTER.REPL_SESSION
(ID)
TABLESPACE USERSINDX;


--
-- R_S_TYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_S_TYPE_PK ON MASTER.REPL_SITE_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- R_TABLE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_TABLE_PK ON MASTER.REPL_TABLE
(REPL_ID)
TABLESPACE USERSINDX;


--
-- R_TABLE_R_LIST_FK_I  (Index) 
--
CREATE INDEX MASTER.R_TABLE_R_LIST_FK_I ON MASTER.REPL_TABLE
(REPL_LIST)
TABLESPACE USERSINDX;


--
-- R3_BILLS_DATE_VYP_SF_I  (Index) 
--
CREATE INDEX MASTER.R3_BILLS_DATE_VYP_SF_I ON MASTER.R3_BILLS
(DATE_VYP_SF)
TABLESPACE USERSINDX;


--
-- R3_BILLS_MATERIALS_FK_I  (Index) 
--
CREATE INDEX MASTER.R3_BILLS_MATERIALS_FK_I ON MASTER.R3_BILLS
(VBAP_MATNR)
TABLESPACE USERSINDX;


--
-- R3_BILLS_NOM_DOK_I  (Index) 
--
CREATE INDEX MASTER.R3_BILLS_NOM_DOK_I ON MASTER.R3_BILLS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- R3_BILLS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R3_BILLS_PK ON MASTER.R3_BILLS
(VBELN)
TABLESPACE USERSINDX;


--
-- R3_GD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R3_GD_PK ON MASTER.R3_GD
(BAHNR)
TABLESPACE USERSINDX;


--
-- R3_MAT_GRP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R3_MAT_GRP_PK ON MASTER.R3_MATERIALS_GRP
(GROUP_S)
TABLESPACE USERSINDX;


--
-- SOOB_EXP_AK  (Index) 
--
CREATE INDEX MASTER.SOOB_EXP_AK ON MASTER.SOOB_EXP
(REP_DATE, POS_ID)
TABLESPACE USERSINDX;


--
-- SOOB_EXP_AK2  (Index) 
--
CREATE INDEX MASTER.SOOB_EXP_AK2 ON MASTER.SOOB_EXP
(REP_DATE, DOG_ID, PROD_ID_NPR, LOAD_TYPE_ID, EXPED_ID, 
STAN_ID)
TABLESPACE USERSINDX;


--
-- SOOB_EXP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SOOB_EXP_PK ON MASTER.SOOB_EXP
(ID)
TABLESPACE USERSINDX;


--
-- ST_PRIH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ST_PRIH_PK ON MASTER.KLS_ST_PRIH_KONS
(ID)
TABLESPACE USERSINDX;


--
-- ST_RASH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ST_RASH_PK ON MASTER.KLS_ST_RASH_KONS
(ID)
TABLESPACE USERSINDX;


--
-- SVED_IN_MESTO_DATE_I  (Index) 
--
CREATE INDEX MASTER.SVED_IN_MESTO_DATE_I ON MASTER.SVED_IN
(MESTO_ID, SVED_DATE)
TABLESPACE USERSINDX;


--
-- SVED_IN_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SVED_IN_UK ON MASTER.SVED_IN
(MESTO_ID, TRUNC("SVED_DATE",'fmmonth'), SVED_NUM)
TABLESPACE USERSINDX;


--
-- SYS_C0020813  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C0020813 ON MASTER.REESTR_TEMP
(REESTR_TEMP_ID)
TABLESPACE USERSINDX;


--
-- SYS_C003401  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C003401 ON MASTER.AZC_OPER_MAIN
(NAME)
TABLESPACE USERSINDX;


--
-- SYS_C005465  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C005465 ON MASTER.SF_NUMBERS
(FROM_DATE)
TABLESPACE USERSINDX;


--
-- SYS_C005466  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C005466 ON MASTER.SF_NUMBERS
(TO_DATE)
TABLESPACE USERSINDX;


--
-- TABLPOK_DATEUPLOAD  (Index) 
--
CREATE INDEX MASTER.TABLPOK_DATEUPLOAD ON MASTER.KLS_TABLPOK
(DATEUPLOAD)
TABLESPACE USERSINDX;


--
-- TABLPOK_KODIF_FK_I  (Index) 
--
CREATE INDEX MASTER.TABLPOK_KODIF_FK_I ON MASTER.KLS_TABLPOK
(KODIF_ID)
TABLESPACE USERSINDX;


--
-- TABLPOK_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TABLPOK_PK ON MASTER.KLS_TABLPOK
(PROD_ID_NPR, KODIF_ID)
TABLESPACE USERSINDX;


--
-- TEMP_BILL_KVIT_KVIT_ID_I  (Index) 
--
CREATE INDEX MASTER.TEMP_BILL_KVIT_KVIT_ID_I ON MASTER.TEMP_BILL_KVIT
(KVIT_ID)
TABLESPACE USERSINDX;


--
-- TEMPVARI_APP_NAME_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_APP_NAME_I ON MASTER.TEMPVARI
(APP_NAME)
TABLESPACE USERSINDX;


--
-- TEMPVARI_BEGIN_DATE_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_BEGIN_DATE_I ON MASTER.TEMPVARI
(BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- TEMPVARI_END_DATE_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_END_DATE_I ON MASTER.TEMPVARI
(END_DATE)
TABLESPACE USERSINDX;


--
-- TEMPVARI_OSUSER_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_OSUSER_I ON MASTER.TEMPVARI
(OSUSER_NAME)
TABLESPACE USERSINDX;


--
-- TEMPVARI_TERMINAL_NAME_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_TERMINAL_NAME_I ON MASTER.TEMPVARI
(TERMINAL_NAME)
TABLESPACE USERSINDX;


--
-- TEMPVARI_UNIT_NAME_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_UNIT_NAME_I ON MASTER.TEMPVARI
(UNIT_NAME)
TABLESPACE USERSINDX;


--
-- TEMPVARI_VARI_NAME_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_VARI_NAME_I ON MASTER.TEMPVARI
(VARI_NAME)
TABLESPACE USERSINDX;


--
-- TEMPVARI_VARI_TYPE_I  (Index) 
--
CREATE INDEX MASTER.TEMPVARI_VARI_TYPE_I ON MASTER.TEMPVARI
(VARI_TYPE)
TABLESPACE USERSINDX;


--
-- TEST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TEST_PK ON MASTER.TEST
(ID)
TABLESPACE USERSINDX;


--
-- TEST_TEST_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TEST_TEST_AK_UK ON MASTER.TEST
(NAME)
TABLESPACE USERSINDX;


--
-- TIP_AKCIZ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TIP_AKCIZ_PK ON MASTER.KLS_TIP_AKCIZ
(ID)
TABLESPACE USERSINDX;


--
-- TIP_OP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TIP_OP_PK ON MASTER.KLS_TIP_OP_KONS
(ID)
TABLESPACE USERSINDX;


--
-- TIP_PATH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TIP_PATH_PK ON MASTER.KLS_GD_TIP_PATH
(ID)
TABLESPACE USERSINDX;


--
-- TIP_REAL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TIP_REAL_PK ON MASTER.KLS_TIP_REAL_KONS
(ID)
TABLESPACE USERSINDX;


--
-- TO_SS_DATA_BUXG  (Index) 
--
CREATE INDEX MASTER.TO_SS_DATA_BUXG ON MASTER.TO_SS
(DATA_BUXG)
TABLESPACE USERSINDX;


--
-- TO_SS_KOD_NFP  (Index) 
--
CREATE INDEX MASTER.TO_SS_KOD_NFP ON MASTER.TO_SS
(KOD_NFP)
TABLESPACE USERSINDX;


--
-- TO_SS_KOD_SOB  (Index) 
--
CREATE INDEX MASTER.TO_SS_KOD_SOB ON MASTER.TO_SS
(KOD_SOB)
TABLESPACE USERSINDX;


--
-- TO_SS_NOM_ZD  (Index) 
--
CREATE INDEX MASTER.TO_SS_NOM_ZD ON MASTER.TO_SS
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- TO_SS_OLD_NOM  (Index) 
--
CREATE INDEX MASTER.TO_SS_OLD_NOM ON MASTER.TO_SS
(OLD_NOM)
TABLESPACE USERSINDX;


--
-- TO_SS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TO_SS_PK ON MASTER.TO_SS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- TOW_PUT_DATE_OPER_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_DATE_OPER_I ON MASTER.TOW_PUT_KONS
(DATE_OPER)
TABLESPACE USERSINDX;


--
-- TOW_PUT_FILIAL_FK_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_FILIAL_FK_I ON MASTER.TOW_PUT_KONS
(FILIAL_ID)
TABLESPACE USERSINDX;


--
-- TOW_PUT_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_LOAD_TYPE_FK_I ON MASTER.TOW_PUT_KONS
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- TOW_PUT_ORG_POLUCH_FK_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_ORG_POLUCH_FK_I ON MASTER.TOW_PUT_KONS
(ORG_POLUCH_ID)
TABLESPACE USERSINDX;


--
-- TOW_PUT_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_ORG_STRU_FK_I ON MASTER.TOW_PUT_KONS
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- TOW_PUT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TOW_PUT_PK ON MASTER.TOW_PUT_KONS
(FILIAL_ID, ID_OPER)
TABLESPACE USERSINDX;


--
-- TOW_PUT_PREDPRKONS_FK_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_PREDPRKONS_FK_I ON MASTER.TOW_PUT_KONS
(PREDPR_KONS_ID)
TABLESPACE USERSINDX;


--
-- TOW_PUT_PROD_KONS_FK_I  (Index) 
--
CREATE INDEX MASTER.TOW_PUT_PROD_KONS_FK_I ON MASTER.TOW_PUT_KONS
(PROD_KONS_ID)
TABLESPACE USERSINDX;


--
-- T_PARTNER_NAME  (Index) 
--
CREATE INDEX MASTER.T_PARTNER_NAME ON MASTER.KSSS_PARTNERS
(KLS_NAME)
TABLESPACE USERSINDX;


--
-- TPSQL_IDX  (Index) 
--
CREATE UNIQUE INDEX MASTER.TPSQL_IDX ON MASTER.TOAD_PLAN_SQL
(STATEMENT_ID)
TABLESPACE USERS;


--
-- TRATY_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TRATY_PK ON MASTER.R3_TRATY
(VBKD_TRATY)
TABLESPACE USERSINDX;


--
-- T_SNPORDEXP_UPLOAD_PK_KSE  (Index) 
--
CREATE UNIQUE INDEX MASTER.T_SNPORDEXP_UPLOAD_PK_KSE ON MASTER.T_SNPORDEXP_UPLOAD_KSE
(UPLOADID)
TABLESPACE USERS;


--
-- TYPE_OPER_KIND_OPER_I  (Index) 
--
CREATE INDEX MASTER.TYPE_OPER_KIND_OPER_I ON MASTER.AZC_TYPE_OPERATION
(KIND_OPER)
TABLESPACE USERSINDX;


--
-- TYPE_OPER_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TYPE_OPER_PK ON MASTER.AZC_TYPE_OPERATION
(ID)
TABLESPACE USERSINDX;


--
-- UPAK_BAG_ID_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.UPAK_BAG_ID_UK ON MASTER.KLS_UPAK
(BAG_ID)
TABLESPACE USERSINDX;


--
-- UPAK_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.UPAK_PK ON MASTER.KLS_UPAK
(ID)
TABLESPACE USERSINDX;


--
-- USER_RIGHTS_USER  (Index) 
--
CREATE INDEX MASTER.USER_RIGHTS_USER ON MASTER.USER_RIGHTS
(USERNAME)
TABLESPACE USERSINDX;


--
-- USL_OPL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.USL_OPL_PK ON MASTER.KLS_USL_OPL
(ID)
TABLESPACE USERSINDX;


--
-- VAGONTYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VAGONTYPE_PK ON MASTER.KLS_VAGONTYPE
(ID)
TABLESPACE USERSINDX;


--
-- VAGOWN_MOS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VAGOWN_MOS_PK ON MASTER.KLS_VAGOWNER_MOS
(ID)
TABLESPACE USERSINDX;


--
-- VAGOWN_TYP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VAGOWN_TYP_PK ON MASTER.KLS_VAGOWNER_TYPES
(ID)
TABLESPACE USERSINDX;


--
-- VAL_INT_ISCOPYED  (Index) 
--
CREATE INDEX MASTER.VAL_INT_ISCOPYED ON MASTER.VAL_INT
(IS_COPYED)
TABLESPACE USERS;


--
-- VAL_INT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VAL_INT_PK ON MASTER.VAL_INT
(DD_MM_YYYY, SYB_RNK, N_OB, N_GR_INTEGR, MIN_0, 
MIN_1)
TABLESPACE USERS;


--
-- VALPASP_DATEUPLOAD  (Index) 
--
CREATE INDEX MASTER.VALPASP_DATEUPLOAD ON MASTER.KLS_VALPASP
(DATEUPLOAD)
TABLESPACE USERSINDX;


--
-- VALPASP_KODIF_FK_I  (Index) 
--
CREATE INDEX MASTER.VALPASP_KODIF_FK_I ON MASTER.KLS_VALPASP
(KODIF_ID)
TABLESPACE USERSINDX;


--
-- VALPASP_PASP_FK_I  (Index) 
--
CREATE INDEX MASTER.VALPASP_PASP_FK_I ON MASTER.KLS_VALPASP
(PASP_ID)
TABLESPACE USERSINDX;


--
-- VALPASP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VALPASP_PK ON MASTER.KLS_VALPASP
(PASP_ID, KODIF_ID)
TABLESPACE USERSINDX;


--
-- VALSVED_DATEUPLOAD  (Index) 
--
CREATE INDEX MASTER.VALSVED_DATEUPLOAD ON MASTER.KLS_VALSVED
(DATEUPLOAD)
TABLESPACE USERSINDX;


--
-- VALSVED_KODIF_FK_I  (Index) 
--
CREATE INDEX MASTER.VALSVED_KODIF_FK_I ON MASTER.KLS_VALSVED
(KODIF_ID)
TABLESPACE USERSINDX;


--
-- VALSVED_OPDT_I  (Index) 
--
CREATE INDEX MASTER.VALSVED_OPDT_I ON MASTER.KLS_VALSVED
(SVED_FLG_OPERDATA, FROM_DBF, DATEUPLOAD)
TABLESPACE USERSINDX;


--
-- VALSVED_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VALSVED_PK ON MASTER.KLS_VALSVED
(SVED_ID, KODIF_ID, SVED_FLG_OPERDATA)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_SMENA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_OSMOTR_SMENA_PK ON MASTER.VED_OSMOTR_SMENA
(ID)
TABLESPACE USERSINDX;


--
-- VED_OSM_PODPIS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_OSM_PODPIS_PK ON MASTER.VED_OSMOTR_PODPIS
(ID)
TABLESPACE USERSINDX;


--
-- VIDDOG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VIDDOG_PK ON MASTER.KLS_VIDDOG
(ID)
TABLESPACE USERSINDX;


--
-- VID_OTPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VID_OTPR_PK ON MASTER.KLS_GD_VID_OTPR
(ID)
TABLESPACE USERSINDX;


--
-- VID_POST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VID_POST_PK ON MASTER.KLS_VID_POST_KONS
(ID)
TABLESPACE USERSINDX;


--
-- VID_REAL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VID_REAL_PK ON MASTER.KLS_VID_REAL_KONS
(ID)
TABLESPACE USERSINDX;


--
-- VID_USL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VID_USL_PK ON MASTER.KLS_VID_USL
(ID)
TABLESPACE USERSINDX;


--
-- VOZN_RST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VOZN_RST_PK ON MASTER.KLS_VOZN_RST
(ID)
TABLESPACE USERSINDX;


--
-- VOZN_RST_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.VOZN_RST_PROD_FK_I ON MASTER.KLS_VOZN_RST
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- VOZN_RST_PROD_GRP_FK_I  (Index) 
--
CREATE INDEX MASTER.VOZN_RST_PROD_GRP_FK_I ON MASTER.KLS_VOZN_RST
(ID_GROUP_NPR)
TABLESPACE USERSINDX;


--
-- VOZN_RST_VAGOWN_TYP_FK_I  (Index) 
--
CREATE INDEX MASTER.VOZN_RST_VAGOWN_TYP_FK_I ON MASTER.KLS_VOZN_RST
(VAGOWN_TYP_ID)
TABLESPACE USERSINDX;


--
-- VOZVRAT_CISTKVIT_I  (Index) 
--
CREATE INDEX MASTER.VOZVRAT_CISTKVIT_I ON MASTER.VOZVRAT
(NUM_CIST, NUM_KVIT)
TABLESPACE USERSINDX;


--
-- VOZVRAT_DATE_EDIT_I  (Index) 
--
CREATE INDEX MASTER.VOZVRAT_DATE_EDIT_I ON MASTER.VOZVRAT
(DATE_EDIT)
TABLESPACE USERSINDX;


--
-- VOZVRAT_DATE_KVIT_I  (Index) 
--
CREATE INDEX MASTER.VOZVRAT_DATE_KVIT_I ON MASTER.VOZVRAT
(DATE_KVIT, NUM_CIST, NUM_KVIT)
TABLESPACE USERSINDX;


--
-- VOZVRAT_DATE_VOZ_I  (Index) 
--
CREATE INDEX MASTER.VOZVRAT_DATE_VOZ_I ON MASTER.VOZVRAT
(DATE_VOZ)
TABLESPACE USERSINDX;


--
-- VOZVRAT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VOZVRAT_PK ON MASTER.VOZVRAT
(ID)
TABLESPACE USERSINDX;


--
-- VOZVRAT_TEST_CIST  (Index) 
--
CREATE INDEX MASTER.VOZVRAT_TEST_CIST ON MASTER.VOZVRAT_TEST
(NUM_CIST)
TABLESPACE USERSINDX;


--
-- VOZVRAT_TEST_KVIT  (Index) 
--
CREATE INDEX MASTER.VOZVRAT_TEST_KVIT ON MASTER.VOZVRAT_TEST
(NUM_KVIT)
TABLESPACE USERSINDX;


--
-- VSART_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VSART_PK ON MASTER.R3_VSART
(VBKD_VSART)
TABLESPACE USERSINDX;


--
-- VSBED_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VSBED_PK ON MASTER.R3_VSBED
(VBAK_VSBED)
TABLESPACE USERSINDX;


--
-- VSTEL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VSTEL_PK ON MASTER.R3_VSTEL
(VBAP_VSTEL)
TABLESPACE USERSINDX;


--
-- WERK_LGORT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.WERK_LGORT_PK ON MASTER.R3_WERKS_LGORT
(VBAP_WERKS, LGORT)
TABLESPACE USERSINDX;


--
-- XX101_ZKERP_DATA_BILL_I  (Index) 
--
CREATE INDEX MASTER.XX101_ZKERP_DATA_BILL_I ON MASTER.XX101_ZKERP_DATA
(WAYBILLID, WAYBILLROWID)
TABLESPACE USERS;


--
-- XX101_ZRAZNAR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.XX101_ZRAZNAR_PK ON MASTER.XX101_ZRAZNAR
(ORDERNUM)
TABLESPACE USERS;


--
-- XX101_ZVZAV_DATA_ORDERNUM  (Index) 
--
CREATE INDEX MASTER.XX101_ZVZAV_DATA_ORDERNUM ON MASTER.XX101_ZVZAV_DATA
(ORDERNUM)
TABLESPACE USERS;


--
-- XX101_ZVZAV_DATA_PK  (Index) 
--
CREATE INDEX MASTER.XX101_ZVZAV_DATA_PK ON MASTER.XX101_ZVZAV_DATA
(FILENAME, FILEROWNUM)
TABLESPACE USERS;


--
-- ZAKAZ_AGN_PER_BEG_DATE_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_AGN_PER_BEG_DATE_I ON MASTER.ZAKAZ
(IS_AGENT, PERIOD_ID, BEGIN_DATE)
TABLESPACE USERS;


--
-- ZAKAZ_CLIENT_DATE_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_CLIENT_DATE_I ON MASTER.ZAKAZ
(CLIENT_DATE)
TABLESPACE USERSINDX;


--
-- ZAKAZ_DATE_PLAN_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_DATE_PLAN_I ON MASTER.ZAKAZ
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- ZAKAZ_DOG_ID_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_DOG_ID_I ON MASTER.ZAKAZ
(DOG_ID)
TABLESPACE USERSINDX;


--
-- ZAKAZ_GRAFIK_TEMP_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_GRAFIK_TEMP_UK ON MASTER.ZAKAZ_GRAFIK_TEMP
(TERMINAL_NAME, USER_NAME, DATE_LOAD)
TABLESPACE LOADERINDX;


--
-- ZAKAZ_HIST_INPUT_NUMBER_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_HIST_INPUT_NUMBER_I ON MASTER.ZAKAZ_HIST
(INPUT_NUMBER)
TABLESPACE USERSINDX;


--
-- ZAKAZ_HIST_ISU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_HIST_ISU_PK ON MASTER.ZAKAZ_HIST_ISU
(ZAKAZ_HIST_ID)
TABLESPACE USERS;


--
-- ZAKAZ_HIST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_HIST_PK ON MASTER.ZAKAZ_HIST
(ID)
TABLESPACE USERSINDX;


--
-- ZAKAZ_HIST_PRN_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_HIST_PRN_I ON MASTER.ZAKAZ_HIST
(ZAKAZ_ID, STATUS_ZAKAZ_ID, IS_AUTO)
TABLESPACE USERSINDX;


--
-- ZAKAZ_HIST_SA_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_HIST_SA_I ON MASTER.ZAKAZ_HIST
(STATUS_ZAKAZ_ID, IS_AUTO)
TABLESPACE USERSINDX;


--
-- ZAKAZ_INPUT_NUMBER_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_INPUT_NUMBER_I ON MASTER.ZAKAZ
(INPUT_NUMBER)
TABLESPACE USERSINDX;


--
-- ZAKAZ_NOM_ZD_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_NOM_ZD_I ON MASTER.ZAKAZ_HIST
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_AGENT_NAME_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PARUS_AGENT_NAME_I ON MASTER.ZAKAZ_PARUS
(PARUS_AGENT_NAME)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_DATE_PLAN_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PARUS_DATE_PLAN_I ON MASTER.ZAKAZ_PARUS
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_DOGOVOR_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PARUS_DOGOVOR_I ON MASTER.ZAKAZ_PARUS
(PARUS_DOGOVOR)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_INPUT_NUMBER_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PARUS_INPUT_NUMBER_I ON MASTER.ZAKAZ_PARUS
(INPUT_NUMBER)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_MODIF_TAG_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PARUS_MODIF_TAG_I ON MASTER.ZAKAZ_PARUS
(PARUS_MODIF_TAG)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_NEFTEBASA_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PARUS_NEFTEBASA_I ON MASTER.ZAKAZ_PARUS
(NEFTEBASA)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PARUS_RN_I  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_PARUS_RN_I ON MASTER.ZAKAZ_PARUS
(PARUS_RN)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PERIOD_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_PERIOD_I ON MASTER.ZAKAZ
(PERIOD_ID)
TABLESPACE USERSINDX;


--
-- ZAKAZ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_PK ON MASTER.ZAKAZ
(ID)
TABLESPACE USERSINDX;


--
-- ZAKAZ_SNP_LINKS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_SNP_LINKS_PK ON MASTER.ZAKAZ_SNP_LINKS
(DOC301_ID)
TABLESPACE USERS;


--
-- ZAKAZ_TEMP_MASTER_DOG_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_TEMP_MASTER_DOG_I ON MASTER.ZAKAZ_TEMP
(TERMINAL_NAME, USER_NAME, IS_AGENT, KIND_VALUE, DOG_ID)
TABLESPACE LOADERINDX;


--
-- ZAKAZ_TEMP_MASTER_PROD_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_TEMP_MASTER_PROD_I ON MASTER.ZAKAZ_TEMP
(TERMINAL_NAME, USER_NAME, IS_AGENT, KIND_VALUE, FILIAL_ID, 
PROD_ID_NPR, PLAT_ID, DOG_ID)
TABLESPACE LOADERINDX;


--
-- ZAKAZ_TEMP_PARUS_DOG_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_TEMP_PARUS_DOG_I ON MASTER.ZAKAZ_TEMP
(TERMINAL_NAME, USER_NAME, IS_AGENT, KIND_VALUE, PARUS_DOGOVOR)
TABLESPACE LOADERINDX;


--
-- ZAKAZ_TEMP_PARUS_PROD_I  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_TEMP_PARUS_PROD_I ON MASTER.ZAKAZ_TEMP
(TERMINAL_NAME, USER_NAME, IS_AGENT, KIND_VALUE, FILIAL_ID, 
PARUS_NOMEN_TAG, PARUS_AGENT_TAG, PARUS_DOGOVOR)
TABLESPACE LOADERINDX;


--
-- ZAKAZ_UK  (Index) 
--
CREATE INDEX MASTER.ZAKAZ_UK ON MASTER.ZAKAZ
(PLAT_ID, DOG_ID, PROD_ID_NPR, STAN_ID, POLUCH_ID, 
POTREB_ID, POTREB_NAME)
TABLESPACE USERSINDX;


--
-- FOR_CRYSTAL_TEL  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Crystal_Tel AS

TYPE CURSTYPE IS REF CURSOR;

PROCEDURE CR_INSIDENUM(TIP_DATE VARCHAR2, DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  INSIDE_NUM VARCHAR2, CRS IN OUT CURSTYPE);


END;

/

--
-- FOR_INIT  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Init AS
  
--- Инициализация приложения MASTER 
PROCEDURE Init_MASTER;

-- Текущий пользователь
FUNCTION GetCurrUser RETURN VARCHAR2;

-- Текущая машина
FUNCTION GetCurrTerm RETURN VARCHAR2;

-- Текущая машина
FUNCTION GetCurrSessionId RETURN NUMBER;

-- Текущий пользователь приложения
FUNCTION AppUserId RETURN NUMBER;
FUNCTION AppUserName RETURN VARCHAR2;
FUNCTION AppUserPost RETURN VARCHAR2;
FUNCTION AppUserUNP RETURN NUMBER;
FUNCTION AppUserSNP RETURN NUMBER;
FUNCTION AppUserMNOS RETURN NUMBER;

-- Сбор статистики
PROCEDURE UPDATE_STAT;
    
END; 
/

--
-- FOR_PLANFACT_PARUS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Planfact_Parus AS

  -- Очистить таблицу PLAN_FACT
  PROCEDURE EmptyPlanFact;
  
  -- Заполнить план
  PROCEDURE FillPlan (DateBeg VARCHAR2, DateEnd VARCHAR2);
  
  -- Заполнить "Заявлено"
  PROCEDURE FillZayv (DateBeg VARCHAR2, DateEnd VARCHAR2);

  -- Заполнить факт
  PROCEDURE FillFact (DateBeg VARCHAR2, DateEnd VARCHAR2);
  
  -- Заполнение плана/факта по плану перевозок и поставки  
  PROCEDURE FillAll (DateBeg VARCHAR2, DateEnd VARCHAR2);
	 
END;

/

--
-- FOR_SCRIPTS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_SCRIPTS AS

   SG$ERROR CONSTANT NUMBER := -20900;
   SG$ERROR_TXT CONSTANT VARCHAR2(40) := 'Ошибка';
   SG$ROW_EXIST CONSTANT NUMBER := -20901;
   SG$ROW_EXIST_TXT CONSTANT VARCHAR2(40) := 'Данная запись уже есть в таблице';
   SG$PK_CHANGE CONSTANT NUMBER := -20902;
   SG$PK_CHANGE_TXT CONSTANT VARCHAR2(40) := 'Нельзя менять PRIMARY KEY';
   SG$FK_CHANGE CONSTANT NUMBER := -20903;
   SG$FK_CHANGE_TXT CONSTANT VARCHAR2(40) := 'Нельзя менять FOREIGN KEY';
   SG$NO_ROW CONSTANT NUMBER := -20904;
   SG$NO_ROW_TXT CONSTANT VARCHAR2(40) := 'Запись не существует';
   SG$MANY_ROWS CONSTANT NUMBER := -20905;
   SG$MANY_ROWS_TXT CONSTANT VARCHAR2(40) := 'Записей больше 1-ой';
   SG$NO_CORRECT CONSTANT NUMBER := -20906;
   SG$NO_CORRECT_TXT CONSTANT VARCHAR2(40) := 'Данные не корректны';
   SG$CHANGE_ARCHIVE CONSTANT NUMBER := -20907;
   SG$CHANGE_ARCHIVE_I CONSTANT VARCHAR2(50) := 'Нельзя добавлять документ в архивный период!';
   SG$CHANGE_ARCHIVE_U CONSTANT VARCHAR2(50) := 'Нельзя обновлять документ в архивном периоде!';
   SG$CHANGE_ARCHIVE_D CONSTANT VARCHAR2(50) := 'Нельзя удалять документ из архивного периода!';

END;
/

--
-- FOR_TAX_DOCS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_TAX_DOCS as

  -- Author  : VTAUBIN
  -- Created : 09.02.2010 13:42:30
  -- Purpose : 

 /* Добавить/Изменить ДОКУМЕНТ*/
  --FUNCTION AddPackage(pPACK_NUM VARCHAR2, pPACK_DATE DATE) RETURN NUMBER;

  FUNCTION AddDoc(pDOC_NUM VARCHAR2, pDOC_DATE DATE, pFILE_NAME VARCHAR2, pFILE_POS NUMBER, pCONTR_NAME VARCHAR2,pUSER_NAME VARCHAR2,pSOURCE_ID NUMBER)
                  RETURN NUMBER;
  Procedure FillPackage(pPack_id number);
  FUNCTION AddPackage(pPACK_NUM VARCHAR2, pPACK_DATE DATE ) RETURN NUMBER;
  --procedure FillPackage(pID_DOC number);
  
  --function AssignParent(pDoc number, pParent_doc number) return number;

end FOR_TAX_DOCS; 
/

--
-- KLS_GDOR$RP  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER."KLS_GDOR$RP" as
  column_changed$$ RAW(1000);
  procedure rep_delete(
    "GDOR_NAME1_o" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_delete(
    column_changed$ IN RAW,
    "GDOR_NAME1_o" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_insert(
    "GDOR_NAME1_n" IN VARCHAR2,
    "ID2_n" IN NUMBER,
    "SHORT_NAME3_n" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_update(
    "GDOR_NAME1_o" IN VARCHAR2,
    "GDOR_NAME1_n" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "ID2_n" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    "SHORT_NAME3_n" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_update(
    column_changed$ IN RAW,
    "GDOR_NAME1_o" IN VARCHAR2,
    "GDOR_NAME1_n" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "ID2_n" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    "SHORT_NAME3_n" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
end "KLS_GDOR$RP";

/

--
-- KLS_HOLDING$RP  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER."KLS_HOLDING$RP" as
  column_changed$$ RAW(1000);
  procedure rep_delete(
    "BOSS1_o" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_delete(
    column_changed$ IN RAW,
    "BOSS1_o" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_insert(
    "BOSS1_n" IN VARCHAR2,
    "HOLDING_NAME2_n" IN VARCHAR2,
    "ID3_n" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_update(
    "BOSS1_o" IN VARCHAR2,
    "BOSS1_n" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "HOLDING_NAME2_n" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    "ID3_n" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
  procedure rep_update(
    column_changed$ IN RAW,
    "BOSS1_o" IN VARCHAR2,
    "BOSS1_n" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "HOLDING_NAME2_n" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    "ID3_n" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR);
end "KLS_HOLDING$RP";

/

--
-- ZADREP  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.ZadRep AS

       TYPE curstype IS REF CURSOR;

procedure PR_ZAD_END_PER
          (date1 varchar2, date2 varchar2, res IN OUT curstype);

procedure DEB_KRED_ZAD
          (date1 varchar2, date2 varchar2,res IN OUT curstype);

END ZadRep;

/

--
-- FOR_CRYSTAL_TEL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Crystal_Tel AS

PROCEDURE CR_INSIDENUM(TIP_DATE VARCHAR2, DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  INSIDE_NUM VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Отчет по переговорам в разрезе внутренних телефонов (VEV) 25.12.2002г.
  DATE1 DATE;
  DATE2 DATE;
  NUM   VARCHAR2(20);
BEGIN
  
  DATE1:=TO_DATE(DATE_BEG,'dd.mm.yyyy hh24:mi');
  DATE2:=TO_DATE(DATE_END,'dd.mm.yyyy hh24:mi');

  IF (INSIDE_NUM='*') OR (INSIDE_NUM IS NULL) THEN
    NUM:='%';
  ELSE
    NUM:=INSIDE_NUM;
  END IF;	
  
  OPEN CRS FOR
  SELECT 
    atslog.calltime, 
    atslog.calllength, 
    atslog.fromnumber, 
    atslog.tonumber,
    atslog.inbound, 
    atslog.dest_id, 
    atslog.summa AS summa_approx, 
    gatslog.summa AS summa_exact, 
    kls_phones.fio,
    kls_gtsdestination.destination_name
    FROM tel.atslog, tel.gatslog, tel.kls_phones, tel.kls_gtsdestination
   WHERE ((gatslog.ID(+) = atslog.gatslog_id) AND 
          (atslog.fromnumber = kls_phones.inside_number(+)) AND 
	  	  (SUBSTR(atslog.tonumber,1,4) = kls_gtsdestination.code(+)) AND
		  (atslog.inbound IS NULL) AND (SUBSTR(atslog.tonumber,1,1)='8') AND
		  (atslog.FROMNUMBER BETWEEN '6100' AND '6299' OR 
		   atslog.FROMNUMBER BETWEEN '6500' AND '6699' OR
		   atslog.FROMNUMBER BETWEEN '703'  AND '703') AND
		   atslog.CALLLENGTH>=1 AND not atslog.FROMNUMBER in ('6101','6201') and
		  (atslog.calltime BETWEEN date1 AND date2) AND (atslog.fromnumber LIKE num));
END;
END;

/

--
-- FOR_INIT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Init AS
  xTERMINAL_NAME VARCHAR2(200);
  xOSUSER_NAME VARCHAR2(200);
  xAPP_USER_ID NUMBER;
  xSESSIONID NUMBER;
  xAPP_USER_NAME APP_USERS.NAME%TYPE;
  xAPP_USER_POST APP_USERS.POST%TYPE;
  xAPP_USER_SNP APP_USERS.SNP%TYPE;
  xAPP_USER_UNP APP_USERS.UNP%TYPE;
  xAPP_USER_MNOS APP_USERS.MNOS%TYPE;

PROCEDURE Init_MASTER IS
BEGIN
  Dbms_Session.SET_NLS('NLS_DATE_FORMAT','''dd.mm.yyyy hh24:mi''');
  Dbms_Session.SET_NLS('NLS_LANGUAGE','''RUSSIAN''');
END;

-- Текущий пользователь
FUNCTION GetCurrUser RETURN VARCHAR2 IS
BEGIN
  IF xOSUSER_NAME||' '=' ' THEN
    xOSUSER_NAME:=replace(NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER')),'CORP\','');
	IF xOSUSER_NAME||' '=' ' THEN
	  xOSUSER_NAME:='UNKNOWN';
	END IF;  
  END IF;
  RETURN xOSUSER_NAME;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN '';  
END;


-- Текущая машина
FUNCTION GetCurrTerm RETURN VARCHAR2 IS
BEGIN
  IF xTERMINAL_NAME||' '=' ' THEN
    xTERMINAL_NAME:=NLS_UPPER(SYS_CONTEXT('USERENV','TERMINAL'));
    IF xTERMINAL_NAME||' '=' ' THEN
      xTERMINAL_NAME:=REPLACE(NLS_UPPER(SYS_CONTEXT('USERENV','HOST')),'SNP\','');
      IF xTERMINAL_NAME||' '=' ' THEN
  	    xTERMINAL_NAME:='UNKNOWN';
	  END IF; 	
	END IF;  
  END IF;
  RETURN xTERMINAL_NAME;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN '';  
END;

-- Текущая сессия
FUNCTION GetCurrSessionId RETURN NUMBER IS
BEGIN
  IF xSESSIONID IS NULL THEN
    xSESSIONID:=USERENV('SESSIONID');
  END IF;
  IF xSESSIONID IS NULL THEN
    xSESSIONID:=0;
  END IF;     
  RETURN xSESSIONID;    
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;  
END;


-- Текущий пользователь приложения: ID
FUNCTION AppUserId RETURN NUMBER IS
  CURSOR C1 IS 
	SELECT ID
	FROM MASTER.APP_USERS
	WHERE NETNAME=GetCurrUser;
BEGIN
  IF xAPP_USER_ID IS NULL THEN
    OPEN  C1;
	FETCH C1 INTO xAPP_USER_ID;
    CLOSE C1;
  END IF;
  RETURN xAPP_USER_ID;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;  
END;
    
-- Текущий пользователь приложения: NAME
FUNCTION AppUserName RETURN VARCHAR2 IS
  CURSOR C1 IS 
	SELECT NAME
	FROM MASTER.APP_USERS
	WHERE NETNAME=GetCurrUser;
BEGIN
  IF xAPP_USER_NAME||' '=' ' THEN
    OPEN  C1;
	FETCH C1 INTO xAPP_USER_NAME;
    CLOSE C1;
  END IF;
  RETURN xAPP_USER_NAME;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN '';  
END;

-- Должность текущего пользователя приложения: POST
FUNCTION AppUserPost RETURN VARCHAR2 IS
  CURSOR C1 IS 
	SELECT POST
	FROM MASTER.APP_USERS
	WHERE NETNAME=GetCurrUser;
BEGIN
  IF xAPP_USER_POST||' '=' ' THEN
    OPEN  C1;
	FETCH C1 INTO xAPP_USER_POST;
    CLOSE C1;
  END IF;
  RETURN xAPP_USER_POST;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN '';  
END;

-- Текущий пользователь приложения: SNP
FUNCTION AppUserSNP RETURN NUMBER IS
  CURSOR C1 IS 
	SELECT SNP
	FROM MASTER.APP_USERS
	WHERE NETNAME=GetCurrUser;
BEGIN
  IF xAPP_USER_SNP IS NULL THEN
    OPEN  C1;
	FETCH C1 INTO xAPP_USER_SNP;
    CLOSE C1;
  END IF;
  RETURN xAPP_USER_SNP;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;  
END;

-- Текущий пользователь приложения: UNP
FUNCTION AppUserUNP RETURN NUMBER IS
  CURSOR C1 IS 
	SELECT UNP
	FROM MASTER.APP_USERS
	WHERE NETNAME=GetCurrUser;
BEGIN
  IF xAPP_USER_UNP IS NULL THEN
    OPEN  C1;
	FETCH C1 INTO xAPP_USER_UNP;
    CLOSE C1;
  END IF;
  RETURN xAPP_USER_UNP;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;  
END;

-- Текущий пользователь приложения: MNOS
FUNCTION AppUserMNOS RETURN NUMBER IS
  CURSOR C1 IS 
	SELECT MNOS
	FROM MASTER.APP_USERS
	WHERE NETNAME=GetCurrUser;
BEGIN
  IF xAPP_USER_MNOS IS NULL THEN
    OPEN  C1;
	FETCH C1 INTO xAPP_USER_MNOS;
    CLOSE C1;
  END IF;
  RETURN xAPP_USER_MNOS;	
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;  
END;

-- Обновление статистики
PROCEDURE UPDATE_STAT IS
BEGIN
  BEGIN
    SYS.DBMS_UTILITY.ANALYZE_SCHEMA('MASTER', 'COMPUTE');
  EXCEPTION
     WHEN OTHERS THEN 
	   NULL;
  END;
END;

END;
/

--
-- FOR_PLANFACT_PARUS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Planfact_Parus AS

  -- Очистить таблицу PLAN_FACT
  PROCEDURE EmptyPlanFact IS
  BEGIN
    DELETE FROM PLAN_FACT
    WHERE TERMINAL_NAME = For_Init.GetCurrTerm
      AND OSUSER_NAME = For_Init.GetCurrUser;
    COMMIT;	 
  END;
  
  -- Заполнить план
  PROCEDURE FillPlan (DateBeg VARCHAR2, DateEnd VARCHAR2) IS
	pDateBeg DATE;
	pDateEnd DATE;
	NumDay NUMBER;
	MaxDay NUMBER;
    vDateBeg DATE;
	vDateEnd DATE;
  BEGIN
    pDateBeg:=TO_DATE(DateBeg,'dd.mm.yyyy'); 
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 

	vDateBeg:=TRUNC(pDateBeg,'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(pDateEnd); -- Конец месяца

	NumDay:=TO_NUMBER(TO_CHAR(pDateEnd,'dd'));
	MaxDay:=TO_NUMBER(TO_CHAR(vDateEnd,'dd'));
	
    -- Добавляем план во временную таблицу
    INSERT INTO PLAN_FACT (TIP_ROW, GROUP_ORDER, NB_NAME, NOMMODIF_NAME, DICNOMNS_RN, NOMMODIF_RN,
	  CONTRACTS_RN,CONTRACTS_NUMB,AGENT_RN,AGENT_NAME,STAGES_RN,FACEACC_RN,FACEACC_CODE,
	  DATE_PLAN,PLAN_MON_V,PLAN_NAR_V) 
    SELECT
        'ПАРУС' AS TIP_ROW,
		1,
        NB_NAME, 
		NOMMODIF_NAME, 
		DICNOMNS_RN, 
		NOMMODIF_RN, 
		CONTRACTS_RN,
		CONTRACTS_NUMB,
		AGENT_RN,
		AGENT_NAME, 
        STAGES_RN, 
		FACEACC_RN, 
		FACEACC_CODE, 
        pDateEnd AS DATE_PLAN,
        SUM(A.PLAN_VES) AS PLAN_MON_V,
        SUM(A.PLAN_VES/MaxDay*NumDay) AS PLAN_NAR_V
      FROM VANEEV.V_FILIALS_PLAN_PSV@ORACLE.WORLD A
      WHERE A.DOC_DATE BETWEEN vDateBeg AND vDateEnd
      GROUP BY     
        NB_NAME, 
		NOMMODIF_NAME, 
		DICNOMNS_RN, 
		NOMMODIF_RN, 
		CONTRACTS_RN, 
		CONTRACTS_NUMB,
		AGENT_RN,
		AGENT_NAME, 
        STAGES_RN, 
		FACEACC_RN, 
		FACEACC_CODE; 

    COMMIT;
  END; 
  
  -- Заполнить "Заявлено"
  PROCEDURE FillZayv (DateBeg VARCHAR2, DateEnd VARCHAR2) IS
	pDateBeg DATE;
	pDateEnd DATE;
    vDateBeg DATE;
	vDateEnd DATE;
  BEGIN
    pDateBeg:=TO_DATE(DateBeg,'dd.mm.yyyy'); 
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 

	vDateBeg:=TRUNC(pDateBeg,'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(pDateEnd); -- Конец месяца

    INSERT INTO PLAN_FACT (TIP_ROW, GROUP_ORDER, NB_NAME, NOMMODIF_NAME, DICNOMNS_RN, NOMMODIF_RN,
	  CONTRACTS_RN,CONTRACTS_NUMB,AGENT_RN,AGENT_NAME,STAGES_RN,FACEACC_RN,FACEACC_CODE,
	  ZAYV_RN,ZAYV_PREF,TIP_OTGR_RN,TIP_OTGR_NAME,PAYTYPE_RN,PAYTYPE_NAME,
	  POLUCH_RN,POLUCH_NAME,DATE_ZAYV,ZAYV) 
    SELECT
        'ПАРУС' AS TIP_ROW,
		2,
        NB_NAME, 
		NOMMODIF_NAME, 
		DICNOMNS_RN, 
		NOMMODIF_RN, 
		CONTRACTS_RN,
		CONTRACTS_NUMB,
		AGENT_RN,
		AGENT_NAME, 
        STAGES_RN, 
		FACEACC_RN, 
		FACEACC_CODE,
		ZAYV_RN,
		MAX(ZAYV_PREF),
		MAX(TIP_OTGR_RN),
		MAX(TIP_OTGR_NAME),
		MAX(PAYTYPE_RN),
		MAX(PAYTYPE_NAME),
	    MAX(POLUCH_RN),
		MAX(POLUCH_NAME), 
        pDateEnd AS DATE_ZAYV,
        SUM(A.ZAYV_VES) AS ZAYV
      FROM VANEEV.V_FILIALS_ZAYV_PSV@ORACLE.WORLD A
      WHERE A.DOC_DATE BETWEEN vDateBeg AND vDateEnd
      GROUP BY     
        NB_NAME, 
		NOMMODIF_NAME, 
		DICNOMNS_RN, 
		NOMMODIF_RN, 
		CONTRACTS_RN, 
		CONTRACTS_NUMB,
		AGENT_RN,
		AGENT_NAME, 
        STAGES_RN, 
		FACEACC_RN, 
		FACEACC_CODE, 
		ZAYV_RN;

	COMMIT;  
  END;
    
  -- Заполнить факт 
  PROCEDURE FillFact (DateBeg VARCHAR2, DateEnd VARCHAR2) IS
	pDateBeg DATE;
	pDateEnd DATE;
    vDateBeg DATE;
	vDateEnd DATE;
  BEGIN
    pDateBeg:=TO_DATE(DateBeg,'dd.mm.yyyy'); 
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 

	vDateBeg:=TRUNC(pDateBeg,'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(pDateEnd); -- Конец месяца

    INSERT INTO PLAN_FACT (TIP_ROW, GROUP_ORDER, NB_NAME, NOMMODIF_NAME, DICNOMNS_RN, NOMMODIF_RN,
	  CONTRACTS_RN,CONTRACTS_NUMB,AGENT_RN,AGENT_NAME,STAGES_RN,FACEACC_RN,FACEACC_CODE,
	  ZAYV_RN,TIP_OTGR_RN,TIP_OTGR_NAME,PAYTYPE_RN,PAYTYPE_NAME,
	  POLUCH_RN,POLUCH_NAME,DATE_FACT,FACT_V) 
    SELECT
        'ПАРУС' AS TIP_ROW,
		2,
        NB_NAME, 
		NOMMODIF_NAME, 
		DICNOMNS_RN, 
		NOMMODIF_RN, 
		CONTRACTS_RN,
		CONTRACTS_NUMB,
		AGENT_RN,
		AGENT_NAME, 
        STAGES_RN, 
		FACEACC_RN, 
		FACEACC_CODE,
		ZAYV_RN,
		MAX(TIP_OTGR_RN),
		MAX(TIP_OTGR_NAME),
		MAX(PAYTYPE_RN),
		MAX(PAYTYPE_NAME),
	    MAX(POLUCH_RN),
		MAX(POLUCH_NAME), 
        pDateEnd AS DATE_FACT,
        SUM(A.FACT_VES) AS FACT_V
      FROM VANEEV.V_FILIALS_FACT_PSV@ORACLE.WORLD A
      WHERE A.DOC_DATE BETWEEN vDateBeg AND vDateEnd
      GROUP BY     
        NB_NAME, 
		NOMMODIF_NAME, 
		DICNOMNS_RN, 
		NOMMODIF_RN, 
		CONTRACTS_RN, 
		CONTRACTS_NUMB,
		AGENT_RN,
		AGENT_NAME, 
        STAGES_RN, 
		FACEACC_RN, 
		FACEACC_CODE, 
		ZAYV_RN;
  
    COMMIT;
  END;
  

  -- Заполнение плана/факта по плану перевозок и поставки  
  PROCEDURE FillAll (DateBeg VARCHAR2, DateEnd VARCHAR2) IS
  BEGIN
    EmptyPlanFact;
    FillPlan (DateBeg,DateEnd);
    FillZayv (DateBeg,DateEnd);
    FillFact (DateBeg,DateEnd);
	
	COMMIT;
  END;	 

END;

/

--
-- FOR_SCRIPTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_SCRIPTS AS

END;

/

--
-- FOR_TAX_DOCS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_TAX_DOCS is

FUNCTION GetUserId(pUSER_NAME varchar2) return NUMBER as
    vId number;
    vName varchar2(255);
begin
-- Проверка существования
    vName:=Trim(pUSER_NAME);
    UPDATE ISU_TAX_USER SET USER_NAME=vName WHERE USER_NAME=vName;
    IF SQL%NOTFOUND THEN
      -- Добавляем USERa
      INSERT INTO ISU_TAX_USER (USER_NAME) VALUES (vName);
    END IF;

    SELECT /*+ RULE */ ID
        INTO vId
    FROM isu_tax_user
    WHERE USER_NAME=vName;
    /*EXCEPTION
      WHEN OTHERS THEN
        IF vAdd=0 THEN
          RaiseError('Накладную нельзя отредактировать - она удалена!');
      END IF;*/ 

    RETURN vId;    
end;

FUNCTION GetContrId(pCONTR_NAME varchar2) return NUMBER as
    vId number;
    vName varchar2(255);
begin
-- Проверка существования
    vName:=Trim(pCONTR_NAME);
    UPDATE ISU_TAX_CONTR SET CONTR_NAME=vName WHERE CONTR_NAME=vName;
    IF SQL%NOTFOUND THEN
      -- Добавляем USERa
      INSERT INTO ISU_TAX_CONTR (CONTR_NAME) VALUES (vName);
    END IF;
   
 SELECT /*+ RULE */ ID
        INTO vId
    FROM isu_tax_contr
    WHERE CONTR_NAME=vName;
    /*EXCEPTION
      WHEN OTHERS THEN
        IF vAdd=0 THEN
          RaiseError('Накладную нельзя отредактировать - она удалена!');
        END IF;*/
    RETURN vId;    
end;


FUNCTION GetFileId(pFILE_NAME varchar2, pSOURCE_ID NUMBER, pUSER_ID NUMBER) return NUMBER as
    vId number;
    vName varchar2(255);
begin
-- Проверка существования
    vName:=Trim(pFILE_NAME);
    UPDATE  ISU_TAX_FILES SET FILE_NAME=vName WHERE FILE_NAME=vName;
    IF SQL%NOTFOUND THEN
      -- Добавляем новый файл
      INSERT INTO ISU_TAX_FILES (FILE_NAME,USER_ID,SOURCE_ID,UPLOAD_DATE) VALUES (vName,pUSER_ID, pSOURCE_ID,CURRENT_DATE);
    END IF;
   
 SELECT /*+ RULE */ ID
        INTO vId
    FROM isu_tax_files
    WHERE FILE_NAME=vName;
    /*EXCEPTION
      WHEN OTHERS THEN
        IF vAdd=0 THEN
          RaiseError('Накладную нельзя отредактировать - она удалена!');
        END IF;*/
    RETURN vId;    
end;

  -- Ошибка
/*PROCEDURE AddPackageRow(pId number) as
vId number;
begin
    FOR lcur IN (select Id from isu_tax_docs where parent_doc_id=pId)
    LOOP
      UPDATE isu_tax_tmp_new_package set id=lcur.id where id=lcur.id;
      if SQL%NOTFOUND then
         insert into isu_tax_tmp_new_package (id) values (lcur.Id);
      end if;   
      AddPackageRow(lcur.Id);
    END LOOP;
end;*/

PROCEDURE RaiseError (pText VARCHAR2) AS
BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
END;

FUNCTION AddDoc(pDOC_NUM VARCHAR2, pDOC_DATE DATE, pFILE_NAME VARCHAR2, pFILE_POS NUMBER, pCONTR_NAME VARCHAR2,pUSER_NAME VARCHAR2,pSOURCE_ID NUMBER)
RETURN NUMBER  AS
    vContrId    number;
    vFileId     number;
    vUserId     number;
    vDocId      number;
    vFileName   varchar2(255);                  
BEGIN
    /*IF vCNT>0 THEN
      RaiseError('Накладную нельзя удалить - есть позиции!');
    END IF;*/
    vContrId:=GetContrId(pCONTR_NAME);
    vUserId:=GetUserId(pUSER_NAME);    
    vFileId:=GetFileId(pFILE_NAME,pSOURCE_ID,vUserId);

    UPDATE isu_tax_docs set (file_id, file_pos_num)=(Select vFileId, pFILE_POS from dual) 
    WHERE file_id=vFileId and file_pos_num=pFILE_POS;
    IF SQL%NOTFOUND THEN
    -- Добавляем документ
        INSERT INTO ISU_TAX_DOCS (DOC_NUM, DOC_DATE, FILE_ID, FILE_POS_NUM, CONTRACTOR_ID)
        VALUES (pDOC_NUM, pDOC_DATE, vFileId, pFILE_POS,vContrId);
    --Во временную таблицу существующих документов добавим строки с такими же Номером, Датой и контрагентом
        --INSERT INTO ISU_TAX_EXIST (DOC_ID,REASON_ID,FILE_ID,FILE_POS_NUM) 
      --  SELECT ID,2,FILE_ID,FILE_POS_NUM FROM ISU_TAX_DOCS WHERE DOC_NUM=pDOC_NUM AND DOC_DATE=pDOC_DATE AND CONTRACTOR_ID=vContrId;      
        
    ELSE
        SELECT ID INTO vDocId FROM ISU_TAX_DOCS WHERE file_id=vFileId and file_pos_num=pFILE_POS;
--        update isu_tax_exist set(doc_id,reason_id)=(select vDocId,1 from dual);
--        IF SQL%NOTFOUND THEN
        INSERT INTO ISU_TAX_EXIST (DOC_ID,REASON_ID,FILE_ID, FILE_POS_NUM) 
        VALUES (vDocId,1,vFileId,pFILE_POS);
--        end if;          
        
    END IF;

  -- COMMIT
/*    IF pCOMMIT=1 THEN
	  COMMIT;
    END IF;*/
    RETURN 0;
END;

FUNCTION AddPackage(pPACK_NUM VARCHAR2, pPACK_DATE DATE ) RETURN NUMBER AS
 vId number;
BEGIN
    UPDATE ISU_TAX_PACKAGE set pack_num=pPACK_NUM where pack_num=pPACK_NUM and pack_date=pPACK_DATE;
    IF SQL%NOTFOUND THEN
    -- Добавляем документ
        SELECT SEQ_TAX_ID.nextval INTO vID FROM DUAL;
        INSERT INTO ISU_TAX_PACKAGE (ID,PACK_NUM, PACK_DATE)
        VALUES (vId, pPACK_NUM, pPACK_DATE);
   END IF;

  -- COMMIT
--    IF pCOMMIT=1 THEN
--	  COMMIT;
--   END IF;
    FillPackage(vId);
	RETURN vId;
END;

Procedure FillPackage(pPack_id number) as
vId NUMBER;  
begin
--UPDATE isu_tax_tmp_new_package set id=pId_Doc where id=pID_DOC;
  --if SQL%NOTFOUND then
     update isu_tax_docs set package_id=pPack_id where id in (select id from isu_tax_tmp_new_package);
--  end if;
end;

/*
function AssignParent(pDoc number, pParent_doc number) return number
   AS
vParent_rel_Id number;
vDoc_parent_rel_id number;    
begin
    select r.id into vParent_rel_id from isu_tax_docs d join isu_tax_rel r on D.DOC_REL_ID=R.ID 
    where d.id=pParent_doc;
    select r.pId into vDoc_parent_rel_id from isu_tax_docs d join isu_tax_rel r on D.DOC_REL_ID=R.ID 
    where d.id=pDoc;
    if vDoc_parent_rel_id=vParent_rel_id then
        return 1;
    else 
        return 0;
    end if;        

end;
*/
end FOR_TAX_DOCS; 
/

--
-- KLS_GDOR$RP  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER."KLS_GDOR$RP" as
  procedure rep_delete(
    "GDOR_NAME1_o" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    rep_delete(
      NULL,
      "GDOR_NAME1_o",
      "ID2_o",
      "SHORT_NAME3_o",
      site_name,
      propagation_flag);
  end rep_delete;
  procedure rep_delete(
    column_changed$ IN RAW,
    "GDOR_NAME1_o" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    DBMS_REPCAT_INTERNAL_PACKAGE.CALL(
      'MASTER','KLS_GDOR','REP_DELETE',6);
    DBMS_REPCAT_INTERNAL_PACKAGE.RAW_ARG(column_changed$);
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("GDOR_NAME1_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID2_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("SHORT_NAME3_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(site_name);
    DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(propagation_flag);
  end rep_delete;
  procedure rep_insert(
    "GDOR_NAME1_n" IN VARCHAR2,
    "ID2_n" IN NUMBER,
    "SHORT_NAME3_n" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    DBMS_REPCAT_INTERNAL_PACKAGE.CALL(
      'MASTER','KLS_GDOR','REP_INSERT',5);
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("GDOR_NAME1_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID2_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("SHORT_NAME3_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(site_name);
    DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(propagation_flag);
  end rep_insert;
  procedure rep_update(
    "GDOR_NAME1_o" IN VARCHAR2,
    "GDOR_NAME1_n" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "ID2_n" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    "SHORT_NAME3_n" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    rep_update(
      NULL,
      "GDOR_NAME1_o",
      "GDOR_NAME1_n",
      "ID2_o",
      "ID2_n",
      "SHORT_NAME3_o",
      "SHORT_NAME3_n",
      site_name,
      propagation_flag);
  end rep_update;
  procedure rep_update(
    column_changed$ IN RAW,
    "GDOR_NAME1_o" IN VARCHAR2,
    "GDOR_NAME1_n" IN VARCHAR2,
    "ID2_o" IN NUMBER,
    "ID2_n" IN NUMBER,
    "SHORT_NAME3_o" IN VARCHAR2,
    "SHORT_NAME3_n" IN VARCHAR2,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    DBMS_REPCAT_INTERNAL_PACKAGE.CALL(
      'MASTER','KLS_GDOR','REP_UPDATE',9);
    DBMS_REPCAT_INTERNAL_PACKAGE.RAW_ARG(column_changed$);
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("GDOR_NAME1_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("GDOR_NAME1_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID2_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID2_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("SHORT_NAME3_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("SHORT_NAME3_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(site_name);
    DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(propagation_flag);
  end rep_update;
end "KLS_GDOR$RP";

/

--
-- KLS_HOLDING$RP  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER."KLS_HOLDING$RP" as
  procedure rep_delete(
    "BOSS1_o" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    rep_delete(
      NULL,
      "BOSS1_o",
      "HOLDING_NAME2_o",
      "ID3_o",
      site_name,
      propagation_flag);
  end rep_delete;
  procedure rep_delete(
    column_changed$ IN RAW,
    "BOSS1_o" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    DBMS_REPCAT_INTERNAL_PACKAGE.CALL(
      'MASTER','KLS_HOLDING','REP_DELETE',6);
    DBMS_REPCAT_INTERNAL_PACKAGE.RAW_ARG(column_changed$);
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("BOSS1_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("HOLDING_NAME2_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID3_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(site_name);
    DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(propagation_flag);
  end rep_delete;
  procedure rep_insert(
    "BOSS1_n" IN VARCHAR2,
    "HOLDING_NAME2_n" IN VARCHAR2,
    "ID3_n" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    DBMS_REPCAT_INTERNAL_PACKAGE.CALL(
      'MASTER','KLS_HOLDING','REP_INSERT',5);
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("BOSS1_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("HOLDING_NAME2_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID3_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(site_name);
    DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(propagation_flag);
  end rep_insert;
  procedure rep_update(
    "BOSS1_o" IN VARCHAR2,
    "BOSS1_n" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "HOLDING_NAME2_n" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    "ID3_n" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    rep_update(
      NULL,
      "BOSS1_o",
      "BOSS1_n",
      "HOLDING_NAME2_o",
      "HOLDING_NAME2_n",
      "ID3_o",
      "ID3_n",
      site_name,
      propagation_flag);
  end rep_update;
  procedure rep_update(
    column_changed$ IN RAW,
    "BOSS1_o" IN VARCHAR2,
    "BOSS1_n" IN VARCHAR2,
    "HOLDING_NAME2_o" IN VARCHAR2,
    "HOLDING_NAME2_n" IN VARCHAR2,
    "ID3_o" IN NUMBER,
    "ID3_n" IN NUMBER,
    site_name IN VARCHAR2,
    propagation_flag IN CHAR) is
  begin
    DBMS_REPCAT_INTERNAL_PACKAGE.CALL(
      'MASTER','KLS_HOLDING','REP_UPDATE',9);
    DBMS_REPCAT_INTERNAL_PACKAGE.RAW_ARG(column_changed$);
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("BOSS1_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("BOSS1_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("HOLDING_NAME2_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG("HOLDING_NAME2_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID3_o");
    DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG("ID3_n");
    DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(site_name);
    DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(propagation_flag);
  end rep_update;
end "KLS_HOLDING$RP";

/

--
-- ZADREP  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.ZadRep AS

procedure PR_ZAD_END_PER
          (date1 varchar2, date2 varchar2,res IN OUT curstype)
-- ОТЧЕТ ПО ПРОСРОЧЕННОЙ ЗАДОЛЖЕННОСТИ НА КОНЕЦ ПЕРИОДА (KVS)
  IS
  datex Date;
  BEGIN
  datex:= to_date(date2,'dd.mm.yyyy');
    open res for
      select g.dog_grp as dog_group, g.nom_do as nom_dog, g.pred_nam as pred_name,
             sum(decode(sign(oplata-mon1),-1,mon1-oplata,0)) as m1,
             sum(decode(sign(oplata-mon3),-1,mon3-oplata,0)) as m3,
             sum(decode(sign(oplata-mon4),-1,mon4-oplata,0)) as m4,
             sum(decode(sign(oplata-mon6),-1,mon6-oplata,0)) as m6,
             sum(decode(sign(oplata-day5),-1,day5-oplata,0)) as d5,
             sum(decode(sign(oplata-cur),-1,cur-oplata,0)) as c0,
			 sum(kol_dn) as kol_dn, date2 as enddat
        from (  -- ОТГРУЗКА
             select g.name as dog_grp, c.dogovor_num as nom_do, f.name as pred_nam,
             sum(decode(IIFD(b.check_date+b.days_number,'<=',add_months(datex,-1),to_date('01.01.1990','dd.mm.yyyy'),to_date('01.01.2000','dd.mm.yyyy')),to_date('01.01.2000','dd.mm.yyyy'),0,b.BILL_TOTAL_SUM)) as mon1,
             sum(decode(IIFD(b.check_date+b.days_number,'<=',add_months(datex,-3),to_date('01.01.1990','dd.mm.yyyy'),to_date('01.01.2000','dd.mm.yyyy')),to_date('01.01.2000','dd.mm.yyyy'),0,b.BILL_TOTAL_SUM)) as mon3,
             sum(decode(IIFD(b.check_date+b.days_number,'<=',add_months(datex,-4),to_date('01.01.1990','dd.mm.yyyy'),to_date('01.01.2000','dd.mm.yyyy')),to_date('01.01.2000','dd.mm.yyyy'),0,b.BILL_TOTAL_SUM)) as mon4,
             sum(decode(IIFD(b.check_date+b.days_number,'<=',add_months(datex,-6),to_date('01.01.1990','dd.mm.yyyy'),to_date('01.01.2000','dd.mm.yyyy')),to_date('01.01.2000','dd.mm.yyyy'),0,b.BILL_TOTAL_SUM)) as mon6,
             sum(decode(IIFD(b.check_date+b.days_number,'<=',datex-5,to_date('01.01.1990','dd.mm.yyyy'),to_date('01.01.2000','dd.mm.yyyy')),to_date('01.01.2000','dd.mm.yyyy'),0,b.BILL_TOTAL_SUM)) as day5,
             sum(decode(IIFD(b.check_date+b.days_number,'<=',datex,to_date('01.01.1990','dd.mm.yyyy'),to_date('01.01.2000','dd.mm.yyyy')),to_date('01.01.2000','dd.mm.yyyy'),0,b.BILL_TOTAL_SUM)) as cur,
             avg(b.days_number) as kol_dn
             from komitu.lo_bill b,
			      komitu.lo_contract c,
				  komitu.lo_factory f,
				  komitu.lo_dogovor_groups g,
				  komitu.lo_dogovor d
			where b.is_deleted=0 and c.is_deleted=0 and f.is_deleted=0 and b.contract_id=c.id and g.is_deleted=0
			      and g.is_deleted=0 and d.is_deleted=0 and b.dogovor_id=d.id and d.dogovor_group_id=g.id
			      and b.contract_payer_id=f.id
		    group by g.name, c.dogovor_num, f.name
             ) g,
             (  -- ОПЛАТА
             select g.name as dog_grp, c.dogovor_num as nom_do, f.name as pred_nam, sum(e.summa) as oplata, datex as enddat
             from komitu.lo_extract e,
			      komitu.lo_contract c,
			      komitu.lo_factory f,
			      komitu.lo_dogovor_groups g,
		          komitu.lo_dogovor d
             where e.extract_date<=datex and e.is_deleted=0 and c.is_deleted=0 and f.is_deleted=0
			       and e.contract_id=c.id and e.contract_payer_id=f.id
                   and g.is_deleted=0 and d.is_deleted=0 and e.dogovor_id=d.id and d.dogovor_group_id=g.id
             group by g.name, c.dogovor_num, f.name
             ) o
       where g.nom_do=o.nom_do and
-- ДЛЯ ОТСЕИВАНИЯ ВСЕХ НУЛЕВЫХ ЗАДОЛЖЕННОСТЕЙ
             (decode(sign(oplata-mon1),-1,mon1-oplata,0)<>0 or
             decode(sign(oplata-mon3),-1,mon3-oplata,0)<>0 or
             decode(sign(oplata-mon4),-1,mon4-oplata,0)<>0 or
             decode(sign(oplata-mon6),-1,mon6-oplata,0)<>0 or
             decode(sign(oplata-day5),-1,day5-oplata,0)<>0 or
             decode(sign(oplata-cur),-1,cur-oplata,0)<>0)
	   group by g.dog_grp, g.nom_do, g.pred_nam
       order by nom_dog, pred_name;

  END PR_ZAD_END_PER;

---------------------------------------------------------------------------------------

procedure DEB_KRED_ZAD
          (date1 varchar2, date2 varchar2,res IN OUT curstype)
-- ОТЧЕТ ПО ДЕБЕТОРСКО-КРЕДИТОРСКОЙ ЗАДОЛЖЕННОСТИ (KVS)
  IS
  datex1 Date;
  datex2 Date;
  BEGIN
  datex1:= to_date(date1,'dd.mm.yyyy');
  datex2:= to_date(date2,'dd.mm.yyyy');
    open res for  --- general select from "union all"'s
select dog_group, nom_dog, pred_name,kol_dn,
       decode(sign(nvl(opl_nach,0)-nvl(otgr_nach,0)),-1,nvl(otgr_nach,0)-nvl(opl_nach,0),0) as deb_sald_nach,
	   decode(sign(nvl(otgr_nach,0)-nvl(opl_nach,0)),-1,nvl(opl_nach,0)-nvl(otgr_nach,0),0) as kred_sald_nach,
	   otgr_per, opl_per,
       decode(sign(nvl(opl_kon,0)-nvl(otgr_kon,0)),-1,nvl(otgr_kon,0)-nvl(opl_kon,0),0) as deb_sald_kon,
	   decode(sign(nvl(otgr_kon,0)-nvl(opl_kon,0)),-1,nvl(opl_kon,0)-nvl(otgr_kon,0),0) as kred_sald_kon,
	   decode(sign(nvl(pr_kred,0)-nvl(pr_deb,0)),-1,nvl(pr_deb,0)-nvl(pr_kred,0),0) as prosr_zad,
	   date1 as start_date, date2 as end_date
  from
	  (
      select dog_grp as dog_group, nom_do as nom_dog, pred_nam as pred_name,  --- все группируем [1]
	         sum(otgr_nach) as otgr_nach, sum(otgr_per) as otgr_per,
			 sum(otgr_kon) as otgr_kon, sum(pr_deb) as pr_deb, sum(kol_dn) as kol_dn,
			 sum(opl_nach) as opl_nach, sum(opl_per) as opl_per, sum(opl_kon) as opl_kon, sum(pr_kred) as pr_kred
		from
			 (
			 select g.name as dog_grp, c.dogovor_num as nom_do, f.name as pred_nam, ---отгрузка
                    sum(decode(IIFDate(b.CHECK_DATE,'<',datex1),1,b.BILL_TOTAL_SUM,0)) as otgr_nach,
					sum(decode(IIFDate(b.CHECK_DATE,'>=',datex1),1,b.BILL_TOTAL_SUM,0)) as otgr_per,
					sum(b.BILL_TOTAL_SUM) as otgr_kon,
					sum(decode(IIFDate(b.check_date+b.days_number,'<=',datex2),1,b.BILL_TOTAL_SUM,0)) as pr_deb, -- для просрочки
                    avg(b.days_number) as kol_dn, 0 as opl_nach, 0 as opl_per,0 as opl_kon, 0 as pr_kred
               from komitu.lo_bill b,
			        komitu.lo_contract c,
				    komitu.lo_factory f,
			  	    komitu.lo_dogovor_groups g,
				    komitu.lo_dogovor d
			  where b.is_deleted=0 and c.is_deleted=0 and f.is_deleted=0 and b.contract_id=c.id and g.is_deleted=0
			        and g.is_deleted=0 and d.is_deleted=0 and b.dogovor_id=d.id and d.dogovor_group_id=g.id
			        and b.contract_payer_id=f.id and b.CHECK_DATE<=datex2
   		      group by g.name, c.dogovor_num, f.name
              UNION ALL  --- объединим
             select g.name as dog_grp, c.dogovor_num as nom_do, f.name as pred_nam, --- оплата
			        0 as otgr_nach, 0 as otgr_per, 0 as otgr_kon, 0 as pr_deb,0 as kol_dn,
					sum(decode(IIFDate(e.extract_date,'<=',datex1),1,e.SUMMA,0)) as opl_nach,
					sum(decode(IIFDate(e.extract_date,'>=',datex1),1,e.SUMMA,0)) as opl_per,
					sum(e.SUMMA) as opl_kon,
					sum(decode(IIFDate(e.extract_date,'<=',datex2),1,e.SUMMA,0)) as pr_kred -- для просрочки
               from komitu.lo_extract e,
		   	        komitu.lo_contract c,
			        komitu.lo_factory f,
			        komitu.lo_dogovor_groups g,
		            komitu.lo_dogovor d
              where e.extract_date<=datex2 and e.is_deleted=0 and c.is_deleted=0 and f.is_deleted=0
			        and e.contract_id=c.id and e.contract_payer_id=f.id
                    and g.is_deleted=0 and d.is_deleted=0 and e.dogovor_id=d.id and d.dogovor_group_id=g.id
              group by g.name, c.dogovor_num, f.name
			  )
		group by dog_grp, nom_do, pred_nam  ---[1] end
		)
WHERE  decode(sign(nvl(opl_nach,0)-nvl(otgr_nach,0)),-1,nvl(otgr_nach,0)-nvl(opl_nach,0),0)<>0 or
	   decode(sign(nvl(otgr_nach,0)-nvl(opl_nach,0)),-1,nvl(opl_nach,0)-nvl(otgr_nach,0),0)<>0 or
	   otgr_per<>0 or opl_per<>0 or
       decode(sign(nvl(opl_kon,0)-nvl(otgr_kon,0)),-1,nvl(otgr_kon,0)-nvl(opl_kon,0),0)<>0 or
	   decode(sign(nvl(otgr_kon,0)-nvl(opl_kon,0)),-1,nvl(opl_kon,0)-nvl(otgr_kon,0),0)<>0 or
	   decode(sign(nvl(pr_kred,0)-nvl(pr_deb,0)),-1,nvl(pr_deb,0)-nvl(pr_kred,0),0)<>0
order by dog_group, nom_dog;
--- конец селектам
------------------------------------------------------------------------
END DEB_KRED_ZAD;

END ZadRep;

/

--
-- MAP_GET_LAST_REPORT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.MAP_GET_LAST_REPORT(AGN_RN in NUMBER, RN out number ) IS
test number;
BEGIN
   
   select parus.azsazslistmt.azs_number into RN 
   		  from parus.azsazslistmt@oracle.world 
   		  where parus.azsazslistmt.azs_agent = agn_RN;

END;

/

--
-- MAP_INSERTVERTEX  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.MAP_INSERTVERTEX(p1 NUMBER, p2 NUMBER, p3 NUMBER, p4 NUMBER) IS
BEGIN
insert into master.map_primitives(ID, x, y, order_rec) values(p1, p2, p3, p4);
commit;
END;

/

--
-- P_BOSSPARUS_PEOPLESYNC_KSE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.p_bossparus_peoplesync_kse as
/*


*/
--type TAgnRec is record(
--  abbr AGNLIST.AGNABBR%type;
--  name AGNLIST.AGNNAME%type;
--  isemp AGNLIST.EMP%type;
--  sex AGNLIST.SEX%type;
--  objectcode DOCS_PROPS_VALS.STR_VALUE%type
--);
--AgnRec TAgnRec;
type TNumArray is varray(4) of number(2);

nRN number(17); -- AGNLIST.RN%type
nCRN number(17); -- AGNLIST.CRN%type
sAgnAbbr varchar2(20); -- мнемокод контрагента
sContrNum varchar2(2); -- порядковый номер котрагента, если одинаковых слишком много
sz TNumArray; -- длина фамилии, кол-во пробелов, длина имени, длина отчёства
begin

for rec in (
  select *
  from load_buffer.t_bossparus_peoplesync_kse
) loop
  
  begin
  -- выбираем из контрагентов по ИНН, предполагая, что котрагент уже существует
--  select contr.AGNABBR, contr.AGNNAME, contr.EMP,
--         contr.SEX, props.STR_VALUE as objectcode
--  into AgnRec
--  from AGNLIST@P5TEST.WORLD contr left join (
--      select dpv.UNIT_RN, dpv.STR_VALUE
--      from DOCS_PROPS_VALS@P5TEST.WORLD dpv
--            join DOCS_PROPS@P5TEST.WORLD dp on dp.RN=dpv.DOCS_PROP_RN
--      where dpv.UNITCODE='AGNLIST' and dp.CODE_UC='ОБЪЕКТ'
--      ) props on props.UNIT_RN=contr.RN
--  where trim(contr.AGNIDNUMB)=rec.ITN and contr.AGNTYPE=1  
  select contr.RN, props.STR_VALUE as objectcode
  into nRN, ObjectCode
  from AGNLIST@P5TEST.WORLD contr left join (
      select dpv.UNIT_RN, dpv.STR_VALUE
      from DOCS_PROPS_VALS@P5TEST.WORLD dpv
           join DOCS_PROPS@P5TEST.WORLD dp on dp.RN=dpv.DOCS_PROP_RN
      where dpv.UNITCODE='AGNLIST' and dp.CODE_UC='ОБЪЕКТ'
      ) props on props.UNIT_RN=contr.RN
  where trim(contr.AGNIDNUMB)=rec.ITN and contr.AGNTYPE=1;

  exception
  when NO_DATA_FOUND then -- если не существует, добавляем
    begin
    -- подбираем мнемокод контрагента
    sz:=TNumArray(length(rec.Surname), 1, 1, 1);
    sContrNum:='';
    loop
      -- строим строку мнемокода
      sAgnAbbr:=substr((ltrim(rec.Surname), 1, sz(1)) ||
                lpad('', sz(2)) ||
                substr(ltrim(rec.Name), 1, sz(3)) ||'.'||
                substr(ltrim(rec.Patronymic), 1, sz(4)) ||'.'||
                sContrNum;
      -- есть ли такой в справочнике
      select count(rn)
      into nRN
      from AGNLIST
      where AGNABBR=sAgnAbbr;

      -- новые значения для следующей попытки, если понадобится
      
      
      -- выходим, если всё нормально
      exit when length(sAgnAbbr)<=20 and nRN=0;
    end loop;
          
    
    P_AGNLIST_INSERT@oracle.world(/*nCOMPANY*/2, nCRN,
        /*AGNABBR*/sAgnAbbr,
        /*AGNTYPE*/1,
        /*AGNNAME*/rec.Surname ||' '|| rec.Name ||' '|| rec.Patronymic,
        /*AGNIDNUMB*/rec.ITN,
        null, null, null, null, null, null, null, null, null, null, null,
        /*EMP*/rec.IsEmployee,   -- признак сотрудника (0 - не сотрудник, 1 - сотрудник)
        null, null, null, null, null, null, null, null, null, null, null,
        /*nSEX*/2-1*rec.Sex,   -- пол
        null, null, null, null, null, null, null,
        nRN);
    end;
  end;
  -- обновляем МВЗ
  if trim(ObjectCode)<>trim(rec.ObjectCode) then
    P_DOCS_PROPS_MODIFY@P5TEST.WORLD(/*nCOMPANY*/2, nRN, /*sUNITCODE*/'AGNLIST',
        /*sCODE*/'Объект', null, /*sSTR_VALUE*/rec.ObjectCode,
        /*nNUM_VALUE*/null, /*dDATE_VALUE*/null);
  end if;
  
  commit;
end loop;

end p_bossparus_peoplesync_kse;

/

--
-- P_GU12_BACKOTKAZ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_GU12_BACKOTKAZ (IDREIS INTEGER
                                          ,OLDID INTEGER) IS
NEW_SUMKOL NUMBER;
NEW_SUMVES NUMBER;

BEGIN

NEW_SUMKOL:=0;
NEW_SUMVES:=0;

FOR rec IN (SELECT * FROM GU12_B WHERE ID=IDREIS)
LOOP

   NEW_SUMKOL:=rec.KOL_VAG;
   NEW_SUMVES:=rec.VES;

END LOOP;

  UPDATE GU12_B SET KOL_VAG=KOL_VAG+NEW_SUMKOL,VES=VES+NEW_SUMVES
  WHERE ID=OLDID;

  UPDATE GU12_BR SET ID_B=OLDID WHERE ID_B=IDREIS;
  
  DELETE FROM GU12_B WHERE ID=IDREIS;
  
COMMIT;

END P_GU12_BACKOTKAZ;

/

--
-- P_GU12_OTKAZ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_GU12_OTKAZ (ID_REIS INTEGER
										  ,DATEISH DATE
										  ,DATEVHOD DATE
										  ,NOMISH VARCHAR2
										  ,NOMVHOD VARCHAR2) IS
SUMKOL NUMBER;
SUMVES NUMBER;
NEW_SUMKOL NUMBER;
NEW_SUMVES NUMBER;
OTKAZ_SUMKOL NUMBER;
OTKAZ_SUMVES NUMBER;
NEW_ID_REIS NUMBER;

BEGIN

SELECT seq_gu12_B.NEXTVAL
INTO NEW_ID_REIS
FROM DUAL;

SUMKOL:=0;
SUMVES:=0;
NEW_SUMKOL:=0;
NEW_SUMVES:=0;
OTKAZ_SUMKOL:=0;
OTKAZ_SUMVES:=0;

-- расчет сумм
FOR rec2 IN (SELECT * FROM GU12_BR WHERE ID_B=ID_REIS)
LOOP

	SUMKOL:=SUMKOL+rec2.KOL_VAG;
	SUMVES:=SUMVES+rec2.VES;

	IF NVL(rec2.METKA,0)=1 THEN
	   OTKAZ_SUMKOL:=OTKAZ_SUMKOL+rec2.KOL_VAG;
	   OTKAZ_SUMVES:=OTKAZ_SUMVES+rec2.VES;
	   --UPDATE GU12_BR SET METKA=0 WHERE ID=rec2.ID;
	   --UPDATE GU12_BR SET ID_B=NEW_ID_REIS WHERE ID=rec2.ID;
	END IF;

END LOOP;

NEW_SUMKOL:=SUMKOL-OTKAZ_SUMKOL;
NEW_SUMVES:=SUMVES-OTKAZ_SUMVES;

FOR rec1 IN (SELECT * FROM GU12_B WHERE ID=ID_REIS)
LOOP

INSERT INTO GU12_B
  (PDATE
  ,SOBSTVVAG_ID
  ,STAN_ID
  ,STAN_PER_ID
  ,STATES_ID
  ,GRUZPOL_ID
  ,KOL_VAG
  ,VES
  ,VIDOTPR_ID
  ,MRK
  ,ID_A
  ,ID
  ,PLAT_ID
--  ,FOX_KOD
  ,ISCOR
  ,DATE_LETTER
  ,NOM_LETTER
  ,DATE_VHOD
  ,NOM_VHOD
  ,PRINVAG_ID
  ,OLD_ID)
VALUES
  (rec1.PDATE
  ,rec1.SOBSTVVAG_ID
  ,rec1.STAN_ID
  ,rec1.STAN_PER_ID
  ,rec1.STATES_ID
  ,rec1.GRUZPOL_ID
  ,OTKAZ_SUMKOL  /*KOL_VAG*/
  ,OTKAZ_SUMVES  /*VES*/
  ,rec1.VIDOTPR_ID
  ,rec1.MRK
  ,rec1.ID_A
  ,NEW_ID_REIS /*ID*/
  ,rec1.PLAT_ID
--  ,'' /*FOX_KOD*/
  ,2  /*ISCOR*/
  ,DATEISH  /*DATE_LETTER*/
  ,NOMISH   /*NOM_LETTER*/
  ,DATEVHOD /*DATE_VHOD*/
  ,NOMVHOD  /*NOM_VHOD*/
  ,rec1.PRINVAG_ID
  ,ID_REIS);

  --UPDATE GU12_A SET ISCOR=2
  --WHERE ID=rec1.ID_A;

END LOOP;

UPDATE GU12_B SET KOL_VAG=NEW_SUMKOL,VES=NEW_SUMVES
WHERE ID=ID_REIS;

-- update br 
FOR rec2 IN (SELECT * FROM GU12_BR WHERE ID_B=ID_REIS)
LOOP

	IF NVL(rec2.METKA,0)=1 THEN
	   UPDATE GU12_BR SET METKA=0 WHERE ID=rec2.ID;
	   UPDATE GU12_BR SET ID_B=NEW_ID_REIS WHERE ID=rec2.ID;
	END IF;

END LOOP;

COMMIT;

END P_GU12_OTKAZ;

/

--
-- P_LOAD_SF_R3_FILLNOMSF_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_LOAD_SF_R3_FILLNOMSF_TEST (vDATE DATE,vFIRSTNUM NUMBER) IS
SFNUM NUMBER;
BEGIN

	SFNUM:=vFIRSTNUM;

	IF vFIRSTNUM>0 THEN
	  FOR LCUR IN (SELECT NOM_DOK FROM BILLS_TMP K
				          WHERE K.DATE_KVIT=vDATE
				          AND ISU_NOM_SF||' '<>' '
				          AND NOM_SF=0
			       )
	   LOOP

				UPDATE BILLS_TMP SET NOM_SF=SFNUM WHERE NOM_DOK=LCUR.NOM_DOK;

				SFNUM:=SFNUM+1;

	  END LOOP;

	  -- заполнение KVIT_NOMSF
	  DELETE FROM KVIT_NOMSF
	  WHERE KVIT_ID IN (SELECT ID FROM KVIT_TMP WHERE DATE_KVIT=vDATE);

	  INSERT INTO KVIT_NOMSF
	  SELECT DISTINCT K.ID AS KVIT_ID,B.NOM_SF
      FROM KVIT_TMP K,BILLS_TMP B
      WHERE K.DATE_KVIT=vDATE
      AND K.BILL_ID=B.NOM_DOK
      AND K.BILL_ID<>0;

	END IF;

	COMMIT;

END P_LOAD_SF_R3_FILLNOMSF_TEST;

/

--
-- RENEW_BUF_V_INT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_buf_v_int (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH')
          ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:=''
          , param2 VARCHAR2:=''
          , param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

--- Добавляем 
INSERT /*+ APPEND*/ INTO MASTER.BUF_V_INT
     (
       SYB_RNK  
      ,N_OB         
      ,N_FID        
      ,N_GR_TY      
      ,N_SH         
      ,DD_MM_YYYY   
      ,N_INTER_RAS  
      ,KOL_DB       
      ,KOL          
      ,VAL          
      ,STAT         
      ,MIN_0        
      ,MIN_1        
      ,INTERV       
      ,AK_SUM       
      ,POK_START    
      ,RASH_POLN    
      ,IMPULSES     
     )
     (SELECT 
       SYB_RNK  
      ,N_OB         
      ,N_FID        
      ,N_GR_TY      
      ,N_SH         
      ,DD_MM_YYYY   
      ,N_INTER_RAS  
      ,KOL_DB       
      ,KOL          
      ,VAL          
      ,STAT         
      ,MIN_0        
      ,MIN_1        
      ,INTERV       
      ,AK_SUM       
      ,POK_START    
      ,RASH_POLN    
      ,IMPULSES
      FROM load_buffer.BUF_V_INT A
      WHERE NOT EXISTS (SELECT NULL 
                          FROM MASTER.BUF_V_INT B 
                          WHERE A.dd_mm_yyyy=B.dd_mm_yyyy
                            AND A.syb_rnk=B.syb_rnk 
                            AND A.n_ob=B.n_ob 
                            AND A.n_fid=b.n_fid
                            AND A.Min_0=B.Min_0
                            AND A.Min_1=B.Min_1
                            ) AND A.Stat is not null
     );
COMMIT;

delete from master.buf_v_int 
where dd_mm_yyyy < sysdate-7;

COMMIT;

END Renew_buf_V_INT; 
/

--
-- RENEW_DUMMY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_DUMMY (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  COMMIT;
END RENEW_DUMMY;

/

--
-- RENEW_GP_NAPR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_gp_napr (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_GP_NAPR A
    SET (NAME, GOSPROG_ID,KSSS_ID) = 
	(SELECT NAIM, PROGRAM, kSSS FROM load_buffer.gp_napr B WHERE B.KOD_POLUCH=A.ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.gp_napr B WHERE B.KOD_POLUCH=A.ID);

  INSERT INTO KLS_GP_NAPR (ID,NAME,gosprog_id,ksss_id)
   (SELECT KOD_POLUCH,naim,program,ksss FROM load_buffer.gp_napr B
    WHERE NOT EXISTS (SELECT NULL FROM KLS_GP_NAPR A WHERE A.ID=B.KOD_POLUCH));

  COMMIT;

END Renew_gp_napr;

/

--
-- RENEW_GR_INTEGR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Gr_integr (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE GR_INTEGR B
    SET (
            ELEM_BAL, VID_OBEKT_RAB, VID_RASH, N_OB, SYB_RNK, N_GR_INTEGR, TYP_POK, INTERV, VAR_VR_ZON, DAT_START, DAT_END,            
            N_KON, TXT, KTO, DAT, N_GR_KON, SYB_RNK_K, N_OB_K, TYPE, AB            
           ) = (SELECT 
                    ELEM_BAL, VID_OBEKT_RAB, VID_RASH, N_OB, SYB_RNK, N_GR_INTEGR, TYP_POK, INTERV, VAR_VR_ZON, DAT_START, DAT_END,            
                    N_KON, TXT, KTO, DAT, N_GR_KON, SYB_RNK_K, N_OB_K, TYPE, AB            
                  FROM load_buffer.gr_integr A 
                  WHERE A.n_gr_integr=b.n_gr_integr AND A.n_ob=B.n_ob AND A.syb_rnk=B.syb_rnk)           
   WHERE EXISTS (SELECT NULL FROM load_buffer.GR_INTEGR A WHERE A.n_gr_integr=b.n_gr_integr AND A.n_ob=B.n_ob AND A.syb_rnk=B.syb_rnk);

  INSERT INTO GR_INTEGR (ELEM_BAL, VID_OBEKT_RAB, VID_RASH, N_OB, SYB_RNK, N_GR_INTEGR, TYP_POK, INTERV, VAR_VR_ZON, DAT_START, DAT_END,            
            N_KON, TXT, KTO, DAT, N_GR_KON, SYB_RNK_K, N_OB_K, TYPE, AB)
   (SELECT ELEM_BAL, VID_OBEKT_RAB, VID_RASH, N_OB, SYB_RNK, N_GR_INTEGR, TYP_POK, INTERV, VAR_VR_ZON, DAT_START, DAT_END,            
            N_KON, TXT, KTO, DAT, N_GR_KON, SYB_RNK_K, N_OB_K, TYPE, AB 
        FROM load_buffer.GR_INTEGR A
       WHERE NOT EXISTS (SELECT NULL FROM GR_INTEGR B WHERE A.n_gr_integr=b.n_gr_integr AND A.n_ob=B.n_ob AND A.syb_rnk=B.syb_rnk)
   );
  
  COMMIT;

END Renew_GR_INTEGR;
/

--
-- RENEW_GU12_BR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_GU12_BR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
  IsFull NUMBER(1);
BEGIN
  RETURN;

-- Обновление рейсов  
  UPDATE /*+ RULE */ GU12_BR
    SET (ID_B, DATE_R, KOL_VAG, VES) =
	(SELECT 
	   B.ID,DATE_R,SUM(KOL),SUM(A.VES)
     FROM load_buffer.gu12br A, GU12_B B 
    WHERE A.time_ap=B.fox_kod AND B.ID=GU12_BR.ID_B AND A.DATE_R=GU12_BR.DATE_R
	GROUP BY B.ID,DATE_R
	) 
   WHERE EXISTS (SELECT NULL FROM load_buffer.gu12br A, GU12_B B 
    WHERE A.time_ap=B.fox_kod AND B.ID=GU12_BR.ID_B AND A.DATE_R=GU12_BR.DATE_R);

-- Добавление рейсов   
  INSERT INTO GU12_BR
    (ID_B, DATE_R, KOL_VAG, VES)
	(SELECT /*+ RULE */ B.ID, DATE_R, SUM(A.KOL) as KOL, SUM(A.VES) as VES
     FROM load_buffer.gu12br A, GU12_B b
     WHERE A.time_ap=B.fox_kod
       AND NOT EXISTS (SELECT null FROM GU12_BR C WHERE C.ID_B=b.ID and C.DATE_R=A.DATE_R)
     GROUP BY B.ID, DATE_R);
		 
-- Удаление заявок (на сутки)
  DELETE FROM /*+ RULE */ GU12_BR WHERE NOT EXISTS
      (SELECT NULL FROM load_buffer.gu12br A, gu12_b B WHERE A.time_ap=B.fox_kod AND B.ID=GU12_BR.ID_B AND A.DATE_R=GU12_BR.DATE_R)
	  AND GU12_BR.DATE_R BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_GU12_BR;

/

--
-- RENEW_KLS_BANK_KORS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_BANK_KORS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
BEGIN

  UPDATE kls_bank
    set (bank_name, address, bik, postindex) =
	    (SELECT A.naimb, A.adresb, A.bik, A.pindexb FROM load_buffer.bank_kors A WHERE A.kors_new=kls_bank.kors)
    where exists (SELECT B.kors_new FROM load_buffer.bank_kors B WHERE B.kors_new=kls_bank.kors);

  INSERT INTO kls_bank (kors, bank_name, address, bik, postindex)
    (SELECT C.kors_new, C.naimb, C.adresb, C.bik, C.pindexb FROM load_buffer.bank_kors C
      WHERE not exists (SELECT D.kors FROM kls_bank D WHERE D.kors=C.kors_new));

  COMMIT;

END RENEW_KLS_BANK_KORS;

/

--
-- RENEW_KLS_BANKS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Banks (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
BEGIN

  FOR lcur IN (SELECT * FROM load_buffer.banks) LOOP
    BEGIN
   
	  UPDATE KLS_BANKS
        SET (kors, bank_name, address, bik, postindex) =
	        (SELECT lcur.kors_new, lcur.naimb, lcur.adresb, lcur.bik, lcur.pindexb FROM dual)
       WHERE KLS_BANKS.id=lcur.ID;
	  
	  IF SQL%NOTFOUND THEN 
        INSERT INTO KLS_BANKS (id, kors, bank_name, address, bik, postindex)
             VALUES (lcur.ID, lcur.kors_new, lcur.naimb, lcur.adresb, lcur.bik, lcur.pindexb);
	  END IF;		 
	END;
  END LOOP;
  			 
  COMMIT;

END Renew_Kls_Banks;

/

--
-- RENEW_KLS_CAT_CEN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_CAT_CEN (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE kls_CAT_CEN
    set (cat_cen_name,fox_id) = (SELECT MAX(naim),MAX(id) FROM load_buffer.CAT_CEN WHERE cat_cen=kls_CAT_CEN.id)
    where exists (SELECT cat_cen FROM load_buffer.CAT_CEN WHERE cat_cen=kls_CAT_CEN.id);


  INSERT INTO kls_CAT_CEN (id,cat_cen_name,fox_id) (SELECT cat_cen,MAX(naim),max(id) FROM load_buffer.CAT_CEN
    WHERE cat_cen not in (SELECT id FROM kls_CAT_CEN) GROUP BY cat_cen);
  COMMIT;
END RENEW_KLS_CAT_CEN;

/

--
-- RENEW_KLS_CIST_DENI  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_cist_deni (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_CIST_DENI B
    SET (END_DENI,PRIM)
	  = (SELECT A.END_DENI,A.PRIM
  	     FROM load_buffer.deni_otg A
		 WHERE A.NUM_CIST=B.NUM_CIST AND A.BEG_DENI=B.BEG_DENI)
    WHERE EXISTS 
	   (SELECT NULL
  	     FROM load_buffer.deni_otg A
		 WHERE A.NUM_CIST=B.NUM_CIST AND A.BEG_DENI=B.BEG_DENI);

  INSERT INTO KLS_CIST_DENI (NUM_CIST,BEG_DENI,END_DENI,PRIM)
	(SELECT  A.NUM_CIST,A.BEG_DENI,A.END_DENI,A.PRIM 
  	   FROM load_buffer.deni_otg A
      WHERE NOT EXISTS 
	   (SELECT NULL FROM KLS_CIST_DENI B WHERE A.NUM_CIST=B.NUM_CIST AND A.BEG_DENI=B.BEG_DENI));

  DELETE FROM KLS_CIST_DENI B WHERE 
    NOT EXISTS (SELECT NULL from load_buffer.deni_otg A WHERE A.NUM_CIST=B.NUM_CIST AND A.BEG_DENI=B.BEG_DENI); 
--	 AND KLS_PASP.DATEUPLOAD BETWEEN date_beg AND date_end;

  COMMIT; 
END Renew_Kls_cist_deni;

/

--
-- RENEW_KLS_DOV_LINE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Dov_Line (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE KLS_DOV_LINE
    SET (VES,PROD_ID_NPR,DOVER_ID) =
	    (SELECT A.VES,A.KOD_NPR,A.ID_DOVER FROM load_buffer.DOV_LINE A
		  WHERE A.ID_DOV_LIN=KLS_DOV_LINE.id)
  WHERE IS_LOADED=1 
    AND EXISTS (SELECT load_buffer.DOV_LINE.ID_DOV_LIN FROM load_buffer.DOV_LINE
                 WHERE load_buffer.DOV_LINE.ID_DOV_LIN=KLS_DOV_LINE.id);

  COMMIT;

  INSERT INTO KLS_DOV_LINE (ID,VES,PROD_ID_NPR,DOVER_ID,IS_LOADED)
    (SELECT C.ID_DOV_LIN,C.VES,C.KOD_NPR,C.ID_DOVER,1 FROM load_buffer.DOV_LINE C
      WHERE NOT EXISTS (SELECT KLS_DOV_LINE.id FROM KLS_DOV_LINE WHERE KLS_DOV_LINE.id=C.ID_DOV_LIN AND IS_LOADED=1));

  COMMIT;

  DELETE FROM KLS_DOV_LINE WHERE IS_LOADED=1 AND NOT EXISTS (SELECT E.ID_DOV_LIN FROM load_buffer.DOV_LINE E WHERE E.ID_DOV_LIN = KLS_DOV_LINE.ID);

  COMMIT;
END Renew_Kls_Dov_Line;

/

--
-- RENEW_KLS_EVENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_EVENT(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_EVENT
    SET EVENT_NAME = (SELECT A.EVENT_NAME FROM load_buffer.LOG_EVENTS A WHERE A.EVENT_ID=KLS_EVENT.ID)
        WHERE EXISTS (SELECT B.EVENT_ID   FROM load_buffer.LOG_EVENTS B WHERE B.EVENT_ID=KLS_EVENT.ID);

  INSERT INTO KLS_EVENT (ID, EVENT_NAME) (SELECT C.EVENT_ID, C.EVENT_NAME FROM load_buffer.LOG_EVENTS C
        WHERE NOT EXISTS (SELECT KLS_EVENT.ID FROM KLS_EVENT WHERE KLS_EVENT.ID = C.EVENT_ID));

  DELETE FROM KLS_EVENT WHERE NOT EXISTS (SELECT D.EVENT_ID from load_buffer.LOG_EVENTS D WHERE D.EVENT_ID=KLS_EVENT.ID);

  COMMIT;

END RENEW_KLS_EVENT;

/

--
-- RENEW_KLS_GD_GROUP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_gd_group (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справочник ж/д групп грузов
  UPDATE KLS_GD_GROUP
    SET (ABBR, NAME)
	  = (SELECT DECODE(kod,-1,'',TO_CHAR(kod,'00')), naim
  	     FROM load_buffer.gruzgu12 WHERE kod=KLS_GD_GROUP.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.gruzgu12 WHERE kod=KLS_GD_GROUP.ID);

  INSERT INTO KLS_GD_GROUP (ID,ABBR,NAME)
	(SELECT  kod,DECODE(kod,-1,'',TO_CHAR(kod,'00')), naim FROM load_buffer.gruzgu12 A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_GD_GROUP C WHERE C.ID=A.kod));

  COMMIT;
END Renew_Kls_gd_group;

/

--
-- RENEW_KLS_GDOR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_GDOR(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_GDOR
    SET (GDOR_NAME, SHORT_NAME) = (SELECT A.NAIM, A.S_NAIM FROM load_buffer.gdor A WHERE A.KOD=KLS_GDOR.ID)
                     WHERE EXISTS (SELECT B.KOD            FROM load_buffer.gdor B WHERE B.KOD=KLS_GDOR.ID);

  INSERT INTO kls_gdor (ID, GDOR_NAME, SHORT_NAME) (SELECT C.KOD, C.NAIM, C.S_NAIM FROM load_buffer.GDOR C
      WHERE NOT EXISTS (SELECT D.ID FROM kls_gdor D WHERE D.ID=C.KOD));

  COMMIT;

END RENEW_KLS_GDOR;

/

--
-- RENEW_KLS_GD_PODACH  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Gd_podach (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справочник подач (для ГУ-12)
  UPDATE KLS_GD_PODACH
    SET (NAME)
	  = (SELECT naim
  	     FROM load_buffer.podagu12 WHERE kod=KLS_GD_PODACH.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.podagu12 WHERE kod=KLS_GD_PODACH.ID);

  INSERT INTO KLS_GD_PODACH (ID,NAME)
	(SELECT kod,naim
	   FROM load_buffer.podagu12 A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_GD_PODACH C WHERE C.ID=A.kod));

  COMMIT;
END Renew_Kls_Gd_Podach;

/

--
-- RENEW_KLS_GD_PRINVAG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Gd_Prinvag (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справочник принадлежности вагонов (для ГУ-12)
  UPDATE KLS_GD_PRINVAG
    SET (ABBR)
	  = (SELECT kod
  	     FROM load_buffer.pringu12 WHERE ASCII(kod)=KLS_GD_PRINVAG.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.pringu12 WHERE ASCII(kod)=KLS_GD_PRINVAG.ID);

  INSERT INTO KLS_GD_PRINVAG (ID,ABBR,NAME)
	(SELECT ASCII(kod),kod,naim
	   FROM load_buffer.pringu12 A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_GD_PRINVAG C WHERE C.ID=ASCII(A.kod)));

  COMMIT;
END Renew_Kls_Gd_Prinvag;

/

--
-- RENEW_KLS_GD_SOOB  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Gd_soob (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справочник ж/д сообщений (для ГУ-12)
  UPDATE KLS_GD_SOOB
    SET (NAME)
	  = (SELECT naim
  	     FROM load_buffer.soobgu12 WHERE kod=KLS_GD_SOOB.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.soobgu12 WHERE kod=KLS_GD_SOOB.ID);

  INSERT INTO KLS_GD_SOOB (ID,NAME)
	(SELECT kod,naim
	   FROM load_buffer.soobgu12 A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_GD_SOOB C WHERE C.ID=A.kod));

  COMMIT;
END Renew_Kls_Gd_Soob;

/

--
-- RENEW_KLS_GOSPROG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_GOSPROG (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_gosprog
    set gosprog_name = (SELECT name FROM load_buffer.program WHERE id=kod)
    where exists (SELECT kod FROM load_buffer.program where id=kod);

  INSERT INTO kls_gosprog (id,gosprog_name)
   (SELECT kod,name FROM load_buffer.program
    WHERE not exists (SELECT id FROM kls_gosprog where id=kod));

  COMMIT;

END RENEW_KLS_GOSPROG;

/

--
-- RENEW_KLS_GROUPDOG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_GROUPDOG (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_groupdog
    set (groupdog_name,fin_name1,fin_name2) = (SELECT A.name,A.fin_name1,A.fin_name2 FROM load_buffer.group_ A WHERE A.kod=kls_groupdog.id)
    where exists (SELECT B.kod FROM load_buffer.group_ B WHERE B.kod=kls_groupdog.id);

  INSERT INTO kls_groupdog (id,groupdog_name,fin_name1,fin_name2)
   (SELECT C.kod,C.name,C.fin_name1,C.fin_name2 FROM load_buffer.group_ C
    WHERE not exists (SELECT D.id FROM kls_groupdog D WHERE D.id=C.kod));
  COMMIT;

END RENEW_KLS_GROUPDOG;

/

--
-- RENEW_KLS_GTD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_GTD (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_gtd
    SET (DATE_GTD,N_NP,T_GTD,PRED_DEC,KVED,KOLG,STOF,STOS,STOT,V_10,V_11,V_25,V_26,KURS,DVYP,
         TAMG,KNMT,OTVL,NAGN,DKTS,S_GR) =
   (SELECT A.DATE_GTD,A.N_NP,A.T_GTD,A.PRED_DEC,A.KVED,A.KOLG,A.STOF,A.STOS,A.STOT,A.V_10,A.V_11,
           A.V_25,A.V_26,A.KURS,A.DVYP,A.TAMG,A.KNMT,A.OTVL,A.NAGN,A.DKTS,A.S_GR FROM load_buffer.gtd_all A WHERE A.nomdec=kls_gtd.gtd)
    WHERE EXISTS (SELECT * FROM load_buffer.gtd_all B WHERE B.nomdec=kls_gtd.gtd);

  INSERT INTO kls_gtd (GTD,DATE_GTD,N_NP,T_GTD,PRED_DEC,KVED,KOLG,STOF,STOS,STOT,V_10,V_11,V_25,V_26,KURS,DVYP,
         TAMG,KNMT,OTVL,NAGN,DKTS,S_GR)
   (SELECT C.NOMDEC,C.DATE_GTD,C.N_NP,C.T_GTD,C.PRED_DEC,C.KVED,C.KOLG,C.STOF,C.STOS,C.STOT,C.V_10,C.V_11,
           C.V_25,C.V_26,C.KURS,C.DVYP,C.TAMG,C.KNMT,C.OTVL,C.NAGN,C.DKTS,C.S_GR FROM load_buffer.gtd_all C
    WHERE not exists (SELECT * FROM kls_gtd WHERE kls_gtd.gtd=C.NOMDEC));

  INSERT INTO kls_gtd (GTD)
   (SELECT DISTINCT '00000/000000/0000000' FROM load_buffer.gtd_all
     WHERE not exists (SELECT * FROM kls_gtd WHERE kls_gtd.gtd='00000/000000/0000000'));

  COMMIT;
END RENEW_KLS_GTD;

/

--
-- RENEW_KLS_HOLDING  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_HOLDING (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_holding
    SET (holding_name, boss) = (SELECT A.name, A.boss FROM load_buffer.holding A WHERE A.id=kls_holding.ID)
    WHERE exists (SELECT B.id FROM load_buffer.holding B WHERE B.ID=kls_holding.ID);

  INSERT INTO kls_holding (id, holding_name, boss) (SELECT C.id, C.name, C.boss FROM load_buffer.holding C
    WHERE not exists (SELECT D.id FROM kls_holding D WHERE D.ID=C.ID));

  COMMIT;

END RENEW_KLS_HOLDING;

/

--
-- RENEW_KLS_KALIBR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_KALIBR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE kls_kalibr
    SET (VAGON_MAX_VES,VAGON_AXES) =
	(SELECT A.GRU,A.KOO FROM load_buffer.cist_typ A WHERE A.tip=kls_kalibr.id)
     where EXISTS (SELECT * FROM load_buffer.cist_typ B WHERE B.tip=kls_kalibr.id);

  INSERT INTO kls_kalibr (id,VAGON_MAX_VES,VAGON_AXES)
	(SELECT C.tip,C.GRU,C.KOO FROM load_buffer.cist_typ C
    WHERE not exists (SELECT * FROM kls_kalibr WHERE kls_kalibr.id=C.TIP));

  INSERT INTO kls_kalibr (id)
	(SELECT DISTINCT '0' FROM load_buffer.cist_typ
    WHERE not exists (SELECT * FROM kls_kalibr WHERE kls_kalibr.id='0'));

  COMMIT;
END RENEW_KLS_KALIBR;

/

--
-- RENEW_KLS_KODIF  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_KODIF (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
 RETURN;
 UPDATE kls_kodif
    set (NAME,FIELD_TYPE,FIELD_LEN,FIELD_DEC,FIELD_SVED) =
	    (SELECT NAME_R,FIELD_TYPE,FIELD_LEN,FIELD_DEC,FIELD_SVED FROM load_buffer.NKODIFIK
		  WHERE load_buffer.nkodifik.id=kls_kodif.id)
  where exists (SELECT * FROM load_buffer.nkodifik
                 where load_buffer.nkodifik.id=kls_kodif.id);

  INSERT INTO kls_kodif (ID,NAME,FIELD_TYPE,FIELD_LEN,FIELD_DEC,FIELD_SVED)
    (SELECT ID,NAME_R,FIELD_TYPE,FIELD_LEN,FIELD_DEC,FIELD_SVED FROM load_buffer.NKODIFIK
      WHERE not exists (SELECT kls_kodif.id FROM kls_kodif where kls_kodif.id=load_buffer.nkodifik.id));

  COMMIT;

END RENEW_KLS_KODIF;

/

--
-- RENEW_KLS_LOAD_TYPE_MOS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Load_Type_mos (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE KLS_LOAD_TYPE_MOS
    SET (NAME) =
	    (SELECT TRANSPORT_NAME FROM load_buffer.trans_transport A WHERE A.transport=KLS_LOAD_TYPE_MOS.ID)
  WHERE EXISTS (SELECT NULL FROM load_buffer.trans_transport A WHERE A.transport=KLS_LOAD_TYPE_MOS.ID);

  INSERT INTO KLS_LOAD_TYPE_MOS (ID,NAME)
    (SELECT TRANSPORT,TRANSPORT_NAME FROM load_buffer.trans_transport A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_LOAD_TYPE_MOS WHERE KLS_LOAD_TYPE_MOS.ID=A.transport));

  COMMIT;

END Renew_Kls_Load_Type_mos;

/

--
-- RENEW_KLS_MESTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_MESTO(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_mesto
    set mesto_name = (SELECT A.name FROM load_buffer.mesto A WHERE A.kod=kls_mesto.id)
    where exists (SELECT B.kod FROM load_buffer.mesto B WHERE B.kod=kls_mesto.ID);

  INSERT INTO kls_mesto (id, mesto_name) (SELECT C.kod, C.name FROM load_buffer.mesto C
    WHERE NOT EXISTS (SELECT D.id FROM kls_mesto D WHERE D.ID=C.KOD));

  COMMIT;

END RENEW_KLS_MESTO;

/

--
-- RENEW_KLS_NAPR_MOS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Napr_mos (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_NAPR_MOS
    SET NAME = (SELECT A.napr_name FROM load_buffer.trans_napr A WHERE A.napr=KLS_NAPR_MOS.ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.trans_napr B WHERE B.napr=KLS_NAPR_MOS.ID);

  INSERT INTO KLS_NAPR_MOS (ID,NAME)
   (SELECT C.napr,C.napr_name FROM load_buffer.trans_napr C
    WHERE NOT EXISTS (SELECT NULL FROM KLS_NAPR_MOS D WHERE D.ID=C.napr));
  COMMIT;

END Renew_Kls_Napr_mos;

/

--
-- RENEW_KLS_NAR_LINE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Nar_Line (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
 RETURN ;

 UPDATE KLS_NAR_LINE
    SET (VES,NOM_ZD,NARIAD_ID) =
	    (SELECT A.VES,A.NOM_ZD,A.ID_NARIAD FROM load_buffer.NAR_LINE A, load_buffer.NARIAD B
		  WHERE A.ID_NAR_LIN=KLS_NAR_LINE.ID AND A.ID_NARIAD=B.ID_NARIAD)
  WHERE IS_LOADED=1
    AND EXISTS (SELECT C.ID_NAR_LIN FROM load_buffer.NAR_LINE C, load_buffer.NARIAD D
                 WHERE C.ID_NAR_LIN=KLS_NAR_LINE.ID AND C.ID_NARIAD=D.ID_NARIAD);

  COMMIT;

  INSERT INTO KLS_NAR_LINE (ID,VES,NOM_ZD,NARIAD_ID,IS_LOADED)
    (SELECT A.ID_NAR_LIN,A.VES,A.NOM_ZD,A.ID_NARIAD,1 FROM load_buffer.NAR_LINE A, load_buffer.NARIAD B
      WHERE NOT EXISTS (SELECT NULL FROM KLS_NAR_LINE WHERE KLS_NAR_LINE.ID=A.ID_NAR_LIN AND IS_LOADED=1)
	    AND EXISTS (SELECT NULL FROM KLS_NARIAD WHERE KLS_NARIAD.ID=A.ID_NARIAD AND IS_LOADED=1)
	    AND A.ID_NARIAD=B.ID_NARIAD);
			
  COMMIT;
  

  DELETE FROM KLS_NAR_LINE WHERE IS_LOADED=1 AND NOT EXISTS (SELECT E.ID_NAR_LIN FROM load_buffer.NAR_LINE E WHERE E.ID_NAR_LIN = KLS_NAR_LINE.ID);

  COMMIT;
END Renew_Kls_Nar_Line;

/

--
-- RENEW_KLS_NAZN_OTG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_NAZN_OTG (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_nazn_otg
    set nazn_otg_name = (SELECT naz_otgr FROM load_buffer.nazn_otg A WHERE A.kod_otgr=kls_nazn_otg.id)
    where exists (SELECT kod_otgr FROM load_buffer.nazn_otg B WHERE B.KOD_OTGR=kls_nazn_otg.id);

  INSERT INTO kls_nazn_otg (id,nazn_otg_name)
  (SELECT C.kod_otgr,C.naz_otgr FROM load_buffer.nazn_otg C
    WHERE not exists (SELECT * FROM kls_nazn_otg D WHERE D.id=C.kod_otgr));

  COMMIT;

END RENEW_KLS_NAZN_OTG;

/

--
-- RENEW_KLS_OWNERSHIP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_OWNERSHIP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_ownership
    set ownership_name = (SELECT A.naim FROM load_buffer.sobstv A WHERE A.kod=kls_ownership.id)
    where exists (SELECT B.kod FROM load_buffer.sobstv B WHERE B.kod=kls_ownership.id);

  INSERT INTO kls_ownership (id,ownership_name)
   (SELECT C.kod,C.naim FROM load_buffer.sobstv C
    WHERE not exists (SELECT D.id FROM kls_ownership D WHERE D.id=C.kod));
  COMMIT;

END RENEW_KLS_OWNERSHIP;

/

--
-- RENEW_KLS_PASP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_PASP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE load_buffer.ZAGPASP set DAT_=DINS WHERE DAT_ IS NULL;

 UPDATE kls_pasp
    set (PASP_NUM,REZ_NUM,PASP_DATE,INSPEKTOR,DATE_OFORML,PROD_ID_NPR,MESTO_ID,DATEUPLOAD,DATE_VIR,PASP_TYP,VZLIV) =
	    (SELECT A.NUM_PASP,A.NUM_REZ,A.DINS,A.NINS,
		    TO_DATE(TO_CHAR(A.dat_,'dd.mm.yyyy ') || SUBSTR(A.tim_,1,5),'dd.mm.yyyy hh24:mi'),
			A.KOD_NPR,A.MESTO,A.DATEUPLOAD,A.DATE_VIR,A.PASP_TYP,A.VZLIV FROM load_buffer.ZAGPASP A
		  WHERE A.KODPASP=kls_pasp.id)
  where exists (SELECT load_buffer.ZAGPASP.KODPASP FROM load_buffer.ZAGPASP
                 where load_buffer.ZAGPASP.KODPASP=kls_pasp.id);

  COMMIT;

  INSERT INTO kls_pasp (ID,PASP_NUM,REZ_NUM,PASP_DATE,INSPEKTOR,DATE_OFORML,PROD_ID_NPR,MESTO_ID,DATEUPLOAD,DATE_VIR,PASP_TYP,VZLIV)
    (SELECT C.KODPASP,C.NUM_PASP,C.NUM_REZ,C.DINS,C.NINS,
		    TO_DATE(TO_CHAR(C.dat_,'dd.mm.yyyy ') || SUBSTR(C.tim_,1,5),'dd.mm.yyyy hh24:mi'),
			C.KOD_NPR,C.MESTO,C.DATEUPLOAD,C.DATE_VIR,C.PASP_TYP,C.VZLIV FROM load_buffer.ZAGPASP C
      WHERE not exists (SELECT kls_pasp.id FROM kls_pasp where kls_pasp.id=C.KODPASP));

  COMMIT;

  DELETE FROM KLS_PASP WHERE MESTO_ID>0 
     AND NOT EXISTS (SELECT E.KODPASP from load_buffer.ZAGPASP E WHERE E.KODPASP = KLS_PASP.ID) 
	 AND KLS_PASP.DATEUPLOAD BETWEEN date_beg AND date_end;

  COMMIT;
END RENEW_KLS_PASP;

/

--
-- RENEW_KLS_PAYDELAY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_PAYDELAY (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='')IS
BEGIN

  UPDATE kls_paydelay
    set (paydelay_name,short_name) = (SELECT A.n_otsr,A.nk_otsr FROM load_buffer.f_otsr A WHERE A.kod=kls_paydelay.id)
  where exists (SELECT B.kod FROM load_buffer.f_otsr B where B.kod=kls_paydelay.id );

  INSERT INTO kls_paydelay (id,paydelay_name,short_name) (SELECT C.kod,C.n_otsr,C.nk_otsr FROM load_buffer.f_otsr C
    WHERE not exists (SELECT D.id FROM kls_paydelay D where D.id=C.kod));
  COMMIT;

END RENEW_KLS_PAYDELAY;
/

--
-- RENEW_KLS_PERTYPE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_PERTYPE(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
BEGIN

  UPDATE KLS_PERTYPE
    SET (PERTYPE_NAME, BOSS) = (SELECT A.NAME,A.BOSS FROM load_buffer.PERTYPE A WHERE A.ID=KLS_PERTYPE.ID)
                 WHERE EXISTS (SELECT C.ID   FROM load_buffer.PERTYPE C WHERE C.ID=KLS_PERTYPE.ID AND KLS_PERTYPE.ID<>10);

  UPDATE KLS_PERTYPE
    SET (PERTYPE_NAME) = (SELECT A.NAME FROM load_buffer.PERTYPE A WHERE A.ID=KLS_PERTYPE.ID)
                 WHERE EXISTS (SELECT C.ID   FROM load_buffer.PERTYPE C WHERE C.ID=KLS_PERTYPE.ID AND KLS_PERTYPE.ID=10);

  INSERT INTO KLS_PERTYPE (ID,PERTYPE_NAME,BOSS) (SELECT D.ID, D.NAME, D.BOSS FROM load_buffer.PERTYPE D
          WHERE NOT EXISTS (SELECT E.ID FROM KLS_PERTYPE E WHERE E.ID=D.ID) AND D.ID<>10);

  INSERT INTO KLS_PERTYPE (ID,PERTYPE_NAME) (SELECT D.ID, D.NAME FROM load_buffer.PERTYPE D
          WHERE NOT EXISTS (SELECT E.ID FROM KLS_PERTYPE E WHERE E.ID=D.ID) AND D.ID=10);

  COMMIT;

END RENEW_KLS_PERTYPE;

/

--
-- RENEW_KLS_PLANSTRU  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Planstru (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 ---UPDATE load_buffer.gr_real SET kod_otgr=NULL WHERE kod_otgr=0;

 INSERT INTO KLS_PLANSTRU
    (ID,BEGIN_DATE,END_DATE,
	 NAME,LEVEL_POS,INPUT_DATE,KOD_SGR,KOD_SPG,KOD_RZD,KOD_PRZ,KOD_GRP,KOD_PGR,PARENT_ID,VIEW_LEVEL)
	(SELECT DISTINCT 99999,TO_DATE('01.01.1990','dd.mm.yyyy'),TRUNC(ADD_MONTHS(SYSDATE,12),'y')-1,
	 'КОРЕНЬ',0,TO_DATE('01.01.1990','dd.mm.yyyy'),0,0,0,0,0,0,99999,-1 FROM load_buffer.gr_real
      WHERE NOT EXISTS (SELECT * FROM KLS_PLANSTRU E WHERE E.ID=99999));

  UPDATE KLS_PLANSTRU a SET
    (BEGIN_DATE,END_DATE,NAME,LEVEL_POS,INPUT_DATE,KOD_SGR,
     KOD_SPG,KOD_RZD,KOD_PRZ,KOD_GRP,KOD_PGR,PARENT_ID,NAZN_OTG_ID,VIEW_LEVEL,
	 REGION_ID, ORG_KIND_ID, TIP_REAL_ID,
	 SPF_GROUP_ORDER, SPF_GROUP_NAME, SPF_ORDER, SPF_NAME, LUKOIL_ID,POS_PREDPR_ID)=
	(SELECT b.BEGIN_DATE,b.END_DATE,b.NAIM,b.KOD_POS,SYSDATE,b.KOD_SGR,
     b.KOD_SPG,b.KOD_RZD,b.KOD_PRZ,b.KOD_GRP,b.KOD_PGR,99999,b.KOD_OTGR,b.VIEW_POS,
	 DECODE(REGION,0,NULL,REGION), DECODE(TIP_OB,0,NULL,TIP_OB), DECODE(TIP_REAL,0,NULL,TIP_REAL),
	 SPF_TITORD, SPF_TITLE, SPF_ORDER, SPF_NAME, LUKOIL_ID,KOD_PLAT
	 FROM load_buffer.gr_real b
     WHERE a.ID=b.ID)
  WHERE EXISTS (SELECT * FROM load_buffer.gr_real c WHERE a.ID=c.ID);

  INSERT INTO KLS_PLANSTRU
    (ID,NAME,LEVEL_POS,INPUT_DATE,BEGIN_DATE,END_DATE,KOD_SGR,
     KOD_SPG,KOD_RZD,KOD_PRZ,KOD_GRP,KOD_PGR,PARENT_ID,NAZN_OTG_ID,VIEW_LEVEL,
	 REGION_ID, ORG_KIND_ID, TIP_REAL_ID,
	 SPF_GROUP_ORDER, SPF_GROUP_NAME, SPF_ORDER, SPF_NAME, LUKOIL_ID,POS_PREDPR_ID)
	(SELECT c.ID,c.NAIM,c.KOD_POS,SYSDATE,c.BEGIN_DATE,c.END_DATE,c.KOD_SGR,
     c.KOD_SPG,c.KOD_RZD,c.KOD_PRZ,c.KOD_GRP,c.KOD_PGR,99999,c.KOD_OTGR,c.VIEW_POS,
	 DECODE(REGION,0,NULL,REGION), DECODE(TIP_OB,0,NULL,TIP_OB), DECODE(TIP_REAL,0,NULL,TIP_REAL),
	 SPF_TITORD, SPF_TITLE, SPF_ORDER, SPF_NAME, LUKOIL_ID,KOD_PLAT
	 FROM load_buffer.gr_real c
     WHERE NOT EXISTS (SELECT b.ID FROM KLS_PLANSTRU b WHERE b.ID=c.ID));

  UPDATE KLS_PLANSTRU a
    SET parent_id=(SELECT ID FROM KLS_PLANSTRU b WHERE
	  b.level_pos=a.level_pos-1 AND
	  b.KOD_SGR=NVL(DECODE(a.level_pos,2,a.kod_sgr,3,a.kod_sgr,4,a.kod_sgr,5,a.kod_sgr,6,a.kod_sgr),0) AND
	  b.KOD_SPG=NVL(DECODE(a.level_pos,3,a.KOD_SPG,4,a.KOD_SPG,5,a.KOD_SPG,6,a.KOD_SPG),0) AND
	  b.KOD_RZD=NVL(DECODE(a.level_pos,4,a.KOD_RZD,5,a.KOD_RZD,6,a.KOD_RZD),0) AND
	  b.KOD_PRZ=NVL(DECODE(a.level_pos,5,a.KOD_PRZ,6,a.KOD_PRZ),0) AND
	  b.KOD_GRP=NVL(DECODE(a.level_pos,6,a.KOD_GRP),0)) WHERE a.level_pos>1;
  COMMIT;

  UPDATE KLS_PLANSTRU a
    SET for_mos_id=(SELECT C.ID FROM load_buffer.gr_real b, load_buffer.gr_real c 
	               WHERE b.id=a.id 
				     AND b.KOD_SGR1=c.KOD_SGR
                     AND b.KOD_SPG1=c.KOD_SPG
					 AND b.KOD_RZD1=c.KOD_RZD
					 AND b.KOD_PRZ1=c.KOD_PRZ
					 AND b.KOD_GRP1=c.KOD_GRP
					 AND b.KOD_PGR1=c.KOD_PGR);
  COMMIT;
END Renew_Kls_Planstru;

/

--
-- RENEW_KLS_PREDPR_AKCIZ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Predpr_Akciz (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 /* UPDATE KLS_PREDPR_AKCIZ
    SET (PLAT_ID, DATE_BEG, DATE_END, EX_SVID, EX_SVID_PREF, EX_SVID_NUMB, DATE_CANCEL, DATE_GIVE, IS_OPT, IS_ROZN, PROD_GROUPS_ID) =
        (SELECT KOD_PLAT, DATE_BEG, DATE_END, EX_SVID, EX_PREF, EX_NUMB, DATE_OUT, DATE_GIVE, IS_OPT, IS_ROZN, PROD_GRP
           FROM load_buffer.predpr_a A WHERE A.ID=KLS_PREDPR_AKCIZ.ID)
   WHERE EXISTS (SELECT NULL FROM load_buffer.predpr_a B WHERE b.ID=KLS_PREDPR_AKCIZ.ID);

  COMMIT;

  INSERT INTO KLS_PREDPR_AKCIZ (ID, PLAT_ID, DATE_BEG, DATE_END, EX_SVID,EX_SVID_PREF, EX_SVID_NUMB, DATE_CANCEL, DATE_GIVE, IS_OPT, IS_ROZN, PROD_GROUPS_ID)
        (SELECT c.ID,KOD_PLAT, DATE_BEG, DATE_END, EX_SVID, EX_PREF, EX_NUMB, DATE_OUT, DATE_GIVE, IS_OPT, IS_ROZN, PROD_GRP 
	   FROM load_buffer.predpr_a C
	WHERE NOT EXISTS (SELECT NULL FROM KLS_PREDPR_AKCIZ D WHERE D.ID=c.ID));

  COMMIT;

  DELETE FROM KLS_PREDPR_AKCIZ WHERE NOT EXISTS
    (SELECT NULL FROM load_buffer.predpr_a E WHERE E.ID= KLS_PREDPR_AKCIZ.ID);*/
  NULL;
END Renew_Kls_Predpr_Akciz;

/

--
-- RENEW_KLS_PREDPR_CLASS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Predpr_class (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_PREDPR_CLASS
    SET (NAME, kod_stat, kod_mosc) =
        (SELECT naim, statistic, kod_mosc
           FROM load_buffer.predpr_i A WHERE TO_NUMBER(A.kod)=KLS_PREDPR_CLASS.ID)
   WHERE EXISTS (SELECT NULL FROM load_buffer.predpr_i B WHERE TO_NUMBER(B.kod)=KLS_PREDPR_CLASS.ID);

  COMMIT;

  INSERT INTO KLS_PREDPR_CLASS (ID, NAME, kod_stat, kod_mosc)
        (SELECT TO_NUMBER(C.kod), C.naim, C.statistic, C.kod_mosc 
	   FROM load_buffer.predpr_i C
	WHERE NOT EXISTS (SELECT NULL FROM KLS_PREDPR_CLASS D WHERE D.ID=TO_NUMBER(C.KOD)));

  COMMIT;

END Renew_Kls_Predpr_class;

/

--
-- RENEW_KLS_PRICHIN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_PRICHIN(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_PRICHIN B
    SET (KOD_CLASS, KOD_GROUP, NAME) = 
	(SELECT KOD_CLASS, KOD_GROUP, PRICH_NAME 
	  FROM load_buffer.KLS_PRCH A WHERE A.KOD_PRICH=B.ID)
  WHERE EXISTS 
    (SELECT NULL
	  FROM load_buffer.KLS_PRCH A WHERE A.KOD_PRICH=B.ID);

  INSERT INTO KLS_PRICHIN (ID, KOD_CLASS, KOD_GROUP, NAME) 
    (SELECT KOD_PRICH, KOD_CLASS, KOD_GROUP, PRICH_NAME
	  FROM load_buffer.KLS_PRCH A
     WHERE NOT EXISTS 
      (SELECT NULL 
	    FROM KLS_PRICHIN B WHERE A.KOD_PRICH=B.ID));

  COMMIT;

END RENEW_KLS_PRICHIN;

/

--
-- RENEW_KLS_PROD_GR_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Prod_gr_kons (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_PROD_GR_KONS
    SET (ABBR, NAME)
	  = (SELECT A.PROD_GRP,A.PROD_GRP
  	     FROM load_buffer.kod_grp A WHERE A.prod_kod=KLS_PROD_GR_KONS.id_gr)
    WHERE EXISTS (SELECT NULL FROM load_buffer.kod_grp A WHERE A.prod_kod=KLS_PROD_GR_KONS.id_gr);

  INSERT INTO KLS_PROD_GR_KONS (ID_GR, ABBR, NAME)
	(SELECT  A.PROD_kod,A.prod_grp,A.prod_grp
  	   FROM load_buffer.kod_grp A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_PROD_GR_KONS C WHERE C.id_gr=A.prod_kod));

  COMMIT;
  	   
END Renew_Kls_Prod_gr_kons;

/

--
-- RENEW_KLS_ST_PRIH_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_St_PRIH_KONS(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_ST_PRIH_KONS
    SET (NAME) =
	    (SELECT A.naim_st FROM load_buffer.st_prich A WHERE A.st_prich=KLS_ST_PRIH_KONS.ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.st_prich A WHERE A.st_prich=KLS_ST_PRIH_KONS.ID);

  INSERT INTO KLS_ST_PRIH_KONS (ID,NAME)
    SELECT C.st_prich, C.naim_st FROM load_buffer.st_prich C
    WHERE NOT EXISTS (SELECT NULL FROM KLS_ST_PRIH_KONS D WHERE D.ID=C.ST_PRICH);

  COMMIT;

END Renew_Kls_St_PRIH_KONS;

/

--
-- RENEW_KLS_ST_RASH_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_St_RASH_KONS(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_ST_RASH_KONS
    SET (NAME) =
	    (SELECT A.naim_ras FROM load_buffer.st_ras A WHERE A.st_ras=KLS_ST_RASH_KONS.ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.st_ras A WHERE A.st_ras=KLS_ST_RASH_KONS.ID);

  INSERT INTO KLS_ST_RASH_KONS (ID,NAME)
    SELECT C.st_ras, C.naim_ras FROM load_buffer.st_ras C
    WHERE NOT EXISTS (SELECT NULL FROM KLS_ST_RASH_KONS D WHERE D.ID=C.ST_ras);

  COMMIT;

END Renew_Kls_St_RASH_KONS;

/

--
-- RENEW_KLS_TABLPOK  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_TABLPOK (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
-- RETURN;
 UPDATE KLS_TABLPOK
    SET (NPP,SORTBY,NORMTU,DATEUPLOAD) =
	    (SELECT A.NPP,A.SORTBY,RTRIM(LTRIM(A.NORMTU || A.MNORMTU)),nvl(A.DATEUPLOAD,sysdate) FROM load_buffer.NTABLPOK A
		  WHERE A.KOD_NPR=KLS_TABLPOK.PROD_ID_NPR AND
		        A.KODIF_ID=KLS_TABLPOK.KODIF_ID)
  WHERE EXISTS (SELECT * FROM load_buffer.NTABLPOK B
                 where B.KOD_NPR=KLS_TABLPOK.PROD_ID_NPR AND
				       B.KODIF_ID=KLS_TABLPOK.KODIF_ID);

  COMMIT;

  INSERT INTO KLS_TABLPOK (PROD_ID_NPR,KODIF_ID,NPP,SORTBY,NORMTU,DATEUPLOAD)
    (SELECT C.KOD_NPR,C.KODIF_ID,C.NPP,C.SORTBY,RTRIM(LTRIM(C.NORMTU || C.MNORMTU)),NVL(C.DATEUPLOAD,sysdate) FROM load_buffer.NTABLPOK C
      WHERE not exists (SELECT * FROM KLS_TABLPOK
                 WHERE C.KOD_NPR=KLS_TABLPOK.PROD_ID_NPR AND
				       C.KODIF_ID=KLS_TABLPOK.KODIF_ID));

  COMMIT;

  DELETE FROM KLS_TABLPOK WHERE NOT EXISTS
    (SELECT * from load_buffer.NTABLPOK E WHERE E.KOD_NPR = KLS_TABLPOK.PROD_ID_NPR AND
	                                            E.KODIF_ID=KLS_TABLPOK.KODIF_ID);

  COMMIT;
END RENEW_KLS_TABLPOK;
/

--
-- RENEW_KLS_UPAK  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Upak (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_UPAK
        SET (NAME, ABBR, VOL_FAS, KOD_MOSC)
        = (SELECT A.NAIM_UP, a.NAIUP_K, A.VOL_FAS, A.KOD_MOSK
			 FROM load_buffer.vid_upak A
			 WHERE A.TARA=KLS_UPAK.ID)
    WHERE EXISTS (SELECT NULL
			 FROM load_buffer.vid_upak A
			 WHERE A.TARA=KLS_UPAK.ID);
  COMMIT;

  INSERT INTO KLS_UPAK (ID,NAME,ABBR, VOL_FAS,KOD_MOSC)
	           (SELECT A.TARA, A.NAIM_UP, a.NAIUP_K, A.VOL_FAS, A.KOD_MOSK 
			   FROM load_buffer.vid_upak A
      WHERE NOT EXISTS (SELECT D.ID FROM KLS_UPAK D WHERE D.ID=A.TARA));
  COMMIT;

END Renew_Kls_Upak;

/

--
-- RENEW_KLS_UPAK_2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Upak_2 (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_UPAK
        SET (NAME, KOD_MOSC)
        = (SELECT A.NAIM_UPAK, A.PROD_UPAK 
			 FROM load_buffer.kod_upak A
			 WHERE TO_NUMBER(A.PROD_UPAK)=KLS_UPAK.ID)
    WHERE EXISTS (SELECT NULL
			 FROM load_buffer.kod_upak A
			 WHERE TO_NUMBER(A.PROD_UPAK)=KLS_UPAK.ID)
	  and id<>0;
  COMMIT;

  INSERT INTO KLS_UPAK (ID,NAME,KOD_MOSC)
	           (SELECT TO_NUMBER(C.PROD_UPAK), C.NAIM_UPAK, C.PROD_UPAK 
			   FROM load_buffer.kod_upak C
      WHERE NOT EXISTS (SELECT D.ID FROM KLS_UPAK D WHERE D.ID=TO_NUMBER(C.prod_upak))
	    and c.prod_upak<>0);
  COMMIT;

END Renew_Kls_Upak_2;
/

--
-- RENEW_KLS_USER  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_USER(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_user
    set user_name = (SELECT A.fio FROM load_buffer.ident A WHERE A.kod=kls_user.id)
    where exists (SELECT B.kod FROM load_buffer.ident B WHERE B.kod=kls_user.id);

  INSERT INTO kls_user (id, user_name) (SELECT C.kod, C.fio FROM load_buffer.ident C
    WHERE not exists (SELECT D.id FROM kls_user D WHERE D.ID=C.KOD));

--  DELETE FROM kls_user WHERE not exists (SELECT E.kod FROM load_buffer.ident E WHERE E.kod=kls_user.ID);

  COMMIT;

END RENEW_KLS_user;

/

--
-- RENEW_KLS_USL_OPL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_usl_opl (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_usl_opl
    set (name,kol_dn) = (SELECT A.nain_opl,a.kol_dn FROM load_buffer.usl_opl A WHERE A.kod_opl=kls_usl_opl.id)
    where exists (SELECT B.kod_opl FROM load_buffer.usl_opl B where B.kod_opl=kls_usl_opl.id);

  INSERT INTO kls_usl_opl (SELECT C.kod_opl, C.nain_opl, C.kol_dn FROM load_buffer.usl_opl C
    WHERE not exists (SELECT D.id FROM kls_usl_opl D where D.id=C.kod_opl));
  COMMIT;

END RENEW_KLS_usl_opl;

/

--
-- RENEW_KLS_VAGONTYPE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VAGONTYPE (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE kls_vagontype
    set (vagontype_name,ed_izm) =
	(SELECT name,ed_izm FROM load_buffer.vag_type WHERE kod=id)
     where EXISTS (SELECT kod FROM load_buffer.vag_type  WHERE kod=id);


  INSERT INTO kls_vagontype (id,vagontype_name,ed_izm)
	(SELECT kod,name,ed_izm FROM load_buffer.vag_type
    WHERE not exists (SELECT id FROM kls_vagontype WHERE id=kod));

  COMMIT;
END RENEW_KLS_VAGONTYPE;

/

--
-- RENEW_KLS_VAGON_VZLIV  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VAGON_VZLIV (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE kls_vagon_vzliv
    set (VOLUME) =
	(SELECT obc FROM load_buffer.cist_vsl WHERE typec=kalibr_id and vzlvc=vzliv)
  where EXISTS 
	(SELECT null FROM load_buffer.cist_vsl WHERE typec=kalibr_id and vzlvc=vzliv);


  INSERT INTO kls_vagon_vzliv (kalibr_id,vzliv,VOLUME)
	(SELECT typec,vzlvc,obc FROM load_buffer.cist_vsl
      WHERE not exists 
	    (SELECT null FROM kls_vagon_vzliv WHERE typec=kalibr_id and vzlvc=vzliv));

  COMMIT;
END RENEW_KLS_VAGON_VZLIV;

/

--
-- RENEW_KLS_VAGOWNER_MOS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Vagowner_mos (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE KLS_VAGOWNER_MOS
    SET (ABBR,NAME) =
	(SELECT TIPV_SHORT, TIPV_NAME 
	   FROM load_buffer.TRANS_TYPES WHERE tipv=ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.TRANS_TYPES B WHERE B.tipv=KLS_VAGOWNER_MOS.ID);

  INSERT INTO KLS_VAGOWNER_MOS (ID,abbr,NAME)
	(SELECT tipv,TIPV_SHORT, TIPV_NAME 
	   FROM load_buffer.TRANS_TYPES
    WHERE NOT EXISTS (SELECT NULL FROM KLS_VAGOWNER_MOS WHERE ID=tipv));

  COMMIT;

END Renew_Kls_Vagowner_mos;

/

--
-- RENEW_KLS_VALPASP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VALPASP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE KLS_VALPASP
    set (QUAL,DATEUPLOAD) =
	    (SELECT A.QUAL,a.DATEUPLOAD FROM load_buffer.VALPASP A
		  WHERE A.KOD=KLS_VALPASP.PASP_ID AND
		        A.KODIF_ID=KLS_VALPASP.KODIF_ID)
  where exists (SELECT * FROM load_buffer.VALPASP
                 where load_buffer.VALPASP.KOD=KLS_VALPASP.PASP_ID AND
				       load_buffer.VALPASP.KODIF_ID=KLS_VALPASP.KODIF_ID);

  COMMIT;

  INSERT INTO KLS_VALPASP (PASP_ID,KODIF_ID,QUAL,DATEUPLOAD)
    (SELECT C.KOD,C.KODIF_ID,C.QUAL,C.DATEUPLOAD FROM load_buffer.VALPASP C
      WHERE not exists (SELECT * FROM KLS_VALPASP
                 WHERE C.KOD=KLS_VALPASP.PASP_ID AND
				       C.KODIF_ID=KLS_VALPASP.KODIF_ID));

  COMMIT;

  DELETE FROM KLS_VALPASP WHERE NOT EXISTS (SELECT * from load_buffer.VALPASP E WHERE E.KOD = KLS_VALPASP.PASP_ID AND E.KODIF_ID=KLS_VALPASP.KODIF_ID) AND
     KLS_VALPASP.DATEUPLOAD BETWEEN date_beg AND date_end;

  COMMIT;
END RENEW_KLS_VALPASP;

/

--
-- RENEW_KLS_VALSVED_REESTR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VALSVED_REESTR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE /*+ RULE */ KLS_VALSVED
    set (QUAL,DATEUPLOAD) =
	    (SELECT A.QUAL,A.DATEUPLOAD FROM load_buffer.VALSVED_REESTR A
		  WHERE A.SVED_ID=KLS_VALSVED.SVED_ID AND
		        A.KODIF_ID=KLS_VALSVED.KODIF_ID)
  where exists (SELECT * FROM load_buffer.VALSVED_REESTR B
                 where B.SVED_ID=KLS_VALSVED.SVED_ID AND
				       B.KODIF_ID=KLS_VALSVED.KODIF_ID)
		AND SVED_FLG_OPERDATA=1 AND FROM_DBF=1;

  INSERT INTO KLS_VALSVED (SVED_ID,SVED_FLG_OPERDATA,FROM_DBF,KODIF_ID,QUAL,DATEUPLOAD)
    (SELECT C.SVED_ID,1,1,C.KODIF_ID,C.QUAL,C.DATEUPLOAD FROM load_buffer.VALSVED_REESTR C
      WHERE not exists (SELECT D.SVED_ID FROM KLS_VALSVED D
                 WHERE C.SVED_ID=D.SVED_ID AND
				       1=D.SVED_FLG_OPERDATA AND
				       C.KODIF_ID=D.KODIF_ID));

  DELETE /*+ RULE */ FROM KLS_VALSVED A WHERE A.SVED_FLG_OPERDATA=1 AND A.FROM_DBF=1 AND
    (NOT EXISTS (SELECT E.SVED_ID from load_buffer.VALSVED_REESTR E
	            WHERE E.SVED_ID = A.SVED_ID AND
				      1=A.SVED_FLG_OPERDATA AND
					  E.KODIF_ID=A.KODIF_ID) OR
    EXISTS (SELECT F.SVED_ID from KLS_VALSVED F
            WHERE F.SVED_FLG_OPERDATA=0 AND F.SVED_ID=A.SVED_ID));
  COMMIT;
END RENEW_KLS_VALSVED_REESTR;

/

--
-- RENEW_KLS_VALSVED_REESTR_MESTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VALSVED_REESTR_MESTO (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  vMesto NUMBER;
  vType NUMBER;
BEGIN

IF param1 || ' ' =' ' THEN --- место не указано
  RETURN;
ELSE
  vMesto:=TO_NUMBER(param1);
END IF;

IF param2 || ' ' =' ' THEN --- тип оперативки
  vType:=0;
ELSE
  vType:=TO_NUMBER(param2);
END IF;

UPDATE /*+ RULE */ KLS_VALSVED
    set (QUAL,DATEUPLOAD) =
	    (SELECT A.QUAL,A.DATEUPLOAD FROM load_buffer.VALSVED_REESTR A
		  WHERE A.SVED_ID=KLS_VALSVED.SVED_ID AND
		        A.KODIF_ID=KLS_VALSVED.KODIF_ID AND
				A.MESTO=vMesto)
  where exists (SELECT * FROM load_buffer.VALSVED_REESTR B
                 where B.SVED_ID=KLS_VALSVED.SVED_ID AND
				       B.KODIF_ID=KLS_VALSVED.KODIF_ID AND
					   B.MESTO=vMesto)
		AND SVED_FLG_OPERDATA=1 AND FROM_DBF=1;

INSERT INTO KLS_VALSVED (SVED_ID,SVED_FLG_OPERDATA,FROM_DBF,KODIF_ID,QUAL,DATEUPLOAD)
    (SELECT C.SVED_ID,1,1,C.KODIF_ID,C.QUAL,C.DATEUPLOAD FROM load_buffer.VALSVED_REESTR C
      WHERE C.MESTO=vMesto AND
	        not exists (SELECT D.SVED_ID FROM KLS_VALSVED D
                        WHERE C.SVED_ID=D.SVED_ID AND
				              1=D.SVED_FLG_OPERDATA AND
                              C.KODIF_ID=D.KODIF_ID));

COMMIT;

IF vType=0 THEN  --- Если полная оперативка
  DELETE /*+ RULE */ FROM  KLS_VALSVED A WHERE A.SVED_FLG_OPERDATA=1 AND A.FROM_DBF=1 AND
    (NOT EXISTS (SELECT E.SVED_ID from load_buffer.VALSVED_REESTR E
	            WHERE E.SVED_ID = A.SVED_ID AND
				      1=A.SVED_FLG_OPERDATA AND
					  E.KODIF_ID=A.KODIF_ID) OR
    EXISTS (SELECT F.SVED_ID from KLS_VALSVED F
            WHERE F.SVED_FLG_OPERDATA=0 AND F.SVED_ID=A.SVED_ID));
END IF;
COMMIT;

END RENEW_KLS_VALSVED_REESTR_MESTO;

/

--
-- RENEW_KLS_VIDDOG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VIDDOG (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_viddog
    set (viddog_name,is_agent) = (SELECT A.name,A.is_agent FROM load_buffer.vid_dog A WHERE A.vid_dog=kls_viddog.id)
    where exists (SELECT B.vid_dog FROM load_buffer.vid_dog B WHERE B.vid_dog=kls_viddog.id);

  INSERT INTO kls_viddog (id,viddog_name,is_agent)
   (SELECT C.vid_dog,C.name,C.is_agent FROM load_buffer.vid_dog C
    WHERE not exists (SELECT D.id FROM kls_viddog D WHERE D.id=C.vid_dog));
  COMMIT;

END RENEW_KLS_VIDDOG;

/

--
-- RENEW_KLS_VID_USL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VID_USL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_VID_USL
    set usl_name = (SELECT A.naim FROM load_buffer.vid_usl A WHERE A.kod=kls_vid_usl.id)
    where exists (SELECT B.kod FROM load_buffer.vid_usl B where B.kod=kls_vid_usl.id);

  INSERT INTO kls_VID_USL (ID,USL_NAME) (SELECT C.kod, C.naim FROM load_buffer.vid_usl C
    WHERE not exists (SELECT D.id FROM kls_VID_USL D where D.id=C.kod));
  COMMIT;

END RENEW_KLS_VID_USL;

/

--
-- RENEW_KTU2NPO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KTU2NPO (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
  IsFull NUMBER(1);
BEGIN

  UPDATE ktu_2_npo_sf
    set (NOM_SF,NPO_SF) =
	(SELECT a.NOM_SF,a.NPO_SF FROM load_buffer.ktu_2_npo A WHERE A.nom_dok=ktu_2_npo_sf.nom_dok)
    where exists (SELECT nom_dok FROM load_buffer.ktu_2_npo B WHERE B.nom_dok=ktu_2_npo_sf.nom_dok);
  COMMIT;

  INSERT INTO ktu_2_npo_sf
    (NOM_DOK,NOM_SF,NPO_SF)
	(SELECT a.nom_dok,a.NOM_SF,a.NPO_SF FROM load_buffer.ktu_2_npo A
  WHERE not exists (SELECT nom_dok FROM ktu_2_npo_sf C WHERE A.nom_dok=C.nom_dok));
  COMMIT;

  DELETE FROM ktu_2_npo_sf WHERE not exists
    (SELECT nom_dok FROM load_buffer.ktu_2_npo a WHERE a.nom_dok=ktu_2_npo_sf.nom_dok);

  COMMIT;

END RENEW_KTU2NPO;

/

--
-- RENEW_KVIT_ALFA  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_KVIT_ALFA (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

UPDATE MASTER.KVIT_ALFA SET
  (VES, KOL_NET, DATE_OTGR)
 = (SELECT VES, KOL_NET, DATE_OTGR
      FROM load_buffer.KVITALFA k
		  WHERE k.kvit_ID=KVIT_ALFA.kvit_ID AND k.con_id=kvit_alfa.con_id)
  WHERE EXISTS (SELECT NULL FROM load_buffer.KVITALFA k WHERE k.kvit_ID=KVIT_ALFA.kvit_ID AND k.con_id=kvit_alfa.con_id);

INSERT INTO MASTER.KVIT_ALFA
     (CON_ID, KVIT_ID, VES, KOL_NET, DATE_OTGR)
      (SELECT CON_ID, KVIT_ID, VES, KOL_NET, DATE_OTGR
        FROM load_buffer.KVITALFA k
        WHERE NOT EXISTS (SELECT NULL FROM MASTER.KVIT_ALFA WHERE KVIT_ALFA.kvit_ID=k.kvit_ID AND k.con_id=kvit_alfa.con_id));

COMMIT;		

DELETE FROM MASTER.KVIT_ALFA A WHERE 
    NOT EXISTS (SELECT NULL FROM load_buffer.KVITALFA k WHERE k.kvit_ID=A.kvit_ID AND k.con_id=A.con_id) AND
    A.date_otgr BETWEEN date_beg AND date_end;

COMMIT;

END Renew_KVIT_ALFA;

/

--
-- RENEW_K2N_KVIT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_K2N_KVIT (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  INSERT INTO ktu_2_npo_pref_kvit (pref_name)
   (SELECT C.pref_name FROM load_buffer.k2n_kvit C
    WHERE not exists (SELECT * FROM ktu_2_npo_pref_kvit D where D.pref_name=C.pref_name));

  COMMIT;

END RENEW_K2N_KVIT;

/

--
-- RENEW_K2N_SVED  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_K2N_SVED (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  INSERT INTO ktu_2_npo_pref_sved (pref_name)
   (SELECT C.pref_name FROM load_buffer.k2n_sved C
    WHERE not exists (SELECT * FROM ktu_2_npo_pref_sved D where D.pref_name=C.pref_name));

  COMMIT;

END RENEW_K2N_SVED;

/

--
-- RENEW_MESTO_LOG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Mesto_Log(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  
/*  INSERT INTO MESTO_LOG (LOG_ID, LOG_INFO, DATE_LOG, PROG_NAME, MESTO_ID, EVENT_ID,  USER_ID)
  (SELECT A.log_ID, A.LOG_INFO, TO_DATE(TO_CHAR(A.log_date,'dd.mm.yyyy') || ' ' || A.log_time,'dd.mm.yyyy hh24:mi:ss'), A.PROG_NAME, A.MESTO, A.EVENT_ID, A.USER_ID FROM load_buffer.protokol A
    WHERE NOT EXISTS (SELECT B.log_id FROM MESTO_LOG B WHERE B.log_id=A.log_id));
*/
  COMMIT;

END Renew_Mesto_Log;

/

--
-- RENEW_MONTH_ALFA  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_MONTH_ALFA (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH_ALFA') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE MASTER.MONTH_ALFA M_M
    SET (XCONFIRM, DATE_PLAN, KOL_NET, MON_DOB, MON_DELIV, 
	     N_MAR_POR, N_MAR_DATE, PRODUCER_ID, PRODUCER_NAME, ROUT_NAME, 
		 CONTRACT, CONTRACT_DATE, BUYER_ID, BUYER_NAME, EXPED_ID, EXPED_NAME, 
		 GROTP_ID, GROTP_NAME, POLUCH_ID, POLUCH_NAME, 
		 INCOTERMS_RUS_ID, INCOTERMS_RUS_NAME, STAN_ID, STAN_NAME, STAN_KOD, STATUS
		 )
	 = (SELECT XCONFIRM, M_Y, QUANTITY, MON_D, MON_DELIV, 
	     TELEGA, T_DATE, RES_ID, JL, ROUT_NAME, 
		 CONTRACT, DATA, BUYER_ID, BUYER, EXPEDITOR, EXPED_NAME, 
		 OTPRAV, OTPR_NAME, POLU, POLU_NAME, 
		 INCO, TERMS_RUS, STAN, POINT_NAME, UUN, ORD_STATUS
          FROM load_buffer.ALFAMON L_M 
		 WHERE L_M.con_id=M_M.con_id)
    WHERE EXISTS (SELECT NULL
          FROM load_buffer.ALFAMON L_M
		 WHERE L_M.con_id=M_M.con_id);

  INSERT INTO MASTER.MONTH_ALFA
        (CON_ID, XCONFIRM, DATE_PLAN, KOL_NET, MON_DOB, MON_DELIV, 
	     N_MAR_POR, N_MAR_DATE, PRODUCER_ID, PRODUCER_NAME, ROUT_NAME, 
		 CONTRACT, CONTRACT_DATE, BUYER_ID, BUYER_NAME, EXPED_ID, EXPED_NAME, 
		 GROTP_ID, GROTP_NAME, POLUCH_ID, POLUCH_NAME, 
		 INCOTERMS_RUS_ID, INCOTERMS_RUS_NAME, STAN_ID, STAN_NAME, STAN_KOD, STATUS)
	 (SELECT CON_ID, XCONFIRM, M_Y, QUANTITY, MON_D, MON_DELIV, 
	     TELEGA, T_DATE, RES_ID, JL, ROUT_NAME, 
		 CONTRACT, DATA, BUYER_ID, BUYER, EXPEDITOR, EXPED_NAME, 
		 OTPRAV, OTPR_NAME, POLU, POLU_NAME, 
		 INCO, TERMS_RUS, STAN, POINT_NAME, UUN, ORD_STATUS
          FROM load_buffer.ALFAMON L_M 
		 WHERE NOT EXISTS (SELECT NULL FROM MASTER.MONTH_ALFA M_M WHERE M_M.con_id=L_M.con_id));

  DELETE FROM MASTER.MONTH_ALFA M_M 
   WHERE NOT EXISTS (SELECT NULL FROM load_buffer.ALFAMON L_M WHERE L_M.con_id = M_M.con_id) 
    AND M_M.date_plan BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_MONTH_ALFA;

/

--
-- RENEW_MONTH_REE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_MONTH_REE (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE master.month_ree A
    set (ves)
	 = (SELECT m.val_zd
          FROM load_buffer.UHTA_REE M
		 WHERE A.nom_zd=m.nom_zd AND A.date_ree=M.date_ree AND A.dop_ree=M.dop_ree)
    WHERE exists (SELECT m.val_zd
                    FROM load_buffer.UHTA_REE M
                   WHERE A.nom_zd=m.nom_zd AND A.date_ree=M.date_ree AND A.dop_ree=M.dop_ree);
  COMMIT;

  INSERT INTO master.month_ree
        (date_ree,dop_ree,nom_zd,ves)
	    (SELECT m.date_ree,m.dop_ree,m.nom_zd,m.val_zd
          FROM load_buffer.UHTA_REE M
		 WHERE not exists (SELECT A.nom_zd FROM master.month_ree A WHERE A.date_ree=M.date_ree AND A.dop_ree=M.dop_ree AND A.nom_zd=m.nom_zd));
  COMMIT;

  DELETE FROM master.month_ree A 
   WHERE NOT EXISTS (SELECT M.NOM_ZD from load_buffer.UHTA_REE M WHERE M.DATE_REE=A.DATE_REE AND M.DOP_REE=A.DOP_REE AND M.NOM_ZD = A.NOM_ZD) AND
     A.date_ree BETWEEN date_beg AND date_end;

  COMMIT;

END RENEW_MONTH_REE;

/

--
-- RENEW_MOVEPROD_OST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.renew_moveprod_ost (
   date_beg DATE:= TRUNC (SYSDATE, 'MONTH'),
   date_end DATE:= SYSDATE,
   param1     VARCHAR2 := '',
   param2     VARCHAR2 := '',
   param3     VARCHAR2 := ''
)
IS
   s_tmp    NUMBER;
   s_tmp1   NUMBER;
   s_tmp2   NUMBER;
BEGIN
--Удаляем
   DELETE FROM moveprod_ost
         WHERE MONTH = date_end;

   COMMIT;

-- Проход по остаткам и списание остатков
   FOR rec1 IN (SELECT   /*+ FIRST_ROWS */
                         prod_id_npr, q_all, period, oper
                    FROM moveprod_ost
                   WHERE MONTH = date_beg
                ORDER BY prod_id_npr, period)
   LOOP
      s_tmp := 0;

      IF rec1.oper = 0
      THEN                                                  -- Просто остатки
         SELECT /*+ FIRST_ROWS */
                SUM (m.quan)
           INTO s_tmp
           FROM moveprod m
          WHERE m.oper IN (3, 4, 2)
            AND m.period = rec1.period
            AND m.prod_id_npr = rec1.prod_id_npr
			AND m.month=date_beg;
      ELSE                                               --Остатки на хранении
         SELECT /*+ FIRST_ROWS */
                SUM (m.quan)
           INTO s_tmp
           FROM moveprod m
          WHERE m.oper = 9
            AND m.period = rec1.period
            AND m.prod_id_npr = rec1.prod_id_npr
			AND m.month=date_beg;
      END IF;

      INSERT INTO MASTER.moveprod_ost
                  (prod_id_npr, q_all,
                   period, oper, MONTH
                  )
           VALUES (rec1.prod_id_npr, rec1.q_all - NVL (s_tmp, 0),
                   rec1.period, rec1.oper, date_end
                  );
   END LOOP;

   COMMIT;

-- Проход по отгрузке и формирование новых остатков
   FOR rec3 IN (SELECT   /*+ FIRST_ROWS */
                         prod_id_npr, SUM (quan) AS q_all, period,
                         DECODE (suboper, 10, 1, 0) AS oper, MONTH
                    FROM moveprod
                   WHERE ((oper = 1) OR (oper = 2)) AND month=date_beg
                GROUP BY prod_id_npr,
                         period,
                         DECODE (suboper, 10, 1, 0),
                         MONTH)
   LOOP
      s_tmp := 0;
      s_tmp1 := 0;
      s_tmp2 := 0;

      IF rec3.oper = 0
      THEN                                                  -- Просто остатки
         SELECT /*+ FIRST_ROWS */
                SUM (m.quan)
           INTO s_tmp
           FROM moveprod m
          WHERE m.oper IN (3, 9)
            AND m.period = rec3.period
            AND m.prod_id_npr = rec3.prod_id_npr
			AND m.month=date_beg;

         --Остатки на хранении
         SELECT /*+ FIRST_ROWS */
                SUM (m.quan)
           INTO s_tmp2
           FROM moveprod m
          WHERE m.oper = 2
            AND m.period = rec3.period
            AND m.prod_id_npr = rec3.prod_id_npr
			AND m.month=date_beg;
      END IF;

      SELECT /*+ FIRST_ROWS */
             SUM (m.q_all)
        INTO s_tmp1
        FROM moveprod_ost m
       WHERE m.oper = rec3.oper
         AND m.period = rec3.period
         AND m.prod_id_npr = rec3.prod_id_npr
         AND m.MONTH = date_end;

      IF NVL (s_tmp1, 0) <> 0
      THEN
         UPDATE moveprod_ost m
            SET m.q_all = rec3.q_all + s_tmp1
          WHERE m.oper = rec3.oper
            AND m.period = rec3.period
            AND m.prod_id_npr = rec3.prod_id_npr
            AND m.MONTH = date_end;
      ELSE
         INSERT INTO MASTER.moveprod_ost
                     (prod_id_npr,
                      q_all,
                      period, oper, MONTH
                     )
              VALUES (rec3.prod_id_npr,
                      rec3.q_all - NVL (s_tmp, 0) - NVL (s_tmp2, 0),
                      rec3.period, rec3.oper, date_end
                     );
      END IF;
   END LOOP;

   COMMIT;

-- убираем записи с пустым количеством
   DELETE FROM moveprod_ost
         WHERE q_all = 0;

   COMMIT;
END renew_moveprod_ost;

/

--
-- RENEW_MOVEPROD_RECALC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.renew_moveprod_recalc (
   date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
   date_end   DATE := SYSDATE,
   param1     VARCHAR2 := '',
   param2     VARCHAR2 := '',
   param3     VARCHAR2 := ''
)
IS
   np      VARCHAR2 (5);
   q_all   NUMBER;
   per     DATE;
   s_tmp   NUMBER;
   q_n     NUMBER;
   q_o     NUMBER;
BEGIN
   FOR rec1 IN (SELECT   prod_id_npr, q_all, period, oper, MONTH
                    FROM moveprod_ost
                   WHERE MONTH = date_beg
                ORDER BY prod_id_npr, period)
   LOOP
      np := rec1.prod_id_npr;
      q_all := rec1.q_all;
      per := rec1.period;
      s_tmp := 0;

      IF rec1.oper = 1
      THEN
         FOR rec2 IN (SELECT   /*+ FIRST_ROWS */
                               MONTH, oper, kind, prod_id_npr, quan, period,
                               buyinvc, idinvoice, idclient, selldate,
                               suboper, num_kvit, num_cist, is_re, ID,
                               moveprod_id, date_oforml
                          FROM moveprod
                         WHERE prod_id_npr = np AND oper = 9 AND is_re = 0 AND month = date_beg
                      ORDER BY date_oforml,
                               num_kvit,
                               ID,
                               SIGN (quan * -1),
                               idinvoice)
         LOOP
            IF s_tmp < q_all
            THEN
               s_tmp := s_tmp + rec2.quan;

               IF s_tmp > q_all
               THEN
                  BEGIN
                     q_n := s_tmp - q_all;
                     q_o := rec2.quan - q_n;

                     UPDATE moveprod
                        SET is_re = 1,
                            period = per,
                            quan = q_o
                      WHERE moveprod_id = rec2.moveprod_id;

                     INSERT INTO moveprod
                                 (MONTH, oper, kind,
                                  prod_id_npr, quan, period,
                                  buyinvc, idinvoice,
                                  idclient, selldate, suboper,
                                  num_kvit, num_cist, is_re, ID,
                                  date_oforml
                                 )
                          VALUES (rec2.MONTH, rec2.oper, rec2.kind,
                                  rec2.prod_id_npr, q_n, rec2.period,
                                  rec2.buyinvc, rec2.idinvoice,
                                  rec2.idclient, rec2.selldate, rec2.suboper,
                                  rec2.num_kvit, rec2.num_cist, 0, rec2.ID,
                                  rec2.date_oforml
                                 );
                  END;
               ELSE
                  UPDATE moveprod
                     SET is_re = 1,
                         period = per
                   WHERE moveprod_id = rec2.moveprod_id;
               END IF;
            END IF;
         END LOOP;
      ELSE
         FOR rec3 IN (SELECT   /*+ FIRST_ROWS */
                               MONTH, oper, kind, prod_id_npr, quan, period,
                               buyinvc, idinvoice, idclient, selldate,
                               suboper, num_kvit, num_cist, is_re, ID,
                               moveprod_id, date_oforml
                          FROM moveprod
                         WHERE prod_id_npr = np
                           AND (oper = 3 OR oper = 2)
                           AND is_re = 0
						   AND month = date_beg
                      ORDER BY date_oforml,
                               num_kvit,
                               ID,
                               SIGN (quan * -1),
                               idinvoice)
         LOOP
            IF s_tmp < q_all
            THEN
               s_tmp := s_tmp + rec3.quan;

               IF s_tmp > q_all
               THEN
                  BEGIN
                     q_n := s_tmp - q_all;
                     q_o := rec3.quan - q_n;

                     UPDATE moveprod
                        SET is_re = 1,
                            period = per,
                            quan = q_o
                      WHERE moveprod_id = rec3.moveprod_id;

                     INSERT INTO moveprod
                                 (MONTH, oper, kind,
                                  prod_id_npr, quan, period,
                                  buyinvc, idinvoice,
                                  idclient, selldate, suboper,
                                  num_kvit, num_cist, is_re, ID,
                                  date_oforml
                                 )
                          VALUES (rec3.MONTH, rec3.oper, rec3.kind,
                                  rec3.prod_id_npr, q_n, rec3.period,
                                  rec3.buyinvc, rec3.idinvoice,
                                  rec3.idclient, rec3.selldate, rec3.suboper,
                                  rec3.num_kvit, rec3.num_cist, 0, rec3.ID,
                                  rec3.date_oforml
                                 );
                  END;
               ELSE
                  UPDATE moveprod
                     SET is_re = 1,
                         period = per
                   WHERE moveprod_id = rec3.moveprod_id;
               END IF;
            END IF;
         END LOOP;
      END IF;
   END LOOP;

   COMMIT;
END renew_moveprod_recalc;

/

--
-- RENEW_MOVEPROD_SFDBF  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.renew_moveprod_sfdbf (
   date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
   date_end   DATE := SYSDATE,
   param1     VARCHAR2 := '',
   param2     VARCHAR2 := '',
   param3     VARCHAR2 := ''
)
IS
BEGIN
-- Удаляем
   DELETE FROM sfdbf.moveprod
         WHERE MONTH = date_beg;

   COMMIT;

   INSERT INTO sfdbf.moveprod
               (MONTH, idinvoice, quan, period, kvit_id, buyinvc)
      (SELECT MONTH, idinvoice, quan, period, ID, buyinvc
         FROM MASTER.moveprod
        WHERE oper <> 1 and month=date_beg);

   COMMIT;
END renew_moveprod_sfdbf;

/

--
-- RENEW_OPL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Opl (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN
/*
UPDATE master.OPL SET
  (KOL,DAV_ORG,PLAT_POR,NOM_POR,KOD_PLD,N_SCHET,DEN_SOP,PR_DOG,BANK,NAZN_PLAT,EMITENT,K_SCHET,
   SUMMA,VZ,INV,DATA_POST,KOD_PLP,RS_PLD,STN_DOK,NOM_DOG,DATA_VIP,BANK_NOM,TIP,PLAT_DOG,PROGRAM,
   T_DATE,PATH,NAM_VEK,MFO_PLD,T_TIME,AVIZO,DISKONT,DATECANCEL,DATA_POR,dog_id,is_snp)
 = (SELECT KOL,DAV_ORG,PLAT_POR,NOM_POR,KOD_PLD,N_SCHET,IIF(DEN_SOP,1,0),opl.PR_DOG,BANK,NAZN_PLAT,EMITENT,K_SCHET,
     SUMMA,IIF(VZ,1,0),INV,DATA_POST,KOD_PLP,RS_PLD,STN_DOK,NOM_DOG,DATA_VIP,BANK_NOM,TIP,PLAT_DOG,opl.PROGRAM,
     T_DATE,PATH,NAM_VEK,MFO_PLD,T_TIME,IIF(AVIZO,1,0),DISKONT,DATECANCEL,DATA_POR,dog.ID,poluch
      FROM load_buffer.opl, load_buffer.DOG
	 WHERE opl.NOM_DOG=dog.NUM_DOG AND OPL.NOM_DOK=master.OPL.NOM_DOK)
WHERE EXISTS (SELECT OPL.NOM_DOK FROM load_buffer.opl, load_buffer.DOG WHERE opl.NOM_DOG=dog.NUM_DOG AND OPL.NOM_DOK=master.OPL.NOM_DOK);

COMMIT;


INSERT  INTO master.opl
     (nom_dok,KOL,DAV_ORG,PLAT_POR,NOM_POR,KOD_PLD,N_SCHET,DEN_SOP,PR_DOG,BANK,NAZN_PLAT,EMITENT,K_SCHET,
      SUMMA,VZ,INV,DATA_POST,KOD_PLP,RS_PLD,STN_DOK,NOM_DOG,DATA_VIP,BANK_NOM,TIP,PLAT_DOG,PROGRAM,
      T_DATE,PATH,NAM_VEK,MFO_PLD,T_TIME,AVIZO,DISKONT,DATECANCEL,DATA_POR,dog_id,is_snp)
     (SELECT NOM_DOK,KOL,DAV_ORG,PLAT_POR,NOM_POR,KOD_PLD,N_SCHET,IIF(DEN_SOP,1,0),opl.PR_DOG,BANK,NAZN_PLAT,EMITENT,K_SCHET,
             SUMMA,IIF(VZ,1,0),INV,DATA_POST,KOD_PLP,RS_PLD,STN_DOK,NOM_DOG,DATA_VIP,BANK_NOM,TIP,PLAT_DOG,opl.PROGRAM,
             T_DATE,PATH,NAM_VEK,MFO_PLD,T_TIME,IIF(AVIZO,1,0),DISKONT,DATECANCEL,DATA_POR,dog.ID,poluch
        FROM load_buffer.opl, load_buffer.DOG
       WHERE load_buffer.opl.NOM_DOG=load_buffer.DOG.NUM_DOG and
	         NOT EXISTS (SELECT master.OPL.NOM_DOK FROM master.OPL WHERE master.OPL.NOM_DOK=load_buffer.opl.NOM_DOK));
*/
COMMIT;
/*
DELETE FROM master.OPL A WHERE
    NOT EXISTS (SELECT k.NOM_DOK FROM load_buffer.OPL k WHERE k.NOM_DOK = A.NOM_DOK) AND
    A.DATA_POST BETWEEN date_beg AND date_end;
*/
COMMIT;

END Renew_OPL;

/

--
-- RENEW_PRICHIN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Prichin (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE MASTER.PLAN_POST_PRICHIN M_P
    SET (TO_MOS, ORDNUNG, PLAN, IZM_PLAN, OBPR, NORMA, NORMA_OBPR, FACT, 
	     RAZN_TONN, RAZN_DAT, ZAYV_TONN, ZAYV_DAT, 
		 PRICHIN_ID, NOTE
		 )
	 = (SELECT TO_MOS, ORDNUNG, PLAN, IZM_PLAN, OBPR, NORMA, NORMA_OBPR, FACT, 
	           RAZN_TONN, RAZN_DAT, ZAYV_TONN, ZAYV_DAT, 
			   KOD_PRICH, NOTE
          FROM load_buffer.PRICHIN L_P, (SELECT * FROM KLS_PLANSTRU WHERE KOD_PGR=0) S
		 WHERE L_P.KOD_SGR=S.KOD_SGR
		   AND L_P.KOD_SPG=S.KOD_SPG
		   AND L_P.KOD_RZD=S.KOD_RZD
		   AND L_P.KOD_PRZ=S.KOD_PRZ
		   AND L_P.KOD_GRP=S.KOD_GRP
		   AND L_P.BEG_DATE=M_P.BEG_DATE
		   AND L_P.END_DATE=M_P.END_DATE
		   AND L_P.KOD_NPR=M_P.PROD_ID_NPR
		   AND S.ID=M_P.PLANSTRU_ID
		   AND L_P.KOD_SOBS=M_P.OWNER_ID)
    WHERE EXISTS (SELECT NULL
          FROM load_buffer.PRICHIN L_P, (SELECT * FROM KLS_PLANSTRU WHERE KOD_PGR=0) S
		 WHERE L_P.KOD_SGR=S.KOD_SGR
		   AND L_P.KOD_SPG=S.KOD_SPG
		   AND L_P.KOD_RZD=S.KOD_RZD
		   AND L_P.KOD_PRZ=S.KOD_PRZ
		   AND L_P.KOD_GRP=S.KOD_GRP
		   AND L_P.BEG_DATE=M_P.BEG_DATE
		   AND L_P.END_DATE=M_P.END_DATE
		   AND L_P.KOD_NPR=M_P.PROD_ID_NPR
		   AND S.ID=M_P.PLANSTRU_ID
		   AND L_P.KOD_SOBS=M_P.OWNER_ID);
  COMMIT;

  INSERT INTO MASTER.PLAN_POST_PRICHIN 
        (BEG_DATE, END_DATE, TO_MOS, ORDNUNG, PROD_ID_NPR, PLANSTRU_ID, OWNER_ID, 
		 PLAN, IZM_PLAN, OBPR, NORMA, NORMA_OBPR, FACT, RAZN_TONN, RAZN_DAT, 
		 ZAYV_TONN, ZAYV_DAT, PRICHIN_ID, NOTE)
	 (SELECT L_P.BEG_DATE, L_P.END_DATE, TO_MOS, ORDNUNG, KOD_NPR, S.ID, KOD_SOBS, 
	         PLAN, IZM_PLAN, OBPR, NORMA, NORMA_OBPR, FACT, RAZN_TONN, RAZN_DAT, 
			 ZAYV_TONN, ZAYV_DAT, KOD_PRICH, NOTE
          FROM load_buffer.PRICHIN L_P,(SELECT * FROM KLS_PLANSTRU WHERE KOD_PGR=0) S 
		 WHERE L_P.KOD_SGR=S.KOD_SGR
		   AND L_P.KOD_SPG=S.KOD_SPG
		   AND L_P.KOD_RZD=S.KOD_RZD
		   AND L_P.KOD_PRZ=S.KOD_PRZ
		   AND L_P.KOD_GRP=S.KOD_GRP
		   AND NOT EXISTS (SELECT NULL FROM MASTER.PLAN_POST_PRICHIN M_P 
		                    WHERE L_P.BEG_DATE=M_P.BEG_DATE
                              AND L_P.END_DATE=M_P.END_DATE
                              AND L_P.KOD_NPR=M_P.PROD_ID_NPR
                              AND S.ID=M_P.PLANSTRU_ID
                              AND L_P.KOD_SOBS=M_P.OWNER_ID));

   COMMIT;

  DELETE FROM MASTER.PLAN_POST_PRICHIN M_P 
    WHERE NOT EXISTS 
	  (SELECT NULL FROM load_buffer.PRICHIN L_P,(SELECT * FROM KLS_PLANSTRU WHERE KOD_PGR=0) S
		 WHERE L_P.KOD_SGR=S.KOD_SGR
		   AND L_P.KOD_SPG=S.KOD_SPG
		   AND L_P.KOD_RZD=S.KOD_RZD
		   AND L_P.KOD_PRZ=S.KOD_PRZ
		   AND L_P.KOD_GRP=S.KOD_GRP
		   AND L_P.BEG_DATE=M_P.BEG_DATE
		   AND L_P.END_DATE=M_P.END_DATE
		   AND L_P.KOD_NPR=M_P.PROD_ID_NPR
		   AND S.ID=M_P.PLANSTRU_ID
		   AND L_P.KOD_SOBS=M_P.OWNER_ID)
    AND M_P.END_DATE BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_Prichin;

/

--
-- RENEW_REAL_OPL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_real_Opl (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN
return;

UPDATE master.REAL_OPL SET
  (D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
   N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
   D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
   OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF)
 = (SELECT D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
           N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
           D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
           OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF
      FROM load_buffer.real_opl
	 WHERE REAL_OPL.NOM_DOK=master.real_OPL.NOM_DOK AND REAL_OPL.SOBSTV=master.real_OPL.SOBSTV AND REAL_OPL.ID=master.real_OPL.ID)
WHERE EXISTS (SELECT real_OPL.NOM_DOK FROM load_buffer.real_opl WHERE REAL_OPL.NOM_DOK=master.real_OPL.NOM_DOK AND REAL_OPL.SOBSTV=master.real_OPL.SOBSTV AND REAL_OPL.ID=master.real_OPL.ID);

COMMIT;


INSERT  INTO master.real_opl
     (NOM_DOK,SOBSTV,ID,D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
      N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
      D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
      OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF)
     (SELECT NOM_DOK,SOBSTV,ID,D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
             N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
             D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
             OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF
        FROM load_buffer.real_opl
       WHERE NOT EXISTS (SELECT master.real_OPL.NOM_DOK FROM master.real_OPL WHERE master.real_OPL.NOM_DOK=load_buffer.real_opl.NOM_DOK
             AND master.real_OPL.SOBSTV=load_buffer.real_opl.SOBSTV AND master.real_OPL.ID=load_buffer.real_opl.ID));

COMMIT;

DELETE FROM master.REAL_OPL A WHERE
    NOT EXISTS (SELECT k.NOM_DOK FROM load_buffer.real_OPL k WHERE k.NOM_DOK = A.NOM_DOK AND k.SOBSTV = A.SOBSTV AND k.ID = A.ID) ;

COMMIT;

END Renew_real_OPL;
/

--
-- RENEW_REAL_OPL_KTU  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_real_opl_ktu (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN
return;

UPDATE master.real_opl_ktu SET
  (D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
   N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
   D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
   OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF)
 = (SELECT D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
           N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
           D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
           OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF
      FROM load_buffer.real_opl_ktu
	 WHERE real_opl_ktu.NOM_DOK=master.real_opl_ktu.NOM_DOK AND real_opl_ktu.SOBSTV=master.real_opl_ktu.SOBSTV AND real_opl_ktu.ID=master.real_opl_ktu.ID)
WHERE EXISTS (SELECT real_opl_ktu.NOM_DOK FROM load_buffer.real_opl_ktu WHERE real_opl_ktu.NOM_DOK=master.real_opl_ktu.NOM_DOK AND real_opl_ktu.SOBSTV=master.real_opl_ktu.SOBSTV AND real_opl_ktu.ID=master.real_opl_ktu.ID);

COMMIT;


INSERT INTO master.real_opl_ktu
     (NOM_DOK,SOBSTV,ID,D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
      N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
      D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
      OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF)
     (SELECT NOM_DOK,SOBSTV,ID,D_41POK,VID_OPL,NDC_TR20,NDC_NAL03,CPEC_PROD,KR,UN_DOK,D_67,NDC_TR03,D_67POK,SUMMA_DOK1,CORR_DATE,
             N_SCHET,CN_PPZT,D_443,VES,DATASCHF,UBIT,USL_PPZT,NDC_NAL20,NDC_PPZT,ID_UB,D_191POK,DOG_REALP,
             D_442,SUM_AKCIZ,CPEC_TARIF,D_191,D_41,AVANS,DATA_POST,SUM_NACEN,SUM_NALIV,KOD_NFP,KOD_KR,
             OST_SUM,NDC_VN20,CLOSE_DATE,DATA_BUXG,NDC_VN03,CENA_NFP,CENA_POK,TAX_SALE,KOD_REALP,D_194,D_441,NOM_SF
        FROM load_buffer.real_opl_ktu
       WHERE NOT EXISTS (SELECT master.real_opl_ktu.NOM_DOK FROM master.real_opl_ktu WHERE master.real_opl_ktu.NOM_DOK=load_buffer.real_opl_ktu.NOM_DOK
             AND master.real_opl_ktu.SOBSTV=load_buffer.real_opl_ktu.SOBSTV AND master.real_opl_ktu.ID=load_buffer.real_opl_ktu.ID));

COMMIT;

DELETE FROM master.real_opl_ktu A WHERE
    NOT EXISTS (SELECT k.NOM_DOK FROM load_buffer.real_opl_ktu k WHERE k.NOM_DOK = A.NOM_DOK AND k.SOBSTV = A.SOBSTV AND k.ID = A.ID) ;

COMMIT;

END Renew_real_opl_ktu;
/

--
-- RENEW_TO_SS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_to_ss (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN
return;

IF DATE_BEG>=TO_DATE('01.01.2005','dd.mm.yyyy') OR
   DATE_END>=TO_DATE('01.01.2005','dd.mm.yyyy')  THEN
  RETURN;
END IF;     

UPDATE master.TO_SS SET
  (NOM_SF, DATA_DOK, DATA_KVIT, SUMMA_DOK, NOM_DOG, DATA_DOG, K_USL, KOD_PLAT, PRIM,
   PRIZN_CEN, KATEG_PR, KOD_NFP, CENA_NFP, DATE_CEN, VES, KOD_ZATAR, CEN_ZATAR, SUM_ZATAR, NACENKA,
   SUM_NACEN, D_41, SUM_AKCIZ, D_191, D_67, D_441, D_442, D_443, D_194, CPEC_PROD, CPEC_TARIF,
   SUMMA_POR, TIP_OTGR, KOD_GROTP, KOD_POTR, KOD_STAN, KOD_GD, FIO_ISPOL, M_VS, OLD_SF, OLD_NOM,
   OLD_DATA, DATA_BUXG, WRITE, GR_DVZ, OGR_TAR, KOD_USL, KSOB_USL, SUM_NALIV, NDC_NAL20, NDC_NAL03,
   NDC_VN20, NDC_VN03, NDC_TR20, NDC_TR03, VID_OPL, KOL_DN, USL_PPZT, NDC_PPZT, CN_PPZT, KOD_OTGR,
   VES_KOM, KOM_V, NDS_KOM, NDF_KOM, CN_KOM, PATH, T_DATE, T_TIME, VES_NAL, MESTO, M_KORR, G_KORR,
   G_KORR4, K_VARPOST, VIDOG, DEN_SOD, NOM_ZD, NOM_ZV, UN_CODE, MOSC_OUT, KOD_POST, KOD_SOB, SOB_GD,
   TAX_SALE, PRICE_GET, SUM_PGET, NDS_PGET, GSM_PGET, M_SS, Y_SS, PR_DIVIDE, NUM_SS, BILL_POS, DOG_ID,DOP_TARIF, NDC_DOPTAR)
 = (SELECT NOM_SF, DATA_DOK, DATA_KVIT, SUMMA_DOK, NOM_DOG, DATA_DOG, K_USL, to_ss.KOD_PLAT, to_ss.PRIM,
     PRIZN_CEN, KATEG_PR, KOD_NFP, CENA_NFP, DATE_CEN, VES, KOD_ZATAR, CEN_ZATAR, SUM_ZATAR, NACENKA,
     SUM_NACEN, D_41, SUM_AKCIZ, D_191, D_67, D_441, D_442, D_443, D_194, CPEC_PROD, CPEC_TARIF,
     SUMMA_POR, TIP_OTGR, KOD_GROTP, KOD_POTR, KOD_STAN, KOD_GD, FIO_ISPOL, M_VS, OLD_SF, OLD_NOM,
     OLD_DATA, DATA_BUXG, WRITE, GR_DVZ, OGR_TAR, KOD_USL, KSOB_USL, SUM_NALIV, NDC_NAL20, NDC_NAL03,
     NDC_VN20, NDC_VN03, NDC_TR20, NDC_TR03, VID_OPL, KOL_DN, USL_PPZT, NDC_PPZT, CN_PPZT, KOD_OTGR,
     VES_KOM, KOM_V, NDS_KOM, NDF_KOM, CN_KOM, PATH, T_DATE, T_TIME, VES_NAL, MESTO, M_KORR, G_KORR,
     G_KORR4, K_VARPOST, VIDOG, DEN_SOD, NOM_ZD, NOM_ZV, UN_CODE, MOSC_OUT, KOD_POST, KOD_SOB, SOB_GD,
     TAX_SALE, PRICE_GET, SUM_PGET, NDS_PGET, GSM_PGET, M_SS, Y_SS, PR_DIVIDE, NUM_SS, BILL_POS, DOG.ID,DOP_TARIF, NDC_DOPTAR
    FROM load_buffer.to_ss,load_buffer.dog WHERE to_ss.NOM_DOK=master.to_ss.NOM_DOK AND TO_SS.nom_dog=dog.NUM_DOG)
WHERE EXISTS (SELECT to_ss.NOM_DOK FROM load_buffer.to_ss,load_buffer.dog WHERE to_ss.NOM_DOK=master.to_ss.NOM_DOK AND TO_SS.nom_dog=dog.NUM_DOG);

COMMIT;


INSERT  INTO master.TO_SS
     (NOM_DOK,NOM_SF, DATA_DOK, DATA_KVIT, SUMMA_DOK, NOM_DOG, DATA_DOG, K_USL, KOD_PLAT, PRIM,
      PRIZN_CEN, KATEG_PR, KOD_NFP, CENA_NFP, DATE_CEN, VES, KOD_ZATAR, CEN_ZATAR, SUM_ZATAR, NACENKA,
      SUM_NACEN, D_41, SUM_AKCIZ, D_191, D_67, D_441, D_442, D_443, D_194, CPEC_PROD, CPEC_TARIF,
      SUMMA_POR, TIP_OTGR, KOD_GROTP, KOD_POTR, KOD_STAN, KOD_GD, FIO_ISPOL, M_VS, OLD_SF, OLD_NOM,
      OLD_DATA, DATA_BUXG, WRITE, GR_DVZ, OGR_TAR, KOD_USL, KSOB_USL, SUM_NALIV, NDC_NAL20, NDC_NAL03,
      NDC_VN20, NDC_VN03, NDC_TR20, NDC_TR03, VID_OPL, KOL_DN, USL_PPZT, NDC_PPZT, CN_PPZT, KOD_OTGR,
      VES_KOM, KOM_V, NDS_KOM, NDF_KOM, CN_KOM, PATH, T_DATE, T_TIME, VES_NAL, MESTO, M_KORR, G_KORR,
      G_KORR4, K_VARPOST, VIDOG, DEN_SOD, NOM_ZD, NOM_ZV, UN_CODE, MOSC_OUT, KOD_POST, KOD_SOB, SOB_GD,
      TAX_SALE, PRICE_GET, SUM_PGET, NDS_PGET, GSM_PGET, M_SS, Y_SS, PR_DIVIDE, NUM_SS, BILL_POS, DOG_ID,DOP_TARIF, NDC_DOPTAR)
     (SELECT NOM_DOK,NOM_SF, DATA_DOK, DATA_KVIT, SUMMA_DOK, NOM_DOG, DATA_DOG, K_USL, to_ss.KOD_PLAT, to_ss.PRIM,
          PRIZN_CEN, KATEG_PR, KOD_NFP, CENA_NFP, DATE_CEN, VES, KOD_ZATAR, CEN_ZATAR, SUM_ZATAR, NACENKA,
          SUM_NACEN, D_41, SUM_AKCIZ, D_191, D_67, D_441, D_442, D_443, D_194, CPEC_PROD, CPEC_TARIF,
          SUMMA_POR, TIP_OTGR, KOD_GROTP, KOD_POTR, KOD_STAN, KOD_GD, FIO_ISPOL, M_VS, OLD_SF, OLD_NOM,
          OLD_DATA, DATA_BUXG, WRITE, GR_DVZ, OGR_TAR, KOD_USL, KSOB_USL, SUM_NALIV, NDC_NAL20, NDC_NAL03,
          NDC_VN20, NDC_VN03, NDC_TR20, NDC_TR03, VID_OPL, KOL_DN, USL_PPZT, NDC_PPZT, CN_PPZT, KOD_OTGR,
          VES_KOM, KOM_V, NDS_KOM, NDF_KOM, CN_KOM, PATH, T_DATE, T_TIME, VES_NAL, MESTO, M_KORR, G_KORR,
          G_KORR4, K_VARPOST, VIDOG, DEN_SOD, NOM_ZD, NOM_ZV, UN_CODE, MOSC_OUT, KOD_POST, KOD_SOB, SOB_GD,
          TAX_SALE, PRICE_GET, SUM_PGET, NDS_PGET, GSM_PGET, M_SS, Y_SS, PR_DIVIDE, NUM_SS, BILL_POS, DOG.ID,DOP_TARIF, NDC_DOPTAR
        FROM load_buffer.to_ss, load_buffer.dog WHERE TO_SS.nom_dog=dog.NUM_DOG
         AND NOT EXISTS (SELECT master.to_ss.NOM_DOK FROM master.to_ss WHERE master.to_ss.NOM_DOK=load_buffer.to_ss.NOM_DOK));

COMMIT;

DELETE FROM master.TO_SS A WHERE
    NOT EXISTS (SELECT k.NOM_DOK FROM load_buffer.to_ss k WHERE k.NOM_DOK = A.NOM_DOK) ;

COMMIT;

END Renew_TO_SS;
/

--
-- RENEW_UKHSMS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_UKHSMS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='')IS
BEGIN
  execute immediate 'TRUNCATE TABLE LOAD_BUFFER.MASTER_FILES_UKHSMS';
     
  INSERT INTO LOAD_BUFFER.MASTER_FILES_UKHSMS
  select distinct terminal_name as netbios_name, SUBSTR(NLS_UPPER(appl_name),INSTR(NLS_UPPER(appl_name),'\',-1,1)+1,200) as filename 
  from MASTER.REPL_SESSION 
    where date_start>=TRUNC(add_months(sysdate,-3),'MONTH')
    and descript = 'ON SESSION LOGON'
    and appl_name is not null
    and appl_name <>'?'
  UNION 
  select distinct terminal_name as netbios_name, SUBSTR(NLS_UPPER(appl_name),INSTR(NLS_UPPER(appl_name),'\',-1,1)+1,200) as filename 
  from MASTER.REPL_SESSION@NB.WORLD
    where date_start>=TRUNC(add_months(sysdate,-3),'MONTH')
    and descript = 'ON SESSION LOGON'
    and appl_name is not null
    and appl_name <>'?';    
    
  COMMIT;
  
  FOR lcur IN (select * from LOAD_BUFFER.MASTER_FILES_UKHSMS) LOOP
     insert into master_files@kmisql3.world values (lcur.netbios_name,lcur.filename);
  END LOOP;  
  
  COMMIT;

 END RENEW_UKHSMS;
/

--
-- RENEW_VAL_INT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_val_int (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH')
          ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:=''
          , param2 VARCHAR2:=''
          , param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

--- Добавляем 
INSERT /*+ APPEND*/ INTO MASTER.VAL_INT
     (
       DD_MM_YYYY,
       INTERV,
       N_INTER,
       SYB_RNK,
       N_OB,
       N_GR_INTEGR,
       VAR_VR_ZON,
       VR_ZON,
       KOL_DB,
       KOL,
       STAT,
       VAL,
       MIN_0,
       MIN_1,
       SK,
       RASH_POLN
     )
     (SELECT 
       DD_MM_YYYY,
       INTERV,
       N_INTER,
       SYB_RNK,
       N_OB,
       N_GR_INTEGR,
       VAR_VR_ZON,
       VR_ZON,
       KOL_DB,
       KOL,
       STAT,
       VAL,
       MIN_0,
       MIN_1,
       SK,
       RASH_POLN
      FROM load_buffer.VAL_INT A
      WHERE NOT EXISTS (SELECT NULL 
                          FROM MASTER.VAL_INT B 
                          WHERE A.dd_mm_yyyy=B.dd_mm_yyyy
                            AND A.syb_rnk=B.syb_rnk 
                            AND A.n_ob=B.n_ob 
                            AND A.n_gr_integr=b.n_gr_integr
                            AND A.Min_0=B.Min_0
                            AND A.Min_1=B.Min_1
                            ) AND A.Stat is not null
     );

COMMIT;

delete from master.val_int 
where dd_mm_yyyy < sysdate-7;

COMMIT;

END Renew_VAL_INT; 
/

--
-- RENEW_VAL_INT_D  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_val_int_d (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

--- Обновляем 
/*UPDATE MASTER.VAL_INT_D B SET
  (
    DD_MM_YYYY, SYB_RNK, N_OB, N_GR_INTEGR, KOL_DB, KOL, NET_INT, VAL, STAT, KOL_DB_BP, KOL_BP, VAL_BP, RS, VAL_PR, R              
  )
 = (SELECT 
        DD_MM_YYYY, SYB_RNK, N_OB, N_GR_INTEGR, KOL_DB, KOL, NET_INT, VAL, STAT, KOL_DB_BP, KOL_BP, VAL_BP, RS, VAL_PR, R              
      FROM load_buffer.VAL_INT_D A
    WHERE A.n_gr_integr=b.n_gr_integr AND A.n_ob=B.n_ob AND A.syb_rnk=B.syb_rnk AND A.dd_mm_yyyy=B.dd_mm_yyyy)
 WHERE EXISTS (SELECT NULL FROM load_buffer.VAL_INT_D A WHERE A.n_gr_integr=b.n_gr_integr AND A.n_ob=B.n_ob AND A.syb_rnk=B.syb_rnk AND A.dd_mm_yyyy=B.dd_mm_yyyy);
*/

--- Добавляем 
INSERT /*+ APPEND*/ INTO MASTER.VAL_INT_D
     (
      DD_MM_YYYY, SYB_RNK, N_OB, N_GR_INTEGR, KOL_DB, KOL, NET_INT, VAL, STAT, KOL_DB_BP, KOL_BP, VAL_BP, RS, VAL_PR, R
     )
     (SELECT 
          DD_MM_YYYY, SYB_RNK, N_OB, N_GR_INTEGR, KOL_DB, KOL, NET_INT, VAL, STAT, KOL_DB_BP, KOL_BP, VAL_BP, RS, VAL_PR, R
       FROM load_buffer.VAL_INT_D A
       WHERE NOT EXISTS (SELECT NULL FROM MASTER.VAL_INT_D B 
       WHERE A.n_gr_integr=b.n_gr_integr AND A.n_ob=B.n_ob 
       AND A.syb_rnk=B.syb_rnk AND A.dd_mm_yyyy=B.dd_mm_yyyy) and A.DD_MM_YYYY<SYSDATE-1
     ) ;
COMMIT;

delete from master.val_int_d
where dd_mm_yyyy < sysdate-7;

COMMIT;

END Renew_VAL_INT_D; 
/

--
-- SHOW_OBJECT_TYPE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.show_object_type(obj_type_in IN VARCHAR2)
IS
BEGIN
DBMS_OUTPUT.PUT_LINE
(RPAD(obj_type_in,30)||
RPAD('Free blocks',15)||
RPAD('Total blocks',15)||
RPAD('Unused blocks',15)||
RPAD('Unused bytes',15)
);
DBMS_OUTPUT.PUT_LINE
(RPAD('-',30,'-')||
RPAD('-',15,'-')||
RPAD('-',15,'-')||
RPAD('-',15,'-')||
RPAD('-',15,'-')
);
OPEN object_cur(obj_type_in);
LOOP
FETCH object_cur INTO obj_rec;
EXIT WHEN object_cur%NOTFOUND;
IF obj_rec.TEMPORARY = 'N' THEN
DBMS_SPACE.FREE_BLOCKS (
segment_owner => USER,
segment_name => obj_rec.object_name,
segment_type => obj_type_in,
freelist_group_id => 0,
free_blks => free_blks);
DBMS_SPACE.UNUSED_SPACE(
segment_owner => USER,
segment_name => obj_rec.object_name,
segment_type => obj_type_in,
total_blocks => total_blocks,
total_bytes => total_bytes,
unused_blocks => unused_blocks,
unused_bytes => unused_bytes,
last_used_extent_file_id => last_used_extent_file_id,
last_used_extent_block_id => last_used_extent_block_id,
last_used_block => last_used_block);
DBMS_OUTPUT.PUT_LINE
(RPAD(obj_rec.object_name,30)||
RPAD(free_blks,15)||
RPAD(total_blocks,15)||
RPAD(unused_blocks,15)||
RPAD(unused_bytes,15)
);
END IF;
END LOOP;
CLOSE object_cur;
END show_object_type;

/

--
-- TEST_PROC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.TEST_PROC (PARAM1 VARCHAR2, PARAM2 VARCHAR2) IS
  v_tmp1 VARCHAR2(200);
BEGIN
  NULL;
  INSERT INTO TEST (ID,NAME) VALUES (1,PARAM1);
  INSERT INTO TEST (ID,NAME) VALUES (2,PARAM2);
  COMMIT;

END TEST_PROC;

/

--
-- DBF_DATE_TO_CHAR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.DBF_DATE_TO_CHAR(pDate DATE) RETURN VARCHAR2 AS
BEGIN
     IF pDate IS NULL THEN
	   RETURN '{  /  /  }';
	 ELSE
	   RETURN TO_CHAR(pDate,'{mm/dd/yyyy}');
	 END IF;
END;
/

--
-- DBF_TIME_TO_CHAR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.DBF_TIME_TO_CHAR(pDate DATE) RETURN VARCHAR2 AS
BEGIN
     IF pDate IS NULL THEN
	   RETURN '''''';
	 ELSE
	   RETURN ''''||TO_CHAR(pDate,'hh24:mi:ss')||'''';
	 END IF;
END;

/

--
-- EUL_GET_ITEM_NAME  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.EUL_GET_ITEM_NAME(QSID in NUMBER) return VARCHAR2 is Itmid VARCHAR2(2000):=null; startpt BINARY_INTEGER :=1; BMP LONG RAW; pos BINARY_INTEGER :=0; ctr BINARY_INTEGER :=0; chklgth BINARY_INTEGER; hexstring VARCHAR2(10); hexid BINARY_INTEGER :=0; decnibble1 NUMBER; decnibble2 BINARY_INTEGER; decnibble3 BINARY_INTEGER; decnibble4 BINARY_INTEGER; decnibble5 BINARY_INTEGER; decnibble6 BINARY_INTEGER; decnibble7 BINARY_INTEGER; decnibble8 BINARY_INTEGER; decnibble9 BINARY_INTEGER; decnibble10 BINARY_INTEGER; hexchar VARCHAR2(1); expid BINARY_INTEGER; aggtype BINARY_INTEGER; nibblezero BOOLEAN; noemptyblks BINARY_INTEGER:=10; cursor dbmp is select qs_dbmp0||qs_dbmp1||qs_dbmp2||qs_dbmp3||qs_dbmp4||qs_dbmp5||qs_dbmp6||qs_dbmp7 from eul_qpp_statistics where qs_id = QSID; cursor mbmp is select qs_mbmp0||qs_mbmp1||qs_mbmp2||qs_mbmp3||qs_mbmp4||qs_mbmp5||qs_mbmp6||qs_mbmp7 from eul_qpp_statistics where qs_id = QSID; begin for itype in 1..2 loop if itype = 1 then open dbmp; else open mbmp; end if; hexid:=0; while hexid <> noemptyblks loop if itype = 1 then fetch dbmp into BMP; else fetch mbmp into BMP; end if; ctr:=ctr+1; pos:=pos+10; if pos=4090 then hexid:= noemptyblks; startpt:=1; pos:=0; else hexstring:=nvl(substr(rawtohex(BMP), startpt, 10), '0000000000'); if hexstring = '0000000000' then hexid:=hexid + 1; decnibble1:=0; decnibble2:=0; decnibble3:=0; decnibble4:=0; decnibble5:=0; decnibble6:=0; decnibble7:=0; decnibble8:=0; decnibble9:=0; decnibble10:=0; nibblezero:= TRUE; if hexid = noemptyblks then startpt:=1; pos:=0; end if; else nibblezero:=FALSE; hexchar:=substr(rawtohex(BMP), startpt, 1); if hexchar = '0' then decnibble1:=0; elsif hexchar ='A' then decnibble1:=10; elsif hexchar ='B' then decnibble1:=11; elsif hexchar ='C' then decnibble1:=12; elsif hexchar ='D' then decnibble1:=13; elsif hexchar ='E' then decnibble1:=14; elsif hexchar ='F' then decnibble1:=15; else decnibble1:=to_number(hexchar); end if; hexchar:=substr(rawtohex(BMP), startpt+1, 1); if hexchar = '0' then decnibble2:=0; elsif hexchar ='A' then decnibble2:=10; elsif hexchar ='B' then decnibble2:=11; elsif hexchar ='C' then decnibble2:=12; elsif hexchar ='D' then decnibble2:=13; elsif hexchar ='E' then decnibble2:=14; elsif hexchar ='F' then decnibble2:=15; else decnibble2:=to_number(hexchar); end if; hexchar:=substr(rawtohex(BMP), startpt+2, 1); if hexchar = '0' then decnibble3:=0; elsif hexchar ='A' then decnibble3:=10; elsif hexchar ='B' then decnibble3:=11; elsif hexchar ='C' then decnibble3:=12; elsif hexchar ='D' then decnibble3:=13; elsif hexchar ='E' then decnibble3:=14; elsif hexchar ='F' then decnibble3:=15; else decnibble3:=to_number(hexchar); end if; hexchar:= substr(rawtohex(BMP), startpt+3, 1); if hexchar = '0' then decnibble4:=0; elsif hexchar ='A' then decnibble4:=10; elsif hexchar ='B' then decnibble4:=11; elsif hexchar ='C' then decnibble4:=12; elsif hexchar ='D' then decnibble4:=13; elsif hexchar ='E' then decnibble4:=14; elsif hexchar ='F' then decnibble4:=15; else decnibble4:=to_number(hexchar); end if; hexchar :=substr(rawtohex(BMP), startpt+4, 1); if hexchar = '0' then decnibble5:=0; elsif hexchar ='A' then decnibble5:=10; elsif hexchar ='B' then decnibble5:=11; elsif hexchar ='C' then decnibble5:=12; elsif hexchar ='D' then decnibble5:=13; elsif hexchar ='E' then decnibble5:=14; elsif hexchar ='F' then decnibble5:=15; else decnibble5:=to_number(hexchar ); end if; hexchar := substr(rawtohex(BMP), startpt+5, 1); if hexchar = '0' then decnibble6:=0; elsif hexchar ='A' then decnibble6:=10; elsif hexchar='B' then decnibble6:=11; elsif hexchar='C' then decnibble6:=12; elsif hexchar='D' then decnibble6:=13; elsif hexchar='E' then decnibble6:=14; elsif hexchar='F' then decnibble6:=15; else decnibble6:=to_number(hexchar); end if; hexchar := substr(rawtohex(BMP), startpt+6, 1); if hexchar = '0' then decnibble7:=0; elsif hexchar ='A' then decnibble7:=10; elsif hexchar='B' then decnibble7:=11; elsif hexchar='C' then decnibble7:=12; elsif hexchar='D' then decnibble7:=13; elsif hexchar='E' then decnibble7:=14; elsif hexchar='F' then decnibble7:=15; else decnibble7:=to_number(hexchar); end if; hexchar :=substr(rawtohex(BMP), startpt+7, 1); if hexchar = '0' then decnibble8:=0; elsif hexchar ='A' then decnibble8:=10; elsif hexchar='B' then decnibble8:=11; elsif hexchar='C' then decnibble8:=12; elsif hexchar='D' then decnibble8:=13; elsif hexchar='E' then decnibble8:=14; elsif hexchar='F' then decnibble8:=15; else decnibble8:=to_number(hexchar); end if; hexchar:= substr(rawtohex(BMP), startpt+8, 1); if hexchar = '0' then decnibble9:=0; elsif hexchar ='A' then decnibble9:=10; elsif hexchar='B' then decnibble9:=11; elsif hexchar='C' then decnibble9:=12; elsif hexchar='D' then decnibble9:=13; elsif hexchar='E' then decnibble9:=14; elsif hexchar='F' then decnibble9:=15; else decnibble9:=to_number(hexchar); end if; if itype = 2 then hexchar :=substr(rawtohex(BMP), startpt+9, 1); if hexchar = '0' then decnibble10:=0; elsif hexchar ='A' then decnibble10:=10; elsif hexchar='B' then decnibble10:=11; elsif hexchar='C' then decnibble10:=12; elsif hexchar='D' then decnibble10:=13; elsif hexchar='E' then decnibble10:=14; elsif hexchar='F' then decnibble10:=15; else decnibble10:=to_number(hexchar); end if; end if; if nibblezero = FALSE then decnibble1:=decnibble1*2; if decnibble2 > 7 then decnibble1:=decnibble1+1; decnibble2:=decnibble2-8; end if; decnibble1:=decnibble1 * 268435456; decnibble2:=decnibble2 * 2; if decnibble3 > 7 then decnibble2:=decnibble2+1; decnibble3:=decnibble3-8; end if; decnibble2:=decnibble2 * 16777216; decnibble3:=decnibble3*2; if decnibble4 > 7 then decnibble3:=decnibble3+1; decnibble4:=decnibble4-8; end if; decnibble3:=decnibble3 * 1048576; decnibble4:=decnibble4*2; if decnibble5 > 7 then decnibble4:=decnibble4+1; decnibble5:=decnibble5-8; end if; decnibble4:=decnibble4 * 65536; decnibble5:=decnibble5*2; if decnibble6 > 7 then decnibble5:=decnibble5+1; decnibble6:=decnibble6-8; end if; decnibble5:=decnibble5 * 4096; decnibble6:=decnibble6*2; if decnibble7 > 7 then decnibble6:=decnibble6+1; decnibble7:=decnibble7-8; end if; decnibble6:=decnibble6 * 256; decnibble7:=decnibble7*2; if decnibble8 > 7 then decnibble7:=decnibble7+1; decnibble8:=decnibble8-8; end if; decnibble7:=decnibble7 * 16; decnibble8:=decnibble8*2; if decnibble9 > 7 then decnibble8:=decnibble8+1; decnibble9:=decnibble9-8; end if; if itype=2 then if decnibble9>0 then decnibble9:=(decnibble9-2)*8; end if; decnibble10:=decnibble9+(decnibble10/2); end if; expid:= decnibble1 + decnibble2 + decnibble3 + decnibble4 + decnibble5 + decnibble6 + decnibble7 + decnibble8; end if; end if; end if; startpt:=pos+1; if nibblezero = FALSE then if itype =1 then if nvl(length(itmid), 0)=0 then itmid:=to_char(expid)||', 0'; else chklgth:= length(itmid)+length(to_char(expid))+3; if chklgth > 1999 then itmid:=itmid||'*'; exit; else itmid:=itmid||'.'||to_char(expid)||', 0'; end if; end if; else chklgth:= nvl(length(itmid), 0)+length(to_char(expid))+3; if chklgth > 1999 then itmid:=itmid||'*'; exit; elsif chklgth =length(to_char(expid))+3 then itmid:=to_char(expid)||', '||to_char(decnibble10); else itmid:=itmid||'.'||to_char(expid)||', '||to_char(decnibble10); end if; end if; end if; end loop; if itype = 1 then close dbmp; else close mbmp; end if; end loop; return itmid; end EUL_GET_ITEM_NAME;
/

--
-- F_SNPORDEXP_ADDUPLOAD_KSE  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.F_SNPORDEXP_ADDUPLOAD_KSE(
  sUserName varchar2
) return number as
  pragma AUTONOMOUS_TRANSACTION;

  nUploadId T_SNPORDEXP_UPLOAD_KSE.UPLOADID%type;
begin
insert into T_SNPORDEXP_UPLOAD_KSE(UPLOADID, DATETIME, USERNAME)
values ((select nvl(max(UPLOADID), 0)+1 from T_SNPORDEXP_UPLOAD_KSE),
        sysdate, sUserName)
returning UPLOADID into nUploadId;
commit;

return nUploadId;
end F_SNPORDEXP_ADDUPLOAD_KSE;

/

--
-- GD_DATE  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Gd_Date(ADATE DATE) RETURN DATE IS
BEGIN
  IF TO_CHAR(ADATE,'hh24')>='17' THEN
    RETURN ADATE+1;
  ELSE
    RETURN ADATE;
  END IF;
END Gd_Date;

/

--
-- GET_ADDR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_ADDR(reg_id NUMBER, postindex VARCHAR2, city VARCHAR2, address VARCHAR2, region VARCHAR2 DEFAULT NULL)
  RETURN VARCHAR2 IS
  s1 VARCHAR2(250);
  s2 VARCHAR2(250);
  s3 VARCHAR2(25);
  s4 VARCHAR2(250);
BEGIN
  if (postindex IS NULL) OR (TO_NUMBER(postindex)<10)then
    s3 := '';
  else
    s3 := ' ' || postindex;
  end if;

   
  if ((region IS NULL) or reg_id=110 or reg_id=111 or city='Н.НОВГОРОД' or city='НИЖНИЙ-НОВГОРОД' or city='Г. НИЖНИЙ НОВГОРОД') then
    s4 := '';
  else
    s4 := ' ' || region;
  end if;

  
  if (city IS NULL) then
    s1 := '';
  else
    if (s4 || ' ' = ' ') then
      s1 := ' ' || city;
	else  
      s1 := ',' || city;
	end if;  
  end if;

  if (address IS NULL) then
    s2 := '';
  else
    if (s1 || ' ' = ' ') and (s4 || ' ' = ' ') then
      s2 := ' ' || address;
	else
      s2 := ',' || address;
	end if;
  end if;

  RETURN RTrim(LTrim(s3 || s4 || s1 || s2));
End;

/

--
-- GET_ADDR_FULL  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_ADDR_FULL(predpr_id NUMBER,reg_id NUMBER, postindex VARCHAR2, city VARCHAR2, address VARCHAR2, region VARCHAR2 DEFAULT NULL, strana VARCHAR2 DEFAULT NULL)
  RETURN VARCHAR2 IS
  s1 VARCHAR2(250);
  s2 VARCHAR2(250);
  s3 VARCHAR2(25);
  s4 VARCHAR2(250);
  s5 VARCHAR2(30);
BEGIN
  if (postindex IS NULL) OR (TO_NUMBER(postindex)<10)then
    s3 := '';
  else
    s3 := ' ' || postindex;
  end if;

  if (strana IS NULL) then
    s5 := '';
  else
  	if predpr_id=827 then  	    
	   s5:=' РФ,';
	else
		s5 := ' ' || strana;
  	end if;	
  end if;

  if ((region IS NULL) or reg_id=110 or reg_id=111 or city='Н.НОВГОРОД' or city='НИЖНИЙ-НОВГОРОД' or city='Г. НИЖНИЙ НОВГОРОД') then
    s4 := '';
  else
    if (strana IS NULL) then
  	  s4 := ' ' || region;
  	else
      s4 := ', ' || region;
  	end if;
  end if;


  if (city IS NULL) then
    s1 := '';
  else
    if (s4 || ' ' = ' ') then
      s1 := ' ' || city;
	else
      s1 := ', ' || city;
	end if;
  end if;

  if (address IS NULL) then
    s2 := '';
  else
    if (s1 || ' ' = ' ') and (s4 || ' ' = ' ') then
      s2 := ' ' || address;
	else
      s2 := ', ' || address;
	end if;
  end if;

  RETURN RTrim(LTrim(s3 || s5 || s4 || s1 || s2));
End;

/

--
-- GET_AKCIZ_SVID  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Akciz_Svid
 (kod_plat# NUMBER, prod_group_id# NUMBER, date_sf# DATE, no_akciz# NUMBER)
RETURN VARCHAR2
AS
  val# VARCHAR2(512);

  CURSOR temp IS
    SELECT 
	  'No ' || 
	  kls_predpr_akciz.EX_SVID_PREF || 
	  ' ' || 
  	  kls_predpr_akciz.EX_SVID_NUMB ||
	  ' срок действия с ' ||
	  TO_CHAR(kls_predpr_akciz.DATE_BEG,'dd.mm.yyyy') ||
	  'г. по ' ||
	  TO_CHAR(kls_predpr_akciz.DATE_END,'dd.mm.yyyy') ||
	  'г.'
  	    AS NUM_svid
	FROM 
	  kls_predpr_akciz WHERE kls_predpr_akciz.PLAT_ID=kod_plat# and 
	  kls_predpr_akciz.PROD_GROUPS_ID=prod_group_id# and
	  date_sf# BETWEEN kls_predpr_akciz.DATE_BEG and kls_predpr_akciz.DATE_END;
	  
  dest temp%ROWTYPE;

BEGIN

  val#:='';
  OPEN temp;
  LOOP
    FETCH temp INTO dest;
    EXIT WHEN temp%NOTFOUND;

    val#:=val#||' '||dest.num_svid;
  END LOOP;
  IF (LTRIM(RTRIM(val#))='') AND (No_Akciz#=1) AND (date_sf#>=TO_DATE('01.01.2005','dd.mm.yyyy')) THEN
    val#:=val# || ' Продано без акциза, но нет свидетельства!';
  END IF;
  RETURN LTRIM(RTRIM(val#));
END Get_Akciz_Svid;

/

--
-- GET_CELLS_PLAN_POST_REALIZ  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.get_cells_plan_post_realiz (
   date_plan#     DATE,
   supplier_id#   NUMBER,
   prod_id_npr#   VARCHAR2,
   tip_real_id#   NUMBER,
   vid_real_id#   NUMBER,
   org_kind_id#   NUMBER,
   org_stru_id#   NUMBER
)
   RETURN NUMBER
AS
   kol#   NUMBER;
BEGIN
   SELECT ves
     INTO kol#
     FROM plan_realiz
    WHERE date_plan = date_plan#
      AND supplier_id = supplier_id#
      AND prod_id_npr = prod_id_npr#
      AND tip_real_id = tip_real_id#
      AND vid_real_id = vid_real_id#
      AND org_kind_id = org_kind_id#
      AND org_stru_id = org_stru_id#
	  AND PARUS_RN IS NULL;

   RETURN kol#;
END get_cells_plan_post_realiz;

/

--
-- GET_DATE_OTSRPLAT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_DATE_OTSRPLAT
 (pDATE_KVIT DATE, pKOL_DN NUMBER, pONLY_WORK NUMBER DEFAULT 0)
RETURN DATE
AS
  vRES DATE;
BEGIN
  IF pONLY_WORK = 1 THEN
    BEGIN
	  select max(value) into vRES 
	  from (select value from kls_dates a where is_work=1 and value>pDATE_KVIT order by value) where rownum<=pKOL_DN;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRES:=pDATE_KVIT+pKOL_DN;
	END;
  ELSE
    vRES:=pDATE_KVIT+pKOL_DN;
  END IF;	
  
  RETURN vRES;
END; 

/

--
-- GET_LIST_PROGRAM_USERS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_List_program_users
 (org# VARCHAR2, app# VARCHAR2, dep# VARCHAR2, sl# VARCHAR2)
RETURN VARCHAR2
AS
  val# VARCHAR2(512);

  CURSOR temp IS
    SELECT DISTINCT FIO
	FROM program_users WHERE organization=org# AND department=dep# AND application=app# AND sl=sl#
    order by fio;

  dest temp%ROWTYPE;

BEGIN

  val#:='';
  OPEN temp;
  LOOP
    FETCH temp INTO dest;
    EXIT WHEN temp%NOTFOUND;

    val#:=val#||', '||dest.fio;
  END LOOP;
  
  RETURN SUBSTR(LTRIM(RTRIM(SUBSTR(val#,2))),1,220);
END Get_List_program_users; 
/

--
-- GET_NOM_SF  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_nom_Sf(pMode NUMBER, pNom_Dok NUMBER, pNom_Sf NUMBER, pOld_dok NUMBER, pOld_sf NUMBER, pSumma_Dok NUMBER, pDateVypSf DATE, pDateKvit DATE) RETURN VARCHAR2 IS
  vRes VARCHAR2(200);
BEGIN
  -- Функция возвращает: 
  -- pMode=0 			 номер СФ + номер корректируемого счета (через дробь) + дата СФ
  -- pMode=1			 номер СФ + номер корректируемого счета (через дробь)
  -- pMode=2			 номер СФ
  -- pMode=3			 номер СФ + дата СФ + г.
  vRes:=TO_CHAR(pNom_sf);
  IF NVL(pOld_Sf,0)<>0 AND NVL(pSumma_Dok,0)>0 AND pMode IN (0,1) THEN
    vRes:=vRes || '/' || LTRIM(TO_CHAR(pOld_sf));
  END IF;	
  IF pMode=0 THEN
/*    IF pDateVypSf<pDateKvit THEN
  	  vRes:=vRes || '  от  ' || TO_CHAR(pDateKvit, 'DD.MM.YYYY');
	ELSE*/   
  	  vRes:=vRes || '  от  ' || TO_CHAR(pDateVypSf, 'DD.MM.YYYY');
/*    END IF;*/
  END IF;
  IF pMode=3 THEN
/*    IF pDateVypSf<pDateKvit THEN
  	  vRes:=vRes || '  от  ' || TO_CHAR(pDateKvit, 'DD.MM.YYYY')  || 'г.' ;
	ELSE*/   
  	  vRes:=vRes || '  от  ' || TO_CHAR(pDateVypSf, 'DD.MM.YYYY') || 'г.';
/*    END IF;*/
  END IF;
  RETURN vRes; 	
END Get_Nom_Sf;
/

--
-- GET_NUM_5  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Num_5
 (dat# DATE)
RETURN NUMBER
AS
BEGIN
  IF TO_NUMBER(TO_CHAR(dat#,'DD'))=31 THEN
    RETURN 6;
  ELSE	
    RETURN TRUNC((TO_NUMBER(TO_CHAR(dat#,'DD'))-1)/5)+1;
  END IF;	
END Get_Num_5;

/

--
-- GET_OPL_PLAT_NUMS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.get_opl_plat_nums
 (dog_id# number, date_plat# date)
return varchar2
as
CURSOR temp IS
 SELECT LTRIM(RTRIM(opl.NOM_POR)) AS nom_por FROM opl
    WHERE dog_id=dog_id# AND data_por=date_plat#
    ORDER BY 1;

 dest temp%ROWTYPE;
 val# varchar2(150);
--  propis# varchar2(4000);
BEGIN
  OPEN temp;
  val#:='';
  LOOP
    FETCH temp INTO dest;
    EXIT WHEN temp%NOTFOUND;
	IF LENGTH(Val#)>0 THEN
  	  val#:=val# || ',';
	END IF;
	val#:=val# || dest.nom_por;
  END LOOP;
  return val#;
end get_opl_plat_nums;

/

--
-- GET_PHONE  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_PHONE(phone VARCHAR2, fax VARCHAR2)
  RETURN VARCHAR2 IS
  s1 VARCHAR2(250);
  s2 VARCHAR2(250);
BEGIN
  if (phone IS NULL) then
    s1 := '';
  else
    s1 := ' ' || phone;
  end if;

  if (fax IS NULL) then
    s2 := '';
  else
    if s1 || ' ' = ' ' then
      s2 := ' ' || fax;
	else  
      s2 := ',' || fax;
	end if;  
  end if;
  
  RETURN RTrim(LTrim(s1 || s2));  
End;

/

--
-- GET_PREDPR_TAG  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Predpr_Tag(name VARCHAR2)
  RETURN VARCHAR2 IS
  s1 VARCHAR2(250);
  s2 VARCHAR2(250);
  s3 VARCHAR2(25);
BEGIN
  s1:=NLS_UPPER(name);

  s1:=TRIM(REPLACE(s1,'"',''));
  s1:=TRIM(REPLACE(s1,'''',''));

  s2:=SUBSTR(s1,-3,3);
  IF s2 IN (' АО','ГП') THEN
    s1:=SUBSTR(s1,1,LENGTH(s1)-3);
  END IF;	 

  s2:=SUBSTR(s1,-4,4);
  IF s2 IN (' ОАО',' ЗАО',' ООО',' ГУП') THEN
    s1:=SUBSTR(s1,1,LENGTH(s1)-4);
  END IF;	 
  
  
  s1:=REPLACE(s1,' ','');
  s1:=REPLACE(s1,'.','');
  s1:=REPLACE(s1,',','');
  s1:=REPLACE(s1,'-','');
  RETURN s1;
END;

/

--
-- GET_SEQ_LOCAL  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_SEQ_LOCAL
  RETURN VARCHAR2 IS
Res NUMBER;
BEGIN
  SELECT SEQ_REPL_LOCAL.nextval INTO Res FROM DUAL;
  RETURN Res;
END;

/

--
-- GET_SF_POST_RS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Sf_Post_Rs  (pPostId NUMBER, pPostRS VARCHAR2, pDogNumber VARCHAR2) RETURN VARCHAR2 AS
BEGIN
  -- Возвращает р/с поставщика для СФ
  IF pDogNumber IN ('0411498/721/13/2004','0411565/737/13/2004') THEN 
    RETURN '40702810700000000335'; 
  ELSE 
    RETURN pPostRS; 
  END IF;
END Get_Sf_Post_Rs;

/

--
-- GET_START_5  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Start_5
 (dat# DATE, num_5# NUMBER)
RETURN DATE
AS
  dd DATE;
BEGIN
  RETURN TRUNC(dat#,'MONTH')+(num_5#-1)*5;
END Get_Start_5;

/

--
-- GET_USL_OPL_FROM_PAY_TYPE  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Usl_Opl_From_Pay_Type(ssPayType VARCHAR2) RETURN NUMBER IS
  npay_day NUMBER;
  usl_opl_id# NUMBER;
BEGIN
  -- Определяем отсрочку
  IF ssPayType LIKE 'ПРЕДОПЛАТА 100%' THEN
    npay_day := -1;
  ELSE
    IF INSTR (ssPayType, 'ПО ФАКТУ') <> 0 THEN
	  BEGIN
        npay_day := TO_NUMBER (SUBSTR (ssPayType, 9));
	  EXCEPTION
	    WHEN OTHERS THEN
	    npay_day := -1; 
	  END;
    ELSE
      npay_day := -1;
    END IF;
  END IF;
  IF npay_day<=0 THEN
    RETURN 1;
  END IF;	
  IF npay_day=45 THEN
    RETURN 18;
  END IF;	
  BEGIN
    SELECT MIN(ID) INTO usl_opl_id#
      FROM KLS_USL_OPL
   	WHERE kol_dn=npay_day;
  EXCEPTION
    WHEN OTHERS THEN
	  usl_opl_id#:=0;
  END;
  RETURN usl_opl_id#;
END Get_Usl_Opl_From_Pay_Type;

/

--
-- GET_WEEK_DAY_CNT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Week_Day_Cnt(pDATE DATE, pWEEK_DAY NUMBER) RETURN NUMBER IS
  vFIRST DATE;
  vLAST DATE;
  vWEEK_DAY NUMBER;
  vCNT NUMBER;
BEGIN
  vFIRST:=TRUNC(pDATE,'MONTH'); -- Первый день месяца
  vLAST:=LAST_DAY(pDATE); -- Последний день месяца
  vWEEK_DAY:=TO_NUMBER(TO_CHAR(vFIRST,'D')); -- День недели первого дня месяца
  -- Первая дата искомого дня недели
  IF pWEEK_DAY>=vWEEK_DAY THEN
    vFIRST:=vFIRST+pWEEK_DAY-vWEEK_DAY;
  ELSE
    vFIRST:=vFIRST+7+pWEEK_DAY-vWEEK_DAY;
  END IF; 	
  vCNT:=0;
  LOOP
    IF TO_NUMBER(TO_CHAR(vFIRST,'D'))=pWEEK_DAY THEN
  	  vCNT:=vCNT+1;
	END IF;  
    vFIRST:=vFIRST+1;
    EXIT WHEN vFIRST>vLAST;
  END LOOP;  
  RETURN vCNT;
END Get_Week_Day_Cnt;

/

--
-- HOURS_BETWEEN  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.HOURS_BETWEEN (pFromDate DATE, pToDate DATE) RETURN NUMBER IS
BEGIN
  RETURN (TRUNC(pToDate)-TRUNC(pFromDate)-1)*24+(24-TO_NUMBER(TO_CHAR(pFromDate,'HH24')))+TO_NUMBER(TO_CHAR(pToDate,'HH24'));
END;

/

--
-- IIF  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.IIF(Cond IN CHAR,TruePart IN NUMBER,FalsePart IN NUMBER)
   RETURN NUMBER
   IS
   BEGIN
      IF (Cond='T') THEN
	    RETURN(TruePart);
	  ELSE
	    RETURN(FalsePart);
	  END IF;
    END;

/

--
-- IIFD  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.IIFD(Date1 IN DATE, Cond IN VARCHAR2, Date2 IN DATE,TruePart IN DATE,FalsePart IN DATE)
   RETURN DATE IS
   Cond1 BOOLEAN;
   BEGIN
      IF Cond='<' THEN
	    Cond1:=(Date1<Date2);
	  ELSE
	    IF Cond='=' THEN
          Cond1:=(Date1=Date2);
		ELSE
		  IF Cond='<=' THEN
		    Cond1:=(Date1<=Date2);
		  ELSE
		    IF Cond='>=' THEN
			  Cond1:=(Date1>=Date2);
			ELSE
              Cond1:=(Date1>Date2);
			END IF;
		  END IF;
		END IF;
	  END IF;
	  IF (Cond1) THEN
	    RETURN(TruePart);
	  ELSE
	    RETURN(FalsePart);
	  END IF;
    END;

/

--
-- IIFDATE  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.IIFDate(Date1 IN DATE, Cond IN VARCHAR2, Date2 IN DATE)
--- Возвращает   1-True   0-False
   RETURN number IS
   Cond1 BOOLEAN;
   BEGIN
      IF Cond='<' THEN
	    Cond1:=(Date1<Date2);
	  ELSE
	    IF Cond='=' THEN
          Cond1:=(Date1=Date2);
		ELSE
		  IF Cond='<=' THEN
		    Cond1:=(Date1<=Date2);
		  ELSE
		    IF Cond='>=' THEN
			  Cond1:=(Date1>=Date2);
			ELSE
              Cond1:=(Date1>Date2);
			END IF;
		  END IF;
		END IF;
	  END IF;
	  IF (Cond1) THEN
	    RETURN(1);
	  ELSE
	    RETURN(0);
	  END IF;
    END;

/

--
-- IIFN  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.IIFN(Cond IN BOOLEAN,TruePart IN NUMBER,FalsePart IN NUMBER)
   RETURN NUMBER
   IS
   BEGIN
      IF (Cond) THEN
	    RETURN(TruePart);
	  ELSE
	    RETURN(FalsePart);
	  END IF;
    END;

/

--
-- IIF_NUM  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.IIF_NUM(FirstIn NUMBER, Cond VARCHAR2, SecondIn NUMBER, FirstOut NUMBER, SecondOut NUMBER)
RETURN NUMBER
IS
BEGIN
  IF Cond='>' THEN
	IF FirstIn>SecondIn THEN
  	  RETURN(FirstOut);
 	ELSE
	  RETURN(SecondOut);
 	END IF;
  ELSE
    IF Cond='<' THEN	
	  IF FirstIn<SecondIn THEN
  	    RETURN(FirstOut);
 	  ELSE
	    RETURN(SecondOut);
 	  END IF;
	ELSE
	  IF Cond='=' THEN
	    IF FirstIn=SecondIn THEN
  	      RETURN(FirstOut);
 	    ELSE
	      RETURN(SecondOut);
 	    END IF;
	  ELSE
	    IF Cond = '>=' THEN
 	      IF FirstIn>=SecondIn THEN
  	        RETURN(FirstOut);
   	      ELSE
	        RETURN(SecondOut);
 	      END IF;
	    ELSE 
		  IF Cond='<=' THEN	
	        IF FirstIn<=SecondIn THEN
  	          RETURN(FirstOut);
 	        ELSE
	          RETURN(SecondOut);
 	        END IF;
	      ELSE	
	        RETURN(NULL);
	      END IF;
		END IF;
	  END IF;
	END IF;
  END IF;	  	  	
END;

/

--
-- MONTH_SPECIAL_DEKA_TRIAD  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Month_Special_deka_triad(AYear in number,AMonth in number) 
RETURN NUMBER IS
tmpVar NUMBER;
BEGIN

tmpVar:=123;

/*select name_npr from KLS_PROD
*/

return tmpVar;



  

      
   
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
       
END Month_Special_deka_triad; 
/

--
-- ORA_CHAR_TO_NUM  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.ORA_CHAR_TO_NUM(pChar VARCHAR2, pFormat VARCHAR2 DEFAULT NULL) RETURN NUMBER AS
s VARCHAR2(200);
f VARCHAR2(200);
res NUMBER;
BEGIN
  IF pChar||' ' = ' ' THEN
    RETURN 0;
  END IF;

  s:=REPLACE(pChar,' ','');
  s:=REPLACE(s,',','.');
  f:=REPLACE(pFormat,',','.');
  
  BEGIN
    IF pFormat||' '=' ' THEN
      res:=TO_NUMBER(s);
	ELSE
      res:=TO_NUMBER(s,f);
	END IF;
  EXCEPTION
	WHEN OTHERS THEN
	  res:=0;
  END;
  IF res=0 THEN
    s:=REPLACE(pChar,' ','');
    s:=REPLACE(s,'.',',');
    f:=REPLACE(pFormat,'.',',');
    BEGIN
      IF pFormat||' '=' ' THEN
        res:=TO_NUMBER(s);
  	  ELSE
        res:=TO_NUMBER(s,f);
	  END IF;
    EXCEPTION
	  WHEN OTHERS THEN
	    res:=0;
    END;
  END IF;	
  
/*  BEGIN
    res:=REPLACE(pChar,',','.');
    IF pFormat||' '=' ' THEN
      RETURN TO_NUMBER(res);
	ELSE
      RETURN TO_NUMBER(res,pFormat);
	END IF;
  EXCEPTION
	WHEN OTHERS THEN
	  NULL;
  END;*/
/*  BEGIN
    res:=REPLACE(pChar,'.',',');
    IF pFormat||' '=' ' THEN
      RETURN TO_NUMBER(res);
	ELSE
      RETURN TO_NUMBER(res,pFormat);
	END IF;
  EXCEPTION
	WHEN OTHERS THEN
	  NULL;
  END;*/
  RETURN res;
END;

/

--
-- ORA_NUM_TO_CHAR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.ORA_NUM_TO_CHAR(pNum NUMBER, pFormat VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 AS
f VARCHAR2(200);
res VARCHAR2(200);
BEGIN
  IF pNum IS NULL or pNum=0 THEN
    RETURN '0';
  END IF;

  f:=REPLACE(pFormat,',','.');
  
  BEGIN
    IF pFormat||' '=' ' THEN
      res:=REPLACE(TO_CHAR(pNum),',','.');
	ELSE
      res:=REPLACE(TO_CHAR(pNum,f),',','.');
	END IF;
  EXCEPTION
	WHEN OTHERS THEN
	  res:='0';
  END;
  res:=Trim(res);
  if SUBSTR(res,1,1)='.' then 
    res:='0'||res;  
  end if;	
  if SUBSTR(res,1,2)='-.' then 
    res:='-0.'||SUBSTR(res,3);  
  end if;	
  RETURN res;
END;

/

--
-- ORA_NUM_TO_CHAR2  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.ORA_NUM_TO_CHAR2(pNum NUMBER, pFormat VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 AS
f VARCHAR2(200);
res VARCHAR2(200);
BEGIN
  IF pNum IS NULL or pNum=0 THEN
    RETURN '0';
  END IF;

  f:=REPLACE(pFormat,'.',',');
  
  BEGIN
    IF pFormat||' '=' ' THEN
      res:=REPLACE(TO_CHAR(pNum),'.',',');
	ELSE
      res:=REPLACE(TO_CHAR(pNum,f),'.',',');
	END IF;
  EXCEPTION
	WHEN OTHERS THEN
	  res:='0';
  END;
  res:=Trim(res);
  if SUBSTR(res,1,1)=',' then 
    res:='0'||res;  
  end if;	
  if SUBSTR(res,1,2)='-,' then 
    res:='-0,'||SUBSTR(res,3);  
  end if;	
  RETURN res;
END ORA_NUM_TO_CHAR2;

/

--
-- ORA_VAL  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.ORA_VAL(pChar VARCHAR2, pFormat VARCHAR2 DEFAULT NULL) RETURN NUMBER AS
BEGIN
  RETURN  ORA_CHAR_TO_NUM(TRANSLATE(pChar,
   '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя', '0123456789')
   ,pFormat);
END;
/

--
-- PROPIS_S  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.PROPIS_S(cc VARCHAR2, atr NUMBER)
  RETURN VARCHAR2 IS
  s NUMBER;
  d NUMBER;
  o NUMBER;
  Err NUMBER;
  res VARCHAR2(50);
  sto VARCHAR2(50);
  des VARCHAR2(50);
  ons VARCHAR2(50);
  ending VARCHAR2(50);
BEGIN
  S:=TO_NUMBER(SUBSTR(cc,1,1));
  D:=TO_NUMBER(SUBSTR(cc,2,1));
  O:=TO_NUMBER(SUBSTR(cc,3,1));
  if atr=1 then
    ending:='рублей';
  else if atr=2 then
          ending:='тысяч';
	   else if atr=3 then
               ending:='миллионов';
			else 
               	 ending:='миллиардов';
			end if;
	   end if;
  end if;
  if s=0 then
     sto := '';
  else if s=1 then
          sto := 'сто';
	   else if s=2 then
	           sto := 'двести';
			else if s=3 then
                    sto := 'триста';
				 else if s=4 then
                         sto := 'четыреста';
                      else if s=5 then
                              sto := 'пятьсот';
				           else if s=6 then
                                   sto := 'шестьсот';
				                else if s=7 then
                                        sto := 'семьсот';
				                     else if s=8 then
                                             sto := 'восемьсот';
				                          else
                                             sto := 'девятьсот';
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  if d=0 then
    des := '';
  else if d=1 then
          IF o = 0 Then
		     des := 'десять';
          ELSE
		     des := 'надцать';
		  END IF;
	   else if d=2 then
               des := 'двадцать';
			else if d=3 then
                    des := 'тридцать';
				 else if d=4 then
                         des := 'сорок';
					  else if d=5 then
                              des := 'пятьдесят';
						   else if d=6 then
                                   des := 'шестьдесят';
								else if d=7 then
                                        des := 'семьдесят';
									 else if d=8 then
                                             des := 'восемьдесят';
										  else
                                             des := 'девяносто';
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  if o=0 then
    ons := '';
  else if o=1 then
         IF (atr = 2) AND (d <> 1) Then
		   ons := 'одна';
         ELSE
		   ons := 'один';
		 END IF;
         if d<>1 then
           if atr=1 then
              ending:='рубль';
		   else if atr=2 then
                   ending:='тысяча';
				else if atr=3 then
                        ending:='миллион';
					 else  
                        ending:='миллиард';
					 end if;
  			    end if;
		   end if;
         end if;
       else if o=2 then
               IF (atr = 2) OR (d = 1) Then
			     ons := 'две';
               ELSE
			     ons := 'два';
			   END IF;
               if d<>1 then
                 if atr=1 then
                    ending:='рубля';
                 else if atr=2 then
                         ending:='тысячи';
				      else if atr=3 then
                              ending:='миллиона';
					       else
                              ending:='миллиарда';
 					       end if;
  			          end if;
		         end if;
               end if;
			else if o=3 then
                    ons := 'три';
                    if d<>1 then
                      if atr=1 then
                         ending:='рубля';
                      else if atr=2 then
                              ending:='тысячи';
				           else if atr=3 then
                                   ending:='миллиона';
					            else
                                   ending:='миллиарда';
 					            end if;
  			               end if;
		              end if;
                    end if;
 			     else if o=4 then
                         ons := 'четыр';
                         IF (d <> 1) Then
                           ons := ons || 'е';
                           if atr=1 then
                              ending:='рубля';
                           else if atr=2 then
                                   ending:='тысячи';
				                else if atr=3 then
                                        ending:='миллиона';
					                 else
                                        ending:='миллиарда';
       					             end if;
  			                    end if;
		                   end if;
						 END IF;
    			      else if o=5 then
                              ons := 'пят';
                              IF (d <> 1) Then
							    ons := ons || 'ь';
							  END IF;
    			           else if o=6 then
                                   ons := 'шест';
                                   IF (d <> 1) Then
								     ons := ons || 'ь';
								   END IF;
                                else if o=7 then
                                        ons := 'сем';
                                        IF (d <> 1) Then
										   ons := ons || 'ь';
										END IF;
									 else if o=8 then
                                             ons := 'восем';
                                             IF (d <> 1) Then
											    ons := ons || 'ь';
											 END IF;
										  else
                                             ons := 'девят';
                                             IF (d <> 1) Then
											    ons := ons || 'ь';
											 END IF;
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  IF d = 1 Then
    res := LTRIM(RTRIM(sto || ' ' || ons || des)) || ' ';
  ELSE
    res := LTRIM(RTRIM(sto || ' ' || des || ' ' || ons)) || ' ';
  END IF;
  IF res=' ' Then
    IF atr=1 then
	  RETURN ending;
    Else
	  RETURN '';
	END IF;
  ELSE
    RETURN (res || ending);
  END IF;
END;

/

--
-- PROPIS_V  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.PROPIS_V(cc VARCHAR2, atr NUMBER, all_cc VARCHAR2)
  RETURN VARCHAR2 IS
  s NUMBER;
  d NUMBER;
  o NUMBER;
  Err NUMBER;
  res VARCHAR2(50);
  sto VARCHAR2(50);
  des VARCHAR2(50);
  ons VARCHAR2(50);
  ending VARCHAR2(50);
BEGIN
  S:=TO_NUMBER(SUBSTR(cc,1,1));
  D:=TO_NUMBER(SUBSTR(cc,2,1));
  O:=TO_NUMBER(SUBSTR(cc,3,1));
  if atr=1 then
    ending:='( ' || all_cc || ' ) тонн';
  else if atr=2 then
          ending:='тысяч';
	   else if atr=3 then
               ending:='миллионов';
			else
               ending:='миллиардов';
			end if;
	   end if;
  end if;
  if s=0 then
     sto := '';
  else if s=1 then
          sto := 'сто';
	   else if s=2 then
	           sto := 'двести';
			else if s=3 then
                    sto := 'триста';
				 else if s=4 then
                         sto := 'четыреста';
                      else if s=5 then
                              sto := 'пятьсот';
				           else if s=6 then
                                   sto := 'шестьсот';
				                else if s=7 then
                                        sto := 'семьсот';
				                     else if s=8 then
                                             sto := 'восемьсот';
				                          else
                                             sto := 'девятьсот';
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  if d=0 then
    des := '';
  else if d=1 then
          IF o = 0 Then
		     des := 'десять';
          ELSE
		     des := 'надцать';
		  END IF;
	   else if d=2 then
               des := 'двадцать';
			else if d=3 then
                    des := 'тридцать';
				 else if d=4 then
                         des := 'сорок';
					  else if d=5 then
                              des := 'пятьдесят';
						   else if d=6 then
                                   des := 'шестьдесят';
								else if d=7 then
                                        des := 'семьдесят';
									 else if d=8 then
                                             des := 'восемьдесят';
										  else
                                             des := 'девяносто';
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  if o=0 then
    ons := '';
  else if o=1 then
         IF (atr = 2) AND (d <> 1) Then
		   ons := 'одна';
         ELSE
		   ons := 'один';
		 END IF;
         if d<>1 then
           if atr=1 then
              ending:='( ' || all_cc || ' ) тонна';
		   else if atr=2 then
                   ending:='тысяча';
				else if atr=3 then
                        ending:='миллион';
					 else
                        ending:='миллиард';
					 end if;
  			    end if;
		   end if;
         end if;
       else if o=2 then
               IF (atr = 2) OR (d = 1) Then
			     ons := 'две';
               ELSE
			     ons := 'два';
			   END IF;
               if d<>1 then
                 if atr=1 then
                    ending:='( ' || all_cc || ' ) тонны';
                 else if atr=2 then
                         ending:='тысячи';
				      else if atr=3 then
                              ending:='миллиона';
					       else
                              ending:='миллиарда';
 					       end if;
  			          end if;
		         end if;
               end if;
			else if o=3 then
                    ons := 'три';
                    if d<>1 then
                      if atr=1 then
                         ending:='( ' || all_cc || ' ) тонны';
                      else if atr=2 then
                              ending:='тысячи';
				           else if atr=3 then
                                   ending:='миллиона';
					            else
                                   ending:='миллиарда';
 					            end if;
  			               end if;
		              end if;
                    end if;
 			     else if o=4 then
                         ons := 'четыр';
                         IF (d <> 1) Then
                           ons := ons || 'е';
                           if atr=1 then
                              ending:='( ' || all_cc || ' ) тонны';
                           else if atr=2 then
                                   ending:='тысячи';
				                else if atr=3 then
                                        ending:='миллиона';
					                 else
                                        ending:='миллиарда';
       					             end if;
  			                    end if;
		                   end if;
						 END IF;
    			      else if o=5 then
                              ons := 'пят';
                              IF (d <> 1) Then
							    ons := ons || 'ь';
							  END IF;
    			           else if o=6 then
                                   ons := 'шест';
                                   IF (d <> 1) Then
								     ons := ons || 'ь';
								   END IF;
                                else if o=7 then
                                        ons := 'сем';
                                        IF (d <> 1) Then
										   ons := ons || 'ь';
										END IF;
									 else if o=8 then
                                             ons := 'восем';
                                             IF (d <> 1) Then
											    ons := ons || 'ь';
											 END IF;
										  else
                                             ons := 'девят';
                                             IF (d <> 1) Then
											    ons := ons || 'ь';
											 END IF;
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  IF d = 1 Then
    res := LTRIM(RTRIM(sto || ' ' || ons || des)) || ' ';
  ELSE
    res := LTRIM(RTRIM(sto || ' ' || des || ' ' || ons)) || ' ';
  END IF;
  IF res=' ' Then
    IF atr=1 then
	  RETURN ending;
    Else
	  RETURN '';
	END IF;
  ELSE
    RETURN (res || ending);
  END IF;
END;

/

--
-- RUSDATE  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.RusDate(date1 IN DATE)
  RETURN VARCHAR2 IS
  mm_txt VARCHAR2 (20);
  mm NUMBER;
  dd VARCHAR2(2);
  yy VARCHAR2(4);
BEGIN
  mm:=to_number(to_char(date1,'mm'));
  dd:=to_char(date1,'dd');
  yy:=to_char(date1,'yyyy');
--  if to_number(dd)<10 then
--  	 dd:=substr(dd,2,1);
--  end if;
  If mm=1 then
     mm_txt:=' января ';
  else if mm=2 then
          mm_txt:=' февраля ';
       else if mm=3 then
               mm_txt:=' марта ';
            else if mm=4 then
                    mm_txt:=' апреля ';
                 else if mm=5 then
                         mm_txt:=' мая ';
                      else if mm=6 then
                              mm_txt:=' июня ';
                           else if mm=7 then
                                   mm_txt:=' июля ';
                                else if mm=8 then
                                        mm_txt:=' августа ';
                                     else if mm=9 then
                                             mm_txt:=' сентября ';
                                          else if mm=10 then
                                                  mm_txt:=' октября ';
                                               else if mm=11 then
                                                       mm_txt:=' ноября ';
                                                    else
                                                       mm_txt:=' декабря ';
                                                    end if;
                                               end if;
                                          end if;
                                     end if;
                                end if;
                           end if;
                      end if;
                 end if;
            end if;
       end if;
  end if;
  RETURN (dd || mm_txt || yy || ' г.');
END;

/

--
-- RUSMONTH  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.RusMonth(date1 IN DATE)
  RETURN VARCHAR2 IS
  mm_txt VARCHAR2 (20);
  mm NUMBER;
  yy VARCHAR2(4);
BEGIN
  mm:=to_number(to_char(date1,'mm'));
  yy:=to_char(date1,'yyyy');
  If mm=1 then
     mm_txt:=' Январь ';
  else if mm=2 then
          mm_txt:=' Февраль ';
       else if mm=3 then
               mm_txt:=' Март ';
            else if mm=4 then
                    mm_txt:=' Апрель ';
                 else if mm=5 then
                         mm_txt:=' Май ';
                      else if mm=6 then
                              mm_txt:=' Июнь ';
                           else if mm=7 then
                                   mm_txt:=' Июль ';
                                else if mm=8 then
                                        mm_txt:=' Август ';
                                     else if mm=9 then
                                             mm_txt:=' Сентябрь ';
                                          else if mm=10 then
                                                  mm_txt:=' Октябрь ';
                                               else if mm=11 then
                                                       mm_txt:=' Ноябрь ';
                                                    else
                                                       mm_txt:=' Декабрь ';
                                                    end if;
                                               end if;
                                          end if;
                                     end if;
                                end if;
                           end if;
                      end if;
                 end if;
            end if;
       end if;
  end if;
  RETURN (mm_txt || yy || ' г.');
END;

/

--
-- SF_F_GET_PROPISI_SFPROD_KVIT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.sf_f_get_propisi_sfprod_kvit
 (summa# number)
return varchar2
as
  sum# number;
  val# varchar2(3);
--  propis# varchar2(4000);
begin
  sum#:=summa#;
  --select prod_sum into sum# from bills
  --where nom_dok = nom_dok#;
  val#:='РУБ';
  return Upper(Substr(sfsys.get_propisi (sum#, val#),1,1)) || Substr(sfsys.get_propisi (sum#, val#),2,length(sfsys.get_propisi (sum#, val#))-1);
end sf_f_get_propisi_sfprod_kvit; 
/

--
-- STUPID_PLAT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.STUPID_PLAT(Kod_plat IN NUMBER)
   RETURN VARCHAR2
   IS
   ret VARCHAR(100);
   BEGIN
      RET:='ничего';
      IF (kod_plat in (456)) THEN
	    RET:=('ООО "ЛУКОЙЛ-Холдинг-Сервис');
	  END IF;
      IF (kod_plat in (12,717,2794)) THEN
        RET:=('ООО "Торговый Дом ЛУКОЙЛ');
      END IF;
      IF (kod_plat in (827,828)) THEN
        RET:=('ЗАО "ЛУКОЙЛ-Нефтехим');
      END IF;
	  RETURN Ret;
    END;

/

--
-- SUM_PR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.SUM_PR(summa NUMBER)
  RETURN VARCHAR2 IS
  cc VARCHAR2(255);
  kops VARCHAR2(255);
  rbl VARCHAR2(255);
  ths VARCHAR2(255);
  mln VARCHAR2(255);
  bln VARCHAR2(255);
  sm NUMBER;
BEGIN
  IF summa=0 THEN
    RETURN '0 руб. 0 коп.';
  END IF;
  sm := ABS(summa);
  cc:=LTRIM(RTRIM(TO_CHAR(sm,'00000000000000.00')));
  kops := SUBSTR(cc,16,2) || ' коп';
  bln := propis_s(SUBSTR(cc,3,3),4);
  if bln || ' ' <> ' ' then
    bln:=bln || ' ';
  END IF;
  mln := propis_s(SUBSTR(cc,6,3),3);
  if mln || ' ' <> ' ' then
    mln:=mln || ' ';
  END IF;
  ths := propis_s(SUBSTR(cc,9,3),2);
  if ths || ' ' <> ' ' then
    ths:=ths || ' ';
  END IF;
  rbl := propis_s(SUBSTR(cc,12,3),1);
  IF TO_NUMBER(SUBSTR(cc,3,12)) <> 0 Then
    RETURN (bln || mln || ths || rbl || ' ' || kops);
  ELSE
    RETURN ('ноль руб ' || kops);
  End IF;
End;

/

--
-- TIPERROR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.TIPERROR(ktu_prod VARCHAR2, unp_prod VARCHAR2, ktu_nom_zd VARCHAR2, unp_nom_zd VARCHAR2, ktu_nariad VARCHAR2, unp_nariad VARCHAR2, ktu_doveren VARCHAR2, unp_doveren VARCHAR2, ktu_ves NUMBER, unp_ves NUMBER, date_end DATE, max_date_nar DATE)
  RETURN VARCHAR2 IS
  Res VARCHAR2(250);
  Ending VARCHAR2(250);
  OutS VARCHAR2(250);
BEGIN

  Res := '';
  Ending := '';

  If (ktu_ves <> 0 OR ktu_ves is not null) And (unp_ves = 0 OR unp_ves is null) Then
    Res := Res || Ending || 'НЕТ отгрузки';
    Ending := ' ; ';
  Else
    If (ktu_ves = 0 OR ktu_ves is null) And (unp_ves <> 0 OR unp_ves is not null) Then
      Res := Res || Ending || 'НЕТ наряда/разнарядки';
      Ending := ' ; ';
    Else
      If ktu_prod || ' ' <> unp_prod || ' ' Then
        Res := Res || Ending || 'В разнарядке н/п - ' || ktu_prod;
        Ending := ' ; ';
      End If;
      If unp_ves > ktu_ves Then
        Res := Res || Ending || 'Перегруз';
        Ending := ' ; ';
      End If;
      If max_date_nar > date_end Then
        Res := Res || Ending || 'Превышение срока наряда (по наряду - ' || date_end || ', а отгрузка - ' || TO_CHAR(max_date_nar,'dd.mm.yyyy') || ')';
        Ending := ' ; ';
      End If;
    End If;
  End If;

  RETURN Res;
End;

/

--
-- TRIM_NUMNAR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.TRIM_NUMNAR(InS VARCHAR2)
  RETURN VARCHAR2 IS
  i NUMBER;
  j NUMBER;
  OutS VARCHAR2(250);
BEGIN
  IF InS IS NULL THEN
    RETURN InS;
  ELSE
    OutS := LTRIM(RTRIM(InS));

    i := 1;
    FOR ii IN 1..Length(OutS) LOOP
      i := ii;
      IF SUBSTR(OutS, i, 1) <> '0' THEN
        EXIT;
      END IF;
    END LOOP;

    j := 1;
    FOR jj IN 1..LENGTH(OutS) LOOP
      j:=LENGTH(OutS)-jj+1;
      IF SUBSTR(OutS, j, 1) <> '.' THEN
        EXIT;
      END IF;
    END LOOP;

    OutS := SUBSTR(OutS, i, j - i + 1);
	RETURN OutS;
  END IF;

END;

/

--
-- VES_PR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.VES_PR(summa NUMBER)
  RETURN VARCHAR2 IS
  cc VARCHAR2(255);
  kops VARCHAR2(255);
  rbl VARCHAR2(255);
  ths VARCHAR2(255);
  mln VARCHAR2(255);
  bln VARCHAR2(255);
  res VARCHAR2(255);
  sm NUMBER;
  cc1 VARCHAR2(255);
BEGIN
  IF summa=0 THEN
    RETURN '0 кг.';
  END IF;
  sm := ABS(summa);
  cc:=LTRIM(RTRIM(TO_CHAR(sm,'0000000000000.000')));
  cc1:=LTRIM(RTRIM(TO_CHAR(TRUNC(sm,0))));
  kops := LTRIM(RTRIM(SUBSTR(cc,15,3) || ' кг.'));
  bln := propis_v(SUBSTR(cc,2,3),4,cc1);
  if bln || ' ' <> ' ' then
    bln:=bln || ' ';
  END IF;
  mln := propis_v(SUBSTR(cc,5,3),3,cc1);
  if mln || ' ' <> ' ' then
    mln:=mln || ' ';
  END IF;
  ths := propis_v(SUBSTR(cc,8,3),2,cc1);
  if ths || ' ' <> ' ' then
    ths:=ths || ' ';
  END IF;
  rbl := propis_v(SUBSTR(cc,11,3),1,cc1);
  IF TO_NUMBER(SUBSTR(cc,2,12)) <> 0 Then
    Res:=LTRIM(RTRIM(bln || mln || ths || rbl || ' ' || kops));
  ELSE
    Res:=kops;
  End IF;
  RETURN UPPER(SUBSTR(Res,1,1)) || LOWER(SUBSTR(Res,2,LENGTH(Res)-1));
END;

/

--
-- DIS_ALL_DOCS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.DIS_ALL_DOCS
(DOCUMENT_ID, OWNER, DOCUMENT_NAME, COMMENTS, CREATE_DATE, 
 MODIFIED_DATE, MODIFIED_BY, DOC_LENGTH, DOCUMENT, BATCH)
AS 
SELECT "DOCUMENT_ID" ,  "OWNER" ,  "DOCUMENT_NAME" ,  "COMMENTS" ,  "CREATE_DATE" ,  "MODIFIED_DATE" ,  "MODIFIED_BY" ,  "DOC_LENGTH" ,  "DOCUMENT" ,  "BATCH" FROM DIS_DOCS_ A WHERE ((OWNER = USER) OR EXISTS(SELECT B.DOCUMENT_ID FROM DIS_GRANTS_ B WHERE A.DOCUMENT_ID = B.DOCUMENT_ID AND (UPPER(GRANTEE) = 'PUBLIC' OR USER LIKE UPPER(GRANTEE) OR UPPER(GRANTEE) IN (SELECT ROLE FROM SESSION_ROLES)))) WITH CHECK OPTION;


--
-- DIS_DOCS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.DIS_DOCS
(DOCUMENT_ID, OWNER, DOCUMENT_NAME, COMMENTS, CREATE_DATE, 
 MODIFIED_DATE, MODIFIED_BY, DOC_LENGTH, DOCUMENT, BATCH)
AS 
SELECT "DOCUMENT_ID" ,  "OWNER" ,  "DOCUMENT_NAME" ,  "COMMENTS" ,  "CREATE_DATE" ,  "MODIFIED_DATE" ,  "MODIFIED_BY" ,  "DOC_LENGTH" ,  "DOCUMENT" ,  "BATCH" FROM DIS_DOCS_ WHERE OWNER = USER WITH CHECK OPTION;


--
-- DIS_GRANTS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.DIS_GRANTS
(DOCUMENT_ID, OWNER, GRANTEE)
AS 
SELECT "DOCUMENT_ID" ,  "OWNER" ,  "GRANTEE" FROM DIS_GRANTS_ WHERE OWNER = USER WITH CHECK OPTION;


--
-- EUL_ODBC_CATALOGS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.EUL_ODBC_CATALOGS
(OC_CATALOG_NAME)
AS 
SELECT DB_LINK FROM ALL_DB_LINKS;


--
-- EUL_ODBC_SCHEMAS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.EUL_ODBC_SCHEMAS
(OS_SCHEMA_NAME)
AS 
SELECT USERNAME FROM ALL_USERS;


--
-- ISU_VIEW_DOCS_EXIST_NOPACK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.ISU_VIEW_DOCS_EXIST_NOPACK
("Номер документа", "Дата документа", "ПРИЧИНА", "Имя файла", "ПОЗИЦИЯ")
AS 
select ISU_TAX_DOCS.DOC_NUM as "Номер документа",
       ISU_TAX_DOCS.DOC_DATE as "Дата документа",
       ISU_TAX_REASON.reason as "Причина",
       ISU_TAX_FILES.file_name as "Имя файла",
       ISU_TAX_EXIST.file_pos_num as "Позиция"
       from ISU_TAX_EXIST 
            JOIN ISU_TAX_DOCS ON ISU_TAX_EXIST.DOC_ID=ISU_TAX_DOCS.ID AND ISU_TAX_DOCS.PACKAGE_ID IS NULL 
            JOIN ISU_TAX_REASON ON ISU_TAX_EXIST.reason_id=ISU_TAX_REASON.id
            JOIN ISU_TAX_FILES ON ISU_TAX_EXIST.file_id=ISU_TAX_FILES.id;


--
-- ISU_VIEW_DOCS_EXIST_PACK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.ISU_VIEW_DOCS_EXIST_PACK
("Номер документа", "Дата документа")
AS 
select DOC_NUM as "Номер документа",
        DOC_DATE as "Дата документа"  
        from ISU_TAX_EXIST 
            JOIN ISU_TAX_DOCS ON ISU_TAX_EXIST.DOC_ID=ISU_TAX_DOCS.ID AND ISU_TAX_DOCS.PACKAGE_ID IS NOT NULL;


--
-- ISU_VIEW_DOCS_NOPACK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.ISU_VIEW_DOCS_NOPACK
(ID, PACKAGE_ID, EXT_DOC_NUM, DOC_NUM, DOC_DATE, 
 DOC_SOURCE_ID, CREATION_DATE, DOC_REL_ID, PARENT_DOC_NUM, PARENT_DOC_DATE, 
 PARENT_DOC_REL_ID, PARENT_DOC_ID, CONTRAGENT)
AS 
select "ID","PACKAGE_ID","EXT_DOC_NUM","DOC_NUM","DOC_DATE","DOC_SOURCE_ID","CREATION_DATE","DOC_REL_ID","PARENT_DOC_NUM","PARENT_DOC_DATE","PARENT_DOC_REL_ID","PARENT_DOC_ID","CONTRAGENT" from ISU_TAX_DOCS WHERE PACKAGE_ID IS NULL;


--
-- MONTH_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.MONTH_ALL
(KLS_PREDPR_ID, KLS_DOG_ID, KLS_PROD_ID, DATE_DOG, REQUEST, 
 DATE_PLAN, STAN_ID, ID, INPUT_DATE, IS_WORK, 
 PRICH, INPUT_NUMBER, PAYFORM_ID, LOAD_ABBR, VETKA_ID, 
 GR4, POLUCH_ID, POTREB_ID, USL_OPL_ID, ORGSTRU_ID, 
 PRICE, POLUCH_NAME, POTREB_NAME, PARUS_RN, PRICE_POK, 
 PRICE_REAL, PARUS_AGENT_RN, PARUS_AGENT_TAG, PARUS_AGENT_NAME, PARUS_DOGOVOR, 
 PARUS_NOMEN_RN, PARUS_NOMEN_TAG, PARUS_NOMEN_NAME, PARUS_MODIF_RN, PARUS_MODIF_TAG, 
 PARUS_MODIF_NAME, APPL_TAG, IS_REQUESTED, EXECUTED, KLS_PLANSTRUID, 
 STORE_NAME, NOM_ZD, IS_AGENT, TYPE_ZAKAZ_ID, CLIENT_NUMBER, 
 CLIENT_DATE, STATUS_ZAKAZ_ID, KOL, SPEED_VES, SPEED_KOL, 
 MON_VES, MON_KOL, BEGIN_DATE, ZAKAZ_OLD_ID)
AS 
select 
  PLAT_ID as KLS_PREDPR_ID, 
  DOG_ID as KLS_DOG_ID, 
  TO_NUMBER(PROD_ID_NPR) as KLS_PROD_ID, 
  NULL as DATE_DOG, 
  VES as REQUEST, 
  DATE_PLAN, 
  STAN_ID, 
  ID, 
  INPUT_DATE, 
  1 as IS_WORK, 
  PRIM as PRICH, 
  INPUT_NUMBER, 
  PAYFORM_ID, 
  LOAD_ABBR, 
  VETKA_ID, 
  GR4, 
  POLUCH_ID, 
  POTREB_ID, 
  USL_OPL_ID, 
  FILIAL_ID as ORGSTRU_ID, 
  PRICE, 
  POTREB_NAME as POLUCH_NAME, 
  POTREB_NAME, 
  NULL as PARUS_RN, 
  0 as PRICE_POK, 
  0 as PRICE_REAL, 
  NULL as PARUS_AGENT_RN, 
  NULL as PARUS_AGENT_TAG, 
  NULL as PARUS_AGENT_NAME, 
  NULL as PARUS_DOGOVOR, 
  NULL as PARUS_NOMEN_RN, 
  NULL as PARUS_NOMEN_TAG, 
  NULL as PARUS_NOMEN_NAME, 
  NULL as PARUS_MODIF_RN, 
  NULL as PARUS_MODIF_TAG, 
  NULL as PARUS_MODIF_NAME, 
  'MASTER' as APPL_TAG, 
  IS_ACCEPT as IS_REQUESTED, 
  FACT_VES as EXECUTED, 
  PLANSTRU_ID as KLS_PLANSTRUID, 
  NEFTEBASA as STORE_NAME, 
  NOM_ZD_LIST as NOM_ZD, 
  IS_AGENT, 
  NULL as TYPE_ZAKAZ_ID, 
  CLIENT_NUMBER, 
  CLIENT_DATE, 
  10 as STATUS_ZAKAZ_ID, 
  KOL, 
  SPEED_VES, 
  SPEED_KOL, 
  LOAD_VES as MON_VES, 
  LOAD_KOL as MON_KOL, 
  BEGIN_DATE, 
  ZAKAZ_PREV_ID as ZAKAZ_OLD_ID 
from zakaz;


--
-- MONTH_ALL_ROW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.MONTH_ALL_ROW
(ID, MONTH_ALL_ID, SORTBY, CLIENT_NUMBER, CLIENT_DATE, 
 INPUT_NUMBER, INPUT_DATE, REQUEST, KOL, SPEED_VES, 
 SPEED_KOL, KLS_PREDPR_ID, KLS_DOG_ID, DATE_DOG, KLS_PROD_ID, 
 STAN_ID, PRICH, PAYFORM_ID, LOAD_ABBR, VETKA_ID, 
 GR4, POLUCH_ID, POTREB_ID, USL_OPL_ID, ORGSTRU_ID, 
 PRICE, POLUCH_NAME, POTREB_NAME, PRICE_POK, PRICE_REAL, 
 KLS_PLANSTRUID, STORE_NAME, NOM_ZD, STATUS_ZAKAZ_ID, GU12_A_ID, 
 STAN_OLD_ID, BEGIN_DATE)
AS 
select 
  zakaz_hist.ID, 
  ZAKAZ_ID as MONTH_ALL_ID, 
  SORTBY, 
  zakaz_hist.CLIENT_NUMBER, 
  zakaz_hist.CLIENT_DATE, 
  zakaz_hist.INPUT_NUMBER, 
  zakaz_hist.INPUT_DATE, 
  zakaz_hist.VES as REQUEST, 
  zakaz_hist.KOL, 
  zakaz_hist.SPEED_VES, 
  zakaz_hist.SPEED_KOL, 
  zakaz.PLAT_ID as KLS_PREDPR_ID, 
  zakaz.DOG_ID as KLS_DOG_ID, 
  NULL as DATE_DOG, 
  TO_NUMBER(zakaz_hist.PROD_ID_NPR) as KLS_PROD_ID, 
  zakaz_hist.STAN_ID, 
  zakaz.PRIM as PRICH, 
  zakaz.PAYFORM_ID, 
  zakaz.LOAD_ABBR, 
  zakaz.VETKA_ID, 
  zakaz.GR4, 
  zakaz_hist.POLUCH_ID, 
  zakaz.POTREB_ID, 
  zakaz.USL_OPL_ID, 
  zakaz.FILIAL_ID as ORGSTRU_ID, 
  zakaz_hist.PRICE, 
  zakaz.POTREB_NAME as POLUCH_NAME, 
  zakaz.POTREB_NAME, 
  0 as PRICE_POK, 
  0 as PRICE_REAL, 
  zakaz.PLANSTRU_ID as KLS_PLANSTRUID, 
  zakaz.NEFTEBASA as STORE_NAME, 
  NOM_ZD, 
  STATUS_ZAKAZ_ID, 
  GU12_A_ID, 
  OLD_STAN_ID as STAN_OLD_ID , 
  zakaz_hist.BEGIN_DATE 
from zakaz_hist,zakaz 
where zakaz_hist.zakaz_id=zakaz.id;


--
-- PARUS_AGNLIST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.PARUS_AGNLIST
(RN, AGNABBR, AGNNAME, AGNIDNUMB, ECONCODE, 
 NATECONSECT, ORGCODE, CITYNAME, STREETNAME, ADDR_HOUSE, 
 ADDR_POST, PHONE, PHONE2, FAX, TELEX, 
 MAIL, PROPFORM)
AS 
SELECT "RN","AGNABBR","AGNNAME","AGNIDNUMB","ECONCODE","NATECONSECT","ORGCODE","CITYNAME","STREETNAME","ADDR_HOUSE","ADDR_POST","PHONE","PHONE2","FAX","TELEX","MAIL","PROPFORM" FROM VANEEV.V_AGNLIST_FOR_MASTER@oracle.world;


--
-- PLAN_PROIZVODSTVO_SUT_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.PLAN_PROIZVODSTVO_SUT_VIEW
(DATE_PLAN, OKP, KCCC, NAME_OIL_PRODUCT, PLAN_PROIZVODSTVO_SUT)
AS 
select "DATE_PLAN","OKP","KCCC","NAME_OIL_PRODUCT","PLAN_PROIZVODSTVO_SUT" from ART.plan_proizvodstvo_sut_view@ORA.LUNP.RU@ART;


--
-- PLAN_RESU_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.PLAN_RESU_OLD
(DATE_PLAN, PROD_ID_NPR, PLAN_UTMSK, HRAN_UTMSK, OSTAT_UTMSK)
AS 
SELECT PLAN_REFINERY.DATE_PLAN,PLAN_REFINERY.PROD_ID_NPR,
SUM(PLAN_REFINERY.PLAN_UTMSK) AS PLAN_UTMSK, SUM(PLAN_REFINERY.HRAN_UTMSK) AS HRAN_UTMSK,
SUM(PLAN_REFINERY.OSTAT_UTMSK) AS OSTAT_UTMSK
FROM PLAN_REFINERY
GROUP BY PLAN_REFINERY.DATE_PLAN,PLAN_REFINERY.PROD_ID_NPR;


--
-- PREDPR_TALGAR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.PREDPR_TALGAR
(P_NAME, P_ID, P_SNAME, P_INN, P_ZIPJ, 
 P_ZIPP, P_CITYP, P_CITYJ, P_ADRESSP, P_ADRESSJ, 
 P_OKONH, P_OKPO, P_FAX, P_PHONE, PB_KKORS, 
 P_TID, PB_NAME, PB_ADRESS, PB_BIK, PB_ZIZ, 
 PR_NAME, PR_SNAME, P_HNAME, P_STATSNAME, P_STATESHORT, 
 P_PERTYPE, P_FS, P_IDFS, P_IDCOUNTRY, P_IDBSCH, 
 P_IDGRCOM, P_FDK, P_STATUS, P_CREATED, P_MODIFIED)
AS 
SELECT kls_predpr.predpr_name, kls_predpr.id, kls_predpr.short_name,
       kls_predpr.inn, kls_predpr.postindex_j, kls_predpr.postindex_p,
       kls_predpr.city_p, kls_predpr.city_j, kls_predpr.address_p,
       kls_predpr.address_j, kls_predpr.okonh, substr(kls_predpr.okpo,1,8), kls_predpr.fax,
       kls_predpr.phone, kls_predpr.bank_kors, kls_predpr.talgar_id,
       kls_bank.bank_name, kls_bank.address, kls_bank.bik, kls_bank.postindex,
       kls_region.region_name, kls_region.short_name, kls_holding.holding_name,
       kls_states.state_name, kls_states.short_name, kls_pertype.pertype_name, 
	   rtrim(substr(kls_predpr.predpr_name,1,4)),csl_k.cs_fs.id,181,121,kls_holding.id,3,3,sysdate,sysdate
  FROM kls_predpr, kls_bank, kls_holding, kls_region, kls_states, kls_pertype, csl_k.cs_fs
 WHERE (    (kls_bank.kors = kls_predpr.bank_kors)
        AND (kls_holding.id = kls_predpr.holding_id)
        AND (kls_region.id = kls_predpr.region_id)
        AND (kls_states.id = kls_region.states_id)
        AND (kls_pertype.id = kls_predpr.pertype_id)
        AND (kls_predpr.postindex_j <> '0')
        AND (kls_predpr.postindex_p <> '0')
        AND ((kls_predpr.talgar_id = 0) or (kls_predpr.talgar_id is null))
		AND (csl_k.cs_fs.code=rtrim(substr(kls_predpr.predpr_name,1,4)))
       );


--
-- V_APPL_SESSION_NOW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_APPL_SESSION_NOW
(SID, DATETIME, USERNAME, STATUS, OSUSER, 
 COMPUTER, MODULE, PROGRAM, LOGON_TIME, LAST_CALL_ET)
AS 
select SID,sysdate as datetime,username,status,NLS_UPPER(osuser) as osuser,NLS_UPPER(terminal) as computer,NLS_UPPER(NVL(program,module)) as module,
(case
    when NLS_LOWER(NVL(program,module)) in  ('pasport.exe','r3csv.exe','repxls.exe','pview.exe','statrep.exe') then 'PASP'
    when NLS_LOWER(NVL(program,module)) in  ('master.exe') then 'MASTER'
    when NLS_LOWER(NVL(program,module)) in  ('dispetcher.exe','repxlsdisp.exe','svodgg.exe','svodpn.exe','gl_name_new.exe','bitum.exe','pro.exe','tsc.exe') then 'DISP_SVOD'
    when NLS_LOWER(NVL(program,module)) in  ('ycet.exe','arxiv.exe','copyfile.exe','impost.exe','impotgr.exe','impper.exe','imptov.exe','reports2.exe','oiluk.exe','repdisp.exe','oilsync.exe','oil.exe') then 'TOV_UCHET'
    when NLS_LOWER(NVL(program,module)) in  ('pretenz.exe') then 'PRETENZ'
    when NLS_LOWER(NVL(program,module)) in  ('azsstop.exe') then 'AZSSTOP'
    else '?'
  end) as program,  
logon_time,last_call_et from sys.v_$session 
where NLS_UPPER(NVL(program,module)) not like 'ORACLE.EXE%';


--
-- V_AZC_FROM_PARUS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_FROM_PARUS
(ID, OSUSER_NAME, TERMINAL_NAME, NNOMEN, SNOMEN, 
 NSTORE, SSTORE, REALIZ_ALL, REALIZ_AVG, IS_AZC, 
 OSTATOK)
AS 
SELECT "ID","OSUSER_NAME","TERMINAL_NAME","NNOMEN","SNOMEN","NSTORE","SSTORE","REALIZ_ALL","REALIZ_AVG","IS_AZC","OSTATOK" FROM AZC_FROM_PARUS
WHERE TERMINAL_NAME=For_Init.GetCurrTerm
  AND OSUSER_NAME=For_Init.GetCurrUser;


--
-- V_AZC_SYS_FIELDS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_SYS_FIELDS
(ID, NAME, N_ORDER, CAPTION, SIZE_FIELD)
AS 
SELECT A.ID, A.NAME, B.N_ORDER,B.CAPTION, B.SIZE_FIELD  FROM AZC_OPER_MAIN A, AZC_OPER_FIELDS B
WHERE 
A.ID = B.N_PAGE;


--
-- V_AZC_WEEK_ERR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_WEEK_ERR
(TEXT)
AS 
select "TEXT" from parus.v_snp_error_check_osv@oracle.world;


--
-- V_AZC_WEEK_TEST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_WEEK_TEST
(STORE, NOMEN, REALIZ, REAL_ALL, QUANT, 
 DDATE, NSTORE, NNOMEN, RN)
AS 
SELECT "STORE","NOMEN","REALIZ","REAL_ALL","QUANT","DDATE","NSTORE","NNOMEN","RN" FROM parus.tb_snp_stat_osv@oracle.world;


--
-- V_AZS_DISP_ORDERS_AAA  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZS_DISP_ORDERS_AAA
(STORE_RN, NOMEN_RN, SUM_VOL, SUM_MAS, OPER_DAY)
AS 
select store_rn, nomen_rn, sum(volume) as sum_vol, sum(massa) as sum_mas, oper_day 
from 
(
parus.TB_SNP_STORE_OPER_PSV@oracle.world
) 
where USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER')) 
and source_id = 86 
group by store_rn, nomen_rn, oper_day;


--
-- V_AZS_REPORTS_LAST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZS_REPORTS_LAST
(ORG_STRU_ID, LAST_DAY)
AS 
SELECT ORG_STRU_ID,MAX(OPER_DAY) as LAST_DAY
FROM AZS_REPORTS_TMP
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser
GROUP BY ORG_STRU_ID;


--
-- V_AZS_REPORTS_TMP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZS_REPORTS_TMP
(TYPE_OPER_ID, DISCOUNT, ORG_STRU_ID, PROD_ID_NPR, OPER_DAY, 
 PRICE, VOLUME, MASSA, SUMMA)
AS 
SELECT "TYPE_OPER_ID","DISCOUNT","ORG_STRU_ID","PROD_ID_NPR","OPER_DAY","PRICE","VOLUME","MASSA","SUMMA" FROM AZS_REPORTS_TMP
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_CB_KLSACC  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_CB_KLSACC
(BV_BIK, BV_ACC, ID, CITY, BALUNIT, 
 JUR_PERS, BANKDOKPREF, TYPE_OPER_IN, TYPE_OPER_OUT, BANK_DOCTYPE, 
 RN, ON_LINE, SBANK_DOCTYPE, STYPE_OPER_IN, STYPE_OPER_OUT, 
 SJURPERS, SBALUNIT, SCURRENCY, SMTP_HOST, EMAIL_NAME, 
 CATALOG)
AS 
SELECT kls_acc."BV_BIK",kls_acc."BV_ACC",kls_acc."ID",kls_acc."CITY",kls_acc."BANKDOKPREF",kls_acc."RN",kls_acc."ON_LINE",kls_acc."SBANK_DOCTYPE",kls_acc."STYPE_OPER_IN",kls_acc."STYPE_OPER_OUT",kls_acc."SJURPERS",kls_acc."SBALUNIT",kls_acc."SCURRENCY",kls_acc."SMTP_HOST",kls_acc."EMAIL_NAME",kls_acc."CATALOG",kls_acc."REMARK",kls_acc."IS_OK"
FROM   pvz.kls_acc@oracle.world;


--
-- V_CLIENTBANK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_CLIENTBANK
(BO_SENDER, BO_INN_S, BO_ACC_S, BO_BIK_S, KREDIT, 
 DEBET, BO_RECEIVER, BO_INN_R, BO_ACC_R, BO_BIK_R, 
 BO_NUM, BO_NAZN, BO_DT, BO_KS_R, BO_KS_S, 
 BO_VID, BO_RN_PARUS, ID, ACCKEY, BO_SUMM, 
 ID_CODE, RID)
AS 
SELECT /*+ PARALLEL (PVZ_BNOPRS 2) */
       cb.Bo_sender, cb.Bo_inn_s, cb.Bo_acc_s,
       cb.Bo_bik_s,
       DECODE (cb.Bo_vid, 1, cb.Bo_summ, 0) AS Kredit,
       DECODE (cb.Bo_vid, 1, 0, cb.Bo_summ) AS Debet,
       cb.Bo_receiver, cb.Bo_inn_r, cb.Bo_acc_r,
       cb.Bo_bik_r, cb.Bo_num, cb.Bo_nazn,
       cb.Bo_dt, cb.Bo_ks_r, cb.Bo_ks_s,
       cb.Bo_vid, cb.Bo_rn_parus, cb.ID,
       cb.Acckey, cb.Bo_summ, cb.Id_code, ROWID as rid
  FROM Pvz.Pvz_bnoprs@Oracle.World cb;


--
-- V_DESIGNER_COLUMNS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DESIGNER_COLUMNS
(TAB_NAME, SEQ_NUM, COL_NAME, DATATYPE, MAXIMUM_LENGTH, 
 DECIMAL_PLACES, NULL_INDICATOR, PROMPT)
AS 
SELECT DISTINCT C.TABLE_NAME, C.COLUMN_ID, C.COLUMN_NAME,
C.data_type,DECODE(C.data_type,'VARCHAR2',C.data_length,C.data_precision),NVL(C.data_scale,0),
C.NULLABLE,''
FROM sys.USER_TAB_COLUMNS C
ORDER BY C.TABLE_NAME, C.COLUMN_ID;


--
-- V_DESIGNER_FOREIGN_KEYS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DESIGNER_FOREIGN_KEYS
(TAB_NAME, PK_NAME, COL_NAME, POSITION)
AS 
SELECT DISTINCT UC.TABLE_NAME AS tab_name, UC.CONSTRAINT_NAME AS index_name,C.COLUMN_NAME AS col_name,C.POSITION
FROM SYS.USER_CONSTRAINTS UC, SYS.USER_CONS_COLUMNS C
WHERE UC.CONSTRAINT_TYPE='R'
AND UC.CONSTRAINT_NAME=C.CONSTRAINT_NAME
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_NAME,C.POSITION;


--
-- V_DESIGNER_PRIMARY_KEYS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DESIGNER_PRIMARY_KEYS
(TAB_NAME, PK_NAME, COL_NAME, POSITION, COL_TYPE)
AS 
SELECT DISTINCT UC.TABLE_NAME AS tab_name, UC.CONSTRAINT_NAME AS index_name,C.COLUMN_NAME AS col_name,C.POSITION, CC.DATA_TYPE
FROM SYS.USER_CONSTRAINTS UC, SYS.USER_CONS_COLUMNS C, sys.USER_TAB_COLUMNS CC
WHERE UC.CONSTRAINT_TYPE='P'
AND UC.CONSTRAINT_NAME=C.CONSTRAINT_NAME
AND C.TABLE_NAME=CC.TABLE_NAME
AND C.COLUMN_NAME=CC.COLUMN_NAME
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_NAME,C.POSITION;


--
-- V_DESIGNER_SEQUENCES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DESIGNER_SEQUENCES
(TAB_NAME, PK_NAME, COL_NAME, SEQ_NAME)
AS 
SELECT DISTINCT T.NAME AS tab_name, O.NAME AS index_name,C.NAME AS col_name, SQ.NAME AS seq_name
FROM designer6.SDD_TAB T, designer6.SDD_OCO O, designer6.SDD_OKY Y, designer6.SDD_COL C, designer6.SDD_OSQ SQ
WHERE O.PARENT_IVID=T.IVID AND O.TABLE_REF=T.IRID
AND Y.PARENT_IVID=O.PARENT_IVID AND Y.CONSTRAINT_REF=O.IRID
AND C.PARENT_IVID=Y.PARENT_IVID AND C.IRID=Y.COLUMN_REF
AND C.SEQUENCE_REF=SQ.IRID
AND T.ELEMENT_TYPE_NAME='TAB'
AND O.COMPLETE_FLAG='Y'
AND O.CONSTRAINT_TYPE='PRIMARY'
AND Y.CONSTRAINT_TYPE='PRIMARY'
ORDER BY T.NAME,O.NAME,C.NAME;


--
-- V_DESIGNER_TABLES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DESIGNER_TABLES
(TAB_NAME)
AS 
SELECT DISTINCT T.TABLE_NAME AS tab_name FROM SYS.USER_TABLES T
ORDER BY T.TABLE_NAME;


--
-- V_DIAGRAM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DIAGRAM
(COL_X1_NAME, COL_X1_VALUE, COL_X2_NAME, COL_X2_VALUE, COL_X3_NAME, 
 COL_X3_VALUE, COL_Y1_NAME, COL_Y1_VALUE, COL_Y2_NAME, COL_Y2_VALUE, 
 COL_Y3_NAME, COL_Y3_VALUE, COL_Y4_NAME, COL_Y4_VALUE, COL_Y5_NAME, 
 COL_Y5_VALUE, COL_Y6_NAME, COL_Y6_VALUE, COL_Y7_NAME, COL_Y7_VALUE, 
 COL_Y8_NAME, COL_Y8_VALUE, COL_Y9_NAME, COL_Y9_VALUE, COL_Y10_NAME, 
 COL_Y10_VALUE, COL_Y11_NAME, COL_Y11_VALUE, COL_Y12_NAME, COL_Y12_VALUE, 
 COL_Y13_NAME, COL_Y13_VALUE, COL_Y14_NAME, COL_Y14_VALUE, COL_Y15_NAME, 
 COL_Y15_VALUE, COL_Y16_NAME, COL_Y16_VALUE, COL_Y17_NAME, COL_Y17_VALUE, 
 COL_Y18_NAME, COL_Y18_VALUE, COL_Y19_NAME, COL_Y19_VALUE, COL_Y20_NAME, 
 COL_Y20_VALUE, COL_SORT, PRIM, TITLE, VIEW_ROW)
AS 
SELECT "COL_X1_NAME","COL_X1_VALUE","COL_X2_NAME","COL_X2_VALUE","COL_X3_NAME","COL_X3_VALUE","COL_Y1_NAME","COL_Y1_VALUE","COL_Y2_NAME","COL_Y2_VALUE","COL_Y3_NAME","COL_Y3_VALUE","COL_Y4_NAME","COL_Y4_VALUE","COL_Y5_NAME","COL_Y5_VALUE","COL_Y6_NAME","COL_Y6_VALUE","COL_Y7_NAME","COL_Y7_VALUE","COL_Y8_NAME","COL_Y8_VALUE","COL_Y9_NAME","COL_Y9_VALUE","COL_Y10_NAME","COL_Y10_VALUE","COL_Y11_NAME","COL_Y11_VALUE","COL_Y12_NAME","COL_Y12_VALUE","COL_Y13_NAME","COL_Y13_VALUE","COL_Y14_NAME","COL_Y14_VALUE","COL_Y15_NAME","COL_Y15_VALUE","COL_Y16_NAME","COL_Y16_VALUE","COL_Y17_NAME","COL_Y17_VALUE","COL_Y18_NAME","COL_Y18_VALUE","COL_Y19_NAME","COL_Y19_VALUE","COL_Y20_NAME","COL_Y20_VALUE","COL_SORT","PRIM","TITLE","VIEW_ROW" FROM DIAGRAM 
WHERE TERMINAL_NAME = For_Init.GetCurrTerm 
  AND OSUSER_NAME = For_Init.GetCurrUser 
ORDER BY COL_SORT;


--
-- V_DICACCFO_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DICACCFO_SF
(NOM_DOK, PREF_SF, NPO_SF, ACC_DATE, BASE_NUMB, 
 NUM_DOG, BASE_DATE, CONF_NUMB, SVED_NUM, CONF_DATE, 
 SENDER, PRIM, NUM_KVIT, SUM_WOUT, SUM_NDS, 
 SUM_GSM, SUM_TOTAL, KOL_DN, NOM_ZD)
AS 
SELECT
  RN,
  PREF_SF,
  NPO_SF,
  ACC_DATE,
  BASE_NUMB,
  NUM_DOG,
  BASE_DATE,
  CONF_NUMB,
  SVED_NUM,
  CONF_DATE,
  SENDER,
  PRIM,
  NUM_KVIT,
  SUM_WOUT,
  SUM_NDS,
  SUM_GSM,
  SUM_TOTAL,
  KOL_DN,
  NOM_ZD
FROM load_buffer.v_dicaccfo;


--
-- V_DICLACFO_POS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DICLACFO_POS
(NOM_DOK, BILL_POS_PARUS_ID, VES, PROD, RN, 
 PRN, FOOD_RN, FOOD_PRN, FOOD_CODE, FOOD_TYPE, 
 FOOD_NAME, AMOUNT, MES_UNIT, MES_UNIT_NAME, CENA_BN, 
 SUM_BN, AKCIZ, GSM, SUM_WOUT, RATE_NDS, 
 SUM_NDS, CENA, SUM_TOTAL, ACC_DATE, ACC_PREF_SF, 
 ACC_NOM_SF, ACC_PRIM, CONF_DATE)
AS 
SELECT
  NOM_DOK,
  BILL_POS_PARUS_ID,
  SUM(VES) AS VES,
  MAX(PROD),
  MAX(RN),
  PRN,
  MAX(FOOD_RN),
  MAX(FOOD_PRN),
  MAX(FOOD_CODE),
  MAX(FOOD_TYPE),
  MAX(FOOD_NAME),
  SUM(AMOUNT),
  MAX(MES_UNIT),
  MAX(MES_UNIT_NAME),
  MAX(CENA_BN),
  SUM(SUM_BN),
  SUM(AKCIZ),
  SUM(GSM),
  SUM(SUM_WOUT),
  MAX(RATE_NDS),
  SUM(SUM_NDS),
  MAX(CENA),
  SUM(SUM_TOTAL),
  MAX(ACC_DATE),
  MAX(ACC_PREF_SF),
  MAX(ACC_NOM_SF),
  MAX(ACC_PRIM),
  MAX(CONF_DATE) FROM
(
    SELECT PRN AS NOM_DOK,
	       DECODE(B.PROD,NULL,0,'10010',10,'10013',13,'10011',11,'10012',12,'10092',DECODE(A.AMOUNT,1,12,11),'10020',20,1) AS BILL_POS_PARUS_ID,
	       DECODE(B.PROD,NULL,0,DECODE(A.MES_UNIT,17,A.AMOUNT/1000,15,0,A.AMOUNT)) AS VES,
		   DECODE(B.PROD,NULL,'     ','10092',DECODE(A.AMOUNT,1,'10012','10011'),B.PROD) AS PROD,
		   RN, PRN, FOOD_RN, FOOD_PRN, FOOD_CODE, FOOD_TYPE, FOOD_NAME, AMOUNT, MES_UNIT, MES_UNIT_NAME,
		   DECODE(A.MES_UNIT,17,CENA_BN*1000,15,0,CENA_BN) AS CENA_BN, SUM_BN, AKCIZ, GSM, SUM_WOUT, RATE_NDS, SUM_NDS,
		   DECODE(A.MES_UNIT,17,CENA*1000,15,0,CENA) AS CENA, SUM_TOTAL, ACC_DATE, ACC_PREF_SF,ACC_NOM_SF, ACC_PRIM, CONF_DATE
  	   FROM load_buffer.v_diclacfo A, KLS_PROD_NOMENKLATOR B
	  WHERE A.FOOD_RN = B.PARUS_RN(+)
	    AND A.FOOD_PRN = B.PARUS_PRN(+)
--		AND A.FOOD_CODE = B.MODIF(+)
)
GROUP BY NOM_DOK, BILL_POS_PARUS_ID,PRN
ORDER BY NOM_DOK, BILL_POS_PARUS_ID,PRN;


--
-- V_DISP_AZS_MANUAL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DISP_AZS_MANUAL
(ID, BEG_DATE, END_DATE, ORG_STRU_ID, PROD_ID_NPR, 
 IN_O_VOL, IN_O_MAS, OUT_O_VOL, OUT_O_MAS, END_VOLUME, 
 END_MASSA, OUT_O_1_VOL, OUT_O_1_MAS, OUT_O_2_VOL, OUT_O_2_MAS, 
 OUT_O_3_VOL, OUT_O_3_MAS, OUT_O_4_VOL, OUT_O_4_MAS, OUT_O_5_VOL, 
 OUT_O_5_MAS, OUT_O_6_VOL, OUT_O_6_MAS, OUT_O_7_VOL, OUT_O_7_MAS, 
 LAST_DAY)
AS 
select "ID",BEG_DATE,END_DATE,"ORG_STRU_ID","PROD_ID_NPR","IN_O_VOL","IN_O_MAS","OUT_O_VOL","OUT_O_MAS","END_VOLUME","END_MASSA","OUT_O_1_VOL","OUT_O_1_MAS","OUT_O_2_VOL","OUT_O_2_MAS","OUT_O_3_VOL","OUT_O_3_MAS","OUT_O_4_VOL","OUT_O_4_MAS","OUT_O_5_VOL","OUT_O_5_MAS","OUT_O_6_VOL","OUT_O_6_MAS","OUT_O_7_VOL","OUT_O_7_MAS","LAST_DAY" from DISP_AZS_MANUAL
where TERMINAL = For_Init.GetCurrTerm
  AND OSUSER = For_Init.GetCurrUser;


--
-- V_DOV_SUM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DOV_SUM
(DOVER_ID, VES)
AS 
SELECT DOVER_ID,SUM(VES) FROM KLS_DOV_LINE   
GROUP BY DOVER_ID   
ORDER BY DOVER_ID;


--
-- V_EMPTY_VOL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_EMPTY_VOL
(PROD_ID_NPR, DATE_EMPTY_VOL, TIME_EMPTY_VOL, MAX_VOL, DEAD_VOL, 
 VOL, EMPTY_VOL)
AS 
SELECT PROD_ID_NPR,MAX(DATE_EMPTY_VOL), MAX(TIME_EMPTY_VOL), SUM(MAX_VOL),SUM(DEAD_VOL),SUM(VOL),SUM(EMPTY_VOL)
FROM PLAN_FACT
WHERE TIP_ROW='СВ.ЕМКОСТЬ'
  AND TERMINAL_NAME = (SELECT UPPER(terminal) FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid'))
  AND OSUSER_NAME = (SELECT UPPER(osuser) FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid'))
GROUP BY PROD_ID_NPR;


--
-- V_FIL_SUT_REAL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_SUT_REAL
(DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, 
 FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, 
 ORG_STRU_ID, ORG_STRU_NAME, PROD_ID_NPR, GROUP_ORDER, GROUP_NAME, 
 GROUP_FULL_NAME, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA, 
 END_OST, PLAN_REAL_VES, NORMA_REAL_VES)
AS 
SELECT
DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER,FILIAL_ID, FILIAL_NAME,
 ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME,
 ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
 PROD_ID_NPR, GROUP_ORDER, GROUP_NAME, GROUP_FULL_NAME,
 FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA, END_OST,PLAN_REAL_VES, NORMA_REAL_VES
 FROM PLAN_FACT_REALIZ
WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser
  AND GROUP_ORDER IS NOT NULL;


--
-- V_FIL_SUT_REAL_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_SUT_REAL_GRP
(DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, 
 FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, 
 ORG_STRU_ID, ORG_STRU_NAME, GROUP_ORDER, GROUP_NAME, GROUP_FULL_NAME, 
 FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA, END_OST, 
 PLAN_REAL_VES, NORMA_REAL_VES)
AS 
SELECT
  DATE_BEGIN,
  DATE_END,
  DATE_PLAN,
  FILIAL_ORDER,
  FILIAL_ID,
  FILIAL_NAME,
  ORG_KIND_ORDER,
  ORG_KIND_ID,
  ORG_KIND_NAME,
  ORG_STRU_ORDER,
  ORG_STRU_ID,
  ORG_STRU_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME,
  SUM(FACT_REAL_VES) AS FACT_REAL_VES,
  SUM(AVG_SUT_REAL_VES) AS AVG_SUT_REAL_VES,
  SUM(FACT_REAL_SUMMA) AS FACT_REAL_SUMMA,
  SUM(AVG_SUT_REAL_SUMMA) AS AVG_SUT_REAL_SUMMA,
  SUM(END_OST) AS END_OST,
  SUM(PLAN_REAL_VES) as PLAN_REAL_VES,
  SUM(NORMA_REAL_VES) as NORMA_REAL_VES
FROM V_FIL_SUT_REAL
GROUP BY
  DATE_BEGIN,
  DATE_END,
  DATE_PLAN,
  FILIAL_ORDER,
  FILIAL_ID,
  FILIAL_NAME,
  ORG_KIND_ORDER,
  ORG_KIND_ID,
  ORG_KIND_NAME,
  ORG_STRU_ORDER,
  ORG_STRU_ID,
  ORG_STRU_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME
ORDER BY
  DATE_BEGIN,
  DATE_END,
  DATE_PLAN,
  FILIAL_ORDER,
  ORG_KIND_ORDER,
  ORG_STRU_ORDER,
  GROUP_ORDER;


--
-- V_FIL_SUT_TRANZIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_SUT_TRANZIT
(DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, 
 FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, 
 ORG_STRU_ID, ORG_STRU_NAME, PROD_ID_NPR, GROUP_ORDER, GROUP_NAME, 
 GROUP_FULL_NAME, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA, 
 END_OST)
AS 
SELECT
DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER,FILIAL_ID, FILIAL_NAME,
 ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME,
 ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
 PROD_ID_NPR, GROUP_ORDER, GROUP_NAME, GROUP_FULL_NAME,
 FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA, END_OST
 FROM PLAN_FACT_REALIZ
WHERE TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)'
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_FOR_UKHSMS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FOR_UKHSMS
(NETBIOS_NAME, FILENAME)
AS 
select netbios_name,filename from
    (
    select terminal_name as netbios_name, SUBSTR(NLS_UPPER(appl_name),INSTR(NLS_UPPER(appl_name),'\',-1,1)+1,200) as filename from REPL_SESSION 
    where date_start>=TRUNC(add_months(sysdate,-3),'MONTH')
    and descript = 'ON SESSION LOGON'
    and appl_name is not null
    and appl_name <>'?'
    )   
    group by netbios_name,filename;


--
-- V_ISU_DOCS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ISU_DOCS
(ID, DOC_NUM, DOC_DATE, CONTR_NAME, PACKAGE_ID, 
 FILE_NAME, FILE_POS_NUM, SOURCE_NAME, USER_NAME, UPLOAD_DATE, 
 CONTRACTOR_ID, SOURCE_ID, USER_ID, FILE_ID)
AS 
SELECT 
         ISU_TAX_DOCS.ID,
         ISU_TAX_DOCS.DOC_NUM,
         ISU_TAX_DOCS.DOC_DATE,
         ISU_TAX_CONTR.CONTR_NAME,
         ISU_TAX_DOCS.PACKAGE_ID,
         ISU_TAX_FILES.FILE_NAME,
         ISU_TAX_DOCS.FILE_POS_NUM,
         ISU_TAX_SOURCE.NAME AS SOURCE_NAME,
         ISU_TAX_USER.USER_NAME,
         ISU_TAX_FILES.UPLOAD_DATE,
         ISU_TAX_DOCS.CONTRACTOR_ID,
         ISU_TAX_FILES.SOURCE_ID,
         ISU_TAX_FILES.USER_ID,
         ISU_TAX_DOCS.FILE_ID
          FROM ISU_TAX_DOCS 
                LEFT JOIN ISU_TAX_CONTR ON ISU_TAX_CONTR.ID=ISU_TAX_DOCS.CONTRACTOR_ID 
                LEFT JOIN ISU_TAX_FILES ON ISU_TAX_FILES.ID=ISU_TAX_DOCS.FILE_ID 
                LEFT JOIN ISU_TAX_SOURCE ON ISU_TAX_FILES.SOURCE_ID=ISU_TAX_SOURCE.ID
                LEFT JOIN ISU_TAX_USER ON ISU_TAX_USER.ID=ISU_TAX_FILES.USER_ID;


--
-- V_ISU_PACKAGE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ISU_PACKAGE
(ID, PACK_NUM, PACK_DATE, DOCCOUNT)
AS 
Select A.ID,A.PACK_NUM,A.PACK_DATE,count(B.ID) as DOCCOUNT  
    from isu_tax_package A 
         JOIN isu_tax_docs B ON A.ID=B.PACKAGE_ID
        group by A.ID,A.PACK_NUM,A.PACK_DATE;


--
-- V_KLS_PLANSTRU  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KLS_PLANSTRU
(ID, BEGIN_DATE, END_DATE, NAME, LEVEL_POS, 
 INPUT_DATE, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, NAZN_OTG_ID, VIEW_LEVEL, 
 REGION_ID, ORG_KIND_ID, TIP_REAL_ID, FOR_ID, FOR_NAME, 
 FOR_MOS_ID, SPF_GROUP_ORDER, SPF_GROUP_NAME, SPF_ORDER, SPF_NAME, 
 LUKOIL_ID, VIEW_PARENT_ID, IS_SNP, IS_EXP, IS_RESURS, 
 IS_TO_HRAN, POS_PREDPR_ID)
AS 
SELECT
  ID,
  BEGIN_DATE,
  END_DATE,
  NAME,
  LEVEL_POS,
  INPUT_DATE,
  KOD_SGR,
  KOD_SPG,
  KOD_RZD,
  KOD_PRZ,
  KOD_GRP,
  KOD_PGR,
  PARENT_ID,
  NAZN_OTG_ID,
  VIEW_LEVEL,
  REGION_ID,
  ORG_KIND_ID,
  TIP_REAL_ID,
  FOR_ID,
  FOR_NAME,
  FOR_MOS_ID,
  SPF_GROUP_ORDER, SPF_GROUP_NAME, SPF_ORDER, SPF_NAME, LUKOIL_ID,
  (
    SELECT B.ID FROM KLS_PLANSTRU B
	WHERE B.KOD_SGR=A.KOD_SGR
	  AND B.KOD_SPG=A.KOD_SPG*DECODE(SIGN(A.VIEW_LEVEL-1),1,1,0)
	  AND B.KOD_RZD=A.KOD_RZD*DECODE(SIGN(A.VIEW_LEVEL-2),1,1,0)
	  AND B.KOD_PRZ=A.KOD_PRZ*DECODE(SIGN(A.VIEW_LEVEL-3),1,1,0)
	  AND B.KOD_GRP=A.KOD_GRP*DECODE(SIGN(A.VIEW_LEVEL-4),1,1,0)
	  AND B.KOD_PGR=A.KOD_PGR*DECODE(SIGN(A.VIEW_LEVEL-5),1,1,0)
  ) as VIEW_PARENT_ID,
  DECODE(KOD_SGR,31,DECODE(KOD_SPG,10,DECODE(KOD_RZD,65,DECODE(KOD_PRZ,0,0,1),0),0),0) as IS_SNP,
  DECODE(KOD_SGR,21,1,0) as IS_EXP,
  IS_RESURS,
  IS_TO_HRAN,POS_PREDPR_ID
FROM KLS_PLANSTRU A;


--
-- V_KLS_PLANSTRU_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KLS_PLANSTRU_SNP
(ID, BEGIN_DATE, END_DATE, NAME, LEVEL_POS, 
 INPUT_DATE, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, NAZN_OTG_ID, VIEW_LEVEL, 
 REGION_ID, ORG_KIND_ID, TIP_REAL_ID, FOR_ID, FOR_NAME, 
 FOR_MOS_ID, SPF_GROUP_ORDER, SPF_GROUP_NAME, SPF_ORDER, SPF_NAME, 
 LUKOIL_ID, IS_TO_HRAN)
AS 
SELECT
  ID,
  BEGIN_DATE,
  END_DATE,
  NAME,
  LEVEL_POS,
  INPUT_DATE,
  KOD_SGR,
  KOD_SPG,
  KOD_RZD,
  KOD_PRZ,
  KOD_GRP,
  KOD_PGR,
  PARENT_ID,
  NAZN_OTG_ID,
  VIEW_LEVEL,
  REGION_ID,
  ORG_KIND_ID,
  TIP_REAL_ID,
  FOR_ID,
  FOR_NAME,
  FOR_MOS_ID,
  SPF_GROUP_ORDER, SPF_GROUP_NAME, SPF_ORDER, SPF_NAME, LUKOIL_ID,IS_TO_HRAN
FROM V_KLS_PLANSTRU
WHERE IS_SNP=1
ORDER BY KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR;


--
-- V_KLS_PROD_NOMENKLATOR_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KLS_PROD_NOMENKLATOR_GRP
(PROD, PARUS_PRN)
AS 
select PROD,MAX(PARUS_PRN) as PARUS_PRN from KLS_PROD_NOMENKLATOR where is_actual=1 GROUP BY PROD;


--
-- V_LIST_DOLJ_IN_DOVER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LIST_DOLJ_IN_DOVER
(DOLJ_DOVER)
AS 
SELECT DISTINCT UPPER(DOLJ_DOVER) FROM KLS_DOVER   
ORDER BY UPPER(DOLJ_DOVER);


--
-- V_LIST_FIO_IN_DOVER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LIST_FIO_IN_DOVER
(FIO_DOVER, DOLJ_DOVER)
AS 
SELECT UPPER(FIO_DOVER), UPPER(DOLJ_DOVER) FROM KLS_DOVER  
GROUP BY UPPER(FIO_DOVER),UPPER(DOLJ_DOVER)    
ORDER BY UPPER(FIO_DOVER),UPPER(DOLJ_DOVER);


--
-- V_LP_77203  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LP_77203
(P1, P2, P3, P4, P5, 
 P6, P7, P51, DATA_FACT, GL_NAME)
AS 
select 1 as p1, -- физический показатель
       122 as p2, -- единица измерения
       1 as p3, -- периодичность
       10 as p4, -- статус показателя
       157143 as p5, -- Отчитывающиеся предприятие
       s.kccc as p6, -- материал(основная деятельность)
       2 as p7, -- Тип данных (2-за сутки)
       art.pkt_sv_new.tovar2(trunc(sysdate)-1, decode(s.id_sprav_oil_product,55,substr(s.k_sort,1,9),s.k_sort), 1) as p51,
       trunc(sysdate)-1 as data_fact,
       s.gl_name
   from art.sv_str_prvo s, art.plan_m m
   where s.id_plan=m.id_plan
     and s.num=5 and s.id_sprav_oil_product>0 --and s.plan_m>0
     and s.id_sprav_oil_product<>6 and s.id_sprav_oil_product<>41 and s.id_sprav_oil_product<>557 and s.id_sprav_oil_product<>630
     and m.data_n=trunc(sysdate-1,'mm')
     and m.id_vid_plan = 1

union all

select 1 as p1, -- физический показатель
       122 as p2, -- единица измерения
       1 as p3, -- периодичность
       10 as p4, -- статус показателя
       157143 as p5, -- Отчитывающиеся предприятие
       s.kccc as p6, -- материал(основная деятельность)
       3 as p7, -- Тип данных (3-с нач.мес.)
       art.pkt_sv_new.tovar2(trunc(sysdate)-1, decode(s.id_sprav_oil_product,55,substr(s.k_sort,1,9),s.k_sort), 2) as p51,
       trunc(sysdate)-1 as data_fact,
       s.gl_name
   from art.sv_str_prvo s, art.plan_m m
   where s.id_plan=m.id_plan
     and s.num=5 and s.id_sprav_oil_product>0 --and s.plan_m>0
     and s.id_sprav_oil_product<>6 and  s.id_sprav_oil_product<>41 and s.id_sprav_oil_product<>557 and s.id_sprav_oil_product<>630
     and m.data_n=trunc(sysdate-1,'mm')
     and m.id_vid_plan = 1;


--
-- V_LUKREP_GRPOL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_GRPOL
(SCHETF, DATA_VYP_SF, GRPOL, GRPOL_ADDR)
AS 
SELECT SCHETF,DATA_VYP_SF,GRPOL,GRPOL_ADDR 
FROM SVETA.SF_SFAK_PROD 
WHERE DATA_VYP_SF>=TO_DATE('01.01.2004','DD.MM.YYYY')
ORDER BY SCHETF;


--
-- V_MASTER_REPORTS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MASTER_REPORTS
(ID, APP_NAME, REP_ID, REPORT_NAME, REPORT_FILE, 
 REPORT_GROUP, REPORT_TYPE, REPORT_TITLE, BEGIN_DATE, BEGIN_TIME, 
 END_DATE, END_TIME, DATE_REE, DATE_PLAN, FROM_PARUS, 
 VIEW_PROD, VIEW_DAYS, IS_AGENT, DIAGRAM_TYPE, DIAGRAM_KIND, 
 AXES_X_NAME, COUNT_COLS_X, AXES_Y_NAME, COUNT_COLS_Y, FILIAL_ID, 
 GROUP_KIND_ID, AZC_ID, DOG_NUMBER, PLAT_ID, GRP_ID_NPR, 
 PROD_ID_NPR, IS_SNP, IS_UNP)
AS 
SELECT
ID, APP_NAME, REP_ID, REPORT_NAME, REPORT_FILE, REPORT_GROUP, REPORT_TYPE, REPORT_TITLE, BEGIN_DATE,
BEGIN_TIME, END_DATE, END_TIME, DATE_REE, DATE_PLAN, FROM_PARUS, VIEW_PROD, VIEW_DAYS, IS_AGENT,
DIAGRAM_TYPE, DIAGRAM_KIND, AXES_X_NAME, COUNT_COLS_X, AXES_Y_NAME, COUNT_COLS_Y,
FILIAL_ID, GROUP_KIND_ID, AZC_ID, DOG_NUMBER,PLAT_ID, GRP_ID_NPR,PROD_ID_NPR,IS_SNP,IS_UNP
FROM MASTER_REPORTS
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_MONTH_REE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MONTH_REE
(DATE_REE, DOP_REE, NOM_ZD, PRICHIN)
AS 
SELECT
  MONTH_REE.DATE_REE,
  MONTH_REE.DOP_REE,
  MONTH_REE.NOM_ZD,
  NVL(MONTH_VISIR.PRICHIN,' ')
FROM MONTH_REE,MONTH_VISIR
WHERE MONTH_REE.DATE_REE=MONTH_VISIR.DATE_REE(+)
  AND MONTH_REE.DOP_REE=MONTH_VISIR.DOP_REE(+)
  AND MONTH_REE.NOM_ZD=MONTH_VISIR.NOM_ZD(+);


--
-- V_MOS_KOMISS_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MOS_KOMISS_OPL
(KOD_PROD, BUHANAL, DATAPLAT, SUMPLATBEZNDS, NDSPLAT, 
 TOTALPLAT, MONTHPLAT)
AS 
select 
kod_prod, buhanal, max(dataplat), sum(summabeznds20) as sumplatbeznds, sum(nds20) as ndsplat, sum(sumplat), LAST_DAY(dataplat) as totalplat 
	        from sveta.sf_opl_prod 
	       where dataplat>=to_date('01.04.2002','dd.mm.yyyy') and buhanal in (5,13) 
	       group by kod_prod, buhanal, LAST_DAY(dataplat);


--
-- V_MOS_KOMISS_POS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MOS_KOMISS_POS
(KOD_PROD, BUHANAL, SUMMA, AKCIZ1, SUMNDS)
AS 
select kod_prod, buhanal, sum(summa) as summa, sum(akciz1) as akciz1, sum(sumnds) as sumnds 
	        from sveta.sf_poz_prod 
		   where date_otgr>=to_date('01.04.2002','dd.mm.yyyy') and buhanal in (5,13) 
		   group by kod_prod, buhanal;


--
-- V_NAR_SUM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NAR_SUM
(NARIAD_ID, VES)
AS 
SELECT NARIAD_ID,SUM(VES) FROM KLS_NAR_LINE    
GROUP BY NARIAD_ID    
ORDER BY NARIAD_ID;


--
-- V_PARUS_CONSORD_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_CONSORD_FACT
(ORD_RN, ORD_NUMB, AGENT_RN, AGENT_TAG, AGENT_NAME, 
 T_RN, DOCDATE, STORE, DOG_NUMB, NOMEN_RN, 
 NOMEN_TAG, NOMEN_NAME, VOLUME, MASSA, SUMMA)
AS 
SELECT "ORD_RN","ORD_NUMB","AGENT_RN","AGENT_TAG","AGENT_NAME","T_RN","DOCDATE","STORE","DOG_NUMB","NOMEN_RN","NOMEN_TAG","NOMEN_NAME","VOLUME","MASSA","SUMMA" FROM VANEEV.V_CONSORD_FACT_TO_MASTER_PSV@ORACLE.WORLD p;


--
-- V_PARUS_DICNOMNS_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_DICNOMNS_PSV
(RN, CRN, NOMEN_CODE, NOMEN_NAME, GROUP_CODE, 
 GROUP_TYPE)
AS 
SELECT "RN","CRN","NOMEN_CODE","NOMEN_NAME","GROUP_CODE","GROUP_TYPE" FROM vaneev.v_dicnomns_psv@oracle.world;


--
-- V_PARUS_DICSTORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_DICSTORE
(NRN, NCRN, SNUMB, SNAME, SPBE, 
 SDEPARTMENT, SDEP_READY, NSTORE_TYPE, SKEEPER, NLOCK_SIGN, 
 IS_TRANSIT)
AS 
SELECT "NRN","NCRN","SNUMB","SNAME","SPBE","SDEPARTMENT","SDEP_READY","NSTORE_TYPE","SKEEPER","NLOCK_SIGN","IS_TRANSIT" FROM vaneev.v_dicstore_psv@oracle.world;


--
-- V_PARUS_FACEACC  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_FACEACC
(NRN, NCRN, NCOMPANY, NPRN, NAGENT, 
 NAGENT_CTLG, SAGENT, SNUMBER, NACC_TYPE, NACC_KIND, 
 NACC_CLASS, NVALID_DOCTYPE, SVALID_DOCTYPE, SVALID_DOCNUMB, DVALID_DOCDATE, 
 DPLAN_CLOSE_DATE, DFACT_CLOSE_DATE, NEXEC, NEXEC_CTLG, SEXECUTIVE, 
 SEXECUTIVE_NAME, SCURRENCY, NCURRENCY_RN, NCREDIT_SUM, NBEGIN_SUM, 
 NCURRENT_SUM, NFCACGR, SFCACGR, SSPEC_MARK1, SSPEC_MARK2, 
 SSPEC_MARK3, SSPEC_MARK4, SSPEC_MARK5, SNOTE, NOPER_FLAG, 
 DPLAN_OPEN_DATE, DFACT_OPEN_DATE, NPLAN_SUM, NSERV_SUM, NSERV_PERCENT, 
 NAGNACC, SAGNACC, NAGNFI, SAGNFI, NAGNFO, 
 SAGNFO, NAGN_TRANS, SAGN_TRANS, NSIGN_CONTRACT, NORDER_SIGN, 
 NSUBDIV, NSDIVCRN, SSUBDIV, NTARIF, STARIF, 
 NDISCOUNT, NPAY_TYPE, SPAY_TYPE, NSHIP_TYPE, SSHIP_TYPE, 
 NPRICE_TYPE, NDOC_SERV, NPLAN_SERV, NFACT_SERV, NDOC_SHIP, 
 NPLAN_SHIP, NFACT_SHIP, NDOC_INCOME, NPLAN_INCOME, NFACT_INCOME, 
 NDOC_POSTED, NPLAN_POSTED, NFACT_POSTED, NDOC_PAYED, NPLAN_PAYED, 
 NFACT_PAYED, NFINERULE, SFINERULE, NFACTREST, NPLANREST, 
 DPRICE_DATE, AGNABBR, AGNTYPE, AGNNAME, AGNIDNUMB, 
 NATECONSECT_RN, NATECONSECT, ORGCODE, AGNFAMILYNAME, AGNFIRSTNAME, 
 AGNLASTNAME, AGNFAMILYNAME_TO, AGNFIRSTNAME_TO, AGNLASTNAME_TO, AGNFAMILYNAME_FR, 
 AGNFIRSTNAME_FR, AGNLASTNAME_FR, EMP, EMPPOST, AGNBURN, 
 GEOGRAFY_RN, GEOGRAFY_CODE, ADDR_COUNTRY, ADDR_REG, ADDR_DISTRICT, 
 ADDR_CITY, NADDR_MUNIC_DIST, SADDR_MUNIC_DIST, NADDR_ADMIN_DIST, SADDR_ADMIN_DIST, 
 ADDR_STREET, ADDR_HOUSE, ADDR_BLOCK, ADDR_FLAT, ADDR_POST, 
 PHONE, PHONE2, FAX, TELEX, MAIL, 
 PASSPORT_SER, PASSPORT_NUMB, PASSPORT_WHEN, PASSPORT_WHO, AGN_COMMENT, 
 DDISCDATE, NSEX, SPENSION_NBR, NPASSPORT_TYPE, SPASSPORT_TYPE)
AS 
SELECT "NRN","NCRN","NCOMPANY","NPRN","NAGENT","NAGENT_CTLG","SAGENT","SNUMBER","NACC_TYPE","NACC_KIND","NACC_CLASS","NVALID_DOCTYPE","SVALID_DOCTYPE","SVALID_DOCNUMB","DVALID_DOCDATE","DPLAN_CLOSE_DATE","DFACT_CLOSE_DATE","NEXEC","NEXEC_CTLG","SEXECUTIVE","SEXECUTIVE_NAME","SCURRENCY","NCURRENCY_RN","NCREDIT_SUM","NBEGIN_SUM","NCURRENT_SUM","NFCACGR","SFCACGR","SSPEC_MARK1","SSPEC_MARK2","SSPEC_MARK3","SSPEC_MARK4","SSPEC_MARK5","SNOTE","NOPER_FLAG","DPLAN_OPEN_DATE","DFACT_OPEN_DATE","NPLAN_SUM","NSERV_SUM","NSERV_PERCENT","NAGNACC","SAGNACC","NAGNFI","SAGNFI","NAGNFO","SAGNFO","NAGN_TRANS","SAGN_TRANS","NSIGN_CONTRACT","NORDER_SIGN","NSUBDIV","NSDIVCRN","SSUBDIV","NTARIF","STARIF","NDISCOUNT","NPAY_TYPE","SPAY_TYPE","NSHIP_TYPE","SSHIP_TYPE","NPRICE_TYPE","NDOC_SERV","NPLAN_SERV","NFACT_SERV","NDOC_SHIP","NPLAN_SHIP","NFACT_SHIP","NDOC_INCOME","NPLAN_INCOME","NFACT_INCOME","NDOC_POSTED","NPLAN_POSTED","NFACT_POSTED","NDOC_PAYED","NPLAN_PAYED","NFACT_PAYED","NFINERULE","SFINERULE","NFACTREST","NPLANREST","DPRICE_DATE","AGNABBR","AGNTYPE","AGNNAME","AGNIDNUMB","NATECONSECT_RN","NATECONSECT","ORGCODE","AGNFAMILYNAME","AGNFIRSTNAME","AGNLASTNAME","AGNFAMILYNAME_TO","AGNFIRSTNAME_TO","AGNLASTNAME_TO","AGNFAMILYNAME_FR","AGNFIRSTNAME_FR","AGNLASTNAME_FR","EMP","EMPPOST","AGNBURN","GEOGRAFY_RN","GEOGRAFY_CODE","ADDR_COUNTRY","ADDR_REG","ADDR_DISTRICT","ADDR_CITY","NADDR_MUNIC_DIST","SADDR_MUNIC_DIST","NADDR_ADMIN_DIST","SADDR_ADMIN_DIST","ADDR_STREET","ADDR_HOUSE","ADDR_BLOCK","ADDR_FLAT","ADDR_POST","PHONE","PHONE2","FAX","TELEX","MAIL","PASSPORT_SER","PASSPORT_NUMB","PASSPORT_WHEN","PASSPORT_WHO","AGN_COMMENT","DDISCDATE","NSEX","SPENSION_NBR","NPASSPORT_TYPE","SPASSPORT_TYPE" FROM Parus.V_FACEACC@Oracle.world;


--
-- V_PARUS_FACEACC_FOR_1C  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_FACEACC_FOR_1C
(NRN, SAGENT, SNUMBER, SVALID_DOCNUMB, SAGNACC, 
 AGNABBR, AGNNAME, AGNIDNUMB, GEOGRAFY_RN, GEOGRAFY_CODE, 
 ADDR_COUNTRY, ADDR_REG, ADDR_DISTRICT, ADDR_CITY, NADDR_MUNIC_DIST, 
 SADDR_MUNIC_DIST, NADDR_ADMIN_DIST, SADDR_ADMIN_DIST, ADDR_STREET, ADDR_HOUSE, 
 ADDR_BLOCK, ADDR_FLAT, ADDR_POST, PHONE, PHONE2, 
 FAX, TELEX, MAIL, AGN_COMMENT)
AS 
SELECT
NRN, SAGENT, SNUMBER, SVALID_DOCNUMB, SAGNACC, AGNABBR, AGNNAME, AGNIDNUMB,
 GEOGRAFY_RN, GEOGRAFY_CODE, ADDR_COUNTRY, ADDR_REG, ADDR_DISTRICT,
 ADDR_CITY, NADDR_MUNIC_DIST, SADDR_MUNIC_DIST, NADDR_ADMIN_DIST, SADDR_ADMIN_DIST,
 ADDR_STREET, ADDR_HOUSE, ADDR_BLOCK, ADDR_FLAT, ADDR_POST,
 PHONE, PHONE2, FAX, TELEX, MAIL,
 AGN_COMMENT
 FROM Parus.V_FACEACC@Oracle.world;


--
-- V_PARUS_SOOB_DZM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_SOOB_DZM
(AGENT, INN, DOG, DAY_OTSR, KOD_REAL, 
 KOD_KONTR, DEB_ZAD, DEB_PRO, DAY_ZAD, COMMEN, 
 RNA, DATE_F, DATE_T, KRED, DAY_PR)
AS 
SELECT AGENT, inn, dog, day_otsr, kod_real, kod_kontr,
       deb_zad * 1000 AS deb_zad, deb_pro * 1000 AS deb_pro, day_zad, commen,
       rna, date_f, date_t, - kred*1000, day_pr
  FROM parus.tr_debt_zadolg_nlg@oracle.world
 WHERE AUTHID = 'PARUS' AND ident = 0;


--
-- V_PARUS_SOOB_DZS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_SOOB_DZS
(AGENT, INN, DOG, DAY_OTSR, KOD_REAL, 
 KOD_KONTR, DEB_ZAD, DEB_PRO, DEB_ZADE, DEB_PROE, 
 DAY_ZAD, COMMEN, RNA, DATE_F, DATE_T, 
 KRED, KREDE, DAY_PR)
AS 
SELECT AGENT, inn, dog, day_otsr, kod_real, kod_kontr, deb_zad * 1000,
       deb_pro * 1000, deb_zade * 1000, deb_proe * 1000, day_zad, commen, rna,
       date_f, date_t, -NVL(kred,0) * 1000,-NVL(krede,0) * 1000,NVL(day_pr,0)
  FROM parus.tr_debt_zadolg_nlg1@oracle.world
 WHERE AUTHID = 'PARUS' AND ident = 0;


--
-- V_PARUS_TRANSINVCUST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_TRANSINVCUST
(NSTORE, SSTORE, SSTORE_NAME, SSTORE_PBE, SDEPARTMENT_PBE, 
 SSTORE_CATALOG_CODE, SSTORE_CATALOG_NAME, NPRN, NCRN, SCATALOG_CODE, 
 SCATALOG_NAME, SDOCTYPE, PREF_NUMB, DDOCDATE, SACCNUMB, 
 SSTOPER, SFACEACC, SAGENT, SAGENT_NAME, STARIF, 
 SMOL, SSHEEPVIEW, SPAYTYPE, SSUBDIV, NRN, 
 NNOMEN, SNOMEN, SNOMENNAME, NNOMMODIF, SNOMMODIF, 
 SNOMMODIFNAME, NQUANTALT, NSUMMWITHNDS, NNOMEN_TYPE)
AS 
SELECT T.nSTORE, T.sSTORE, D.SNAME AS sSTORE_NAME, D.sPBE AS sSTORE_PBE, D.SDEPARTMENT AS sDEPARTMENT_PBE,
       E.CODE as sSTORE_CATALOG_CODE, E.NAME as sSTORE_CATALOG_NAME,
       Ts.nPRN, T.nCRN, F.CODE as sCATALOG_CODE, F.NAME as sCATALOG_NAME,
	   T.sDOCTYPE, T.SPREF_LTRIM||'-'||T.sNUMB_LTRIM AS PREF_NUMB, T.dDOCDATE, T.sACCNUMB, T.sSTOPER, T.SFACEACC, T.sAGENT, T.sAGENT_NAME, T.sTARIF, T.sMOL, T.sSHEEPVIEW, T.sPAYTYPE, T.sSUBDIV,
  	   Ts.nRN, Ts.nNOMEN, Ts.sNOMEN, Ts.sNOMENNAME, Ts.NNOMMODIF, Ts.sNOMMODIF , Ts.sNOMMODIFNAME, Ts.nQUANTALT, Ts.NSUMMWITHNDS, TS.NNOMEN_TYPE
FROM Parus.V_transinvcust@Oracle.World T,
         Parus.V_transinvcustspecs@Oracle.World Ts,
		 Parus.V_dicstore@Oracle.World D,Parus.acatalog@Oracle.World E,Parus.acatalog@Oracle.World F
       WHERE T.Nrn = Ts.Nprn
	     AND T.nstore=D.nrn
		 AND T.nCRN=F.RN
		 AND D.nCRN=E.RN
		 AND Ts.NNOMEN_TYPE=1 -- только товар
 		 AND T.dDOCDATE>=TO_DATE('01.01.2003','dd.mm.yyyy');


--
-- V_PASP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PASP
(ID, PASP_NUM, REZ_NUM, PASP_DATE, INSPEKTOR, 
 PROD_ID_NPR, DATE_VIR, PERER_ID, MESTO_ID, PRIM, 
 IS_PASP_UNP)
AS 
SELECT /*+ RULE */
  ID,
  PASP_NUM,
  REZ_NUM,
  PASP_DATE,
  INSPEKTOR,
  PROD_ID_NPR,
  DATE_VIR,
  NVL(PERER_ID,8) as PERER_ID,
  MESTO_ID,
  '' as PRIM,
  0 as IS_PASP_UNP
FROM KLS_PASP
--where pasp_date>=to_date('01.01.2006','dd.mm.yyyy') and pasp_num='33'
UNION ALL
SELECT
  TO_CHAR(a.ID_PASPORT) as ID,
  a.NOMER_PASPORT as PASP_NUM,
  TO_CHAR(a.NOMER_RESERVUAR) as REZ_NUM,
  a.DATE_PASPORT as PASP_DATE,
  a.INSPEKTOR,
  i.PROD_ID_NPR,
  a.DATE_IZGOTOVL as DATE_VIR,
  8 as PERER_ID,
  1 as MESTO_ID,
  (CASE
     WHEN a.NOMER_CISTERN IS NULL THEN ''
	 ELSE 'Цистерн: '||a.NOMER_CISTERN
   END) as PRIM,
  1 as IS_PASP_UNP
from unp_pasport a, kls_prod_pasp_unp i
where a.kod_oil_product=i.kod_oil_product
--  and date_pasport>=to_date('01.01.2006','dd.mm.yyyy') and nomer_pasport='33'
;


--
-- V_PLAN_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT
(ID, TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, 
 PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_PLAN, PLAN_MON, 
 PLAN_NAR, OBR_MON, OBR_NAR, KORR_MON, KORR_NAR, 
 DATE_ZAYV, ZAYV, DATE_FACT, TIME_FACT, FACT, 
 PLAN_NAR_RASP, OBR_NAR_RASP, KORR_NAR_RASP, FACT_SUT, PLAN_NAR_RASP_7, 
 OBR_NAR_RASP_7, FACT_NAR_7, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, 
 PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3, NUM_DECADA)
AS 
SELECT "ID","TIP_ROW","GROUP_ORDER","GROUP_NAME","PROD_ORDER","PROD_ID_NPR","PLANSTRU_ORDER","PLANSTRU_ID", 
"DATE_PLAN","PLAN_MON_V","PLAN_NAR_V","OBR_MON_V","OBR_NAR_V","KORR_MON_V","KORR_NAR_V","DATE_ZAYV","ZAYV","DATE_FACT","TIME_FACT","FACT_V", 
"PLAN_NAR_RASP","OBR_NAR_RASP","KORR_NAR_RASP","FACT_SUT_V", PLAN_NAR_RASP_7, OBR_NAR_RASP_7, FACT_NAR_7,FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3 
, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3,NUM_DECADA FROM PLAN_FACT 
WHERE TIP_ROW IN ('ПОСТАВКА','ПОСТ_АВТО') 
  AND TERMINAL_NAME = For_Init.GetCurrTerm 
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_PLAN_FACT_GD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_GD
(ID, TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, 
 PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_PLAN, PLAN_MON_C, 
 PLAN_MON_V, PLAN_MON_SOBS_C, PLAN_MON_SOBS_V, PLAN_NAR_C, PLAN_NAR_V, 
 PLAN_NAR_SOBS_C, PLAN_NAR_SOBS_V, DATE_FACT, TIME_FACT, FACT_C, 
 FACT_V, FACT_SOBS_C, FACT_SOBS_V)
AS 
SELECT "ID","TIP_ROW","GROUP_ORDER","GROUP_NAME","PROD_ORDER","PROD_ID_NPR","PLANSTRU_ORDER","PLANSTRU_ID",
"DATE_PLAN",PLAN_MON_C, PLAN_MON_V, PLAN_MON_SOBS_C, PLAN_MON_SOBS_V,PLAN_NAR_C, PLAN_NAR_V, PLAN_NAR_SOBS_C, PLAN_NAR_SOBS_V,
"DATE_FACT","TIME_FACT",FACT_C, FACT_V, FACT_SOBS_C, FACT_SOBS_V FROM PLAN_FACT
WHERE TIP_ROW='ПЕРЕВОЗКА'
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_PLAN_FACT_GD_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_GD_GRP
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, PLANSTRU_NAME, DATE_PLAN, PLAN_MON_C, 
 PLAN_MON_V, PLAN_MON_SOBS_C, PLAN_MON_SOBS_V, PLAN_NAR_C, PLAN_NAR_V, 
 PLAN_NAR_SOBS_C, PLAN_NAR_SOBS_V, DATE_FACT, TIME_FACT, FACT_C, 
 FACT_V, FACT_SOBS_C, FACT_SOBS_V)
AS 
SELECT
  TIP_ROW,
  GROUP_ORDER,
  GROUP_NAME,
  PROD_ORDER,
  PROD_ID_NPR,
  PLANSTRU_ORDER,
  PLANSTRU_ID,
  KLS_NAPR_MOS.NAME AS PLANSTRU_NAME,
  MAX(DATE_PLAN) AS DATE_PLAN,
  SUM(PLAN_MON_C) AS PLAN_MON_C,
  SUM(PLAN_MON_V) AS PLAN_MON_V,
  SUM(PLAN_MON_SOBS_C) AS PLAN_MON_SOBS_C,
  SUM(PLAN_MON_SOBS_V) AS PLAN_MON_SOBS_V,
  SUM(PLAN_NAR_C) AS PLAN_NAR_C,
  SUM(PLAN_NAR_V) AS PLAN_NAR_V,
  SUM(PLAN_NAR_SOBS_C) AS PLAN_NAR_SOBS_C,
  SUM(PLAN_NAR_SOBS_V) AS PLAN_NAR_SOBS_V,
  MAX(DATE_FACT) AS DATE_FACT,
  MAX(TIME_FACT) AS TIME_FACT,
  SUM(FACT_C) AS FACT_C,
  SUM(FACT_V) AS FACT_V,
  SUM(FACT_SOBS_C) AS FACT_SOBS_C,
  SUM(FACT_SOBS_V) AS FACT_SOBS_V
FROM V_PLAN_FACT_GD,KLS_NAPR_MOS
WHERE V_PLAN_FACT_GD.PLANSTRU_ID=KLS_NAPR_MOS.ID
GROUP BY
  TIP_ROW,
  GROUP_ORDER,
  GROUP_NAME,
  PROD_ORDER,
  PROD_ID_NPR,
  PLANSTRU_ORDER,
  PLANSTRU_ID,
  KLS_NAPR_MOS.NAME
ORDER BY
  GROUP_ORDER,
  PROD_ORDER,
  PLANSTRU_ORDER;


--
-- V_PLAN_FACT_PARUS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_PARUS
(NB_NAME, NOMMODIF_NAME, DICNOMNS_RN, NOMMODIF_RN, CONTRACTS_RN, 
 CONTRACTS_NUMB, AGENT_RN, AGENT_NAME, GROUP_ORDER, PLAN_MON_V, 
 PLAN_NAR_V, ZAYV_RN, ZAYV_PREF, TIP_OTGR_RN, TIP_OTGR_NAME, 
 PAYTYPE_RN, PAYTYPE_NAME, POLUCH_RN, POLUCH_NAME, ZAYV, 
 FACT_V)
AS 
SELECT
  NB_NAME,
  NOMMODIF_NAME,
  DICNOMNS_RN,
  NOMMODIF_RN,
  CONTRACTS_RN,
  CONTRACTS_NUMB,
  AGENT_RN,
  AGENT_NAME,
  GROUP_ORDER,
  SUM(PLAN_MON_V) AS PLAN_MON_V,
  SUM(PLAN_NAR_V) AS PLAN_NAR_V,
  ZAYV_RN,
  MAX(ZAYV_PREF),
  MAX(TIP_OTGR_RN),
  MAX(TIP_OTGR_NAME),
  MAX(PAYTYPE_RN),
  MAX(PAYTYPE_NAME),
  MAX(POLUCH_RN),
  MAX(POLUCH_NAME),
  SUM(ZAYV),
  SUM(FACT_V)
FROM PLAN_FACT
WHERE TIP_ROW='ПАРУС'
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser
GROUP BY
  NB_NAME,
  NOMMODIF_NAME,
  DICNOMNS_RN,
  NOMMODIF_RN,
  CONTRACTS_RN,
  CONTRACTS_NUMB,
  AGENT_RN,
  AGENT_NAME,
  GROUP_ORDER,
  ZAYV_RN;


--
-- V_PLAN_FACT_REALIZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_REALIZ
(DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ID, FILIAL_NAME, 
 REGION_ORDER, REGION_NAME, NAPR_ORDER, NAPR_NAME, PROD_ID_NPR, 
 GROUP_ORDER, GROUP_NAME, BEGIN_OST, PLAN_POST_VES, NORMA_POST_VES, 
 FACT_POST_VES, RESURS, PLAN_REAL_VES, NORMA_REAL_VES, FACT_REAL_VES, 
 END_OST, TERMINAL_NAME, OSUSER_NAME)
AS 
SELECT "DATE_BEGIN","DATE_END","DATE_PLAN","FILIAL_ID","FILIAL_NAME","REGION_ORDER","REGION_NAME","NAPR_ORDER",
"NAPR_NAME","PROD_ID_NPR","GROUP_ORDER","GROUP_NAME","BEGIN_OST","PLAN_POST_VES","NORMA_POST_VES","FACT_POST_VES","RESURS",
"PLAN_REAL_VES","NORMA_REAL_VES","FACT_REAL_VES","END_OST",TERMINAL_NAME,OSUSER_NAME FROM PLAN_FACT_REALIZ
WHERE TIP_ROW='ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ'
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_PLAN_FACT_REALIZ_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_REALIZ_GRP
(DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ID, FILIAL_NAME, 
 REGION_ORDER, REGION_NAME, NAPR_ORDER, NAPR_NAME, GROUP_ORDER, 
 GROUP_NAME, BEGIN_OST, PLAN_POST_VES, NORMA_POST_VES, FACT_POST_VES, 
 RESURS, PLAN_REAL_VES, NORMA_REAL_VES, FACT_REAL_VES, END_OST)
AS 
SELECT
  DATE_BEGIN,
  DATE_END,
  DATE_PLAN,
  FILIAL_ID,
  FILIAL_NAME,
  REGION_ORDER,
  REGION_NAME,
  NAPR_ORDER,
  NAPR_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  SUM(DECODE(SIGN(BEGIN_OST),-1,0,BEGIN_OST)) AS BEGIN_OST,
  SUM(PLAN_POST_VES) AS PLAN_POST_VES,
  SUM(NORMA_POST_VES) AS NORMA_POST_VES,
  SUM(FACT_POST_VES) AS FACT_POST_VES,
  SUM(RESURS) AS RESURS,
  SUM(PLAN_REAL_VES) AS PLAN_REAL_VES,
  SUM(NORMA_REAL_VES) AS NORMA_REAL_VES,
  SUM(FACT_REAL_VES) AS FACT_REAL_VES,
  SUM(DECODE(SIGN(END_OST),-1,0,END_OST)) AS END_OST
FROM V_PLAN_FACT_REALIZ
WHERE GROUP_ORDER IS NOT NULL
GROUP BY
  DATE_BEGIN,
  DATE_END,
  DATE_PLAN,
  FILIAL_ID,
  FILIAL_NAME,
  REGION_ORDER,
  REGION_NAME,
  NAPR_ORDER,
  NAPR_NAME,
  GROUP_ORDER,
  GROUP_NAME
ORDER BY
  REGION_ORDER, NAPR_ORDER, GROUP_ORDER;


--
-- V_PLAN_FACT_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_1
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
   TIP_ROW,
   GROUP_ORDER,
   GROUP_NAME,
   PROD_ORDER,
   PROD_ID_NPR,
   LTRIM(TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR,'000000000000000000')) AS PLANSTRU_ORDER,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   DATE_PLAN,
   PLAN_MON,
   PLAN_NAR,
   OBR_MON,
   OBR_NAR,
   KORR_MON,
   KORR_NAR,
   DATE_ZAYV,
   ZAYV,
   DATE_FACT,
   TIME_FACT,
   FACT_SUT,
   FACT,
   PLAN_NAR_RASP,
   OBR_NAR_RASP,
   KORR_NAR_RASP,
   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3
FROM KLS_PLANSTRU,(
 SELECT
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   0 AS level_pos,
   '' AS NAME,
   KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
   0 AS kod_spg1,
   0 AS kod_rzd1,
   0 AS kod_prz1,
   0 AS KOD_GRP1,
   0 AS KOD_PGR1,
   MAX(V_PLAN_FACT.DATE_PLAN) AS DATE_PLAN,
   SUM(V_PLAN_FACT.PLAN_MON) AS PLAN_MON,
   SUM(V_PLAN_FACT.PLAN_NAR) AS PLAN_NAR,
   SUM(V_PLAN_FACT.OBR_MON) AS OBR_MON,
   SUM(V_PLAN_FACT.OBR_NAR) AS OBR_NAR,
   SUM(V_PLAN_FACT.KORR_MON) AS KORR_MON,
   SUM(V_PLAN_FACT.KORR_NAR) AS KORR_NAR,
   MAX(V_PLAN_FACT.DATE_ZAYV) AS DATE_ZAYV,
   SUM(V_PLAN_FACT.ZAYV) AS ZAYV,
   MAX(V_PLAN_FACT.DATE_FACT) AS DATE_FACT,
   MAX(V_PLAN_FACT.TIME_FACT) AS TIME_FACT,
   SUM(V_PLAN_FACT.FACT_SUT) AS FACT_SUT,
   SUM(V_PLAN_FACT.FACT) AS FACT,
   SUM(V_PLAN_FACT.PLAN_NAR_RASP) AS PLAN_NAR_RASP,
   SUM(V_PLAN_FACT.OBR_NAR_RASP) AS OBR_NAR_RASP,
   SUM(V_PLAN_FACT.KORR_NAR_RASP) AS KORR_NAR_RASP,
   SUM(V_PLAN_FACT.FACT_DECADA_1) AS FACT_DECADA_1,
   SUM(V_PLAN_FACT.FACT_DECADA_2) AS FACT_DECADA_2,
   SUM(V_PLAN_FACT.FACT_DECADA_3) AS FACT_DECADA_3,
   SUM(V_PLAN_FACT.PLAN_DECADA_1) AS PLAN_DECADA_1,
   SUM(V_PLAN_FACT.PLAN_DECADA_2) AS PLAN_DECADA_2,
   SUM(V_PLAN_FACT.PLAN_DECADA_3) AS PLAN_DECADA_3
FROM KLS_PLANSTRU , V_PLAN_FACT
WHERE V_PLAN_FACT.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND KLS_PLANSTRU.LEVEL_POS>=1
GROUP BY
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   KLS_PLANSTRU.KOD_SGR)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_FACT_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_2
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
   TIP_ROW,
   GROUP_ORDER,
   GROUP_NAME,
   PROD_ORDER,
   PROD_ID_NPR,
   LTRIM(TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR,'000000000000000000')) AS PLANSTRU_ORDER,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   DATE_PLAN,
   PLAN_MON,
   PLAN_NAR,
   OBR_MON,
   OBR_NAR,
   KORR_MON,
   KORR_NAR,
   DATE_ZAYV,
   ZAYV,
   DATE_FACT,
   TIME_FACT,
   FACT_SUT,
   FACT,
   PLAN_NAR_RASP,
   OBR_NAR_RASP,
   KORR_NAR_RASP,
   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3 , PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3
 FROM KLS_PLANSTRU,(
 SELECT
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   0 AS level_pos,
   '' AS NAME,
   KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
   KLS_PLANSTRU.KOD_SPG AS kod_spg1,
   0 AS kod_rzd1,
   0 AS kod_prz1,
   0 AS KOD_GRP1,
   0 AS KOD_PGR1,
   MAX(V_PLAN_FACT.DATE_PLAN) AS DATE_PLAN,
   SUM(V_PLAN_FACT.PLAN_MON) AS PLAN_MON,
   SUM(V_PLAN_FACT.PLAN_NAR) AS PLAN_NAR,
   SUM(V_PLAN_FACT.OBR_MON) AS OBR_MON,
   SUM(V_PLAN_FACT.OBR_NAR) AS OBR_NAR,
   SUM(V_PLAN_FACT.KORR_MON) AS KORR_MON,
   SUM(V_PLAN_FACT.KORR_NAR) AS KORR_NAR,
   MAX(V_PLAN_FACT.DATE_ZAYV) AS DATE_ZAYV,
   SUM(V_PLAN_FACT.ZAYV) AS ZAYV,
   MAX(V_PLAN_FACT.DATE_FACT) AS DATE_FACT,
   MAX(V_PLAN_FACT.TIME_FACT) AS TIME_FACT,
   SUM(V_PLAN_FACT.FACT_SUT) AS FACT_SUT,
   SUM(V_PLAN_FACT.FACT) AS FACT,
   SUM(V_PLAN_FACT.PLAN_NAR_RASP) AS PLAN_NAR_RASP,
   SUM(V_PLAN_FACT.OBR_NAR_RASP) AS OBR_NAR_RASP,
   SUM(V_PLAN_FACT.KORR_NAR_RASP) AS KORR_NAR_RASP,
   SUM(V_PLAN_FACT.FACT_DECADA_1) AS FACT_DECADA_1,
   SUM(V_PLAN_FACT.FACT_DECADA_2) AS FACT_DECADA_2,
   SUM(V_PLAN_FACT.FACT_DECADA_3) AS FACT_DECADA_3,
   SUM(V_PLAN_FACT.PLAN_DECADA_1) AS PLAN_DECADA_1,
   SUM(V_PLAN_FACT.PLAN_DECADA_2) AS PLAN_DECADA_2,
   SUM(V_PLAN_FACT.PLAN_DECADA_3) AS PLAN_DECADA_3
FROM KLS_PLANSTRU, V_PLAN_FACT
WHERE V_PLAN_FACT.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND KLS_PLANSTRU.LEVEL_POS>=2
GROUP BY
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   KLS_PLANSTRU.KOD_SGR,
   KLS_PLANSTRU.KOD_SPG)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_FACT_3  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_3
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 KORR_MON, KORR_NAR, DATE_PLAN, PLAN_MON, PLAN_NAR, 
 OBR_MON, OBR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
   TIP_ROW,
   GROUP_ORDER,
   GROUP_NAME,
   PROD_ORDER,
   PROD_ID_NPR,
   LTRIM(TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR,'000000000000000000')) AS PLANSTRU_ORDER,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   DATE_PLAN,
   PLAN_MON,
   PLAN_NAR,
   OBR_MON,
   OBR_NAR,
   KORR_MON,
   KORR_NAR,
   DATE_ZAYV,
   ZAYV,
   DATE_FACT,
   TIME_FACT,
   FACT_SUT,
   FACT,
   PLAN_NAR_RASP,
   OBR_NAR_RASP,
   KORR_NAR_RASP,
   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3
 FROM KLS_PLANSTRU,(
 SELECT
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   0 AS level_pos,
   '' AS NAME,
   KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
   KLS_PLANSTRU.KOD_SPG AS kod_spg1,
   KLS_PLANSTRU.KOD_RZD AS kod_rzd1,
   0 AS kod_prz1,
   0 AS KOD_GRP1,
   0 AS KOD_PGR1,
   MAX(V_PLAN_FACT.DATE_PLAN) AS DATE_PLAN,
   SUM(V_PLAN_FACT.PLAN_MON) AS PLAN_MON,
   SUM(V_PLAN_FACT.PLAN_NAR) AS PLAN_NAR,
   SUM(V_PLAN_FACT.OBR_MON) AS OBR_MON,
   SUM(V_PLAN_FACT.OBR_NAR) AS OBR_NAR,
   SUM(V_PLAN_FACT.KORR_MON) AS KORR_MON,
   SUM(V_PLAN_FACT.KORR_NAR) AS KORR_NAR,
   MAX(V_PLAN_FACT.DATE_ZAYV) AS DATE_ZAYV,
   SUM(V_PLAN_FACT.ZAYV) AS ZAYV,
   MAX(V_PLAN_FACT.DATE_FACT) AS DATE_FACT,
   MAX(V_PLAN_FACT.TIME_FACT) AS TIME_FACT,
   SUM(V_PLAN_FACT.FACT_SUT) AS FACT_SUT,
   SUM(V_PLAN_FACT.FACT) AS FACT,
   SUM(V_PLAN_FACT.PLAN_NAR_RASP) AS PLAN_NAR_RASP,
   SUM(V_PLAN_FACT.OBR_NAR_RASP) AS OBR_NAR_RASP,
   SUM(V_PLAN_FACT.KORR_NAR_RASP) AS KORR_NAR_RASP,
   SUM(V_PLAN_FACT.FACT_DECADA_1) AS FACT_DECADA_1,
   SUM(V_PLAN_FACT.FACT_DECADA_2) AS FACT_DECADA_2,
   SUM(V_PLAN_FACT.FACT_DECADA_3) AS FACT_DECADA_3,
   SUM(V_PLAN_FACT.PLAN_DECADA_1) AS PLAN_DECADA_1,
   SUM(V_PLAN_FACT.PLAN_DECADA_2) AS PLAN_DECADA_2,
   SUM(V_PLAN_FACT.PLAN_DECADA_3) AS PLAN_DECADA_3
FROM KLS_PLANSTRU, V_PLAN_FACT
WHERE V_PLAN_FACT.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND KLS_PLANSTRU.LEVEL_POS>=3
GROUP BY
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   KLS_PLANSTRU.KOD_SGR,
   KLS_PLANSTRU.KOD_SPG,
   KLS_PLANSTRU.KOD_RZD)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_FACT_4  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_4
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
   TIP_ROW,
   GROUP_ORDER,
   GROUP_NAME,
   PROD_ORDER,
   PROD_ID_NPR,
   LTRIM(TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR,'000000000000000000')) AS PLANSTRU_ORDER,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   DATE_PLAN,
   PLAN_MON,
   PLAN_NAR,
   OBR_MON,
   OBR_NAR,
   KORR_MON,
   KORR_NAR,
   DATE_ZAYV,
   ZAYV,
   DATE_FACT,
   TIME_FACT,
   FACT_SUT,
   FACT,
   PLAN_NAR_RASP,
   OBR_NAR_RASP,
   KORR_NAR_RASP,
   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3
 FROM KLS_PLANSTRU,(
 SELECT
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   0 AS level_pos,
   '' AS NAME,
   KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
   KLS_PLANSTRU.KOD_SPG AS kod_spg1,
   KLS_PLANSTRU.KOD_RZD AS kod_rzd1,
   KLS_PLANSTRU.KOD_PRZ AS kod_prz1,
   0 AS KOD_GRP1,
   0 AS KOD_PGR1,
   MAX(V_PLAN_FACT.DATE_PLAN) AS DATE_PLAN,
   SUM(V_PLAN_FACT.PLAN_MON) AS PLAN_MON,
   SUM(V_PLAN_FACT.PLAN_NAR) AS PLAN_NAR,
   SUM(V_PLAN_FACT.OBR_MON) AS OBR_MON,
   SUM(V_PLAN_FACT.OBR_NAR) AS OBR_NAR,
   SUM(V_PLAN_FACT.KORR_MON) AS KORR_MON,
   SUM(V_PLAN_FACT.KORR_NAR) AS KORR_NAR,
   MAX(V_PLAN_FACT.DATE_ZAYV) AS DATE_ZAYV,
   SUM(V_PLAN_FACT.ZAYV) AS ZAYV,
   MAX(V_PLAN_FACT.DATE_FACT) AS DATE_FACT,
   MAX(V_PLAN_FACT.TIME_FACT) AS TIME_FACT,
   SUM(V_PLAN_FACT.FACT_SUT) AS FACT_SUT,
   SUM(V_PLAN_FACT.FACT) AS FACT,
   SUM(V_PLAN_FACT.PLAN_NAR_RASP) AS PLAN_NAR_RASP,
   SUM(V_PLAN_FACT.OBR_NAR_RASP) AS OBR_NAR_RASP,
   SUM(V_PLAN_FACT.KORR_NAR_RASP) AS KORR_NAR_RASP,
   SUM(V_PLAN_FACT.FACT_DECADA_1) AS FACT_DECADA_1,
   SUM(V_PLAN_FACT.FACT_DECADA_2) AS FACT_DECADA_2,
   SUM(V_PLAN_FACT.FACT_DECADA_3) AS FACT_DECADA_3,
   SUM(V_PLAN_FACT.PLAN_DECADA_1) AS PLAN_DECADA_1,
   SUM(V_PLAN_FACT.PLAN_DECADA_2) AS PLAN_DECADA_2,
   SUM(V_PLAN_FACT.PLAN_DECADA_3) AS PLAN_DECADA_3
FROM KLS_PLANSTRU , V_PLAN_FACT
WHERE V_PLAN_FACT.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND KLS_PLANSTRU.LEVEL_POS>=4
GROUP BY
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   KLS_PLANSTRU.KOD_SGR,
   KLS_PLANSTRU.KOD_SPG,
   KLS_PLANSTRU.KOD_RZD,
   KLS_PLANSTRU.KOD_PRZ)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_FACT_5  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_5
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
   TIP_ROW,
   GROUP_ORDER,
   GROUP_NAME,
   PROD_ORDER,
   PROD_ID_NPR,
   LTRIM(TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR,'000000000000000000')) AS PLANSTRU_ORDER,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   DATE_PLAN,
   PLAN_MON,
   PLAN_NAR,
   OBR_MON,
   OBR_NAR,
   KORR_MON,
   KORR_NAR,
   DATE_ZAYV,
   ZAYV,
   DATE_FACT,
   TIME_FACT,
   FACT_SUT,
   FACT,
   PLAN_NAR_RASP,
   OBR_NAR_RASP,
   KORR_NAR_RASP,
   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3
FROM KLS_PLANSTRU,(
SELECT
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   0 AS level_pos,
   '' AS NAME,
   KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
   KLS_PLANSTRU.KOD_SPG AS kod_spg1,
   KLS_PLANSTRU.KOD_RZD AS kod_rzd1,
   KLS_PLANSTRU.KOD_PRZ AS kod_prz1,
   KLS_PLANSTRU.KOD_GRP AS KOD_GRP1,
   0 AS KOD_PGR1,
   MAX(V_PLAN_FACT.DATE_PLAN) AS DATE_PLAN,
   SUM(V_PLAN_FACT.PLAN_MON) AS PLAN_MON,
   SUM(V_PLAN_FACT.PLAN_NAR) AS PLAN_NAR,
   SUM(V_PLAN_FACT.OBR_MON) AS OBR_MON,
   SUM(V_PLAN_FACT.OBR_NAR) AS OBR_NAR,
   SUM(V_PLAN_FACT.KORR_MON) AS KORR_MON,
   SUM(V_PLAN_FACT.KORR_NAR) AS KORR_NAR,
   MAX(V_PLAN_FACT.DATE_ZAYV) AS DATE_ZAYV,
   SUM(V_PLAN_FACT.ZAYV) AS ZAYV,
   MAX(V_PLAN_FACT.DATE_FACT) AS DATE_FACT,
   MAX(V_PLAN_FACT.TIME_FACT) AS TIME_FACT,
   SUM(V_PLAN_FACT.FACT_SUT) AS FACT_SUT,
   SUM(V_PLAN_FACT.FACT) AS FACT,
   SUM(V_PLAN_FACT.PLAN_NAR_RASP) AS PLAN_NAR_RASP,
   SUM(V_PLAN_FACT.OBR_NAR_RASP) AS OBR_NAR_RASP,
   SUM(V_PLAN_FACT.KORR_NAR_RASP) AS KORR_NAR_RASP,
   SUM(V_PLAN_FACT.FACT_DECADA_1) AS FACT_DECADA_1,
   SUM(V_PLAN_FACT.FACT_DECADA_2) AS FACT_DECADA_2,
   SUM(V_PLAN_FACT.FACT_DECADA_3) AS FACT_DECADA_3,
   SUM(V_PLAN_FACT.PLAN_DECADA_1) AS PLAN_DECADA_1,
   SUM(V_PLAN_FACT.PLAN_DECADA_2) AS PLAN_DECADA_2,
   SUM(V_PLAN_FACT.PLAN_DECADA_3) AS PLAN_DECADA_3
FROM KLS_PLANSTRU, V_PLAN_FACT
WHERE V_PLAN_FACT.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND KLS_PLANSTRU.LEVEL_POS>=5
GROUP BY
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   KLS_PLANSTRU.KOD_SGR,
   KLS_PLANSTRU.KOD_SPG,
   KLS_PLANSTRU.KOD_RZD,
   KLS_PLANSTRU.KOD_PRZ,
   KLS_PLANSTRU.KOD_GRP)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_FACT_6  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_6
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_MON_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
   TIP_ROW,
   GROUP_ORDER,
   GROUP_NAME,
   PROD_ORDER,
   PROD_ID_NPR,
   LTRIM(TO_CHAR(TO_NUMBER(PLANSTRU_ORDER),'000000000000000000')) AS PLANSTRU_ORDER,
   PLANSTRU_ID,
   KLS_PLANSTRU.LEVEL_POS,
   KLS_PLANSTRU.NAME,
   KLS_PLANSTRU.KOD_SGR,
   KLS_PLANSTRU.KOD_SPG,
   KLS_PLANSTRU.KOD_RZD,
   KLS_PLANSTRU.KOD_PRZ,
   KLS_PLANSTRU.KOD_GRP,
   KLS_PLANSTRU.KOD_PGR,
   MAX(V_PLAN_FACT.DATE_PLAN) AS DATE_PLAN,
   SUM(V_PLAN_FACT.PLAN_MON) AS PLAN_MON,
   SUM(V_PLAN_FACT.PLAN_NAR) AS PLAN_NAR,
   SUM(V_PLAN_FACT.OBR_MON) AS OBR_MON,
   SUM(V_PLAN_FACT.OBR_NAR) AS OBR_NAR,
   SUM(V_PLAN_FACT.KORR_MON) AS KORR_MON,
   SUM(V_PLAN_FACT.KORR_NAR) AS KORR_NAR,
   MAX(V_PLAN_FACT.DATE_ZAYV) AS DATE_ZAYV,
   SUM(V_PLAN_FACT.ZAYV) AS ZAYV,
   MAX(V_PLAN_FACT.DATE_FACT) AS DATE_FACT,
   MAX(V_PLAN_FACT.TIME_FACT) AS TIME_FACT,
   SUM(V_PLAN_FACT.FACT_SUT) AS FACT_SUT,
   SUM(V_PLAN_FACT.FACT) AS FACT,
   SUM(V_PLAN_FACT.PLAN_NAR_RASP) AS PLAN_NAR_RASP,
   SUM(V_PLAN_FACT.OBR_NAR_RASP) AS OBR_NAR_RASP,
   SUM(V_PLAN_FACT.KORR_NAR_RASP) AS KORR_NAR_RASP,
   SUM(V_PLAN_FACT.FACT_DECADA_1) AS FACT_DECADA_1,
   SUM(V_PLAN_FACT.FACT_DECADA_2) AS FACT_DECADA_2,
   SUM(V_PLAN_FACT.FACT_DECADA_3) AS FACT_DECADA_3,
   SUM(V_PLAN_FACT.PLAN_DECADA_1) AS PLAN_DECADA_1,
   SUM(V_PLAN_FACT.PLAN_DECADA_2) AS PLAN_DECADA_2,
   SUM(V_PLAN_FACT.PLAN_DECADA_3) AS PLAN_DECADA_3
FROM KLS_PLANSTRU, V_PLAN_FACT
WHERE V_PLAN_FACT.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND KLS_PLANSTRU.LEVEL_POS>=6
GROUP BY
   V_PLAN_FACT.TIP_ROW,
   V_PLAN_FACT.GROUP_ORDER,
   V_PLAN_FACT.GROUP_NAME,
   V_PLAN_FACT.PROD_ORDER,
   V_PLAN_FACT.PROD_ID_NPR,
   V_PLAN_FACT.PLANSTRU_ORDER,
   V_PLAN_FACT.PLANSTRU_ID,
   KLS_PLANSTRU.LEVEL_POS,
   KLS_PLANSTRU.NAME,
   KLS_PLANSTRU.KOD_SGR,
   KLS_PLANSTRU.KOD_SPG,
   KLS_PLANSTRU.KOD_RZD,
   KLS_PLANSTRU.KOD_PRZ,
   KLS_PLANSTRU.KOD_GRP,
   KLS_PLANSTRU.KOD_PGR;


--
-- V_PLAN_REALIZ_FOR_PARUS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_REALIZ_FOR_PARUS
(DATE_PLAN, STORE_RN, NOMEN_RN, PLAN_VES_KG)
AS 
select
  A.DATE_PLAN,
  C.STORE_RN,
  B.PARUS_PRN as NOMEN_RN,
  SUM(A.VES*1000)
from
  plan_realiz A,
  V_KLS_PROD_NOMENKLATOR_GRP B,
  (select ORG_STRU_ID,STORE_RN from PARUS_STORE_ORG_STRU_LINK where is_main=1) C
where A.PROD_ID_NPR=B.PROD
  and A.SKLAD_ID=C.ORG_STRU_ID
  AND A.PARUS_RN IS NULL -- Планы реализации
GROUP BY
  A.DATE_PLAN,
  C.STORE_RN,
  B.PARUS_PRN;


--
-- V_PLAN_STRU  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_STRU
(ID, NAME, BEGIN_DATE, END_DATE, LEVEL_POS, 
 KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, 
 KOD_PGR, PARENT_ID, HAS_CHILD, SPF_GROUP_ORDER, SPF_GROUP_NAME, 
 SPF_ORDER, SPF_NAME, IS_SNP, REGION_ID, IS_RESURS, 
 VIEW_LEVEL, POS_PREDPR_ID)
AS 
SELECT
 A.ID,
 DECODE(B.GRAND_PARENT_ID,99999,'',DECODE(B.GRAND_PARENT_VIEW,1,DECODE(B.GRAND_PARENT_NAME,B.PARENT_NAME,'',B.GRAND_PARENT_NAME||' \ '),'')) ||
   DECODE(B.PARENT_ID,99999,'',DECODE(B.PARENT_VIEW,1,DECODE(B.PARENT_NAME,A.NAME,'',B.PARENT_NAME||' \ '),'')) || A.NAME as NAME,
 A.BEGIN_DATE,
 A.END_DATE,
 A.LEVEL_POS,A.KOD_SGR,A.KOD_SPG,A.KOD_RZD,A.KOD_PRZ,A.KOD_GRP,A.KOD_PGR,
 A.PARENT_ID,
 DECODE(C.PARENT_ID,NULL,0,1),
 A.SPF_GROUP_ORDER, A.SPF_GROUP_NAME, A.SPF_ORDER, A.SPF_NAME,
 A.IS_SNP,
 a.region_id,
 A.IS_RESURS,
 A.VIEW_LEVEL,
 A.POS_PREDPR_ID
FROM V_KLS_PLANSTRU A,
     (
	 SELECT
        AA.ID as PARENT_ID,
		AA.NAME as PARENT_NAME,
		DECODE(SIGN(AA.LEVEL_POS-AA.VIEW_LEVEL),-1,0,1) as PARENT_VIEW,
		BB.ID as GRAND_PARENT_ID,
		BB.NAME as GRAND_PARENT_NAME,
		DECODE(SIGN(BB.LEVEL_POS-BB.VIEW_LEVEL),-1,0,1) as GRAND_PARENT_VIEW
      FROM KLS_PLANSTRU AA, KLS_PLANSTRU BB
      WHERE AA.PARENT_ID=BB.ID
	  ) B,
	  (SELECT DISTINCT PARENT_ID FROM KLS_PLANSTRU) C,
     (SELECT
        AA.ID,
        DECODE(BB.NAME,AA.NAME,AA.NAME,DECODE(BB.ID,99999,AA.NAME,4,AA.NAME,BB.NAME || ' - ' || AA.NAME)) AS NAME
      FROM KLS_PLANSTRU AA, KLS_PLANSTRU BB
      WHERE AA.PARENT_ID=BB.ID) D
WHERE A.PARENT_ID=B.PARENT_ID (+)
  AND A.ID = C.PARENT_ID (+)
  AND A.PARENT_ID=D.ID (+)
ORDER BY A.KOD_SGR,A.KOD_SPG,A.KOD_RZD,A.KOD_PRZ,A.KOD_GRP,A.KOD_PGR;


--
-- V_PVZ_OTGR_604  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PVZ_OTGR_604
(AGNABBR, CODE, KSSS_AGN, MODIF_CODE, KSSS_PROD, 
 DOCDATE, STORE, POST, KSSS_POST, KSSS_MH, 
 VAL, VAL_S, ACCNUMB, ACCDATE, CAR_NUMBER, 
 NUM_DOC, RN_SP, DIRNUMB, KSSS_LUK, KSSS_NAD, 
 STORE_TYPE, CONTRACT, TTN)
AS 
select otgr.*, 
 --'1'  as contract,
-- '2' as TTN
trim(GET_CONTRACT_PARUS_VZ(NUM_DOC,'AUTO_CONT',DOCDATE)) as contract,
trim(GET_CONTRACT_PARUS_VZ(NUM_DOC,'AUTO_ACC',DOCDATE)) as TTN
  from  PVZ.V_PVZ_OTGR@oracle otgr;


--
-- V_RUI_ARX_AGN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RUI_ARX_AGN
(AGN_ID, AGN_ABBR, AGN_NAME, AGN_POST, AGN_INN, 
 AGN_KPP, AGN_PARUS_FACC, AGN_PARUS_AGNABBR, IS_AUTO_LINK)
AS 
SELECT "AGN_ID","AGN_ABBR","AGN_NAME","AGN_POST","AGN_INN","AGN_KPP","AGN_PARUS_FACC","AGN_PARUS_AGNABBR", "IS_AUTO_LINK" FROM Pvz.RUI_ARX_AGN@Oracle.world;


--
-- V_SF_DOVER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_DOVER
(POST_COMPANY, POST_DOLJ, POST_FIO, POST_DOVER, POKUP_COMPANY, 
 POKUP_DOLJ, POKUP_FIO, POKUP_DOVER, POST_DOLJ_SIGN, POST_FIO_SIGN, 
 POKUP_DOLJ_SIGN, POKUP_FIO_SIGN, POKUP_COMPANY_SIGN)
AS 
SELECT POST_COMPANY, POST_DOLJ, POST_FIO, POST_DOVER, POKUP_COMPANY, POKUP_DOLJ, POKUP_FIO, POKUP_DOVER, 
POST_DOLJ_SIGN,POST_FIO_SIGN,POKUP_DOLJ_SIGN, POKUP_FIO_SIGN,POKUP_COMPANY_SIGN FROM SF_SIGNS, SF_DOVER 
WHERE Terminal_name=For_Init.GetCurrTerm() 
  AND User_name=For_Init.GetCurrUser() 
  AND SF_SIGNS.SF_DOVER_ID=SF_DOVER.ID(+);


--
-- V_SF_NUM_DATES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_NUM_DATES
(SCHETF, DATA_VYP_SF, NUM_5, DATE_OTGR)
AS 
SELECT "SCHETF","DATA_VYP_SF","NUM_5","DATE_OTGR" FROM
(
SELECT ASF.SCHETF,ASF.DATA_VYP_SF,MAX(AP.NUM_5) AS NUM_5, MAX(AP.DATE_OTGR) AS DATE_OTGR
FROM SVETA.SF_POZ_PROD AP,SVETA.SF_SFAK_PROD ASF
WHERE AP.KOD_PROD=ASF.KOD_PROD
GROUP BY ASF.DATA_VYP_SF,ASF.schetf
)
ORDER BY DATA_VYP_SF,NUM_5,schetf;


--
-- V_SF_PRINT_MASTER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT_MASTER
(KOD_PROD, KOD_TU, SCHETF, SF_NO, ID_POZ_PROD, 
 DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, ADDR_PRED_POST, PHONE_POST, 
 INN_NPOST, PLRDOC, DATA_PLRD, PLRDOC_AND_DATE, DOGOVOR, 
 FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, INN_PLAT, GROTPR, 
 GROTPR_ADDR, GRPOL, GRPOL_ADDR, DOPOLN1, DOPOLN2, 
 NAIM_TOV, EDIZM, KOL, CENA, AKCIZ1, 
 SUMMA, AKCIZ2, STNDS, SUMNDS, STGSM, 
 SUMGSM, SUMNPR, ALLNDS, PROISX, GTD, 
 ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, WITH_STNDS_TXT, 
 BUHANAL, DATE_OTGR, DATE_DOG, BOSS, GLAVBUH)
AS 
SELECT
  s.kod_prod, s.kod_tu,
  DECODE(NVL(s.linkschf, 0), 0, s.schetf, s.schetf||'/'||
         LTRIM(TO_CHAR(s.linkschf))) ||
         '     от  ' || TO_CHAR(s.data_vyp_sf, 'DD.MM.RRRR')
    AS schetf,
/* 2001/02/05 sulim */ s.schetf, p.id_poz_prod,
  s.data_vyp_sf, s.full_name_npost, s.vystval,
  DECODE(p1.addr_pred, '?', NULL, p1.addr_pred)
    AS addr_pred_post,
  p1.phone AS phone_post,
  s.inn_npost,
  s.plrdoc, s.data_plrd,
/* 2001/01/30 sulim */ rpad(decode(s.data_plrd,null,s.plrdoc,
/* 2001/01/30 sulim */        s.plrdoc||' от '||to_char(s.data_plrd,'dd.mm.rr'))
/* 2001/01/30 sulim */ || sveta.get_av_plrdocs(s.kod_prod,s.kod_tu),300),
  s.dogovor AS dogovor,
  s.full_name_plat,
  p2.addr_pred AS addr_pred_plat,
  p2.phone AS phone_plat,
  DECODE(TRANSLATE(SUBSTR(s.inn_plat, 1, 1), 'x1234567890', 'x'),
         NULL, s.inn_plat, ' ')
    AS inn_plat,
  grotpr, grotpr_addr, grpol, grpol_addr,
  s.dopoln1, s.dopoln2,
  p.naim_tov,
  DECODE(p.edizm, '?', NULL, p.edizm)
    AS edizm,
  p.kol, p.cena, p.akciz1, p.summa, nvl(p.akciz2,0) as akciz2,
--  p.stnds,
-- 2001/02/08 sulim --  nvl(p.stnds,0),
/* 2001/02/16 sulim  Обратно из-за: Есть "Ставка=0", а есть "НДС не облаг." */
/* 2001/02/16 sulim */  p.stnds,
  p.sumnds, p.stgsm, p.sumgsm, p.sumnpr, p.allnds,
--/* 2001/02/06 sulim */  p.allnds-nvl(p.sumnpr,0) as sumbeznpr,
  p.proisx,
  DECODE(UPPER(p.proisx),
         'РОССИЯ', '-', p.gtd)
    AS gtd
/* 2001/03/06 sulim */ , sveta.sf_f_get_propisi_sfprod(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.sf_f_get_propisi_sfprodNDS(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.sf_f_get_propisi_sfprodNONDS(s.kod_prod, s.kod_tu)
/* 2001/10/01 sulim */ , decode(stnds,null,decode(nvl(sumnds,0),0,'-','?'),'+')
/* 2001/10/01 sulim */    as with_stnds
/* 2001/10/01 sulim */ , decode(stnds,null,decode(nvl(sumnds,0),0,'НДС не обл.','расчетн.'),'Y')
/* 2001/10/01 sulim */    as with_stnds_txt
/* 2001/10/03 sulim */ , buhanal   /* для критерия суммирования количества */
/* 2002/02/11 vev   */ , date_otgr
/* 2002/02/11 vev   */, DECODE(s.datadog, NULL, NULL,TO_CHAR(s.datadog,' "от" DD.MM.YYYY'))
/* 2002/02/16 vev   */ , sf_signs.boss
/* 2002/02/16 vev   */ , sf_signs.blavbuh
FROM
  sveta.sf_sfak_prod s, sveta.sf_stat0_poz_prod p,
  sveta.sf_kls_pred p1, sveta.sf_kls_pred p2,
  sf_Signs
WHERE
  s.id_npred_post = p1.id_pred
  AND s.id_pred_plat  = p2.id_pred
  AND p.kod_prod = s.kod_prod
  AND p.kod_tu = s.kod_tu;


--
-- V_SF_SIGNS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_SIGNS
(BOSS, BLAVBUH, SF_DOVER_ID)
AS 
SELECT "BOSS","BLAVBUH","SF_DOVER_ID" FROM SF_SIGNS 
WHERE Terminal_name=For_Init.GetCurrTerm() 
  AND User_name=For_Init.GetCurrUser();


--
-- V_SNP_DISP_AZS_IN_LAST_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_IN_LAST_PSV
(OPER_ID, STORE_RN, NOMEN_RN, MIN_DAY, MAX_DAY, 
 VOLUME, MASSA, SUMMA)
AS 
SELECT /*+ RULE Приход на АЗС за последнюю смену по сменным отчетам */
  'IN_LAST' as OPER_ID, -- Тип операции
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM PARUS.TB_SNP_STORE_OPER_PSV@oracle.world AA, PARUS.AZSGSMWAYSTYPES@oracle.world way
WHERE  USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=84
  AND AA.STOPER_RN = way.RN
  AND way.KEEP_SIGN=0
  AND NOT (way.GSMWAYS_MNEMO = 'ПРИХПРОБ' OR way.GSMWAYS_MNEMO = 'ПРИХТАР')
GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_OPER_PREV_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_OPER_PREV_PSV
(STORE_RN, NOMEN_RN, OUT_O_PREV_VOL, OUT_O_PREV_MAS, OUT_O_PREV_SUM)
AS 
SELECT /*+ RULE Внешний расход на АЗС по сменным отчетам за предыдущий период */
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM PARUS.TB_SNP_STORE_OPER_PSV@oracle.world AA, PARUS.AZSGSMWAYSTYPES@oracle.world way
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=82
  AND AA.STOPER_RN = way.RN
  AND NOT (way.GSMWAYS_MNEMO LIKE 'РАСХПРОБ%' OR way.GSMWAYS_MNEMO = 'РАСХТАР' OR way.GSMWAYS_MNEMO LIKE 'СОБСТВ_НУЖДЫ%')
GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_OPER_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_OPER_PSV
(OPER_ID, STORE_RN, NOMEN_RN, MIN_DAY, MAX_DAY, 
 VOLUME, MASSA, SUMMA)
AS 
SELECT /*+ RULE Общий приход на АЗС по сменным отчетам */
  'IN' as OPER_ID, -- Тип операции
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM parus.TB_SNP_STORE_OPER_PSV@oracle.world AA
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=1
GROUP BY STORE_RN,NOMEN_RN
--UNION ALL
--SELECT /*+ RULE Приход на хранение на АЗС по сменным отчетам */
--  'IN_HR' as OPER_ID, -- Тип операции
--  STORE_RN, -- Склад
--  NOMEN_RN, -- Н/пр
--  MIN(MIN_DAY) as MIN_DAY,
--  MAX(MAX_DAY) as MAX_DAY,
--  SUM(VOLUME) as VOLUME,
--  SUM(MASSA) as MASSA,
--  SUM(SUMMA) as SUMMA
--FROM TB_SNP_STORE_OPER_PSV AA, AZSGSMWAYSTYPES way
--WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
--  AND SOURCE_ID=1
--  AND AA.STOPER_RN = way.RN
--  AND way.KEEP_SIGN=1
--GROUP BY STORE_RN,NOMEN_RN
--UNION ALL
--SELECT /*+ RULE Внутреннее перемещение-Приход на АЗС по сменным отчетам */
--  'IN_I' as OPER_ID, -- Тип операции
--  STORE_RN, -- Склад
--  NOMEN_RN, -- Н/пр
--  MIN(MIN_DAY) as MIN_DAY,
--  MAX(MAX_DAY) as MAX_DAY,
--  SUM(VOLUME) as VOLUME,
--  SUM(MASSA) as MASSA,
--  SUM(SUMMA) as SUMMA
--FROM TB_SNP_STORE_OPER_PSV AA, AZSGSMWAYSTYPES way
--WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
--  AND SOURCE_ID=1
--  AND AA.STOPER_RN = way.RN
--  AND way.KEEP_SIGN=0
--  AND (way.GSMWAYS_MNEMO = 'ПРИХПРОБ' OR way.GSMWAYS_MNEMO = 'ПРИХТАР')
--GROUP BY STORE_RN,NOMEN_RN
UNION ALL
SELECT /*+ RULE Внешний приход на АЗС по сменным отчетам */
  'IN_O' as OPER_ID, -- Тип операции
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM parus.TB_SNP_STORE_OPER_PSV@oracle.world AA, parus.AZSGSMWAYSTYPES@oracle.world way
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=1
  AND AA.STOPER_RN = way.RN
  AND way.KEEP_SIGN=0
  AND NOT (way.GSMWAYS_MNEMO = 'ПРИХПРОБ' OR way.GSMWAYS_MNEMO = 'ПРИХТАР')
GROUP BY STORE_RN,NOMEN_RN
UNION ALL
SELECT /*+ RULE Приход на АЗС по ТТН на отпуск в подразделения */
  'IN_TTN' as OPER_ID,
  STORE_RN,
  NOMEN_RN,
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM parus.TB_SNP_STORE_OPER_PSV@oracle.world AA
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=3
GROUP BY STORE_RN,NOMEN_RN
UNION ALL
SELECT /*+ RULE Общий расход с АЗС по сменным отчетам */
  'OUT' as OPER_ID, -- Тип операции
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM parus.TB_SNP_STORE_OPER_PSV@oracle.world AA
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=2
GROUP BY STORE_RN,NOMEN_RN
--UNION ALL
--SELECT /*+ RULE Расход с хранения на АЗС по сменным отчетам */
--  'OUT_HR' as OPER_ID, -- Тип операции
--  STORE_RN, -- Склад
--  NOMEN_RN, -- Н/пр
--  MIN(MIN_DAY) as MIN_DAY,
--  MAX(MAX_DAY) as MAX_DAY,
--  SUM(VOLUME) as VOLUME,
--  SUM(MASSA) as MASSA,
--  SUM(SUMMA) as SUMMA
--FROM TB_SNP_STORE_OPER_PSV AA, AZSGSMWAYSTYPES way
--WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
--  AND SOURCE_ID=2
--  AND AA.STOPER_RN = way.RN
--  AND way.KEEP_SIGN=1
--GROUP BY STORE_RN,NOMEN_RN
--UNION ALL
--SELECT /*+ RULE Внутреннее перемещение-Расход с АЗС по сменным отчетам */
--  'OUT_I' as OPER_ID, -- Тип операции
--  STORE_RN, -- Склад
--  NOMEN_RN, -- Н/пр
--  MIN(MIN_DAY) as MIN_DAY,
--  MAX(MAX_DAY) as MAX_DAY,
--  SUM(VOLUME) as VOLUME,
--  SUM(MASSA) as MASSA,
--  SUM(SUMMA) as SUMMA
--FROM TB_SNP_STORE_OPER_PSV AA, AZSGSMWAYSTYPES way
--WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
--  AND SOURCE_ID=2
--  AND AA.STOPER_RN = way.RN
--  AND (way.GSMWAYS_MNEMO LIKE 'РАСХПРОБ%' OR way.GSMWAYS_MNEMO = 'РАСХТАР' OR way.GSMWAYS_MNEMO LIKE 'СОБСТВ_НУЖДЫ%')
--GROUP BY STORE_RN,NOMEN_RN
UNION ALL
SELECT /*+ RULE Внешний расход на АЗС по сменным отчетам */
  'OUT_O' as OPER_ID, -- Тип операции
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(VOLUME) as VOLUME,
  SUM(MASSA) as MASSA,
  SUM(SUMMA) as SUMMA
FROM parus.TB_SNP_STORE_OPER_PSV@oracle.world AA, PARUS.AZSGSMWAYSTYPES@oracle.world way
WHERE  USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=2
  AND AA.STOPER_RN = way.RN
  AND NOT (way.GSMWAYS_MNEMO LIKE 'РАСХПРОБ%' OR way.GSMWAYS_MNEMO = 'РАСХТАР' OR way.GSMWAYS_MNEMO LIKE 'СОБСТВ_НУЖДЫ%')
GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_OPER_WEEK_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_OPER_WEEK_PSV
(STORE_RN, NOMEN_RN, OUT_O_1_VOL, OUT_O_1_MAS, OUT_O_2_VOL, 
 OUT_O_2_MAS, OUT_O_3_VOL, OUT_O_3_MAS, OUT_O_4_VOL, OUT_O_4_MAS, 
 OUT_O_5_VOL, OUT_O_5_MAS, OUT_O_6_VOL, OUT_O_6_MAS, OUT_O_7_VOL, 
 OUT_O_7_MAS)
AS 
SELECT /*+ RULE Внешний расход на АЗС по сменным отчетам за предыдущий период по дням недели*/
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  SUM(DECODE(WEEK_DAY,1,VOLUME,0)) as VOL_1,
  SUM(DECODE(WEEK_DAY,1,MASSA,0)) as MAS_1,
  SUM(DECODE(WEEK_DAY,2,VOLUME,0)) as VOL_2,
  SUM(DECODE(WEEK_DAY,2,MASSA,0)) as MAS_2,
  SUM(DECODE(WEEK_DAY,3,VOLUME,0)) as VOL_3,
  SUM(DECODE(WEEK_DAY,3,MASSA,0)) as MAS_3,
  SUM(DECODE(WEEK_DAY,4,VOLUME,0)) as VOL_4,
  SUM(DECODE(WEEK_DAY,4,MASSA,0)) as MAS_4,
  SUM(DECODE(WEEK_DAY,5,VOLUME,0)) as VOL_5,
  SUM(DECODE(WEEK_DAY,5,MASSA,0)) as MAS_5,
  SUM(DECODE(WEEK_DAY,6,VOLUME,0)) as VOL_6,
  SUM(DECODE(WEEK_DAY,6,MASSA,0)) as MAS_6,
  SUM(DECODE(WEEK_DAY,7,VOLUME,0)) as VOL_7,
  SUM(DECODE(WEEK_DAY,7,MASSA,0)) as MAS_7
FROM PARUS.TB_SNP_STORE_OPER_PSV@oracle.world AA, PARUS.AZSGSMWAYSTYPES@oracle.world way
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND SOURCE_ID=82
  AND AA.STOPER_RN = way.RN
  AND NOT (way.GSMWAYS_MNEMO LIKE 'РАСХПРОБ%' OR way.GSMWAYS_MNEMO = 'РАСХТАР' OR way.GSMWAYS_MNEMO LIKE 'СОБСТВ_НУЖДЫ%')
GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_OST_GRP_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_OST_GRP_PSV
(STORE_RN, NOMEN_RN, END_VOLUME, END_MASSA, END_FULL, 
 END_WATER)
AS 
SELECT /*+ RULE Остатки на АЗС по сменным отчетам */
       STORE_RN,
       NOMEN_RN,
       SUM(END_VOLUME_FACT) as END_VOLUME,
       SUM(END_MASSA_FACT) as END_MASSA,
       SUM(END_FULL) as END_FULL,
       SUM(END_WATER) as END_WATER
     FROM PARUS.TB_SNP_STORE_OST_PSV@oracle.world
     WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
       AND SOURCE_ID=0
     GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_WAY_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_WAY_PSV
(OPER_ID, STORE_RN, NOMEN_RN, MIN_DAY, MAX_DAY, 
 VOLUME, MASSA, SUMMA)
AS 
SELECT /*+ RULE Товары в пути */
  'IN_WAY' as OPER_ID, -- Тип операции
  STORE_RN, -- Склад
  NOMEN_RN, -- Н/пр
  MIN(MIN_DAY) as MIN_DAY,
  MAX(MAX_DAY) as MAX_DAY,
  SUM(DECODE(SOURCE_ID,85,VOLUME,-VOLUME)) as VOLUME,
  SUM(DECODE(SOURCE_ID,85,MASSA,-MASSA)) as MASSA,
  SUM(DECODE(SOURCE_ID,85,SUMMA,-SUMMA)) as SUMMA
FROM PARUS.TB_SNP_STORE_OPER_PSV@oracle.world AA, PARUS.AZSGSMWAYSTYPES@oracle.world way
WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND (SOURCE_ID=84 OR SOURCE_ID=85)
  AND AA.STOPER_RN = way.RN
  AND way.KEEP_SIGN=0
  AND NOT (way.GSMWAYS_MNEMO = 'ПРИХПРОБ' OR way.GSMWAYS_MNEMO = 'ПРИХТАР')
GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SVED_P_SER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SVED_P_SER
(SVED_ID, P_SER)
AS 
SELECT /*+ ordered use_nl(KLS_VALSVED,KLS_KODIF) index(KLS_VALSVED VALSVED_SVED_FK_I)*/ KLS_VALSVED.SVED_ID, NVL(KLS_VALSVED.QUAL,0) AS P_SER
FROM KLS_VALSVED,KLS_KODIF
WHERE KLS_VALSVED.KODIF_ID = KLS_KODIF.ID AND NLS_UPPER(KLS_KODIF.FIELD_SVED) = 'P_SER';


--
-- V_SVED_P_VOD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SVED_P_VOD
(SVED_ID, P_VOD)
AS 
SELECT /*+ ordered use_nl(KLS_VALSVED,KLS_KODIF) index(KLS_VALSVED VALSVED_SVED_FK_I)*/ KLS_VALSVED.SVED_ID, NVL(KLS_VALSVED.QUAL,0) AS U_VES
FROM KLS_VALSVED,KLS_KODIF
WHERE KLS_VALSVED.KODIF_ID = KLS_KODIF.ID AND NLS_UPPER(KLS_KODIF.FIELD_SVED) = 'P_VOD';


--
-- V_SVED_T_VSP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SVED_T_VSP
(SVED_ID, T_VSP)
AS 
SELECT /*+ ordered use_nl(KLS_VALSVED,KLS_KODIF) index(KLS_VALSVED VALSVED_SVED_FK_I)*/ KLS_VALSVED.SVED_ID, NVL(KLS_VALSVED.QUAL,0) AS T_VSP
FROM KLS_VALSVED,KLS_KODIF
WHERE KLS_VALSVED.KODIF_ID = KLS_KODIF.ID AND NLS_UPPER(KLS_KODIF.FIELD_SVED) = 'T_VSP';


--
-- V_SVED_U_VES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SVED_U_VES
(SVED_ID, U_VES)
AS 
SELECT /*+ index(KLS_VALSVED VALSVED_SVED_FK_I)*/ KLS_VALSVED.SVED_ID,NVL(KLS_VALSVED.QUAL,0) AS U_VES
FROM KLS_VALSVED
WHERE KLS_VALSVED.KODIF_ID=1;


--
-- V_SVED_VALPASP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SVED_VALPASP
(SVED_ID, U_VES, P_VOD, P_SER, T_VSP)
AS 
SELECT /*+ ordered use_nl(KLS_VALSVED,KLS_KODIF) index(KLS_VALSVED VALSVED_SVED_FK_I)*/
     KLS_VALSVED.SVED_ID,
	 MAX(DECODE(KLS_VALSVED.KODIF_ID,1,TRIM(NVL(KLS_VALSVED.QUAL,0)),0)) as U_VES,
	 MAX(DECODE(NLS_UPPER(KLS_KODIF.FIELD_SVED),'P_VOD',TRIM(NVL(KLS_VALSVED.QUAL,0)),0)) as P_VOD,
	 MAX(DECODE(NLS_UPPER(KLS_KODIF.FIELD_SVED),'P_SER',TRIM(NVL(KLS_VALSVED.QUAL,0)),0)) as P_SER,
	 MAX(DECODE(NLS_UPPER(KLS_KODIF.FIELD_SVED),'T_VSP',TRIM(NVL(KLS_VALSVED.QUAL,0)),0)) as T_VSP
   FROM KLS_VALSVED,KLS_KODIF
   WHERE KLS_VALSVED.KODIF_ID = KLS_KODIF.ID
  GROUP BY KLS_VALSVED.SVED_ID;


--
-- V_TAX_NOPACKAGE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TAX_NOPACKAGE
(DOC_ID, PARENT_DOC_ID, DOC_NUM, DOC_DATE, REL_NAME)
AS 
select to_char(docs.doc_num)||to_char(docs.doc_date)||to_char(docs.doc_rel_id) as doc_id, 
       to_char(docs.parent_doc_num)||to_char(docs.parent_doc_date)||to_char(docs.parent_doc_rel_id) as parent_doc_id,     
       docs.doc_num, 
       docs.doc_date,
       rel.rel_name
from isu_tax_docs docs join isu_tax_rel rel on docs.doc_rel_id=rel.id 
where docs.package_id is null;


--
-- V_TAX_NOPARENT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TAX_NOPARENT
(DOC_NUM, DOC_DATE)
AS 
select doc_num, doc_date
    from isu_tax_docs docs
  where not exists (select id from isu_tax_docs where doc_num=docs.parent_doc_num
  and doc_date=docs.parent_doc_date)
        and not (select pid from isu_tax_rel where id=docs.doc_rel_id) is null;


--
-- V_TEMP_BILL_KVIT_GROUP_BY_KVIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_KVIT_GROUP_BY_KVIT
(KVIT_ID, NUM_KVIT, TERMINAL_NAME, OSUSER_NAME)
AS 
SELECT
MAX(kvit_id) AS kvit_id,"NUM_KVIT","TERMINAL_NAME","OSUSER_NAME" FROM TEMP_BILL_KVIT
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser
GROUP BY
  NUM_KVIT,TERMINAL_NAME,OSUSER_NAME
ORDER BY
  KVIT_ID;


--
-- V_TEMP_BILL_KVIT_POSSIBLE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_KVIT_POSSIBLE
(KVIT_ID, NUM_KVIT, TERMINAL_NAME, OSUSER_NAME, NUM_CIST, 
 VES, TARIF, TARIF19, SVED_NUM, SUM_PROD, 
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
 SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, CENA, CENA_OTP, 
 DATE_CENA, DATE_KVIT, PROTO_NUM, PROTO_DATE, CENA_VOZN, 
 TARIF_GUARD, TARIF_GUARD_NDS, NACENKA, NUM_AKT, BILL_POS_ID, 
 NO_AKCIZ, NPR_PRICES_ID, CAT_CEN_ID)
AS 
SELECT
"KVIT_ID","NUM_KVIT","TERMINAL_NAME","OSUSER_NAME","NUM_CIST","VES","TARIF","TARIF19","SVED_NUM","SUM_PROD","SUM_AKCIZ","SUM_PROD_NDS","TARIF_NDS","SUM_VOZN11","SUM_VOZN11_NDS","SUM_VOZN12","SUM_VOZN12_NDS","SUM_STRAH","CENA","CENA_OTP","DATE_CENA","DATE_KVIT","PROTO_NUM","PROTO_DATE","CENA_VOZN","TARIF_GUARD","TARIF_GUARD_NDS","NACENKA","NUM_AKT","BILL_POS_ID","NO_AKCIZ","NPR_PRICES_ID","CAT_CEN_ID" FROM TEMP_BILL_KVIT_POSSIBLE
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_init.GetCurrUser;


--
-- V_TEMP_BILL_POS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_POS
(TERMINAL_NAME, OSUSER_NAME, NOM_DOK, BILL_POS_ID, VES, 
 CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, 
 SUMMA, PROD_ID_NPR)
AS 
SELECT
TEMP_BILL_POS."TERMINAL_NAME",TEMP_BILL_POS."OSUSER_NAME",TEMP_BILL_POS."NOM_DOK",TEMP_BILL_POS."BILL_POS_ID",TEMP_BILL_POS."VES",TEMP_BILL_POS."CENA_BN",TEMP_BILL_POS."CENA",TEMP_BILL_POS."SUMMA_BN",TEMP_BILL_POS."SUMMA_AKCIZ",TEMP_BILL_POS."SUMMA_NDS20",TEMP_BILL_POS."SUMMA",TEMP_BILL_POS."PROD_ID_NPR" FROM TEMP_BILL_POS
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_init.GetCurrUser;


--
-- V_TEMP_BILL_POS_SUM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_POS_SUM
(TERMINAL_NAME, OSUSER_NAME, NOM_DOK, BILL_POS_ID, VES, 
 CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, 
 SUMMA, PROD_ID_NPR)
AS 
SELECT
TERMINAL_NAME, OSUSER_NAME, NOM_DOK, BILL_POS_ID, SUM(VES) AS ves, 
 min(CENA_BN) AS cena_bn, min(CENA) as cena, SUM(SUMMA_BN) AS summa_bn, sum(SUMMA_AKCIZ) AS SUMMA_AKCIZ, sum(SUMMA_NDS20) as SUMMA_NDS20, 
 sum(SUMMA) as summa, min(PROD_ID_NPR) AS PROD_ID_NPR FROM TEMP_BILL_POS
WHERE TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_init.GetCurrUser
GROUP BY
TERMINAL_NAME, OSUSER_NAME, NOM_DOK, BILL_POS_ID;


--
-- V_TEMP_MREESTR_PARAMS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_MREESTR_PARAMS
(DATE_PLAN, DATETIME_REPORT)
AS 
SELECT TO_DATE(DATE_PLAN,'dd.mm.yyyy'),TO_DATE(TO_CHAR(END_DATE,'dd.mm.yyyy')||' '||SUBSTR(END_TIME,1,5),'dd.mm.yyyy hh24:mi') FROM V_MASTER_REPORTS
WHERE NLS_UPPER(REPORT_FILE)='MREESTRORA.XLS';


--
-- V_TEMP_MREESTR_SNP_PARAMS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_MREESTR_SNP_PARAMS
(DATE_PLAN, DATETIME_REPORT)
AS 
SELECT TO_DATE(DATE_PLAN,'dd.mm.yyyy'),TO_DATE(TO_CHAR(END_DATE,'dd.mm.yyyy')||' '||SUBSTR(END_TIME,1,5),'dd.mm.yyyy hh24:mi') FROM V_MASTER_REPORTS
WHERE NLS_UPPER(REPORT_FILE)='MREESTRSNP.XLS';


--
-- V_TEMP_PAYMENTS_PROD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_PAYMENTS_PROD
(PAYMENTS_ID, PROD_ID_NPR)
AS 
SELECT "PAYMENTS_ID","PROD_ID_NPR"
FROM TEMP_PAYMENTS_PROD
WHERE OSUSER_NAME=FOR_INIT.GetCurrUser
  AND TERMINAL_NAME=FOR_INIT.GetCurrTerm;


--
-- V_TEMP_PAYMENTS_TO_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_PAYMENTS_TO_BILLS
(PAYMENTS_ID, NOM_DOK)
AS 
SELECT "PAYMENTS_ID","NOM_DOK"
FROM TEMP_PAYMENTS_TO_BILLS
WHERE OSUSER_NAME=FOR_INIT.GetCurrUser
  AND TERMINAL_NAME=FOR_INIT.GetCurrTerm;


--
-- V_TEMPTABLE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMPTABLE
(ROW_ID, ID, APP_NAME, UNIT_NAME, TABLE_NAME, 
 NUM1, CHAR1, DATE1, NUM2, CHAR2, 
 DATE2, NUM3, CHAR3, DATE3, NUM4, 
 CHAR4, DATE4, NUM5, CHAR5, DATE5, 
 NUM6, CHAR6, DATE6, NUM7, CHAR7, 
 DATE7, NUM8, CHAR8, DATE8, NUM9, 
 CHAR9, DATE9, NUM10, CHAR10, DATE10)
AS 
SELECT
ROWID AS ROW_ID,ID, "APP_NAME","UNIT_NAME","VARI_NAME",
"NUM1","CHAR1","DATE1","NUM2","CHAR2","DATE2","NUM3","CHAR3","DATE3",
"NUM4","CHAR4","DATE4","NUM5","CHAR5","DATE5","NUM6","CHAR6","DATE6",
"NUM7","CHAR7","DATE7","NUM8","CHAR8","DATE8","NUM9","CHAR9","DATE9",
"NUM10","CHAR10","DATE10"
FROM TEMPVARI
WHERE VARI_TYPE IS NULL
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_TEMP_UNP_GARFIK_PARAMS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_UNP_GARFIK_PARAMS
(BEGIN_DATE, END_DATE, PROD_ID_NPR, PLAT_ID, DOG_NUMBER, 
 GRP_ID_NPR, FROM_GRP_ID, TO_GRP_ID)
AS 
SELECT
  r.BEGIN_DATE,
  r.END_DATE,
  r.PROD_ID_NPR,
  r.PLAT_ID,
  r.DOG_NUMBER,
  r.GRP_ID_NPR,
  (CASE WHEN GRP_ID_NPR='*' THEN '00000' ELSE GRP_ID_NPR END) as FROM_GRP_ID,
  (CASE WHEN GRP_ID_NPR IN ('10100','*') THEN '99999' ELSE GRP_ID_NPR END) as TO_GRP_ID
FROM V_MASTER_REPORTS r
WHERE NLS_UPPER(TRIM(r.REPORT_FILE))='UNP_GRAFIK_PLAT.XLS';


--
-- V_TEMPVARI  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMPVARI
(ID, APP_NAME, UNIT_NAME, VARI_TYPE, VARI_NAME, 
 VARI_NUM, VARI_CHAR, VARI_DATE)
AS 
SELECT
TEMPVARI.ID,"APP_NAME","UNIT_NAME","VARI_TYPE","VARI_NAME",
"NUM1","CHAR1","DATE1"
FROM TEMPVARI
WHERE VARI_TYPE IS NOT NULL
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_TEMP_VYP_GD_PARAMS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_VYP_GD_PARAMS
(BEGIN_DATE, END_DATE)
AS 
SELECT BEGIN_DATE,END_DATE FROM V_MASTER_REPORTS
WHERE NLS_UPPER(REPORT_FILE)='GD_VYP.XLS';


--
-- V_VALPASP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VALPASP
(PASP_ID, KODIF_ID, NORMTU, NORMTU_NUM, QUAL, 
 QUAL_NUM, NPP, SORTBY, NAME, DISPLAY_NAME, 
 FIELD_SVED, FIELD_TYPE, FIELD_LEN, FIELD_DEC)
AS 
SELECT /*+ RULE */
vv.PASP_ID,
vv.kodif_id,
vv.normtu,
vv.normtu_num,
vv.QUAL,
vv.QUAL_NUM,
vv.NPP,
vv.SORTBY,
vv.NAME,
DECODE(vv.NPP,0,'    ',TO_CHAR(vv.NPP)||'. ')||vv.NAME as DISPLAY_NAME,
vv.FIELD_SVED,
vv.FIELD_TYPE,
vv.FIELD_LEN,
vv.FIELD_DEC
FROM
(
SELECT
  v.PASP_ID,
  v.KODIF_ID,
  MAX(v.NPP) as NPP,
  MAX(v.SORTBY) as SORTBY,
  v.NAME,
  MAX(v.NORMTU) as NORMTU,
  MAX(v.NORMTU_NUM) as NORMTU_NUM,
  MAX(v.QUAL) as QUAL,
  MAX(v.QUAL_NUM) as QUAL_NUM,
  MAX(NLS_UPPER(v.FIELD_SVED)) as FIELD_SVED,
  MAX(NLS_UPPER(v.FIELD_TYPE)) as FIELD_TYPE,
  MAX(NLS_UPPER(v.FIELD_LEN)) as FIELD_LEN,
  MAX(NLS_UPPER(v.FIELD_DEC)) as FIELD_DEC
FROM
(
SELECT /*+ RULE */
  NULL as NPP,
  0 as SORTBY,
  a.PASP_ID,
  k.ID as KODIF_ID,
  k.NAME as NAME,
  NULL as NORMTU,
  0 as NORMTU_NUM,
  a.QUAL,
  ORA_CHAR_TO_NUM(a.QUAL) as QUAL_NUM,
  k.FIELD_TYPE,
  k.FIELD_LEN,
  k.FIELD_DEC,
  k.FIELD_SVED
FROM KLS_VALPASP a, kls_kodif k
WHERE a.KODIF_ID=k.id
UNION ALL
SELECT
  b.NPP,
  b.SORTBY,
  p.ID as PASP_ID,
  k.ID as KODIF_ID,
  k.NAME as NAME,
  b.NORMTU,
  ORA_CHAR_TO_NUM(b.NORMTU) as NORMTU_NUM,
  NULL as QUAL,
  0 as QUAL_NUM,
  k.FIELD_TYPE,
  k.FIELD_LEN,
  k.FIELD_DEC,
  k.FIELD_SVED
FROM KLS_PASP p, KLS_TABLPOK b, kls_kodif k
WHERE p.PROD_ID_NPR=b.PROD_ID_NPR
  and b.KODIF_ID=k.id
) v
GROUP BY
  v.PASP_ID,
  v.KODIF_ID,
  v.NAME
) vv;


--
-- V_VALPASP_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VALPASP_UNP
(PASP_ID, KODIF_ID, NORMTU, NORMTU_NUM, QUAL, 
 QUAL_NUM, NPP, SORTBY, NAME, DISPLAY_NAME, 
 FIELD_SVED, FIELD_TYPE, FIELD_LEN, FIELD_DEC)
AS 
SELECT /*+ RULE */
vv.PASP_ID,
vv.kodif_id,
vv.normtu,
vv.normtu_num,
vv.QUAL,
vv.QUAL_NUM,
vv.NPP,
vv.SORTBY,
vv.NAME,
DECODE(vv.NPP,0,'    ',TO_CHAR(vv.NPP)||'. ')||vv.NAME as DISPLAY_NAME,
vv.FIELD_SVED,
vv.FIELD_TYPE,
vv.FIELD_LEN,
vv.FIELD_DEC
FROM
(
SELECT
  v.PASP_ID,
  v.KODIF_ID,
  MAX(v.NPP) as NPP,
  MAX(v.SORTBY) as SORTBY,
  v.NAME,
  MAX(v.NORMTU) as NORMTU,
  MAX(v.NORMTU_NUM) as NORMTU_NUM,
  MAX(SUBSTR(v.QUAL,1,20)) as QUAL,
  MAX(v.QUAL_NUM) as QUAL_NUM,
  MAX(NLS_UPPER(v.FIELD_SVED)) as FIELD_SVED,
  MAX(NLS_UPPER(v.FIELD_TYPE)) as FIELD_TYPE,
  MAX(NLS_UPPER(v.FIELD_LEN)) as FIELD_LEN,
  MAX(NLS_UPPER(v.FIELD_DEC)) as FIELD_DEC
FROM
(
SELECT /*+ RULE */
  NULL as NPP,
  0 as SORTBY,
  a.ID_PASPORT as PASP_ID,
  NVL(k.ID,0) as KODIF_ID,
  NVL(k.NAME,sp.NAME_POKAZATEL) as NAME,
  NULL as NORMTU,
  0 as NORMTU_NUM,
  (CASE
     WHEN a.FACT_PASP IS NOT NULL THEN ORA_NUM_TO_CHAR(a.FACT_PASP)
	 ELSE a.TEXT_VAL
   END) as QUAL,
  (CASE
     WHEN a.FACT_PASP IS NOT NULL THEN a.FACT_PASP
     ELSE ORA_CHAR_TO_NUM(a.TEXT_VAL)
   END) as QUAL_NUM,
  k.FIELD_TYPE,
  k.FIELD_LEN,
  k.FIELD_DEC,
  k.FIELD_SVED
FROM UNP_FACT_PASP a, KLS_KODIF_PASP_UNP i, kls_kodif k, UNP_SPRAV_POKAZATEL sp
WHERE /*a.ID_PASPORT=TO_NUMBER(:PASP_ID)
  AND */a.KOD_POKAZATEL=sp.KOD_POKAZATEL
  AND a.KOD_POKAZATEL=i.KOD_POKAZATEL(+)
  and i.KODIF_ID=k.id(+)
UNION ALL
SELECT /*+ RULE */
  NULL as NPP,
  -1 as SORTBY,
  a.ID_PASPORT as PASP_ID,
  kk.ID as KODIF_ID,
  kk.NAME as NAME,
  NULL as NORMTU,
  0 as NORMTU_NUM,
  (CASE
     WHEN a.FACT_PASP IS NOT NULL THEN ORA_NUM_TO_CHAR(a.FACT_PASP/1000)
	 ELSE ORA_NUM_TO_CHAR(ORA_CHAR_TO_NUM(a.TEXT_VAL)/1000)
   END) as QUAL,
  (CASE
     WHEN a.FACT_PASP IS NOT NULL THEN a.FACT_PASP/1000
	 ELSE ORA_CHAR_TO_NUM(a.TEXT_VAL)/1000
   END) as QUAL_NUM,
  kk.FIELD_TYPE,
  kk.FIELD_LEN,
  kk.FIELD_DEC,
  kk.FIELD_SVED
FROM UNP_FACT_PASP a, KLS_KODIF_PASP_UNP i, kls_kodif k, kls_kodif kk, UNP_SPRAV_POKAZATEL sp
WHERE /*a.ID_PASPORT=TO_NUMBER(:PASP_ID)
  AND */a.KOD_POKAZATEL=sp.KOD_POKAZATEL
  and 1=kk.id
  AND a.KOD_POKAZATEL=i.KOD_POKAZATEL
  and i.KODIF_ID=k.id
  and k.FIELD_SVED='PL20_KG'

UNION ALL
SELECT /*+ RULE */
  NULL as NPP,
  -2 as SORTBY,
  a.ID_PASPORT as PASP_ID,
  kk.ID as KODIF_ID,
  kk.NAME as NAME,
  NULL as NORMTU,
  0 as NORMTU_NUM,
  (CASE
     WHEN a.FACT_PASP IS NOT NULL THEN ORA_NUM_TO_CHAR(a.FACT_PASP/1000)
	 ELSE ORA_NUM_TO_CHAR(ORA_CHAR_TO_NUM(a.TEXT_VAL)/1000)
   END) as QUAL,
  (CASE
     WHEN a.FACT_PASP IS NOT NULL THEN a.FACT_PASP/1000
	 ELSE ORA_CHAR_TO_NUM(a.TEXT_VAL)/1000
   END) as QUAL_NUM,
  kk.FIELD_TYPE,
  kk.FIELD_LEN,
  kk.FIELD_DEC,
  kk.FIELD_SVED
FROM UNP_FACT_PASP a, KLS_KODIF_PASP_UNP i, kls_kodif k, kls_kodif kk, UNP_SPRAV_POKAZATEL sp
WHERE /*a.ID_PASPORT=TO_NUMBER(:PASP_ID)
  AND */a.KOD_POKAZATEL=sp.KOD_POKAZATEL
  and 602=kk.id
  AND a.KOD_POKAZATEL=i.KOD_POKAZATEL
  and i.KODIF_ID=k.id
  and k.FIELD_SVED='PL15_KG'
UNION ALL
SELECT
  b.NOMER_PP as NPP,
  b.NOMER_PP*100+b.NOMER_INSIDE as SORTBY,
  p.ID_PASPORT as PASP_ID,
  k.ID as KODIF_ID,
  k.NAME as NAME,
  b.NORM_POKAZATEL as NORMTU,
  ORA_CHAR_TO_NUM(b.NORM_POKAZATEL) as NORMTU_NUM,
  NULL as QUAL,
  0 as QUAL_NUM,
  k.FIELD_TYPE,
  k.FIELD_LEN,
  k.FIELD_DEC,
  k.FIELD_SVED
FROM UNP_PASPORT p, UNP_NORM_PASP b, KLS_KODIF_PASP_UNP i, kls_kodif k
WHERE /*p.ID_PASPORT=TO_NUMBER(:PASP_ID)
  AND */p.KOD_OIL_PRODUCT=b.KOD_OIL_PRODUCT
  AND b.KOD_POKAZATEL=i.KOD_POKAZATEL
  and i.KODIF_ID=k.id
) v
GROUP BY
  v.PASP_ID,
  v.KODIF_ID,
  v.NAME
) vv;


--
-- V_XX101_PPKN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_XX101_PPKN
(NUMKVIT, DATEKVIT, PASSPORTNUM)
AS 
select distinct KVITNUM as numkvit, kvitdate as datekvit, passportnum
from XX101_ZKERP_DATA
where (transportkind = '03' or transportkind = '06')
and passportnum is not null
--and kvitdate is not null
and kvitdate between SYSDATE-4 and SYSDATE
--order by kvitdate  desc
;


--
-- V_ZAKAZ_GRAFIK_TEMP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_GRAFIK_TEMP
(TERMINAL_NAME, USER_NAME, DATE_LOAD, TONN_LOAD, CIST_LOAD)
AS 
SELECT "TERMINAL_NAME","USER_NAME","DATE_LOAD","TONN_LOAD","CIST_LOAD" FROM ZAKAZ_GRAFIK_TEMP 
WHERE TERMINAL_NAME=For_Init.GetCurrTerm 
AND USER_NAME=For_Init.GetCurrUser;


--
-- V_ZAKAZ_TEMP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_TEMP
(TERMINAL_NAME, USER_NAME, IS_AGENT, KIND_VALUE, FILIAL_ID, 
 PROD_ID_NPR, PARUS_NOMEN_TAG, PLAT_ID, PARUS_AGENT_TAG, DOG_ID, 
 PARUS_DOGOVOR, PROD_NAME, PLAN_NB, PLAN_AZS, PLAN_TRAN, 
 PLAN_VNCORPTR, PLAN_OTHER, PLAN_PROD, PLAN_DOG, ZAYV_ALL_PROD, 
 ZAYV_ACCEPT_PROD, ZAYV_FACT_PROD, ZAYV_ALL_PLAT, ZAYV_ACCEPT_PLAT, ZAYV_FACT_PLAT, 
 ZAYV_ALL_DOG, ZAYV_ACCEPT_DOG, ZAYV_FACT_DOG, SALDO)
AS 
SELECT "TERMINAL_NAME","USER_NAME","IS_AGENT","KIND_VALUE","FILIAL_ID","PROD_ID_NPR","PARUS_NOMEN_TAG","PLAT_ID","PARUS_AGENT_TAG","DOG_ID","PARUS_DOGOVOR","PROD_NAME","PLAN_NB","PLAN_AZS","PLAN_TRAN","PLAN_VNCORPTR","PLAN_OTHER","PLAN_PROD","PLAN_DOG","ZAYV_ALL_PROD","ZAYV_ACCEPT_PROD","ZAYV_FACT_PROD","ZAYV_ALL_PLAT","ZAYV_ACCEPT_PLAT","ZAYV_FACT_PLAT","ZAYV_ALL_DOG","ZAYV_ACCEPT_DOG","ZAYV_FACT_DOG","SALDO" FROM ZAKAZ_TEMP 
WHERE TERMINAL_NAME=For_Init.GetCurrTerm 
AND USER_NAME=For_Init.GetCurrUser;


--
-- XX101_ZKERP_PENDING_ACTION  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.XX101_ZKERP_PENDING_ACTION
(FILENAME, PARSEDATETIME, PROPAGATESTATUS, FILEROWNUM, WAYBILLID, 
 WAYBILLROWID, TRANSPORTKIND, SHIPMENTDATE, SHIPMENTTIME, TRANSPORTNUM, 
 OWNERSHIPTYPE, OWNER, AXESCOUNT, TRANSPORTTYPECODE, TRANSPORTTYPE, 
 PRODUCTCODE, PRODUCTNAME, PASSPORTNUM, FILLINGHEIGHT, DENSITYFACT, 
 DENSITYONSTANDARTTEMP, STANDARTTEMP, TEMPOFFILLING, PUREWEIGHT, TOTALWEIGHT, 
 REESTRNUM, STATE, DELIVERYDIRECTION, KVITNUM, KVITDATE, 
 PACKINGITEMCOUNT, PACKINGITEMWEIGHT, TAREWEIGHTFORPACKING, ACTIONCODE, DEPOT, 
 ORDERCODE, TARIFF, TAREVAGONWEIGHT, SEAL1, SEAL2, 
 TTNSAMPLECODE, WARRANTNUM, WARRANTDATE, DRIVERFIO, VAGONTONNAGE, 
 GUARDPAYMENT, PRODUCTVOLUME, PANCOUNT, PANWEIGHT, PACKINGKIND, 
 TRANSPORTUNITTYPE, WEIGHTEVALUATEMETHOD)
AS 
SELECT /*+ ORDERED */ C.* 
      FROM XX101_ZKERP_DATA C JOIN  
    (SELECT A.FILENAME,max(A.FILEROWNUM) as FILEROWNUM FROM XX101_ZKERP_DATA A 
           JOIN (SELECT WAYBILLID,WAYBILLROWID,MAX(FILENAME) AS FILENAME FROM XX101_ZKERP_DATA 
                       GROUP BY WAYBILLID,WAYBILLROWID) B
           ON A.WAYBILLID=B.WAYBILLID  AND A.WAYBILLROWID=B.WAYBILLROWID AND A.FILENAME=B.FILENAME
     GROUP BY A.WAYBILLID,A.WAYBILLROWID,A.FILENAME) D
     ON C.FILENAME=D.FILENAME AND C.FILEROWNUM=D.FILEROWNUM
     WHERE C.PROPAGATESTATUS IS NULL;


--
-- XX101_ZVZAV_PENDING_ACTION  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.XX101_ZVZAV_PENDING_ACTION
(FILENAME, PARSEDATETIME, FILEROWNUM, PROPAGATESTATUS, ORDERNUM, 
 ACTIONCODE)
AS 
SELECT C.FILENAME,C.PARSEDATETIME,C.FILEROWNUM,C.PROPAGATESTATUS,C.ORDERNUM,C.ACTIONCODE 
     FROM XX101_ZVZAV_DATA C JOIN  
     (SELECT A.ORDERNUM,A.FILENAME,max(A.FILEROWNUM) as FILEROWNUM FROM XX101_ZVZAV_DATA A 
           JOIN 
          (SELECT ORDERNUM,MAX(FILENAME) AS FILENAME FROM XX101_ZVZAV_DATA GROUP BY ORDERNUM) B
           ON A.ORDERNUM=B.ORDERNUM AND A.FILENAME=B.FILENAME
     GROUP BY A.ORDERNUM,A.FILENAME) D
     ON C.FILENAME=D.FILENAME AND C.FILEROWNUM=D.FILEROWNUM 
     WHERE C.PROPAGATESTATUS IS NULL;


--
-- MOVEPROD_BI  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.MOVEPROD_BI
BEFORE INSERT
ON MASTER.MOVEPROD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.moveprod_id is NULL or :NEW.moveprod_id=0 then
   Select seq_moveprod.NextVal into tmpVar from dual;
   :NEW.moveprod_id := tmpVar;
end if;
END;
/


--
-- OIL_GRAFIK_BINS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.OIL_GRAFIK_BINS
BEFORE INSERT
ON MASTER.OIL_GRAFIK
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.kod is NULL or :NEW.kod=0 then
   Select seq_plan_refinery.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END;
/


--
-- OIL_QUALITY_BIU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.OIL_QUALITY_BIU
BEFORE INSERT
ON MASTER.OIL_QUALITY
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.OIL_QUALITY_ID is NULL or :NEW.OIL_QUALITY_ID=0 then
   Select seq_plan_refinery.NextVal into tmpVar from dual;
   :NEW.OIL_QUALITY_ID := tmpVar;
end if;
END;
/


--
-- OIL_TRACE_BINS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.OIL_TRACE_BINS
BEFORE INSERT
ON MASTER.OIL_TRACE
FOR EACH ROW
declare
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.kod is NULL or :NEW.kod=0 then
   Select seq_plan_refinery.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END;
/


--
-- REESTR_RAIL_BIU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.REESTR_RAIL_BIU
BEFORE INSERT OR UPDATE
ON MASTER.REESTR_RAIL
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.reestr_rail_id is NULL or :NEW.reestr_rail_id=0 then
   Select SEQ_REESTR_RAIL.NextVal into tmpVar from dual;
   :NEW.reestr_rail_id := tmpVar;
end if;
END;
/


--
-- REESTR_RAIL_DOP_SF_BIU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.REESTR_RAIL_DOP_SF_BIU
BEFORE INSERT OR UPDATE
ON MASTER.REESTR_RAIL_DOP_SF
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.REESTR_RAIL_DOP_SF_ID is NULL or :NEW.REESTR_RAIL_DOP_SF_ID=0 then
   Select SEQ_REESTR_RAIL.NextVal into tmpVar from dual;
   :NEW.REESTR_RAIL_DOP_SF_ID := tmpVar;
end if;
END;
/


--
-- REESTR_RAIL_RGD_SF_BIU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.REESTR_RAIL_RGD_SF_BIU
BEFORE INSERT OR UPDATE
ON MASTER.REESTR_RAIL_RGD_SF
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.REESTR_RAIL_RGD_SF_ID is NULL or :NEW.REESTR_RAIL_RGD_SF_ID=0 then
   Select SEQ_REESTR_RAIL.NextVal into tmpVar from dual;
   :NEW.REESTR_RAIL_RGD_SF_ID := tmpVar;
end if;
END;
/


--
-- REESTR_RAIL_SF_BIU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.REESTR_RAIL_SF_BIU
BEFORE INSERT OR UPDATE
ON MASTER.REESTR_RAIL_SF
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.REESTR_RAIL_SF_iD is NULL or :NEW.REESTR_RAIL_SF_iD=0 then
   Select SEQ_REESTR_RAIL.NextVal into tmpVar from dual;
   :NEW.REESTR_RAIL_SF_iD := tmpVar;
end if;
END;
/


--
-- SF_NUMBERS_BI  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.SF_NUMBERS_BI
BEFORE INSERT
ON MASTER.SF_NUMBERS
FOR EACH ROW
DECLARE
BEGIN
  SELECT MAX(to_date) INTO :NEW.From_Date FROM SF_Numbers;
  SELECT Start_Num+Range,Range
    INTO :NEW.Start_Num,:NEW.Range
	FROM SF_Numbers WHERE to_date=:NEW.From_Date;
  :NEW.From_Date:=:NEW.From_Date+1;
  IF TO_CHAR(:NEW.From_Date,'DD')>='25' THEN
    :NEW.To_date:=LAST_DAY(:NEW.From_Date);
  ELSE
    :NEW.To_date:=:NEW.From_Date+4;
  END IF;
  :NEW.Curr_Num:=:NEW.Start_Num;
END SF_NUMBERS_BI;
/


--
-- SF_NUMBERS_BU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.SF_NUMBERS_BU
BEFORE UPDATE
ON MASTER.SF_NUMBERS
FOR EACH ROW
DECLARE
Last_Date DATE;
BEGIN

  IF (:NEW.From_Date<>:OLD.From_Date) OR
     (:NEW.To_Date<>:OLD.To_Date) THEN
    RAISE_APPLICATION_ERROR(-20000, 'Изменение дат запрещено!');
  END IF;
  IF (:NEW.Start_Num<>:OLD.Start_Num) THEN
    RAISE_APPLICATION_ERROR(-20000, 'Изменение стартовых номеров запрещено!');
  END IF;
  IF (:NEW.Start_Num+:NEW.Range<=:NEW.Curr_num) THEN
    RAISE_APPLICATION_ERROR(-20000, 'Закончился резерв номеров СФ!, Sorry');
  END IF;
  IF (:NEW.Range<>:OLD.Range) THEN
--    SELECT MAX(From_Date) INTO Last_Date FROM SF_NUmbers;
--	IF Last_Date>:NEW.From_Date THEN
--      RAISE_APPLICATION_ERROR(-20000, 'Изменение диапазона запрещено!');
--	END IF;
    IF :OLD.Start_num+:NEW.Range-:OLD.Curr_Num<0 THEN
      RAISE_APPLICATION_ERROR(-20000, 'Изменение диапазона запрещено! Значение диапазона менее, чем значение выставленных СФ.');
	END IF;
  END IF;

END SF_NUMBERS_BU;
/


--
-- T_DEL_ISU_BILL_POS_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_DEL_ISU_BILL_POS_ROW
AFTER DELETE
ON MASTER.ISU_BILLS
FOR EACH ROW
DECLARE
tmpVar VARCHAR2(10);
BEGIN
  	 
	 tmpVar := :OLD.ISU_KOD; 
	 
   	 DELETE FROM ISU_BILL_POS WHERE SUBSTR(ISU_KOD_POS,1,10)=tmpVar;
   	 DELETE FROM ISU_BILL_POS_ROW WHERE ISU_KOD=tmpVar;

END T_DEL_ISU_BILL_POS_ROW;
/


--
-- TEMP_BILL_KVIT_BIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TEMP_BILL_KVIT_BIR
BEFORE INSERT
ON MASTER.TEMP_BILL_KVIT
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TEMP_BILL_KVIT_BIR
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        07.07.2003             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TEMP_BILL_KVIT_BIR
      Sysdate:         07.07.2003
      Date and Time:   07.07.2003, 11:32:47, and 07.07.2003 11:32:47
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      TEMP_BILL_KVIT (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END TEMP_BILL_KVIT_BIR;
/


--
-- TEMP_BILL_KVIT_POSSIBLE_BIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TEMP_BILL_KVIT_POSSIBLE_BIR
BEFORE INSERT
ON MASTER.TEMP_BILL_KVIT_POSSIBLE
FOR EACH ROW
DECLARE
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END TEMP_BILL_KVIT_POSSIBLE_BIR;
/


--
-- TEMP_BILL_POS_BIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TEMP_BILL_POS_BIR
BEFORE INSERT
ON MASTER.TEMP_BILL_POS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END TEMP_BILL_KVIT_BIR;
/


--
-- TEMP_REESTR_PARAMS_BIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TEMP_REESTR_PARAMS_BIR
BEFORE INSERT
ON MASTER.TEMP_REESTR_PARAMS
FOR EACH ROW
DECLARE
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END TEMP_REESTR_PARAMS_BIR;
/


--
-- T_GU12_A_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GU12_A_ID
BEFORE INSERT OR UPDATE
ON MASTER.GU12_A 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
   :new.NOM_Z:=TRIM(:new.NOM_Z);

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_gu12_a.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GU12_A_ID;
/


--
-- T_GU12_A_ID_TEST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GU12_A_ID_TEST
BEFORE INSERT
ON MASTER.GU12_A_TEST
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0 THEN
      
	  SELECT seq_gu12_a_test.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GU12_A_ID_TEST;
/


--
-- T_GU12_B_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GU12_B_ID
BEFORE INSERT
ON MASTER.GU12_B
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_gu12_B.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GU12_B_ID;
/


--
-- T_GU12_B_ID_TEST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GU12_B_ID_TEST
BEFORE INSERT
ON MASTER.GU12_B_TEST
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_gu12_B_TEST.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GU12_B_ID_TEST;
/


--
-- T_GU12_BR_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GU12_BR_ID
BEFORE INSERT
ON MASTER.GU12_BR
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_gu12_b.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GU12_BR_ID;
/


--
-- T_GU12_BR_ID_TEST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GU12_BR_ID_TEST
BEFORE INSERT
ON MASTER.GU12_BR_TEST
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_gu12_B_TEST.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GU12_BR_ID_TEST;
/


--
-- T_PARUS_FIN_BINSERT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_PARUS_FIN_BINSERT
BEFORE INSERT OR UPDATE
ON MASTER.PARUS_FIN
FOR EACH ROW
DECLARE
   tmpvar   NUMBER;
BEGIN
   tmpvar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_plan_refinery.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;
END t_parus_fin_binsert;
/


--
-- TR_BI_REESTR_TEMP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TR_BI_REESTR_TEMP
BEFORE INSERT
ON MASTER.REESTR_TEMP
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.REESTR_temp_iD is NULL or :NEW.REESTR_temp_iD=0 then
   Select SEQ_REESTR_RAIL.NextVal into tmpVar from dual;
   :NEW.REESTR_temp_iD := tmpVar;
end if;
END;
/


--
-- TRG_AIUDR_ENVIRONMENT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_ENVIRONMENT
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.ENVIRONMENT
FOR EACH ROW
DECLARE
  v_old ENVIRONMENT%ROWTYPE;
  v_new ENVIRONMENT%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.ENV_NAME := :OLD.ENV_NAME;
    v_old.ENV_VALUE := :OLD.ENV_VALUE;
    v_old.ENV_COMMENT := :OLD.ENV_COMMENT;
    v_old.SOURCESQL := :OLD.SOURCESQL;
    v_old.ENV_TYPES_ID := :OLD.ENV_TYPES_ID;
    v_old.ENV_GRP_ID := :OLD.ENV_GRP_ID;
    v_old.MASTER_ID := :OLD.MASTER_ID;
    v_old.NETUSER := :OLD.NETUSER;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.ENV_NAME := :NEW.ENV_NAME;
    v_new.ENV_VALUE := :NEW.ENV_VALUE;
    v_new.ENV_COMMENT := :NEW.ENV_COMMENT;
    v_new.SOURCESQL := :NEW.SOURCESQL;
    v_new.ENV_TYPES_ID := :NEW.ENV_TYPES_ID;
    v_new.ENV_GRP_ID := :NEW.ENV_GRP_ID;
    v_new.MASTER_ID := :NEW.MASTER_ID;
    v_new.NETUSER := :NEW.NETUSER;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_ENVIRONMENT_GRP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_ENVIRONMENT_GRP
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.ENVIRONMENT_GRP
FOR EACH ROW
DECLARE
  v_old ENVIRONMENT_GRP%ROWTYPE;
  v_new ENVIRONMENT_GRP%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.GRP_NAME := :OLD.GRP_NAME;
    v_old.GRP_COMMENT := :OLD.GRP_COMMENT;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.GRP_NAME := :NEW.GRP_NAME;
    v_new.GRP_COMMENT := :NEW.GRP_COMMENT;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_GU12_A  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_GU12_A
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.GU12_A
FOR EACH ROW
DECLARE
  v_old GU12_A%ROWTYPE;
  v_new GU12_A%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NOM_Z := :OLD.NOM_Z;
    v_old.FROM_DATE := :OLD.FROM_DATE;
    v_old.TO_DATE := :OLD.TO_DATE;
    v_old.SOGL_DATE := :OLD.SOGL_DATE;
    v_old.REG_DATE := :OLD.REG_DATE;
    v_old.DOGOVOR := :OLD.DOGOVOR;
    v_old.STANOTPR_ID := :OLD.STANOTPR_ID;
    v_old.GROTP_ID := :OLD.GROTP_ID;
    v_old.EXPED_ID := :OLD.EXPED_ID;
    v_old.GR_GRUZ_ID := :OLD.GR_GRUZ_ID;
    v_old.VIDSOOB_ID := :OLD.VIDSOOB_ID;
    v_old.PODACH_ID := :OLD.PODACH_ID;
    v_old.SOGL := :OLD.SOGL;
    v_old.PLATTAR_ID := :OLD.PLATTAR_ID;
    v_old.PROD_ID := :OLD.PROD_ID;
    v_old.PRIZNOTPR_ID := :OLD.PRIZNOTPR_ID;
    v_old.VLADPUT_ID := :OLD.VLADPUT_ID;
    v_old.RODVAG_ID := :OLD.RODVAG_ID;
    v_old.ID_NOSOGL := :OLD.ID_NOSOGL;
    v_old.FOX_KOD := :OLD.FOX_KOD;
    v_old.ISCOR := :OLD.ISCOR;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Добавить в теневую таблицы
    INSERT INTO MASTER_SHADOW.GU12_A_DELETED
     (ID,NOM_Z,FROM_DATE,TO_DATE,SOGL_DATE,REG_DATE,DOGOVOR,STANOTPR_ID,GROTP_ID,EXPED_ID,GR_GRUZ_ID,VIDSOOB_ID,PODACH_ID,SOGL,PLATTAR_ID,PROD_ID,PRIZNOTPR_ID,VLADPUT_ID,RODVAG_ID,ID_NOSOGL,FOX_KOD,ISCOR)
    VALUES
     (v_old.ID,v_old.NOM_Z,v_old.FROM_DATE,v_old.TO_DATE,v_old.SOGL_DATE,v_old.REG_DATE,v_old.DOGOVOR,v_old.STANOTPR_ID,v_old.GROTP_ID,v_old.EXPED_ID,v_old.GR_GRUZ_ID,v_old.VIDSOOB_ID,v_old.PODACH_ID,v_old.SOGL,v_old.PLATTAR_ID,v_old.PROD_ID,v_old.PRIZNOTPR_ID,v_old.VLADPUT_ID,v_old.RODVAG_ID,v_old.ID_NOSOGL,v_old.FOX_KOD,v_old.ISCOR);

    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
        SELECT LogId,'GU12_A',TO_CHAR(V_OLD.ID),osuser,terminal,SUBSTR(MODULE,1,20),'D',EMPTY_CLOB()
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

      SELECT WhatWasDone INTO cl_WhatWasDone
        FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
       WHERE ID = LogId
         FOR UPDATE;

      WritePos:=1;

      -- Допишем альтернативный ключ
      WriteStr:='Заявка № ' || (V_OLD.NOM_Z) || ' от ' || TO_CHAR(V_OLD.FROM_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NOM_Z := :NEW.NOM_Z;
    v_new.FROM_DATE := :NEW.FROM_DATE;
    v_new.TO_DATE := :NEW.TO_DATE;
    v_new.SOGL_DATE := :NEW.SOGL_DATE;
    v_new.REG_DATE := :NEW.REG_DATE;
    v_new.DOGOVOR := :NEW.DOGOVOR;
    v_new.STANOTPR_ID := :NEW.STANOTPR_ID;
    v_new.GROTP_ID := :NEW.GROTP_ID;
    v_new.EXPED_ID := :NEW.EXPED_ID;
    v_new.GR_GRUZ_ID := :NEW.GR_GRUZ_ID;
    v_new.VIDSOOB_ID := :NEW.VIDSOOB_ID;
    v_new.PODACH_ID := :NEW.PODACH_ID;
    v_new.SOGL := :NEW.SOGL;
    v_new.PLATTAR_ID := :NEW.PLATTAR_ID;
    v_new.PROD_ID := :NEW.PROD_ID;
    v_new.PRIZNOTPR_ID := :NEW.PRIZNOTPR_ID;
    v_new.VLADPUT_ID := :NEW.VLADPUT_ID;
    v_new.RODVAG_ID := :NEW.RODVAG_ID;
    v_new.ID_NOSOGL := :NEW.ID_NOSOGL;
    v_new.FOX_KOD := :NEW.FOX_KOD;
    v_new.ISCOR := :NEW.ISCOR;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'GU12_A',TO_CHAR(V_OLD.ID),osuser,terminal,SUBSTR(MODULE,1,20),'D',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

		  -- Допишем альтернативный ключ
          WriteStr:='Заявка № ' || (V_OLD.NOM_Z) || ' от ' || TO_CHAR(V_OLD.FROM_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
          dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
          WritePos:=WritePos+LENGTH(WriteStr);
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'GU12_A',TO_CHAR(V_NEW.ID),osuser,terminal,SUBSTR(MODULE,1,20),'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'GU12_A',TO_CHAR(V_NEW.ID),osuser,terminal,SUBSTR(MODULE,1,20),'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_Z||' '<>V_NEW.NOM_Z||' ' THEN
            WriteStr:=':OLD.NOM_Z=' || (V_OLD.NOM_Z) || ' :NEW.NOM_Z=' || (V_NEW.NOM_Z) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.FROM_DATE,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(V_NEW.FROM_DATE,TO_DATE('01.01.1900','dd.mm.yyyy')) THEN
            WriteStr:=':OLD.FROM_DATE=' || TO_CHAR(V_OLD.FROM_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.FROM_DATE=' || TO_CHAR(V_NEW.FROM_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.TO_DATE,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(V_NEW.TO_DATE,TO_DATE('01.01.1900','dd.mm.yyyy')) THEN
            WriteStr:=':OLD.TO_DATE=' || TO_CHAR(V_OLD.TO_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.TO_DATE=' || TO_CHAR(V_NEW.TO_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.SOGL_DATE,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(V_NEW.SOGL_DATE,TO_DATE('01.01.1900','dd.mm.yyyy')) THEN
            WriteStr:=':OLD.SOGL_DATE=' || TO_CHAR(V_OLD.SOGL_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.SOGL_DATE=' || TO_CHAR(V_NEW.SOGL_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.REG_DATE,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(V_NEW.REG_DATE,TO_DATE('01.01.1900','dd.mm.yyyy')) THEN
            WriteStr:=':OLD.REG_DATE=' || TO_CHAR(V_OLD.REG_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.REG_DATE=' || TO_CHAR(V_NEW.REG_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOGOVOR||' '<>V_NEW.DOGOVOR||' ' THEN
            WriteStr:=':OLD.DOGOVOR=' || (V_OLD.DOGOVOR) || ' :NEW.DOGOVOR=' || (V_NEW.DOGOVOR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.STANOTPR_ID,0)<>NVL(V_NEW.STANOTPR_ID,0) THEN
            WriteStr:=':OLD.STANOTPR_ID=' || TO_CHAR(V_OLD.STANOTPR_ID) || ' :NEW.STANOTPR_ID=' || TO_CHAR(V_NEW.STANOTPR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.GROTP_ID,0)<>NVL(V_NEW.GROTP_ID,0) THEN
            WriteStr:=':OLD.GROTP_ID=' || TO_CHAR(V_OLD.GROTP_ID) || ' :NEW.GROTP_ID=' || TO_CHAR(V_NEW.GROTP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.EXPED_ID,0)<>NVL(V_NEW.EXPED_ID,0) THEN
            WriteStr:=':OLD.EXPED_ID=' || TO_CHAR(V_OLD.EXPED_ID) || ' :NEW.EXPED_ID=' || TO_CHAR(V_NEW.EXPED_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.GR_GRUZ_ID,0)<>NVL(V_NEW.GR_GRUZ_ID,0) THEN
            WriteStr:=':OLD.GR_GRUZ_ID=' || TO_CHAR(V_OLD.GR_GRUZ_ID) || ' :NEW.GR_GRUZ_ID=' || TO_CHAR(V_NEW.GR_GRUZ_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.VIDSOOB_ID,0)<>NVL(V_NEW.VIDSOOB_ID,0) THEN
            WriteStr:=':OLD.VIDSOOB_ID=' || TO_CHAR(V_OLD.VIDSOOB_ID) || ' :NEW.VIDSOOB_ID=' || TO_CHAR(V_NEW.VIDSOOB_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.PODACH_ID,0)<>NVL(V_NEW.PODACH_ID,0) THEN
            WriteStr:=':OLD.PODACH_ID=' || TO_CHAR(V_OLD.PODACH_ID) || ' :NEW.PODACH_ID=' || TO_CHAR(V_NEW.PODACH_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.SOGL,0)<>NVL(V_NEW.SOGL,0) THEN
            WriteStr:=':OLD.SOGL=' || TO_CHAR(V_OLD.SOGL) || ' :NEW.SOGL=' || TO_CHAR(V_NEW.SOGL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.PLATTAR_ID,0)<>NVL(V_NEW.PLATTAR_ID,0) THEN
            WriteStr:=':OLD.PLATTAR_ID=' || TO_CHAR(V_OLD.PLATTAR_ID) || ' :NEW.PLATTAR_ID=' || TO_CHAR(V_NEW.PLATTAR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.PROD_ID,0)<>NVL(V_NEW.PROD_ID,0) THEN
            WriteStr:=':OLD.PROD_ID=' || TO_CHAR(V_OLD.PROD_ID) || ' :NEW.PROD_ID=' || TO_CHAR(V_NEW.PROD_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.PRIZNOTPR_ID,0)<>NVL(V_NEW.PRIZNOTPR_ID,0) THEN
            WriteStr:=':OLD.PRIZNOTPR_ID=' || TO_CHAR(V_OLD.PRIZNOTPR_ID) || ' :NEW.PRIZNOTPR_ID=' || TO_CHAR(V_NEW.PRIZNOTPR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.VLADPUT_ID,0)<>NVL(V_NEW.VLADPUT_ID,0) THEN
            WriteStr:=':OLD.VLADPUT_ID=' || TO_CHAR(V_OLD.VLADPUT_ID) || ' :NEW.VLADPUT_ID=' || TO_CHAR(V_NEW.VLADPUT_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.RODVAG_ID,0)<>NVL(V_NEW.RODVAG_ID,0) THEN
            WriteStr:=':OLD.RODVAG_ID=' || TO_CHAR(V_OLD.RODVAG_ID) || ' :NEW.RODVAG_ID=' || TO_CHAR(V_NEW.RODVAG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.ID_NOSOGL,0)<>NVL(V_NEW.ID_NOSOGL,0) THEN
            WriteStr:=':OLD.ID_NOSOGL=' || TO_CHAR(V_OLD.ID_NOSOGL) || ' :NEW.ID_NOSOGL=' || TO_CHAR(V_NEW.ID_NOSOGL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FOX_KOD<>V_NEW.FOX_KOD THEN
            WriteStr:=':OLD.FOX_KOD=' || (V_OLD.FOX_KOD) || ' :NEW.FOX_KOD=' || (V_NEW.FOX_KOD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.ISCOR,0)<>NVL(V_NEW.ISCOR,0) THEN
            WriteStr:=':OLD.ISCOR=' || TO_CHAR(V_OLD.ISCOR) || ' :NEW.ISCOR=' || TO_CHAR(V_NEW.ISCOR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'GU12_A',TO_CHAR(V_NEW.ID),osuser,terminal,SUBSTR(MODULE,1,20),'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_GU12_BR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_GU12_BR
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.GU12_BR
FOR EACH ROW
DECLARE
  v_old GU12_BR%ROWTYPE;
  v_new GU12_BR%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.ID_B := :OLD.ID_B;
    v_old.DATE_R := :OLD.DATE_R;
    v_old.KOL_VAG := :OLD.KOL_VAG;
    v_old.VES := :OLD.VES;
    v_old.ID_NPR := :OLD.ID_NPR;
    v_old.METKA := :OLD.METKA;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Добавление в теневую таблицу
    INSERT INTO MASTER_SHADOW.GU12_BR_DELETED
        (ID,ID_B,DATE_R,KOL_VAG,VES,ID_NPR,METKA)
        VALUES
        (v_old.ID,v_old.ID_B,v_old.DATE_R,v_old.KOL_VAG,v_old.VES,v_old.ID_NPR,v_old.METKA);
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
        SELECT LogId,'GU12_BR',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D',EMPTY_CLOB()
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

      SELECT WhatWasDone INTO cl_WhatWasDone
        FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
       WHERE ID = LogId
         FOR UPDATE;

      WritePos:=1;
      WriteStr:='ID_B=' || TO_CHAR(V_OLD.ID_B) || ' DATE_R=' || TO_CHAR(V_OLD.DATE_R,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.ID_B := :NEW.ID_B;
    v_new.DATE_R := :NEW.DATE_R;
    v_new.KOL_VAG := :NEW.KOL_VAG;
    v_new.VES := :NEW.VES;
    v_new.ID_NPR := :NEW.ID_NPR;
    v_new.METKA := :NEW.METKA;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'GU12_BR',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
           FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
           WHERE ID = LogId
             FOR UPDATE;

          WritePos:=1;
          WriteStr:='ID_B=' || TO_CHAR(V_OLD.ID_B) || ' DATE_R=' || TO_CHAR(V_OLD.DATE_R,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
          dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
          WritePos:=WritePos+LENGTH(WriteStr);
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'GU12_BR',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'GU12_BR',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ID_B<>V_NEW.ID_B THEN
            WriteStr:=':OLD.ID_B=' || TO_CHAR(V_OLD.ID_B) || ' :NEW.ID_B=' || TO_CHAR(V_NEW.ID_B) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_R<>V_NEW.DATE_R THEN
            WriteStr:=':OLD.DATE_R=' || TO_CHAR(V_OLD.DATE_R,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_R=' || TO_CHAR(V_NEW.DATE_R,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.KOL_VAG,0)<>NVL(V_NEW.KOL_VAG,0) THEN
            WriteStr:=':OLD.KOL_VAG=' || TO_CHAR(V_OLD.KOL_VAG) || ' :NEW.KOL_VAG=' || TO_CHAR(V_NEW.KOL_VAG) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.VES,0)<>NVL(V_NEW.VES,0) THEN
            WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ID_NPR||' '<>V_NEW.ID_NPR||' ' THEN
            WriteStr:=':OLD.ID_NPR=' || (V_OLD.ID_NPR) || ' :NEW.ID_NPR=' || (V_NEW.ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.METKA<>V_NEW.METKA THEN
            WriteStr:=':OLD.METKA=' || TO_CHAR(V_OLD.METKA) || ' :NEW.METKA=' || TO_CHAR(V_NEW.METKA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'GU12_BR',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_KLS_CAT_CEN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_CAT_CEN
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.KLS_CAT_CEN
FOR EACH ROW
DECLARE
  v_old KLS_CAT_CEN%ROWTYPE;
  v_new KLS_CAT_CEN%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.CAT_CEN_NAME := :OLD.CAT_CEN_NAME;
    v_old.GROUPDOG_ID := :OLD.GROUPDOG_ID;
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.CAT_CEN_GROUP_ID := :OLD.CAT_CEN_GROUP_ID;
    v_old.FOX_ID := :OLD.FOX_ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.For_Azc := :OLD.For_Azc;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'KLS_CAT_CEN',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.CAT_CEN_NAME := :NEW.CAT_CEN_NAME;
    v_new.GROUPDOG_ID := :NEW.GROUPDOG_ID;
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.CAT_CEN_GROUP_ID := :NEW.CAT_CEN_GROUP_ID;
    v_new.FOX_ID := :NEW.FOX_ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.For_Azc := :NEW.For_Azc;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'KLS_CAT_CEN',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'KLS_CAT_CEN',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'KLS_CAT_CEN',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CAT_CEN_NAME<>V_NEW.CAT_CEN_NAME THEN
            WriteStr:=':OLD.CAT_CEN_NAME=' || (V_OLD.CAT_CEN_NAME) || ' :NEW.CAT_CEN_NAME=' || (V_NEW.CAT_CEN_NAME) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GROUPDOG_ID<>V_NEW.GROUPDOG_ID THEN
            WriteStr:=':OLD.GROUPDOG_ID=' || TO_CHAR(V_OLD.GROUPDOG_ID) || ' :NEW.GROUPDOG_ID=' || TO_CHAR(V_NEW.GROUPDOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PREDPR_ID<>V_NEW.PREDPR_ID THEN
            WriteStr:=':OLD.PREDPR_ID=' || TO_CHAR(V_OLD.PREDPR_ID) || ' :NEW.PREDPR_ID=' || TO_CHAR(V_NEW.PREDPR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CAT_CEN_GROUP_ID<>V_NEW.CAT_CEN_GROUP_ID THEN
            WriteStr:=':OLD.CAT_CEN_GROUP_ID=' || TO_CHAR(V_OLD.CAT_CEN_GROUP_ID) || ' :NEW.CAT_CEN_GROUP_ID=' || TO_CHAR(V_NEW.CAT_CEN_GROUP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FOX_ID<>V_NEW.FOX_ID THEN
            WriteStr:=':OLD.FOX_ID=' || TO_CHAR(V_OLD.FOX_ID) || ' :NEW.FOX_ID=' || TO_CHAR(V_NEW.FOX_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOG_ID<>V_NEW.DOG_ID THEN
            WriteStr:=':OLD.DOG_ID=' || TO_CHAR(V_OLD.DOG_ID) || ' :NEW.DOG_ID=' || TO_CHAR(V_NEW.DOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.For_Azc<>V_NEW.For_Azc THEN
            WriteStr:=':OLD.FOR_AZC=' || (V_OLD.For_Azc) || ' :NEW.FOR_AZC=' || (V_NEW.For_Azc) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'KLS_CAT_CEN',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_KLS_PLAN_KIND  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_PLAN_KIND
AFTER INSERT OR DELETE OR UPDATE OF ID, NAME
ON MASTER.KLS_PLAN_KIND
FOR EACH ROW
DECLARE
  v_old KLS_PLAN_KIND%ROWTYPE;
  v_new KLS_PLAN_KIND%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NAME := :OLD.NAME;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
    DELETE FROM MASTER_SHADOW.KLS_PLAN_KIND_SHADOW
     WHERE ID=v_old.ID;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NAME := :NEW.NAME;

    -- Обновление теневой таблицы
    UPDATE MASTER_SHADOW.KLS_PLAN_KIND_SHADOW SET
      (ID,NAME)=
      (SELECT v_new.ID,v_new.NAME FROM dual)
      WHERE ID=v_old.ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.KLS_PLAN_KIND_SHADOW
        (ID,NAME)
        VALUES
        (v_new.ID,v_new.NAME);
    END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_KLS_PLANSTRU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_PLANSTRU
AFTER INSERT OR DELETE OR UPDATE OF ID, NAME, KOD_GRP, KOD_SPG, BEGIN_DATE, INPUT_DATE, KOD_PRZ, KOD_RZD, KOD_SGR, END_DATE, PARENT_ID, NAZN_OTG_ID, LEVEL_POS, KOD_PGR
ON MASTER.KLS_PLANSTRU
FOR EACH ROW
DECLARE
  v_old KLS_PLANSTRU%ROWTYPE;
  v_new KLS_PLANSTRU%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.NAME := :OLD.NAME;
    v_old.LEVEL_POS := :OLD.LEVEL_POS;
    v_old.INPUT_DATE := :OLD.INPUT_DATE;
    v_old.KOD_SGR := :OLD.KOD_SGR;
    v_old.KOD_SPG := :OLD.KOD_SPG;
    v_old.KOD_RZD := :OLD.KOD_RZD;
    v_old.KOD_PRZ := :OLD.KOD_PRZ;
    v_old.KOD_GRP := :OLD.KOD_GRP;
    v_old.KOD_PGR := :OLD.KOD_PGR;
    v_old.PARENT_ID := :OLD.PARENT_ID;
    v_old.NAZN_OTG_ID := :OLD.NAZN_OTG_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
    DELETE FROM MASTER_SHADOW.KLS_PLANSTRU_SHADOW
     WHERE ID=v_old.ID;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.NAME := :NEW.NAME;
    v_new.LEVEL_POS := :NEW.LEVEL_POS;
    v_new.INPUT_DATE := :NEW.INPUT_DATE;
    v_new.KOD_SGR := :NEW.KOD_SGR;
    v_new.KOD_SPG := :NEW.KOD_SPG;
    v_new.KOD_RZD := :NEW.KOD_RZD;
    v_new.KOD_PRZ := :NEW.KOD_PRZ;
    v_new.KOD_GRP := :NEW.KOD_GRP;
    v_new.KOD_PGR := :NEW.KOD_PGR;
    v_new.PARENT_ID := :NEW.PARENT_ID;
    v_new.NAZN_OTG_ID := :NEW.NAZN_OTG_ID;

    -- Обновление теневой таблицы
    UPDATE MASTER_SHADOW.KLS_PLANSTRU_SHADOW SET
      (ID,BEGIN_DATE,END_DATE,NAME,LEVEL_POS,INPUT_DATE,KOD_SGR,KOD_SPG,KOD_RZD,KOD_PRZ,KOD_GRP,KOD_PGR,PARENT_ID,NAZN_OTG_ID)=
      (SELECT v_new.ID,v_new.BEGIN_DATE,v_new.END_DATE,v_new.NAME,v_new.LEVEL_POS,v_new.INPUT_DATE,v_new.KOD_SGR,v_new.KOD_SPG,v_new.KOD_RZD,v_new.KOD_PRZ,v_new.KOD_GRP,v_new.KOD_PGR,v_new.PARENT_ID,v_new.NAZN_OTG_ID FROM dual)
      WHERE ID=v_old.ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.KLS_PLANSTRU_SHADOW
        (ID,BEGIN_DATE,END_DATE,NAME,LEVEL_POS,INPUT_DATE,KOD_SGR,KOD_SPG,KOD_RZD,KOD_PRZ,KOD_GRP,KOD_PGR,PARENT_ID,NAZN_OTG_ID)
        VALUES
        (v_new.ID,v_new.BEGIN_DATE,v_new.END_DATE,v_new.NAME,v_new.LEVEL_POS,v_new.INPUT_DATE,v_new.KOD_SGR,v_new.KOD_SPG,v_new.KOD_RZD,v_new.KOD_PRZ,v_new.KOD_GRP,v_new.KOD_PGR,v_new.PARENT_ID,v_new.NAZN_OTG_ID);
    END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_KLS_VOZN_RST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_VOZN_RST
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.KLS_VOZN_RST
FOR EACH ROW
DECLARE
  v_old KLS_VOZN_RST%ROWTYPE;
  v_new KLS_VOZN_RST%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.IS_AGENT := :OLD.IS_AGENT;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.ID_GROUP_NPR := :OLD.ID_GROUP_NPR;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.VAGOWN_TYP_ID := :OLD.VAGOWN_TYP_ID;
    v_old.RAST_MIN := :OLD.RAST_MIN;
    v_old.RAST_MAX := :OLD.RAST_MAX;
    v_old.CENA_VOZN := :OLD.CENA_VOZN;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.IS_AGENT := :NEW.IS_AGENT;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.ID_GROUP_NPR := :NEW.ID_GROUP_NPR;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.VAGOWN_TYP_ID := :NEW.VAGOWN_TYP_ID;
    v_new.RAST_MIN := :NEW.RAST_MIN;
    v_new.RAST_MAX := :NEW.RAST_MAX;
    v_new.CENA_VOZN := :NEW.CENA_VOZN;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_LINK_PARUS_PREDPR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_LINK_PARUS_PREDPR
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.LINK_PARUS_PREDPR
FOR EACH ROW
DECLARE
  v_old LINK_PARUS_PREDPR%ROWTYPE;
  v_new LINK_PARUS_PREDPR%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.RN := :OLD.RN;
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.RN := :NEW.RN;
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_LOAD_FIL_PROD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_LOAD_FIL_PROD
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_PROD
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_PROD%ROWTYPE;
  v_new LOAD_FIL_PROD%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.TAG := :OLD.TAG;
    v_old.NAME := :OLD.NAME;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.TAG := :NEW.TAG;
    v_new.NAME := :NEW.NAME;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_MONTH_VISIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_MONTH_VISIR
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_VISIR
FOR EACH ROW
DECLARE
  v_old MONTH_VISIR%ROWTYPE;
  v_new MONTH_VISIR%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_REE := :OLD.DATE_REE;
    v_old.DOP_REE := :OLD.DOP_REE;
    v_old.NOM_ZD := :OLD.NOM_ZD;
    v_old.PRICHIN := :OLD.PRICHIN;
    v_old.APP_USERS_ID := :OLD.APP_USERS_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'MONTH_VISIR',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_REE := :NEW.DATE_REE;
    v_new.DOP_REE := :NEW.DOP_REE;
    v_new.NOM_ZD := :NEW.NOM_ZD;
    v_new.PRICHIN := :NEW.PRICHIN;
    v_new.APP_USERS_ID := :NEW.APP_USERS_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'MONTH_VISIR',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'MONTH_VISIR',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'MONTH_VISIR',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_REE<>V_NEW.DATE_REE THEN
            WriteStr:=':OLD.DATE_REE=' || TO_CHAR(V_OLD.DATE_REE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_REE=' || TO_CHAR(V_NEW.DATE_REE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOP_REE<>V_NEW.DOP_REE THEN
            WriteStr:=':OLD.DOP_REE=' || TO_CHAR(V_OLD.DOP_REE) || ' :NEW.DOP_REE=' || TO_CHAR(V_NEW.DOP_REE) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_ZD<>V_NEW.NOM_ZD THEN
            WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PRICHIN<>V_NEW.PRICHIN THEN
            WriteStr:=':OLD.PRICHIN=' || (V_OLD.PRICHIN) || ' :NEW.PRICHIN=' || (V_NEW.PRICHIN) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.APP_USERS_ID<>V_NEW.APP_USERS_ID THEN
            WriteStr:=':OLD.APP_USERS_ID=' || TO_CHAR(V_OLD.APP_USERS_ID) || ' :NEW.APP_USERS_ID=' || TO_CHAR(V_NEW.APP_USERS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'MONTH_VISIR',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_OBOROT_KONS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_OBOROT_KONS
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.OBOROT_KONS
FOR EACH ROW
DECLARE
  v_old OBOROT_KONS%ROWTYPE;
  v_new OBOROT_KONS%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID_OPER := :OLD.ID_OPER;
    v_old.DATE_OPER := :OLD.DATE_OPER;
    v_old.KOL := :OLD.KOL;
    v_old.KG := :OLD.KG;
    v_old.LIT := :OLD.LIT;
    v_old.CENA_POKUP_BN := :OLD.CENA_POKUP_BN;
    v_old.CENA_POKUP := :OLD.CENA_POKUP;
    v_old.SUMMA_POKUP_BN := :OLD.SUMMA_POKUP_BN;
    v_old.SUMMA_POKUP_NDS := :OLD.SUMMA_POKUP_NDS;
    v_old.SUMMA_POKUP_AKCIZ := :OLD.SUMMA_POKUP_AKCIZ;
    v_old.SUMMA_POKUP := :OLD.SUMMA_POKUP;
    v_old.CENA_REALIZ_BN := :OLD.CENA_REALIZ_BN;
    v_old.CENA_REALIZ := :OLD.CENA_REALIZ;
    v_old.SUMMA_REALIZ_BN := :OLD.SUMMA_REALIZ_BN;
    v_old.SUMMA_REALIZ_NDS := :OLD.SUMMA_REALIZ_NDS;
    v_old.SUMMA_REALIZ_AKCIZ := :OLD.SUMMA_REALIZ_AKCIZ;
    v_old.SUMMA_REALIZ := :OLD.SUMMA_REALIZ;
    v_old.CENA_UCHET := :OLD.CENA_UCHET;
    v_old.SUMMA_UCHET := :OLD.SUMMA_UCHET;
    v_old.UPDATE_USER := :OLD.UPDATE_USER;
    v_old.UPDATE_DATE := :OLD.UPDATE_DATE;
    v_old.AKCIZ_SVED := :OLD.AKCIZ_SVED;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.PREDPR_KONS_ID := :OLD.PREDPR_KONS_ID;
    v_old.PROD_KONS_ID := :OLD.PROD_KONS_ID;
    v_old.PREDPR_CLASS_ID := :OLD.PREDPR_CLASS_ID;
    v_old.TIP_OP_ID := :OLD.TIP_OP_ID;
    v_old.ST_PRIH_ID := :OLD.ST_PRIH_ID;
    v_old.ST_RASH_ID := :OLD.ST_RASH_ID;
    v_old.TIP_REAL_ID := :OLD.TIP_REAL_ID;
    v_old.VID_REAL_ID := :OLD.VID_REAL_ID;
    v_old.VID_POST_ID := :OLD.VID_POST_ID;
    v_old.OTGR_POST_ID := :OLD.OTGR_POST_ID;
    v_old.LOAD_TYPE_ID := :OLD.LOAD_TYPE_ID;
    v_old.REGION_ID := :OLD.REGION_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID_OPER := :NEW.ID_OPER;
    v_new.DATE_OPER := :NEW.DATE_OPER;
    v_new.KOL := :NEW.KOL;
    v_new.KG := :NEW.KG;
    v_new.LIT := :NEW.LIT;
    v_new.CENA_POKUP_BN := :NEW.CENA_POKUP_BN;
    v_new.CENA_POKUP := :NEW.CENA_POKUP;
    v_new.SUMMA_POKUP_BN := :NEW.SUMMA_POKUP_BN;
    v_new.SUMMA_POKUP_NDS := :NEW.SUMMA_POKUP_NDS;
    v_new.SUMMA_POKUP_AKCIZ := :NEW.SUMMA_POKUP_AKCIZ;
    v_new.SUMMA_POKUP := :NEW.SUMMA_POKUP;
    v_new.CENA_REALIZ_BN := :NEW.CENA_REALIZ_BN;
    v_new.CENA_REALIZ := :NEW.CENA_REALIZ;
    v_new.SUMMA_REALIZ_BN := :NEW.SUMMA_REALIZ_BN;
    v_new.SUMMA_REALIZ_NDS := :NEW.SUMMA_REALIZ_NDS;
    v_new.SUMMA_REALIZ_AKCIZ := :NEW.SUMMA_REALIZ_AKCIZ;
    v_new.SUMMA_REALIZ := :NEW.SUMMA_REALIZ;
    v_new.CENA_UCHET := :NEW.CENA_UCHET;
    v_new.SUMMA_UCHET := :NEW.SUMMA_UCHET;
    v_new.UPDATE_USER := :NEW.UPDATE_USER;
    v_new.UPDATE_DATE := :NEW.UPDATE_DATE;
    v_new.AKCIZ_SVED := :NEW.AKCIZ_SVED;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.PREDPR_KONS_ID := :NEW.PREDPR_KONS_ID;
    v_new.PROD_KONS_ID := :NEW.PROD_KONS_ID;
    v_new.PREDPR_CLASS_ID := :NEW.PREDPR_CLASS_ID;
    v_new.TIP_OP_ID := :NEW.TIP_OP_ID;
    v_new.ST_PRIH_ID := :NEW.ST_PRIH_ID;
    v_new.ST_RASH_ID := :NEW.ST_RASH_ID;
    v_new.TIP_REAL_ID := :NEW.TIP_REAL_ID;
    v_new.VID_REAL_ID := :NEW.VID_REAL_ID;
    v_new.VID_POST_ID := :NEW.VID_POST_ID;
    v_new.OTGR_POST_ID := :NEW.OTGR_POST_ID;
    v_new.LOAD_TYPE_ID := :NEW.LOAD_TYPE_ID;
    v_new.REGION_ID := :NEW.REGION_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PLAN_REALIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PLAN_REALIZ
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_REALIZ
FOR EACH ROW
DECLARE
  v_old PLAN_REALIZ%ROWTYPE;
  v_new PLAN_REALIZ%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.VES := :OLD.VES;
    v_old.SUPPLIER_ID := :OLD.SUPPLIER_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.TIP_REAL_ID := :OLD.TIP_REAL_ID;
    v_old.VID_REAL_ID := :OLD.VID_REAL_ID;
    v_old.ORG_KIND_ID := :OLD.ORG_KIND_ID;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.VES := :NEW.VES;
    v_new.SUPPLIER_ID := :NEW.SUPPLIER_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.TIP_REAL_ID := :NEW.TIP_REAL_ID;
    v_new.VID_REAL_ID := :NEW.VID_REAL_ID;
    v_new.ORG_KIND_ID := :NEW.ORG_KIND_ID;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_REPORTS_PARAM  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_REPORTS_PARAM
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.REPORTS_PARAM
FOR EACH ROW
DECLARE
  v_old REPORTS_PARAM%ROWTYPE;
  v_new REPORTS_PARAM%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.REPORTS_ID := :OLD.REPORTS_ID;
    v_old.PARAM_NAME := :OLD.PARAM_NAME;
    v_old.PARAM_ORDER := :OLD.PARAM_ORDER;
    v_old.PARAM_VISIBLE := :OLD.PARAM_VISIBLE;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.REPORTS_ID := :NEW.REPORTS_ID;
    v_new.PARAM_NAME := :NEW.PARAM_NAME;
    v_new.PARAM_ORDER := :NEW.PARAM_ORDER;
    v_new.PARAM_VISIBLE := :NEW.PARAM_VISIBLE;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_R3_CAT_CEN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_R3_CAT_CEN
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.R3_CAT_CEN
FOR EACH ROW
DECLARE
  v_old R3_CAT_CEN%ROWTYPE;
  v_new R3_CAT_CEN%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NUM_ISP := :OLD.NUM_ISP;
    v_old.CUSTOMERS_ID := :OLD.CUSTOMERS_ID;
    v_old.NAME := :OLD.NAME;
    v_old.CAT_CEN_ID := :OLD.CAT_CEN_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NUM_ISP := :NEW.NUM_ISP;
    v_new.CUSTOMERS_ID := :NEW.CUSTOMERS_ID;
    v_new.NAME := :NEW.NAME;
    v_new.CAT_CEN_ID := :NEW.CAT_CEN_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_TOW_PUT_KONS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_TOW_PUT_KONS
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.TOW_PUT_KONS
FOR EACH ROW
DECLARE
  v_old TOW_PUT_KONS%ROWTYPE;
  v_new TOW_PUT_KONS%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID_OPER := :OLD.ID_OPER;
    v_old.DATE_OPER := :OLD.DATE_OPER;
    v_old.KOL_1 := :OLD.KOL_1;
    v_old.KG_1 := :OLD.KG_1;
    v_old.CENA_POK_BN_1 := :OLD.CENA_POK_BN_1;
    v_old.CENA_POK_1 := :OLD.CENA_POK_1;
    v_old.SUMMA_POK_BN_1 := :OLD.SUMMA_POK_BN_1;
    v_old.SUMMA_POK_NDS_1 := :OLD.SUMMA_POK_NDS_1;
    v_old.SUMMA_POK_AKCIZ_1 := :OLD.SUMMA_POK_AKCIZ_1;
    v_old.SUMMA_POK_1 := :OLD.SUMMA_POK_1;
    v_old.KOL_2 := :OLD.KOL_2;
    v_old.KG_2 := :OLD.KG_2;
    v_old.CENA_POK_BN_2 := :OLD.CENA_POK_BN_2;
    v_old.CENA_POK_2 := :OLD.CENA_POK_2;
    v_old.SUMMA_POK_BN_2 := :OLD.SUMMA_POK_BN_2;
    v_old.SUMMA_POK_NDS_2 := :OLD.SUMMA_POK_NDS_2;
    v_old.SUMMA_POK_AKCIZ_2 := :OLD.SUMMA_POK_AKCIZ_2;
    v_old.SUMMA_POK_2 := :OLD.SUMMA_POK_2;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.PREDPR_KONS_ID := :OLD.PREDPR_KONS_ID;
    v_old.PROD_KONS_ID := :OLD.PROD_KONS_ID;
    v_old.LOAD_TYPE_ID := :OLD.LOAD_TYPE_ID;
    v_old.ORG_POLUCH_ID := :OLD.ORG_POLUCH_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID_OPER := :NEW.ID_OPER;
    v_new.DATE_OPER := :NEW.DATE_OPER;
    v_new.KOL_1 := :NEW.KOL_1;
    v_new.KG_1 := :NEW.KG_1;
    v_new.SUMMA_POK_BN_1 := :NEW.SUMMA_POK_BN_1;
    v_new.SUMMA_POK_NDS_1 := :NEW.SUMMA_POK_NDS_1;
    v_new.SUMMA_POK_AKCIZ_1 := :NEW.SUMMA_POK_AKCIZ_1;
    v_new.SUMMA_POK_1 := :NEW.SUMMA_POK_1;
    v_new.KOL_2 := :NEW.KOL_2;
    v_new.KG_2 := :NEW.KG_2;
    v_new.SUMMA_POK_BN_2 := :NEW.SUMMA_POK_BN_2;
    v_new.SUMMA_POK_NDS_2 := :NEW.SUMMA_POK_NDS_2;
    v_new.SUMMA_POK_AKCIZ_2 := :NEW.SUMMA_POK_AKCIZ_2;
    v_new.SUMMA_POK_2 := :NEW.SUMMA_POK_2;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.PREDPR_KONS_ID := :NEW.PREDPR_KONS_ID;
    v_new.PROD_KONS_ID := :NEW.PROD_KONS_ID;
    v_new.LOAD_TYPE_ID := :NEW.LOAD_TYPE_ID;
    v_new.ORG_POLUCH_ID := :NEW.ORG_POLUCH_ID;

	IF v_new.KG_1<>0 THEN
      v_new.CENA_POK_BN_1 := v_new.SUMMA_POK_BN_1/v_new.KG_1;
      v_new.CENA_POK_1 := v_new.SUMMA_POK_1/v_new.KG_1;
	END IF;
	
	IF v_new.KG_2<>0 THEN
      v_new.CENA_POK_BN_2 := v_new.SUMMA_POK_BN_2/v_new.KG_2;
      v_new.CENA_POK_2 := v_new.SUMMA_POK_2/v_new.KG_2;
	END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_BIR_APP_USERS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_APP_USERS
BEFORE INSERT OR UPDATE
ON MASTER.APP_USERS
FOR EACH ROW
BEGIN
  IF NVL(:NEW.ID,0)=0 THEN
    SELECT seq_id.NEXTVAL INTO :NEW.ID FROM DUAL;
  END iF;
  IF :NEW.FULLNAME||' '=' ' THEN
    :NEW.FULLNAME:=:NEW.NAME;
  END IF;	
END trg_bir_app_users;
/


--
-- TRG_BIR_AZC_FROM_PARUS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_FROM_PARUS
BEFORE INSERT
ON MASTER.AZC_FROM_PARUS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  tmpVar := 0;
  IF :NEW.id IS NULL OR :NEW.id=0 THEN
    SELECT seq_azc_from_parus.NEXTVAL INTO tmpVar FROM dual;
    :NEW.id := tmpVar;
  END IF;
  :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
  :NEW.OSUSER_NAME:=For_Init.GetCurrUser;
END trg_bir_azc_from_parus;
/


--
-- TRG_BIR_AZC_PLACE_SEND  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_PLACE_SEND
BEFORE INSERT
ON MASTER.AZC_PLACE_SEND
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_place_send.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_place_send;
/


--
-- TRG_BIR_AZC_PROD_GROUP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_PROD_GROUP
BEFORE INSERT
ON MASTER.AZC_PROD_GROUP
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_prod_group.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_azc_prod_group;
/


--
-- TRG_BIR_AZC_SYS_FIELDS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_SYS_FIELDS
BEFORE INSERT
ON MASTER.AZC_SYS_FIELDS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_sys_fields.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_sys_fields;
/


--
-- TRG_BIR_AZC_SYS_PAGE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_SYS_PAGE
BEFORE INSERT
ON MASTER.AZC_SYS_PAGE
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_sys_page.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_sys_page;
/


--
-- TRG_BIR_AZC_TARIF  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_TARIF
BEFORE INSERT OR UPDATE
ON MASTER.AZC_TARIF
FOR EACH ROW
BEGIN
  IF (:NEW.ID IS NULL) OR (:NEW.ID=0) THEN
    SELECT seq_azc_tarif.NEXTVAL INTO :NEW.ID FROM DUAL;
  END IF;
--  :NEW.DATE_INTO:=SYSDATE;
END trg_bir_azc_tarif;
/


--
-- TRG_BIR_AZC_TYPE_OPER  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_TYPE_OPER
BEFORE INSERT
ON MASTER.AZC_TYPE_OPERATION
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_type_operation.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_type_oper;
/


--
-- TRG_BIR_AZC_WEEK_PARUS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_WEEK_PARUS
BEFORE INSERT
ON MASTER.AZC_WEEK_PARUS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
IF :NEW.id IS NULL OR :NEW.id=0 THEN
   SELECT seq_azc_week_parus.NEXTVAL INTO tmpVar FROM dual;
   :NEW.id := tmpVar;
END IF;
END trg_bir_azc_week_parus;
/


--
-- TRG_BIR_DOVER  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_DOVER
BEFORE INSERT
ON MASTER.KLS_DOVER
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN

  IF :NEW.ID=0 OR :NEW.ID is NULL THEN
    tmpVar := 0;
    Select seq_DOVER.NextVal into tmpVar from dual;
   :NEW.ID := tmpVar;
  END IF;
END TRG_BIR_DOVER;
/


--
-- TRG_BIR_DOV_LINE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_DOV_LINE
BEFORE INSERT
ON MASTER.KLS_DOV_LINE
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF :NEW.ID=0 OR :NEW.ID is NULL THEN
    tmpVar := 0;
    Select seq_dov_line.NextVal into tmpVar from dual;
   :NEW.ID := tmpVar;
  END IF;
END TRG_BIR_DOV_LINE;
/


--
-- TRG_BIR_INF2PB_SCH  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_INF2PB_SCH
BEFORE INSERT
ON MASTER.INF2PB_SCH
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN

  IF :NEW.ID=0 OR :NEW.ID is NULL THEN
    tmpVar := 0;
    Select seq_INF2PB_SCH.NextVal into tmpVar from dual;
   :NEW.ID := tmpVar;
  END IF;
END TRG_BIR_INF2PB_SCH;
/


--
-- TRG_BIR_KLS_DECADA  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_KLS_DECADA
BEFORE INSERT
ON MASTER.KLS_DECADA
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
   if :NEW.kod is null or :NEW.kod=0 then
   Select seq_kls_dekada.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END trg_bir_kls_decada;
/


--
-- TRG_BIR_KLS_ORG_KIND  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_KLS_ORG_KIND
BEFORE INSERT
ON MASTER.KLS_ORG_KIND
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_kls_org_kind.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_kls_org_kind;
/


--
-- TRG_BIR_KLS_ORG_KIND_REL  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_KLS_ORG_KIND_REL
BEFORE INSERT
ON MASTER.KLS_ORG_KIND_RELATIONS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_kls_org_kind_relations.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_kls_org_kind_rel;
/


--
-- TRG_BIR_KLS_ORG_TYPE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_KLS_ORG_TYPE
BEFORE INSERT
ON MASTER.KLS_ORG_TYPE
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_kls_org_type.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_kls_org_type;
/


--
-- TRG_BIR_MESTO_LOG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_MESTO_LOG
BEFORE INSERT
ON MASTER.MESTO_LOG
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
    tmpVar := 0;
    SELECT seq_mesto_log.NEXTVAL INTO tmpVar FROM dual;
   :NEW.ID := tmpVar;
  END IF;
END TRG_BIR_MESTO_LOG;
/


--
-- TRG_BIR_MONTH_VISIR_LOC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_MONTH_VISIR_LOC
BEFORE INSERT
ON MASTER.MONTH_VISIR_LOC
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() THEN
    IF :NEW.ID=0 OR :NEW.ID is NULL THEN
      tmpVar := 0;
      Select seq_Month_Visir_Loc.NextVal into tmpVar from dual;
     :NEW.ID := tmpVar;
    END IF;
  END IF;

END TRG_BIR_MONTH_VISIR_LOC;
/


--
-- TRG_BIR_NAR_LINE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_NAR_LINE
BEFORE INSERT
ON MASTER.KLS_NAR_LINE
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF :NEW.ID=0 OR :NEW.ID is NULL THEN
    tmpVar := 0;
    Select seq_NARIAD.NextVal into tmpVar from dual;
   :NEW.ID := tmpVar;
  END IF;
END TRG_BIR_NAR_LINE;
/


--
-- TRG_BIUDR_AZS_REPORTS_TMP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_AZS_REPORTS_TMP
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.AZS_REPORTS_TMP
FOR EACH ROW
DECLARE
  v_old AZS_REPORTS_TMP%ROWTYPE;
  v_new AZS_REPORTS_TMP%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.TERMINAL_NAME := :OLD.TERMINAL_NAME;
    v_old.OSUSER_NAME := :OLD.OSUSER_NAME;
    v_old.TYPE_OPER_ID := :OLD.TYPE_OPER_ID;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.OPER_DAY := :OLD.OPER_DAY;
    v_old.PRICE := :OLD.PRICE;
    v_old.VOLUME := :OLD.VOLUME;
    v_old.MASSA := :OLD.MASSA;
    v_old.SUMMA := :OLD.SUMMA;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
	v_NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	v_NEW.OSUSER_NAME:=For_Init.GetCurrUser;
    v_new.TYPE_OPER_ID := :NEW.TYPE_OPER_ID;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.OPER_DAY := :NEW.OPER_DAY;
    v_new.PRICE := :NEW.PRICE;
    v_new.VOLUME := :NEW.VOLUME;
    v_new.MASSA := :NEW.MASSA;
    v_new.SUMMA := :NEW.SUMMA;

    IF 1=1 THEN
      -- Уникальный ID
--      IF v_new.ID=0 OR v_new.ID IS NULL THEN
--        SELECT SEQ_AZS_REPORTS_TMP.nextval INTO v_new.ID FROM DUAL;
--      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.TERMINAL_NAME := v_new.TERMINAL_NAME;
    :NEW.OSUSER_NAME := v_new.OSUSER_NAME;
    :NEW.TYPE_OPER_ID := v_new.TYPE_OPER_ID;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.OPER_DAY := v_new.OPER_DAY;
    :NEW.PRICE := v_new.PRICE;
    :NEW.VOLUME := v_new.VOLUME;
    :NEW.MASSA := v_new.MASSA;
    :NEW.SUMMA := v_new.SUMMA;
  END IF;
END;
/


--
-- TRG_BIUDR_DISP_AZS_MANUAL  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_DISP_AZS_MANUAL
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.DISP_AZS_MANUAL
FOR EACH ROW
DECLARE
  v_old DISP_AZS_MANUAL%ROWTYPE;
  v_new DISP_AZS_MANUAL%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.OSUSER := :OLD.OSUSER;
    v_old.TERMINAL := :OLD.TERMINAL;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.OUT_O_VOL := :OLD.OUT_O_VOL;
    v_old.OUT_O_MAS := :OLD.OUT_O_MAS;
    v_old.END_VOLUME := :OLD.END_VOLUME;
    v_old.END_MASSA := :OLD.END_MASSA;
    v_old.OUT_O_1_VOL := :OLD.OUT_O_1_VOL;
    v_old.OUT_O_1_MAS := :OLD.OUT_O_1_MAS;
    v_old.OUT_O_2_VOL := :OLD.OUT_O_2_VOL;
    v_old.OUT_O_2_MAS := :OLD.OUT_O_2_MAS;
    v_old.OUT_O_3_VOL := :OLD.OUT_O_3_VOL;
    v_old.OUT_O_3_MAS := :OLD.OUT_O_3_MAS;
    v_old.OUT_O_4_VOL := :OLD.OUT_O_4_VOL;
    v_old.OUT_O_4_MAS := :OLD.OUT_O_4_MAS;
    v_old.OUT_O_5_VOL := :OLD.OUT_O_5_VOL;
    v_old.OUT_O_5_MAS := :OLD.OUT_O_5_MAS;
    v_old.OUT_O_6_VOL := :OLD.OUT_O_6_VOL;
    v_old.OUT_O_6_MAS := :OLD.OUT_O_6_MAS;
    v_old.OUT_O_7_VOL := :OLD.OUT_O_7_VOL;
    v_old.OUT_O_7_MAS := :OLD.OUT_O_7_MAS;
    v_old.LAST_DAY := :OLD.LAST_DAY;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
	v_NEW.TERMINAL:=For_Init.GetCurrTerm;
	v_NEW.OSUSER:=For_Init.GetCurrUser;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.OUT_O_VOL := :NEW.OUT_O_VOL;
    v_new.OUT_O_MAS := :NEW.OUT_O_MAS;
    v_new.END_VOLUME := :NEW.END_VOLUME;
    v_new.END_MASSA := :NEW.END_MASSA;
    v_new.OUT_O_1_VOL := :NEW.OUT_O_1_VOL;
    v_new.OUT_O_1_MAS := :NEW.OUT_O_1_MAS;
    v_new.OUT_O_2_VOL := :NEW.OUT_O_2_VOL;
    v_new.OUT_O_2_MAS := :NEW.OUT_O_2_MAS;
    v_new.OUT_O_3_VOL := :NEW.OUT_O_3_VOL;
    v_new.OUT_O_3_MAS := :NEW.OUT_O_3_MAS;
    v_new.OUT_O_4_VOL := :NEW.OUT_O_4_VOL;
    v_new.OUT_O_4_MAS := :NEW.OUT_O_4_MAS;
    v_new.OUT_O_5_VOL := :NEW.OUT_O_5_VOL;
    v_new.OUT_O_5_MAS := :NEW.OUT_O_5_MAS;
    v_new.OUT_O_6_VOL := :NEW.OUT_O_6_VOL;
    v_new.OUT_O_6_MAS := :NEW.OUT_O_6_MAS;
    v_new.OUT_O_7_VOL := :NEW.OUT_O_7_VOL;
    v_new.OUT_O_7_MAS := :NEW.OUT_O_7_MAS;
    v_new.LAST_DAY := :NEW.LAST_DAY;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_DISP_AZS_MANUAL.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.OSUSER := v_new.OSUSER;
    :NEW.TERMINAL := v_new.TERMINAL;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.OUT_O_VOL := v_new.OUT_O_VOL;
    :NEW.OUT_O_MAS := v_new.OUT_O_MAS;
    :NEW.END_VOLUME := v_new.END_VOLUME;
    :NEW.END_MASSA := v_new.END_MASSA;
    :NEW.OUT_O_1_VOL := v_new.OUT_O_1_VOL;
    :NEW.OUT_O_1_MAS := v_new.OUT_O_1_MAS;
    :NEW.OUT_O_2_VOL := v_new.OUT_O_2_VOL;
    :NEW.OUT_O_2_MAS := v_new.OUT_O_2_MAS;
    :NEW.OUT_O_3_VOL := v_new.OUT_O_3_VOL;
    :NEW.OUT_O_3_MAS := v_new.OUT_O_3_MAS;
    :NEW.OUT_O_4_VOL := v_new.OUT_O_4_VOL;
    :NEW.OUT_O_4_MAS := v_new.OUT_O_4_MAS;
    :NEW.OUT_O_5_VOL := v_new.OUT_O_5_VOL;
    :NEW.OUT_O_5_MAS := v_new.OUT_O_5_MAS;
    :NEW.OUT_O_6_VOL := v_new.OUT_O_6_VOL;
    :NEW.OUT_O_6_MAS := v_new.OUT_O_6_MAS;
    :NEW.OUT_O_7_VOL := v_new.OUT_O_7_VOL;
    :NEW.OUT_O_7_MAS := v_new.OUT_O_7_MAS;
    :NEW.LAST_DAY := v_new.LAST_DAY;
  END IF;
END;
/


--
-- TRG_BIUDR_ENVIRONMENT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_ENVIRONMENT
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ENVIRONMENT
FOR EACH ROW
DECLARE
  v_old ENVIRONMENT%ROWTYPE;
  v_new ENVIRONMENT%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.ENV_NAME := :OLD.ENV_NAME;
    v_old.ENV_VALUE := :OLD.ENV_VALUE;
    v_old.ENV_COMMENT := :OLD.ENV_COMMENT;
    v_old.SOURCESQL := :OLD.SOURCESQL;
    v_old.ENV_TYPES_ID := :OLD.ENV_TYPES_ID;
    v_old.ENV_GRP_ID := :OLD.ENV_GRP_ID;
    v_old.MASTER_ID := :OLD.MASTER_ID;
    v_old.NETUSER := :OLD.NETUSER;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.ENV_NAME := :NEW.ENV_NAME;
    v_new.ENV_VALUE := :NEW.ENV_VALUE;
    v_new.ENV_COMMENT := :NEW.ENV_COMMENT;
    v_new.SOURCESQL := :NEW.SOURCESQL;
    v_new.ENV_TYPES_ID := :NEW.ENV_TYPES_ID;
    v_new.ENV_GRP_ID := :NEW.ENV_GRP_ID;
    v_new.MASTER_ID := :NEW.MASTER_ID;
    v_new.NETUSER := NLS_UPPER(:NEW.NETUSER);

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_ENVIRONMENT.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.ENV_NAME := v_new.ENV_NAME;
    :NEW.ENV_VALUE := v_new.ENV_VALUE;
    :NEW.ENV_COMMENT := v_new.ENV_COMMENT;
    :NEW.SOURCESQL := v_new.SOURCESQL;
    :NEW.ENV_TYPES_ID := v_new.ENV_TYPES_ID;
    :NEW.ENV_GRP_ID := v_new.ENV_GRP_ID;
    :NEW.MASTER_ID := v_new.MASTER_ID;
    :NEW.NETUSER := v_new.NETUSER;
  END IF;
END;
/


--
-- TRG_BIUDR_ENVIRONMENT_GRP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_ENVIRONMENT_GRP
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ENVIRONMENT_GRP
FOR EACH ROW
DECLARE
  v_old ENVIRONMENT_GRP%ROWTYPE;
  v_new ENVIRONMENT_GRP%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.GRP_NAME := :OLD.GRP_NAME;
    v_old.GRP_COMMENT := :OLD.GRP_COMMENT;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.GRP_NAME := :NEW.GRP_NAME;
    v_new.GRP_COMMENT := :NEW.GRP_COMMENT;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_ENVIRONMENT_GRP.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.GRP_NAME := v_new.GRP_NAME;
    :NEW.GRP_COMMENT := v_new.GRP_COMMENT;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_BANKS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_BANKS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_BANKS
FOR EACH ROW
DECLARE
  v_old KLS_BANKS%ROWTYPE;
  v_new KLS_BANKS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.KORS := :OLD.KORS;
    v_old.BIK := :OLD.BIK;
    v_old.BANK_NAME := :OLD.BANK_NAME;
    v_old.POSTINDEX := :OLD.POSTINDEX;
    v_old.ADDRESS := :OLD.ADDRESS;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.KORS := :NEW.KORS;
    v_new.BIK := :NEW.BIK;
    v_new.BANK_NAME := :NEW.BANK_NAME;
    v_new.POSTINDEX := :NEW.POSTINDEX;
    v_new.ADDRESS := :NEW.ADDRESS;

    IF INSERTING() THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_BANKS.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

	UPDATE KLS_BANK SET (BANK_NAME, ADDRESS, BIK, POSTINDEX)=
  	  (SELECT v_new.BANK_NAME, v_new.ADDRESS, v_new.BIK, v_new.POSTINDEX FROM dual)
	  WHERE KLS_BANK.KORS=v_new.KORS;

	IF SQL%NOTFOUND THEN
	  INSERT INTO KLS_BANK (KORS, BANK_NAME, ADDRESS, BIK, POSTINDEX)
  	    VALUES (v_new.KORS, v_new.BANK_NAME, v_new.ADDRESS, v_new.BIK, v_new.POSTINDEX);
	END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.KORS := v_new.KORS;
    :NEW.BIK := v_new.BIK;
    :NEW.BANK_NAME := v_new.BANK_NAME;
    :NEW.POSTINDEX := v_new.POSTINDEX;
    :NEW.ADDRESS := v_new.ADDRESS;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_DOC_RULES  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_DOC_RULES
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_DOC_RULES
FOR EACH ROW
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_DOC_TYPES  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_DOC_TYPES
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_DOC_TYPES
FOR EACH ROW
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PASP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PASP
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PASP
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN
  IF UPDATING() OR INSERTING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_KLS_PASP.nextval INTO v_tmp FROM DUAL;
      :new.ID:=TRIM(TO_CHAR(:new.MESTO_ID))||'_'||SUBSTR(TRIM(TO_CHAR(v_tmp,'0999999')),1,7);
    END IF;
  END IF;	
END;
/


--
-- TRG_BIUDR_KLS_PLAN_KIND  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PLAN_KIND
BEFORE INSERT OR DELETE OR UPDATE OF ID, NAME
ON MASTER.KLS_PLAN_KIND
FOR EACH ROW
DECLARE
  v_old KLS_PLAN_KIND%ROWTYPE;
  v_new KLS_PLAN_KIND%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NAME := :OLD.NAME;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NAME := :NEW.NAME;

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_PLAN_KIND.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

    -- Проверка новых значений

    -- Поиск в теневой таблице
    BEGIN
      SELECT NULL
      INTO v_tmp
      FROM MASTER_SHADOW.KLS_PLAN_KIND_SHADOW
      WHERE ID<>v_new.ID
        AND NAME=v_new.NAME;
      RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Данная запись уже есть в таблице');
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN TOO_MANY_ROWS THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Данная запись уже есть в таблице');
    END;

    -- До обновления
    IF UPDATING() THEN
      NULL;
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, 'Нельзя менять PRIMARY KEY');
      END IF;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.NAME := v_new.NAME;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PLANSTRU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PLANSTRU
BEFORE INSERT OR DELETE OR UPDATE OF ID, KOD_PGR, KOD_RZD, KOD_SPG, LEVEL_POS, BEGIN_DATE, NAZN_OTG_ID, INPUT_DATE, PARENT_ID, END_DATE, KOD_SGR, KOD_PRZ, NAME, KOD_GRP
ON MASTER.KLS_PLANSTRU
FOR EACH ROW
DECLARE
  v_old KLS_PLANSTRU%ROWTYPE;
  v_new KLS_PLANSTRU%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.NAME := :OLD.NAME;
    v_old.LEVEL_POS := :OLD.LEVEL_POS;
    v_old.INPUT_DATE := :OLD.INPUT_DATE;
    v_old.KOD_SGR := :OLD.KOD_SGR;
    v_old.KOD_SPG := :OLD.KOD_SPG;
    v_old.KOD_RZD := :OLD.KOD_RZD;
    v_old.KOD_PRZ := :OLD.KOD_PRZ;
    v_old.KOD_GRP := :OLD.KOD_GRP;
    v_old.KOD_PGR := :OLD.KOD_PGR;
    v_old.PARENT_ID := :OLD.PARENT_ID;
    v_old.NAZN_OTG_ID := :OLD.NAZN_OTG_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.NAME := :NEW.NAME;
    v_new.LEVEL_POS := :NEW.LEVEL_POS;
    v_new.INPUT_DATE := :NEW.INPUT_DATE;
    v_new.KOD_SGR := :NEW.KOD_SGR;
    v_new.KOD_SPG := :NEW.KOD_SPG;
    v_new.KOD_RZD := :NEW.KOD_RZD;
    v_new.KOD_PRZ := :NEW.KOD_PRZ;
    v_new.KOD_GRP := :NEW.KOD_GRP;
    v_new.KOD_PGR := :NEW.KOD_PGR;
    v_new.PARENT_ID := :NEW.PARENT_ID;
    v_new.NAZN_OTG_ID := :NEW.NAZN_OTG_ID;

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_PLANSTRU.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

    -- Проверка новых значений

    -- Поиск в теневой таблице
    BEGIN
      SELECT NULL
      INTO v_tmp
      FROM MASTER_SHADOW.KLS_PLANSTRU_SHADOW
      WHERE ID<>v_new.ID
        AND BEGIN_DATE=v_new.BEGIN_DATE
        AND END_DATE=v_new.END_DATE
        AND NAME=v_new.NAME
        AND LEVEL_POS=v_new.LEVEL_POS
        AND INPUT_DATE=v_new.INPUT_DATE
        AND KOD_SGR=v_new.KOD_SGR
        AND KOD_SPG=v_new.KOD_SPG
        AND KOD_RZD=v_new.KOD_RZD
        AND KOD_PRZ=v_new.KOD_PRZ
        AND KOD_GRP=v_new.KOD_GRP
        AND KOD_PGR=v_new.KOD_PGR
        AND PARENT_ID=v_new.PARENT_ID
        AND NAZN_OTG_ID=v_new.NAZN_OTG_ID;
      RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Данная запись уже есть в таблице');
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN TOO_MANY_ROWS THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Данная запись уже есть в таблице');
    END;

    -- До обновления
    IF UPDATING() THEN
      NULL;
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, 'Нельзя менять PRIMARY KEY');
      END IF;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.BEGIN_DATE := v_new.BEGIN_DATE;
    :NEW.END_DATE := v_new.END_DATE;
    :NEW.NAME := v_new.NAME;
    :NEW.LEVEL_POS := v_new.LEVEL_POS;
    :NEW.INPUT_DATE := v_new.INPUT_DATE;
    :NEW.KOD_SGR := v_new.KOD_SGR;
    :NEW.KOD_SPG := v_new.KOD_SPG;
    :NEW.KOD_RZD := v_new.KOD_RZD;
    :NEW.KOD_PRZ := v_new.KOD_PRZ;
    :NEW.KOD_GRP := v_new.KOD_GRP;
    :NEW.KOD_PGR := v_new.KOD_PGR;
    :NEW.PARENT_ID := v_new.PARENT_ID;
    :NEW.NAZN_OTG_ID := v_new.NAZN_OTG_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PREDPR_AKCIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PREDPR_AKCIZ
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PREDPR_AKCIZ
FOR EACH ROW
DECLARE
  v_old KLS_PREDPR_AKCIZ%ROWTYPE;
  v_new KLS_PREDPR_AKCIZ%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAT_ID := :OLD.PLAT_ID;
    v_old.DATE_BEG := :OLD.DATE_BEG;
    v_old.DATE_END := :OLD.DATE_END;
	v_old.IS_OPT := :OLD.IS_OPT;
	v_old.IS_ROZN := :OLD.IS_ROZN;
	v_old.NAPR_POST_ID := :OLD.NAPR_POST_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAT_ID := :NEW.PLAT_ID;
    v_new.DATE_BEG := :NEW.DATE_BEG;
    v_new.DATE_END := :NEW.DATE_END;
	v_new.IS_OPT := :NEW.IS_OPT;
	v_new.IS_ROZN := :NEW.IS_ROZN;
	v_new.NAPR_POST_ID := :NEW.NAPR_POST_ID;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PREDPR_AKCIZ.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF v_new.IS_OPT=0 AND v_new.IS_ROZN=0 THEN
	  v_new.NAPR_POST_ID:=2;
    END IF;
    IF v_new.IS_OPT=1 AND v_new.IS_ROZN=0 THEN
	  v_new.NAPR_POST_ID:=6;
    END IF;
    IF v_new.IS_OPT=0 AND v_new.IS_ROZN=1 THEN
	  v_new.NAPR_POST_ID:=8;
    END IF;
    IF v_new.IS_OPT=1 AND v_new.IS_ROZN=1 THEN
	  v_new.NAPR_POST_ID:=1;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PLAT_ID := v_new.PLAT_ID;
    :NEW.DATE_BEG := v_new.DATE_BEG;
    :NEW.DATE_END := v_new.DATE_END;
	:NEW.IS_OPT := v_new.IS_OPT;
	:NEW.IS_ROZN := v_new.IS_ROZN;
	:NEW.NAPR_POST_ID := v_new.NAPR_POST_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PR_KONS_GRP_DESC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PR_KONS_GRP_DESC
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PROD_KONS_GROUPS_DESC
FOR EACH ROW
DECLARE
  v_old KLS_PROD_KONS_GROUPS_DESC%ROWTYPE;
  v_new KLS_PROD_KONS_GROUPS_DESC%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PROD_KONS_ID := :OLD.PROD_KONS_ID;
    v_old.PROD_GROUPS_ID := :OLD.PROD_GROUPS_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PROD_KONS_ID := :NEW.PROD_KONS_ID;
    v_new.PROD_GROUPS_ID := :NEW.PROD_GROUPS_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PROD_KONS_GROUPS_DESC.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PROD_KONS_ID := v_new.PROD_KONS_ID;
    :NEW.PROD_GROUPS_ID := v_new.PROD_GROUPS_ID;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PROD_GROUPS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PROD_GROUPS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PROD_GROUPS
FOR EACH ROW
DECLARE
  v_old KLS_PROD_GROUPS%ROWTYPE;
  v_new KLS_PROD_GROUPS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PROD_TYPE_GRP_ID := :OLD.PROD_TYPE_GRP_ID;
    v_old.GROUP_ORDER := :OLD.GROUP_ORDER;
    v_old.GROUP_NAME := :OLD.GROUP_NAME;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PROD_TYPE_GRP_ID := :NEW.PROD_TYPE_GRP_ID;
    v_new.GROUP_ORDER := :NEW.GROUP_ORDER;
    v_new.GROUP_NAME := :NEW.GROUP_NAME;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PROD_GROUPS.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PROD_TYPE_GRP_ID := v_new.PROD_TYPE_GRP_ID;
    :NEW.GROUP_ORDER := v_new.GROUP_ORDER;
    :NEW.GROUP_NAME := v_new.GROUP_NAME;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PROD_GROUPS_DESC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PROD_GROUPS_DESC
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PROD_GROUPS_DESC
FOR EACH ROW
DECLARE
  v_old KLS_PROD_GROUPS_DESC%ROWTYPE;
  v_new KLS_PROD_GROUPS_DESC%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PROD_GROUPS_ID := :OLD.PROD_GROUPS_ID;
	v_old.PROD_TYPE_GRP_ID := :OLD.PROD_TYPE_GRP_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PROD_GROUPS_ID := :NEW.PROD_GROUPS_ID;
	BEGIN
	  SELECT prod_type_grp_id INTO v_new.prod_type_grp_id
	    FROM KLS_PROD_GROUPS
 	   WHERE id=v_new.PROD_GROUPS_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        v_new.PROD_TYPE_GRP_ID := NULL;
	END;      	

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PROD_GROUPS_DESC.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.PROD_GROUPS_ID := v_new.PROD_GROUPS_ID;
    :NEW.PROD_TYPE_GRP_ID := v_new.PROD_TYPE_GRP_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PROD_GR2GR_DESC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PROD_GR2GR_DESC
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PROD_GR2GR_DESC
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN


  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
	BEGIN
	  SELECT prod_type_grp_id INTO :new.prod_type_grp_id_1
	    FROM KLS_PROD_GROUPS
 	   WHERE id=:new.PROD_GROUPS_ID_1;
	EXCEPTION
	  WHEN OTHERS THEN
        :new.PROD_TYPE_GRP_ID_1 := NULL;
	END;      	

	BEGIN
	  SELECT prod_type_grp_id INTO :new.prod_type_grp_id_2
	    FROM KLS_PROD_GROUPS
 	   WHERE id=:new.PROD_GROUPS_ID_2;
	EXCEPTION
	  WHEN OTHERS THEN
        :new.PROD_TYPE_GRP_ID_2 := NULL;
	END;      	

    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS_PROD_GROUPS_DESC.NEXTVAL INTO :new.ID FROM DUAL;
    END IF;

  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PROD_TYPE_GRP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PROD_TYPE_GRP
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PROD_TYPE_GRP
FOR EACH ROW
DECLARE
  v_old KLS_PROD_TYPE_GRP%ROWTYPE;
  v_new KLS_PROD_TYPE_GRP%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NAME := :OLD.NAME;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NAME := :NEW.NAME;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PROD_TYPE_GRP.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.NAME := v_new.NAME;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_VOZN_RST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_VOZN_RST
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_VOZN_RST
FOR EACH ROW
DECLARE
  v_old KLS_VOZN_RST%ROWTYPE;
  v_new KLS_VOZN_RST%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.IS_AGENT := :OLD.IS_AGENT;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.ID_GROUP_NPR := :OLD.ID_GROUP_NPR;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.VAGOWN_TYP_ID := :OLD.VAGOWN_TYP_ID;
    v_old.RAST_MIN := :OLD.RAST_MIN;
    v_old.RAST_MAX := :OLD.RAST_MAX;
    v_old.CENA_VOZN := :OLD.CENA_VOZN;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.IS_AGENT := :NEW.IS_AGENT;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.ID_GROUP_NPR := :NEW.ID_GROUP_NPR;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.VAGOWN_TYP_ID := :NEW.VAGOWN_TYP_ID;
    v_new.RAST_MIN := :NEW.RAST_MIN;
    v_new.RAST_MAX := :NEW.RAST_MAX;
    v_new.CENA_VOZN := :NEW.CENA_VOZN;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_VOZN_RST.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.IS_AGENT := v_new.IS_AGENT;
    :NEW.BEGIN_DATE := v_new.BEGIN_DATE;
    :NEW.END_DATE := v_new.END_DATE;
    :NEW.ID_GROUP_NPR := v_new.ID_GROUP_NPR;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.VAGOWN_TYP_ID := v_new.VAGOWN_TYP_ID;
    :NEW.RAST_MIN := v_new.RAST_MIN;
    :NEW.RAST_MAX := v_new.RAST_MAX;
    :NEW.CENA_VOZN := v_new.CENA_VOZN;
  END IF;
END;
/


--
-- TRG_BIUDR_LINK_PARUS_PREDPR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_LINK_PARUS_PREDPR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.LINK_PARUS_PREDPR
FOR EACH ROW
DECLARE
  v_old LINK_PARUS_PREDPR%ROWTYPE;
  v_new LINK_PARUS_PREDPR%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.RN := :OLD.RN;
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.RN := :NEW.RN;
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_LINK_PARUS_PREDPR.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.RN := v_new.RN;
    :NEW.PREDPR_ID := v_new.PREDPR_ID;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
  END IF;
END;
/


--
-- TRG_BIUDR_LOAD_FIL_PROD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_LOAD_FIL_PROD
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_PROD
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_PROD%ROWTYPE;
  v_new LOAD_FIL_PROD%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.TAG := :OLD.TAG;
    v_old.NAME := :OLD.NAME;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.TAG := :NEW.TAG;
    v_new.NAME := :NEW.NAME;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_LOAD_FIL_PROD.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.TAG := v_new.TAG;
    :NEW.NAME := v_new.NAME;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
  END IF;
END;
/


--
-- TRG_BIUDR_MASTER_POGR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_MASTER_POGR
BEFORE INSERT
ON MASTER.KLS_MASTER_POGR
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_BIUDR_MASTER_POGR
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        06.02.2006             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_BIUDR_MASTER_POGR
      Sysdate:         06.02.2006
      Date and Time:   06.02.2006, 12:00:13, and 06.02.2006 12:00:13
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      KLS_MASTER_POGR (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;
IF :NEW.ID IS NULL THEN
   SELECT SEQ_ID.NEXTVAL INTO tmpVar FROM dual;
   :NEW.ID := tmpVar;
END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END TRG_BIUDR_MASTER_POGR;
/


--
-- TRG_BIUDR_MONTH_REESTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_MONTH_REESTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_REESTR
FOR EACH ROW
DECLARE
  v_old MONTH_REESTR%ROWTYPE;
  v_new MONTH_REESTR%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NUM_REE := :OLD.NUM_REE;
    v_old.DATE_REE := :OLD.DATE_REE;
    v_old.DATE_TO := :OLD.DATE_TO;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.USE_GRAFIK := :OLD.USE_GRAFIK;
    v_old.GRAFIK_DATE_FROM := :OLD.GRAFIK_DATE_FROM;
    v_old.GRAFIK_DATE_TO := :OLD.GRAFIK_DATE_TO;
    v_old.STATUS := :OLD.STATUS;
    v_old.DOP_REE := :OLD.DOP_REE;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NUM_REE := :NEW.NUM_REE;
    v_new.DATE_REE := :NEW.DATE_REE;
    v_new.DATE_TO := :NEW.DATE_TO;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.USE_GRAFIK := :NEW.USE_GRAFIK;
    v_new.GRAFIK_DATE_FROM := :NEW.GRAFIK_DATE_FROM;
    v_new.GRAFIK_DATE_TO := :NEW.GRAFIK_DATE_TO;
    v_new.STATUS := :NEW.STATUS;
    v_new.DOP_REE := :NEW.DOP_REE;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_ID.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.NUM_REE := v_new.NUM_REE;
    :NEW.DATE_REE := v_new.DATE_REE;
    :NEW.DATE_TO := v_new.DATE_TO;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.USE_GRAFIK := v_new.USE_GRAFIK;
    :NEW.GRAFIK_DATE_FROM := v_new.GRAFIK_DATE_FROM;
    :NEW.GRAFIK_DATE_TO := v_new.GRAFIK_DATE_TO;
    :NEW.STATUS := v_new.STATUS;
    :NEW.DOP_REE := v_new.DOP_REE;
  END IF;
END;
/


--
-- TRG_BIUDR_MONTH_VISIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_MONTH_VISIR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_VISIR
FOR EACH ROW
DECLARE
  v_old MONTH_VISIR%ROWTYPE;
  v_new MONTH_VISIR%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_REE := :OLD.DATE_REE;
    v_old.DOP_REE := :OLD.DOP_REE;
    v_old.NOM_ZD := :OLD.NOM_ZD;
    v_old.PRICHIN := :OLD.PRICHIN;
    v_old.APP_USERS_ID := :OLD.APP_USERS_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_REE := :NEW.DATE_REE;
    v_new.DOP_REE := :NEW.DOP_REE;
    v_new.NOM_ZD := :NEW.NOM_ZD;
    v_new.PRICHIN := :NEW.PRICHIN;
    v_new.APP_USERS_ID := :NEW.APP_USERS_ID;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_MONTH_VISIR.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.DATE_REE := v_new.DATE_REE;
    :NEW.DOP_REE := v_new.DOP_REE;
    :NEW.NOM_ZD := v_new.NOM_ZD;
    :NEW.PRICHIN := v_new.PRICHIN;
    :NEW.APP_USERS_ID := v_new.APP_USERS_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_NOMEN_PROD_LINK  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_NOMEN_PROD_LINK
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PARUS_NOMEN_PROD_LINK
FOR EACH ROW
DECLARE
  v_old PARUS_NOMEN_PROD_LINK%ROWTYPE;
  v_new PARUS_NOMEN_PROD_LINK%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NOMEN_RN := :OLD.NOMEN_RN;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
    v_old.IS_MAIN := :OLD.IS_MAIN;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NOMEN_RN := :NEW.NOMEN_RN;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;
    v_new.IS_MAIN := :NEW.IS_MAIN;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_PARUS_NOMEN_PROD_LINK.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.NOMEN_RN := v_new.NOMEN_RN;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
    :NEW.IS_MAIN := v_new.IS_MAIN;
  END IF;
END;
/


--
-- TRG_BIUDR_OBOROT_KONS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_OBOROT_KONS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.OBOROT_KONS
FOR EACH ROW
DECLARE
  v_old OBOROT_KONS%ROWTYPE;
  v_new OBOROT_KONS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID_OPER := :OLD.ID_OPER;
    v_old.DATE_OPER := :OLD.DATE_OPER;
    v_old.KOL := :OLD.KOL;
    v_old.KG := :OLD.KG;
    v_old.LIT := :OLD.LIT;
    v_old.CENA_POKUP_BN := :OLD.CENA_POKUP_BN;
    v_old.CENA_POKUP := :OLD.CENA_POKUP;
    v_old.SUMMA_POKUP_BN := :OLD.SUMMA_POKUP_BN;
    v_old.SUMMA_POKUP_NDS := :OLD.SUMMA_POKUP_NDS;
    v_old.SUMMA_POKUP_AKCIZ := :OLD.SUMMA_POKUP_AKCIZ;
    v_old.SUMMA_POKUP := :OLD.SUMMA_POKUP;
    v_old.CENA_REALIZ_BN := :OLD.CENA_REALIZ_BN;
    v_old.CENA_REALIZ := :OLD.CENA_REALIZ;
    v_old.SUMMA_REALIZ_BN := :OLD.SUMMA_REALIZ_BN;
    v_old.SUMMA_REALIZ_NDS := :OLD.SUMMA_REALIZ_NDS;
    v_old.SUMMA_REALIZ_AKCIZ := :OLD.SUMMA_REALIZ_AKCIZ;
    v_old.SUMMA_REALIZ := :OLD.SUMMA_REALIZ;
    v_old.CENA_UCHET := :OLD.CENA_UCHET;
    v_old.SUMMA_UCHET := :OLD.SUMMA_UCHET;
    v_old.UPDATE_USER := :OLD.UPDATE_USER;
    v_old.UPDATE_DATE := :OLD.UPDATE_DATE;
    v_old.AKCIZ_SVED := :OLD.AKCIZ_SVED;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.PREDPR_KONS_ID := :OLD.PREDPR_KONS_ID;
    v_old.PROD_KONS_ID := :OLD.PROD_KONS_ID;
    v_old.PREDPR_CLASS_ID := :OLD.PREDPR_CLASS_ID;
    v_old.TIP_OP_ID := :OLD.TIP_OP_ID;
    v_old.ST_PRIH_ID := :OLD.ST_PRIH_ID;
    v_old.ST_RASH_ID := :OLD.ST_RASH_ID;
    v_old.TIP_REAL_ID := :OLD.TIP_REAL_ID;
    v_old.VID_REAL_ID := :OLD.VID_REAL_ID;
    v_old.VID_POST_ID := :OLD.VID_POST_ID;
    v_old.OTGR_POST_ID := :OLD.OTGR_POST_ID;
    v_old.LOAD_TYPE_ID := :OLD.LOAD_TYPE_ID;
    v_old.REGION_ID := :OLD.REGION_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID_OPER := :NEW.ID_OPER;
    v_new.DATE_OPER := :NEW.DATE_OPER;
    v_new.KOL := :NEW.KOL;
    v_new.KG := :NEW.KG;
    v_new.LIT := :NEW.LIT;

    v_new.SUMMA_POKUP_BN := :NEW.SUMMA_POKUP_BN;
    v_new.SUMMA_POKUP_NDS := :NEW.SUMMA_POKUP_NDS;
    v_new.SUMMA_POKUP_AKCIZ := :NEW.SUMMA_POKUP_AKCIZ;
    v_new.SUMMA_POKUP := :NEW.SUMMA_POKUP;
    v_new.SUMMA_REALIZ_BN := :NEW.SUMMA_REALIZ_BN;
    v_new.SUMMA_REALIZ_NDS := :NEW.SUMMA_REALIZ_NDS;
    v_new.SUMMA_REALIZ_AKCIZ := :NEW.SUMMA_REALIZ_AKCIZ;
    v_new.SUMMA_REALIZ := :NEW.SUMMA_REALIZ;
    v_new.SUMMA_UCHET := :NEW.SUMMA_UCHET;

    IF v_new.KG<>0 THEN
      v_new.CENA_POKUP_BN := v_new.SUMMA_POKUP_BN/v_new.KG;
      v_new.CENA_POKUP := v_new.SUMMA_POKUP/v_new.KG;
      v_new.CENA_REALIZ_BN := v_new.SUMMA_REALIZ_BN/v_new.KG;
      v_new.CENA_REALIZ := v_new.SUMMA_REALIZ/v_new.KG;
      v_new.CENA_UCHET := v_new.SUMMA_UCHET/v_new.KG;
	ELSE  
      v_new.CENA_POKUP_BN := 0;
      v_new.CENA_POKUP := 0;
      v_new.CENA_REALIZ_BN := 0;
      v_new.CENA_REALIZ := 0;
      v_new.CENA_UCHET := 0;
    END IF;
	
    v_new.UPDATE_USER := :NEW.UPDATE_USER;
    v_new.UPDATE_DATE := :NEW.UPDATE_DATE;
    v_new.AKCIZ_SVED := :NEW.AKCIZ_SVED;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.PREDPR_KONS_ID := :NEW.PREDPR_KONS_ID;
    v_new.PROD_KONS_ID := :NEW.PROD_KONS_ID;
    v_new.PREDPR_CLASS_ID := :NEW.PREDPR_CLASS_ID;
    v_new.TIP_OP_ID := :NEW.TIP_OP_ID;
    v_new.ST_PRIH_ID := :NEW.ST_PRIH_ID;
    v_new.ST_RASH_ID := :NEW.ST_RASH_ID;
    v_new.TIP_REAL_ID := :NEW.TIP_REAL_ID;
    v_new.VID_REAL_ID := :NEW.VID_REAL_ID;
    v_new.VID_POST_ID := :NEW.VID_POST_ID;
    v_new.OTGR_POST_ID := :NEW.OTGR_POST_ID;
    v_new.LOAD_TYPE_ID := :NEW.LOAD_TYPE_ID;
    v_new.REGION_ID := :NEW.REGION_ID;


    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID_OPER := v_new.ID_OPER;
    :NEW.DATE_OPER := v_new.DATE_OPER;
    :NEW.KOL := v_new.KOL;
    :NEW.KG := v_new.KG;
    :NEW.LIT := v_new.LIT;
    :NEW.CENA_POKUP_BN := v_new.CENA_POKUP_BN;
    :NEW.CENA_POKUP := v_new.CENA_POKUP;
    :NEW.SUMMA_POKUP_BN := v_new.SUMMA_POKUP_BN;
    :NEW.SUMMA_POKUP_NDS := v_new.SUMMA_POKUP_NDS;
    :NEW.SUMMA_POKUP_AKCIZ := v_new.SUMMA_POKUP_AKCIZ;
    :NEW.SUMMA_POKUP := v_new.SUMMA_POKUP;
    :NEW.CENA_REALIZ_BN := v_new.CENA_REALIZ_BN;
    :NEW.CENA_REALIZ := v_new.CENA_REALIZ;
    :NEW.SUMMA_REALIZ_BN := v_new.SUMMA_REALIZ_BN;
    :NEW.SUMMA_REALIZ_NDS := v_new.SUMMA_REALIZ_NDS;
    :NEW.SUMMA_REALIZ_AKCIZ := v_new.SUMMA_REALIZ_AKCIZ;
    :NEW.SUMMA_REALIZ := v_new.SUMMA_REALIZ;
    :NEW.CENA_UCHET := v_new.CENA_UCHET;
    :NEW.SUMMA_UCHET := v_new.SUMMA_UCHET;
    :NEW.UPDATE_USER := v_new.UPDATE_USER;
    :NEW.UPDATE_DATE := v_new.UPDATE_DATE;
    :NEW.AKCIZ_SVED := v_new.AKCIZ_SVED;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
    :NEW.PREDPR_KONS_ID := v_new.PREDPR_KONS_ID;
    :NEW.PROD_KONS_ID := v_new.PROD_KONS_ID;
    :NEW.PREDPR_CLASS_ID := v_new.PREDPR_CLASS_ID;
    :NEW.TIP_OP_ID := v_new.TIP_OP_ID;
    :NEW.ST_PRIH_ID := v_new.ST_PRIH_ID;
    :NEW.ST_RASH_ID := v_new.ST_RASH_ID;
    :NEW.TIP_REAL_ID := v_new.TIP_REAL_ID;
    :NEW.VID_REAL_ID := v_new.VID_REAL_ID;
    :NEW.VID_POST_ID := v_new.VID_POST_ID;
    :NEW.OTGR_POST_ID := v_new.OTGR_POST_ID;
    :NEW.LOAD_TYPE_ID := v_new.LOAD_TYPE_ID;
    :NEW.REGION_ID := v_new.REGION_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_FACT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_FACT
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_FACT
FOR EACH ROW
DECLARE
  v_old PLAN_FACT%ROWTYPE;
  v_new PLAN_FACT%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.TERMINAL_NAME := :OLD.TERMINAL_NAME;
    v_old.OSUSER_NAME := :OLD.OSUSER_NAME;
    v_old.TIP_ROW := :OLD.TIP_ROW;
    v_old.GROUP_NAME := :OLD.GROUP_NAME;
    v_old.GROUP_ORDER := :OLD.GROUP_ORDER;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PROD_ORDER := :OLD.PROD_ORDER;
    v_old.PLANSTRU_ID := :OLD.PLANSTRU_ID;
    v_old.PLANSTRU_ORDER := :OLD.PLANSTRU_ORDER;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.PLAN_MON_C := :OLD.PLAN_MON_C;
    v_old.PLAN_MON_V := :OLD.PLAN_MON_V;
    v_old.PLAN_MON_SOBS_C := :OLD.PLAN_MON_SOBS_C;
    v_old.PLAN_MON_SOBS_V := :OLD.PLAN_MON_SOBS_V;
    v_old.PLAN_NAR_C := :OLD.PLAN_NAR_C;
    v_old.PLAN_NAR_V := :OLD.PLAN_NAR_V;
    v_old.PLAN_NAR_SOBS_C := :OLD.PLAN_NAR_SOBS_C;
    v_old.PLAN_NAR_SOBS_V := :OLD.PLAN_NAR_SOBS_V;
    v_old.DATE_ZAYV := :OLD.DATE_ZAYV;
    v_old.ZAYV := :OLD.ZAYV;
    v_old.DATE_BEG_OST := :OLD.DATE_BEG_OST;
    v_old.TIME_BEG_OST := :OLD.TIME_BEG_OST;
    v_old.BEG_OST := :OLD.BEG_OST;
    v_old.DATE_FACT := :OLD.DATE_FACT;
    v_old.TIME_FACT := :OLD.TIME_FACT;
    v_old.FACT_C := :OLD.FACT_C;
    v_old.FACT_V := :OLD.FACT_V;
    v_old.FACT_SOBS_C := :OLD.FACT_SOBS_C;
    v_old.FACT_SOBS_V := :OLD.FACT_SOBS_V;
    v_old.DATE_EMPTY_VOL := :OLD.DATE_EMPTY_VOL;
    v_old.TIME_EMPTY_VOL := :OLD.TIME_EMPTY_VOL;
    v_old.EMPTY_VOL := :OLD.EMPTY_VOL;
    v_old.DATE_OST := :OLD.DATE_OST;
    v_old.TIME_OST := :OLD.TIME_OST;
    v_old.OST := :OLD.OST;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
	:NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;

    v_new.ID := :NEW.ID;
    v_new.TERMINAL_NAME := :NEW.TERMINAL_NAME;
    v_new.OSUSER_NAME := :NEW.OSUSER_NAME;
    v_new.TIP_ROW := :NEW.TIP_ROW;
    v_new.GROUP_NAME := :NEW.GROUP_NAME;
    v_new.GROUP_ORDER := :NEW.GROUP_ORDER;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PROD_ORDER := :NEW.PROD_ORDER;
    v_new.PLANSTRU_ID := :NEW.PLANSTRU_ID;
    v_new.PLANSTRU_ORDER := :NEW.PLANSTRU_ORDER;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.PLAN_MON_C := :NEW.PLAN_MON_C;
    v_new.PLAN_MON_V := :NEW.PLAN_MON_V;
    v_new.PLAN_MON_SOBS_C := :NEW.PLAN_MON_SOBS_C;
    v_new.PLAN_MON_SOBS_V := :NEW.PLAN_MON_SOBS_V;
    v_new.PLAN_NAR_C := :NEW.PLAN_NAR_C;
    v_new.PLAN_NAR_V := :NEW.PLAN_NAR_V;
    v_new.PLAN_NAR_SOBS_C := :NEW.PLAN_NAR_SOBS_C;
    v_new.PLAN_NAR_SOBS_V := :NEW.PLAN_NAR_SOBS_V;
    v_new.DATE_ZAYV := :NEW.DATE_ZAYV;
    v_new.ZAYV := :NEW.ZAYV;
    v_new.DATE_BEG_OST := :NEW.DATE_BEG_OST;
    v_new.TIME_BEG_OST := :NEW.TIME_BEG_OST;
    v_new.BEG_OST := :NEW.BEG_OST;
    v_new.DATE_FACT := :NEW.DATE_FACT;
    v_new.TIME_FACT := :NEW.TIME_FACT;
    v_new.FACT_C := :NEW.FACT_C;
    v_new.FACT_V := :NEW.FACT_V;
    v_new.FACT_SOBS_C := :NEW.FACT_SOBS_C;
    v_new.FACT_SOBS_V := :NEW.FACT_SOBS_V;
    v_new.DATE_EMPTY_VOL := :NEW.DATE_EMPTY_VOL;
    v_new.TIME_EMPTY_VOL := :NEW.TIME_EMPTY_VOL;
    v_new.EMPTY_VOL := :NEW.EMPTY_VOL;
    v_new.DATE_OST := :NEW.DATE_OST;
    v_new.TIME_OST := :NEW.TIME_OST;
    v_new.OST := :NEW.OST;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_PLAN_FACT.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
	  v_NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	  v_NEW.OSUSER_NAME:=For_Init.GetCurrUser;
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.TERMINAL_NAME := v_new.TERMINAL_NAME;
    :NEW.OSUSER_NAME := v_new.OSUSER_NAME;
    :NEW.TIP_ROW := v_new.TIP_ROW;
    :NEW.GROUP_NAME := v_new.GROUP_NAME;
    :NEW.GROUP_ORDER := v_new.GROUP_ORDER;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.PROD_ORDER := v_new.PROD_ORDER;
    :NEW.PLANSTRU_ID := v_new.PLANSTRU_ID;
    :NEW.PLANSTRU_ORDER := v_new.PLANSTRU_ORDER;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.PLAN_MON_C := v_new.PLAN_MON_C;
    :NEW.PLAN_MON_V := v_new.PLAN_MON_V;
    :NEW.PLAN_MON_SOBS_C := v_new.PLAN_MON_SOBS_C;
    :NEW.PLAN_MON_SOBS_V := v_new.PLAN_MON_SOBS_V;
    :NEW.PLAN_NAR_C := v_new.PLAN_NAR_C;
    :NEW.PLAN_NAR_V := v_new.PLAN_NAR_V;
    :NEW.PLAN_NAR_SOBS_C := v_new.PLAN_NAR_SOBS_C;
    :NEW.PLAN_NAR_SOBS_V := v_new.PLAN_NAR_SOBS_V;
    :NEW.DATE_ZAYV := v_new.DATE_ZAYV;
    :NEW.ZAYV := v_new.ZAYV;
    :NEW.DATE_BEG_OST := v_new.DATE_BEG_OST;
    :NEW.TIME_BEG_OST := v_new.TIME_BEG_OST;
    :NEW.BEG_OST := v_new.BEG_OST;
    :NEW.DATE_FACT := v_new.DATE_FACT;
    :NEW.TIME_FACT := v_new.TIME_FACT;
    :NEW.FACT_C := v_new.FACT_C;
    :NEW.FACT_V := v_new.FACT_V;
    :NEW.FACT_SOBS_C := v_new.FACT_SOBS_C;
    :NEW.FACT_SOBS_V := v_new.FACT_SOBS_V;
    :NEW.DATE_EMPTY_VOL := v_new.DATE_EMPTY_VOL;
    :NEW.TIME_EMPTY_VOL := v_new.TIME_EMPTY_VOL;
    :NEW.EMPTY_VOL := v_new.EMPTY_VOL;
    :NEW.DATE_OST := v_new.DATE_OST;
    :NEW.TIME_OST := v_new.TIME_OST;
    :NEW.OST := v_new.OST;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_FACT_REALIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_FACT_REALIZ
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_FACT_REALIZ
FOR EACH ROW
DECLARE
  v_old PLAN_FACT_REALIZ%ROWTYPE;
  v_new PLAN_FACT_REALIZ%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.TERMINAL_NAME := :OLD.TERMINAL_NAME;
    v_old.OSUSER_NAME := :OLD.OSUSER_NAME;
    v_old.TIP_ROW := :OLD.TIP_ROW;
    v_old.DATE_BEGIN := :OLD.DATE_BEGIN;
    v_old.DATE_END := :OLD.DATE_END;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.FILIAL_ID := :OLD.FILIAL_ID;
    v_old.FILIAL_NAME := :OLD.FILIAL_NAME;
    v_old.REGION_ORDER := :OLD.REGION_ORDER;
    v_old.REGION_NAME := :OLD.REGION_NAME;
    v_old.NAPR_ORDER := :OLD.NAPR_ORDER;
    v_old.NAPR_NAME := :OLD.NAPR_NAME;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.GROUP_ORDER := :OLD.GROUP_ORDER;
    v_old.GROUP_NAME := :OLD.GROUP_NAME;
    v_old.BEGIN_OST := :OLD.BEGIN_OST;
    v_old.PLAN_POST_VES := :OLD.PLAN_POST_VES;
    v_old.FACT_POST_VES := :OLD.FACT_POST_VES;
    v_old.RESURS := :OLD.RESURS;
    v_old.PLAN_REAL_VES := :OLD.PLAN_REAL_VES;
    v_old.FACT_REAL_VES := :OLD.FACT_REAL_VES;
    v_old.END_OST := :OLD.END_OST;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
	:NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;

    v_new.TERMINAL_NAME := :NEW.TERMINAL_NAME;
    v_new.OSUSER_NAME := :NEW.OSUSER_NAME;
    v_new.TIP_ROW := :NEW.TIP_ROW;
    v_new.DATE_BEGIN := :NEW.DATE_BEGIN;
    v_new.DATE_END := :NEW.DATE_END;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.FILIAL_ID := :NEW.FILIAL_ID;
    v_new.FILIAL_NAME := :NEW.FILIAL_NAME;
    v_new.REGION_ORDER := :NEW.REGION_ORDER;
    v_new.REGION_NAME := :NEW.REGION_NAME;
    v_new.NAPR_ORDER := :NEW.NAPR_ORDER;
    v_new.NAPR_NAME := :NEW.NAPR_NAME;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.GROUP_ORDER := :NEW.GROUP_ORDER;
    v_new.GROUP_NAME := :NEW.GROUP_NAME;
    v_new.BEGIN_OST := :NEW.BEGIN_OST;
    v_new.PLAN_POST_VES := :NEW.PLAN_POST_VES;
    v_new.FACT_POST_VES := :NEW.FACT_POST_VES;
    v_new.RESURS := :NEW.RESURS;
    v_new.PLAN_REAL_VES := :NEW.PLAN_REAL_VES;
    v_new.FACT_REAL_VES := :NEW.FACT_REAL_VES;
    v_new.END_OST := :NEW.END_OST;

    IF 1=1 THEN
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.TERMINAL_NAME := v_new.TERMINAL_NAME;
    :NEW.OSUSER_NAME := v_new.OSUSER_NAME;
    :NEW.TIP_ROW := v_new.TIP_ROW;
    :NEW.DATE_BEGIN := v_new.DATE_BEGIN;
    :NEW.DATE_END := v_new.DATE_END;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.FILIAL_ID := v_new.FILIAL_ID;
    :NEW.FILIAL_NAME := v_new.FILIAL_NAME;
    :NEW.REGION_ORDER := v_new.REGION_ORDER;
    :NEW.REGION_NAME := v_new.REGION_NAME;
    :NEW.NAPR_ORDER := v_new.NAPR_ORDER;
    :NEW.NAPR_NAME := v_new.NAPR_NAME;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.GROUP_ORDER := v_new.GROUP_ORDER;
    :NEW.GROUP_NAME := v_new.GROUP_NAME;
    :NEW.BEGIN_OST := v_new.BEGIN_OST;
    :NEW.PLAN_POST_VES := v_new.PLAN_POST_VES;
    :NEW.FACT_POST_VES := v_new.FACT_POST_VES;
    :NEW.RESURS := v_new.RESURS;
    :NEW.PLAN_REAL_VES := v_new.PLAN_REAL_VES;
    :NEW.FACT_REAL_VES := v_new.FACT_REAL_VES;
    :NEW.END_OST := v_new.END_OST;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_POST_PRICHIN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_POST_PRICHIN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_POST_PRICHIN
FOR EACH ROW
DECLARE
  v_old PLAN_POST_PRICHIN%ROWTYPE;
  v_new PLAN_POST_PRICHIN%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.BEG_DATE := :OLD.BEG_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.TO_MOS := :OLD.TO_MOS;
    v_old.ORDNUNG := :OLD.ORDNUNG;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PLANSTRU_ID := :OLD.PLANSTRU_ID;
    v_old.OWNER_ID := :OLD.OWNER_ID;
    v_old.PLAN := :OLD.PLAN;
    v_old.IZM_PLAN := :OLD.IZM_PLAN;
    v_old.OBPR := :OLD.OBPR;
    v_old.NORMA := :OLD.NORMA;
    v_old.NORMA_OBPR := :OLD.NORMA_OBPR;
    v_old.FACT := :OLD.FACT;
    v_old.RAZN_TONN := :OLD.RAZN_TONN;
    v_old.RAZN_DAT := :OLD.RAZN_DAT;
    v_old.ZAYV_TONN := :OLD.ZAYV_TONN;
    v_old.ZAYV_DAT := :OLD.ZAYV_DAT;
    v_old.PRICHIN_ID := :OLD.PRICHIN_ID;
    v_old.NOTE := :OLD.NOTE;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.BEG_DATE := :NEW.BEG_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.TO_MOS := :NEW.TO_MOS;
    v_new.ORDNUNG := :NEW.ORDNUNG;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PLANSTRU_ID := :NEW.PLANSTRU_ID;
    v_new.OWNER_ID := :NEW.OWNER_ID;
    v_new.PLAN := :NEW.PLAN;
    v_new.IZM_PLAN := :NEW.IZM_PLAN;
    v_new.OBPR := :NEW.OBPR;
    v_new.NORMA := :NEW.NORMA;
    v_new.NORMA_OBPR := :NEW.NORMA_OBPR;
    v_new.FACT := :NEW.FACT;
    v_new.RAZN_TONN := :NEW.RAZN_TONN;
    v_new.RAZN_DAT := :NEW.RAZN_DAT;
    v_new.ZAYV_TONN := :NEW.ZAYV_TONN;
    v_new.ZAYV_DAT := :NEW.ZAYV_DAT;
    v_new.PRICHIN_ID := :NEW.PRICHIN_ID;
    v_new.NOTE := :NEW.NOTE;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_PLAN_POST_PRICHIN.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.BEG_DATE := v_new.BEG_DATE;
    :NEW.END_DATE := v_new.END_DATE;
    :NEW.TO_MOS := v_new.TO_MOS;
    :NEW.ORDNUNG := v_new.ORDNUNG;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.PLANSTRU_ID := v_new.PLANSTRU_ID;
    :NEW.OWNER_ID := v_new.OWNER_ID;
    :NEW.PLAN := v_new.PLAN;
    :NEW.IZM_PLAN := v_new.IZM_PLAN;
    :NEW.OBPR := v_new.OBPR;
    :NEW.NORMA := v_new.NORMA;
    :NEW.NORMA_OBPR := v_new.NORMA_OBPR;
    :NEW.FACT := v_new.FACT;
    :NEW.RAZN_TONN := v_new.RAZN_TONN;
    :NEW.RAZN_DAT := v_new.RAZN_DAT;
    :NEW.ZAYV_TONN := v_new.ZAYV_TONN;
    :NEW.ZAYV_DAT := v_new.ZAYV_DAT;
    :NEW.PRICHIN_ID := v_new.PRICHIN_ID;
    :NEW.NOTE := v_new.NOTE;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_REALIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_REALIZ
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_REALIZ
FOR EACH ROW
DECLARE
  v_old PLAN_REALIZ%ROWTYPE;
  v_new PLAN_REALIZ%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.VES := :OLD.VES;
    v_old.SUPPLIER_ID := :OLD.SUPPLIER_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.TIP_REAL_ID := :OLD.TIP_REAL_ID;
    v_old.VID_REAL_ID := :OLD.VID_REAL_ID;
    v_old.ORG_KIND_ID := :OLD.ORG_KIND_ID;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_PLAN := TRUNC(:NEW.DATE_PLAN);
    v_new.VES := :NEW.VES;
    v_new.SUPPLIER_ID := :NEW.SUPPLIER_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.TIP_REAL_ID := :NEW.TIP_REAL_ID;
    v_new.VID_REAL_ID := :NEW.VID_REAL_ID;
    v_new.ORG_KIND_ID := :NEW.ORG_KIND_ID;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_PLAN_REALIZ.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
      -- Проверка на изменение PRIMARY KEY
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, For_Scripts.SG$PK_CHANGE_TXT);
      END IF;

    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.VES := v_new.VES;
    :NEW.SUPPLIER_ID := v_new.SUPPLIER_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.TIP_REAL_ID := v_new.TIP_REAL_ID;
    :NEW.VID_REAL_ID := v_new.VID_REAL_ID;
    :NEW.ORG_KIND_ID := v_new.ORG_KIND_ID;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_REPL_DEPENDENCE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REPL_DEPENDENCE
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REPL_DEPENDENCE
FOR EACH ROW
DECLARE
  v_new REPL_DEPENDENCE%ROWTYPE;
  v_tmp NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_REPL_DEPENDENCE.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
  END IF;
END;
/


--
-- TRG_BIUDR_REPL_SESSION  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REPL_SESSION
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REPL_SESSION FOR EACH ROW
DECLARE
  v_old REPL_SESSION%ROWTYPE;
  v_new REPL_SESSION%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.STATUS := :OLD.STATUS;
    v_old.DATE_START := :OLD.DATE_START;
    v_old.DATE_FINISH := :OLD.DATE_FINISH;
    v_old.DESCRIPT := :OLD.DESCRIPT;
    v_old.OSUSER_NAME := :OLD.OSUSER_NAME;
    v_old.TERMINAL_NAME := :OLD.TERMINAL_NAME;
    v_old.APPL_NAME := :OLD.APPL_NAME;
    v_old.SESSIONID:=:OLD.SESSIONID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.STATUS := :NEW.STATUS;
    v_new.DATE_START := :NEW.DATE_START;
    v_new.DATE_FINISH := :NEW.DATE_FINISH;
    v_new.DESCRIPT := :NEW.DESCRIPT;
    v_new.OSUSER_NAME := :NEW.OSUSER_NAME;
    v_new.TERMINAL_NAME := :NEW.TERMINAL_NAME;
    v_new.APPL_NAME := :NEW.APPL_NAME;
    v_new.SESSIONID:=:NEW.SESSIONID;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        v_new.ID:=GET_SEQ_LOCAL();
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
  	  V_NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	  V_NEW.OSUSER_NAME:=For_Init.GetCurrUser;
      V_NEW.SESSIONID:=For_Init.GetCurrSessionId;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.STATUS := v_new.STATUS;
    :NEW.DATE_START := v_new.DATE_START;
    :NEW.DATE_FINISH := v_new.DATE_FINISH;
    :NEW.DESCRIPT := v_new.DESCRIPT;
    :NEW.OSUSER_NAME := v_new.OSUSER_NAME;
    :NEW.TERMINAL_NAME := v_new.TERMINAL_NAME;
    :NEW.APPL_NAME := v_new.APPL_NAME;
    :NEW.SESSIONID:=v_new.SESSIONID;
  END IF;
END;
/


--
-- TRG_BIUDR_REPL_SESSION_LOG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REPL_SESSION_LOG
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REPL_SESSION_LOG
FOR EACH ROW
DECLARE
  v_old REPL_SESSION_LOG%ROWTYPE;
  v_new REPL_SESSION_LOG%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.SESSION_ID := :OLD.SESSION_ID;
    v_old.STATUS := :OLD.STATUS;
    v_old.DESCRIPT := :OLD.DESCRIPT;
    v_old.LOG_TIME := :OLD.LOG_TIME;
    v_old.SITE_RN := :OLD.SITE_RN;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.SESSION_ID := :NEW.SESSION_ID;
    v_new.STATUS := :NEW.STATUS;
    v_new.DESCRIPT := :NEW.DESCRIPT;
    v_new.LOG_TIME := :NEW.LOG_TIME;
    v_NEW.SITE_RN:=NVL(:NEW.SITE_RN,0);

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      v_new.ID:=GET_SEQ_LOCAL();
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.SESSION_ID := v_new.SESSION_ID;
    :NEW.STATUS := v_new.STATUS;
    :NEW.DESCRIPT := v_new.DESCRIPT;
    :NEW.LOG_TIME := v_new.LOG_TIME;
    :NEW.SITE_RN := v_new.SITE_RN;
  END IF;
END;
/


--
-- TRG_BIUDR_REPORTS_PARAM  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REPORTS_PARAM
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REPORTS_PARAM
FOR EACH ROW
DECLARE
  v_old REPORTS_PARAM%ROWTYPE;
  v_new REPORTS_PARAM%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.REPORTS_ID := :OLD.REPORTS_ID;
    v_old.PARAM_NAME := :OLD.PARAM_NAME;
    v_old.PARAM_ORDER := :OLD.PARAM_ORDER;
    v_old.PARAM_VISIBLE := :OLD.PARAM_VISIBLE;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.REPORTS_ID := :NEW.REPORTS_ID;
    v_new.PARAM_NAME := :NEW.PARAM_NAME;
    v_new.PARAM_ORDER := :NEW.PARAM_ORDER;
    v_new.PARAM_VISIBLE := :NEW.PARAM_VISIBLE;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_REPORTS_PARAM.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
      -- Проверка на изменение PRIMARY KEY
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, For_Scripts.SG$PK_CHANGE_TXT);
      END IF;

    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.REPORTS_ID := v_new.REPORTS_ID;
    :NEW.PARAM_NAME := v_new.PARAM_NAME;
    :NEW.PARAM_ORDER := v_new.PARAM_ORDER;
    :NEW.PARAM_VISIBLE := v_new.PARAM_VISIBLE;
  END IF;
END;
/


--
-- TRG_BIUDR_R3_CAT_CEN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_R3_CAT_CEN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.R3_CAT_CEN
FOR EACH ROW
DECLARE
  v_old R3_CAT_CEN%ROWTYPE;
  v_new R3_CAT_CEN%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NUM_ISP := :OLD.NUM_ISP;
    v_old.CUSTOMERS_ID := :OLD.CUSTOMERS_ID;
    v_old.NAME := :OLD.NAME;
    v_old.CAT_CEN_ID := :OLD.CAT_CEN_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NUM_ISP := :NEW.NUM_ISP;
    v_new.CUSTOMERS_ID := :NEW.CUSTOMERS_ID;
    v_new.NAME := :NEW.NAME;
    v_new.CAT_CEN_ID := :NEW.CAT_CEN_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_R3_CAT_CEN.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
      -- Проверка на изменение PRIMARY KEY
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, For_Scripts.SG$PK_CHANGE_TXT);
      END IF;

    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.NUM_ISP := v_new.NUM_ISP;
    :NEW.CUSTOMERS_ID := v_new.CUSTOMERS_ID;
    :NEW.NAME := v_new.NAME;
    :NEW.CAT_CEN_ID := v_new.CAT_CEN_ID;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
  END IF;
END;
/


--
-- TRG_BIUDR_SHABVOZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_SHABVOZ
BEFORE INSERT
ON MASTER.KLS_SHABVOZ
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        06.02.2006             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     
      Sysdate:         06.02.2006
      Date and Time:   06.02.2006, 10:58:12, and 06.02.2006 10:58:12
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      KLS_SHABVOZ (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;
IF :NEW.ID IS NULL THEN
   SELECT SEQ_SHAB_VOZ.NEXTVAL INTO tmpVar FROM dual;
   :NEW.ID := tmpVar;
END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/


--
-- TRG_BIUDR_SOOB_EXP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_SOOB_EXP
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.SOOB_EXP
FOR EACH ROW
DECLARE
  v_old SOOB_EXP%ROWTYPE;
  v_new SOOB_EXP%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.REP_DATE := :OLD.REP_DATE;
    v_old.POS_ID := :OLD.POS_ID;
    v_old.SORTBY := :OLD.SORTBY;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.EXPED_ID := :OLD.EXPED_ID;
    v_old.LOAD_TYPE_ID := :OLD.LOAD_TYPE_ID;
    v_old.FACT_YEAR := :OLD.FACT_YEAR;
    v_old.PLAN_POST := :OLD.PLAN_POST;
    v_old.PLAN_IZM := :OLD.PLAN_IZM;
    v_old.OBPR := :OLD.OBPR;
    v_old.PLAN_GD := :OLD.PLAN_GD;
    v_old.NORMA_MON := :OLD.NORMA_MON;
    v_old.FACT_MON := :OLD.FACT_MON;
    v_old.FACT_SUT := :OLD.FACT_SUT;
    v_old.IS_BAD := :OLD.IS_BAD;
    v_old.PRICH := :OLD.PRICH;
    v_old.ZAPR_MPS := :OLD.ZAPR_MPS;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.REP_DATE := :NEW.REP_DATE;
    v_new.POS_ID := :NEW.POS_ID;
    v_new.SORTBY := :NEW.SORTBY;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.EXPED_ID := :NEW.EXPED_ID;
    v_new.LOAD_TYPE_ID := :NEW.LOAD_TYPE_ID;
    v_new.FACT_YEAR := :NEW.FACT_YEAR;
    v_new.PLAN_POST := :NEW.PLAN_POST;
    v_new.PLAN_IZM := :NEW.PLAN_IZM;
    v_new.OBPR := :NEW.OBPR;
    v_new.PLAN_GD := :NEW.PLAN_GD;
    v_new.NORMA_MON := :NEW.NORMA_MON;
    v_new.FACT_MON := :NEW.FACT_MON;
    v_new.FACT_SUT := :NEW.FACT_SUT;
    v_new.IS_BAD := :NEW.IS_BAD;
    v_new.PRICH := :NEW.PRICH;
    v_new.ZAPR_MPS := :NEW.ZAPR_MPS;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_SOOB_EXP.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.REP_DATE := v_new.REP_DATE;
    :NEW.POS_ID := v_new.POS_ID;
    :NEW.SORTBY := v_new.SORTBY;
    :NEW.DOG_ID := v_new.DOG_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.STAN_ID := v_new.STAN_ID;
    :NEW.EXPED_ID := v_new.EXPED_ID;
    :NEW.LOAD_TYPE_ID := v_new.LOAD_TYPE_ID;
    :NEW.FACT_YEAR := v_new.FACT_YEAR;
    :NEW.PLAN_POST := v_new.PLAN_POST;
    :NEW.PLAN_IZM := v_new.PLAN_IZM;
    :NEW.OBPR := v_new.OBPR;
    :NEW.PLAN_GD := v_new.PLAN_GD;
    :NEW.NORMA_MON := v_new.NORMA_MON;
    :NEW.FACT_MON := v_new.FACT_MON;
    :NEW.FACT_SUT := v_new.FACT_SUT;
    :NEW.IS_BAD := v_new.IS_BAD;
    :NEW.PRICH := v_new.PRICH;
    :NEW.ZAPR_MPS := v_new.ZAPR_MPS;
  END IF;
END;
/


--
-- TRG_BIUDR_STORE_ORG_STRU_LINK  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_STORE_ORG_STRU_LINK
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PARUS_STORE_ORG_STRU_LINK
FOR EACH ROW
DECLARE
  v_old PARUS_STORE_ORG_STRU_LINK%ROWTYPE;
  v_new PARUS_STORE_ORG_STRU_LINK%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.STORE_RN := :OLD.STORE_RN;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
    v_old.IS_MAIN := :OLD.IS_MAIN;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.STORE_RN := :NEW.STORE_RN;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;
    v_new.IS_MAIN := :NEW.IS_MAIN;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_PARUS_STORE_ORG_STRU_LINK.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.STORE_RN := v_new.STORE_RN;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
    :NEW.IS_MAIN := v_new.IS_MAIN;
  END IF;
END;
/


--
-- TRG_BIUDR_SVED_IN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_SVED_IN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.SVED_IN
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_SVED_IN.nextval INTO v_tmp FROM DUAL;
	  :new.ID:=TO_CHAR(v_tmp);
    END IF;
	-- вычисление % солей
	IF NVL(:NEW.P_SOL,0)=0 AND NVL(:NEW.MG_SOL,0)<>0 THEN 
	  IF NVL(:NEW.PL15,0)<>0 THEN
	    :NEW.P_SOL:=ROUND(:NEW.MG_SOL/:NEW.PL15/10000,4);
	  ELSIF NVL(:NEW.PL,0)<>0 THEN
	    :NEW.P_SOL:=ROUND(:NEW.MG_SOL/:NEW.PL/10000,4);
	  ELSE
	  	:NEW.P_SOL:=0;
	  END IF;	
	END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_TAX_CONTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_TAX_CONTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_TAX_CONTR FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_TAX_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
  
END;
/


--
-- TRG_BIUDR_TAX_DOC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_TAX_DOC
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_TAX_DOCS
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_TAX_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
  
END;
/


--
-- TRG_BIUDR_TAX_FILES  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_TAX_FILES
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_TAX_FILES FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_TAX_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
  
END;
/


--
-- TRG_BIUDR_TAX_PACK  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_TAX_PACK
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_TAX_PACKAGE
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_TAX_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
  
END;
/


--
-- TRG_BIUDR_TAX_USER  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_TAX_USER
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_TAX_USER FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_TAX_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
  
END;
/


--
-- TRG_BIUDR_TOW_PUT_KONS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_TOW_PUT_KONS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.TOW_PUT_KONS
FOR EACH ROW
DECLARE
  v_old TOW_PUT_KONS%ROWTYPE;
  v_new TOW_PUT_KONS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID_OPER := :OLD.ID_OPER;
    v_old.DATE_OPER := :OLD.DATE_OPER;
    v_old.KOL_1 := :OLD.KOL_1;
    v_old.KG_1 := :OLD.KG_1;
    v_old.CENA_POK_BN_1 := :OLD.CENA_POK_BN_1;
    v_old.CENA_POK_1 := :OLD.CENA_POK_1;
    v_old.SUMMA_POK_BN_1 := :OLD.SUMMA_POK_BN_1;
    v_old.SUMMA_POK_NDS_1 := :OLD.SUMMA_POK_NDS_1;
    v_old.SUMMA_POK_AKCIZ_1 := :OLD.SUMMA_POK_AKCIZ_1;
    v_old.SUMMA_POK_1 := :OLD.SUMMA_POK_1;
    v_old.KOL_2 := :OLD.KOL_2;
    v_old.KG_2 := :OLD.KG_2;
    v_old.CENA_POK_BN_2 := :OLD.CENA_POK_BN_2;
    v_old.CENA_POK_2 := :OLD.CENA_POK_2;
    v_old.SUMMA_POK_BN_2 := :OLD.SUMMA_POK_BN_2;
    v_old.SUMMA_POK_NDS_2 := :OLD.SUMMA_POK_NDS_2;
    v_old.SUMMA_POK_AKCIZ_2 := :OLD.SUMMA_POK_AKCIZ_2;
    v_old.SUMMA_POK_2 := :OLD.SUMMA_POK_2;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
    v_old.PREDPR_KONS_ID := :OLD.PREDPR_KONS_ID;
    v_old.PROD_KONS_ID := :OLD.PROD_KONS_ID;
    v_old.LOAD_TYPE_ID := :OLD.LOAD_TYPE_ID;
    v_old.ORG_POLUCH_ID := :OLD.ORG_POLUCH_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID_OPER := :NEW.ID_OPER;
    v_new.DATE_OPER := :NEW.DATE_OPER;
    v_new.KOL_1 := :NEW.KOL_1;
    v_new.KG_1 := :NEW.KG_1;
    v_new.SUMMA_POK_BN_1 := :NEW.SUMMA_POK_BN_1;
    v_new.SUMMA_POK_NDS_1 := :NEW.SUMMA_POK_NDS_1;
    v_new.SUMMA_POK_AKCIZ_1 := :NEW.SUMMA_POK_AKCIZ_1;
    v_new.SUMMA_POK_1 := :NEW.SUMMA_POK_1;
    v_new.KOL_2 := :NEW.KOL_2;
    v_new.KG_2 := :NEW.KG_2;
    v_new.CENA_POK_BN_2 := :NEW.CENA_POK_BN_2;
    v_new.CENA_POK_2 := :NEW.CENA_POK_2;
    v_new.SUMMA_POK_BN_2 := :NEW.SUMMA_POK_BN_2;
    v_new.SUMMA_POK_NDS_2 := :NEW.SUMMA_POK_NDS_2;
    v_new.SUMMA_POK_AKCIZ_2 := :NEW.SUMMA_POK_AKCIZ_2;
    v_new.SUMMA_POK_2 := :NEW.SUMMA_POK_2;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;
    v_new.PREDPR_KONS_ID := :NEW.PREDPR_KONS_ID;
    v_new.PROD_KONS_ID := :NEW.PROD_KONS_ID;
    v_new.LOAD_TYPE_ID := :NEW.LOAD_TYPE_ID;
    v_new.ORG_POLUCH_ID := :NEW.ORG_POLUCH_ID;

    IF v_new.KG_1<>0 THEN
      v_new.CENA_POK_BN_1 := v_new.SUMMA_POK_BN_1/v_new.KG_1;
      v_new.CENA_POK_1 := v_new.SUMMA_POK_1/v_new.KG_1;
	ELSE  
      v_new.CENA_POK_BN_1 := 0;
      v_new.CENA_POK_1 := 0;
	END IF;
	 
    IF v_new.KG_2<>0 THEN
      v_new.CENA_POK_BN_2 := v_new.SUMMA_POK_BN_2/v_new.KG_2;
      v_new.CENA_POK_2 := v_new.SUMMA_POK_2/v_new.KG_2;
	ELSE  
      v_new.CENA_POK_BN_2 := 0;
      v_new.CENA_POK_2 := 0;
	END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID_OPER := v_new.ID_OPER;
    :NEW.DATE_OPER := v_new.DATE_OPER;
    :NEW.KOL_1 := v_new.KOL_1;
    :NEW.KG_1 := v_new.KG_1;
    :NEW.CENA_POK_BN_1 := v_new.CENA_POK_BN_1;
    :NEW.CENA_POK_1 := v_new.CENA_POK_1;
    :NEW.SUMMA_POK_BN_1 := v_new.SUMMA_POK_BN_1;
    :NEW.SUMMA_POK_NDS_1 := v_new.SUMMA_POK_NDS_1;
    :NEW.SUMMA_POK_AKCIZ_1 := v_new.SUMMA_POK_AKCIZ_1;
    :NEW.SUMMA_POK_1 := v_new.SUMMA_POK_1;
    :NEW.KOL_2 := v_new.KOL_2;
    :NEW.KG_2 := v_new.KG_2;
    :NEW.CENA_POK_BN_2 := v_new.CENA_POK_BN_2;
    :NEW.CENA_POK_2 := v_new.CENA_POK_2;
    :NEW.SUMMA_POK_BN_2 := v_new.SUMMA_POK_BN_2;
    :NEW.SUMMA_POK_NDS_2 := v_new.SUMMA_POK_NDS_2;
    :NEW.SUMMA_POK_AKCIZ_2 := v_new.SUMMA_POK_AKCIZ_2;
    :NEW.SUMMA_POK_2 := v_new.SUMMA_POK_2;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
    :NEW.PREDPR_KONS_ID := v_new.PREDPR_KONS_ID;
    :NEW.PROD_KONS_ID := v_new.PROD_KONS_ID;
    :NEW.LOAD_TYPE_ID := v_new.LOAD_TYPE_ID;
    :NEW.ORG_POLUCH_ID := v_new.ORG_POLUCH_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_UVED  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_UVED
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.UVED
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
  
END;
/


--
-- TRG_BIUDR_VED_OSMOTR_PODPIS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_OSMOTR_PODPIS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR_PODPIS
FOR EACH ROW
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_VED_OSMOTR_SMENA  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_OSMOTR_SMENA
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR_SMENA
FOR EACH ROW
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_VOZVRAT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VOZVRAT
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VOZVRAT
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN


  IF INSERTING() OR UPDATING() THEN
      IF :new.ID=0 OR :new.ID IS NULL THEN
        SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
      END IF;
  END IF;


END;
/


--
-- TRG_BIUDR_VOZVRAT_TEST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VOZVRAT_TEST
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VOZVRAT_TEST
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN


  IF INSERTING() OR UPDATING() THEN
      IF :new.ID=0 OR :new.ID IS NULL THEN
        SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
      END IF;
  END IF;


END;
/


--
-- TRG_BIUR_DOVER  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUR_DOVER
BEFORE INSERT OR UPDATE
ON MASTER.KLS_DOVER
FOR EACH ROW
DECLARE
tmpRow KLS_DOVER%rowtype;
BEGIN
  IF inserting THEN
    FOR tmpRow IN (SELECT * FROM KLS_DOVER
                 WHERE DATE_DOVER = :new.DATE_DOVER
                 AND NUM_DOVER = :new.NUM_DOVER
                 AND PREDPR_ID = :new.PREDPR_ID) LOOP
      raise_application_error(-20101, 'Данная доверенность уже введена!');
    END LOOP;
---  ELSE
---    FOR tmpRow IN (SELECT * FROM KLS_DOVER
---                 WHERE DATE_DOVER = :new.DATE_DOVER
---                 AND NUM_DOVER = :new.NUM_DOVER
---                 AND PREDPR_ID = :new.PREDPR_ID
---				 AND ID<>:old.ID) LOOP
---      raise_application_error(-20101, 'Данная доверенность уже введена!');
---    END LOOP;
  END IF;
END TRG_BIUR_DOVER;
/


ALTER TRIGGER MASTER.TRG_BIUR_DOVER DISABLE;


--
-- TRG_BIUR_NARIAD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUR_NARIAD
BEFORE INSERT OR UPDATE
ON MASTER.KLS_NARIAD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF :NEW.ID=0 OR :NEW.ID is NULL THEN
    tmpVar := 0;
    Select seq_NARIAD.NextVal into tmpVar from dual;
   :NEW.ID := tmpVar;
  END IF;
  IF :NEW.DATE_BEG IS NULL THEN
    :NEW.DATE_BEG:=:NEW.DATE_NAR;
  END IF;
END TRG_BIR_NARIAD;
/


--
-- TRG_CHECKARH_GU12_A  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_GU12_A
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.GU12_A
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
  v_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='GU12';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Контроль
  IF DELETING() AND :OLD.FROM_DATE<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND :OLD.FROM_DATE<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND :NEW.FROM_DATE<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_GU12_B  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_GU12_B
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.GU12_B
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='GU12';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты родительского документа
  IF UPDATING() OR DELETING() THEN
    BEGIN
      SELECT GU12_A.FROM_DATE INTO doc_dat
	    FROM GU12_A WHERE GU12_A.ID=:OLD.ID_A;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
    BEGIN
      SELECT GU12_A.FROM_DATE INTO doc_dat
	    FROM GU12_A WHERE GU12_A.ID=:NEW.ID_A;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  END IF;	  	  
  
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_GU12_BR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_GU12_BR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.GU12_BR
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='GU12';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_R;
	/*
    BEGIN
      SELECT GU12_A.FROM_DATE INTO doc_dat
	    FROM GU12_A WHERE GU12_A.ID=:OLD.ID_A;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
	*/
  ELSE
    doc_dat:=:NEW.DATE_R;
	/*
    BEGIN
      SELECT GU12_A.FROM_DATE INTO doc_dat
	    FROM GU12_A WHERE GU12_A.ID=:NEW.ID_A;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
	*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_ISU_BILL_POS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_ISU_BILL_POS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_BILL_POS
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ISU_BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.DATE_VYP_SF;
    BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=SUBSTR(:OLD.ISU_KOD_POS,1,10);
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
--    doc_dat:=:NEW.DATE_VYP_SF;
    BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=SUBSTR(:NEW.ISU_KOD_POS,1,10);
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_ISU_BILL_POS_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_ISU_BILL_POS_ROW
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_BILL_POS_ROW
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ISU_BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.DATE_VYP_SF;
    BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:OLD.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
--    doc_dat:=:NEW.DATE_VYP_SF;
    BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:NEW.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_ISU_BILLS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_ISU_BILLS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ISU_BILLS
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ISU_BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_VYP_SF;
	/*
    BEGIN
      SELECT GU12_A.FROM_DATE INTO doc_dat
	    FROM GU12_A WHERE GU12_A.ID=:OLD.ID_A;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
	*/
  ELSE
    doc_dat:=:NEW.DATE_VYP_SF;
	/*
    BEGIN
      SELECT GU12_A.FROM_DATE INTO doc_dat
	    FROM GU12_A WHERE GU12_A.ID=:NEW.ID_A;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
	*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_KVIT_ALFA  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_KVIT_ALFA
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KVIT_ALFA
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ALFA';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_OTGR;
    /*BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:OLD.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  ELSE
    doc_dat:=:NEW.DATE_OTGR;
    /*BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:NEW.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_KVIT_DATE_VIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_KVIT_DATE_VIR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KVIT_DATE_VIR
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='KVIT';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_VIR;
    /*BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:OLD.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  ELSE
    doc_dat:=:NEW.DATE_VIR;
    /*BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:NEW.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


ALTER TRIGGER MASTER.TRG_CHECKARH_KVIT_DATE_VIR DISABLE;


--
-- TRG_CHECKARH_MONTH_ALFA  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_MONTH_ALFA
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_ALFA
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ALFA';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_PLAN;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:OLD.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.DATE_PLAN;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:NEW.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_MONTH_REE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_MONTH_REE
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_REE
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH_REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_REE;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:OLD.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.DATE_REE;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:NEW.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_MONTH_REESTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_MONTH_REESTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_REESTR
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH_REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_REE;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:OLD.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.DATE_REE;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:NEW.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_MONTH_REESTR_POS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_MONTH_REESTR_POS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.MONTH_REESTR_POS
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH_REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.DATE_REE;
    BEGIN
      SELECT MONTH_REESTR.DATE_REE INTO doc_dat
	    FROM MONTH_REESTR WHERE MONTH_REESTR.ID=:OLD.MONTH_REESTR_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
    --doc_dat:=:NEW.DATE_REE;
    BEGIN
      SELECT MONTH_REESTR.DATE_REE INTO doc_dat
	    FROM MONTH_REESTR WHERE MONTH_REESTR.ID=:NEW.MONTH_REESTR_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_RAZNAR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_RAZNAR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.RAZNAR
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_RAZN;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:OLD.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.DATE_RAZN;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:NEW.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_SVED_IN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_SVED_IN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.SVED_IN
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.SVED_DATE;
    /*BEGIN
      SELECT MONTH_REESTR.DATE_REE INTO doc_dat
	    FROM MONTH_REESTR WHERE MONTH_REESTR.ID=:OLD.MONTH_REESTR_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.SVED_DATE;
    /*BEGIN
      SELECT MONTH_REESTR.DATE_REE INTO doc_dat
	    FROM MONTH_REESTR WHERE MONTH_REESTR.ID=:NEW.MONTH_REESTR_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_UVED  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_UVED
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.UVED
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.UVED_DATE;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:OLD.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.UVED_DATE;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:NEW.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_ZAKAZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_ZAKAZ
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ZAKAZ
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ZAKAZ';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_PLAN;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:OLD.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.DATE_PLAN;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:NEW.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_ZAKAZ_HIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_ZAKAZ_HIST
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ZAKAZ_HIST FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ZAKAZ';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.DATE_PLAN;
    BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:OLD.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
    --doc_dat:=:NEW.DATE_PLAN;
    BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:NEW.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D||to_char(doc_dat,'dd.mm.yyyy')||to_char(v_dat,'dd.mm.yyyy'));
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U||to_char(doc_dat,'dd.mm.yyyy')||to_char(v_dat,'dd.mm.yyyy'));
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I||to_char(doc_dat,'dd.mm.yyyy')||to_char(v_dat,'dd.mm.yyyy'));
  END IF;

END;
/


--
-- TRG_DIAGRAM  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_DIAGRAM
BEFORE INSERT
ON MASTER.DIAGRAM
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END TRG_TEMPVARI;
/


--
-- TRG_MASTER_KLS_FIELD_STRUCTURE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_MASTER_KLS_FIELD_STRUCTURE
BEFORE INSERT OR UPDATE
ON MASTER.MASTER_KLS_FIELD_STRUCTURE
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
      tmpVar := 0;
      SELECT seq_MASTER_KLS_FIELD_STRUCTURE.NEXTVAL INTO tmpVar FROM dual;
     :NEW.ID := tmpVar;
    END IF;
  END IF;
END TRG_MASTER_KLS_FIELD_STRUCTURE;
/


--
-- TRG_MASTER_QUERY_TYPES_DESC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_MASTER_QUERY_TYPES_DESC
BEFORE INSERT OR UPDATE
ON MASTER.MASTER_QUERY_TYPES_DESC
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
      tmpVar := 0;
      SELECT seq_MASTER_QUERY_TYPES_DESC.NEXTVAL INTO tmpVar FROM dual;
     :NEW.ID := tmpVar;
    END IF;
  END IF;
END TRG_MASTER_QUERY_TYPES_DESC;
/


--
-- TRG_MASTER_REPORTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_MASTER_REPORTS
BEFORE INSERT OR UPDATE
ON MASTER.MASTER_REPORTS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
      tmpVar := 0;
      SELECT seq_TempVari.NEXTVAL INTO tmpVar FROM dual;
     :NEW.ID := tmpVar;
    END IF;
	:NEW.TERMINAL_NAME:=NLS_UPPER(For_Init.GetCurrTerm);
	:NEW.OSUSER_NAME:=NLS_UPPER(For_Init.GetCurrUser);
	:NEW.APP_NAME:=NLS_UPPER(:NEW.APP_NAME);
	:NEW.REPORT_FILE:=NLS_UPPER(:NEW.REPORT_FILE);
  END IF;
END TRG_MASTER_REPORTS;
/


--
-- TRG_PLAN_REFINERY_BINSERT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_PLAN_REFINERY_BINSERT
BEFORE INSERT
ON MASTER.PLAN_REFINERY
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.kod is NULL or :NEW.kod=0 then
   Select seq_plan_refinery.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END trg_plan_refinery_binsert;
/


--
-- TRG_REPORT_GROUPS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_REPORT_GROUPS
BEFORE INSERT
ON MASTER.REPORT_GROUPS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() THEN
    IF :NEW.ID=0 OR :NEW.ID is NULL THEN
      tmpVar := 0;
      Select seq_Report_Groups.NextVal into tmpVar from dual;
     :NEW.ID := tmpVar;
    END IF;
	:NEW.SORTBY := :NEW.ID;
  END IF;
END TRG_REPORT_GROUPS;
/


--
-- TRG_REPORTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_REPORTS
BEFORE INSERT
ON MASTER.REPORTS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() THEN
    IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
      tmpVar := 0;
      SELECT seq_Reports.NEXTVAL INTO tmpVar FROM dual;
     :NEW.ID := tmpVar;
    END IF;
    IF :NEW.sortby=0 OR :NEW.sortby IS NULL THEN
  	  :NEW.SORTBY := :NEW.ID;
	END IF;  
  END IF;
END TRG_REPORTS;
/


--
-- TRG_REPORTS_REALIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_REPORTS_REALIZ
BEFORE INSERT OR UPDATE
ON MASTER.REPORTS_REALIZ
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
    IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
      tmpVar := 0;
      SELECT seq_ID.NEXTVAL INTO tmpVar FROM dual;
     :NEW.ID := tmpVar;
    END IF;
END TRG_REPORTS_REALIZ;
/


--
-- TRG_SF_SIGNS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_SF_SIGNS
BEFORE INSERT OR UPDATE
ON MASTER.SF_SIGNS
FOR EACH ROW
BEGIN
  :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
  :NEW.USER_NAME:=For_Init.GetCurrUser;
END TRG_SF_SIGNS;
/


--
-- TRG_TEMPVARI  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_TEMPVARI
BEFORE INSERT OR UPDATE
ON MASTER.TEMPVARI
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    IF :NEW.ID=0 OR :NEW.ID IS NULL THEN
      tmpVar := 0;
      SELECT seq_TempVari.NEXTVAL INTO tmpVar FROM dual;
     :NEW.ID := tmpVar;
    END IF;
	:NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
	:NEW.OSUSER_NAME:=For_Init.GetCurrUser;
	IF :NEW.BEGIN_DATE IS NULL THEN
  	  :NEW.BEGIN_DATE := SYSDATE;
	END IF;  
	IF :NEW.END_DATE IS NULL THEN
	  :NEW.END_DATE:=:NEW.BEGIN_DATE+1;
	END IF;
	:NEW.TERMINAL_NAME:=NLS_UPPER(:NEW.TERMINAL_NAME);
	:NEW.OSUSER_NAME:=NLS_UPPER(:NEW.OSUSER_NAME);
	:NEW.APP_NAME:=NLS_UPPER(:NEW.APP_NAME);
	:NEW.UNIT_NAME:=NLS_UPPER(:NEW.UNIT_NAME);
	:NEW.VARI_TYPE:=NLS_UPPER(:NEW.VARI_TYPE);
	:NEW.VARI_NAME:=NLS_UPPER(:NEW.VARI_NAME);
  END IF;
END TRG_TEMPVARI;
/


--
-- TRG_USER_RIGHTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_USER_RIGHTS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.USER_RIGHTS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
  SELECT seq_table_activity_log.NEXTVAL INTO tmpVar FROM dual;
  IF UPDATING() THEN
    INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (id,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TIME,EVENT_TYPE)
      SELECT tmpVar,'USER_RIGHTS' AS table_name,'',osuser,terminal,MODULE,SYSDATE,'U'
	    FROM sys.V_$SESSION
  	    WHERE audsid=USERENV('sessionid');
  END IF;
  IF INSERTING() THEN
    INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (id,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TIME,EVENT_TYPE)
      SELECT tmpVar,'USER_RIGHTS' AS table_name,'',osuser,terminal,MODULE,SYSDATE,'I'
	    FROM sys.V_$SESSION
  	    WHERE audsid=USERENV('sessionid');
  END IF;
  IF DELETING() THEN
    INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (id,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TIME,EVENT_TYPE)
      SELECT tmpVar,'USER_RIGHTS' AS table_name,'',osuser,terminal,MODULE,SYSDATE,'D'
	    FROM sys.V_$SESSION
  	    WHERE audsid=USERENV('sessionid');
  END IF;
END TRG_USER_RIGHTS;
/


--
-- T01_SEQ_KVIT_DATE_VIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T01_SEQ_KVIT_DATE_VIR
BEFORE INSERT OR UPDATE
ON MASTER.KVIT_DATE_VIR
FOR EACH ROW
BEGIN

  -- Уникальный ID
  IF :new.ID=0 OR :new.ID IS NULL THEN
    SELECT SEQ_ID.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;

END;
/


--
-- T01_SEQ_ZAKAZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T01_SEQ_ZAKAZ
BEFORE INSERT OR UPDATE
ON MASTER.ZAKAZ
FOR EACH ROW
BEGIN

  -- Уникальный ID
  IF :new.ID=0 OR :new.ID IS NULL THEN
    SELECT SEQ_MONTH_ALL.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;

END;
/


--
-- T01_SEQ_ZAKAZ_HIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T01_SEQ_ZAKAZ_HIST
BEFORE INSERT OR UPDATE
ON MASTER.ZAKAZ_HIST
FOR EACH ROW
BEGIN

  -- Уникальный ID
  IF :new.ID=0 OR :new.ID IS NULL THEN
    SELECT SEQ_MONTH_ALL.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;

END;
/


--
-- T11_BIR_KLS_DOC_RESERV  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIR_KLS_DOC_RESERV
BEFORE INSERT
ON MASTER.KLS_DOC_RESERV
FOR EACH ROW
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
    :NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END;
/


--
-- T11_BIR_TEMP_PAYMENTS_PROD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIR_TEMP_PAYMENTS_PROD
BEFORE INSERT
ON MASTER.TEMP_PAYMENTS_PROD
FOR EACH ROW
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
    :NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END;
/


--
-- T11_BIR_TEMP_PAYMENTS_TO_BILLS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIR_TEMP_PAYMENTS_TO_BILLS
BEFORE INSERT
ON MASTER.TEMP_PAYMENTS_TO_BILLS
FOR EACH ROW
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
    :NEW.OSUSER_NAME:=For_Init.GetCurrUser;
  END IF;
END;
/


--
-- T11_BIR_ZAKAZ_GRAFIK_TEMP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIR_ZAKAZ_GRAFIK_TEMP
BEFORE INSERT
ON MASTER.ZAKAZ_GRAFIK_TEMP
FOR EACH ROW
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
    :NEW.USER_NAME:=For_Init.GetCurrUser;
  END IF;
END;
/


--
-- T11_BIR_ZAKAZ_TEMP  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIR_ZAKAZ_TEMP
BEFORE INSERT
ON MASTER.ZAKAZ_TEMP
FOR EACH ROW
BEGIN
  IF INSERTING() THEN
    :NEW.TERMINAL_NAME:=For_Init.GetCurrTerm;
    :NEW.USER_NAME:=For_Init.GetCurrUser;
  END IF;
END;
/


--
-- T11_BIUDR_ZAKAZ_HIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIUDR_ZAKAZ_HIST
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ZAKAZ_HIST
FOR EACH ROW
DECLARE
  vID NUMBER;
  vPlatId NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    IF :NEW.STATUS_ZAKAZ_ID<>20 OR :NEW.NOM_ZD||' '=' ' THEN
  	  -- Обнуляем факт отгрузки
	  :new.NOM_ZD:='';
      :new.FACT_KOL:=0;
	  :new.FACT_VES:=0;
    END IF;
  END IF;

  IF UPDATING() THEN
    -- Проверяем
	IF :OLD.ID<>:NEW.ID THEN
	  raise_application_error( FOR_SCRIPTS.SG$PK_CHANGE,  FOR_SCRIPTS.SG$PK_CHANGE_TXT);
	END IF;
	IF :OLD.ZAKAZ_ID<>:NEW.ZAKAZ_ID THEN
	  raise_application_error( FOR_SCRIPTS.SG$FK_CHANGE,  'Нельзя менять ZAKAZ_ID!');
      null;
	END IF;
	IF :OLD.STATUS_ZAKAZ_ID<>:NEW.STATUS_ZAKAZ_ID THEN
	  raise_application_error( FOR_SCRIPTS.SG$FK_CHANGE,  'Нельзя менять статус позиции заказа!');
	END IF;
  END IF;

/* Временно
  IF DELETING() THEN
    IF :OLD.NOM_ZD||' '<>' ' AND :OLD.IS_AUTO=0 THEN
	  -- Если позиция связана с разнарядкой из ФИНАНСОВ
	  raise_application_error( FOR_SCRIPTS.SG$ERROR,'Нельзя удалить заказ, имеющий позицию "К отгрузке" связанную с разнарядкой в ФИНАНС''ах');
	END IF;
  END IF;
*/

END;
/


--
-- T21_AIUDR_ZAKAZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T21_AIUDR_ZAKAZ
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.ZAKAZ
FOR EACH ROW
DECLARE
  vId NUMBER;
  TABLE_MUTATING    exception;
  NO_STATEMENT_PARSED	exception;
  pragma exception_init( TABLE_MUTATING,-04091 );
  pragma exception_init( NO_STATEMENT_PARSED,-01003 );
  vKOL NUMBER;
  vVES NUMBER;
  vSPEED_VES NUMBER;
  vSPEED_KOL NUMBER;
BEGIN


  /* обработка мутаций при попытке обращения к таблице ZAKAZ_HIST */
/*  BEGIN
    -- После обновления
    IF UPDATING() THEN
      -- Если нет первоначальной позиции - добавить ее
      BEGIN
	    SELECT ID,VES,KOL,SPEED_VES,SPEED_KOL INTO vID,vVES,vKOL,vSPEED_VES,vSPEED_KOL
	  	  FROM ZAKAZ_HIST
	    WHERE ZAKAZ_ID=:NEW.ID
	      AND STATUS_ZAKAZ_ID=10;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vID:=0;
		  vVES:=:NEW.VES;
		  vKOL:=:NEW.KOL;
		  vSPEED_VES:=:NEW.SPEED_VES;
		  vSPEED_KOL:=:NEW.SPEED_KOL;
	  END;

      vID:=FOR_ZAKAZ.AddZakazHist(0,vID,1,1,:NEW.ID,10,:NEW.CLIENT_NUMBER,
	      :NEW.CLIENT_DATE, :NEW.INPUT_NUMBER, :NEW.INPUT_DATE, :NEW.PROD_ID_NPR,
		  NULL, :NEW.STAN_ID, :NEW.POLUCH_ID, :NEW.POTREB_ID,:NEW.PRICE, vVES, vKOL,
		  vSPEED_VES, vSPEED_KOL, '',0,0,0,0,NULL,:NEW.BEGIN_DATE,:NEW.LINK_ID,:NEW.LINK_HIST_ID);
    END IF;

    -- После добавления
    IF INSERTING() THEN
	  vID:=FOR_ZAKAZ.AddZakazHist(0,NULL,1,1,:NEW.ID,10,:NEW.CLIENT_NUMBER,
	      :NEW.CLIENT_DATE, :NEW.INPUT_NUMBER, :NEW.INPUT_DATE, :NEW.PROD_ID_NPR,
		  NULL, :NEW.STAN_ID, :NEW.POLUCH_ID, :NEW.POTREB_ID,:NEW.PRICE, :NEW.VES, :NEW.KOL,
		  :NEW.SPEED_VES, :NEW.SPEED_KOL, '',0,0,0,0,NULL,:NEW.BEGIN_DATE,:NEW.LINK_ID,:NEW.LINK_HIST_ID);
    END IF;
--  exception
--    when TABLE_MUTATING or NO_STATEMENT_PARSED then null;
  end;*/
  NULL;

END;
/


--
-- T99_LOG_ZAKAZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T99_LOG_ZAKAZ
/* ---------------------------------------------
  Генератор скриптов для MASTER
  PSV v1.04
--------------------------------------------- */
 AFTER DELETE OR INSERT OR UPDATE ON MASTER.ZAKAZ  FOR EACH ROW
DECLARE
  v_old ZAKAZ%ROWTYPE;
  v_new ZAKAZ%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.IS_AGENT := :OLD.IS_AGENT;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.CLIENT_NUMBER := :OLD.CLIENT_NUMBER;
    v_old.CLIENT_DATE := :OLD.CLIENT_DATE;
    v_old.INPUT_NUMBER := :OLD.INPUT_NUMBER;
    v_old.INPUT_DATE := :OLD.INPUT_DATE;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.IS_ACCEPT := :OLD.IS_ACCEPT;
    v_old.FILIAL_ID := :OLD.FILIAL_ID;
    v_old.PLAT_ID := :OLD.PLAT_ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.USL_OPL_ID := :OLD.USL_OPL_ID;
    v_old.LOAD_ABBR := :OLD.LOAD_ABBR;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.VETKA_ID := :OLD.VETKA_ID;
    v_old.POLUCH_ID := :OLD.POLUCH_ID;
    v_old.POTREB_ID := :OLD.POTREB_ID;
    v_old.POTREB_NAME := :OLD.POTREB_NAME;
    v_old.NEFTEBASA := :OLD.NEFTEBASA;
    v_old.PAYFORM_ID := :OLD.PAYFORM_ID;
    v_old.PLANSTRU_ID := :OLD.PLANSTRU_ID;
    v_old.PRICE_CLIENT := :OLD.PRICE_CLIENT;
    v_old.PRICE := :OLD.PRICE;
    v_old.VES := :OLD.VES;
    v_old.KOL := :OLD.KOL;
    v_old.SPEED_VES := :OLD.SPEED_VES;
    v_old.SPEED_KOL := :OLD.SPEED_KOL;
    v_old.NOM_ZD_LIST := :OLD.NOM_ZD_LIST;
    v_old.FACT_VES := :OLD.FACT_VES;
    v_old.FACT_KOL := :OLD.FACT_KOL;
    v_old.PRIM := :OLD.PRIM;
    v_old.GR4 := :OLD.GR4;
    v_old.LOAD_VES := :OLD.LOAD_VES;
    v_old.LOAD_KOL := :OLD.LOAD_KOL;
    v_old.ZAKAZ_PREV_ID := :OLD.ZAKAZ_PREV_ID;
    v_old.GOSPROG_ID := :OLD.GOSPROG_ID;
    v_old.GP_NAPR_ID := :OLD.GP_NAPR_ID;
    v_old.LUKDOG_ID := :OLD.LUKDOG_ID;
    v_old.IS_AUTO := :OLD.IS_AUTO;
    v_old.LINK_ID := :OLD.LINK_ID;
    v_old.LINK_HIST_ID := :OLD.LINK_HIST_ID;
    v_old.PERIOD_ID := :OLD.PERIOD_ID;
    v_old.TIP_CORP_ID := :OLD.TIP_CORP_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'ZAKAZ',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.IS_AGENT := :NEW.IS_AGENT;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.CLIENT_NUMBER := :NEW.CLIENT_NUMBER;
    v_new.CLIENT_DATE := :NEW.CLIENT_DATE;
    v_new.INPUT_NUMBER := :NEW.INPUT_NUMBER;
    v_new.INPUT_DATE := :NEW.INPUT_DATE;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.IS_ACCEPT := :NEW.IS_ACCEPT;
    v_new.FILIAL_ID := :NEW.FILIAL_ID;
    v_new.PLAT_ID := :NEW.PLAT_ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.USL_OPL_ID := :NEW.USL_OPL_ID;
    v_new.LOAD_ABBR := :NEW.LOAD_ABBR;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.VETKA_ID := :NEW.VETKA_ID;
    v_new.POLUCH_ID := :NEW.POLUCH_ID;
    v_new.POTREB_ID := :NEW.POTREB_ID;
    v_new.POTREB_NAME := :NEW.POTREB_NAME;
    v_new.NEFTEBASA := :NEW.NEFTEBASA;
    v_new.PAYFORM_ID := :NEW.PAYFORM_ID;
    v_new.PLANSTRU_ID := :NEW.PLANSTRU_ID;
    v_new.PRICE_CLIENT := :NEW.PRICE_CLIENT;
    v_new.PRICE := :NEW.PRICE;
    v_new.VES := :NEW.VES;
    v_new.KOL := :NEW.KOL;
    v_new.SPEED_VES := :NEW.SPEED_VES;
    v_new.SPEED_KOL := :NEW.SPEED_KOL;
    v_new.NOM_ZD_LIST := :NEW.NOM_ZD_LIST;
    v_new.FACT_VES := :NEW.FACT_VES;
    v_new.FACT_KOL := :NEW.FACT_KOL;
    v_new.PRIM := :NEW.PRIM;
    v_new.GR4 := :NEW.GR4;
    v_new.LOAD_VES := :NEW.LOAD_VES;
    v_new.LOAD_KOL := :NEW.LOAD_KOL;
    v_new.ZAKAZ_PREV_ID := :NEW.ZAKAZ_PREV_ID;
    v_new.GOSPROG_ID := :NEW.GOSPROG_ID;
    v_new.GP_NAPR_ID := :NEW.GP_NAPR_ID;
    v_new.LUKDOG_ID := :NEW.LUKDOG_ID;
    v_new.IS_AUTO := :NEW.IS_AUTO;
    v_new.LINK_ID := :NEW.LINK_ID;
    v_new.LINK_HIST_ID := :NEW.LINK_HIST_ID;
    v_new.PERIOD_ID := :NEW.PERIOD_ID;
    v_new.TIP_CORP_ID := :NEW.TIP_CORP_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'ZAKAZ',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'ZAKAZ',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'ZAKAZ',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_AGENT<>V_NEW.IS_AGENT THEN
            WriteStr:=':OLD.IS_AGENT=' || TO_CHAR(V_OLD.IS_AGENT) || ' :NEW.IS_AGENT=' || TO_CHAR(V_NEW.IS_AGENT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_PLAN<>V_NEW.DATE_PLAN THEN
            WriteStr:=':OLD.DATE_PLAN=' || TO_CHAR(V_OLD.DATE_PLAN,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_PLAN=' || TO_CHAR(V_NEW.DATE_PLAN,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CLIENT_NUMBER||' '<>V_NEW.CLIENT_NUMBER||' ' THEN
            WriteStr:=':OLD.CLIENT_NUMBER=' || (V_OLD.CLIENT_NUMBER) || ' :NEW.CLIENT_NUMBER=' || (V_NEW.CLIENT_NUMBER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CLIENT_DATE<>V_NEW.CLIENT_DATE THEN
            WriteStr:=':OLD.CLIENT_DATE=' || TO_CHAR(V_OLD.CLIENT_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.CLIENT_DATE=' || TO_CHAR(V_NEW.CLIENT_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.INPUT_NUMBER||' '<>V_NEW.INPUT_NUMBER||' ' THEN
            WriteStr:=':OLD.INPUT_NUMBER=' || (V_OLD.INPUT_NUMBER) || ' :NEW.INPUT_NUMBER=' || (V_NEW.INPUT_NUMBER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.INPUT_DATE<>V_NEW.INPUT_DATE THEN
            WriteStr:=':OLD.INPUT_DATE=' || TO_CHAR(V_OLD.INPUT_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.INPUT_DATE=' || TO_CHAR(V_NEW.INPUT_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BEGIN_DATE<>V_NEW.BEGIN_DATE THEN
            WriteStr:=':OLD.BEGIN_DATE=' || TO_CHAR(V_OLD.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.BEGIN_DATE=' || TO_CHAR(V_NEW.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_ACCEPT<>V_NEW.IS_ACCEPT THEN
            WriteStr:=':OLD.IS_ACCEPT=' || TO_CHAR(V_OLD.IS_ACCEPT) || ' :NEW.IS_ACCEPT=' || TO_CHAR(V_NEW.IS_ACCEPT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FILIAL_ID<>V_NEW.FILIAL_ID THEN
            WriteStr:=':OLD.FILIAL_ID=' || TO_CHAR(V_OLD.FILIAL_ID) || ' :NEW.FILIAL_ID=' || TO_CHAR(V_NEW.FILIAL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLAT_ID<>V_NEW.PLAT_ID THEN
            WriteStr:=':OLD.PLAT_ID=' || TO_CHAR(V_OLD.PLAT_ID) || ' :NEW.PLAT_ID=' || TO_CHAR(V_NEW.PLAT_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOG_ID<>V_NEW.DOG_ID THEN
            WriteStr:=':OLD.DOG_ID=' || TO_CHAR(V_OLD.DOG_ID) || ' :NEW.DOG_ID=' || TO_CHAR(V_NEW.DOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROD_ID_NPR||' '<>V_NEW.PROD_ID_NPR||' ' THEN
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.USL_OPL_ID<>V_NEW.USL_OPL_ID THEN
            WriteStr:=':OLD.USL_OPL_ID=' || TO_CHAR(V_OLD.USL_OPL_ID) || ' :NEW.USL_OPL_ID=' || TO_CHAR(V_NEW.USL_OPL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LOAD_ABBR||' '<>V_NEW.LOAD_ABBR||' ' THEN
            WriteStr:=':OLD.LOAD_ABBR=' || (V_OLD.LOAD_ABBR) || ' :NEW.LOAD_ABBR=' || (V_NEW.LOAD_ABBR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.STAN_ID<>V_NEW.STAN_ID THEN
            WriteStr:=':OLD.STAN_ID=' || TO_CHAR(V_OLD.STAN_ID) || ' :NEW.STAN_ID=' || TO_CHAR(V_NEW.STAN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VETKA_ID<>V_NEW.VETKA_ID THEN
            WriteStr:=':OLD.VETKA_ID=' || TO_CHAR(V_OLD.VETKA_ID) || ' :NEW.VETKA_ID=' || TO_CHAR(V_NEW.VETKA_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POLUCH_ID<>V_NEW.POLUCH_ID THEN
            WriteStr:=':OLD.POLUCH_ID=' || TO_CHAR(V_OLD.POLUCH_ID) || ' :NEW.POLUCH_ID=' || TO_CHAR(V_NEW.POLUCH_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POTREB_ID<>V_NEW.POTREB_ID THEN
            WriteStr:=':OLD.POTREB_ID=' || TO_CHAR(V_OLD.POTREB_ID) || ' :NEW.POTREB_ID=' || TO_CHAR(V_NEW.POTREB_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POTREB_NAME||' '<>V_NEW.POTREB_NAME||' ' THEN
            WriteStr:=':OLD.POTREB_NAME=' || (V_OLD.POTREB_NAME) || ' :NEW.POTREB_NAME=' || (V_NEW.POTREB_NAME) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NEFTEBASA||' '<>V_NEW.NEFTEBASA||' ' THEN
            WriteStr:=':OLD.NEFTEBASA=' || (V_OLD.NEFTEBASA) || ' :NEW.NEFTEBASA=' || (V_NEW.NEFTEBASA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PAYFORM_ID<>V_NEW.PAYFORM_ID THEN
            WriteStr:=':OLD.PAYFORM_ID=' || TO_CHAR(V_OLD.PAYFORM_ID) || ' :NEW.PAYFORM_ID=' || TO_CHAR(V_NEW.PAYFORM_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLANSTRU_ID<>V_NEW.PLANSTRU_ID THEN
            WriteStr:=':OLD.PLANSTRU_ID=' || TO_CHAR(V_OLD.PLANSTRU_ID) || ' :NEW.PLANSTRU_ID=' || TO_CHAR(V_NEW.PLANSTRU_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PRICE_CLIENT<>V_NEW.PRICE_CLIENT THEN
            WriteStr:=':OLD.PRICE_CLIENT=' || TO_CHAR(V_OLD.PRICE_CLIENT) || ' :NEW.PRICE_CLIENT=' || TO_CHAR(V_NEW.PRICE_CLIENT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PRICE<>V_NEW.PRICE THEN
            WriteStr:=':OLD.PRICE=' || TO_CHAR(V_OLD.PRICE) || ' :NEW.PRICE=' || TO_CHAR(V_NEW.PRICE) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES<>V_NEW.VES THEN
            WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KOL<>V_NEW.KOL THEN
            WriteStr:=':OLD.KOL=' || TO_CHAR(V_OLD.KOL) || ' :NEW.KOL=' || TO_CHAR(V_NEW.KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SPEED_VES<>V_NEW.SPEED_VES THEN
            WriteStr:=':OLD.SPEED_VES=' || TO_CHAR(V_OLD.SPEED_VES) || ' :NEW.SPEED_VES=' || TO_CHAR(V_NEW.SPEED_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SPEED_KOL<>V_NEW.SPEED_KOL THEN
            WriteStr:=':OLD.SPEED_KOL=' || TO_CHAR(V_OLD.SPEED_KOL) || ' :NEW.SPEED_KOL=' || TO_CHAR(V_NEW.SPEED_KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_ZD_LIST||' '<>V_NEW.NOM_ZD_LIST||' ' THEN
            WriteStr:=':OLD.NOM_ZD_LIST=' || (V_OLD.NOM_ZD_LIST) || ' :NEW.NOM_ZD_LIST=' || (V_NEW.NOM_ZD_LIST) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
/*          IF V_OLD.FACT_VES<>V_NEW.FACT_VES THEN
            WriteStr:=':OLD.FACT_VES=' || TO_CHAR(V_OLD.FACT_VES) || ' :NEW.FACT_VES=' || TO_CHAR(V_NEW.FACT_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FACT_KOL<>V_NEW.FACT_KOL THEN
            WriteStr:=':OLD.FACT_KOL=' || TO_CHAR(V_OLD.FACT_KOL) || ' :NEW.FACT_KOL=' || TO_CHAR(V_NEW.FACT_KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;*/
          IF V_OLD.PRIM||' '<>V_NEW.PRIM||' ' THEN
            WriteStr:=':OLD.PRIM=' || (V_OLD.PRIM) || ' :NEW.PRIM=' || (V_NEW.PRIM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GR4||' '<>V_NEW.GR4||' ' THEN
            WriteStr:=':OLD.GR4=' || (V_OLD.GR4) || ' :NEW.GR4=' || (V_NEW.GR4) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LOAD_VES<>V_NEW.LOAD_VES THEN
            WriteStr:=':OLD.LOAD_VES=' || TO_CHAR(V_OLD.LOAD_VES) || ' :NEW.LOAD_VES=' || TO_CHAR(V_NEW.LOAD_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LOAD_KOL<>V_NEW.LOAD_KOL THEN
            WriteStr:=':OLD.LOAD_KOL=' || TO_CHAR(V_OLD.LOAD_KOL) || ' :NEW.LOAD_KOL=' || TO_CHAR(V_NEW.LOAD_KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ZAKAZ_PREV_ID<>V_NEW.ZAKAZ_PREV_ID THEN
            WriteStr:=':OLD.ZAKAZ_PREV_ID=' || TO_CHAR(V_OLD.ZAKAZ_PREV_ID) || ' :NEW.ZAKAZ_PREV_ID=' || TO_CHAR(V_NEW.ZAKAZ_PREV_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GOSPROG_ID<>V_NEW.GOSPROG_ID THEN
            WriteStr:=':OLD.GOSPROG_ID=' || TO_CHAR(V_OLD.GOSPROG_ID) || ' :NEW.GOSPROG_ID=' || TO_CHAR(V_NEW.GOSPROG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GP_NAPR_ID<>V_NEW.GP_NAPR_ID THEN
            WriteStr:=':OLD.GP_NAPR_ID=' || TO_CHAR(V_OLD.GP_NAPR_ID) || ' :NEW.GP_NAPR_ID=' || TO_CHAR(V_NEW.GP_NAPR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LUKDOG_ID<>V_NEW.LUKDOG_ID THEN
            WriteStr:=':OLD.LUKDOG_ID=' || TO_CHAR(V_OLD.LUKDOG_ID) || ' :NEW.LUKDOG_ID=' || TO_CHAR(V_NEW.LUKDOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_AUTO<>V_NEW.IS_AUTO THEN
            WriteStr:=':OLD.IS_AUTO=' || TO_CHAR(V_OLD.IS_AUTO) || ' :NEW.IS_AUTO=' || TO_CHAR(V_NEW.IS_AUTO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LINK_ID<>V_NEW.LINK_ID THEN
            WriteStr:=':OLD.LINK_ID=' || TO_CHAR(V_OLD.LINK_ID) || ' :NEW.LINK_ID=' || TO_CHAR(V_NEW.LINK_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LINK_HIST_ID<>V_NEW.LINK_HIST_ID THEN
            WriteStr:=':OLD.LINK_HIST_ID=' || TO_CHAR(V_OLD.LINK_HIST_ID) || ' :NEW.LINK_HIST_ID=' || TO_CHAR(V_NEW.LINK_HIST_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PERIOD_ID<>V_NEW.PERIOD_ID THEN
            WriteStr:=':OLD.PERIOD_ID=' || TO_CHAR(V_OLD.PERIOD_ID) || ' :NEW.PERIOD_ID=' || TO_CHAR(V_NEW.PERIOD_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TIP_CORP_ID<>V_NEW.TIP_CORP_ID THEN
            WriteStr:=':OLD.TIP_CORP_ID=' || TO_CHAR(V_OLD.TIP_CORP_ID) || ' :NEW.TIP_CORP_ID=' || TO_CHAR(V_NEW.TIP_CORP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF WritePos=1 THEN
            DELETE FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG WHERE ID = LogId;
          END IF;  
          
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'ZAKAZ',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


ALTER TRIGGER MASTER.T99_LOG_ZAKAZ DISABLE;


--
-- T99_LOG_ZAKAZ_HIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T99_LOG_ZAKAZ_HIST
/* ---------------------------------------------
  Генератор скриптов для MASTER
  PSV v1.04
--------------------------------------------- */
 AFTER DELETE OR INSERT OR UPDATE ON MASTER.ZAKAZ_HIST  FOR EACH ROW
DECLARE
  v_old ZAKAZ_HIST%ROWTYPE;
  v_new ZAKAZ_HIST%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.ZAKAZ_ID := :OLD.ZAKAZ_ID;
    v_old.SORTBY := :OLD.SORTBY;
    v_old.STATUS_ZAKAZ_ID := :OLD.STATUS_ZAKAZ_ID;
    v_old.CLIENT_NUMBER := :OLD.CLIENT_NUMBER;
    v_old.CLIENT_DATE := :OLD.CLIENT_DATE;
    v_old.INPUT_NUMBER := :OLD.INPUT_NUMBER;
    v_old.INPUT_DATE := :OLD.INPUT_DATE;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.OLD_STAN_ID := :OLD.OLD_STAN_ID;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.POLUCH_ID := :OLD.POLUCH_ID;
    v_old.PRICE := :OLD.PRICE;
    v_old.VES := :OLD.VES;
    v_old.KOL := :OLD.KOL;
    v_old.SPEED_VES := :OLD.SPEED_VES;
    v_old.SPEED_KOL := :OLD.SPEED_KOL;
    v_old.NOM_ZD := :OLD.NOM_ZD;
    v_old.FACT_VES := :OLD.FACT_VES;
    v_old.FACT_KOL := :OLD.FACT_KOL;
    v_old.GU12_A_ID := :OLD.GU12_A_ID;
    v_old.IS_AUTO := :OLD.IS_AUTO;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.GRAFIK := :OLD.GRAFIK;
    v_old.POTREB_ID := :OLD.POTREB_ID;
    v_old.LOAD_VES := :OLD.LOAD_VES;
    v_old.LOAD_KOL := :OLD.LOAD_KOL;
    v_old.LINK_ID := :OLD.LINK_ID;
    v_old.LINK_HIST_ID := :OLD.LINK_HIST_ID;
    v_old.IS_AUTO_MONTH := :OLD.IS_AUTO_MONTH;
    v_old.KOD_ISU := :OLD.KOD_ISU;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
        SELECT LogId,'ZAKAZ_HIST',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D',EMPTY_CLOB()
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
          
      SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

      WritePos:=1;

      WriteStr:=':OLD.ZAKAZ_ID=' || TO_CHAR(V_OLD.ZAKAZ_ID) || ' :NEW.ZAKAZ_ID=' || TO_CHAR(V_NEW.ZAKAZ_ID) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.STATUS_ZAKAZ_ID=' || TO_CHAR(V_OLD.STATUS_ZAKAZ_ID) || ' :NEW.STATUS_ZAKAZ_ID=' || TO_CHAR(V_NEW.STATUS_ZAKAZ_ID) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.CLIENT_NUMBER=' || (V_OLD.CLIENT_NUMBER) || ' :NEW.CLIENT_NUMBER=' || (V_NEW.CLIENT_NUMBER) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.INPUT_NUMBER=' || (V_OLD.INPUT_NUMBER) || ' :NEW.INPUT_NUMBER=' || (V_NEW.INPUT_NUMBER) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.KOL=' || TO_CHAR(V_OLD.KOL) || ' :NEW.KOL=' || TO_CHAR(V_NEW.KOL) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.IS_AUTO=' || TO_CHAR(V_OLD.IS_AUTO) || ' :NEW.IS_AUTO=' || TO_CHAR(V_NEW.IS_AUTO) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.LOAD_VES=' || TO_CHAR(V_OLD.LOAD_VES) || ' :NEW.LOAD_VES=' || TO_CHAR(V_NEW.LOAD_VES) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.LOAD_KOL=' || TO_CHAR(V_OLD.LOAD_KOL) || ' :NEW.LOAD_KOL=' || TO_CHAR(V_NEW.LOAD_KOL) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.LINK_ID=' || TO_CHAR(V_OLD.LINK_ID) || ' :NEW.LINK_ID=' || TO_CHAR(V_NEW.LINK_ID) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.LINK_HIST_ID=' || TO_CHAR(V_OLD.LINK_HIST_ID) || ' :NEW.LINK_HIST_ID=' || TO_CHAR(V_NEW.LINK_HIST_ID) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.IS_AUTO_MONTH=' || TO_CHAR(V_OLD.IS_AUTO_MONTH) || ' :NEW.IS_AUTO_MONTH=' || TO_CHAR(V_NEW.IS_AUTO_MONTH) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
      WriteStr:=':OLD.KOD_ISU=' || (V_OLD.KOD_ISU) || ' :NEW.KOD_ISU=' || (V_NEW.KOD_ISU) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.ZAKAZ_ID := :NEW.ZAKAZ_ID;
    v_new.SORTBY := :NEW.SORTBY;
    v_new.STATUS_ZAKAZ_ID := :NEW.STATUS_ZAKAZ_ID;
    v_new.CLIENT_NUMBER := :NEW.CLIENT_NUMBER;
    v_new.CLIENT_DATE := :NEW.CLIENT_DATE;
    v_new.INPUT_NUMBER := :NEW.INPUT_NUMBER;
    v_new.INPUT_DATE := :NEW.INPUT_DATE;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.OLD_STAN_ID := :NEW.OLD_STAN_ID;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.POLUCH_ID := :NEW.POLUCH_ID;
    v_new.PRICE := :NEW.PRICE;
    v_new.VES := :NEW.VES;
    v_new.KOL := :NEW.KOL;
    v_new.SPEED_VES := :NEW.SPEED_VES;
    v_new.SPEED_KOL := :NEW.SPEED_KOL;
    v_new.NOM_ZD := :NEW.NOM_ZD;
    v_new.FACT_VES := :NEW.FACT_VES;
    v_new.FACT_KOL := :NEW.FACT_KOL;
    v_new.GU12_A_ID := :NEW.GU12_A_ID;
    v_new.IS_AUTO := :NEW.IS_AUTO;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.GRAFIK := :NEW.GRAFIK;
    v_new.POTREB_ID := :NEW.POTREB_ID;
    v_new.LOAD_VES := :NEW.LOAD_VES;
    v_new.LOAD_KOL := :NEW.LOAD_KOL;
    v_new.LINK_ID := :NEW.LINK_ID;
    v_new.LINK_HIST_ID := :NEW.LINK_HIST_ID;
    v_new.IS_AUTO_MONTH := :NEW.IS_AUTO_MONTH;
    v_new.KOD_ISU := :NEW.KOD_ISU;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'ZAKAZ_HIST',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'ZAKAZ_HIST',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'ZAKAZ_HIST',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ZAKAZ_ID<>V_NEW.ZAKAZ_ID THEN
            WriteStr:=':OLD.ZAKAZ_ID=' || TO_CHAR(V_OLD.ZAKAZ_ID) || ' :NEW.ZAKAZ_ID=' || TO_CHAR(V_NEW.ZAKAZ_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SORTBY<>V_NEW.SORTBY THEN
            WriteStr:=':OLD.SORTBY=' || TO_CHAR(V_OLD.SORTBY) || ' :NEW.SORTBY=' || TO_CHAR(V_NEW.SORTBY) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.STATUS_ZAKAZ_ID<>V_NEW.STATUS_ZAKAZ_ID THEN
            WriteStr:=':OLD.STATUS_ZAKAZ_ID=' || TO_CHAR(V_OLD.STATUS_ZAKAZ_ID) || ' :NEW.STATUS_ZAKAZ_ID=' || TO_CHAR(V_NEW.STATUS_ZAKAZ_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CLIENT_NUMBER||' '<>V_NEW.CLIENT_NUMBER||' ' THEN
            WriteStr:=':OLD.CLIENT_NUMBER=' || (V_OLD.CLIENT_NUMBER) || ' :NEW.CLIENT_NUMBER=' || (V_NEW.CLIENT_NUMBER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CLIENT_DATE<>V_NEW.CLIENT_DATE THEN
            WriteStr:=':OLD.CLIENT_DATE=' || TO_CHAR(V_OLD.CLIENT_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.CLIENT_DATE=' || TO_CHAR(V_NEW.CLIENT_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.INPUT_NUMBER||' '<>V_NEW.INPUT_NUMBER||' ' THEN
            WriteStr:=':OLD.INPUT_NUMBER=' || (V_OLD.INPUT_NUMBER) || ' :NEW.INPUT_NUMBER=' || (V_NEW.INPUT_NUMBER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.INPUT_DATE<>V_NEW.INPUT_DATE THEN
            WriteStr:=':OLD.INPUT_DATE=' || TO_CHAR(V_OLD.INPUT_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.INPUT_DATE=' || TO_CHAR(V_NEW.INPUT_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROD_ID_NPR||' '<>V_NEW.PROD_ID_NPR||' ' THEN
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.OLD_STAN_ID<>V_NEW.OLD_STAN_ID THEN
            WriteStr:=':OLD.OLD_STAN_ID=' || TO_CHAR(V_OLD.OLD_STAN_ID) || ' :NEW.OLD_STAN_ID=' || TO_CHAR(V_NEW.OLD_STAN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.STAN_ID<>V_NEW.STAN_ID THEN
            WriteStr:=':OLD.STAN_ID=' || TO_CHAR(V_OLD.STAN_ID) || ' :NEW.STAN_ID=' || TO_CHAR(V_NEW.STAN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POLUCH_ID<>V_NEW.POLUCH_ID THEN
            WriteStr:=':OLD.POLUCH_ID=' || TO_CHAR(V_OLD.POLUCH_ID) || ' :NEW.POLUCH_ID=' || TO_CHAR(V_NEW.POLUCH_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PRICE<>V_NEW.PRICE THEN
            WriteStr:=':OLD.PRICE=' || TO_CHAR(V_OLD.PRICE) || ' :NEW.PRICE=' || TO_CHAR(V_NEW.PRICE) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES<>V_NEW.VES THEN
            WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KOL<>V_NEW.KOL THEN
            WriteStr:=':OLD.KOL=' || TO_CHAR(V_OLD.KOL) || ' :NEW.KOL=' || TO_CHAR(V_NEW.KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SPEED_VES<>V_NEW.SPEED_VES THEN
            WriteStr:=':OLD.SPEED_VES=' || TO_CHAR(V_OLD.SPEED_VES) || ' :NEW.SPEED_VES=' || TO_CHAR(V_NEW.SPEED_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SPEED_KOL<>V_NEW.SPEED_KOL THEN
            WriteStr:=':OLD.SPEED_KOL=' || TO_CHAR(V_OLD.SPEED_KOL) || ' :NEW.SPEED_KOL=' || TO_CHAR(V_NEW.SPEED_KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_ZD||' '<>V_NEW.NOM_ZD||' ' THEN
            WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
/*          IF V_OLD.FACT_VES<>V_NEW.FACT_VES THEN
            WriteStr:=':OLD.FACT_VES=' || TO_CHAR(V_OLD.FACT_VES) || ' :NEW.FACT_VES=' || TO_CHAR(V_NEW.FACT_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FACT_KOL<>V_NEW.FACT_KOL THEN
            WriteStr:=':OLD.FACT_KOL=' || TO_CHAR(V_OLD.FACT_KOL) || ' :NEW.FACT_KOL=' || TO_CHAR(V_NEW.FACT_KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;*/
          IF V_OLD.GU12_A_ID<>V_NEW.GU12_A_ID THEN
            WriteStr:=':OLD.GU12_A_ID=' || TO_CHAR(V_OLD.GU12_A_ID) || ' :NEW.GU12_A_ID=' || TO_CHAR(V_NEW.GU12_A_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_AUTO<>V_NEW.IS_AUTO THEN
            WriteStr:=':OLD.IS_AUTO=' || TO_CHAR(V_OLD.IS_AUTO) || ' :NEW.IS_AUTO=' || TO_CHAR(V_NEW.IS_AUTO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BEGIN_DATE<>V_NEW.BEGIN_DATE THEN
            WriteStr:=':OLD.BEGIN_DATE=' || TO_CHAR(V_OLD.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.BEGIN_DATE=' || TO_CHAR(V_NEW.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GRAFIK||' '<>V_NEW.GRAFIK||' ' THEN
            WriteStr:=':OLD.GRAFIK=' || (V_OLD.GRAFIK) || ' :NEW.GRAFIK=' || (V_NEW.GRAFIK) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POTREB_ID<>V_NEW.POTREB_ID THEN
            WriteStr:=':OLD.POTREB_ID=' || TO_CHAR(V_OLD.POTREB_ID) || ' :NEW.POTREB_ID=' || TO_CHAR(V_NEW.POTREB_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LOAD_VES<>V_NEW.LOAD_VES THEN
            WriteStr:=':OLD.LOAD_VES=' || TO_CHAR(V_OLD.LOAD_VES) || ' :NEW.LOAD_VES=' || TO_CHAR(V_NEW.LOAD_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LOAD_KOL<>V_NEW.LOAD_KOL THEN
            WriteStr:=':OLD.LOAD_KOL=' || TO_CHAR(V_OLD.LOAD_KOL) || ' :NEW.LOAD_KOL=' || TO_CHAR(V_NEW.LOAD_KOL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LINK_ID<>V_NEW.LINK_ID THEN
            WriteStr:=':OLD.LINK_ID=' || TO_CHAR(V_OLD.LINK_ID) || ' :NEW.LINK_ID=' || TO_CHAR(V_NEW.LINK_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LINK_HIST_ID<>V_NEW.LINK_HIST_ID THEN
            WriteStr:=':OLD.LINK_HIST_ID=' || TO_CHAR(V_OLD.LINK_HIST_ID) || ' :NEW.LINK_HIST_ID=' || TO_CHAR(V_NEW.LINK_HIST_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_AUTO_MONTH<>V_NEW.IS_AUTO_MONTH THEN
            WriteStr:=':OLD.IS_AUTO_MONTH=' || TO_CHAR(V_OLD.IS_AUTO_MONTH) || ' :NEW.IS_AUTO_MONTH=' || TO_CHAR(V_NEW.IS_AUTO_MONTH) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KOD_ISU||' '<>V_NEW.KOD_ISU||' ' THEN
            WriteStr:=':OLD.KOD_ISU=' || (V_OLD.KOD_ISU) || ' :NEW.KOD_ISU=' || (V_NEW.KOD_ISU) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        
          IF WritePos=1 THEN
            DELETE FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG WHERE ID = LogId;
          END IF;  
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
          SELECT LogId,'ZAKAZ_HIST',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I',EMPTY_CLOB()
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

        SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

        WritePos:=1;

        WriteStr:=':OLD.ZAKAZ_ID=' || TO_CHAR(V_OLD.ZAKAZ_ID) || ' :NEW.ZAKAZ_ID=' || TO_CHAR(V_NEW.ZAKAZ_ID) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.STATUS_ZAKAZ_ID=' || TO_CHAR(V_OLD.STATUS_ZAKAZ_ID) || ' :NEW.STATUS_ZAKAZ_ID=' || TO_CHAR(V_NEW.STATUS_ZAKAZ_ID) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.CLIENT_NUMBER=' || (V_OLD.CLIENT_NUMBER) || ' :NEW.CLIENT_NUMBER=' || (V_NEW.CLIENT_NUMBER) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.INPUT_NUMBER=' || (V_OLD.INPUT_NUMBER) || ' :NEW.INPUT_NUMBER=' || (V_NEW.INPUT_NUMBER) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.KOL=' || TO_CHAR(V_OLD.KOL) || ' :NEW.KOL=' || TO_CHAR(V_NEW.KOL) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.IS_AUTO=' || TO_CHAR(V_OLD.IS_AUTO) || ' :NEW.IS_AUTO=' || TO_CHAR(V_NEW.IS_AUTO) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.LOAD_VES=' || TO_CHAR(V_OLD.LOAD_VES) || ' :NEW.LOAD_VES=' || TO_CHAR(V_NEW.LOAD_VES) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.LOAD_KOL=' || TO_CHAR(V_OLD.LOAD_KOL) || ' :NEW.LOAD_KOL=' || TO_CHAR(V_NEW.LOAD_KOL) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.LINK_ID=' || TO_CHAR(V_OLD.LINK_ID) || ' :NEW.LINK_ID=' || TO_CHAR(V_NEW.LINK_ID) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.LINK_HIST_ID=' || TO_CHAR(V_OLD.LINK_HIST_ID) || ' :NEW.LINK_HIST_ID=' || TO_CHAR(V_NEW.LINK_HIST_ID) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.IS_AUTO_MONTH=' || TO_CHAR(V_OLD.IS_AUTO_MONTH) || ' :NEW.IS_AUTO_MONTH=' || TO_CHAR(V_NEW.IS_AUTO_MONTH) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
        WriteStr:=':OLD.KOD_ISU=' || (V_OLD.KOD_ISU) || ' :NEW.KOD_ISU=' || (V_NEW.KOD_ISU) || CHR(13);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
        WritePos:=WritePos+LENGTH(WriteStr);
      END IF;
    END IF;

  END IF;
END;
/


ALTER TRIGGER MASTER.T99_LOG_ZAKAZ_HIST DISABLE;


--
-- QUEST_SL_ALL_INDEX_COLUMNS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_ALL_INDEX_COLUMNS FOR SQLLAB.QUEST_SL_ALL_INDEX_COLUMNS;


--
-- QUEST_SL_BKGD_JOB  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_BKGD_JOB FOR SQLLAB.QUEST_SL_BKGD_JOB;


--
-- QUEST_SL_COLLECTION_DEFINITION  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_COLLECTION_DEFINITION FOR SQLLAB.QUEST_SL_COLLECTION_DEFINITION;


--
-- QUEST_SL_COLLECTION_DEF_REPOS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_COLLECTION_DEF_REPOS FOR SQLLAB.QUEST_SL_COLLECTION_DEF_REPOS;


--
-- QUEST_SL_COLLECTION_REPOSITORY  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_COLLECTION_REPOSITORY FOR SQLLAB.QUEST_SL_COLLECTION_REPOSITORY;


--
-- QUEST_SL_CREATE_ROLE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_CREATE_ROLE FOR SQLLAB.QUEST_SL_CREATE_ROLE;


--
-- QUEST_SL_CREATE_SQLTABLE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_CREATE_SQLTABLE FOR SQLLAB.QUEST_SL_CREATE_SQLTABLE;


--
-- QUEST_SL_ERRORS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_ERRORS FOR SQLLAB.QUEST_SL_ERRORS;


--
-- QUEST_SL_EXPLAIN  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_EXPLAIN FOR SQLLAB.QUEST_SL_EXPLAIN;


--
-- QUEST_SL_EXPLAIN_PICK  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_EXPLAIN_PICK FOR SQLLAB.QUEST_SL_EXPLAIN_PICK;


--
-- QUEST_SL_EXPLAIN_TREE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_EXPLAIN_TREE FOR SQLLAB.QUEST_SL_EXPLAIN_TREE;


--
-- QUEST_SL_GETTOPSQL  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_GETTOPSQL FOR SQLLAB.QUEST_SL_GETTOPSQL;


--
-- QUEST_SL_LAB_TREE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_LAB_TREE FOR SQLLAB.QUEST_SL_LAB_TREE;


--
-- QUEST_SL_PICK_PLAN_TABLES  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_PICK_PLAN_TABLES FOR SQLLAB.QUEST_SL_PICK_PLAN_TABLES;


--
-- QUEST_SL_PLAN_TABLES  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_PLAN_TABLES FOR SQLLAB.QUEST_SL_PLAN_TABLES;


--
-- QUEST_SL_QUERY_DEFINITIONS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_QUERY_DEFINITIONS FOR SQLLAB.QUEST_SL_QUERY_DEFINITIONS;


--
-- QUEST_SL_QUERY_DEF_REPOSITORY  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_QUERY_DEF_REPOSITORY FOR SQLLAB.QUEST_SL_QUERY_DEF_REPOSITORY;


--
-- QUEST_SL_RENAME_COLL  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_RENAME_COLL FOR SQLLAB.QUEST_SL_RENAME_COLL;


--
-- QUEST_SL_RENAME_REP  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_RENAME_REP FOR TOADSQLLAB.QUEST_SL_RENAME_REP;


--
-- QUEST_SL_REPOS_BIND_VALUES  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_BIND_VALUES FOR SQLLAB.QUEST_SL_REPOS_BIND_VALUES;


--
-- QUEST_SL_REPOSITORY_EXPLAIN  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOSITORY_EXPLAIN FOR SQLLAB.QUEST_SL_REPOSITORY_EXPLAIN;


--
-- QUEST_SL_REPOSITORY_SQLAREA  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOSITORY_SQLAREA FOR SQLLAB.QUEST_SL_REPOSITORY_SQLAREA;


--
-- QUEST_SL_REPOSITORY_SQLTEXT  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOSITORY_SQLTEXT FOR SQLLAB.QUEST_SL_REPOSITORY_SQLTEXT;


--
-- QUEST_SL_REPOSITORY_STATISTICS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOSITORY_STATISTICS FOR SQLLAB.QUEST_SL_REPOSITORY_STATISTICS;


--
-- QUEST_SL_REPOSITORY_TRANS_INFO  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOSITORY_TRANS_INFO FOR SQLLAB.QUEST_SL_REPOSITORY_TRANS_INFO;


--
-- QUEST_SL_REPOS_LAB_DETAILS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_LAB_DETAILS FOR SQLLAB.QUEST_SL_REPOS_LAB_DETAILS;


--
-- QUEST_SL_REPOS_PICK_DETAILS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_PICK_DETAILS FOR SQLLAB.QUEST_SL_REPOS_PICK_DETAILS;


--
-- QUEST_SL_REPOS_PICK_PLAN_TABLE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_PICK_PLAN_TABLE FOR SQLLAB.QUEST_SL_REPOS_PICK_PLAN_TABLE;


--
-- QUEST_SL_REPOS_ROOT  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_ROOT FOR SQLLAB.QUEST_SL_REPOS_ROOT;


--
-- QUEST_SL_REPOS_SAVE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_SAVE FOR SQLLAB.QUEST_SL_REPOS_SAVE;


--
-- QUEST_SL_REPOS_SGA_DETAILS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_SGA_DETAILS FOR SQLLAB.QUEST_SL_REPOS_SGA_DETAILS;


--
-- QUEST_SL_REPOS_SGA_STATISTICS  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_REPOS_SGA_STATISTICS FOR SQLLAB.QUEST_SL_REPOS_SGA_STATISTICS;


--
-- QUEST_SL_SCHEDULED_COLLECTOR  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_SCHEDULED_COLLECTOR FOR SQLLAB.QUEST_SL_SCHEDULED_COLLECTOR;


--
-- QUEST_SL_SQLAREA  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_SQLAREA FOR SQLLAB.QUEST_SL_SQLAREA;


--
-- QUEST_SL_SQLTEXT  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_SQLTEXT FOR SQLLAB.QUEST_SL_SQLTEXT;


--
-- QUEST_SL_TOPSQL  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_TOPSQL FOR SQLLAB.QUEST_SL_TOPSQL;


--
-- QUEST_SL_TRACE_FILE_IO  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_TRACE_FILE_IO FOR SQLLAB.QUEST_SL_TRACE_FILE_IO;


--
-- QUEST_SL_TRACE_PARSE  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_TRACE_PARSE FOR SQLLAB.QUEST_SL_TRACE_PARSE;


--
-- QUEST_SL_USER  (Synonym) 
--
CREATE SYNONYM MASTER.QUEST_SL_USER FOR SQLLAB.QUEST_SL_USER;


--
-- APP_USERS  (Synonym) 
--
CREATE PUBLIC SYNONYM APP_USERS FOR MASTER.APP_USERS;


--
-- REPORTS  (Synonym) 
--
CREATE PUBLIC SYNONYM REPORTS FOR MASTER.REPORTS;


--
-- TEMPVARI  (Synonym) 
--
CREATE PUBLIC SYNONYM TEMPVARI FOR MASTER.TEMPVARI;


--
-- TOAD_PLAN_SQL  (Synonym) 
--
CREATE PUBLIC SYNONYM TOAD_PLAN_SQL FOR MASTER.TOAD_PLAN_SQL;


--
-- USER_RIGHTS  (Synonym) 
--
CREATE PUBLIC SYNONYM USER_RIGHTS FOR MASTER.USER_RIGHTS;


--
-- V_TEMPTABLE  (Synonym) 
--
CREATE PUBLIC SYNONYM V_TEMPTABLE FOR MASTER.V_TEMPTABLE;


--
-- V_TEMPVARI  (Synonym) 
--
CREATE PUBLIC SYNONYM V_TEMPVARI FOR MASTER.V_TEMPVARI;


--
-- JOB141  (Job) 
--
DECLARE
  X NUMBER;
  user_name varchar2(30);
BEGIN
  select user into user_name from dual;
  execute immediate 'alter session set current_schema = MASTER';
  BEGIN
    SYS.DBMS_JOB.SUBMIT
    ( job       => X 
     ,what      => '
begin
  LINK_UNP_TO_SNP_AUTO(trunc(trunc(sysdate,''month'')-1,''month''));
end;  

begin
  LINK_UNP_TO_SNP_AUTO(trunc(sysdate,''month''));
end;  '
     ,next_date => SYSDATE+30/1440 
     ,interval  => 'SYSDATE+30/1440 '
     ,no_parse  => TRUE
    );
    execute immediate 'alter session set current_schema = ' || user_name ;
  EXCEPTION
    WHEN OTHERS THEN 
      execute immediate 'alter session set current_schema = ' || user_name ;
      RAISE;
  END;
  COMMIT;
END;
/



--
-- JOB129  (Job) 
--
DECLARE
  X NUMBER;
  user_name varchar2(30);
BEGIN
  select user into user_name from dual;
  execute immediate 'alter session set current_schema = MASTER';
  BEGIN
    SYS.DBMS_JOB.SUBMIT
    ( job       => X 
     ,what      => 'MASTER.FOR_TEMP.CLEAR_TEMP_VARI;'
     ,next_date => TRUNC(SYSDATE+1)
     ,interval  => 'TRUNC(SYSDATE+1)'
     ,no_parse  => TRUE
    );
    execute immediate 'alter session set current_schema = ' || user_name ;
  EXCEPTION
    WHEN OTHERS THEN 
      execute immediate 'alter session set current_schema = ' || user_name ;
      RAISE;
  END;
  COMMIT;
END;
/



--
-- JOB130  (Job) 
--
DECLARE
  X NUMBER;
  user_name varchar2(30);
BEGIN
  select user into user_name from dual;
  execute immediate 'alter session set current_schema = MASTER';
  BEGIN
    SYS.DBMS_JOB.SUBMIT
    ( job       => X 
     ,what      => 'sys.dbms_refresh.refresh(''"MASTER"."UNP_PASPORT"'');'
     ,next_date => SYSDATE + 1/144 
     ,interval  => 'SYSDATE + 1/144 '
     ,no_parse  => TRUE
    );
    execute immediate 'alter session set current_schema = ' || user_name ;
  EXCEPTION
    WHEN OTHERS THEN 
      execute immediate 'alter session set current_schema = ' || user_name ;
      RAISE;
  END;
  COMMIT;
END;
/



--
-- JOB131  (Job) 
--
DECLARE
  X NUMBER;
  user_name varchar2(30);
BEGIN
  select user into user_name from dual;
  execute immediate 'alter session set current_schema = MASTER';
  BEGIN
    SYS.DBMS_JOB.SUBMIT
    ( job       => X 
     ,what      => 'master.FOR_PARUS.Renew_dog_PARUS;'
     ,next_date => SYSDATE+1/6
     ,interval  => 'SYSDATE+1/6'
     ,no_parse  => TRUE
    );
    execute immediate 'alter session set current_schema = ' || user_name ;
  EXCEPTION
    WHEN OTHERS THEN 
      execute immediate 'alter session set current_schema = ' || user_name ;
      RAISE;
  END;
  COMMIT;
END;
/



--
-- JOB132  (Job) 
--
DECLARE
  X NUMBER;
  user_name varchar2(30);
BEGIN
  select user into user_name from dual;
  execute immediate 'alter session set current_schema = MASTER';
  BEGIN
    SYS.DBMS_JOB.SUBMIT
    ( job       => X 
     ,what      => 'master.FOR_ZAKAZ.LOAD_CONSORDS(NULL,NULL);
 '
     ,next_date => TRUNC(SYSDATE+1)+23/24
     ,interval  => 'TRUNC(SYSDATE+1)+23/24'
     ,no_parse  => TRUE
    );
    execute immediate 'alter session set current_schema = ' || user_name ;
  EXCEPTION
    WHEN OTHERS THEN 
      execute immediate 'alter session set current_schema = ' || user_name ;
      RAISE;
  END;
  COMMIT;
END;
/



--
-- AZC_SYS_COMM  (Table) 
--
CREATE TABLE MASTER.AZC_SYS_COMM
(
  ID        NUMBER                              NOT NULL,
  ID_PAGE   NUMBER,
  ID_FIELD  NUMBER,
  ORDER_    NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- BILL_POS_PREPAY  (Table) 
--
CREATE TABLE MASTER.BILL_POS_PREPAY
(
  NOM_DOK             NUMBER(10)                NOT NULL,
  BILL_POS_PREPAY_ID  NUMBER(10)                NOT NULL,
  VES                 NUMBER(15,6)              DEFAULT 0,
  CENA_BN             NUMBER(15,6)              DEFAULT 0,
  CENA                NUMBER(15,6)              DEFAULT 0,
  SUMMA_BN            NUMBER(20,6)              DEFAULT 0,
  SUMMA_AKCIZ         NUMBER(20,6)              DEFAULT 0,
  SUMMA_NDS20         NUMBER(20,6)              DEFAULT 0,
  SUMMA_GSM25         NUMBER(20,6)              DEFAULT 0,
  SUMMA               NUMBER(20,6)              DEFAULT 0,
  DATE_REALIZ         DATE,
  PROD_ID_NPR         VARCHAR2(5 BYTE),
  OWNERSHIP_ID        NUMBER(3),
  IS_AGENT            NUMBER(1),
  IS_LUK              NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.NOM_DOK IS 'Счет на предоплату';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.BILL_POS_PREPAY_ID IS 'Позиция счета на предоплату';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.VES IS 'Вес';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.CENA_BN IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.CENA IS 'Отпускная цена';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.SUMMA_BN IS 'Сумма без налогов';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.SUMMA_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.SUMMA_NDS20 IS 'НДС';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.SUMMA_GSM25 IS 'ГСМ';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.SUMMA IS 'Сумма с налогами';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.DATE_REALIZ IS 'Дата реализации';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.IS_AGENT IS 'Группа договоров';

COMMENT ON COLUMN MASTER.BILL_POS_PREPAY.IS_LUK IS 'Позиция счета от ЛУКОЙЛ''а';



--
-- EUL_ACCESS_PRIVS  (Table) 
--
CREATE TABLE MASTER.EUL_ACCESS_PRIVS
(
  AP_ID           NUMBER(10)                    NOT NULL,
  AP_TYPE         VARCHAR2(10 BYTE),
  AP_EU_ID        NUMBER(10),
  GP_APP_ID       NUMBER(10),
  GBA_BA_ID       NUMBER(10),
  GBA_ADMIN_PRIV  NUMBER(1),
  NOTM            NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BA_OBJ_LINKS  (Table) 
--
CREATE TABLE MASTER.EUL_BA_OBJ_LINKS
(
  BOL_ID        NUMBER(10)                      NOT NULL,
  BOL_BA_ID     NUMBER(10),
  BOL_OBJ_ID    NUMBER(10),
  BOL_SEQUENCE  NUMBER(22),
  NOTM          NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BATCH_REPORTS  (Table) 
--
CREATE TABLE MASTER.EUL_BATCH_REPORTS
(
  BR_ID               NUMBER(10)                NOT NULL,
  BR_NAME             VARCHAR2(100 BYTE),
  BR_WORKBOOK_NAME    VARCHAR2(240 BYTE),
  BR_DESCRIPTION      VARCHAR2(240 BYTE),
  BR_NEXT_RUN_DATE    DATE,
  BR_JOB_ID           NUMBER(22),
  BR_EXPIRY           NUMBER(22),
  BR_COMPLETION_DATE  DATE,
  BR_NUM_FREQ_UNITS   NUMBER(22),
  BR_EU_ID            NUMBER(10),
  BR_RFU_ID           NUMBER(10),
  BR_AUTO_REFRESH     NUMBER(1),
  BR_REPORT_SCHEMA    VARCHAR2(64 BYTE),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BATCH_SHEETS  (Table) 
--
CREATE TABLE MASTER.EUL_BATCH_SHEETS
(
  BS_ID          NUMBER(10)                     NOT NULL,
  BS_BR_ID       NUMBER(10),
  BS_SHEET_NAME  VARCHAR2(240 BYTE),
  BS_SHEET_ID    VARCHAR2(240 BYTE),
  NOTM           NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BR_RUNS  (Table) 
--
CREATE TABLE MASTER.EUL_BR_RUNS
(
  BRR_ID             NUMBER(10)                 NOT NULL,
  BRR_BR_ID          NUMBER(10),
  BRR_RUN_NUMBER     NUMBER(22),
  BRR_STATE          NUMBER(2),
  BRR_RUN_DATE       DATE,
  BRR_SVR_ERR_CODE   NUMBER(22),
  BRR_SVR_ERR_TEXT   VARCHAR2(240 BYTE),
  BRR_ACT_ELAP_TIME  NUMBER(22),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_DBH_NODES  (Table) 
--
CREATE TABLE MASTER.EUL_DBH_NODES
(
  DHN_ID            NUMBER(10)                  NOT NULL,
  DHN_NAME          VARCHAR2(100 BYTE),
  DHN_DESCRIPTION   VARCHAR2(240 BYTE),
  DHN_DATA_FMT_MSK  VARCHAR2(100 BYTE),
  DHN_DISP_FMT_MSK  VARCHAR2(100 BYTE),
  DHN_HI_ID         NUMBER(10),
  NOTM              NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_FUN_ARGUMENTS  (Table) 
--
CREATE TABLE MASTER.EUL_FUN_ARGUMENTS
(
  FA_ID              NUMBER(10)                 NOT NULL,
  FA_NAME_S          VARCHAR2(100 BYTE),
  FA_DESCRIPTION_MN  NUMBER(10),
  FA_NAME_MN         NUMBER(10),
  FA_DESCRIPTION_S   VARCHAR2(240 BYTE),
  FA_DATA_TYPE       NUMBER(2),
  FA_OPTIONAL        NUMBER(1),
  FA_POSITION        NUMBER(22),
  FA_FUN_ID          NUMBER(10),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_HI_SEGMENTS  (Table) 
--
CREATE TABLE MASTER.EUL_HI_SEGMENTS
(
  HS_ID              NUMBER(10)                 NOT NULL,
  HS_TYPE            VARCHAR2(10 BYTE),
  DHS_HI_ID          NUMBER(10),
  DHS_DHN_ID_CHILD   NUMBER(10),
  DHS_DHN_ID_PARENT  NUMBER(10),
  IHS_HN_ID_CHILD    NUMBER(10),
  IHS_HN_ID_PARENT   NUMBER(10),
  IHS_HI_ID          NUMBER(10),
  IHS_JC_ID          NUMBER(10),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_KEY_CONS  (Table) 
--
CREATE TABLE MASTER.EUL_KEY_CONS
(
  KEY_ID            NUMBER(10)                  NOT NULL,
  KEY_TYPE          VARCHAR2(10 BYTE),
  KEY_NAME          VARCHAR2(100 BYTE),
  KEY_DESCRIPTION   VARCHAR2(240 BYTE),
  KEY_EXT_KEY       VARCHAR2(64 BYTE),
  KEY_OBJ_ID        NUMBER(10),
  FK_KEY_ID_REMOTE  NUMBER(10),
  FK_OBJ_ID_REMOTE  NUMBER(10),
  FK_ONE_TO_ONE     NUMBER(1),
  FK_OUTER_DETAIL   NUMBER(1),
  FK_OUTER_MASTER   NUMBER(1),
  FK_SUMMARY_COUNT  NUMBER(22),
  FK_MANDATORY      NUMBER(1),
  NOTM              NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_OBJ_DEPS  (Table) 
--
CREATE TABLE MASTER.EUL_OBJ_DEPS
(
  OD_ID           NUMBER(10)                    NOT NULL,
  OD_OBJ_ID_FROM  NUMBER(10),
  OD_OBJ_ID_TO    NUMBER(10),
  NOTM            NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_SUMMARY_OBJS  (Table) 
--
CREATE TABLE MASTER.EUL_SUMMARY_OBJS
(
  SUMO_ID             NUMBER(10)                NOT NULL,
  SUMO_TYPE           VARCHAR2(10 BYTE),
  SUMO_INTERNAL       NUMBER(1),
  SUMO_ITEM_DELETED   NUMBER(1),
  SUMO_ITEM_MODIFIED  NUMBER(1),
  SUMO_JOIN_STATE     NUMBER(1),
  SUMO_VALIDITY       NUMBER(1),
  SUMO_EXT_OBJECT     VARCHAR2(64 BYTE),
  SUMO_EXT_OWNER      VARCHAR2(64 BYTE),
  SUMO_EXT_DB_LINK    VARCHAR2(64 BYTE),
  SBO_SRS_ID          NUMBER(10),
  SBO_NAME            VARCHAR2(100 BYTE),
  SBO_DESCRIPTION     VARCHAR2(240 BYTE),
  SBO_MAX_ITEM_COMB   NUMBER(22),
  SDO_SBO_ID          NUMBER(10),
  SDO_NUM_JOINS       NUMBER(22),
  SDO_NUM_USGS        NUMBER(22),
  SDO_NUM_AXIS_ITEMS  NUMBER(22),
  SDO_NUM_ROWS        NUMBER(22),
  SDO_BITMAP_POS      NUMBER(22),
  SDO_OBJECT_SQL1     VARCHAR2(250 BYTE),
  SDO_OBJECT_SQL2     VARCHAR2(250 BYTE),
  SDO_OBJECT_SQL3     VARCHAR2(250 BYTE),
  SDO_LAST_REFRESH    DATE,
  SDO_STATE           NUMBER(2),
  SDO_SVR_ERR_CODE    NUMBER(22),
  SDO_SVR_ERR_TEXT    VARCHAR2(240 BYTE),
  NMSDO_SDO_ID        NUMBER(10),
  MSDO_TABLE_NAME     VARCHAR2(64 BYTE),
  MSDO_TABLE_OWNER    VARCHAR2(64 BYTE),
  MSDO_DATABASE_LINK  VARCHAR2(64 BYTE),
  MSDO_COMMIT_SIZE    NUMBER(22),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- INF2PB_ACCOUNTS  (Table) 
--
CREATE TABLE MASTER.INF2PB_ACCOUNTS
(
  ID             NUMBER(10)                     NOT NULL,
  INF2PB_SCH_ID  NUMBER(10),
  CONT_ID        VARCHAR2(10 BYTE),
  RAS_ID         VARCHAR2(10 BYTE),
  DEB            VARCHAR2(4 BYTE),
  KRED           VARCHAR2(4 BYTE),
  PROMIS         VARCHAR2(1 BYTE),
  PAY_TYPE       VARCHAR2(3 BYTE),
  ACC_CODE       VARCHAR2(21 BYTE),
  STATUS         VARCHAR2(1 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKALLOW  (Table) 
--
CREATE TABLE MASTER.JKALLOW
(
  JKA_DATE    DATE                              NOT NULL,
  MESTO_ID    NUMBER(2)                         NOT NULL,
  SVED_NUM    NUMBER(6)                         NOT NULL,
  DATE_ALLOW  DATE,
  SROK_ALLOW  NUMBER(3),
  USERNAME    VARCHAR2(20 BYTE),
  SVED_ID     VARCHAR2(9 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKCOMMIT  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT
(
  JKC_SES_ID   NUMBER(10)                       NOT NULL,
  MESTO_ID     NUMBER(2)                        NOT NULL,
  NOM_ZD       VARCHAR2(12 BYTE)                NOT NULL,
  SVED_NUM     NUMBER(6)                        NOT NULL,
  SVED_DATE    DATE,
  DATE_EDIT    DATE,
  DATE_OFORML  DATE,
  SVED_CNT     NUMBER(4),
  SVED_VES     NUMBER(15,6),
  SVED_ID      VARCHAR2(9 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKCOMMIT_PLAN2CENN  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT_PLAN2CENN
(
  PLANSTRU_ID  NUMBER(20)                       NOT NULL,
  CAT_CEN_ID   NUMBER(3)                        NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKCOMMIT_PLAN2PROG  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT_PLAN2PROG
(
  PLANSTRU_ID  NUMBER(20),
  GOSPROG_ID   NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_DOC_NUMS  (Table) 
--
CREATE TABLE MASTER.KLS_DOC_NUMS
(
  DOC_TYPE_ID   NUMBER(10),
  LAST_DOC_NUM  NUMBER(10)                      DEFAULT 0,
  MESTO_ID      NUMBER(10),
  MIN_DOC_NUM   NUMBER(10)                      DEFAULT 1,
  MAX_DOC_NUM   NUMBER(10),
  DOC_RULE_ID   NUMBER(10)                      DEFAULT 1,
  FROM_DATE     DATE,
  TO_DATE       DATE,
  ID            NUMBER(10)                      NOT NULL,
  DOC_PREFIX    VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOC_NUMS IS 'Справочник номеров документов';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.DOC_TYPE_ID IS 'Тип документа';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.LAST_DOC_NUM IS 'Последний номер документа';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.MIN_DOC_NUM IS 'Минимальный номер документа';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.MAX_DOC_NUM IS 'Максимальный номер документа';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.DOC_RULE_ID IS 'Правило формирования номера';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.FROM_DATE IS 'Начало периода';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.TO_DATE IS 'Окончание периода';

COMMENT ON COLUMN MASTER.KLS_DOC_NUMS.DOC_PREFIX IS 'Префикс документа';



--
-- KLS_GD_VAGTYPE  (Table) 
--
CREATE TABLE MASTER.KLS_GD_VAGTYPE
(
  ID            NUMBER(10)                      NOT NULL,
  ABBR          VARCHAR2(3 BYTE),
  NAME          VARCHAR2(30 BYTE),
  COLOR_GDPL    NUMBER(1),
  COLOR_NAME    VARCHAR2(20 BYTE),
  PLAN_NAME     VARCHAR2(30 BYTE),
  VAGONTYPE_ID  NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_GD_VAGTYPE IS 'Рода вагонов (для ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_GD_VAGTYPE.ID IS 'Род вагона (для ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_GD_VAGTYPE.ABBR IS 'Код';

COMMENT ON COLUMN MASTER.KLS_GD_VAGTYPE.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_GD_VAGTYPE.COLOR_GDPL IS 'Порядок в сообщении ТРАНС';

COMMENT ON COLUMN MASTER.KLS_GD_VAGTYPE.COLOR_NAME IS 'Наименование в сообщениие ТРАНС';

COMMENT ON COLUMN MASTER.KLS_GD_VAGTYPE.PLAN_NAME IS 'Наименование (для планирования)';



--
-- KLS_LOAD_TYPE  (Table) 
--
CREATE TABLE MASTER.KLS_LOAD_TYPE
(
  ID              NUMBER(2)                     NOT NULL,
  TYPE_OTGR_NAME  VARCHAR2(30 BYTE),
  LOAD_MOS_ID     NUMBER(10),
  SF_POKUP_VTR    NUMBER(2),
  ISU_KOD         VARCHAR2(1 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_LOAD_TYPE.ISU_KOD IS 'Код ИСУ';



--
-- KLS_NAPR  (Table) 
--
CREATE TABLE MASTER.KLS_NAPR
(
  ID           NUMBER(2)                        NOT NULL,
  NAPR_NAME    VARCHAR2(50 BYTE),
  NAPR_MOS_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PAYFORM  (Table) 
--
CREATE TABLE MASTER.KLS_PAYFORM
(
  ID             NUMBER(2)                      NOT NULL,
  PAYFORM_NAME   VARCHAR2(20 BYTE),
  PAYFORM_GR_ID  NUMBER(10),
  MOSCOW_ID      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PROD_GU12  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_GU12
(
  ID             VARCHAR2(10 BYTE)              NOT NULL,
  NAME           VARCHAR2(40 BYTE),
  NAME_GU12      VARCHAR2(40 BYTE),
  ORDER_GDPL     NUMBER(2),
  NAME_GDPL      VARCHAR2(40 BYTE),
  STAT_NAGR      NUMBER(3),
  GD_VAGTYPE_ID  NUMBER(10),
  GD_GROUP_ID    NUMBER(10),
  GROUP_PLAN     VARCHAR2(40 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_GU12 IS 'Группы продуктов (для ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.ID IS 'Группа н/продуктов (для ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.NAME_GU12 IS 'Наименование (для ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.ORDER_GDPL IS 'Порядок в сообщении ТРАНС';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.NAME_GDPL IS 'Наименование в сообщении ТРАНС';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.STAT_NAGR IS 'Стат.нагрузка';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.GD_VAGTYPE_ID IS 'Род вагона (для ГУ-12)';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.GD_GROUP_ID IS 'Группа ж/д груза';

COMMENT ON COLUMN MASTER.KLS_PROD_GU12.GROUP_PLAN IS 'Группа планирования';



--
-- KLS_STATES  (Table) 
--
CREATE TABLE MASTER.KLS_STATES
(
  ID             NUMBER(3)                      NOT NULL,
  STATE_NAME     VARCHAR2(30 BYTE),
  SHORT_NAME     VARCHAR2(10 BYTE),
  KOD_STATISTIC  NUMBER(5),
  KOD_MOSCOW     VARCHAR2(3 BYTE),
  NAPR_ID        NUMBER(2),
  GD_KOD         VARCHAR2(10 BYTE),
  KSSS_ID        NUMBER,
  ISU_KOD        VARCHAR2(2 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_STATES.GD_KOD IS 'ЖД код';

COMMENT ON COLUMN MASTER.KLS_STATES.ISU_KOD IS 'Код ИСУ';



--
-- KLS_VID_OTGR  (Table) 
--
CREATE TABLE MASTER.KLS_VID_OTGR
(
  LOAD_ABBR     VARCHAR2(3 BYTE)                NOT NULL,
  LOAD_NAME     VARCHAR2(45 BYTE),
  LOAD_TYPE_ID  NUMBER(2),
  VAGOWNER_ID   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR_IN  (Table) 
--
CREATE TABLE MASTER.REESTR_IN
(
  ID              NUMBER(10)                    NOT NULL,
  SVED_IN_ID      VARCHAR2(9 BYTE),
  MESTO_ID        NUMBER(2),
  TEX_PD_ID       NUMBER(10),
  GROTP_ID        NUMBER(10),
  STAN_OTP_ID     NUMBER(10),
  FORMNAKL_ID     NUMBER(2),
  NUM_KVIT        NUMBER(10),
  DATE_KVIT       DATE,
  PASP_NUM_KVIT   VARCHAR2(15 BYTE),
  REZ_NUM_KVIT    VARCHAR2(15 BYTE),
  PASP_DATE_KVIT  DATE,
  VZLIV_KVIT      NUMBER(6),
  TEMPER_KVIT     NUMBER(5,1),
  PL_KVIT         NUMBER(6,4),
  VES_KVIT        NUMBER(10,3),
  TARIF           NUMBER(12,2),
  TARIF_GUARD     NUMBER(12,2),
  DATE_IN_STAN    DATE,
  DATE_OTGR       DATE,
  NUM_CIST        VARCHAR2(10 BYTE),
  VAGONTYPE_ID    NUMBER(2),
  KALIBR_ID       VARCHAR2(5 BYTE),
  VES_CIST        NUMBER(10,3),
  VAGOWNER_ID     NUMBER(3),
  CAPACITY        VARCHAR2(10 BYTE),
  PLOMBA1         VARCHAR2(15 BYTE),
  PLOMBA2         VARCHAR2(15 BYTE),
  VZLIV           NUMBER(6),
  TEMPER          NUMBER(5,1),
  FAKT_PL         NUMBER(6,4),
  VES             NUMBER(14,7),
  VES_NETTO       NUMBER(14,7),
  DATE_VOZ        DATE,
  KVIT_VOZ        VARCHAR2(12 BYTE),
  SUM_VOZ         NUMBER(12,2),
  STAN_VOZ_ID     NUMBER(10),
  SVED_POS        NUMBER(5),
  EMPTY_VOZ       NUMBER(1)                     DEFAULT 1,
  VOLUME          NUMBER(10),
  VOLUME15        NUMBER(11,4),
  CTLV            NUMBER(6,4),
  GOST_ID         NUMBER(3)                     DEFAULT 0,
  ZPU_TYPE1       NUMBER(10),
  ZPU_TYPE2       NUMBER(10),
  BAD_NUM         NUMBER(1)                     DEFAULT 0,
  NAKL_ID         NUMBER(10),
  NAKL_POS        NUMBER(5),
  OSTAT           NUMBER(6),
  UVED_ID         NUMBER(7),
  UVED_POS        NUMBER(3),
  P_VOD_KVIT      NUMBER(7,4),
  P_DIRT_KVIT     NUMBER(7,4),
  P_SOL_KVIT      NUMBER(7,4),
  VES_NETTO_KVIT  NUMBER(14,3),
  NUM_KVIT_TXT    VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REESTR_IN IS 'Разгруженные вагоны';

COMMENT ON COLUMN MASTER.REESTR_IN.ID IS 'Отгрузка';

COMMENT ON COLUMN MASTER.REESTR_IN.SVED_IN_ID IS 'Сведение';

COMMENT ON COLUMN MASTER.REESTR_IN.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.REESTR_IN.TEX_PD_ID IS 'ТЕХ ПД';

COMMENT ON COLUMN MASTER.REESTR_IN.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.REESTR_IN.STAN_OTP_ID IS 'Станция отправления';

COMMENT ON COLUMN MASTER.REESTR_IN.FORMNAKL_ID IS 'Форма накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.NUM_KVIT IS 'N квитанции или накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.DATE_KVIT IS 'Дата квитанции или накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.PASP_NUM_KVIT IS '№ паспорта с накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.REZ_NUM_KVIT IS '№ резервуара с накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.PASP_DATE_KVIT IS 'Дата паспорта с накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.VZLIV_KVIT IS 'Взлив из накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.TEMPER_KVIT IS 'Температура из накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.PL_KVIT IS 'Плотность из паспорта при накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.VES_KVIT IS 'Вес из накладной';

COMMENT ON COLUMN MASTER.REESTR_IN.TARIF IS 'Тариф';

COMMENT ON COLUMN MASTER.REESTR_IN.TARIF_GUARD IS 'Плата за охрану';

COMMENT ON COLUMN MASTER.REESTR_IN.DATE_IN_STAN IS 'Дата прихода на станцию';

COMMENT ON COLUMN MASTER.REESTR_IN.DATE_OTGR IS 'Дата сведения';

COMMENT ON COLUMN MASTER.REESTR_IN.NUM_CIST IS 'Номер транспортного ср-ва';

COMMENT ON COLUMN MASTER.REESTR_IN.VAGONTYPE_ID IS 'Род вагона (ЦС,КР и т.п.)';

COMMENT ON COLUMN MASTER.REESTR_IN.KALIBR_ID IS 'Тип вагона (номер)';

COMMENT ON COLUMN MASTER.REESTR_IN.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.REESTR_IN.VAGOWNER_ID IS 'Собственник тр.ср-ва';

COMMENT ON COLUMN MASTER.REESTR_IN.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.REESTR_IN.PLOMBA1 IS 'Пломба 1';

COMMENT ON COLUMN MASTER.REESTR_IN.PLOMBA2 IS 'Пломба 2';

COMMENT ON COLUMN MASTER.REESTR_IN.VZLIV IS 'Взлив или объем';

COMMENT ON COLUMN MASTER.REESTR_IN.TEMPER IS 'Температура';

COMMENT ON COLUMN MASTER.REESTR_IN.FAKT_PL IS 'Факт.плотность';

COMMENT ON COLUMN MASTER.REESTR_IN.VES IS 'Вес груза';

COMMENT ON COLUMN MASTER.REESTR_IN.VES_NETTO IS 'Вес НЕТТО (для нефти)';

COMMENT ON COLUMN MASTER.REESTR_IN.DATE_VOZ IS 'Дата возврата';

COMMENT ON COLUMN MASTER.REESTR_IN.KVIT_VOZ IS 'Квитанция на возврат';

COMMENT ON COLUMN MASTER.REESTR_IN.SUM_VOZ IS 'Сумма тарифа за возврат';

COMMENT ON COLUMN MASTER.REESTR_IN.STAN_VOZ_ID IS 'Станция возврата';

COMMENT ON COLUMN MASTER.REESTR_IN.SVED_POS IS '№ по порядку';

COMMENT ON COLUMN MASTER.REESTR_IN.EMPTY_VOZ IS 'Признак возврата порожним';

COMMENT ON COLUMN MASTER.REESTR_IN.VOLUME IS 'Объем';

COMMENT ON COLUMN MASTER.REESTR_IN.VOLUME15 IS 'Объем при 15''C';

COMMENT ON COLUMN MASTER.REESTR_IN.CTLV IS 'Коэф.корр.объема';

COMMENT ON COLUMN MASTER.REESTR_IN.GOST_ID IS 'ГОСТ';

COMMENT ON COLUMN MASTER.REESTR_IN.ZPU_TYPE1 IS 'Тип пломбы 1';

COMMENT ON COLUMN MASTER.REESTR_IN.ZPU_TYPE2 IS 'Тип пломбы 2';

COMMENT ON COLUMN MASTER.REESTR_IN.BAD_NUM IS '1-Неверный номер';

COMMENT ON COLUMN MASTER.REESTR_IN.OSTAT IS 'Остаток, см';

COMMENT ON COLUMN MASTER.REESTR_IN.UVED_ID IS 'Уведомление';

COMMENT ON COLUMN MASTER.REESTR_IN.UVED_POS IS 'Позиция в уведомлении';

COMMENT ON COLUMN MASTER.REESTR_IN.NUM_KVIT_TXT IS '№ ж/д накладной';



--
-- REPL_SITE  (Table) 
--
CREATE TABLE MASTER.REPL_SITE
(
  ID         NUMBER(10)                         NOT NULL,
  NAME       VARCHAR2(50 BYTE),
  DESCRIPT   VARCHAR2(250 BYTE),
  DSN_TYPE   VARCHAR2(15 BYTE),
  CONN_STR   VARCHAR2(150 BYTE),
  DATABASE   VARCHAR2(100 BYTE),
  USERNAME   VARCHAR2(100 BYTE),
  PASSWORD   VARCHAR2(100 BYTE),
  SITE_TYPE  NUMBER(10)                         DEFAULT 2
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_SITE IS 'Узлы репликации';

COMMENT ON COLUMN MASTER.REPL_SITE.ID IS 'Узел репликации';

COMMENT ON COLUMN MASTER.REPL_SITE.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPL_SITE.DESCRIPT IS 'Описание';

COMMENT ON COLUMN MASTER.REPL_SITE.DSN_TYPE IS 'Тип источника';

COMMENT ON COLUMN MASTER.REPL_SITE.CONN_STR IS 'Строка подключения';

COMMENT ON COLUMN MASTER.REPL_SITE.DATABASE IS 'БД';

COMMENT ON COLUMN MASTER.REPL_SITE.USERNAME IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPL_SITE.PASSWORD IS 'Пароль';

COMMENT ON COLUMN MASTER.REPL_SITE.SITE_TYPE IS 'Тип узла репликации';



--
-- REPL_SITE_DESC  (Table) 
--
CREATE TABLE MASTER.REPL_SITE_DESC
(
  ID            NUMBER(10)                      NOT NULL,
  REPL_SITE     NUMBER(10),
  REPL_LIST     NUMBER(10),
  ACTIVE        NUMBER(1)                       DEFAULT 0,
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_SITE_DESC IS 'Соответствие Узел-Репликация';

COMMENT ON COLUMN MASTER.REPL_SITE_DESC.ID IS 'Соответствие Узел-Репликация';

COMMENT ON COLUMN MASTER.REPL_SITE_DESC.REPL_SITE IS 'Узел репликации';

COMMENT ON COLUMN MASTER.REPL_SITE_DESC.REPL_LIST IS 'Репликация';

COMMENT ON COLUMN MASTER.REPL_SITE_DESC.ACTIVE IS 'Активно';

COMMENT ON COLUMN MASTER.REPL_SITE_DESC.IS_AUTO_LINK IS 'Признак автоматической привязки';



--
-- R3_ROUTE_FULL  (Table) 
--
CREATE TABLE MASTER.R3_ROUTE_FULL
(
  ROUTE        VARCHAR2(10 BYTE)                NOT NULL,
  ANFRF        VARCHAR2(4 BYTE)                 NOT NULL,
  KNANF        VARCHAR2(10 BYTE),
  KNEND        VARCHAR2(10 BYTE),
  ZZZZ_STATUS  VARCHAR2(1 BYTE),
  ZZZZ_FILE    VARCHAR2(50 BYTE),
  ZZZZ_DATE    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.ROUTE IS 'Маршрут';

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.ANFRF IS 'Пункт маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.KNANF IS 'Узел маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.KNEND IS 'Узел маршрута';

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.ZZZZ_STATUS IS 'Признак прокачки';

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_ROUTE_FULL.ZZZZ_DATE IS 'Дата прокачки';



--
-- TRANS  (Table) 
--
CREATE TABLE MASTER.TRANS
(
  ID             NUMBER(10)                     NOT NULL,
  DATE_CUR       DATE,
  DATE_REP       DATE,
  DATE_UNP       DATE,
  DATE_REZ       DATE,
  DATE_GD        DATE,
  PLAN_CIST      NUMBER(10)                     DEFAULT 0,
  PLAN_VES       NUMBER(14,3)                   DEFAULT 0,
  PLANDAY_C      NUMBER(10)                     DEFAULT 0,
  PLANDAY_V      NUMBER(14,3)                   DEFAULT 0,
  FACTDAY_C      NUMBER(10)                     DEFAULT 0,
  FACTDAY_V      NUMBER(14,3)                   DEFAULT 0,
  PRICHDAY       VARCHAR2(100 BYTE),
  PLANNAR_C      NUMBER(10)                     DEFAULT 0,
  PLANNAR_V      NUMBER(14,3)                   DEFAULT 0,
  FACTNAR_C      NUMBER(10)                     DEFAULT 0,
  FACTNAR_V      NUMBER(14,3)                   DEFAULT 0,
  CIST_EMPTY     NUMBER(10)                     DEFAULT 0,
  CIST_READY     NUMBER(10)                     DEFAULT 0,
  PROD_GU12_ID   VARCHAR2(10 BYTE),
  VAGOWN_MOS_ID  NUMBER(10),
  LOAD_MOS_ID    NUMBER(10),
  MOS_GRP_ID     VARCHAR2(10 BYTE),
  NAPR_MOS_ID    NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.TRANS IS 'Сообщение ТРАНС';

COMMENT ON COLUMN MASTER.TRANS.ID IS 'Сообщение ТРАНС';

COMMENT ON COLUMN MASTER.TRANS.DATE_CUR IS 'Дата_время генерации';

COMMENT ON COLUMN MASTER.TRANS.DATE_REP IS 'Отчетная дата_время';

COMMENT ON COLUMN MASTER.TRANS.DATE_UNP IS 'Дата_время приемки н_пр';

COMMENT ON COLUMN MASTER.TRANS.DATE_REZ IS 'Дата_время данных по резервуарам';

COMMENT ON COLUMN MASTER.TRANS.DATE_GD IS 'Дата_время отгрузки';

COMMENT ON COLUMN MASTER.TRANS.PLAN_CIST IS 'План на месяц (цс)';

COMMENT ON COLUMN MASTER.TRANS.PLAN_VES IS 'План на месяц (т.)';

COMMENT ON COLUMN MASTER.TRANS.PLANDAY_C IS 'План на день';

COMMENT ON COLUMN MASTER.TRANS.PLANDAY_V IS 'План на день';

COMMENT ON COLUMN MASTER.TRANS.FACTDAY_C IS 'Факт за день';

COMMENT ON COLUMN MASTER.TRANS.FACTDAY_V IS 'Факт за день';

COMMENT ON COLUMN MASTER.TRANS.PRICHDAY IS 'Причина отклонения';

COMMENT ON COLUMN MASTER.TRANS.PLANNAR_C IS 'План нарастающий';

COMMENT ON COLUMN MASTER.TRANS.PLANNAR_V IS 'План нарастающий';

COMMENT ON COLUMN MASTER.TRANS.FACTNAR_C IS 'Факт нарастающий';

COMMENT ON COLUMN MASTER.TRANS.FACTNAR_V IS 'Факт нарастающий';

COMMENT ON COLUMN MASTER.TRANS.CIST_EMPTY IS 'Подано цистерн';

COMMENT ON COLUMN MASTER.TRANS.CIST_READY IS 'Годно цистерн';



--
-- T_SNPORDEXP_UPLOADORD_KSE  (Table) 
--
CREATE TABLE MASTER.T_SNPORDEXP_UPLOADORD_KSE
(
  UPLOADID  NUMBER(17),
  ORDERID   NUMBER(10),
  LOAD_VES  NUMBER(16,6)
)
TABLESPACE USERS
NOCOMPRESS ;


--
-- VED_OSMOTR  (Table) 
--
CREATE TABLE MASTER.VED_OSMOTR
(
  ID            NUMBER(10)                      NOT NULL,
  VED_NUM       NUMBER(10),
  VED_DATE      DATE,
  FROM_DATE     DATE,
  TO_DATE       DATE,
  FIO1          VARCHAR2(50 BYTE),
  FIO2          VARCHAR2(50 BYTE),
  FIO3          VARCHAR2(50 BYTE),
  SIGN1         VARCHAR2(50 BYTE),
  MESTO_ID      NUMBER(10)                      DEFAULT 1,
  VED_PREFIX    VARCHAR2(10 BYTE),
  LOAD_TYPE_ID  NUMBER(10)                      DEFAULT 1,
  KOL           NUMBER(5)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.VED_OSMOTR IS 'Ведомость предварительного осмотра';

COMMENT ON COLUMN MASTER.VED_OSMOTR.VED_NUM IS '№ ведомости';

COMMENT ON COLUMN MASTER.VED_OSMOTR.VED_DATE IS 'Дата ведомости';

COMMENT ON COLUMN MASTER.VED_OSMOTR.FROM_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.VED_OSMOTR.TO_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.VED_OSMOTR.FIO1 IS 'Смена: ФИО 1';

COMMENT ON COLUMN MASTER.VED_OSMOTR.FIO2 IS 'Смена: ФИО 2';

COMMENT ON COLUMN MASTER.VED_OSMOTR.FIO3 IS 'Смена: ФИО 3';

COMMENT ON COLUMN MASTER.VED_OSMOTR.SIGN1 IS 'Подпись 1';

COMMENT ON COLUMN MASTER.VED_OSMOTR.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.VED_OSMOTR.VED_PREFIX IS 'Префикс номера';

COMMENT ON COLUMN MASTER.VED_OSMOTR.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.VED_OSMOTR.KOL IS 'Кол-во вагонов';



--
-- ZAKAZ_GRAFIK  (Table) 
--
CREATE TABLE MASTER.ZAKAZ_GRAFIK
(
  ID             NUMBER(10)                     NOT NULL,
  ZAKAZ_HIST_ID  NUMBER(10),
  DATE_LOAD      DATE,
  TONN_LOAD      NUMBER(16,6)                   DEFAULT 0,
  CIST_LOAD      NUMBER(10)                     DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.ZAKAZ_GRAFIK IS 'График отгрузки';

COMMENT ON COLUMN MASTER.ZAKAZ_GRAFIK.ZAKAZ_HIST_ID IS 'Ссылка на позицию заказа "К отгрузке"';

COMMENT ON COLUMN MASTER.ZAKAZ_GRAFIK.DATE_LOAD IS 'Дата отгрузки';

COMMENT ON COLUMN MASTER.ZAKAZ_GRAFIK.TONN_LOAD IS 'Отгрузить тн';

COMMENT ON COLUMN MASTER.ZAKAZ_GRAFIK.CIST_LOAD IS 'Отгрузить вц';



--
-- BILLPOS_PP_BILLS_PREP_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLPOS_PP_BILLS_PREP_FK_I ON MASTER.BILL_POS_PREPAY
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILLPOS_PP_OWNERSHIP_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLPOS_PP_OWNERSHIP_FK_I ON MASTER.BILL_POS_PREPAY
(OWNERSHIP_ID)
TABLESPACE USERSINDX;


--
-- BILLPOS_PP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILLPOS_PP_PK ON MASTER.BILL_POS_PREPAY
(NOM_DOK, BILL_POS_PREPAY_ID)
TABLESPACE USERSINDX;


--
-- BILLPOS_PP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLPOS_PP_PROD_FK_I ON MASTER.BILL_POS_PREPAY
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILL_POS_PREPAY_DATE_REALIZ  (Index) 
--
CREATE INDEX MASTER.BILL_POS_PREPAY_DATE_REALIZ ON MASTER.BILL_POS_PREPAY
(DATE_REALIZ)
TABLESPACE USERSINDX;


--
-- BILL_POS_PREPAY_IS_LUK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_PREPAY_IS_LUK_I ON MASTER.BILL_POS_PREPAY
(IS_LUK)
TABLESPACE USERSINDX;


--
-- BILL_POS_PREPAY_NOM_DOK_2_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_PREPAY_NOM_DOK_2_I ON MASTER.BILL_POS_PREPAY
(NOM_DOK, IS_AGENT, DATE_REALIZ)
TABLESPACE USERSINDX;


--
-- BILL_POS_PREPAY_SUMMA_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_PREPAY_SUMMA_I ON MASTER.BILL_POS_PREPAY
(SUMMA)
TABLESPACE USERSINDX;


--
-- EUL_AP_AP1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_AP_AP1_UK ON MASTER.EUL_ACCESS_PRIVS
(GP_APP_ID, GBA_BA_ID, AP_EU_ID)
TABLESPACE USERSINDX;


--
-- EUL_AP_EU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_AP_EU_FK_I ON MASTER.EUL_ACCESS_PRIVS
(AP_EU_ID)
TABLESPACE USERSINDX;


--
-- EUL_AP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_AP_PK ON MASTER.EUL_ACCESS_PRIVS
(AP_ID)
TABLESPACE USERSINDX;


--
-- EUL_BOL_BA_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BOL_BA_FK_I ON MASTER.EUL_BA_OBJ_LINKS
(BOL_BA_ID)
TABLESPACE USERSINDX;


--
-- EUL_BOL_BOL1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BOL_BOL1_UK ON MASTER.EUL_BA_OBJ_LINKS
(BOL_BA_ID, BOL_OBJ_ID)
TABLESPACE USERSINDX;


--
-- EUL_BOL_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BOL_OBJ_FK_I ON MASTER.EUL_BA_OBJ_LINKS
(BOL_OBJ_ID)
TABLESPACE USERSINDX;


--
-- EUL_BOL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BOL_PK ON MASTER.EUL_BA_OBJ_LINKS
(BOL_ID)
TABLESPACE USERSINDX;


--
-- EUL_BR_BR2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BR_BR2_UK ON MASTER.EUL_BATCH_REPORTS
(BR_NAME)
TABLESPACE USERSINDX;


--
-- EUL_BR_BR3_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BR_BR3_UK ON MASTER.EUL_BATCH_REPORTS
(BR_JOB_ID)
TABLESPACE USERSINDX;


--
-- EUL_BR_EU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BR_EU_FK_I ON MASTER.EUL_BATCH_REPORTS
(BR_EU_ID)
TABLESPACE USERSINDX;


--
-- EUL_BR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BR_PK ON MASTER.EUL_BATCH_REPORTS
(BR_ID)
TABLESPACE USERSINDX;


--
-- EUL_BRR_BR_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BRR_BR_FK_I ON MASTER.EUL_BR_RUNS
(BRR_BR_ID)
TABLESPACE USERSINDX;


--
-- EUL_BRR_BRR2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BRR_BRR2_UK ON MASTER.EUL_BR_RUNS
(BRR_BR_ID, BRR_RUN_NUMBER)
TABLESPACE USERSINDX;


--
-- EUL_BR_RFU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BR_RFU_FK_I ON MASTER.EUL_BATCH_REPORTS
(BR_RFU_ID)
TABLESPACE USERSINDX;


--
-- EUL_BRR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BRR_PK ON MASTER.EUL_BR_RUNS
(BRR_ID)
TABLESPACE USERSINDX;


--
-- EUL_BS_BR_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BS_BR_FK_I ON MASTER.EUL_BATCH_SHEETS
(BS_BR_ID)
TABLESPACE USERSINDX;


--
-- EUL_BS_BS2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BS_BS2_UK ON MASTER.EUL_BATCH_SHEETS
(BS_BR_ID, BS_SHEET_ID)
TABLESPACE USERSINDX;


--
-- EUL_BS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BS_PK ON MASTER.EUL_BATCH_SHEETS
(BS_ID)
TABLESPACE USERSINDX;


--
-- EUL_DHN_DBH_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_DHN_DBH_FK_I ON MASTER.EUL_DBH_NODES
(DHN_HI_ID)
TABLESPACE USERSINDX;


--
-- EUL_DHN_DHN1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_DHN_DHN1_UK ON MASTER.EUL_DBH_NODES
(DHN_HI_ID, DHN_NAME)
TABLESPACE USERSINDX;


--
-- EUL_DHN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_DHN_PK ON MASTER.EUL_DBH_NODES
(DHN_ID)
TABLESPACE USERSINDX;


--
-- EUL_DHS_DBH_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_DHS_DBH_FK_I ON MASTER.EUL_HI_SEGMENTS
(DHS_HI_ID)
TABLESPACE USERSINDX;


--
-- EUL_DHS_DHN_C_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_DHS_DHN_C_FK_I ON MASTER.EUL_HI_SEGMENTS
(DHS_DHN_ID_PARENT)
TABLESPACE USERSINDX;


--
-- EUL_DHS_DHN_P_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_DHS_DHN_P_FK_I ON MASTER.EUL_HI_SEGMENTS
(DHS_DHN_ID_CHILD)
TABLESPACE USERSINDX;


--
-- EUL_FA_FA1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FA_FA1_UK ON MASTER.EUL_FUN_ARGUMENTS
(FA_POSITION, FA_FUN_ID)
TABLESPACE USERSINDX;


--
-- EUL_FA_FA2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FA_FA2_UK ON MASTER.EUL_FUN_ARGUMENTS
(FA_NAME_MN, FA_NAME_S, FA_FUN_ID)
TABLESPACE USERSINDX;


--
-- EUL_FA_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_FA_FUN_FK_I ON MASTER.EUL_FUN_ARGUMENTS
(FA_FUN_ID)
TABLESPACE USERSINDX;


--
-- EUL_FA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_FA_PK ON MASTER.EUL_FUN_ARGUMENTS
(FA_ID)
TABLESPACE USERSINDX;


--
-- EUL_FK_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_FK_OBJ_FK_I ON MASTER.EUL_KEY_CONS
(FK_OBJ_ID_REMOTE)
TABLESPACE USERSINDX;


--
-- EUL_FK_UK_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_FK_UK_FK_I ON MASTER.EUL_KEY_CONS
(FK_KEY_ID_REMOTE)
TABLESPACE USERSINDX;


--
-- EUL_GBA_BA_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_GBA_BA_FK_I ON MASTER.EUL_ACCESS_PRIVS
(GBA_BA_ID)
TABLESPACE USERSINDX;


--
-- EUL_GP_PRI_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_GP_PRI_FK_I ON MASTER.EUL_ACCESS_PRIVS
(GP_APP_ID)
TABLESPACE USERSINDX;


--
-- EUL_HS_HS1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_HS_HS1_UK ON MASTER.EUL_HI_SEGMENTS
(IHS_HN_ID_CHILD, IHS_HN_ID_PARENT, IHS_HI_ID, DHS_HI_ID, DHS_DHN_ID_CHILD, 
DHS_DHN_ID_PARENT)
TABLESPACE USERSINDX;


--
-- EUL_HS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_HS_PK ON MASTER.EUL_HI_SEGMENTS
(HS_ID)
TABLESPACE USERSINDX;


--
-- EUL_IHS_HN_C_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IHS_HN_C_FK_I ON MASTER.EUL_HI_SEGMENTS
(IHS_HN_ID_PARENT)
TABLESPACE USERSINDX;


--
-- EUL_IHS_HN_P_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IHS_HN_P_FK_I ON MASTER.EUL_HI_SEGMENTS
(IHS_HN_ID_CHILD)
TABLESPACE USERSINDX;


--
-- EUL_IHS_HSP_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IHS_HSP_FK_I ON MASTER.EUL_HI_SEGMENTS
(IHS_JC_ID)
TABLESPACE USERSINDX;


--
-- EUL_IHS_IBH_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IHS_IBH_FK_I ON MASTER.EUL_HI_SEGMENTS
(IHS_HI_ID)
TABLESPACE USERSINDX;


--
-- EUL_KEY_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_KEY_OBJ_FK_I ON MASTER.EUL_KEY_CONS
(KEY_OBJ_ID)
TABLESPACE USERSINDX;


--
-- EUL_KEY_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_KEY_PK ON MASTER.EUL_KEY_CONS
(KEY_ID)
TABLESPACE USERSINDX;


--
-- EUL_KEY1_I  (Index) 
--
CREATE INDEX MASTER.EUL_KEY1_I ON MASTER.EUL_KEY_CONS
(KEY_NAME)
TABLESPACE USERSINDX;


--
-- EUL_NMSDO_SDO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_NMSDO_SDO_FK_I ON MASTER.EUL_SUMMARY_OBJS
(NMSDO_SDO_ID)
TABLESPACE USERSINDX;


--
-- EUL_OD_COBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OD_COBJ_FK_I ON MASTER.EUL_OBJ_DEPS
(OD_OBJ_ID_FROM)
TABLESPACE USERSINDX;


--
-- EUL_OD_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OD_OBJ_FK_I ON MASTER.EUL_OBJ_DEPS
(OD_OBJ_ID_TO)
TABLESPACE USERSINDX;


--
-- EUL_OD_OD1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OD_OD1_UK ON MASTER.EUL_OBJ_DEPS
(OD_OBJ_ID_FROM, OD_OBJ_ID_TO)
TABLESPACE USERSINDX;


--
-- EUL_OD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OD_PK ON MASTER.EUL_OBJ_DEPS
(OD_ID)
TABLESPACE USERSINDX;


--
-- EUL_SBO_SRS_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SBO_SRS_FK_I ON MASTER.EUL_SUMMARY_OBJS
(SBO_SRS_ID)
TABLESPACE USERSINDX;


--
-- EUL_SDO_SBO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SDO_SBO_FK_I ON MASTER.EUL_SUMMARY_OBJS
(SDO_SBO_ID)
TABLESPACE USERSINDX;


--
-- EUL_SUMO_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SUMO_PK ON MASTER.EUL_SUMMARY_OBJS
(SUMO_ID)
TABLESPACE USERSINDX;


--
-- EUL_SUMO_SUMO1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SUMO_SUMO1_UK ON MASTER.EUL_SUMMARY_OBJS
(SBO_SRS_ID, SDO_BITMAP_POS, SBO_NAME)
TABLESPACE USERSINDX;


--
-- GD_VAGTYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_VAGTYPE_PK ON MASTER.KLS_GD_VAGTYPE
(ID)
TABLESPACE USERSINDX;


--
-- GD_VAGTYPE_VAGONTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_VAGTYPE_VAGONTYPE_FK_I ON MASTER.KLS_GD_VAGTYPE
(VAGONTYPE_ID)
TABLESPACE USERSINDX;


--
-- INF2PB_ACC_INF2PB_SCH_FK_I  (Index) 
--
CREATE INDEX MASTER.INF2PB_ACC_INF2PB_SCH_FK_I ON MASTER.INF2PB_ACCOUNTS
(INF2PB_SCH_ID)
TABLESPACE USERSINDX;


--
-- INF2PB_ACCOUNTS_ACC_CODE  (Index) 
--
CREATE INDEX MASTER.INF2PB_ACCOUNTS_ACC_CODE ON MASTER.INF2PB_ACCOUNTS
(ACC_CODE)
TABLESPACE USERSINDX;


--
-- INF2PB_ACCOUNTS_CONT_ID  (Index) 
--
CREATE INDEX MASTER.INF2PB_ACCOUNTS_CONT_ID ON MASTER.INF2PB_ACCOUNTS
(CONT_ID)
TABLESPACE USERSINDX;


--
-- INF2PB_ACCOUNTS_DEB  (Index) 
--
CREATE INDEX MASTER.INF2PB_ACCOUNTS_DEB ON MASTER.INF2PB_ACCOUNTS
(DEB)
TABLESPACE USERSINDX;


--
-- INF2PB_ACCOUNTS_KRED  (Index) 
--
CREATE INDEX MASTER.INF2PB_ACCOUNTS_KRED ON MASTER.INF2PB_ACCOUNTS
(KRED)
TABLESPACE USERSINDX;


--
-- INF2PB_ACCOUNTS_RAS_ID  (Index) 
--
CREATE INDEX MASTER.INF2PB_ACCOUNTS_RAS_ID ON MASTER.INF2PB_ACCOUNTS
(RAS_ID)
TABLESPACE USERSINDX;


--
-- INF2PB_ACCOUNTS_UNIQ  (Index) 
--
CREATE UNIQUE INDEX MASTER.INF2PB_ACCOUNTS_UNIQ ON MASTER.INF2PB_ACCOUNTS
(INF2PB_SCH_ID, CONT_ID, RAS_ID, DEB, KRED)
TABLESPACE USERSINDX;


--
-- INF2PB_ACC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.INF2PB_ACC_PK ON MASTER.INF2PB_ACCOUNTS
(ID)
TABLESPACE USERSINDX;


--
-- JKA_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.JKA_MESTO_FK_I ON MASTER.JKALLOW
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- JKA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.JKA_PK ON MASTER.JKALLOW
(MESTO_ID, JKA_DATE, SVED_NUM)
TABLESPACE USERSINDX;


--
-- JKC_JKC_SES_FK_I  (Index) 
--
CREATE INDEX MASTER.JKC_JKC_SES_FK_I ON MASTER.JKCOMMIT
(JKC_SES_ID)
TABLESPACE USERSINDX;


--
-- JKC_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.JKC_MESTO_FK_I ON MASTER.JKCOMMIT
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- JKC_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.JKC_MONTH_FK_I ON MASTER.JKCOMMIT
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- JKC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.JKC_PK ON MASTER.JKCOMMIT
(JKC_SES_ID, MESTO_ID, NOM_ZD, SVED_NUM)
TABLESPACE USERSINDX;


--
-- KLS_DOC_NUMS_DOC_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.KLS_DOC_NUMS_DOC_TYPE_FK_I ON MASTER.KLS_DOC_NUMS
(DOC_TYPE_ID)
TABLESPACE USERSINDX;


--
-- KLS_DOC_NUMS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_DOC_NUMS_PK ON MASTER.KLS_DOC_NUMS
(ID)
TABLESPACE USERSINDX;


--
-- KLS_DOC_NUMS_RULE_FK_I  (Index) 
--
CREATE INDEX MASTER.KLS_DOC_NUMS_RULE_FK_I ON MASTER.KLS_DOC_NUMS
(DOC_RULE_ID)
TABLESPACE USERSINDX;


--
-- KLS_DOC_NUMS_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_DOC_NUMS_UK ON MASTER.KLS_DOC_NUMS
(DOC_TYPE_ID, MESTO_ID, DOC_PREFIX, FROM_DATE, TO_DATE)
TABLESPACE USERSINDX;


--
-- LOAD_TYPE_LOAD_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.LOAD_TYPE_LOAD_MOS_FK_I ON MASTER.KLS_LOAD_TYPE
(LOAD_MOS_ID)
TABLESPACE USERSINDX;


--
-- LOAD_TYPE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.LOAD_TYPE_PK ON MASTER.KLS_LOAD_TYPE
(ID)
TABLESPACE USERSINDX;


--
-- NAPR_NAPR_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.NAPR_NAPR_MOS_FK_I ON MASTER.KLS_NAPR
(NAPR_MOS_ID)
TABLESPACE USERSINDX;


--
-- NAPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NAPR_PK ON MASTER.KLS_NAPR
(ID)
TABLESPACE USERSINDX;


--
-- PAYFORM_PAYFORM_GR_FK_I  (Index) 
--
CREATE INDEX MASTER.PAYFORM_PAYFORM_GR_FK_I ON MASTER.KLS_PAYFORM
(PAYFORM_GR_ID)
TABLESPACE USERSINDX;


--
-- PAYFORM_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PAYFORM_PK ON MASTER.KLS_PAYFORM
(ID)
TABLESPACE USERSINDX;


--
-- PK_AZC_SYS_COMM  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_AZC_SYS_COMM ON MASTER.AZC_SYS_COMM
(ID)
TABLESPACE USERSINDX;


--
-- PK_ZAKAZ_GRAFIK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_ZAKAZ_GRAFIK ON MASTER.ZAKAZ_GRAFIK
(ID)
TABLESPACE USERSINDX;


--
-- PLAN2CENN_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN2CENN_CAT_CEN_FK_I ON MASTER.JKCOMMIT_PLAN2CENN
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- PLAN2CENN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN2CENN_PK ON MASTER.JKCOMMIT_PLAN2CENN
(CAT_CEN_ID, PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN2CENN_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN2CENN_PLANSTRU_FK_I ON MASTER.JKCOMMIT_PLAN2CENN
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN2PROG_GOSPROG_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN2PROG_GOSPROG_FK_I ON MASTER.JKCOMMIT_PLAN2PROG
(GOSPROG_ID)
TABLESPACE USERSINDX;


--
-- PLAN2PROG_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN2PROG_PLANSTRU_FK_I ON MASTER.JKCOMMIT_PLAN2PROG
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN2PROG_PLAN2PROG_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN2PROG_PLAN2PROG_UK ON MASTER.JKCOMMIT_PLAN2PROG
(GOSPROG_ID, PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PROD_GU12_GD_GROUP_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_GU12_GD_GROUP_FK_I ON MASTER.KLS_PROD_GU12
(GD_GROUP_ID)
TABLESPACE USERSINDX;


--
-- PROD_GU12_GD_VAGTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_GU12_GD_VAGTYPE_FK_I ON MASTER.KLS_PROD_GU12
(GD_VAGTYPE_ID)
TABLESPACE USERSINDX;


--
-- PROD_GU12_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_GU12_PK ON MASTER.KLS_PROD_GU12
(ID)
TABLESPACE USERSINDX;


--
-- REESTR_IN_DATE_OTGR_I  (Index) 
--
CREATE INDEX MASTER.REESTR_IN_DATE_OTGR_I ON MASTER.REESTR_IN
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- REESTR_IN_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_IN_KALIBR_FK_I ON MASTER.REESTR_IN
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- REESTR_IN_NAKL_ID_I  (Index) 
--
CREATE INDEX MASTER.REESTR_IN_NAKL_ID_I ON MASTER.REESTR_IN
(NAKL_ID)
TABLESPACE USERSINDX;


--
-- REESTR_IN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_IN_PK ON MASTER.REESTR_IN
(ID)
TABLESPACE USERSINDX;


--
-- REESTR_IN_SVED_IN_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_IN_SVED_IN_FK_I ON MASTER.REESTR_IN
(SVED_IN_ID)
TABLESPACE USERSINDX;


--
-- REESTR_IN_UK  (Index) 
--
CREATE INDEX MASTER.REESTR_IN_UK ON MASTER.REESTR_IN
(MESTO_ID, SVED_IN_ID, NUM_CIST)
TABLESPACE USERSINDX;


--
-- REESTR_IN_UVED_ID_I  (Index) 
--
CREATE INDEX MASTER.REESTR_IN_UVED_ID_I ON MASTER.REESTR_IN
(UVED_ID)
TABLESPACE USERSINDX;


--
-- ROUTE_FULL_KNANF_FK_I  (Index) 
--
CREATE INDEX MASTER.ROUTE_FULL_KNANF_FK_I ON MASTER.R3_ROUTE_FULL
(KNANF)
TABLESPACE USERSINDX;


--
-- ROUTE_FULL_KNEND_FK_I  (Index) 
--
CREATE INDEX MASTER.ROUTE_FULL_KNEND_FK_I ON MASTER.R3_ROUTE_FULL
(KNEND)
TABLESPACE USERSINDX;


--
-- ROUTE_FULL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ROUTE_FULL_PK ON MASTER.R3_ROUTE_FULL
(ROUTE, ANFRF)
TABLESPACE USERSINDX;


--
-- ROUTE_FULL_ROUTES_FK_I  (Index) 
--
CREATE INDEX MASTER.ROUTE_FULL_ROUTES_FK_I ON MASTER.R3_ROUTE_FULL
(ROUTE)
TABLESPACE USERSINDX;


--
-- R_SITE_DS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_SITE_DS_PK ON MASTER.REPL_SITE_DESC
(ID)
TABLESPACE USERSINDX;


--
-- R_SITE_DS_R_LIST_FK_I  (Index) 
--
CREATE INDEX MASTER.R_SITE_DS_R_LIST_FK_I ON MASTER.REPL_SITE_DESC
(REPL_LIST)
TABLESPACE USERSINDX;


--
-- R_SITE_DS_R_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_SITE_DS_R_SITE_FK_I ON MASTER.REPL_SITE_DESC
(REPL_SITE)
TABLESPACE USERSINDX;


--
-- R_SITE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_SITE_PK ON MASTER.REPL_SITE
(ID)
TABLESPACE USERSINDX;


--
-- R_SITE_R_DSNTYP_FK_I  (Index) 
--
CREATE INDEX MASTER.R_SITE_R_DSNTYP_FK_I ON MASTER.REPL_SITE
(DSN_TYPE)
TABLESPACE USERSINDX;


--
-- R_SITE_R_S_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_SITE_R_S_TYPE_FK_I ON MASTER.REPL_SITE
(SITE_TYPE)
TABLESPACE USERSINDX;


--
-- STATES_NAPR_FK_I  (Index) 
--
CREATE INDEX MASTER.STATES_NAPR_FK_I ON MASTER.KLS_STATES
(NAPR_ID)
TABLESPACE USERSINDX;


--
-- STATES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.STATES_PK ON MASTER.KLS_STATES
(ID)
TABLESPACE USERSINDX;


--
-- TRANS_LOAD_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.TRANS_LOAD_MOS_FK_I ON MASTER.TRANS
(LOAD_MOS_ID)
TABLESPACE USERSINDX;


--
-- TRANS_MOS_GRP_FK_I  (Index) 
--
CREATE INDEX MASTER.TRANS_MOS_GRP_FK_I ON MASTER.TRANS
(MOS_GRP_ID)
TABLESPACE USERSINDX;


--
-- TRANS_NAPR_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.TRANS_NAPR_MOS_FK_I ON MASTER.TRANS
(NAPR_MOS_ID)
TABLESPACE USERSINDX;


--
-- TRANS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TRANS_PK ON MASTER.TRANS
(ID)
TABLESPACE USERSINDX;


--
-- TRANS_PROD_GU12_FK_I  (Index) 
--
CREATE INDEX MASTER.TRANS_PROD_GU12_FK_I ON MASTER.TRANS
(PROD_GU12_ID)
TABLESPACE USERSINDX;


--
-- TRANS_VAGOWN_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.TRANS_VAGOWN_MOS_FK_I ON MASTER.TRANS
(VAGOWN_MOS_ID)
TABLESPACE USERSINDX;


--
-- T_SNPORDEXP_UPLOADORD_UK1_KSE  (Index) 
--
CREATE UNIQUE INDEX MASTER.T_SNPORDEXP_UPLOADORD_UK1_KSE ON MASTER.T_SNPORDEXP_UPLOADORD_KSE
(ORDERID, LOAD_VES)
TABLESPACE USERS;


--
-- VED_OSMOTR_LOAD_TYPE_ID_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_LOAD_TYPE_ID_I ON MASTER.VED_OSMOTR
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_MESTO_ID_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_MESTO_ID_I ON MASTER.VED_OSMOTR
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_MT_DATE_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_MT_DATE_I ON MASTER.VED_OSMOTR
(MESTO_ID, LOAD_TYPE_ID, VED_DATE, VED_NUM)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_OSMOTR_PK ON MASTER.VED_OSMOTR
(ID)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_VED_NUM_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_VED_NUM_I ON MASTER.VED_OSMOTR
(VED_NUM)
TABLESPACE USERSINDX;


--
-- VID_OTGR_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.VID_OTGR_LOAD_TYPE_FK_I ON MASTER.KLS_VID_OTGR
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- VID_OTGR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VID_OTGR_PK ON MASTER.KLS_VID_OTGR
(LOAD_ABBR)
TABLESPACE USERSINDX;


--
-- ZAKAZ_GRAFIK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ZAKAZ_GRAFIK_UK ON MASTER.ZAKAZ_GRAFIK
(ZAKAZ_HIST_ID, DATE_LOAD)
TABLESPACE USERSINDX;


--
-- FOR_DOCUMENTS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Documents AS

-- Найти документ по реквизитам (ID<>pDocId)
-- Возвращаемое значение:
-- 				>0 - Номер найденного документа
--				0 - не существует
-- 				<0 - Ошибка
FUNCTION CHECK_EXIST(pDocType NUMBER, pMestoId NUMBER, pDocId VARCHAR2, pDocPrefix VARCHAR2, pDocNum NUMBER, pDocDate DATE) RETURN NUMBER;

-- Проверить номер документа в списках на резервирование других пользователей
-- Возвращаемое значение:
-- 				1 - уже существует
--				0 - не существует
-- 				<0 - Ошибка
FUNCTION CHECK_RESERV(pDocType NUMBER, pMestoId NUMBER, pDocPrefix VARCHAR2, pDocNum NUMBER, pDocDate DATE) RETURN NUMBER;

-- Очистить список зарезервированных номеров для данного типа документа
-- текущего пользователя
PROCEDURE CLEAR_RESERV (pDocType NUMBER, pMestoId NUMBER);

-- Определить следующий номер документа
-- Возвращаемое значение - номер документа
FUNCTION GET_NEXT_NUM(pDocType NUMBER, pMestoId NUMBER, pDocPrefix VARCHAR2, pDocDate DATE) RETURN NUMBER;

-- Сохранить номер документа
PROCEDURE SET_NUM(pDocType NUMBER, pMestoId NUMBER, pDocId VARCHAR2, pDocPrefix VARCHAR2, pDocNum NUMBER, pDocDate DATE);

END;

/

--
-- FOR_ENVIRONMENT  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Environment AS

-- Возвратить значение переменной 
FUNCTION GET_ENV(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pNETUSER VARCHAR2:=NULL) RETURN VARCHAR2;
FUNCTION GET_ENV_USER(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2) RETURN VARCHAR2;

-- Присвоить значение переменной (если нет - добавить)  
PROCEDURE SET_ENV(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pENV_VALUE VARCHAR2:=NULL, pNETUSER VARCHAR2:=NULL);
PROCEDURE SET_ENV_USER(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pENV_VALUE VARCHAR2:=NULL);

-- Удалить переменную
PROCEDURE DEL_ENV(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pNETUSER VARCHAR2:=NULL);
PROCEDURE DEL_ENV_USER(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pNETUSER VARCHAR2:=NULL);

END;

/

--
-- FOR_PASP  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_pasp AS

/* ПАСПОРТА */


-- Добавить/изменить паспорт
FUNCTION AddPasp (pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER ,pPASP_NUM VARCHAR2, pREZ_NUM VARCHAR2,
                  pPASP_DATE DATE,pINSPEKTOR VARCHAR2, pDATE_OFORML DATE, pPROD_ID_NPR VARCHAR2, pDATE_VIR DATE,
				  pPERER_ID NUMBER) RETURN VARCHAR2;

 /* УДАЛИТЬ ПАСПОРТ С ПОКАЗАТЕЛЯМИ */
PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2);

-- Добавить/обновить основные показатели паспорта
PROCEDURE AddMainPaspValue (pCOMMIT NUMBER,pPASP_ID VARCHAR2, pPL15 NUMBER, pPL20 NUMBER, pP_SER NUMBER,
                            pT_VSP NUMBER, pP_VOD NUMBER, pP_DIRT NUMBER, pMG_SOL NUMBER, pP_SOL NUMBER);

-- Добавить/обновить значение показателя паспорта
PROCEDURE SET_PASP_VALUE (pPASP_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2, pQUAL VARCHAR2);

-- Получить значение показателя паспорта
FUNCTION GET_PASP_VALUE_AS_NUM (pPASP_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN NUMBER;
FUNCTION GET_PASP_VALUE_AS_CHAR (pPASP_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN VARCHAR2;

-- Поиск паспорта
FUNCTION GET_PASP_ID RETURN NUMBER;

-- Получить ID показателя паспорта по ТЕГУ
FUNCTION GET_KODIF_ID_BY_TAG (pPROD_ID_NPR VARCHAR2, pTAG VARCHAR2) RETURN NUMBER;

--Получить показатель по тегу(ТАУБИН)
FUNCTION GET_PASP_VALUE_BY_TAG (pPASP_ID VARCHAR2, pKODIF_TAG VARCHAR2) RETURN VARCHAR2;

--Получить показатель по коду R3(ТАУБИН)
FUNCTION GET_PASP_VALUE_BY_R3 (pPASP_ID VARCHAR2, pID_R3 VARCHAR2) RETURN VARCHAR2;

END;

/

--
-- FOR_SESSION  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Session AS

-- Открыть сессию журнала событий 
FUNCTION StartSession(pDESCRIPT VARCHAR2, pAPPL_NAME VARCHAR2, pMODULE_NAME VARCHAR2) RETURN NUMBER;

-- Закрыть сессию журнала событий
PROCEDURE FinishSession(pSessionId NUMBER, pMODULE_NAME VARCHAR2);

-- Записать событие
FUNCTION WriteToLog(pSessionId NUMBER, pSTATUS NUMBER, pDESCRIPT VARCHAR2, pSITE_RN NUMBER, pMODULE_NAME VARCHAR2, pLOG_TIME DATE DEFAULT SYSDATE) RETURN NUMBER;

END;

/

--
-- FOR_SVED_IN  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_SVED_IN AS

  /* СВЕДЕНИЯ о разгрузке */ 

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pSVED_IN_ID VARCHAR2) RETURN NUMBER;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER, 
     pSVED_NUM NUMBER, pSVED_DATE DATE, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, 
	 pEND_NALIV_TIME VARCHAR2, pDATE_OFORML DATE, pPROD_ID_NPR VARCHAR2, pPASP_NUM VARCHAR2, 
	 pREZ_NUM VARCHAR2, pPASP_DATE DATE, pPL20 NUMBER, pPL15 NUMBER, pP_VOD NUMBER, pP_DIRT NUMBER, 
	 pMG_SOL NUMBER, pP_SOL NUMBER) RETURN VARCHAR2;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2);

  /* Проверка вагона на уникальность
     Возвращаемое значение - номер сведения, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER;

  /* Скопировать позиции СВЕДЕНИЯ */
  PROCEDURE CopySvedRow (pCOMMIT NUMBER, pSVED_OLD_ID VARCHAR2, pSVED_ID VARCHAR2);
  
END;
/

--
-- FOR_TEMP  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Temp AS

  /* Объявить временную переменную 
     pVariName - имя переменной
     pVariValue - значение переменной
	 pAppName - приложение (можно не указывать)
	 pUnitName - модуль (можно не указывать)
  */	   
  FUNCTION SET_VARI(pVariName VARCHAR2, PVariValue NUMBER, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER;
  FUNCTION SET_VARI(pVariName VARCHAR2, PVariValue DATE, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER;
  FUNCTION SET_VARI(pVariName VARCHAR2, PVariValue VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER;

  /* Прочитать значение временной переменной
     pVariName - имя переменной
	 pAppName - приложение (можно не указывать)
	 pUnitName - модуль (можно не указывать)
	 pVariId - ID переменной (указывать если pVariName=NULL)
  */	   
  FUNCTION GET_AS_NUM(pVariName VARCHAR2, pAppName VARCHAR2:='', PUnitName VARCHAR2:='', PVariId NUMBER:=NULL) RETURN NUMBER;
  FUNCTION GET_AS_DATE(pVariName VARCHAR2, pAppName VARCHAR2:='', PUnitName VARCHAR2:='', PVariId NUMBER:=NULL, pFormat VARCHAR2:='dd.mm.yyyy hh24:mi:ss') RETURN DATE;
  FUNCTION GET_AS_CHAR(pVariName VARCHAR2, pAppName VARCHAR2:='', PUnitName VARCHAR2:='', PVariId NUMBER:=NULL, pFormat VARCHAR2:='dd.mm.yyyy hh24:mi:ss') RETURN VARCHAR2;

  /* Подчистка временных переменных */
  PROCEDURE CLEAR_TEMP_VARI;
  
  /* Параметры отчета */
  PROCEDURE SET_REPORT_PARAM_VALUE (pREP_ID NUMBER);

  /* Очистить параметры отчета */
  PROCEDURE EMPTY_REPORT_PARAM_VALUE (pREP_ID NUMBER);
    
END;

/

--
-- FOR_VES_EASY  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_VES_EASY AS

/* Расчет факт.плотности по температуре и плотности при температуре <=-25 */
FUNCTION GET_FACT_PL_MOROZ(pTEMPER NUMBER, pPL NUMBER) RETURN NUMBER;

/* Расчет факт.плотности по температуре и плотности при 20'C по ГОСТ 3900-85 */
FUNCTION GET_FACT_PL_390085(pTEMPER NUMBER, pPL20 NUMBER) RETURN NUMBER;

/* Определение коэффициента коррекции объема по ASTM D 1250 */
FUNCTION GET_CTLV_ASTMD1250(pTEMPER NUMBER, pPL15 NUMBER) RETURN NUMBER;

/* Определение текущего ГОСТа */
FUNCTION GET_DEFAULT_GOST (pLOAD_TYPE_ID NUMBER, pDATE_CALC DATE,
                           pTEMPER VARCHAR2, pPL15 NUMBER, pPL20 NUMBER) RETURN NUMBER;

/* Расчет объема при 15'C по фактическому объему */
FUNCTION GET_VOLUME15_BY_VOLUME (pDATE_CALC DATE, vVOLUME NUMBER, vTEMPER NUMBER, vCTLV NUMBER) RETURN NUMBER;

/* Расчет фактического объема по объему при 15'C */
FUNCTION GET_VOLUME_BY_VOLUME15 (pDATE_CALC DATE, vVOLUME15 NUMBER, vTEMPER NUMBER, vCTLV NUMBER) RETURN NUMBER;

/* Перерасчет весовых показателей */
FUNCTION CALC_VES(pLOAD_TYPE_ID NUMBER, pDATE_CALC DATE) RETURN NUMBER;

END;
/

--
-- FOR_VISIR  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_VISIR AS

TYPE CURSTYPE IS REF CURSOR;

PROCEDURE GLOBAL_TO_LOCAL(AUSER_ID NUMBER,FROM_DATE DATE,TO_DATE DATE);
PROCEDURE LOCAL_TO_GLOBAL(AUSER_ID NUMBER,FROM_DATE DATE,TO_DATE DATE);
PROCEDURE LOCAL_TO_GLOBAL_ROW(AACTION VARCHAR2,AUSER_ID NUMBER, ADATE_REE DATE, ADOP_REE NUMBER, ANOM_ZD VARCHAR2, APRICHIN VARCHAR2);

END;

/

--
-- FOR_DOCUMENTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Documents AS

-- Ошибка
PROCEDURE RaiseError (pText VARCHAR2) AS
BEGIN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
END;

-- Найти документ по реквизитам (ID<>pDocId)
-- Возвращаемое значение:
-- 				>0 - Номер найденного документа
--				0 - не существует
-- 				<0 - Ошибка
FUNCTION CHECK_EXIST(pDocType NUMBER, pMestoId NUMBER, pDocId VARCHAR2, pDocPrefix VARCHAR2, pDocNum NUMBER, pDocDate DATE) RETURN NUMBER AS
res NUMBER;
vFIELD_PREFIX VARCHAR2(50);
vFIELD_NUM VARCHAR2(50);
vFIELD_DATE VARCHAR2(50);
vFIELD_ID VARCHAR2(50);
vFIELD_ID_TYPE VARCHAR2(50);
vTABLENAME VARCHAR2(50);
vFIELD_MESTO VARCHAR2(50);
vAND VARCHAR2(10);
vSQL VARCHAR2(4000);
cur INTEGER; -- Курсор
fdbk INTEGER; -- Результат  EXECUTE
BEGIN
  res:=FOR_SCRIPTS.SG$NO_ROW;
  FOR lcur IN (SELECT a.DOC_RULE_ID, a.FROM_DATE, a.TO_DATE,
                      b.FIELD_NUM, b.FIELD_DATE, b.FIELD_PREFIX, b.FIELD_ID,
					  b.TABLENAME, b.FIELD_MESTO, b.FIELD_ID_TYPE
               FROM KLS_DOC_NUMS a, KLS_DOC_TYPES b
			   WHERE a.DOC_TYPE_ID=b.ID AND a.DOC_TYPE_ID=pDocType
			     AND a.MESTO_ID=pMestoId AND a.DOC_PREFIX||' '=pDocPrefix||' '
			     AND (a.DOC_RULE_ID<>2 OR pDocDate BETWEEN a.FROM_DATE AND a.TO_DATE)
			   )
  LOOP
    -- Описание данного типа документа для указанного места оформления найдено

	-- Подготовим запрос на поиск документа
	vFIELD_ID:=NLS_UPPER(lcur.FIELD_ID);
	vFIELD_ID_TYPE:=NLS_UPPER(lcur.FIELD_ID_TYPE);
	vFIELD_NUM:=NLS_UPPER(lcur.FIELD_NUM);
	vFIELD_DATE:=NLS_UPPER(lcur.FIELD_DATE);
	vFIELD_PREFIX:=NLS_UPPER(lcur.FIELD_PREFIX);
	vFIELD_MESTO:=NLS_UPPER(lcur.FIELD_MESTO);
	vTABLENAME:=NLS_UPPER(lcur.TABLENAME);

	vSQL:='SELECT /*+ RULE */ '||vFIELD_NUM||' as DOC_NUM FROM '||vTABLENAME;
	vAND:=' WHERE ';

	IF vFIELD_ID||' '<>' ' THEN
	  IF vFIELD_ID_TYPE='NUMBER' THEN
	    IF NVL(TO_NUMBER(pDocId),0)<>0 THEN
          vSQL:=vSQL||vAND||vFIELD_ID||'<>'||pDocId;
          vAND:=' AND ';
	    END IF;
	  END IF;
	  IF vFIELD_ID_TYPE='VARCHAR2' THEN
	    IF pDocId||' '<>' ' THEN
          vSQL:=vSQL||vAND||vFIELD_ID||'<>'''||pDocId||'''';
          vAND:=' AND ';
	    END IF;
	  END IF;
	END IF;
	IF vFIELD_NUM||' '<>' ' THEN
      vSQL:=vSQL||vAND||vFIELD_NUM||'='||TO_CHAR(pDocNum);
      vAND:=' AND ';
	END IF;
    IF vFIELD_MESTO||' '<>' ' THEN
	  vSQL:=vSQL||vAND||vFIELD_MESTO||'='||TO_CHAR(pMestoId);
      vAND:=' AND ';
	END IF;
	IF lcur.DOC_RULE_ID=2 AND vFIELD_DATE||' '<>' ' THEN
	  vSQL:=vSQL||vAND||'('||vFIELD_DATE||' BETWEEN TO_DATE('''||TO_CHAR(lcur.FROM_DATE,'dd.mm.yyyy')||''',''dd.mm.yyyy'') AND TO_DATE('''||TO_CHAR(lcur.TO_DATE,'dd.mm.yyyy')||''',''dd.mm.yyyy'') )';
      vAND:=' AND ';
	END IF;
	IF vFIELD_PREFIX||' '<>' ' THEN
	  vSQL:=vSQL||vAND||vFIELD_PREFIX||'||'' ''='''||TO_CHAR(pDocPrefix)||' ''';
      vAND:=' AND ';
	END IF;

    -- Проверяем наличие документа с аналогичными реквизитами
    -- Открываем курсор
    cur := DBMS_SQL.OPEN_CURSOR;
    -- парсинг запроса
    DBMS_SQL.PARSE(cur,vSQL,DBMS_SQL.NATIVE);
    -- Определяем поля
    DBMS_SQL.DEFINE_COLUMN (cur, 1, res);
    -- Осуществляем перебор записей
	res:=0;
    fdbk := DBMS_SQL.EXECUTE (cur);
    LOOP
      EXIT WHEN DBMS_SQL.FETCH_ROWS (cur) = 0;
	  -- Читаем поле
      DBMS_SQL.COLUMN_VALUE (cur, 1, res);
	  res:=NVL(res,0);
	  EXIT;
  	END LOOP;
  	-- закрываем запрос
    DBMS_SQL.CLOSE_CURSOR (cur);
    EXIT;
  END LOOP;

  RETURN res;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FOR_SCRIPTS.SG$ERROR;
END;


-- Проверить номер документа в списках на резервирование других пользователей
-- Возвращаемое значение:
-- 				1 - уже существует
--				0 - не существует
-- 				<0 - Ошибка
FUNCTION CHECK_RESERV(pDocType NUMBER, pMestoId NUMBER, pDocPrefix VARCHAR2, pDocNum NUMBER, pDocDate DATE) RETURN NUMBER AS
BEGIN
  FOR lcur IN (SELECT 1 as IS_EXIST
               FROM KLS_DOC_RESERV a, KLS_DOC_NUMS b
			   WHERE a.DOC_TYPE_ID=pDocType AND a.MESTO_ID=pMestoId
			     AND a.NEXT_DOC_NUM=pDocNum AND (a.DOC_PREFIX||' '=pDocPrefix||' ')
			     AND (b.DOC_RULE_ID<>2 OR pDocDate BETWEEN b.FROM_DATE AND b.TO_DATE)
			     AND NOT
				      (TERMINAL_NAME=For_Init.GetCurrTerm AND
                       OSUSER_NAME=For_Init.GetCurrUser)
			  )
  LOOP
    -- Документ данного типа с таким же номером уже зарезервирован
	RETURN 1;
  END LOOP;

  RETURN 0;
END;

-- Очистить список зарезервированных номеров текущего пользователя для типа документа
PROCEDURE CLEAR_RESERV (pDocType NUMBER, pMestoId NUMBER) AS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  DELETE FROM KLS_DOC_RESERV
   WHERE TERMINAL_NAME=For_Init.GetCurrTerm
     AND OSUSER_NAME=For_Init.GetCurrUser
	 AND DOC_TYPE_ID=pDocType
	 AND MESTO_ID=pMestoId;
  COMMIT;
END;

-- Получить диапазон номеров из которого зарезервирован номер
-- 0 - нет зарезервированного номер
-- >0 - KLS_DOC_NUMS.ID
FUNCTION GET_DOC_NUMS_RESERV (pDocType NUMBER, pMestoId NUMBER) RETURN NUMBER AS
res NUMBER;
BEGIN
  SELECT DOC_NUMS_ID INTO res FROM  KLS_DOC_RESERV
   WHERE TERMINAL_NAME=For_Init.GetCurrTerm
     AND OSUSER_NAME=For_Init.GetCurrUser
	 AND DOC_TYPE_ID=pDocType
	 AND MESTO_ID=pMestoId;
  RETURN res;
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;

-- Получить зарезервированный номер
-- 0 - нет зарезервированного номер
-- >0 - зарезервированный номер
FUNCTION GET_RESERV (pDocType NUMBER, pMestoId NUMBER) RETURN NUMBER AS
res NUMBER;
BEGIN
  SELECT NEXT_DOC_NUM INTO res FROM  KLS_DOC_RESERV
   WHERE TERMINAL_NAME=For_Init.GetCurrTerm
     AND OSUSER_NAME=For_Init.GetCurrUser
	 AND DOC_TYPE_ID=pDocType
	 AND MESTO_ID=pMestoId;
  RETURN res;
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;

-- Определить следующий номер документа
-- Возвращаемое значение - номер документа
FUNCTION GET_NEXT_NUM(pDocType NUMBER, pMestoId NUMBER, pDocPrefix VARCHAR2, pDocDate DATE) RETURN NUMBER AS
PRAGMA AUTONOMOUS_TRANSACTION;
res NUMBER;
i NUMBER;
BEGIN
  res:=FOR_SCRIPTS.SG$NO_ROW;

  FOR lcur IN (SELECT *
               FROM KLS_DOC_NUMS
			   WHERE DOC_TYPE_ID=pDocType AND MESTO_ID=pMestoId
			     AND (DOC_RULE_ID<>2 OR pDocDate BETWEEN FROM_DATE AND TO_DATE)
				 AND DOC_PREFIX||' '=Trim(pDocPrefix)||' '
			   FOR UPDATE)
  LOOP
    -- Описание данного типа документа для указанного места оформления найдено

    -- 1.Определяем диапазон номеров из которого уже зарезервирован номер
	res:=0;
  	i:=GET_DOC_NUMS_RESERV(pDocType,pMestoId);
	IF i=lcur.ID THEN
	  -- Если совершается попытка зарезервировать номер из диапазона, из которого уже
	  -- зарезервирован номер, то возвращаем старый зарезервированный номер
	  res:=GET_RESERV(pDocType,pMestoId);
	  IF res>0 THEN
        -- Проверяем наличие документа с аналогичными реквизитами в БД
	    IF CHECK_EXIST(pDocType,pMestoId,0,pDocPrefix,res,pDocDate)=0 THEN
          -- Проверяем на наличие номера в списках резерва других пользователей
	      IF CHECK_RESERV(pDocType,pMestoId,pDocPrefix,res,pDocDate)=0 THEN
		    ROLLBACK;
	        RETURN res;
		  END IF;
		END IF;
	  END IF;
	END IF;

	-- 2. Если диапазон номеров изменился или резервирования не производилось
	-- то резервируем по новому

	-- Очищаем список резервирования текущего пользователя
    CLEAR_RESERV(pDocType,pMestoId);

    res:=NVL(lcur.LAST_DOC_NUM,0);

    -- Задаем максимальное кол-во проверок на наличие документа для
	-- исключения зацикливания
    i:=1000;
    WHILE i>0 LOOP
  	  -- Получаем следующий номер
	  res:=res+1;

      -- Проверяем на минимально допустимый
      IF res<lcur.MIN_DOC_NUM THEN
	    res:=lcur.MIN_DOC_NUM;
  	  END IF;
      -- Проверяем на максимально допустимый
	  IF res>NVL(lcur.MAX_DOC_NUM,0) AND NVL(lcur.MAX_DOC_NUM,0)<>0 THEN
	    res:=lcur.MIN_DOC_NUM;
  	  END IF;

  	  -- Проверяем наличие документа c аналогичными реквизитами в БД
	  IF CHECK_EXIST(pDocType,pMestoId,0,pDocPrefix,res,pDocDate)=0 THEN
    	-- Проверяем на наличие номера в списках резерва других пользователей
	    IF CHECK_RESERV(pDocType,pMestoId,pDocPrefix,res,pDOcDate)=0 THEN
	      -- Номер не занят, резервируем
		  INSERT INTO KLS_DOC_RESERV (DOC_TYPE_ID, MESTO_ID, NEXT_DOC_NUM,DOC_NUMS_ID,DOC_PREFIX)
 		     VALUES(pDocType,pMestoId,res,lcur.ID,pDocPrefix);
		  COMMIT;
		  RETURN res;
	    ELSE
	      i:=i-1;
	    END IF;
      ELSE
	    i:=i-1;
	  END IF;
	END LOOP;

    -- Если дошли до этого места, значит номер не был найден
	-- и надо сгенерить ошибку
    ROLLBACK;
    RaiseError('Не удается получить номер документа!');
    EXIT;
  END LOOP;

  ROLLBACK;
  IF res=FOR_SCRIPTS.SG$NO_ROW THEN
    RaiseError('Диапазон номеров за указанный период не определен в справочнике номеров документов!');
  END IF;

  RETURN res;
END;


-- Сохранить номер документа
PROCEDURE SET_NUM(pDocType NUMBER, pMestoId NUMBER, pDocId VARCHAR2, pDocPrefix VARCHAR2, pDocNum NUMBER, pDocDate DATE) AS
res NUMBER;
i NUMBER;
BEGIN
  IF pDocNum<=0 THEN
    RaiseError('Документ с номером <=0 нельзя сохранить! Введите правильный номер.');
  END IF;

  -- 1.Очищаем список резервирования текущего пользователя
  CLEAR_RESERV(pDocType,pMestoId);

  -- 2.Сохраняем номер документа
  res:=FOR_SCRIPTS.SG$NO_ROW;
  FOR lcur IN (SELECT *
               FROM KLS_DOC_NUMS
			   WHERE DOC_TYPE_ID=pDocType AND MESTO_ID=pMestoId
			     AND (DOC_RULE_ID<>2 OR pDocDate BETWEEN FROM_DATE AND TO_DATE)
				 AND (DOC_PREFIX||' '=pDocPrefix||' ')
			   FOR UPDATE)
  LOOP
    -- Описание данного типа документа для указанного места оформления найдено

	-- Проверяем на наличие документа с аналогичными реквизитами в БД
	IF CHECK_EXIST(pDocType,pMestoId,pDocId,pDocPrefix,pDocNum,pDocDate)=0 THEN
      -- Документ отсутствует
	  IF NVL(lcur.LAST_DOC_NUM,0)<pDocNum THEN
		-- Обновляем номер последнего документа
		UPDATE KLS_DOC_NUMS SET LAST_DOC_NUM=pDocNum WHERE ID=lcur.ID;
	    RETURN;
	  ELSE
		-- НЕ обновляем номер последнего документа
		-- поскольку он уже был обновлен другим пользователем
		RETURN;
	  END IF;
	END IF;

    -- Если дошли до этого места, значит сохраняемый номер уже занят
	-- и надо сгенерить ошибку
    RaiseError('Документ с номером '||pDocPrefix||' '||TO_CHAR(pDocNum)||' уже существует!');
    RETURN;
  END LOOP;

  IF res=FOR_SCRIPTS.SG$NO_ROW THEN
    RaiseError('Диапазон номеров за указанный период не определен в справочнике номеров документов!');
  END IF;
END;

END;
/

--
-- FOR_ENVIRONMENT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Environment AS

-- Возвратить значение переменной 
FUNCTION GET_ENV(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pNETUSER VARCHAR2:=NULL) RETURN VARCHAR2 IS
  res VARCHAR2(250);
BEGIN
  res:='';
  BEGIN
    -- Ищем переменную конкретного пользователя
    SELECT TRIM(ENV_VALUE) INTO res FROM ENVIRONMENT a, ENVIRONMENT_GRP b 
	WHERE a.ENV_GRP_ID=b.ID
	  AND NLS_UPPER(TRIM(APPL_NAME))||' ' = NLS_UPPER(TRIM(pAPPL_NAME))||' '
      AND NLS_UPPER(TRIM(b.GRP_NAME))||' ' = NLS_UPPER(TRIM(pGRP_NAME))||' '
      AND NLS_UPPER(TRIM(ENV_NAME))||' ' = NLS_UPPER(TRIM(pENV_NAME))||' ' 
	  AND NLS_UPPER(TRIM(NETUSER))||' ' = NLS_UPPER(TRIM(pNETUSER))||' ';
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
	  -- Ищем общую для всех переменную
      BEGIN
        SELECT TRIM(ENV_VALUE) INTO res FROM ENVIRONMENT a, ENVIRONMENT_GRP b 
	     WHERE a.ENV_GRP_ID=b.ID
    	   AND NLS_UPPER(TRIM(APPL_NAME))||' ' = NLS_UPPER(TRIM(pAPPL_NAME))||' '
           AND NLS_UPPER(TRIM(b.GRP_NAME))||' ' = NLS_UPPER(TRIM(pGRP_NAME))||' '
           AND NLS_UPPER(TRIM(ENV_NAME))||' ' = NLS_UPPER(TRIM(pENV_NAME))||' '
           AND NETUSER IS NULL;
      EXCEPTION 
        WHEN NO_DATA_FOUND THEN
	      res:='';
	  END;	  
  END;
  RETURN res;
END;  	  	

FUNCTION GET_ENV_USER(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2) RETURN VARCHAR2 IS
  res VARCHAR2(250);
BEGIN
  RETURN GET_ENV(pAPPL_NAME,pGRP_NAME,pENV_NAME,FOR_INIT.GetCurrUser);
END;    

-- Присвоить значение переменной (если нет - добавить переменную)
PROCEDURE SET_ENV(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pENV_VALUE VARCHAR2:=NULL, pNETUSER VARCHAR2:=NULL) IS
PRAGMA AUTONOMOUS_TRANSACTION;
  grp_id NUMBER;
BEGIN
  IF TRIM(pGRP_NAME)||' '<>' ' THEN
	-- Поиск группы
    SELECT ID INTO grp_id FROM ENVIRONMENT_GRP 
	 WHERE NLS_UPPER(TRIM(GRP_NAME))=NLS_UPPER(TRIM(pGRP_NAME));
    IF SQL%NOTFOUND THEN
      INSERT INTO ENVIRONMENT_GRP (GRP_NAME) VALUES (NLS_UPPER(TRIM(pGRP_NAME)));
	  COMMIT;
      SELECT ID INTO grp_id FROM ENVIRONMENT_GRP 
	   WHERE NLS_UPPER(TRIM(GRP_NAME))=NLS_UPPER(TRIM(pGRP_NAME));
	END IF;
  ELSE
    grp_id:=0;
  END IF;		

  UPDATE ENVIRONMENT SET ENV_VALUE=TRIM(pENV_VALUE) 
   WHERE NLS_UPPER(TRIM(APPL_NAME))||' ' = NLS_UPPER(TRIM(pAPPL_NAME))||' '
     AND ENV_GRP_ID = grp_id
     AND NLS_UPPER(TRIM(ENV_NAME))||' ' = NLS_UPPER(TRIM(pENV_NAME))||' ' 
     AND NLS_UPPER(TRIM(NETUSER))||' ' = NLS_UPPER(TRIM(pNETUSER))||' ';
  IF SQL%NOTFOUND THEN
    BEGIN
      INSERT INTO ENVIRONMENT (APPL_NAME,ENV_NAME, ENV_VALUE, ENV_TYPES_ID, ENV_GRP_ID, NETUSER) 
	    VALUES (NLS_UPPER(TRIM(pAPPL_NAME)),NLS_UPPER(TRIM(pENV_NAME)),TRIM(pENV_VALUE),1,grp_id,NLS_UPPER(TRIM(pNETUSER)));
	EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;
  END IF;		  	 
  COMMIT;
END;  

PROCEDURE SET_ENV_USER(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pENV_VALUE VARCHAR2:=NULL) IS
BEGIN
  SET_ENV(pAPPL_NAME,pGRP_NAME,pENV_NAME,pENV_VALUE,FOR_INIT.GetCurrUser);
END;

-- Удалить переменную
PROCEDURE DEL_ENV(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pNETUSER VARCHAR2:=NULL) IS
PRAGMA AUTONOMOUS_TRANSACTION;
  grp_id NUMBER;
BEGIN
  IF TRIM(pGRP_NAME)||' '<>' ' THEN
	-- Поиск группы
    SELECT ID INTO grp_id FROM ENVIRONMENT_GRP 
	 WHERE NLS_UPPER(TRIM(GRP_NAME))=NLS_UPPER(TRIM(pGRP_NAME));
    IF SQL%NOTFOUND THEN
      INSERT INTO ENVIRONMENT_GRP (GRP_NAME) VALUES (NLS_UPPER(TRIM(pGRP_NAME)));
	  COMMIT;
      SELECT ID INTO grp_id FROM ENVIRONMENT_GRP 
	   WHERE NLS_UPPER(TRIM(GRP_NAME))=NLS_UPPER(TRIM(pGRP_NAME));
	END IF;
  ELSE
    grp_id:=0;
  END IF;		

  DELETE FROM ENVIRONMENT 
   WHERE NLS_UPPER(TRIM(APPL_NAME))||' ' = NLS_UPPER(TRIM(pAPPL_NAME))||' '
     AND ENV_GRP_ID = grp_id
     AND NLS_UPPER(TRIM(ENV_NAME))||' ' = NLS_UPPER(TRIM(pENV_NAME))||' ' 
     AND NLS_UPPER(TRIM(NETUSER))||' ' = NLS_UPPER(TRIM(pNETUSER))||' ';
  COMMIT;
END;  

PROCEDURE DEL_ENV_USER(pAPPL_NAME VARCHAR2, pGRP_NAME VARCHAR2, pENV_NAME VARCHAR2, pNETUSER VARCHAR2:=NULL) IS
BEGIN
  DEL_ENV(pAPPL_NAME,pGRP_NAME,pENV_NAME,FOR_INIT.GetCurrUser);
END;

END;

/

--
-- FOR_PASP  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_pasp AS

/* ПАСПОРТА */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;


-- Добавить/изменить паспорт
FUNCTION AddPasp (pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER ,pPASP_NUM VARCHAR2, pREZ_NUM VARCHAR2,
                  pPASP_DATE DATE,pINSPEKTOR VARCHAR2, pDATE_OFORML DATE, pPROD_ID_NPR VARCHAR2, pDATE_VIR DATE,
				  pPERER_ID NUMBER) RETURN VARCHAR2 AS
	vID KLS_PASP.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
BEGIN
	 vID:=pID;

    -- ID
	IF pID||' '=' ' OR pID IS NULL THEN
	  vADD:=1;
      SELECT SEQ_KLS_PASP.nextval INTO vTmp FROM DUAL;
	  vID:=SUBSTR(TO_CHAR(vTmp),1,9);
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM KLS_PASP
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Паспорт нельзя отредактировать - он удален!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE KLS_PASP SET (PASP_NUM, REZ_NUM, PASP_DATE, INSPEKTOR, DATE_OFORML, PROD_ID_NPR, MESTO_ID,
		   				DATE_VIR, PERER_ID)=
	  (SELECT pPASP_NUM, pREZ_NUM, pPASP_DATE, pINSPEKTOR, pDATE_OFORML, pPROD_ID_NPR, pMESTO_ID,
	  		  pDATE_VIR, pPERER_ID FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO KLS_PASP (ID, PASP_NUM, REZ_NUM, PASP_DATE, INSPEKTOR, DATE_OFORML, PROD_ID_NPR, MESTO_ID,
		   				DATE_VIR, PERER_ID, DATEUPLOAD)
	  VALUES (vID, pPASP_NUM, pREZ_NUM, pPASP_DATE, pINSPEKTOR, pDATE_OFORML, pPROD_ID_NPR, pMESTO_ID,
	  		  pDATE_VIR, pPERER_ID,SYSDATE);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
END;
 
 /* УДАЛИТЬ ПАСПОРТ С ПОКАЗАТЕЛЯМИ */
PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2) AS
BEGIN
    DELETE FROM KLS_PASP WHERE ID=pID;
    DELETE FROM KLS_VALPASP WHERE PASP_ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
END;

-- Добавить/обновить основные показатели паспорта
PROCEDURE AddMainPaspValue (pCOMMIT NUMBER,pPASP_ID VARCHAR2, pPL15 NUMBER, pPL20 NUMBER, pP_SER NUMBER,
                            pT_VSP NUMBER, pP_VOD NUMBER, pP_DIRT NUMBER, pMG_SOL NUMBER, pP_SOL NUMBER) AS
BEGIN
  NULL;
END;

PROCEDURE SET_PASP_VALUE (pPASP_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2, pQUAL VARCHAR2) AS
BEGIN
	IF (NVL(pKODIF_ID,0)>0) AND NOT(pPASP_ID||' '=' ' OR pPASP_ID IS NULL)  THEN
	  -- Сохраняем значение по ID
	  UPDATE KLS_VALPASP SET QUAL=pQUAL
	  WHERE PASP_ID=pPASP_ID AND KODIF_ID=pKODIF_ID;

	  IF SQL%NOTFOUND THEN
	    INSERT INTO KLS_VALPASP (PASP_ID,KODIF_ID,QUAL)
		VALUES (pPASP_ID,pKODIF_ID,pQUAL);
	  END IF;
	END IF;

  EXCEPTION
    WHEN OTHERS THEN RETURN;
END;

-- Получить значение показателя паспорта
FUNCTION GET_PASP_VALUE_AS_CHAR (pPASP_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN VARCHAR2 AS
  vRes VARCHAR2(30);
  vIS_PASP_UNP NUMBER(1);
BEGIN
vRes:='';
-- источник паспорта
BEGIN
  SELECT 1 INTO vIS_PASP_UNP 
    FROM UNP_PASPORT 
   WHERE ID_PASPORT=pPASP_ID;
EXCEPTION
  WHEN OTHERS THEN
    vIS_PASP_UNP:=0;
END;	   

IF vIS_PASP_UNP=0 THEN
  IF NVL(pKODIF_ID,0)>0 THEN
    SELECT QUAL INTO vRes
    FROM KLS_VALPASP
    WHERE PASP_ID=pPASP_ID AND KODIF_ID=pKODIF_ID AND ROWNUM=1;
  ELSIF pKODIF_TAG||' '<>' ' THEN
    SELECT QUAL INTO vRes
    FROM KLS_VALPASP p, KLS_KODIF k
    WHERE
  		p.KODIF_ID=k.ID
		AND p.PASP_ID=pPASP_ID
		AND NLS_UPPER(k.FIELD_SVED)=NLS_UPPER(pKODIF_TAG)
		AND ROWNUM=1;
  END IF;
ELSE
  IF NVL(pKODIF_ID,0)>0 THEN
    SELECT QUAL INTO vRes
    FROM V_VALPASP_UNP
    WHERE PASP_ID=pPASP_ID AND KODIF_ID=pKODIF_ID AND ROWNUM=1;
  ELSIF pKODIF_TAG||' '<>' ' THEN
    SELECT QUAL INTO vRes
    FROM V_VALPASP_UNP p
    WHERE p.PASP_ID=pPASP_ID
  	  AND NLS_UPPER(p.FIELD_SVED)=NLS_UPPER(pKODIF_TAG)
	  AND ROWNUM=1;
  END IF;
END IF;  
RETURN vRes;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;

FUNCTION GET_PASP_VALUE_AS_NUM (pPASP_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN NUMBER AS
BEGIN
  RETURN ora_char_to_num(GET_PASP_VALUE_AS_CHAR(pPASP_ID,pKODIF_ID, pKODIF_TAG));
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;

/* Поиск паспорта */
-- Поиск паспорта
FUNCTION GET_PASP_ID RETURN NUMBER AS
BEGIN

/**************************************************************
* Поиск паспорта на н/п
*************************************************************
FUNCTION loca_pasp
PARAMETERS m.num_pasp,m.num_rez,m.dins,m.mesto,m.tip_otgr,m.pasp_tbl
PRIVATE m.kodpasp,stor_sele,refr_prod,new_npr,cnt1,old_filter
  stor_sele=SELECT()
  IF EMPTY(m.pasp_tbl)
    m.pasp_tbl='ZAGPASP'
  ENDIF
  IF UPPER(m.pasp_tbl)='ZAGPASP'
    m.pasp_tbl='ZAGPASP'
  ELSE
    m.pasp_tbl='REZPASP'
  ENDIF

  DECLARE ar_np(1)
  DO CASE
    CASE EMPTY(m.num_pasp) OR EMPTY(m.num_rez) OR EMPTY(m.dins)
      m.kodpasp='нет пасп.'
    OTHERWISE
      IF SEEK(m.kod_npr,'PROD')
        m.kod_gr=prod.kod_gr

        SELECT kod FROM prod WHERE kod_gr=m.kod_gr INTO ARRAY ar_np
        IF EMPTY(ar_np)
          =mes_dial(7,'Внимание',"У н/продукта не определена группа. \rСообщите программистам")
          m.kodpasp='нет пасп.'
          SELECT (stor_sele)
          RETURN m.kodpasp
        ENDIF
      ENDIF

      SELECT &pasp_tbl

      CALC CNT() FOR mesto=m._g_mesto ;
                 AND ALLT(num_pasp)=ALLT(m.num_pasp) ;
                 AND ALLT(num_rez)=ALLT(m.num_rez) ;
                 AND dins=m.dins ;
                 AND mesto=m.mesto ;
                 AND tip_otgr=m.tip_otgr TO m.cnt1
      DO CASE
        CASE m.cnt1>=1
          IF m.cnt1=1
            LOCATE FOR mesto=m._g_mesto ;
                   AND ALLT(num_pasp)=ALLT(m.num_pasp) ;
                   AND ALLT(num_rez)=ALLT(m.num_rez) ;
                   AND dins=m.dins ;
                   AND mesto=m.mesto ;
                   AND tip_otgr=m.tip_otgr
          ELSE
            old_filter=FILTER(m.pasp_tbl)
            SET FILTER TO mesto=m._g_mesto ;
                      AND ALLT(num_pasp)=ALLT(m.num_pasp) ;
                      AND ALLT(num_rez)=ALLT(m.num_rez) ;
                      AND dins=m.dins ;
                      AND mesto=m.mesto ;
                      AND tip_otgr=m.tip_otgr
            DO Get_Pasp.spr WITH m.pasp_tbl,''
            m.new_npr=&pasp_tbl..kod_npr
            SET FILTER TO &old_filter
            LOCATE FOR mesto=m._g_mesto ;
                   AND ALLT(num_pasp)=ALLT(m.num_pasp) ;
                   AND ALLT(num_rez)=ALLT(m.num_rez) ;
                   AND dins=m.dins ;
                   AND mesto=m.mesto ;
                   AND kod_npr=m.new_npr ;
                   AND tip_otgr=m.tip_otgr
          ENDIF
          m.new_npr=&pasp_tbl..kod_npr
          IF FOUND()
            m.kodpasp=&pasp_tbl..kodpasp
            IF ASCAN(ar_np,m.new_npr)>0 OR EMPTY(ar_np)
              IF NOT EMPTY(m.kod_npr)
                IF m.kod_npr<>m.new_npr
                  WAIT CLEAR
                  WAIT 'Марки нефтепродуктов в заявке и паспорте'+CHR(13)+;
                     'не совпадают !' WINDOW NOWAIT
                  refr_prod=.T.
                  m.kod_npr=m.new_npr
                ELSE
                  refr_prod=.F.
                ENDIF
              ELSE
                refr_prod=.T.
                m.kod_npr=m.new_npr
              ENDIF
              IF SEEK(m.kod_npr,'PROD')
                m.prod = prod.naim_pr
              ELSE
                m.prod = [Не определен !]
              ENDIF
              IF refr_prod
                SHOW GETS
              ENDIF
            ELSE
              m.kodpasp='нет пасп.'
              WAIT CLEAR
              WAIT 'Марки нефтепродуктов в заявке и паспорте'+CHR(13)+;
                 'принадлежат к разным группам !' WINDOW NOWAIT
            ENDIF
          ELSE
            m.kodpasp='нет пасп.'
            WAIT CLEAR
            WAIT 'Нет такого паспорта !' WINDOW NOWAIT
          ENDIF
        CASE m.cnt1<1
          m.kodpasp='нет пасп.'
          WAIT CLEAR
          WAIT 'Нет такого паспорта !' WINDOW NOWAIT
      ENDCASE
  ENDCASE
  SELECT (stor_sele)
RETURN m.kodpasp

*/
  RETURN NULL;
END;

-- Получить ID показателя паспорта по ТЕГУ
FUNCTION GET_KODIF_ID_BY_TAG (pPROD_ID_NPR VARCHAR2, pTAG VARCHAR2) RETURN NUMBER AS
BEGIN
/*  && ===========================================================
&& ID показателя типа m.tip_pok из паспорта для н/п m.kod_npr
&& ===========================================================
FUNCTION GetPokId
PARAMETERS m.kod_npr,m.tip_pok
PRIVATE m.res,stor_sele
  m.tip_pok=LOWER(ALLT(m.tip_pok))
  m.res=0
  IF m.tip_pok='u_ves'
    stor_sele=SELECT()
    SELECT prod
    LOCATE FOR kod=m.kod_npr
    IF FOUND()
      m.res=prod.u_ves_id
      IF EMPTY(m.res)
        m.res=1
      ENDIF
    ELSE
      m.res=1
    ENDIF
    SELECT (stor_sele)
  ELSE
    SELECT a.kodif_id, B.FIELD_SVED ;
      FROM (m._g_pathdbf+'ntablpok') a,(m._g_pathdbf+'nkodifik') b ;
      WHERE a.kodif_id=b.id ;
        AND a.kod_npr=m.kod_npr ;
        AND M.TIP_POK==LOWER(ALLT(b.field_sved)) ;
      ORDER BY a.sortby ;
      INTO CURSOR cur_tmp
    SELECT cur_tmp
    GO TOP
    m.res=cur_tmp.kodif_id
    IF EMPTY(m.res)
      m.res=0
    ENDIF
    USE IN cur_tmp
  ENDIF
RETURN m.res
*/
  RETURN NULL;
END;

-- Получить значение показателя паспорта по тэгу
FUNCTION GET_PASP_VALUE_BY_TAG (pPASP_ID VARCHAR2, pKODIF_TAG VARCHAR2) RETURN VARCHAR2 AS
  vRes VARCHAR2(50);
  vIS_PASP_UNP NUMBER(1);
BEGIN
  -- источник паспорта
  BEGIN
    SELECT 1 INTO vIS_PASP_UNP 
      FROM UNP_PASPORT 
     WHERE ID_PASPORT=pPASP_ID;
  EXCEPTION
    WHEN OTHERS THEN
      vIS_PASP_UNP:=0;
  END;	   

  IF vIS_PASP_UNP=0 THEN
    SELECT QUAL INTO vRes
    FROM KLS_VALPASP p, KLS_KODIF k
    WHERE
  		p.KODIF_ID=k.ID
		AND p.PASP_ID=pPASP_ID
		AND NLS_UPPER(k.FIELD_SVED)=NLS_UPPER(pKODIF_TAG)
		AND ROWNUM=1;
  ELSE
    SELECT QUAL INTO vRes
    FROM V_VALPASP_UNP p
    WHERE p.PASP_ID=pPASP_ID
		AND NLS_UPPER(p.FIELD_SVED)=NLS_UPPER(pKODIF_TAG)
		AND ROWNUM=1;
  END IF;		
  RETURN vRes;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;

-- Получить значение показателя паспорта по коду R3
FUNCTION GET_PASP_VALUE_BY_R3 (pPASP_ID VARCHAR2, pID_R3 VARCHAR2) RETURN VARCHAR2 AS
  vRes VARCHAR2(50);
  vIS_PASP_UNP NUMBER(1);
BEGIN
  -- источник паспорта
  BEGIN
    SELECT 1 INTO vIS_PASP_UNP 
      FROM UNP_PASPORT 
     WHERE ID_PASPORT=pPASP_ID;
  EXCEPTION
    WHEN OTHERS THEN
      vIS_PASP_UNP:=0;
  END;	   

--  IF vIS_PASP_UNP=0 THEN
    SELECT QUAL INTO vRes
    FROM KLS_VALPASP p, KLS_KODIF k
    WHERE
  		p.KODIF_ID=k.ID
		AND p.PASP_ID=pPASP_ID
		AND NLS_UPPER(k.ID_R3)=NLS_UPPER(pID_R3)
		AND ROWNUM=1;
/*  ELSE
    SELECT QUAL INTO vRes
    FROM V_VALPASP_UNP p
    WHERE p.PASP_ID=pPASP_ID
		AND NLS_UPPER(p.ID_R3)=NLS_UPPER(pID_R3)
		AND ROWNUM=1;
  END IF;*/		
  RETURN vRes;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;


END;

/

--
-- FOR_SESSION  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Session AS

-- Открыть сессию журнала событий 
FUNCTION StartSession(pDESCRIPT VARCHAR2, pAPPL_NAME VARCHAR2, pMODULE_NAME VARCHAR2) RETURN NUMBER AS
  vId NUMBER;
  vLogID NUMBER;
BEGIN
  -- Заголовок сессии
  vID:=GET_SEQ_LOCAL();
  INSERT INTO REPL_SESSION (ID, STATUS, DATE_START, DESCRIPT, APPL_NAME)
     VALUES (vID, 1, SYSDATE, SUBSTR(pDESCRIPT,1,100), pAPPL_NAME);
  COMMIT;
  -- Первая позиция
  vLogID:=WriteToLog(vID,1,'Старт сессии', NULL, pMODULE_NAME);
  RETURN vID;	 
END;

-- Закрыть сессию журнала событий
PROCEDURE FinishSession(pSessionId NUMBER,pMODULE_NAME VARCHAR2) AS
  vLogID NUMBER;
  vStatus NUMBER; 
BEGIN
  -- Определяем финальный статус сессии
  BEGIN
    SELECT SIGN(MIN(STATUS)) INTO vStatus FROM REPL_SESSION_LOG WHERE SESSION_ID=pSessionId;
  EXCEPTION
    WHEN OTHERS THEN 
	  vStatus:=0;
  END;	  	
  -- 
  vLogID:=WriteToLog(pSessionId,1,'Завершение сессии', NULL, pMODULE_NAME);
  -- Завершаем сессию и проставляем статус ошибки (если они были)
  UPDATE REPL_SESSION SET STATUS=vStatus, DATE_FINISH=SYSDATE
    WHERE ID=pSessionId;
  COMMIT;
END;    
  
-- Записать событие
FUNCTION WriteToLog(pSessionId NUMBER, pSTATUS NUMBER, pDESCRIPT VARCHAR2, pSITE_RN NUMBER, pMODULE_NAME VARCHAR2, pLOG_TIME DATE DEFAULT SYSDATE) RETURN NUMBER AS
  vLogID NUMBER;
  vStatus NUMBER;
BEGIN
  vLogID:=GET_SEQ_LOCAL();
  INSERT INTO REPL_SESSION_LOG (ID, SESSION_ID, STATUS, DESCRIPT, LOG_TIME, SITE_RN, MODULE_NAME)
    VALUES (vLogId,pSessionId, pSTATUS, SUBSTR(pDESCRIPT,1,500), pLOG_TIME, pSITE_RN, pMODULE_NAME);
  COMMIT;
  -- Обновим статус сессии (на случай регистрации ошибок)
  IF pStatus<0 THEN
    UPDATE REPL_SESSION SET STATUS=-1 WHERE ID=pSessionId;
    COMMIT;
  END IF;	
  RETURN vLogId;	 
END;

   


END;

/

--
-- FOR_SVED_IN  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_SVED_IN AS

  /* СВЕДЕНИЯ о разгрузке */ 

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  
  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pSVED_IN_ID VARCHAR2) RETURN NUMBER AS
    MaxNum NUMBER;
    CurNum NUMBER;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR_IN.SVED_POS) as MAX_NUM
                 FROM REESTR_IN
				WHERE SVED_IN_ID=pSVED_IN_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;
  
  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    DELETE FROM REESTR_IN WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR_IN WHERE SVED_IN_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Сведение нельзя удалить - есть позиции!');
	END IF;
	 
    DELETE FROM SVED_IN WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER, 
     pSVED_NUM NUMBER, pSVED_DATE DATE, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, 
	 pEND_NALIV_TIME VARCHAR2, pDATE_OFORML DATE, pPROD_ID_NPR VARCHAR2, pPASP_NUM VARCHAR2, 
	 pREZ_NUM VARCHAR2, pPASP_DATE DATE, pPL20 NUMBER, pPL15 NUMBER, pP_VOD NUMBER, pP_DIRT NUMBER, 
	 pMG_SOL NUMBER, pP_SOL NUMBER) RETURN VARCHAR2 AS

	vID VARCHAR2(9);
	vADD NUMBER;
	vTmp NUMBER;
	vGOTOV_TIME DATE;
	vBEG_NALIV_TIME DATE;
	vEND_NALIV_TIME DATE;
  BEGIN

    IF pGOTOV_TIME='' THEN
	  vGOTOV_TIME:=NULL;
	ELSE
	  vGOTOV_TIME:=TO_DATE(pGOTOV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pBEG_NALIV_TIME='' THEN
	  vBEG_NALIV_TIME:=NULL;
	ELSE
	  vBEG_NALIV_TIME:=TO_DATE(pBEG_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pEND_NALIV_TIME='' THEN
	  vEND_NALIV_TIME:=NULL;
	ELSE
	  vEND_NALIV_TIME:=TO_DATE(pEND_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
	
    -- ID
	IF pID||' '=' ' OR pID IS NULL THEN
	  vADD:=1;
      SELECT SEQ_SVED_IN.nextval INTO vTmp FROM DUAL;
	  vID:=SUBSTR(TO_CHAR(vTmp),1,9);	  
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ SVED_NUM
        INTO vTmp
	 	FROM SVED_IN
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Сведение нельзя отредактировать - оно удалена!');
		END IF;
	END;

	-- Обновляем 
	UPDATE SVED_IN SET (SVED_NUM, SVED_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML, 
	    PROD_ID_NPR, MESTO_ID, PASP_NUM, REZ_NUM, PASP_DATE, PL, PL15, P_VOD, P_DIRT, MG_SOL, P_SOL)=
	  (SELECT pSVED_NUM, pSVED_DATE, vGOTOV_TIME, vBEG_NALIV_TIME, vEND_NALIV_TIME, pDATE_OFORML, 
	    pPROD_ID_NPR, pMESTO_ID, pPASP_NUM, pREZ_NUM, pPASP_DATE, pPL20, pPL15, pP_VOD, pP_DIRT, pMG_SOL, pP_SOL FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем 
      INSERT INTO SVED_IN (ID, SVED_NUM, SVED_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML, 
	    PROD_ID_NPR, MESTO_ID, PASP_NUM, REZ_NUM, PASP_DATE, PL, PL15, P_VOD, P_DIRT, MG_SOL, P_SOL)
	  VALUES (vID, pSVED_NUM, pSVED_DATE, vGOTOV_TIME, vBEG_NALIV_TIME, vEND_NALIV_TIME, pDATE_OFORML, 
	    pPROD_ID_NPR, pMESTO_ID, pPASP_NUM, pREZ_NUM, pPASP_DATE, pPL20, pPL15, pP_VOD, pP_DIRT, pMG_SOL, pP_SOL);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;
  
  /* Проверка вагона на уникальность
     Возвращаемое значение - номер сведения, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER AS
  PRAGMA AUTONOMOUS_TRANSACTION;
    vRes NUMBER;
	vWorklen NUMBER;
  BEGIN
    IF pLOAD_TYPE_ID=1 THEN
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#1',FOR_INIT.GetCurrUser);
	ELSE
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#2',FOR_INIT.GetCurrUser);
	END IF;
    SELECT /*+ RULE */ a.SVED_NUM INTO vRes
	  FROM REESTR_IN b,SVED_IN a
	 WHERE b.SVED_IN_ID=a.ID
	   AND a.SVED_DATE>=pDATE-2
	   AND b.NUM_CIST=pNUM_CIST
--	   AND b.VAG_STATUS_ID IN (0,14)
	   AND b.ID<>NVL(pID,0)
	   AND (TRUNC(a.DATE_OFORML)=TRUNC(pDATE) OR
	        ABS(hours_between(a.DATE_OFORML,pDATE))<vWorklen);
    ROLLBACK;
    RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  ROLLBACK;
	  RETURN NULL;
  END;
  

  /* Скопировать позиции СВЕДЕНИЯ */
  PROCEDURE CopySvedRow (pCOMMIT NUMBER, pSVED_OLD_ID VARCHAR2, pSVED_ID VARCHAR2)  AS
    vID REESTR_IN.ID%TYPE;   
 	vOld SVED_IN%ROWTYPE;
	vNew SVED_IN%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vID:=NULL;

	-- Считываем сведение-источник
	BEGIN
	  SELECT * INTO vOld
	    FROM SVED_IN
	   WHERE ID=TRIM(pSVED_OLD_ID);
	EXCEPTION
	  WHEN OTHERS THEN
	    vOld.ID:=NULL;
	END;
	-- Считываем сведение-назначение
	BEGIN
	  SELECT * INTO vNew
	    FROM SVED_IN
	   WHERE ID=TRIM(pSVED_ID);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNew.ID:=NULL;
	END;

	IF vOld.ID IS NULL OR vNew.ID IS NULL OR vOld.ID||' '=vNew.ID||' ' THEN
	  -- Копировать нечего
	  RETURN;
	END IF;

	IF vOld.PROD_ID_NPR='90004' THEN  
      FOR lcur IN (SELECT * FROM REESTR_IN WHERE SVED_IN_ID=vOld.ID) LOOP 
        -- Добавляем вагон в новое сведение
		INSERT INTO REESTR_IN (SVED_IN_ID, MESTO_ID, FORMNAKL_ID,  
  		  NUM_CIST, VAGONTYPE_ID, KALIBR_ID, VES_CIST, VAGOWNER_ID, CAPACITY,  
		  SVED_POS, ZPU_TYPE1, ZPU_TYPE2,DATE_OTGR)
		VALUES (vNew.ID, lcur.MESTO_ID, lcur.FORMNAKL_ID,  
  		  lcur.NUM_CIST, lcur.VAGONTYPE_ID, lcur.KALIBR_ID, lcur.VES_CIST, lcur.VAGOWNER_ID, lcur.CAPACITY,  
		  lcur.SVED_POS, lcur.ZPU_TYPE1, lcur.ZPU_TYPE2, vNew.SVED_DATE);  
      END LOOP;
    END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	
  END;
  
END;
/

--
-- FOR_TEMP  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Temp AS

FUNCTION STR2NUM (InS VARCHAR2, L NUMBER:=1) RETURN NUMBER IS
  v_tmp NUMBER;
  s VARCHAR(240);
BEGIN
  s:=SUBSTR(InS,l,240);
  s:=TRANSLATE(s,'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnmЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё`~!@#$%^&*()_+-=|\:";<>?/.,[]{}№''',
                 '                                                                                                                                                           ');
  s:=LTRIM(RTRIM(s));				 
  v_tmp:=INSTR(s,' ');
  IF v_tmp>0 THEN 
    RETURN TO_NUMBER(SUBSTR(s,1,v_tmp-1));
  ELSE
    IF s IS NULL THEN
	  RETURN 0;
	ELSE  
      RETURN TO_NUMBER(s);
	END IF;  
  END IF; 	
END STR2NUM;

FUNCTION GET_VARI(pVariName VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', PVariId NUMBER:=NULL, pVariType OUT VARCHAR2, pVariNum OUT NUMBER, pVariDate OUT DATE, pVariChar OUT VARCHAR2) RETURN NUMBER IS

 CURSOR tmp_cur1 IS    
  SELECT * FROM v_tempvari
   WHERE (Vari_Name = NLS_UPPER(pVariName)) 
	 AND (App_Name = NLS_UPPER(pAppName) OR (App_Name IS NULL AND pAppName IS NULL))
	 AND (Unit_Name = NLS_UPPER(pUnitName) OR (Unit_Name IS NULL AND pUnitName IS NULL));

 CURSOR tmp_cur2 IS    
  SELECT * FROM v_tempvari WHERE ID = pVariId; 
	   
BEGIN
  IF pVariName IS NOT NULL THEN
    FOR lcur IN tmp_cur1 							   
    LOOP
	  pVariType := lcur.VARI_TYPE;
	  pVariNum := lcur.VARI_NUM;
	  pVariDate := lcur.VARI_DATE;
	  pVariChar := lcur.VARI_CHAR;
	  RETURN lcur.ID;
    END LOOP;
  ELSIF pVariId IS NOT NULL THEN
    FOR lcur IN tmp_cur2 							   
    LOOP
	  pVariType := lcur.VARI_TYPE;
	  pVariNum := lcur.VARI_NUM;
	  pVariDate := lcur.VARI_DATE;
	  pVariChar := lcur.VARI_CHAR;
	  RETURN lcur.ID;
    END LOOP;
  END IF; 	
  RETURN NULL;
END;

FUNCTION GET_AS_NUM(pVariName VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', PVariId NUMBER:=NULL) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariId = 0 THEN
    vId:=NULL;
  ELSE
    vId:=pVariId;
  END IF;		
  IF GET_VARI(pVariName, pAppName, pUnitName, vId, vType, vNum, vDate, vChar) IS NOT NULL THEN
    IF vType='NUM' THEN
  	  RETURN vNum;
	ELSIF vType='DATE' THEN
	  RETURN vDate-TO_DATE('01.01.1900','dd.mm.yyyy');
	ELSE
	  RETURN STR2NUM(vChar);
	END IF;      
  END IF;
  RETURN NULL;
END;		

FUNCTION GET_AS_DATE(pVariName VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pVariId NUMBER:=NULL, pFormat VARCHAR2:='dd.mm.yyyy hh24:mi:ss') RETURN DATE IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariId = 0 THEN
    vId:=NULL;
  ELSE
    vId:=pVariId;
  END IF;		
  IF GET_VARI(pVariName, pAppName, pUnitName, vId, vType, vNum, vDate, vChar) IS NOT NULL THEN
    IF vType='NUM' THEN
  	  RETURN TO_DATE('01.01.1900','dd.mm.yyyy')+vNum;
	ELSIF vType='DATE' THEN
	  RETURN vDate;
	ELSE
	  RETURN TO_DATE(vChar,pFormat);
	END IF;      
  END IF;
  RETURN NULL;
END;		

FUNCTION GET_AS_CHAR(pVariName VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', PVariId NUMBER:=NULL, pFormat VARCHAR2:='dd.mm.yyyy hh24:mi:ss') RETURN VARCHAR2 IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariId = 0 THEN
    vId:=NULL;
  ELSE
    vId:=pVariId;
  END IF;		
  IF GET_VARI(pVariName, pAppName, pUnitName, vId, vType, vNum, vDate, vChar) IS NOT NULL THEN
    IF vType='NUM' THEN
  	  RETURN TO_CHAR(vNum);
	ELSIF vType='DATE' THEN
	  RETURN TO_CHAR(vDate,pFormat);
	ELSE
	  RETURN vChar;
	END IF;      
  END IF;
  RETURN NULL;
END;		

PROCEDURE CLEAR_TEMP_VARI IS
BEGIN
  DELETE FROM TEMPVARI WHERE NOT (SYSDATE BETWEEN BEGIN_DATE AND END_DATE);
  DELETE FROM MASTER_REPORTS WHERE NOT (SYSDATE<=REPORT_AGE);
END;

PROCEDURE SET_VARI_VALUE (pId NUMBER,pVariValue NUMBER,pTime NUMBER:=1) IS
BEGIN
  IF pId IS NOT NULL THEN
    UPDATE TEMPVARI SET NUM1=pVariValue, DATE1=NULL, CHAR1=NULL, 
	   VARI_TYPE='NUM', BEGIN_DATE = SYSDATE, END_DATE = BEGIN_DATE+pTime 
	   WHERE ID=pId;
	COMMIT;   
  END IF;	 
END;   

PROCEDURE SET_VARI_VALUE (pId NUMBER,pVariValue DATE,pTime NUMBER:=1) IS
BEGIN
  IF pId IS NOT NULL THEN
    UPDATE TEMPVARI SET NUM1=NULL, DATE1=pVariValue, CHAR1=NULL, 
	   VARI_TYPE='DATE', BEGIN_DATE = SYSDATE, END_DATE = BEGIN_DATE+pTime 
	   WHERE ID=pId;
	COMMIT;   
  END IF;	 
END;   

PROCEDURE SET_VARI_VALUE (pId NUMBER,pVariValue VARCHAR2,pTime NUMBER:=1) IS
BEGIN
  IF pId IS NOT NULL THEN
    UPDATE TEMPVARI SET NUM1=NULL, DATE1=NULL, CHAR1=pVariValue, 
	   VARI_TYPE='CHAR', BEGIN_DATE = SYSDATE, END_DATE = BEGIN_DATE+pTime 
	   WHERE ID=pId;
	COMMIT;   
  END IF;	 
END;   

FUNCTION ADD_VARI (pVariName VARCHAR2, PVariValue NUMBER, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariName IS NOT NULL THEN
    INSERT INTO TEMPVARI (APP_NAME, UNIT_NAME, BEGIN_DATE, END_DATE, VARI_TYPE, VARI_NAME, NUM1) 
	  VALUES (pAppName, pUnitName, SYSDATE, SYSDATE+pTime, 'NUM', pVariName, pVariValue);
	COMMIT;   
    RETURN GET_VARI(pVariName, pAppName, pUnitName, NULL, vType, vNum, vDate, vChar);
  END IF;	 
  RETURN NULL;	 
END;   

FUNCTION ADD_VARI (pVariName VARCHAR2, PVariValue DATE, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariName IS NOT NULL THEN
    INSERT INTO TEMPVARI (APP_NAME, UNIT_NAME, BEGIN_DATE, END_DATE, VARI_TYPE, VARI_NAME, DATE1) 
	  VALUES (pAppName, pUnitName, SYSDATE, SYSDATE+pTime, 'DATE', pVariName, pVariValue);
	COMMIT;   
    RETURN GET_VARI(pVariName, pAppName, pUnitName, NULL, vType, vNum, vDate, vChar);
  END IF;	 
  RETURN NULL;	 
END;   

FUNCTION ADD_VARI (pVariName VARCHAR2, PVariValue VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariName IS NOT NULL THEN
    INSERT INTO TEMPVARI (APP_NAME, UNIT_NAME, BEGIN_DATE, END_DATE, VARI_TYPE, VARI_NAME, CHAR1) 
	  VALUES (pAppName, pUnitName, SYSDATE, SYSDATE+pTime, 'CHAR', pVariName, pVariValue);
	COMMIT;   
    RETURN GET_VARI(pVariName, pAppName, pUnitName, NULL, vType, vNum, vDate, vChar);
  END IF;
  RETURN NULL;	 
END;   

FUNCTION SET_VARI(pVariName VARCHAR2, PVariValue NUMBER, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariName IS NULL THEN
    RETURN NULL; 
  END IF;	
  vId:=GET_VARI(pVariName, pAppName, pUnitName, NULL, vType, vNum, vDate, vChar);
  IF vId IS NOT NULL THEN
	SET_VARI_VALUE(vId,pVariValue,pTime);
  ELSE
    vId:=ADD_VARI(pVariName, pVariValue, pAppName, pUnitName, pTime);
  END IF;
  RETURN vId;  
END;  		  

FUNCTION SET_VARI(pVariName VARCHAR2, PVariValue DATE, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariName IS NULL THEN
    RETURN NULL; 
  END IF;	
  vId:=GET_VARI(pVariName, pAppName, pUnitName, NULL, vType, vNum, vDate, vChar);
  IF vId IS NOT NULL THEN
	SET_VARI_VALUE(vId,pVariValue,pTime);
  ELSE
    vId:=ADD_VARI(pVariName, pVariValue, pAppName, pUnitName, pTime);
  END IF;
  RETURN vId;  
END;  		  

FUNCTION SET_VARI(pVariName VARCHAR2, PVariValue VARCHAR2, pAppName VARCHAR2:='', pUnitName VARCHAR2:='', pTime NUMBER := 1) RETURN NUMBER IS
  vType VARCHAR2(10);
  vNum NUMBER;
  vDate DATE;
  vChar VARCHAR2(250);
  vId NUMBER;
BEGIN
  IF pVariName IS NULL THEN
    RETURN NULL; 
  END IF;	
  vId:=GET_VARI(pVariName, pAppName, pUnitName, NULL, vType, vNum, vDate, vChar);
  IF vId IS NOT NULL THEN
	SET_VARI_VALUE(vId,pVariValue,pTime);
  ELSE
    vId:=ADD_VARI(pVariName, pVariValue, pAppName, pUnitName, pTime);
  END IF;
  RETURN vId;  
END;  		  

/* Параметры отчета */
PROCEDURE SET_REPORT_PARAM_VALUE (pREP_ID NUMBER) AS

  vREPORT_NAME VARCHAR2(100); 
  vREPORT_FILE VARCHAR2(30); 
  vREPORT_GROUP VARCHAR2(30); 
  vREPORT_TYPE VARCHAR2(15); 
  vREPORT_TITLE VARCHAR2(250);	
  vDIAGRAM_TYPE VARCHAR2(15);
  vAXES_X_NAME VARCHAR2(30);
  vCOUNT_COLS_X NUMBER;
  vAXES_Y_NAME VARCHAR2(30);
  vCOUNT_COLS_Y NUMBER;
BEGIN
  -- Выбираем название файла с отчетом
  SELECT NLS_UPPER(REPORT_FILE) INTO vREPORT_FILE FROM REPORTS WHERE ID=pREP_ID;	

  -- Проверяем наличие записи с параметрами отчета во временной таблице
  UPDATE V_MASTER_REPORTS SET REP_ID=pREP_ID
   WHERE REPORT_FILE=vREPORT_FILE;

  -- Если нет - добавляем 
  IF SQL%NOTFOUND THEN
    INSERT INTO MASTER_REPORTS (REP_ID,REPORT_FILE) VALUES (pREP_ID,vREPORT_FILE);
  END IF;

  COMMIT;
  	   
  -- Дописываем остальные параметры
  UPDATE V_MASTER_REPORTS SET (APP_NAME, REP_ID, REPORT_NAME, REPORT_FILE, REPORT_GROUP, REPORT_TYPE, 
    REPORT_TITLE, BEGIN_DATE, BEGIN_TIME, END_DATE, END_TIME, DATE_REE, DATE_PLAN, FROM_PARUS, 
	VIEW_PROD, VIEW_DAYS, IS_AGENT, DIAGRAM_TYPE, DIAGRAM_KIND, AXES_X_NAME, COUNT_COLS_X, 
	AXES_Y_NAME, COUNT_COLS_Y,FILIAL_ID, GROUP_KIND_ID, AZC_ID, DOG_NUMBER, PLAT_ID, GRP_ID_NPR, PROD_ID_NPR,IS_SNP,IS_UNP)=
  (SELECT
    'MASTER',
    REPORTS.ID,
    REPORTS.REPORT_NAME,
    REPORTS.REPORT_FILE,
    REPORTS.REPORT_GROUP,
    REPORTS.REPORT_TYPE,
    NVL(REPORTS.REPORT_TITLE,' '),
    NVL(For_Temp.GET_AS_DATE('BEGIN_DATE', 'MASTER', REPORTS.REPORT_FILE),TRUNC(SYSDATE)) AS BEGIN_DATE,
    NVL(For_Temp.GET_AS_CHAR('BEGIN_TIME', 'MASTER', REPORTS.REPORT_FILE),'00:00') AS BEGIN_TIME,
    NVL(For_Temp.GET_AS_DATE('END_DATE', 'MASTER', REPORTS.REPORT_FILE),TRUNC(SYSDATE)) AS END_DATE,
    NVL(For_Temp.GET_AS_CHAR('END_TIME', 'MASTER', REPORTS.REPORT_FILE),'00:00') AS END_TIME,
    NVL(For_Temp.GET_AS_CHAR('DATE_REE', 'MASTER', REPORTS.REPORT_FILE),TO_CHAR(SYSDATE+1,'dd.mm.yyyy')) AS DATE_REE,
    NVL(For_Temp.GET_AS_CHAR('DATE_PLAN', 'MASTER', REPORTS.REPORT_FILE),TO_CHAR(TRUNC(SYSDATE,'MONTH'),'dd.mm.yyyy')) AS DATE_PLAN,
    NVL(For_Temp.GET_AS_NUM('FROM_PARUS', 'MASTER', REPORTS.REPORT_FILE),0) AS FROM_PARUS,
    NVL(For_Temp.GET_AS_NUM('VIEW_PROD', 'MASTER', REPORTS.REPORT_FILE),0) AS VIEW_PROD,
    NVL(For_Temp.GET_AS_NUM('VIEW_DAYS', 'MASTER', REPORTS.REPORT_FILE),0) AS VIEW_DAYS,
    NVL(For_Temp.GET_AS_NUM('IS_AGENT', 'MASTER', REPORTS.REPORT_FILE),0) AS IS_AGENT,
    REPORTS.DIAGRAM_TYPE,
    NVL(For_Temp.GET_AS_CHAR('DIAGRAM_KIND', 'MASTER', REPORTS.REPORT_FILE),'') AS DIAGRAM_KIND,
    REPORTS.AXES_X_NAME,
    REPORTS.COUNT_COLS_X,
    REPORTS.AXES_Y_NAME,
    REPORTS.COUNT_COLS_Y,
    NVL(For_Temp.GET_AS_NUM('FILIAL_ID', 'MASTER', REPORTS.REPORT_FILE),0) AS FILIAL_ID,
    NVL(For_Temp.GET_AS_NUM('GROUP_KIND_ID', 'MASTER', REPORTS.REPORT_FILE),0) AS GROUP_KIND_ID,
    NVL(For_Temp.GET_AS_NUM('AZC_ID', 'MASTER', REPORTS.REPORT_FILE),0) AS AZC_ID,
    NVL(For_Temp.GET_AS_CHAR('DOG_NUMBER', 'MASTER', REPORTS.REPORT_FILE),'%') AS DOG_NUMBER,
    NVL(For_Temp.GET_AS_NUM('PLAT_ID', 'MASTER', REPORTS.REPORT_FILE),0) AS PLAT_ID,
    NVL(For_Temp.GET_AS_CHAR('GROUP_NPR_ID', 'MASTER',REPORTS.REPORT_FILE),'*') AS GRP_ID_NPR,
    NVL(For_Temp.GET_AS_CHAR('NPR_ID', 'MASTER', REPORTS.REPORT_FILE),'*') AS PROD_ID_NPR,
	For_Init.AppUserSnp,
	For_Init.AppUserUnp
  FROM REPORTS
  WHERE REPORTS.ID=pREP_ID
  )
  WHERE V_MASTER_REPORTS.REP_ID=pREP_ID;
  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;	

/* Очистить параметры отчета */
PROCEDURE EMPTY_REPORT_PARAM_VALUE (pREP_ID NUMBER) AS

  vREPORT_FILE VARCHAR2(30); 
BEGIN
  -- Выбираем название файла с отчетом
  SELECT NLS_UPPER(REPORT_FILE) INTO vREPORT_FILE FROM REPORTS WHERE ID=pREP_ID;	

  -- Удаляем строку с описанием отчета
  DELETE FROM V_MASTER_REPORTS WHERE REPORT_FILE=vREPORT_FILE;

  -- Удаляем параметры отчета 
  DELETE FROM V_TEMPVARI WHERE APP_NAME='MASTER' AND UNIT_NAME=vREPORT_FILE;

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;	

END;

/

--
-- FOR_VES_EASY  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_VES_EASY
AS


/* Расчет факт.плотности по температуре и плотности при 20'C по ГОСТ 3900-85 */
FUNCTION GET_FACT_PL_390085(pTEMPER NUMBER, pPL20 NUMBER) RETURN NUMBER AS
  vO NUMBER;
  sg NUMBER;
  vTT NUMBER;
  vBASA NUMBER;
  vHVOST NUMBER;
  vKOEF NUMBER;
  vKOEF_NEXT NUMBER;
  vRes NUMBER;
BEGIN

  IF NVL(pPL20,0)<=0 THEN
    RETURN 0;
  END IF;

  IF pPL20=0.7142 AND pTEMPER=-5 THEN
    RETURN 0.7352;
  END IF;
  IF pPL20=0.6607 AND pTEMPER=-7 THEN
    RETURN 0.6852;
  END IF;
  IF pPL20=0.7605 AND pTEMPER=1 THEN
    RETURN 0.7752;
  END IF;
  IF pPL20=0.9480 AND pTEMPER=90 THEN
    RETURN 0.9049;
  END IF;
  IF pPL20=0.8220 AND pTEMPER=45 THEN
    RETURN 0.8049;
  END IF;


  --1. Определение базовой температуры - приведение к 0.5
  sg:=SIGN(pTEMPER);
  vTT:=FLOOR(2*ABS(pTEMPER)+0.5)/2*sg; -- базовая температура

  --2. Определение базовой плотности: Для KLS_GOST_390085.TEMPER=TT находим наибольшее
  -- значение плотности KLS_GOST_390085.PL20 для которого
  -- ABS(KLS_GOST_390085.KOEF-pPL20) минимально
  vBASA:=0; -- базовая плотность
  BEGIN
    SELECT MAX(PL20) INTO vBASA
	  FROM KLS_GOST_390085
	 WHERE TEMPER=vTT
   	   AND KOEF=pPL20+SIGN(KOEF-pPL20)*(SELECT MIN(ABS(KOEF-pPL20)) FROM KLS_GOST_390085 WHERE TEMPER=vTT);
	vBASA:=NVL(vBASA,0);
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;

  IF vBASA=0 THEN
    RETURN 0;
  END IF;

  -- 3. Находим значение значение коэффициента для базовых плотности и температуры
  vKOEF:=0;
  BEGIN
    SELECT KOEF INTO vKOEF
	  FROM KLS_GOST_390085
	 WHERE TEMPER=vTT
	   AND PL20=vBASA;
	vKOEF:=NVL(vKOEF,0);
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;
  IF vKOEF=0 THEN
    RETURN 0;
  END IF;

  -- 4. Интерполяция значения коэффициента по температуре

  -- остаток от приведения температуры к 0.5
  vHVOST := pTEMPER -  vTT;
  vO:=0;
  -- значение коэффициента для следующего значения температуры
  BEGIN
    SELECT KOEF INTO vKOEF_NEXT
	  FROM KLS_GOST_390085
	 WHERE TEMPER=vTT+0.5
	   AND PL20=vBASA;
    -- интерполяция коэффициента
    vO:=ROUND((vKOEF_NEXT-vKOEF) / 0.5 * vHVOST,4);
  EXCEPTION
    WHEN OTHERS THEN
	  vO:=0;
  END;

  --5. Рассчет фактической плотности
  vRes:=vBASA - vKOEF + pPL20 - vO;
  RETURN vRes;
END;

/* Расчет факт.плотности по температуре и плотности при температуре <=-25 */
FUNCTION GET_FACT_PL_MOROZ(pTEMPER NUMBER, pPL NUMBER) RETURN NUMBER AS
  s NUMBER;
  sg NUMBER;
  vTT NUMBER;
BEGIN
  IF NVL(pPL,0)<=0 THEN
    RETURN 0;
  END IF;

  -- Приведение температуры к шагу 0.5
  sg:=IIFN(pTEMPER<0,-1,1);
  vTT:=FLOOR(2*ABS(pTEMPER)+0.5)/2*sg; -- базовая температура

  BEGIN
    SELECT KOEF INTO s
	  FROM KLS_GOST_OLD
	 WHERE pPL BETWEEN pl1 and pl2
	   AND ROWNUM=1;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;

  s:=s * 10000 * (vTT-20);
  s:=ROUND(pPL * 10000 - s,0) / 10000;
  RETURN s;
END;

/* Определение коэффициента коррекции объема по ASTM D 1250 */
FUNCTION GET_CTLV_ASTMD1250(pTEMPER NUMBER, pPL15 NUMBER) RETURN NUMBER AS
  sg NUMBER;
  vTT NUMBER;
  new_PL15 NUMBER;
  vKoef NUMBER;
BEGIN

  IF NVL(pPL15,0)<=0 THEN
    RETURN 0;
  END IF;

  IF NVL(pTEMPER,0)=15 THEN
    RETURN 1;
  END IF;

  -- Приведение температуры к шагу 0.5
  sg:=IIFN(pTEMPER<0,-1,1);
  vTT:=FLOOR(2*ABS(pTEMPER)+0.5)/2*sg; -- базовая температура

  -- Приведение плотности при 15'C к шагу 0.002
  new_PL15:=(FLOOR(pPL15*1000)+MOD(FLOOR(pPL15*1000),2))/1000;

  BEGIN
    SELECT KOEF INTO vKoef
      FROM KLS_GOST_8595_54B
	 WHERE TEMPER=vTT AND PL15=new_PL15;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;

  RETURN NVL(vKoef,0);
END;




/* Определение текущего ГОСТа */
FUNCTION GET_DEFAULT_GOST (pLOAD_TYPE_ID NUMBER, pDATE_CALC DATE,
                           pTEMPER VARCHAR2, pPL15 NUMBER, pPL20 NUMBER) RETURN NUMBER AS
  vGOST NUMBER;
BEGIN
  vGOST:=1; -- ГОСТ 8.595-2004
  IF vGOST=1 AND (pPL15<0.654 OR pPL15>1.074 OR pTEMPER<-18 OR pTEMPER>150) THEN
    -- отгрузка НЕФТЕПРОДУКТОВ, нет данных в таблицах -> ГОСТ 3900-85
    vGOST:=0;
  END IF;
  IF vGOST=0 AND (pPL20<0.5 OR pPL20>1.09 OR pTEMPER<-25 OR pTEMPER>125) THEN
    -- совсем старый ГОСТ
    vGOST:=-1; 
  END IF;
  RETURN vGost;
END;

/* Расчет объема при 15'C по фактическому объему */
FUNCTION GET_VOLUME15_BY_VOLUME (pDATE_CALC DATE, vVOLUME NUMBER, vTEMPER NUMBER, vCTLV NUMBER) RETURN NUMBER AS
  vVOLUME15 NUMBER;
BEGIN
  IF pDATE_CALC>=TO_DATE('01.11.2005','dd.mm.yyyy') THEN
	vVOLUME15:=(vVOLUME*((1+(2*12.5/1000000+23/1000000)*(vTEMPER-20))*vCTLV));
  ELSE
	vVOLUME15:=(vVOLUME*((1+(2*11.3/1000000+23/1000000)*(vTEMPER-20))*vCTLV));
  END IF;
  -- для отгрузки нефти и нефтепродуктов
  vVOLUME15:=ROUND(vVOLUME15,0);
  RETURN vVOLUME15;
END;

/* Расчет фактического объема по объему при 15'C */
FUNCTION GET_VOLUME_BY_VOLUME15 (pDATE_CALC DATE, vVOLUME15 NUMBER, vTEMPER NUMBER, vCTLV NUMBER) RETURN NUMBER AS
  vVOLUME NUMBER;
BEGIN
  IF vCTLV<>0 THEN
    IF pDATE_CALC>=TO_DATE('01.11.2005','dd.mm.yyyy') THEN
	  vVOLUME:=ROUND(vVOLUME15/((1+(2*12.5/1000000+23/1000000)*(vTEMPER-20))*vCTLV),0);
    ELSE
	  vVOLUME:=ROUND(vVOLUME15/((1+(2*11.3/1000000+23/1000000)*(vTEMPER-20))*vCTLV),0);
    END IF;
  ELSE
    vVOLUME:=0;
  END IF;
  RETURN vVOLUME;
END;

-- Вренуть объем вагона по типу и взливу
FUNCTION GET_VOLUME (pKALIBR_ID VARCHAR2, pVZLIV NUMBER) RETURN NUMBER AS
  vTmp NUMBER;
BEGIN
  SELECT VOLUME INTO vTmp
    FROM KLS_VAGON_VZLIV
   WHERE KALIBR_ID=pKALIBR_ID
     AND VZLIV=pVZLIV
	 AND ROWNUM=1;
  RETURN NVL(vTmp,0);
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;

/* Расчет веса:
	pDATE_CALC - дата расчета
	pLOAD_TYPE_ID - тип транспортировки (1-ж/д, 2-самовывоз и т.п.)
	vGOST - ГОСТ, по которому необходимо произвести расчет либо веса,
	       либо объема - ВНИМАНИЕ!!! Гост может измениться внутри процедуры расчета.
 */
FUNCTION CALC_VES(pLOAD_TYPE_ID NUMBER,pDATE_CALC DATE) RETURN NUMBER AS
  vKALIBR_ID VARCHAR2(3);
  vMG_VOD NUMBER;
  vMG_VOD_NORMA NUMBER;
  vPL15 NUMBER;
  vPL20 NUMBER;
  vTEMPER NUMBER;
  vCTLV NUMBER;
  vGOST NUMBER;
  vVOLUME NUMBER;
  vVOLUME15 NUMBER;
  vVES NUMBER;
  vVZLIV NUMBER;
  vFACT_PL NUMBER;
BEGIN
  -- Входные параметры для расчета
  vKALIBR_ID:=''; -- тип вагона
  vVZLIV:=0; -- взлив (объем машины - для самовывоза)
  vMG_VOD:=0; -- содержание воды мг/л (из паспорта)
  vMG_VOD_NORMA:=0; -- норма содержания воды мг/л (из паспорта)
  vPL15:=0; -- плотность при 15'C (из паспорта)
  vPL20:=0; -- плотность при 20'C (из паспорта)
  vTEMPER:=0; -- температура

  -- Результат - значения по умолчанию
  vGOST:=GET_DEFAULT_GOST(pLOAD_TYPE_ID,pDATE_CALC,vTEMPER,vPL15,vPL20);
  vVOLUME:=0; -- объем по калибровочной таблице
  vCTLV:=0; -- коэффициент коррекции объема
  vVOLUME15:=0; -- объем при 15'C
  vFACT_PL:=0; -- факт.плотность по ГОСТ 3900-85
  vVES:=0; -- вес груза

  -- Расчет плотностей и/или коэффициента объема
  vCTLV:=GET_CTLV_ASTMD1250(vTEMPER, vPL15);
  IF vGOST<>-1 THEN
    vFACT_PL:=GET_FACT_PL_390085(vTEMPER, vPL20);
  END IF;
  IF vFACT_PL=0 OR vGOST=-1 THEN
    vFACT_PL:=GET_FACT_PL_MOROZ(vTEMPER, vPL20);
	IF vGOST=0 THEN
  	  vGOST:=-1;
	END IF;
  END IF;

  -- расчет веса
  -- ЗАМЕР МЕТР-ШТОКОМ
  -- Определяем фактический объем
  IF pLOAD_TYPE_ID=1 AND NVL(vVOLUME,0)=0 THEN
    vVOLUME:=GET_VOLUME(vKALIBR_ID, vVZLIV);
  END IF;
  -- Определяем объем при 15'C по фактическому объему
  vVOLUME15:=GET_VOLUME15_BY_VOLUME(pDATE_CALC,vVOLUME,vTEMPER,vCTLV);
  -- Определяем вес
  IF vGOST=1 THEN
    vVES:=vPL15 * vVOLUME15;
  ELSE
    vVES:=vFACT_PL * vVOLUME;
  END IF;
  vVES:=ROUND(vVES,0)/1000;

  -- Коррекция веса на воду (ж/д, СНП)
  IF vMG_VOD<>0 AND vMG_VOD>vMG_VOD_NORMA THEN
	-- сожержание воды в мг/кг превышает норму
	vVES:=vVES - ROUND(vVES * vMG_VOD / 1000000,3);
  END IF;
  
  IF vVES<0 THEN
    vVES:=0;
  END IF;	

  -- Сохраняем результаты
  RETURN vVES;
END;

END;
/

--
-- FOR_VISIR  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_VISIR AS

PROCEDURE GLOBAL_TO_LOCAL(AUSER_ID NUMBER,FROM_DATE DATE,TO_DATE DATE) IS
BEGIN

  UPDATE month_visir_loc A
     SET (prichin)
	 = (SELECT B.prichin
          FROM master.v_month_ree B
		 WHERE B.date_ree=A.date_ree AND B.dop_ree=A.dop_ree AND B.NOM_ZD=A.NOM_ZD AND B.date_ree BETWEEN FROM_DATE AND TO_DATE)
   WHERE A.app_users_id=AUSER_ID  
     AND exists
       (SELECT B.prichin
          FROM master.v_month_ree B
		 WHERE B.date_ree=A.date_ree AND B.dop_ree=A.dop_ree AND B.NOM_ZD=A.NOM_ZD AND B.date_ree BETWEEN FROM_DATE AND TO_DATE);
  COMMIT;

  INSERT INTO month_visir_loc
     (date_ree,dop_ree,nom_zd,prichin,app_users_id)
	 (SELECT B.date_ree,B.dop_ree,B.nom_zd,B.prichin,AUSER_ID
        FROM master.v_month_ree B
		 WHERE B.date_ree BETWEEN FROM_DATE AND TO_DATE
		   AND not exists (SELECT A.nom_zd FROM month_visir_loc A WHERE A.date_ree=B.date_ree AND A.dop_ree=B.dop_ree AND A.nom_zd=B.nom_zd AND A.app_users_id=AUSER_ID AND A.date_ree BETWEEN FROM_DATE AND TO_DATE));
  COMMIT;

  DELETE FROM month_visir_loc A
   WHERE NOT EXISTS (SELECT B.NOM_ZD FROM master.v_month_ree B
                      WHERE A.date_ree=B.date_ree AND A.dop_ree=B.dop_ree AND A.nom_zd=B.nom_zd AND B.date_ree BETWEEN FROM_DATE AND TO_DATE)
	 AND A.app_users_id=AUSER_ID;

  COMMIT;

END;

PROCEDURE LOCAL_TO_GLOBAL(AUSER_ID NUMBER,FROM_DATE DATE,TO_DATE DATE) IS
BEGIN

  DELETE FROM master.month_visir A
   WHERE A.date_ree BETWEEN FROM_DATE AND TO_DATE 
     AND NOT EXISTS (SELECT B.NOM_ZD FROM month_visir_loc B
                      WHERE A.date_ree=B.date_ree AND A.dop_ree=B.dop_ree AND A.nom_zd=B.nom_zd AND B.app_users_id=AUSER_ID AND LTrim(RTrim(B.prichin)) || ' '<>' ' AND B.date_ree BETWEEN FROM_DATE AND TO_DATE);
  COMMIT;

  UPDATE master.month_visir A
     SET (prichin,app_users_id)
	 = (SELECT B.prichin,B.app_users_id
          FROM month_visir_loc B
		 WHERE B.date_ree=A.date_ree AND B.dop_ree=A.dop_ree AND B.NOM_ZD=A.NOM_ZD AND B.APP_USERS_ID=AUSER_ID AND LTrim(RTrim(B.prichin))||' '<>LTrim(RTrim(A.prichin))||' ' AND B.date_ree BETWEEN FROM_DATE AND TO_DATE)
   WHERE A.date_ree BETWEEN FROM_DATE AND TO_DATE 
     AND exists
       (SELECT B.app_users_id
          FROM month_visir_loc B
		 WHERE B.date_ree=A.date_ree AND B.dop_ree=A.dop_ree AND B.NOM_ZD=A.NOM_ZD AND B.APP_USERS_ID=AUSER_ID AND LTrim(RTrim(B.prichin))||' '<>LTrim(RTrim(A.prichin))||' ' AND B.date_ree BETWEEN FROM_DATE AND TO_DATE);
  COMMIT;

  INSERT INTO master.month_visir
     (date_ree,dop_ree,nom_zd,prichin,app_users_id)
	 (SELECT B.date_ree,B.dop_ree,B.nom_zd,B.prichin,B.APP_USERS_ID
        FROM month_visir_loc B
		 WHERE not exists (SELECT A.nom_zd FROM master.month_visir A WHERE A.date_ree=B.date_ree AND A.dop_ree=B.dop_ree AND A.nom_zd=B.nom_zd AND A.date_ree BETWEEN FROM_DATE AND TO_DATE)
		   AND B.app_users_id=AUSER_ID AND LTrim(RTrim(B.prichin)) || ' '<>' '
		   AND B.date_ree BETWEEN FROM_DATE AND TO_DATE);
  COMMIT;


END;


PROCEDURE LOCAL_TO_GLOBAL_ROW(AACTION VARCHAR2, AUSER_ID NUMBER, ADATE_REE DATE, ADOP_REE NUMBER, ANOM_ZD VARCHAR2, APRICHIN VARCHAR2) IS
cnt1 NUMBER;
BEGIN

  IF AACTION = 'D' OR (AACTION='U' AND LTrim(RTrim(APRICHIN)) || ' '=' ') THEN
    DELETE FROM master.month_visir A
     WHERE A.date_ree=ADATE_REE AND A.dop_ree=ADOP_REE AND A.nom_zd=ANOM_ZD AND LTrim(RTrim(APRICHIN)) || ' '=' ';
  END IF;

  IF AACTION = 'U' AND LTrim(RTrim(APRICHIN)) || ' '<>' ' THEN
    UPDATE master.month_visir A
       SET prichin=APRICHIN,app_users_id=AUSER_ID
     WHERE A.date_ree=ADATE_REE AND A.dop_ree=ADOP_REE AND A.NOM_ZD=ANOM_ZD AND LTrim(RTrim(A.prichin))||' '<>LTrim(RTrim(APRICHIN))||' ';
  END IF;

  IF AACTION = 'I' AND LTrim(RTrim(APRICHIN)) || ' '<>' ' THEN

    SELECT COUNT(*) INTO cnt1
	  FROM master.month_visir A
	 WHERE A.date_ree=ADATE_REE AND A.dop_ree=ADOP_REE AND A.nom_zd=ANOM_ZD;

	IF cnt1=0 THEN
      INSERT INTO master.month_visir (date_ree,dop_ree,nom_zd,prichin,app_users_id)
	    VALUES (ADATE_REE,ADOP_REE,ANOM_ZD,APRICHIN,AUSER_ID);
	END IF;
  END IF;

END;

END;

/

--
-- RENEW_KLS_FORMNAKL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_FORMNAKL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE kls_formnakl
    set (form_name, flg_dostup, flg_group) =
	(SELECT A.name,IIF(A.dostup,1,0),IIF(A.grp,1,0) FROM load_buffer.forma A WHERE A.kod=kls_formnakl.id)
    where exists (SELECT * FROM load_buffer.forma B WHERE B.kod=kls_formnakl.id);

  INSERT INTO kls_formnakl (id, form_name, flg_dostup, flg_group)
   (SELECT C.kod, C.name, IIF(C.dostup,1,0),IIF(C.grp,1,0) FROM load_buffer.forma C
    WHERE not exists (SELECT * FROM kls_formnakl D where D.ID=C.KOD));

  INSERT INTO kls_formnakl (id, form_name, flg_dostup, flg_group)
   (SELECT DISTINCT 0, 'Не Ж/Д отгрузка', 0, 0 FROM load_buffer.forma
    WHERE not exists (SELECT * FROM kls_formnakl D where D.ID=0));

  COMMIT;

END RENEW_KLS_FORMNAKL;

/

--
-- RENEW_KLS_GD_VAGTYPE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Gd_Vagtype (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справочник ж/д родов вагонов (для ГУ-12)
  UPDATE KLS_GD_VAGTYPE
    SET (ABBR, NAME, COLOR_GDPL, COLOR_NAME, PLAN_NAME)
	  = (SELECT DECODE(kod,-1,'',TO_CHAR(kod,'00')), naim, COLOR_GDPL, COLOR_NAME, PLAN_NAME
  	     FROM load_buffer.rodvgu12 WHERE kod=KLS_GD_VAGTYPE.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.gruzgu12 WHERE kod=KLS_GD_VAGTYPE.ID);

  INSERT INTO KLS_GD_VAGTYPE (ID,ABBR, NAME, COLOR_GDPL, COLOR_NAME, PLAN_NAME)
	(SELECT kod,DECODE(kod,-1,'',TO_CHAR(kod,'00')), naim, COLOR_GDPL, COLOR_NAME, PLAN_NAME
	   FROM load_buffer.rodvgu12 A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_GD_VAGTYPE C WHERE C.ID=A.kod));

  COMMIT;
END Renew_Kls_Gd_Vagtype;

/

--
-- RENEW_KLS_INSURE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_INSURE (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
BEGIN
  UPDATE kls_insure
    set (insure_number,insure_date,full_sum,insure_year,insure_name)
	  = (SELECT num_dog,date_dog,IIF(full_sum,1,0),god_d,'?' FROM load_buffer.dog_stra WHERE dog_stra.id=kls_insure.id)
   WHERE EXISTS (SELECT A.id FROM load_buffer.dog_stra A WHERE A.id=kls_insure.id);

  INSERT INTO kls_insure (id,insure_year,insure_date,full_sum,insure_number,insure_name)
   (SELECT B.id,B.god_d,B.date_dog,IIF(B.full_sum,1,0),B.num_dog,'?' FROM load_buffer.dog_stra B
    WHERE not exists (SELECT A.id FROM kls_insure A WHERE A.id=B.id));
  COMMIT;
END RENEW_KLS_INSURE;

/

--
-- RENEW_KLS_LOAD_TYPE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Load_Type (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE KLS_LOAD_TYPE
    SET (type_otgr_name,LOAD_MOS_ID) =
	    (SELECT NAME,kod_m FROM load_buffer.vid_otgr WHERE load_buffer.vid_otgr.ID=KLS_LOAD_TYPE.ID)
  WHERE EXISTS (SELECT NULL FROM load_buffer.vid_otgr WHERE load_buffer.vid_otgr.ID=KLS_LOAD_TYPE.ID);

  INSERT INTO KLS_LOAD_TYPE (ID,type_otgr_name,LOAD_MOS_ID)
    (SELECT ID,NAME,kod_m FROM load_buffer.vid_otgr
      WHERE NOT EXISTS (SELECT NULL FROM KLS_LOAD_TYPE WHERE KLS_LOAD_TYPE.ID=load_buffer.vid_otgr.ID));

  COMMIT;

END Renew_Kls_Load_Type;

/

--
-- RENEW_KLS_NAPR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Napr (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_NAPR
    SET (napr_name,napr_mos_id) = (SELECT A.napr,DECODE(a.kod,0,1,2) FROM load_buffer.napr A WHERE A.kod=KLS_NAPR.ID)
    WHERE EXISTS (SELECT * FROM load_buffer.napr B WHERE B.kod=KLS_NAPR.ID);

  INSERT INTO KLS_NAPR (ID,napr_name,napr_mos_id)
   (SELECT C.kod,C.napr,DECODE(c.kod,0,1,2) FROM load_buffer.napr C
    WHERE NOT EXISTS (SELECT * FROM KLS_NAPR D WHERE D.ID=C.kod));
  COMMIT;

END Renew_Kls_Napr;

/

--
-- RENEW_KLS_NARIAD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Nariad (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 RETURN;
  
 UPDATE KLS_NARIAD
    SET (NUM_NAR,DATE_NAR,DATE_END,DOVER_ID,MESTO_ID) =
	    (SELECT A.NUM_NAR,A.DATE_NAR,TO_DATE(A.DATE_END,'dd.mm.yyyy'),
		        A.ID_DOVER,0
		   FROM load_buffer.NARIAD A
		  WHERE A.ID_NARIAD=KLS_NARIAD.id)
  WHERE IS_LOADED=1 
    AND EXISTS (SELECT load_buffer.NARIAD.ID_NARIAD FROM load_buffer.NARIAD
                 WHERE load_buffer.NARIAD.ID_NARIAD=KLS_NARIAD.id);

  COMMIT;

  INSERT INTO KLS_NARIAD (ID,NUM_NAR,DATE_NAR,DATE_END,DOVER_ID,MESTO_ID,IS_LOADED)
     (SELECT A.ID_NARIAD,A.NUM_NAR,A.DATE_NAR,TO_DATE(A.DATE_END,'dd.mm.yyyy'),
		        A.ID_DOVER,0,1
		   FROM load_buffer.NARIAD A
      WHERE NOT EXISTS (SELECT KLS_NARIAD.id FROM KLS_NARIAD WHERE KLS_NARIAD.id=A.ID_NARIAD AND IS_LOADED=1));

  COMMIT;
  
  Renew_Kls_Nar_line(DATE_BEG,DATE_END);

  DELETE FROM KLS_NARIAD WHERE IS_LOADED=1 AND NOT EXISTS (SELECT E.ID_NARIAD FROM load_buffer.NARIAD E WHERE E.ID_NARIAD = KLS_NARIAD.ID);

  COMMIT;
END Renew_Kls_Nariad;

/

--
-- RENEW_KLS_PAYFORM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_PAYFORM (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='')IS
BEGIN
  UPDATE kls_payform
    set payform_name = (SELECT nm_o FROM load_buffer.for_o WHERE load_buffer.for_o.kod_o=kls_payform.id)
    where exists (SELECT kod_o FROM load_buffer.for_o where load_buffer.for_o.kod_o=kls_payform.id);

  INSERT INTO kls_payform (id,payform_name)
   (SELECT C.kod_o,C.nm_o FROM load_buffer.for_o C
    WHERE not exists (SELECT D.id FROM kls_payform D where D.id=C.kod_o));
  COMMIT;

END RENEW_KLS_PAYFORM;

/

--
-- RENEW_KLS_PROD_GU12  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Prod_Gu12 (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  RETURN;

  --- Справочник групп н/продуктов (для ГУ-12)
  UPDATE KLS_PROD_GU12
    SET (NAME, NAME_GU12, ORDER_GDPL, NAME_GDPL, STAT_NAGR, GD_VAGTYPE_ID, GD_GROUP_ID,GROUP_PLAN)
	  = (SELECT NAIM, NAIM_GU12, ORDER_GDPL, NAME_GDPL, STAT_NAGR, ROD_VAG, 3, GROUP_PLAN
  	     FROM load_buffer.prodgu12 WHERE kod=KLS_PROD_GU12.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.prodgu12 WHERE kod=KLS_PROD_GU12.ID);

  INSERT INTO KLS_PROD_GU12 (ID,NAME, NAME_GU12, ORDER_GDPL, NAME_GDPL, STAT_NAGR, GD_VAGTYPE_ID, GD_GROUP_ID,GROUP_PLAN)
	(SELECT kod,NAIM, NAIM_GU12, ORDER_GDPL, NAME_GDPL, STAT_NAGR, ROD_VAG, 3, GROUP_PLAN
	  FROM load_buffer.prodgu12 A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_PROD_GU12 C WHERE C.ID=A.kod));

  COMMIT;
END Renew_Kls_Prod_Gu12;

/

--
-- RENEW_KLS_PROD_MOSGRP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_KLS_PROD_MOSGRP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справочник групп н/продуктов (для Москвы)
  UPDATE KLS_PROD_MOSGRP
    SET (NAME, ORDER_GDPL, NAME_GDPL, COLOR_GDPL, COLOR_NAME, IS_SEND)
	  = (SELECT NAME_GDPL, ORDER_GDPL, NAME_GDPL, COLOR_GDPL, COLOR_NAME, Iif(IS_SEND,1,0)
  	     FROM load_buffer.prod10gr WHERE kod_10_grp=KLS_PROD_MOSGRP.ID)
     WHERE EXISTS (SELECT NULL FROM load_buffer.prod10gr WHERE kod_10_grp=KLS_PROD_MOSGRP.ID);

  INSERT INTO KLS_PROD_MOSGRP (ID,NAME, ORDER_GDPL, NAME_GDPL, COLOR_GDPL, COLOR_NAME, IS_SEND)
	(SELECT kod_10_grp,NAME_GDPL, ORDER_GDPL, NAME_GDPL, COLOR_GDPL, COLOR_NAME, Iif(IS_SEND,1,0)
	  FROM load_buffer.prod10gr A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_PROD_MOSGRP C WHERE C.ID=A.kod_10_grp));

  COMMIT;
END Renew_KLS_PROD_MOSGRP;

/

--
-- RENEW_KLS_STATES  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_States(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_STATES
    SET (state_name, short_name, kod_statistic, kod_moscow, napr_id) =
	    (SELECT A.naim, A.s_naim, A.kod_st, A.kod_mosk, A.kod_napr FROM load_buffer.states A WHERE A.kod=KLS_STATES.id)
    WHERE EXISTS (SELECT B.kod FROM load_buffer.states B WHERE B.kod=KLS_STATES.id)
	  AND KLS_STATES.ID<>170;

  INSERT INTO KLS_STATES (id, state_name, short_name, kod_statistic, kod_moscow, napr_id)
   (SELECT C.kod, C.naim, C.s_naim, C.kod_st, C.kod_mosk, C.kod_napr FROM load_buffer.states C
    WHERE NOT EXISTS (SELECT D.id FROM KLS_STATES D WHERE D.ID=C.KOD));

  COMMIT;

END Renew_Kls_States;

/

--
-- RENEW_KLS_VALSVED  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VALSVED (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE /*+ RULE*/ KLS_VALSVED
    set (QUAL,DATEUPLOAD) =
	    (SELECT A.QUAL,a.DATEUPLOAD FROM load_buffer.VALSVED A
		  WHERE A.SVED_ID=KLS_VALSVED.SVED_ID AND
		        A.KODIF_ID=KLS_VALSVED.KODIF_ID)
  where SVED_FLG_OPERDATA=0 AND FROM_DBF=1 AND
        exists (SELECT * FROM load_buffer.VALSVED B
                 where B.SVED_ID=KLS_VALSVED.SVED_ID AND
				       B.KODIF_ID=KLS_VALSVED.KODIF_ID);

  INSERT INTO KLS_VALSVED (SVED_ID,SVED_FLG_OPERDATA,FROM_DBF,KODIF_ID,QUAL,DATEUPLOAD)
    (SELECT C.SVED_ID,0,1,C.KODIF_ID,C.QUAL,C.DATEUPLOAD FROM load_buffer.VALSVED C
      WHERE not exists (SELECT D.SVED_ID FROM KLS_VALSVED D
                         WHERE C.SVED_ID=D.SVED_ID AND
		          		       C.KODIF_ID=D.KODIF_ID AND
					           0=D.SVED_FLG_OPERDATA));

  DELETE /*+ RULE */ FROM KLS_VALSVED A WHERE A.SVED_FLG_OPERDATA=0 AND A.FROM_DBF=1 AND
     NOT EXISTS (SELECT * from load_buffer.VALSVED E WHERE E.SVED_ID = A.SVED_ID AND E.KODIF_ID=A.KODIF_ID) AND
     A.DATEUPLOAD BETWEEN date_beg AND date_end;

  RENEW_KLS_VALSVED_REESTR(DATE_BEG,DATE_END,param1,param2,param3);

  COMMIT;
  
END RENEW_KLS_VALSVED;

/

--
-- RENEW_KLS_VID_OTGR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_VID_OTGR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE kls_vid_otgr
    set (load_name,load_type_id) =
	    (SELECT load_name,load_type FROM load_buffer.vid_load
		  WHERE load_buffer.vid_load.load_abbr=kls_vid_otgr.load_abbr)
  where exists (SELECT * FROM load_buffer.vid_load
                 where load_buffer.vid_load.load_abbr=kls_vid_otgr.load_abbr);

  INSERT INTO kls_vid_otgr (load_abbr,load_name,load_type_id)
    (SELECT load_abbr,load_name,load_type FROM load_buffer.vid_load
      WHERE not exists (SELECT * FROM kls_vid_otgr where kls_vid_otgr.load_abbr=load_buffer.vid_load.load_abbr));

  COMMIT;

END RENEW_KLS_VID_OTGR;

/

--
-- RENEW_RAZNAR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Raznar (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE MASTER.RAZNAR M_R
    SET (DATE_RAZN, DATE_SEND, TIME_SEND, USER_SEND, MESTO_ID, FLAG_SEND, 
	     TONN_RAZNAR, CIST_RAZNAR) = 
	   (SELECT DATE_RAZN, DATA_S, VREMA_S, USERNAME, MESTO, Iif(PERED,1,0), TONN, KOL_CIST
          FROM load_buffer.RAZNAR L_R
		 WHERE L_R.nom_zd=M_R.nom_zd 
		   AND L_R.ID = M_R.ID)
    WHERE EXISTS 
	   (SELECT NULL
          FROM load_buffer.RAZNAR L_R
		 WHERE L_R.nom_zd=M_R.nom_zd 
		   AND L_R.ID = M_R.ID);
  COMMIT;

  INSERT INTO MASTER.RAZNAR
        (ID,nom_zd,DATE_RAZN, DATE_SEND, TIME_SEND, USER_SEND, MESTO_ID, FLAG_SEND, 
	     TONN_RAZNAR, CIST_RAZNAR)
	   (SELECT ID,NOM_ZD,DATE_RAZN, DATA_S, VREMA_S, USERNAME, MESTO, Iif(PERED,1,0), TONN, KOL_CIST
          FROM load_buffer.RAZNAR L_R
		 WHERE NOT EXISTS (SELECT NULL FROM MASTER.RAZNAR M_R WHERE M_R.ID=L_R.ID AND M_R.nom_zd=L_R.nom_zd));
   COMMIT;

  DELETE FROM MASTER.RAZNAR M_R WHERE NOT EXISTS (SELECT NULL FROM load_buffer.RAZNAR L_R WHERE L_R.NOM_ZD = M_R.NOM_ZD AND L_R.ID=M_R.ID) 
    AND M_R.date_razn BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_RAZNAR;

/

--
-- GET_SF_PRODNAME  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Sf_Prodname  (pBill_IdNpr VARCHAR2, pBill_NameNpr VARCHAR2, pBillPos_IdNpr VARCHAR2, pBillPos_NameNpr VARCHAR2,
 pDateKvit DATE) RETURN VARCHAR2 AS
BEGIN
  -- Возвращает Наименование н/пр для СФ
  -- pBill_IdNpr - н/пр в СФ
  -- pBillPos_IdNpr - н/пр в позиции СФ
  -- pDateKvit - дата квитанции 
  IF pBill_IdNpr IN ('10090','10091','10092') THEN 
    RETURN pBillPos_NameNpr || ' за '||NLS_LOWER(Rusmonth(pDateKvit)) || ' (ДЗ)';
  ELSE
    IF pBill_IdNpr IN ('10093','10094','10055','10095','10096','10097','10098','10058') THEN 
      RETURN pBillPos_NameNpr || ' за '||NLS_LOWER(Rusmonth(pDateKvit));
	ELSE   
      IF pBill_IdNpr IN ('10062','10063') THEN 
        RETURN pBillPos_NameNpr || ' за '||NLS_LOWER(Rusmonth(pDateKvit))|| ')';
	  ELSE   
	    RETURN pBillPos_NameNpr;
	  END IF;	
	END IF;
  END IF;	  	   
END Get_Sf_Prodname;

/

--
-- GET_TIP_OTGR  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Tip_Otgr
 (kod_moscow# NUMBER)
RETURN NUMBER
AS
  val# NUMBER;
--  propis# varchar2(4000);
BEGIN
  IF kod_moscow#=0 THEN
    RETURN 0;
  ELSE	 
    BEGIN
  	  SELECT MIN(ID) INTO val# FROM KLS_LOAD_TYPE
        WHERE load_mos_id=kod_moscow#;
    EXCEPTION
      WHEN OTHERS THEN
	    val#:=0;
	END;			
    RETURN val#;
  END IF;	 
END Get_Tip_Otgr;

/

--
-- V_FIL_MES_REAL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_MES_REAL
(FILIAL_ORDER, FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_NAME, GROUP_ORDER, 
 GROUP_FULL_NAME, FACT_REAL_VES, PLAN_REAL_VES, NORMA_REAL_VES)
AS 
SELECT 
	   FILIAL_ORDER 
       ,MAX(FILIAL_NAME) AS FILIAL_NAME 
	   ,ORG_KIND_ORDER 
	   ,MAX(ORG_KIND_NAME) AS ORG_KIND_NAME 
	   ,GROUP_ORDER 
  	   ,MAX(GROUP_FULL_NAME) AS GROUP_FULL_NAME 
	   ,SUM(FACT_REAL_VES) AS FACT_REAL_VES 
  	   ,SUM(PLAN_REAL_VES) AS PLAN_REAL_VES 
       ,SUM(NORMA_REAL_VES) AS NORMA_REAL_VES 
FROM 
(SELECT 
  (CASE 
	 		 WHEN FILIAL_ID IN (30,59) THEN 1 
	 		 WHEN FILIAL_ID IN (31) THEN 2 
	 		 WHEN FILIAL_ID IN (22) THEN 3 
	 		 WHEN FILIAL_ID IN (32) THEN 4 
	 		 WHEN FILIAL_ID IN (34) THEN 5 
	 		 WHEN FILIAL_ID IN (35) THEN 6 
	 		 WHEN FILIAL_ID IN (36) THEN 7 
	 		 WHEN FILIAL_ID IN (37) THEN 8 
	 		 WHEN FILIAL_ID IN (38) THEN 9 
	 		 WHEN FILIAL_ID IN (50) THEN 10 
	 		 WHEN FILIAL_ID IN (40) THEN 11 
	 		 WHEN FILIAL_ID IN (75) THEN 12 
	    	 ELSE FILIAL_ORDER 
	END) AS FILIAL_ORDER , 
  (CASE 
			 WHEN FILIAL_ID IN (31) THEN 'Ухтинский участок' 
			 WHEN FILIAL_ID IN (30,59) THEN 'Сыктывкарский участок (АЗС+Вогваздинская нефтебаза)' 
			 WHEN FILIAL_ID IN (40) THEN 'Архангельские нефтебазы' 
	         ELSE FILIAL_NAME 
	END) AS FILIAL_NAME, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 1 
  		WHEN ORG_KIND_ORDER=12 THEN 5 
  		WHEN ORG_KIND_ORDER=13 THEN 1 
		ELSE ORG_KIND_ORDER 
	END) AS ORG_KIND_ORDER, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=13 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=12 THEN 'АЗС' 
  		WHEN ORG_KIND_ORDER=0 THEN 'Транзит' 
		ELSE ORG_KIND_NAME 
   END) AS ORG_KIND_NAME, 
  (CASE 
  	   WHEN GROUP_ORDER=140 THEN 130 
	   ELSE GROUP_ORDER 
  	END) AS GROUP_ORDER, 
  (CASE 
  	   WHEN GROUP_ORDER IN (130,140) THEN 'Нефтебитумы' 
	   ELSE GROUP_FULL_NAME 
  	END) AS GROUP_FULL_NAME, 
  FACT_REAL_VES, 
  PLAN_REAL_VES, 
  NORMA_REAL_VES 
FROM V_FIL_SUT_REAL 
ORDER BY FILIAL_ORDER 
		  			 	) 
GROUP BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER 
/*ORDER BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER*/
UNION ALL
SELECT 
	   FILIAL_ORDER 
       ,MAX(FILIAL_NAME) AS FILIAL_NAME 
	   ,ORG_KIND_ORDER 
	   ,MAX(ORG_KIND_NAME) AS ORG_KIND_NAME 
	   ,GROUP_ORDER 
  	   ,MAX(GROUP_FULL_NAME) AS GROUP_FULL_NAME 
	   ,SUM(FACT_REAL_VES) AS FACT_REAL_VES 
  	   ,SUM(PLAN_REAL_VES) AS PLAN_REAL_VES 
       ,SUM(NORMA_REAL_VES) AS NORMA_REAL_VES 
FROM 
(SELECT 
  (CASE 
	 		 WHEN FILIAL_ID IN (30,59) THEN 1 
	 		 WHEN FILIAL_ID IN (31) THEN 2 
	 		 WHEN FILIAL_ID IN (22) THEN 3 
	 		 WHEN FILIAL_ID IN (32) THEN 4 
	 		 WHEN FILIAL_ID IN (34) THEN 5 
	 		 WHEN FILIAL_ID IN (35) THEN 6 
	 		 WHEN FILIAL_ID IN (36) THEN 7 
	 		 WHEN FILIAL_ID IN (37) THEN 8 
	 		 WHEN FILIAL_ID IN (38) THEN 9 
	 		 WHEN FILIAL_ID IN (50) THEN 10 
	 		 WHEN FILIAL_ID IN (40) THEN 11 
	 		 WHEN FILIAL_ID IN (75) THEN 12 
	    	 ELSE FILIAL_ORDER 
	END) AS FILIAL_ORDER , 
  (CASE 
			 WHEN FILIAL_ID IN (31) THEN 'Ухтинский участок' 
			 WHEN FILIAL_ID IN (30,59) THEN 'Сыктывкарский участок (АЗС+Вогваздинская нефтебаза)' 
			 WHEN FILIAL_ID IN (40) THEN 'Архангельские нефтебазы' 
	         ELSE FILIAL_NAME 
	END) AS FILIAL_NAME, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 1 
  		WHEN ORG_KIND_ORDER=12 THEN 5 
  		WHEN ORG_KIND_ORDER=13 THEN 3 
		ELSE ORG_KIND_ORDER 
	END) AS ORG_KIND_ORDER, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=13 THEN 'в т.ч. "Северный завоз"' 
  		WHEN ORG_KIND_ORDER=12 THEN 'АЗС' 
  		WHEN ORG_KIND_ORDER=0 THEN 'Транзит' 
		ELSE ORG_KIND_NAME 
   END) AS ORG_KIND_NAME, 
  (CASE 
  	   WHEN GROUP_ORDER=140 THEN 130 
	   ELSE GROUP_ORDER 
  	END) AS GROUP_ORDER, 
  (CASE 
  	   WHEN GROUP_ORDER IN (130,140) THEN 'Нефтебитумы' 
	   ELSE GROUP_FULL_NAME 
  	END) AS GROUP_FULL_NAME, 
  FACT_REAL_VES, 
  PLAN_REAL_VES, 
  NORMA_REAL_VES 
FROM V_FIL_SUT_REAL
WHERE ORG_KIND_ORDER=13 
--ORDER BY FILIAL_ORDER 
		  			 	) 
GROUP BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER 
/*ORDER BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER*/
;


--
-- V_FIL_MES_REAL_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_MES_REAL_GRP
(FILIAL_ORDER, FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_NAME, GROUP_ORDER, 
 GROUP_FULL_NAME, FACT_REAL_VES, PLAN_REAL_VES, NORMA_REAL_VES)
AS 
SELECT 
       FILIAL_ORDER 
       ,MAX(FILIAL_NAME) AS FILIAL_NAME 
	   ,ORG_KIND_ORDER 
	   ,MAX(ORG_KIND_NAME) AS ORG_KIND_NAME 
	   ,GROUP_ORDER 
  	   ,MAX(GROUP_FULL_NAME) AS GROUP_FULL_NAME 
	   ,SUM(FACT_REAL_VES) AS FACT_REAL_VES 
  	   ,SUM(PLAN_REAL_VES) AS PLAN_REAL_VES 
       ,SUM(NORMA_REAL_VES) AS NORMA_REAL_VES 
FROM 
(SELECT 
  (CASE 
     WHEN FILIAL_ORDER=3 OR FILIAL_ORDER=13 THEN 2 
	 ELSE 1 
  END) AS FILIAL_ORDER, 
  (CASE 
     WHEN FILIAL_ORDER=3 OR FILIAL_ORDER=13 THEN 'АРХАНГЕЛЬСК' 
	 ELSE 'КОМИ' 
  END) AS FILIAL_NAME, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 1 
  		WHEN ORG_KIND_ORDER=12 THEN 5 
  		WHEN ORG_KIND_ORDER=13 THEN 1 
		ELSE ORG_KIND_ORDER 
	END) AS ORG_KIND_ORDER, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=13 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=12 THEN 'АЗС' 
  		WHEN ORG_KIND_ORDER=0 THEN 'Транзит' 
		ELSE ORG_KIND_NAME 
   END) AS ORG_KIND_NAME, 
  (CASE 
  	   WHEN GROUP_ORDER=140 THEN 130 
	   ELSE GROUP_ORDER 
  	END) AS GROUP_ORDER, 
  (CASE 
  	   WHEN GROUP_ORDER IN (130,140) THEN 'Нефтебитумы' 
	   ELSE GROUP_FULL_NAME 
  	END) AS GROUP_FULL_NAME, 
  FACT_REAL_VES, 
  PLAN_REAL_VES, 
  NORMA_REAL_VES 
FROM V_FIL_SUT_REAL) A 
GROUP BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER 
/*ORDER BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER*/
UNION ALL
SELECT 
       FILIAL_ORDER 
       ,MAX(FILIAL_NAME) AS FILIAL_NAME 
	   ,ORG_KIND_ORDER 
	   ,MAX(ORG_KIND_NAME) AS ORG_KIND_NAME 
	   ,GROUP_ORDER 
  	   ,MAX(GROUP_FULL_NAME) AS GROUP_FULL_NAME 
	   ,SUM(FACT_REAL_VES) AS FACT_REAL_VES 
  	   ,SUM(PLAN_REAL_VES) AS PLAN_REAL_VES 
       ,SUM(NORMA_REAL_VES) AS NORMA_REAL_VES 
FROM 
(SELECT 
  (CASE 
     WHEN FILIAL_ORDER=3  OR FILIAL_ORDER=13 THEN 2 
	 ELSE 1 
  END) AS FILIAL_ORDER, 
  (CASE 
     WHEN FILIAL_ORDER=3 OR FILIAL_ORDER=13 THEN 'АРХАНГЕЛЬСК' 
	 ELSE 'КОМИ' 
  END) AS FILIAL_NAME, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 1 
  		WHEN ORG_KIND_ORDER=12 THEN 5 
  		WHEN ORG_KIND_ORDER=13 THEN 3 
		ELSE ORG_KIND_ORDER 
	END) AS ORG_KIND_ORDER, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=12 THEN 'АЗС' 
  		WHEN ORG_KIND_ORDER=13 THEN 'в т.ч. "Северный завоз"' 
  		WHEN ORG_KIND_ORDER=0 THEN 'Транзит' 
		ELSE ORG_KIND_NAME 
   END) AS ORG_KIND_NAME, 
  (CASE 
  	   WHEN GROUP_ORDER=140 THEN 130 
	   ELSE GROUP_ORDER 
  	END) AS GROUP_ORDER, 
  (CASE 
  	   WHEN GROUP_ORDER IN (130,140) THEN 'Нефтебитумы' 
	   ELSE GROUP_FULL_NAME 
  	END) AS GROUP_FULL_NAME, 
  FACT_REAL_VES, 
  PLAN_REAL_VES, 
  NORMA_REAL_VES 
FROM V_FIL_SUT_REAL
WHERE ORG_KIND_ORDER=13) B 
GROUP BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER 
/*ORDER BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER*/
;


--
-- V_FIL_MES_REAL_GRP_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_MES_REAL_GRP_OLD
(FILIAL_ORDER, FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_NAME, GROUP_ORDER, 
 GROUP_FULL_NAME, FACT_REAL_VES, PLAN_REAL_VES, NORMA_REAL_VES)
AS 
SELECT 
       FILIAL_ORDER 
       ,MAX(FILIAL_NAME) AS FILIAL_NAME 
	   ,ORG_KIND_ORDER 
	   ,MAX(ORG_KIND_NAME) AS ORG_KIND_NAME 
	   ,GROUP_ORDER 
  	   ,MAX(GROUP_FULL_NAME) AS GROUP_FULL_NAME 
	   ,SUM(FACT_REAL_VES) AS FACT_REAL_VES 
  	   ,SUM(PLAN_REAL_VES) AS PLAN_REAL_VES 
       ,SUM(NORMA_REAL_VES) AS NORMA_REAL_VES 
FROM 
(SELECT 
  (CASE 
     WHEN FILIAL_ORDER=3  OR FILIAL_ORDER=13 THEN 2 
	 ELSE 1 
  END) AS FILIAL_ORDER, 
  (CASE 
     WHEN FILIAL_ORDER=3 OR FILIAL_ORDER=13 THEN 'АРХАНГЕЛЬСК' 
	 ELSE 'КОМИ' 
  END) AS FILIAL_NAME, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 1 
  		WHEN ORG_KIND_ORDER=12 THEN 5 
		ELSE ORG_KIND_ORDER 
	END) AS ORG_KIND_ORDER, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=12 THEN 'АЗС' 
  		WHEN ORG_KIND_ORDER=0 THEN 'Транзит' 
		ELSE ORG_KIND_NAME 
   END) AS ORG_KIND_NAME, 
  (CASE 
  	   WHEN GROUP_ORDER=140 THEN 130 
	   ELSE GROUP_ORDER 
  	END) AS GROUP_ORDER, 
  (CASE 
  	   WHEN GROUP_ORDER IN (130,140) THEN 'Нефтебитумы' 
	   ELSE GROUP_FULL_NAME 
  	END) AS GROUP_FULL_NAME, 
  FACT_REAL_VES, 
  PLAN_REAL_VES, 
  NORMA_REAL_VES 
FROM V_FIL_SUT_REAL) 
GROUP BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER 
ORDER BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER;


--
-- V_FIL_MES_REAL_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIL_MES_REAL_OLD
(FILIAL_ORDER, FILIAL_NAME, ORG_KIND_ORDER, ORG_KIND_NAME, GROUP_ORDER, 
 GROUP_FULL_NAME, FACT_REAL_VES, PLAN_REAL_VES, NORMA_REAL_VES)
AS 
SELECT 
	   FILIAL_ORDER 
       ,MAX(FILIAL_NAME) AS FILIAL_NAME 
	   ,ORG_KIND_ORDER 
	   ,MAX(ORG_KIND_NAME) AS ORG_KIND_NAME 
	   ,GROUP_ORDER 
  	   ,MAX(GROUP_FULL_NAME) AS GROUP_FULL_NAME 
	   ,SUM(FACT_REAL_VES) AS FACT_REAL_VES 
  	   ,SUM(PLAN_REAL_VES) AS PLAN_REAL_VES 
       ,SUM(NORMA_REAL_VES) AS NORMA_REAL_VES 
FROM 
(SELECT 
  (CASE 
	 		 WHEN FILIAL_ID IN (30,59) THEN 1 
	 		 WHEN FILIAL_ID IN (31) THEN 2 
	 		 WHEN FILIAL_ID IN (22) THEN 3 
	 		 WHEN FILIAL_ID IN (32) THEN 4 
	 		 WHEN FILIAL_ID IN (34) THEN 5 
	 		 WHEN FILIAL_ID IN (35) THEN 6 
	 		 WHEN FILIAL_ID IN (36) THEN 7 
	 		 WHEN FILIAL_ID IN (37) THEN 8 
	 		 WHEN FILIAL_ID IN (38) THEN 9 
	 		 WHEN FILIAL_ID IN (50) THEN 10 
	 		 WHEN FILIAL_ID IN (40) THEN 11 
	 		 WHEN FILIAL_ID IN (75) THEN 12 
	    	 ELSE FILIAL_ORDER 
	END) AS FILIAL_ORDER , 
  (CASE 
			 WHEN FILIAL_ID IN (31) THEN 'Ухтинский участок' 
			 WHEN FILIAL_ID IN (30,59) THEN 'Сыктывкарский участок (АЗС+Вогваздинская нефтебаза)' 
			 WHEN FILIAL_ID IN (40) THEN 'Архангельские нефтебазы' 
	         ELSE FILIAL_NAME 
	END) AS FILIAL_NAME, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 1 
  		WHEN ORG_KIND_ORDER=12 THEN 5 
		ELSE ORG_KIND_ORDER 
	END) AS ORG_KIND_ORDER, 
  (CASE 
  		WHEN ORG_KIND_ORDER=11 THEN 'Нефтебаза' 
  		WHEN ORG_KIND_ORDER=12 THEN 'АЗС' 
  		WHEN ORG_KIND_ORDER=0 THEN 'Транзит' 
		ELSE ORG_KIND_NAME 
   END) AS ORG_KIND_NAME, 
  (CASE 
  	   WHEN GROUP_ORDER=140 THEN 130 
	   ELSE GROUP_ORDER 
  	END) AS GROUP_ORDER, 
  (CASE 
  	   WHEN GROUP_ORDER IN (130,140) THEN 'Нефтебитумы' 
	   ELSE GROUP_FULL_NAME 
  	END) AS GROUP_FULL_NAME, 
  FACT_REAL_VES, 
  PLAN_REAL_VES, 
  NORMA_REAL_VES 
FROM V_FIL_SUT_REAL 
ORDER BY FILIAL_ORDER 
		  			 	) 
GROUP BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER 
ORDER BY 
        FILIAL_ORDER 
		,ORG_KIND_ORDER 
		,GROUP_ORDER;


--
-- V_GU12_GRAF_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_GRAF_1
(DATE_R, PRINVAG, KOL, VES)
AS 
SELECT
BR.DATE_R,
PV.ABBR AS PRINVAG,
SUM(BR.KOL_VAG) AS KOL,
SUM(BR.VES) AS VES
FROM GU12_BR BR,GU12_B B,GU12_A A,KLS_GD_PRINVAG PV
WHERE A.ID=B.ID_A
AND B.ID=BR.ID_B
AND A.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND b.PRINVAG_ID=PV.ID
GROUP BY DATE_R,ABBR
ORDER BY DATE_R,ABBR;


--
-- V_GU12_REP_SVERKA_DATE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_SVERKA_DATE
(NOM_Z, KOL_A, KOL_BR, RAZN)
AS 
SELECT "NOM_Z","KOL_A","KOL_BR","RAZN" FROM
(
SELECT NOM_Z,SUM(KOL) AS KOL_A,SUM(KOL1) AS KOL_BR,SUM(KOL)-SUM(KOL1) AS RAZN FROM
(
     SELECT A.NOM_Z,BR.KOL_VAG AS KOL,0 AS KOL1 
     FROM GU12_A A,GU12_B B,GU12_BR BR 
     WHERE FROM_DATE BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_SVER','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_SVER','MASTER','GU12') 
     AND A.ID=B.ID_A(+)
     AND B.ID=BR.ID_B(+)
UNION ALL
     SELECT A.NOM_Z,0 AS KOL,BR.KOL_VAG AS KOL1 
     FROM GU12_A A,GU12_B B,GU12_BR BR 
     WHERE 
     A.ID=B.ID_A(+)
     AND B.ID=BR.ID_B(+)
     AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_SVER','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_SVER','MASTER','GU12') 
) GROUP BY NOM_Z ORDER BY NOM_Z
) WHERE RAZN <>0;


--
-- V_PLAN_FACT_UNI  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_UNI
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT "TIP_ROW","GROUP_ORDER","GROUP_NAME","PROD_ORDER","PROD_ID_NPR","PLANSTRU_ORDER","PLANSTRU_ID","LEVEL_POS",
"PLANSTRU_NAME","KOD_SGR","KOD_SPG","KOD_RZD","KOD_PRZ","KOD_GRP","KOD_PGR","DATE_PLAN","PLAN_MON","PLAN_NAR",
"OBR_MON","OBR_NAR","KORR_MON","KORR_NAR","DATE_ZAYV","ZAYV","DATE_FACT","TIME_FACT","FACT_SUT","FACT", "PLAN_NAR_RASP",
"OBR_NAR_RASP","KORR_NAR_RASP",
   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3 FROM (
SELECT * FROM V_PLAN_FACT_1
UNION ALL
SELECT * FROM V_PLAN_FACT_2
UNION ALL
SELECT * FROM V_PLAN_FACT_3
UNION ALL
SELECT * FROM V_PLAN_FACT_4
UNION ALL
SELECT * FROM V_PLAN_FACT_5
UNION ALL
SELECT * FROM V_PLAN_FACT_6
)
ORDER BY GROUP_ORDER, PROD_ORDER, PLANSTRU_ORDER;


--
-- V_REESTR_SLIV_NEFT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REESTR_SLIV_NEFT
(PROD_ID_NPR, STAN_OTP_NAME, SVED_DATE, NUM_KVIT_TXT, NUM_CIST, 
 VES_NETTO, VES_NETTO_KVIT)
AS 
select 
  a.prod_id_npr, 
  (CASE 
     WHEN a.prod_id_npr='90002' then 'Усинск' 
     WHEN a.prod_id_npr='90004' then 'Ярега' 
	 ELSE '' 
   END) as STAN_OTP_NAME, 
  a.sved_date, 
  b.NUM_KVIT_TXT, 
  b.num_cist, 
  ROUND(b.VES_NETTO,3) as ves_netto, 
  ROUND(b.VES_NETTO_KVIT/1000,3) as ves_netto_kvit 
from (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='REESTR_SLIV_NEFT.XLS') r, 
     sved_in a,reestr_in b 
where a.id=b.sved_in_id 
and a.sved_date between r.begin_date and r.end_date 
and a.prod_id_npr=r.PROD_ID_NPR 
order by sved_date,num_kvit_txt,sved_num,sved_pos;


--
-- V_SLIV_NEFT_MOS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SLIV_NEFT_MOS
(PROD_ID_NPR, STAN_OTP_NAME, SVED_NUM, NUM_KVIT_TXT, DATE_KVIT, 
 VES_KVIT, DATE_IN_STAN, SVED_DATE, NUM_CIST, KALIBR_ID)
AS 
select 
  a.prod_id_npr, 
  (CASE 
     WHEN a.prod_id_npr='90002' then 'Усинск' 
     WHEN a.prod_id_npr='90004' then 'Ярега' 
	 ELSE '' 
   END) as STAN_OTP_NAME, 
  a.sved_num, 
  b.NUM_KVIT_TXT, 
  date_kvit, 
  ROUND(b.VES_KVIT/1000,3) as ves_kvit, 
  DATE_IN_STAN, 
  a.sved_date, 
  b.num_cist, 
  kalibr_id 
from (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='SLIV_NEFT_MOS.XLS') r, 
     sved_in a,reestr_in b 
where a.id=b.sved_in_id 
and a.sved_date between r.begin_date and r.end_date 
and a.prod_id_npr='90002' 
order by sved_date,sved_num,date_kvit,num_kvit_txt,sved_pos;


--
-- V_SLIV_NEFT_OTKL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SLIV_NEFT_OTKL
(PROD_ID_NPR, STAN_OTP_NAME, DATE_KVIT, DATE_IN_STAN, SVED_DATE, 
 NUM_KVIT_TXT, NUM_CIST, KALIBR_ID, VES_KVIT, VES_NETTO_KVIT, 
 VES, VES_NETTO)
AS 
select 
  a.prod_id_npr, 
  (CASE 
     WHEN a.prod_id_npr='90002' then 'Усинск' 
     WHEN a.prod_id_npr='90004' then 'Ярега' 
	 ELSE '' 
   END) as STAN_OTP_NAME, 
  date_kvit, 
  DATE_IN_STAN, 
  a.sved_date, 
  b.NUM_KVIT_TXT, 
  b.num_cist, 
  kalibr_id, 
  ROUND(b.VES_KVIT/1000,3) as ves_kvit, 
  ROUND(b.VES_NETTO_KVIT/1000,3) as ves_netto_kvit, 
  ROUND(b.VES,7) as ves, 
  ROUND(b.VES_NETTO,7) as ves_netto 
from (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='SLIV_NEFT_OTKL.XLS') r, 
     sved_in a,reestr_in b 
where a.id=b.sved_in_id 
and a.sved_date=r.end_date 
and a.prod_id_npr='90002' 
order by sved_date,date_kvit,num_kvit_txt,sved_num,sved_pos;


--
-- V_SNP_DISP_AZS_OPER_GRP_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_OPER_GRP_PSV
(STORE_RN, NOMEN_RN, IN_VOL, IN_MAS, IN_SUM, 
 IN_HR_VOL, IN_HR_MAS, IN_HR_SUM, IN_I_VOL, IN_I_MAS, 
 IN_I_SUM, IN_O_VOL, IN_O_MAS, IN_O_SUM, IN_TTN_VOL, 
 IN_TTN_MAS, IN_TTN_SUM, OUT_VOL, OUT_MAS, OUT_SUM, 
 OUT_HR_VOL, OUT_HR_MAS, OUT_HR_SUM, OUT_I_VOL, OUT_I_MAS, 
 OUT_I_SUM, OUT_O_VOL, OUT_O_MAS, OUT_O_SUM, OUT_O_VED_VOL, 
 OUT_O_VED_MAS, OUT_O_VED_SUM, OUT_O_BK_VOL, OUT_O_BK_MAS, OUT_O_BK_SUM, 
 OUT_O_KR_VOL, OUT_O_KR_MAS, OUT_O_KR_SUM, OUT_O_NAL_VOL, OUT_O_NAL_MAS, 
 OUT_O_NAL_SUM, OUT_O_FIL_VOL, OUT_O_FIL_MAS, OUT_O_FIL_SUM, OUT_O_LIC_VOL, 
 OUT_O_LIC_MAS, OUT_O_LIC_SUM)
AS 
SELECT /*+ RULE Движение на АЗС  */
      STORE_RN,
      NOMEN_RN,
      SUM(DECODE(A.OPER_ID,'IN',VOLUME,0)) as IN_VOL, -- Всего приход
      SUM(DECODE(A.OPER_ID,'IN',MASSA,0)) as IN_MAS,
      SUM(DECODE(A.OPER_ID,'IN',SUMMA,0)) as IN_SUM,
      SUM(DECODE(A.OPER_ID,'IN_HR',VOLUME,0)) as IN_HR_VOL, -- На хранение
      SUM(DECODE(A.OPER_ID,'IN_HR',MASSA,0)) as IN_HR_MAS,
      SUM(DECODE(A.OPER_ID,'IN_HR',SUMMA,0)) as IN_HR_SUM,
      SUM(DECODE(A.OPER_ID,'IN_I',VOLUME,0)) as IN_I_VOL, -- Внутренний приход
      SUM(DECODE(A.OPER_ID,'IN_I',MASSA,0)) as IN_I_MAS,
      SUM(DECODE(A.OPER_ID,'IN_I',SUMMA,0)) as IN_I_SUM,
      SUM(DECODE(A.OPER_ID,'IN_O',VOLUME,0)) as IN_O_VOL, -- Внешний приход
      SUM(DECODE(A.OPER_ID,'IN_O',MASSA,0)) as IN_O_MAS,
      SUM(DECODE(A.OPER_ID,'IN_O',SUMMA,0)) as IN_O_SUM,
      SUM(DECODE(A.OPER_ID,'IN_TTN',VOLUME,0)) as IN_TTN_VOL, -- Приход на АЗС по ТТН на отпуск в подразделения
      SUM(DECODE(A.OPER_ID,'IN_TTN',MASSA,0)) as IN_TTN_MAS,
      SUM(DECODE(A.OPER_ID,'IN_TTN',SUMMA,0)) as IN_TTN_SUM,
      SUM(DECODE(A.OPER_ID,'OUT',VOLUME,0)) as OUT_VOL, -- Всего расход
      SUM(DECODE(A.OPER_ID,'OUT',MASSA,0)) as OUT_MAS,
      SUM(DECODE(A.OPER_ID,'OUT',SUMMA,0)) as OUT_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_HR',VOLUME,0)) as OUT_HR_VOL, -- С хранения
      SUM(DECODE(A.OPER_ID,'OUT_HR',MASSA,0)) as OUT_HR_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_HR',SUMMA,0)) as OUT_HR_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_I',VOLUME,0)) as OUT_I_VOL, -- Внутренний расход
      SUM(DECODE(A.OPER_ID,'OUT_I',MASSA,0)) as OUT_I_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_I',SUMMA,0)) as OUT_I_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O',VOLUME,0)) as OUT_O_VOL, -- Всего внешний расход
      SUM(DECODE(A.OPER_ID,'OUT_O',MASSA,0)) as OUT_O_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O',SUMMA,0)) as OUT_O_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O_VED',VOLUME,0)) as OUT_O_VED_VOL, -- Заправка по ведомостям
      SUM(DECODE(A.OPER_ID,'OUT_O_VED',MASSA,0)) as OUT_O_VED_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O_VED',SUMMA,0)) as OUT_O_VED_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O_BK',VOLUME,0)) as OUT_O_BK_VOL, -- Заправка по банковским картам 
      SUM(DECODE(A.OPER_ID,'OUT_O_BK',MASSA,0)) as OUT_O_BK_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O_BK',SUMMA,0)) as OUT_O_BK_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O_KR',VOLUME,0)) as OUT_O_KR_VOL, -- Заправка по системе КРЕДИТ
      SUM(DECODE(A.OPER_ID,'OUT_O_KR',MASSA,0)) as OUT_O_KR_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O_KR',SUMMA,0)) as OUT_O_KR_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O_NAL',VOLUME,0)) as OUT_O_NAL_VOL, -- Заправка за наличный расчет
      SUM(DECODE(A.OPER_ID,'OUT_O_NAL',MASSA,0)) as OUT_O_NAL_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O_NAL',SUMMA,0)) as OUT_O_NAL_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O_FIL',VOLUME,0)) as OUT_O_FIL_VOL, -- Заправка филиалов
      SUM(DECODE(A.OPER_ID,'OUT_O_FIL',MASSA,0)) as OUT_O_FIL_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O_FIL',SUMMA,0)) as OUT_O_FIL_SUM,
      SUM(DECODE(A.OPER_ID,'OUT_O_LIC',VOLUME,0)) as OUT_O_LIC_VOL, -- Заправка по картам ЛИКАРД
      SUM(DECODE(A.OPER_ID,'OUT_O_LIC',MASSA,0)) as OUT_O_LIC_MAS,
      SUM(DECODE(A.OPER_ID,'OUT_O_LIC',SUMMA,0)) as OUT_O_LIC_SUM
    FROM 
      V_SNP_DISP_AZS_OPER_PSV A
    GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_OPER_OST_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_OPER_OST_PSV
(STORE_RN, NOMEN_RN, OUT_O_PREV_VOL, OUT_O_PREV_MAS, OUT_O_PREV_SUM, 
 IN_VOL, IN_MAS, IN_SUM, IN_HR_VOL, IN_HR_MAS, 
 IN_HR_SUM, IN_I_VOL, IN_I_MAS, IN_I_SUM, IN_O_VOL, 
 IN_O_MAS, IN_O_SUM, OUT_VOL, OUT_MAS, OUT_SUM, 
 OUT_HR_VOL, OUT_HR_MAS, OUT_HR_SUM, OUT_I_VOL, OUT_I_MAS, 
 OUT_I_SUM, OUT_O_VOL, OUT_O_MAS, OUT_O_SUM, OUT_O_VED_VOL, 
 OUT_O_VED_MAS, OUT_O_VED_SUM, OUT_O_BK_VOL, OUT_O_BK_MAS, OUT_O_BK_SUM, 
 OUT_O_KR_VOL, OUT_O_KR_MAS, OUT_O_KR_SUM, OUT_O_NAL_VOL, OUT_O_NAL_MAS, 
 OUT_O_NAL_SUM, OUT_O_FIL_VOL, OUT_O_FIL_MAS, OUT_O_FIL_SUM, OUT_O_LIC_VOL, 
 OUT_O_LIC_MAS, OUT_O_LIC_SUM, END_VOLUME, END_MASSA, END_FULL, 
 END_WATER, IN_TTN_VOL, IN_TTN_MAS, IN_TTN_SUM, OUT_O_1_VOL, 
 OUT_O_1_MAS, OUT_O_2_VOL, OUT_O_2_MAS, OUT_O_3_VOL, OUT_O_3_MAS, 
 OUT_O_4_VOL, OUT_O_4_MAS, OUT_O_5_VOL, OUT_O_5_MAS, OUT_O_6_VOL, 
 OUT_O_6_MAS, OUT_O_7_VOL, OUT_O_7_MAS, IN_LAST_VOL, IN_LAST_MAS, 
 IN_LAST_SUM, IN_WAY_VOL, IN_WAY_MAS, IN_WAY_SUM)
AS 
SELECT
 STORE_RN,
 NOMEN_RN,
 SUM(OUT_O_PREV_VOL),
 SUM(OUT_O_PREV_MAS),
 SUM(OUT_O_PREV_SUM),
 SUM(IN_VOL),
 SUM(IN_MAS),
 SUM(IN_SUM),
 SUM(IN_HR_VOL),
 SUM(IN_HR_MAS),
 SUM(IN_HR_SUM),
 SUM(IN_I_VOL),
 SUM(IN_I_MAS),
 SUM(IN_I_SUM),
 SUM(IN_O_VOL),
 SUM(IN_O_MAS),
 SUM(IN_O_SUM),
 SUM(OUT_VOL),
 SUM(OUT_MAS),
 SUM(OUT_SUM),
 SUM(OUT_HR_VOL),
 SUM(OUT_HR_MAS),
 SUM(OUT_HR_SUM),
 SUM(OUT_I_VOL),
 SUM(OUT_I_MAS),
 SUM(OUT_I_SUM),
 SUM(OUT_O_VOL),
 SUM(OUT_O_MAS),
 SUM(OUT_O_SUM),
 SUM(OUT_O_VED_VOL),
 SUM(OUT_O_VED_MAS),
 SUM(OUT_O_VED_SUM),
 SUM(OUT_O_BK_VOL),
 SUM(OUT_O_BK_MAS),
 SUM(OUT_O_BK_SUM),
 SUM(OUT_O_KR_VOL),
 SUM(OUT_O_KR_MAS),
 SUM(OUT_O_KR_SUM),
 SUM(OUT_O_NAL_VOL),
 SUM(OUT_O_NAL_MAS),
 SUM(OUT_O_NAL_SUM),
 SUM(OUT_O_FIL_VOL),
 SUM(OUT_O_FIL_MAS),
 SUM(OUT_O_FIL_SUM),
 SUM(OUT_O_LIC_VOL),
 SUM(OUT_O_LIC_MAS),
 SUM(OUT_O_LIC_SUM),
 SUM(END_VOLUME),
 SUM(END_MASSA),
 SUM(END_FULL),
 SUM(END_WATER),
 SUM(IN_TTN_VOL),
 SUM(IN_TTN_MAS),
 SUM(IN_TTN_SUM),
 SUM(OUT_O_1_VOL) as OUT_O_1_VOL,
 SUM(OUT_O_1_MAS) as OUT_O_1_MAS,
 SUM(OUT_O_2_VOL) as OUT_O_2_VOL,
 SUM(OUT_O_2_MAS) as OUT_O_2_MAS,
 SUM(OUT_O_3_VOL) as OUT_O_3_VOL,
 SUM(OUT_O_3_MAS) as OUT_O_3_MAS,
 SUM(OUT_O_4_VOL) as OUT_O_4_VOL,
 SUM(OUT_O_4_MAS) as OUT_O_4_MAS,
 SUM(OUT_O_5_VOL) as OUT_O_5_VOL,
 SUM(OUT_O_5_MAS) as OUT_O_5_MAS,
 SUM(OUT_O_6_VOL) as OUT_O_6_VOL,
 SUM(OUT_O_6_MAS) as OUT_O_6_MAS,
 SUM(OUT_O_7_VOL) as OUT_O_7_VOL,
 SUM(OUT_O_7_MAS) as OUT_O_7_MAS,
 SUM(IN_LAST_VOL),
 SUM(IN_LAST_MAS),
 SUM(IN_LAST_SUM),
 SUM(IN_WAY_VOL),
 SUM(IN_WAY_MAS),
 SUM(IN_WAY_SUM)
FROM
(
SELECT
     STORE_RN,
     NOMEN_RN,
     0 as OUT_O_PREV_VOL,
     0 as OUT_O_PREV_MAS,
     0 as OUT_O_PREV_SUM,
     0 as IN_VOL,
     0 as IN_MAS,
     0 as IN_SUM,
     0 as IN_HR_VOL,
     0 as IN_HR_MAS,
     0 as IN_HR_SUM,
     0 as IN_I_VOL,
     0 as IN_I_MAS,
     0 as IN_I_SUM,
     0 as IN_O_VOL,
     0 as IN_O_MAS,
     0 as IN_O_SUM,
     0 as OUT_VOL,
     0 as OUT_MAS,
     0 as OUT_SUM,
     0 as OUT_HR_VOL,
     0 as OUT_HR_MAS,
     0 as OUT_HR_SUM,
     0 as OUT_I_VOL,
     0 as OUT_I_MAS,
     0 as OUT_I_SUM,
     0 as OUT_O_VOL,
     0 as OUT_O_MAS,
     0 as OUT_O_SUM,
     0 as OUT_O_VED_VOL,
     0 as OUT_O_VED_MAS,
     0 as OUT_O_VED_SUM,
     0 as OUT_O_BK_VOL,
     0 as OUT_O_BK_MAS,
     0 as OUT_O_BK_SUM,
     0 as OUT_O_KR_VOL,
     0 as OUT_O_KR_MAS,
     0 as OUT_O_KR_SUM,
     0 as OUT_O_NAL_VOL,
     0 as OUT_O_NAL_MAS,
     0 as OUT_O_NAL_SUM,
     0 as OUT_O_FIL_VOL,
     0 as OUT_O_FIL_MAS,
     0 as OUT_O_FIL_SUM,
     0 as OUT_O_LIC_VOL,
     0 as OUT_O_LIC_MAS,
     0 as OUT_O_LIC_SUM,
     END_VOLUME,
     END_MASSA,
     END_FULL,
     END_WATER,
     0 as IN_TTN_VOL,
     0 as IN_TTN_MAS,
     0 as IN_TTN_SUM,
     0 as OUT_O_1_VOL,
     0 as OUT_O_1_MAS,
     0 as OUT_O_2_VOL,
     0 as OUT_O_2_MAS,
     0 as OUT_O_3_VOL,
     0 as OUT_O_3_MAS,
     0 as OUT_O_4_VOL,
     0 as OUT_O_4_MAS,
     0 as OUT_O_5_VOL,
     0 as OUT_O_5_MAS,
     0 as OUT_O_6_VOL,
     0 as OUT_O_6_MAS,
     0 as OUT_O_7_VOL,
     0 as OUT_O_7_MAS,
     0 as IN_LAST_VOL,
     0 as IN_LAST_MAS,
     0 as IN_LAST_SUM,
     0 as IN_WAY_VOL,
     0 as IN_WAY_MAS,
     0 as IN_WAY_SUM
   FROM MASTER.V_SNP_DISP_AZS_OST_GRP_PSV
   UNION ALL
   SELECT
     STORE_RN,
     NOMEN_RN,
     0 as OUT_O_PREV_VOL,
     0 as OUT_O_PREV_MAS,
     0 as OUT_O_PREV_SUM,
     IN_VOL,
     IN_MAS,
     IN_SUM,
     IN_HR_VOL,
     IN_HR_MAS,
     IN_HR_SUM,
     IN_I_VOL,
     IN_I_MAS,
     IN_I_SUM,
     IN_O_VOL,
     IN_O_MAS,
     IN_O_SUM,
     OUT_VOL,
     OUT_MAS,
     OUT_SUM,
     OUT_HR_VOL,
     OUT_HR_MAS,
     OUT_HR_SUM,
     OUT_I_VOL,
     OUT_I_MAS,
     OUT_I_SUM,
     OUT_O_VOL,
     OUT_O_MAS,
     OUT_O_SUM,
     OUT_O_VED_VOL,
     OUT_O_VED_MAS,
     OUT_O_VED_SUM,
     OUT_O_BK_VOL,
     OUT_O_BK_MAS,
     OUT_O_BK_SUM,
     OUT_O_KR_VOL,
     OUT_O_KR_MAS,
     OUT_O_KR_SUM,
     OUT_O_NAL_VOL,
     OUT_O_NAL_MAS,
     OUT_O_NAL_SUM,
     OUT_O_FIL_VOL,
     OUT_O_FIL_MAS,
     OUT_O_FIL_SUM,
     OUT_O_LIC_VOL,
     OUT_O_LIC_MAS,
     OUT_O_LIC_SUM,
     0 as END_VOLUME,
     0 as END_MASSA,
     0 as END_FULL,
     0 as END_WATER,
     IN_TTN_VOL,
     IN_TTN_MAS,
     IN_TTN_SUM,
     0 as OUT_O_1_VOL,
     0 as OUT_O_1_MAS,
     0 as OUT_O_2_VOL,
     0 as OUT_O_2_MAS,
     0 as OUT_O_3_VOL,
     0 as OUT_O_3_MAS,
     0 as OUT_O_4_VOL,
     0 as OUT_O_4_MAS,
     0 as OUT_O_5_VOL,
     0 as OUT_O_5_MAS,
     0 as OUT_O_6_VOL,
     0 as OUT_O_6_MAS,
     0 as OUT_O_7_VOL,
     0 as OUT_O_7_MAS,
     0 as IN_LAST_VOL,
     0 as IN_LAST_MAS,
     0 as IN_LAST_SUM,
     0 as IN_WAY_VOL,
     0 as IN_WAY_MAS,
     0 as IN_WAY_SUM
   FROM MASTER.V_SNP_DISP_AZS_OPER_GRP_PSV
   UNION ALL
   SELECT
     STORE_RN,
     NOMEN_RN,
     OUT_O_PREV_VOL,
     OUT_O_PREV_MAS,
     OUT_O_PREV_SUM,
     0 as IN_VOL,
     0 as IN_MAS,
     0 as IN_SUM,
     0 as IN_HR_VOL,
     0 as IN_HR_MAS,
     0 as IN_HR_SUM,
     0 as IN_I_VOL,
     0 as IN_I_MAS,
     0 as IN_I_SUM,
     0 as IN_O_VOL,
     0 as IN_O_MAS,
     0 as IN_O_SUM,
     0 as OUT_VOL,
     0 as OUT_MAS,
     0 as OUT_SUM,
     0 as OUT_HR_VOL,
     0 as OUT_HR_MAS,
     0 as OUT_HR_SUM,
     0 as OUT_I_VOL,
     0 as OUT_I_MAS,
     0 as OUT_I_SUM,
     0 as OUT_O_VOL,
     0 as OUT_O_MAS,
     0 as OUT_O_SUM,
     0 as OUT_O_VED_VOL,
     0 as OUT_O_VED_MAS,
     0 as OUT_O_VED_SUM,
     0 as OUT_O_BK_VOL,
     0 as OUT_O_BK_MAS,
     0 as OUT_O_BK_SUM,
     0 as OUT_O_KR_VOL,
     0 as OUT_O_KR_MAS,
     0 as OUT_O_KR_SUM,
     0 as OUT_O_NAL_VOL,
     0 as OUT_O_NAL_MAS,
     0 as OUT_O_NAL_SUM,
     0 as OUT_O_FIL_VOL,
     0 as OUT_O_FIL_MAS,
     0 as OUT_O_FIL_SUM,
     0 as OUT_O_LIC_VOL,
     0 as OUT_O_LIC_MAS,
     0 as OUT_O_LIC_SUM,
     0 as END_VOLUME,
     0 as END_MASSA,
     0 as END_FULL,
     0 as END_WATER,
     0 as IN_TTN_VOL,
     0 as IN_TTN_MAS,
     0 as IN_TTN_SUM,
     0 as OUT_O_1_VOL,
     0 as OUT_O_1_MAS,
     0 as OUT_O_2_VOL,
     0 as OUT_O_2_MAS,
     0 as OUT_O_3_VOL,
     0 as OUT_O_3_MAS,
     0 as OUT_O_4_VOL,
     0 as OUT_O_4_MAS,
     0 as OUT_O_5_VOL,
     0 as OUT_O_5_MAS,
     0 as OUT_O_6_VOL,
     0 as OUT_O_6_MAS,
     0 as OUT_O_7_VOL,
     0 as OUT_O_7_MAS,
     0 as IN_LAST_VOL,
     0 as IN_LAST_MAS,
     0 as IN_LAST_SUM,
     0 as IN_WAY_VOL,
     0 as IN_WAY_MAS,
     0 as IN_WAY_SUM
   FROM MASTER.V_SNP_DISP_AZS_OPER_PREV_PSV
   UNION ALL
   SELECT
     STORE_RN,
     NOMEN_RN,
     0 as OUT_O_PREV_VOL,
     0 as OUT_O_PREV_MAS,
     0 as OUT_O_PREV_SUM,
     0 as IN_VOL,
     0 as IN_MAS,
     0 as IN_SUM,
     0 as IN_HR_VOL,
     0 as IN_HR_MAS,
     0 as IN_HR_SUM,
     0 as IN_I_VOL,
     0 as IN_I_MAS,
     0 as IN_I_SUM,
     0 as IN_O_VOL,
     0 as IN_O_MAS,
     0 as IN_O_SUM,
     0 as OUT_VOL,
     0 as OUT_MAS,
     0 as OUT_SUM,
     0 as OUT_HR_VOL,
     0 as OUT_HR_MAS,
     0 as OUT_HR_SUM,
     0 as OUT_I_VOL,
     0 as OUT_I_MAS,
     0 as OUT_I_SUM,
     0 as OUT_O_VOL,
     0 as OUT_O_MAS,
     0 as OUT_O_SUM,
     0 as OUT_O_VED_VOL,
     0 as OUT_O_VED_MAS,
     0 as OUT_O_VED_SUM,
     0 as OUT_O_BK_VOL,
     0 as OUT_O_BK_MAS,
     0 as OUT_O_BK_SUM,
     0 as OUT_O_KR_VOL,
     0 as OUT_O_KR_MAS,
     0 as OUT_O_KR_SUM,
     0 as OUT_O_NAL_VOL,
     0 as OUT_O_NAL_MAS,
     0 as OUT_O_NAL_SUM,
     0 as OUT_O_FIL_VOL,
     0 as OUT_O_FIL_MAS,
     0 as OUT_O_FIL_SUM,
     0 as OUT_O_LIC_VOL,
     0 as OUT_O_LIC_MAS,
     0 as OUT_O_LIC_SUM,
     0 as END_VOLUME,
     0 as END_MASSA,
     0 as END_FULL,
     0 as END_WATER,
     0 as IN_TTN_VOL,
     0 as IN_TTN_MAS,
     0 as IN_TTN_SUM,
     OUT_O_1_VOL,
     OUT_O_1_MAS,
     OUT_O_2_VOL,
     OUT_O_2_MAS,
     OUT_O_3_VOL,
     OUT_O_3_MAS,
     OUT_O_4_VOL,
     OUT_O_4_MAS,
     OUT_O_5_VOL,
     OUT_O_5_MAS,
     OUT_O_6_VOL,
     OUT_O_6_MAS,
     OUT_O_7_VOL,
     OUT_O_7_MAS,
     0 as IN_LAST_VOL,
     0 as IN_LAST_MAS,
     0 as IN_LAST_SUM,
     0 as IN_WAY_VOL,
     0 as IN_WAY_MAS,
     0 as IN_WAY_SUM
   FROM MASTER.V_SNP_DISP_AZS_OPER_WEEK_PSV
   UNION ALL
   SELECT
     STORE_RN,
     NOMEN_RN,
     0 as OUT_O_PREV_VOL,
     0 as OUT_O_PREV_MAS,
     0 as OUT_O_PREV_SUM,
     0 as IN_VOL,
     0 as IN_MAS,
     0 as IN_SUM,
     0 as IN_HR_VOL,
     0 as IN_HR_MAS,
     0 as IN_HR_SUM,
     0 as IN_I_VOL,
     0 as IN_I_MAS,
     0 as IN_I_SUM,
     0 as IN_O_VOL,
     0 as IN_O_MAS,
     0 as IN_O_SUM,
     0 as OUT_VOL,
     0 as OUT_MAS,
     0 as OUT_SUM,
     0 as OUT_HR_VOL,
     0 as OUT_HR_MAS,
     0 as OUT_HR_SUM,
     0 as OUT_I_VOL,
     0 as OUT_I_MAS,
     0 as OUT_I_SUM,
     0 as OUT_O_VOL,
     0 as OUT_O_MAS,
     0 as OUT_O_SUM,
     0 as OUT_O_VED_VOL,
     0 as OUT_O_VED_MAS,
     0 as OUT_O_VED_SUM,
     0 as OUT_O_BK_VOL,
     0 as OUT_O_BK_MAS,
     0 as OUT_O_BK_SUM,
     0 as OUT_O_KR_VOL,
     0 as OUT_O_KR_MAS,
     0 as OUT_O_KR_SUM,
     0 as OUT_O_NAL_VOL,
     0 as OUT_O_NAL_MAS,
     0 as OUT_O_NAL_SUM,
     0 as OUT_O_FIL_VOL,
     0 as OUT_O_FIL_MAS,
     0 as OUT_O_FIL_SUM,
     0 as OUT_O_LIC_VOL,
     0 as OUT_O_LIC_MAS,
     0 as OUT_O_LIC_SUM,
     0 as END_VOLUME,
     0 as END_MASSA,
     0 as END_FULL,
     0 as END_WATER,
     0 as IN_TTN_VOL,
     0 as IN_TTN_MAS,
     0 as IN_TTN_SUM,
     0 as OUT_O_1_VOL,
     0 as OUT_O_1_MAS,
     0 as OUT_O_2_VOL,
     0 as OUT_O_2_MAS,
     0 as OUT_O_3_VOL,
     0 as OUT_O_3_MAS,
     0 as OUT_O_4_VOL,
     0 as OUT_O_4_MAS,
     0 as OUT_O_5_VOL,
     0 as OUT_O_5_MAS,
     0 as OUT_O_6_VOL,
     0 as OUT_O_6_MAS,
     0 as OUT_O_7_VOL,
     0 as OUT_O_7_MAS,
     VOLUME as IN_LAST_VOL,
     MASSA as IN_LAST_MAS,
     SUMMA as IN_LAST_SUM,
     0 as IN_WAY_VOL,
     0 as IN_WAY_MAS,
     0 as IN_WAY_SUM
   FROM MASTER.V_SNP_DISP_AZS_IN_LAST_PSV
   UNION ALL
   SELECT
     STORE_RN,
     NOMEN_RN,
     0 as OUT_O_PREV_VOL,
     0 as OUT_O_PREV_MAS,
     0 as OUT_O_PREV_SUM,
     0 as IN_VOL,
     0 as IN_MAS,
     0 as IN_SUM,
     0 as IN_HR_VOL,
     0 as IN_HR_MAS,
     0 as IN_HR_SUM,
     0 as IN_I_VOL,
     0 as IN_I_MAS,
     0 as IN_I_SUM,
     0 as IN_O_VOL,
     0 as IN_O_MAS,
     0 as IN_O_SUM,
     0 as OUT_VOL,
     0 as OUT_MAS,
     0 as OUT_SUM,
     0 as OUT_HR_VOL,
     0 as OUT_HR_MAS,
     0 as OUT_HR_SUM,
     0 as OUT_I_VOL,
     0 as OUT_I_MAS,
     0 as OUT_I_SUM,
     0 as OUT_O_VOL,
     0 as OUT_O_MAS,
     0 as OUT_O_SUM,
     0 as OUT_O_VED_VOL,
     0 as OUT_O_VED_MAS,
     0 as OUT_O_VED_SUM,
     0 as OUT_O_BK_VOL,
     0 as OUT_O_BK_MAS,
     0 as OUT_O_BK_SUM,
     0 as OUT_O_KR_VOL,
     0 as OUT_O_KR_MAS,
     0 as OUT_O_KR_SUM,
     0 as OUT_O_NAL_VOL,
     0 as OUT_O_NAL_MAS,
     0 as OUT_O_NAL_SUM,
     0 as OUT_O_FIL_VOL,
     0 as OUT_O_FIL_MAS,
     0 as OUT_O_FIL_SUM,
     0 as OUT_O_LIC_VOL,
     0 as OUT_O_LIC_MAS,
     0 as OUT_O_LIC_SUM,
     0 as END_VOLUME,
     0 as END_MASSA,
     0 as END_FULL,
     0 as END_WATER,
     0 as IN_TTN_VOL,
     0 as IN_TTN_MAS,
     0 as IN_TTN_SUM,
     0 as OUT_O_1_VOL,
     0 as OUT_O_1_MAS,
     0 as OUT_O_2_VOL,
     0 as OUT_O_2_MAS,
     0 as OUT_O_3_VOL,
     0 as OUT_O_3_MAS,
     0 as OUT_O_4_VOL,
     0 as OUT_O_4_MAS,
     0 as OUT_O_5_VOL,
     0 as OUT_O_5_MAS,
     0 as OUT_O_6_VOL,
     0 as OUT_O_6_MAS,
     0 as OUT_O_7_VOL,
     0 as OUT_O_7_MAS,
     0 as IN_LAST_VOL,
     0 as IN_LAST_MAS,
     0 as IN_LAST_SUM,
     VOLUME as IN_WAY_VOL,
     MASSA as IN_WAY_MAS,
     SUMMA as IN_WAY_SUM
   FROM MASTER.V_SNP_DISP_AZS_WAY_PSV
)
GROUP BY STORE_RN,NOMEN_RN;


--
-- V_SNP_DISP_AZS_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DISP_AZS_PSV
(BEG_DATE, END_DATE, STORE_RN, NOMEN_RN, OUT_O_PREV_VOL, 
 OUT_O_PREV_MAS, OUT_O_PREV_SUM, IN_VOL, IN_MAS, IN_SUM, 
 IN_HR_VOL, IN_HR_MAS, IN_HR_SUM, IN_I_VOL, IN_I_MAS, 
 IN_I_SUM, IN_O_VOL, IN_O_MAS, IN_O_SUM, OUT_VOL, 
 OUT_MAS, OUT_SUM, OUT_HR_VOL, OUT_HR_MAS, OUT_HR_SUM, 
 OUT_I_VOL, OUT_I_MAS, OUT_I_SUM, OUT_O_VOL, OUT_O_MAS, 
 OUT_O_SUM, OUT_O_VED_VOL, OUT_O_VED_MAS, OUT_O_VED_SUM, OUT_O_BK_VOL, 
 OUT_O_BK_MAS, OUT_O_BK_SUM, OUT_O_KR_VOL, OUT_O_KR_MAS, OUT_O_KR_SUM, 
 OUT_O_NAL_VOL, OUT_O_NAL_MAS, OUT_O_NAL_SUM, OUT_O_FIL_VOL, OUT_O_FIL_MAS, 
 OUT_O_FIL_SUM, OUT_O_LIC_VOL, OUT_O_LIC_MAS, OUT_O_LIC_SUM, END_VOLUME, 
 END_MASSA, END_FULL, END_WATER, IN_TTN_VOL, IN_TTN_MAS, 
 IN_TTN_SUM, OUT_O_1_VOL, OUT_O_1_MAS, OUT_O_2_VOL, OUT_O_2_MAS, 
 OUT_O_3_VOL, OUT_O_3_MAS, OUT_O_4_VOL, OUT_O_4_MAS, OUT_O_5_VOL, 
 OUT_O_5_MAS, OUT_O_6_VOL, OUT_O_6_MAS, OUT_O_7_VOL, OUT_O_7_MAS, 
 IN_LAST_VOL, IN_LAST_MAS, IN_LAST_SUM, IN_WAY_VOL, IN_WAY_MAS, 
 IN_WAY_SUM, STORE_CRN, STORE_CODE, STORE_NAME, STORE_DEP, 
 IS_TRANSIT, NOMEN_CODE, NOMEN_NAME, LAST_DAY, SM_NUMBER, 
 SM_BEGIN, SM_END)
AS 
SELECT /*+ RULE */
  A.BEG_DATE,
  A.END_DATE,
  C."STORE_RN",C."NOMEN_RN",C."OUT_O_PREV_VOL",C."OUT_O_PREV_MAS",C."OUT_O_PREV_SUM",C."IN_VOL",C."IN_MAS",C."IN_SUM",C."IN_HR_VOL",C."IN_HR_MAS",C."IN_HR_SUM",C."IN_I_VOL",C."IN_I_MAS",C."IN_I_SUM",C."IN_O_VOL",C."IN_O_MAS",C."IN_O_SUM",C."OUT_VOL",C."OUT_MAS",C."OUT_SUM",C."OUT_HR_VOL",C."OUT_HR_MAS",C."OUT_HR_SUM",C."OUT_I_VOL",C."OUT_I_MAS",C."OUT_I_SUM",C."OUT_O_VOL",C."OUT_O_MAS",C."OUT_O_SUM",C."OUT_O_VED_VOL",C."OUT_O_VED_MAS",C."OUT_O_VED_SUM",C."OUT_O_BK_VOL",C."OUT_O_BK_MAS",C."OUT_O_BK_SUM",C."OUT_O_KR_VOL",C."OUT_O_KR_MAS",C."OUT_O_KR_SUM",C."OUT_O_NAL_VOL",C."OUT_O_NAL_MAS",C."OUT_O_NAL_SUM",C."OUT_O_FIL_VOL",C."OUT_O_FIL_MAS",C."OUT_O_FIL_SUM",C."OUT_O_LIC_VOL",C."OUT_O_LIC_MAS",C."OUT_O_LIC_SUM",C."END_VOLUME",C."END_MASSA",C."END_FULL",C."END_WATER",C."IN_TTN_VOL",C."IN_TTN_MAS",C."IN_TTN_SUM",C."OUT_O_1_VOL",C."OUT_O_1_MAS",C."OUT_O_2_VOL",C."OUT_O_2_MAS",C."OUT_O_3_VOL",C."OUT_O_3_MAS",C."OUT_O_4_VOL",C."OUT_O_4_MAS",C."OUT_O_5_VOL",C."OUT_O_5_MAS",C."OUT_O_6_VOL",C."OUT_O_6_MAS",C."OUT_O_7_VOL",C."OUT_O_7_MAS",C."IN_LAST_VOL",C."IN_LAST_MAS",C."IN_LAST_SUM",C."IN_WAY_VOL",C."IN_WAY_MAS",C."IN_WAY_SUM",
  ds.nCRN as STORE_CRN,
  ds.sNUMB as STORE_CODE,
  ds.sNAME as STORE_NAME,
  ds.sDEP_READY as STORE_DEP,
  ds.IS_TRANSIT,
--  replace(NLS_UPPER(nom.NOMEN_CODE),'_СТ','') as NOMEN_CODE,
--  replace(NLS_UPPER(nom.NOMEN_NAME),'_СТ','') as NOMEN_NAME,
  nom.NOMEN_CODE,
  nom.NOMEN_NAME,
  B.LAST_DAY,
  B.SM_NUMBER,
  B.SM_BEGIN,
  B.SM_END
FROM
  vaneev.v_dicstore_psv@oracle.world ds,
  PARUS.DICNOMNS@oracle.world nom,
  MASTER.V_SNP_DISP_AZS_OPER_OST_PSV C,
  (
   SELECT /*+ RULE Дата последней смены */
      STORE_RN,
      MAX(LAST_DAY) as LAST_DAY,
      MAX(SM_NUMBER) as SM_NUMBER,
      MAX(SM_BEGIN) as SM_BEGIN,
         MAX(SM_END) as SM_END
    FROM PARUS.TB_SNP_STORE_OST_PSV@oracle.world
    WHERE USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
      AND SOURCE_ID=0
    GROUP BY STORE_RN
  ) B,
  PARUS.TB_SNP_STORE_COND_PSV@oracle.world A
WHERE A.USER_ID=NLS_UPPER(SYS_CONTEXT('USERENV','OS_USER'))
  AND ds.NRN=C.STORE_RN
  AND ds.NRN=B.STORE_RN(+)
  AND C.NOMEN_RN=nom.RN;


--
-- V_TEMP_REESTR_PARAMS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_REESTR_PARAMS
(DATE_PLAN, DATE_REE, DATETIME_REPORT, GRAFIK_FROM, GRAFIK_TO, 
 USE_GRAFIK)
AS 
SELECT
  TO_DATE(DATE_PLAN,'dd.mm.yyyy') as DATE_PLAN,
  NVL(For_Temp.GET_AS_DATE('DATE_REE', 'MASTER', 'REESTRORA.XLS'),TRUNC(SYSDATE)+1) as DATE_REE,
  TO_DATE(TO_CHAR(END_DATE,'dd.mm.yyyy')||' '||SUBSTR(END_TIME,1,5),'dd.mm.yyyy hh24:mi') as DATETIME_REPORT,
  NVL(For_Temp.GET_AS_DATE('GRAFIK_FROM', 'MASTER', 'REESTRORA.XLS'),TRUNC(SYSDATE,'MONTH')) as GRAFIK_FROM,
  NVL(For_Temp.GET_AS_DATE('GRAFIK_TO', 'MASTER', 'REESTRORA.XLS'),TRUNC(SYSDATE)+1) as GRAFIK_TO,
  NVL(For_Temp.GET_AS_NUM('USE_GRAFIK', 'MASTER', 'REESTRORA.XLS'),0) as USE_GRAFIK
FROM V_MASTER_REPORTS
WHERE NLS_UPPER(REPORT_FILE)='REESTRORA.XLS';


--
-- TRG_AIUDR_REESTR_IN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_REESTR_IN
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.REESTR_IN
FOR EACH ROW
BEGIN
  -- Обновляем кол-во и веса в заголовке документа
  IF INSERTING() THEN
    UPDATE SVED_IN 
	   SET SVED_CNT=NVL(SVED_CNT,0)+1,  
	       SVED_VES=NVL(SVED_VES,0)+NVL(:NEW.VES,0),
	       VES_NETTO=NVL(VES_NETTO,0)+NVL(:NEW.VES_NETTO,0),  
	       VES_KVIT=NVL(VES_KVIT,0)+NVL(:NEW.VES_KVIT,0),  
	       VES_NETTO_KVIT=NVL(VES_NETTO_KVIT,0)+NVL(:NEW.VES_NETTO_KVIT,0)  
 	 WHERE ID=:NEW.SVED_IN_ID;	     
  END IF;	
  IF DELETING() THEN
    UPDATE SVED_IN 
	   SET SVED_CNT=NVL(SVED_CNT,0)-1, 
	       SVED_VES=NVL(SVED_VES,0)-NVL(:OLD.VES,0),
	       VES_NETTO=NVL(VES_NETTO,0)-NVL(:OLD.VES_NETTO,0),  
	       VES_KVIT=NVL(VES_KVIT,0)-NVL(:OLD.VES_KVIT,0),  
	       VES_NETTO_KVIT=NVL(VES_NETTO_KVIT,0)-NVL(:OLD.VES_NETTO_KVIT,0)  
	 WHERE ID=:OLD.SVED_IN_ID;	   
  END IF;
  IF UPDATING('VES') OR UPDATING('VES_NETTO') OR UPDATING('VES_KVIT') OR UPDATING('VES_NETTO_KVIT') OR UPDATING('P_VOD_KVIT') OR UPDATING('P_SOL_KVIT') OR UPDATING('P_DIRT_KVIT') THEN
    UPDATE SVED_IN 
	   SET SVED_VES=NVL(SVED_VES,0)-NVL(:OLD.VES,0)+NVL(:NEW.VES,0),
	       VES_NETTO=NVL(VES_NETTO,0)-NVL(:OLD.VES_NETTO,0)+NVL(:NEW.VES_NETTO,0),  
	       VES_KVIT=NVL(VES_KVIT,0)-NVL(:OLD.VES_KVIT,0)+NVL(:NEW.VES_KVIT,0),  
	       VES_NETTO_KVIT=NVL(VES_NETTO_KVIT,0)-NVL(:OLD.VES_NETTO_KVIT,0)+NVL(:NEW.VES_NETTO_KVIT,0)  
	 WHERE ID=:NEW.SVED_IN_ID; 
  END IF;	 
END;
/


--
-- TRG_AIUDR_SVED_IN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_SVED_IN
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.SVED_IN
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN
  IF UPDATING('SVED_DATE') THEN
    UPDATE REESTR_IN SET DATE_OTGR=:NEW.SVED_DATE WHERE SVED_IN_ID=:new.ID;
  END IF;	
END;
/


--
-- TRG_AUR_MONTH_VISIR_LOC  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AUR_MONTH_VISIR_LOC
AFTER UPDATE
ON MASTER.MONTH_VISIR_LOC
FOR EACH ROW
DECLARE
act VARCHAR2(1);
newPrich VARCHAR2(250);
oldPrich VARCHAR2(250);
BEGIN
  IF UPDATING() THEN
    newPrich := LTrim(RTrim(:NEW.PRICHIN)) || ' ';
	oldPrich := LTrim(RTrim(:OLD.PRICHIN)) || ' ';
    IF newPrich<>oldPrich THEN
      IF oldPrich=' ' AND newPrich<>' ' THEN
	    act:='I';
	  ELSE
        IF oldPrich<>' ' AND newPrich=' ' THEN
		  act:='D';
		ELSE
		  act:='U';
		END IF;
      END IF;
	  for_visir.local_to_global_row(act,:NEW.APP_USERS_ID,:NEW.DATE_REE,:NEW.DOP_REE,:NEW.NOM_ZD,newPrich);
	END IF;
  END IF;
EXCEPTION
  WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20199,'Ошибка при обновлении причины!');
END TRG_AUR_MONTH_VISIR_LOC;
/


--
-- TRG_BIR_AZC_SYS_COMM  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_SYS_COMM
BEFORE INSERT
ON MASTER.AZC_SYS_COMM
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_sys_comm.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_sys_comm;
/


--
-- TRG_BIR_INF2PB_ACCOUNTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_INF2PB_ACCOUNTS
BEFORE INSERT
ON MASTER.INF2PB_ACCOUNTS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN

  IF :NEW.ID=0 OR :NEW.ID is NULL THEN
    tmpVar := 0;
    Select seq_INF2PB_ACCOUNTS.NextVal into tmpVar from dual;
   :NEW.ID := tmpVar;
  END IF;
END TRG_BIR_INF2PB_ACCOUNTS;
/


--
-- TRG_BIUDR_KLS_DOC_NUMS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_DOC_NUMS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_DOC_NUMS
FOR EACH ROW
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_VED_OSMOTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_OSMOTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR
FOR EACH ROW
DECLARE
  v_old VED_OSMOTR%ROWTYPE;
  v_new VED_OSMOTR%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.VED_NUM := :OLD.VED_NUM;
    v_old.VED_DATE := :OLD.VED_DATE;
    v_old.FROM_DATE := :OLD.FROM_DATE;
    v_old.TO_DATE := :OLD.TO_DATE;
    v_old.FIO1 := :OLD.FIO1;
    v_old.FIO2 := :OLD.FIO2;
    v_old.FIO3 := :OLD.FIO3;
    v_old.SIGN1 := :OLD.SIGN1;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.VED_NUM := :NEW.VED_NUM;
    v_new.VED_DATE := :NEW.VED_DATE;
    v_new.FROM_DATE := :NEW.FROM_DATE;
    v_new.TO_DATE := :NEW.TO_DATE;
    v_new.FIO1 := :NEW.FIO1;
    v_new.FIO2 := :NEW.FIO2;
    v_new.FIO3 := :NEW.FIO3;
    v_new.SIGN1 := :NEW.SIGN1;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_ID.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.VED_NUM := v_new.VED_NUM;
    :NEW.VED_DATE := v_new.VED_DATE;
    :NEW.FROM_DATE := v_new.FROM_DATE;
    :NEW.TO_DATE := v_new.TO_DATE;
    :NEW.FIO1 := v_new.FIO1;
    :NEW.FIO2 := v_new.FIO2;
    :NEW.FIO3 := v_new.FIO3;
    :NEW.SIGN1 := v_new.SIGN1;
  END IF;
END;
/


--
-- TRG_CHECKARH_REESTR_IN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_REESTR_IN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REESTR_IN
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.SVED_DATE;
    BEGIN
      SELECT SVED_IN.SVED_DATE INTO doc_dat
	    FROM SVED_IN WHERE SVED_IN.ID=:OLD.SVED_IN_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
    --doc_dat:=:NEW.SVED_DATE;
    BEGIN
      SELECT SVED_IN.SVED_DATE INTO doc_dat
	    FROM SVED_IN WHERE SVED_IN.ID=:NEW.SVED_IN_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_VED_OSMOTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_VED_OSMOTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.VED_DATE;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:OLD.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.VED_DATE;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:NEW.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- T01_SEQ_ZAKAZ_GRAFIK  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T01_SEQ_ZAKAZ_GRAFIK
BEFORE INSERT OR UPDATE
ON MASTER.ZAKAZ_GRAFIK
FOR EACH ROW
BEGIN

  -- Уникальный ID
  IF :new.ID=0 OR :new.ID IS NULL THEN
    SELECT SEQ_MONTH_ALL.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;

END;
/


--
-- FOR_TEMP  (Synonym) 
--
CREATE PUBLIC SYNONYM FOR_TEMP FOR MASTER.FOR_TEMP;


--
-- EUL_BATCH_PARAMS  (Table) 
--
CREATE TABLE MASTER.EUL_BATCH_PARAMS
(
  BP_ID      NUMBER(10)                         NOT NULL,
  BP_NAME    VARCHAR2(100 BYTE),
  BP_VALUE1  VARCHAR2(250 BYTE),
  BP_VALUE2  VARCHAR2(250 BYTE),
  BP_VALUE3  VARCHAR2(250 BYTE),
  BP_VALUE4  VARCHAR2(250 BYTE),
  BP_VALUE5  VARCHAR2(250 BYTE),
  BP_VALUE6  VARCHAR2(250 BYTE),
  BP_VALUE7  VARCHAR2(250 BYTE),
  BP_BS_ID   NUMBER(10),
  NOTM       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BATCH_QUERIES  (Table) 
--
CREATE TABLE MASTER.EUL_BATCH_QUERIES
(
  BQ_ID            NUMBER(10)                   NOT NULL,
  BQ_BS_ID         NUMBER(10),
  BQ_QUERY_ID      VARCHAR2(240 BYTE),
  BQ_RESULT_SQL_1  VARCHAR2(250 BYTE),
  BQ_RESULT_SQL_2  VARCHAR2(250 BYTE),
  BQ_RESULT_SQL_3  VARCHAR2(250 BYTE),
  BQ_RESULT_SQL_4  VARCHAR2(250 BYTE),
  NOTM             NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_BQ_TABLES  (Table) 
--
CREATE TABLE MASTER.EUL_BQ_TABLES
(
  BQT_ID          NUMBER(10)                    NOT NULL,
  BQT_BQ_ID       NUMBER(10),
  BQT_BRR_ID      NUMBER(10),
  BQT_TABLE_NAME  VARCHAR2(64 BYTE),
  NOTM            NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_JC_JOIN_LINKS  (Table) 
--
CREATE TABLE MASTER.EUL_JC_JOIN_LINKS
(
  JJL_ID      NUMBER(10)                        NOT NULL,
  JJL_JC_ID   NUMBER(10),
  JJL_KEY_ID  NUMBER(10),
  NOTM        NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_NMSDO_JC_USGS  (Table) 
--
CREATE TABLE MASTER.EUL_NMSDO_JC_USGS
(
  NJU_ID        NUMBER(10)                      NOT NULL,
  NJU_JC_ID     NUMBER(10),
  NJU_NMSDO_ID  NUMBER(10),
  NOTM          NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- EUL_OBJ_JOIN_USGS  (Table) 
--
CREATE TABLE MASTER.EUL_OBJ_JOIN_USGS
(
  OJU_ID             NUMBER(10)                 NOT NULL,
  OJU_OBJ_ID         NUMBER(10),
  OJU_JOIN_MODIFIED  NUMBER(1),
  OJU_KEY_ID         NUMBER(10),
  OJU_SUMO_ID        NUMBER(10),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PROD  (Table) 
--
CREATE TABLE MASTER.KLS_PROD
(
  ID_NPR           VARCHAR2(5 BYTE)             NOT NULL,
  ID_KIND_NPR      VARCHAR2(5 BYTE),
  ID_GROUP_NPR     VARCHAR2(5 BYTE),
  NAME_NPR         VARCHAR2(40 BYTE),
  LONG_NAME_NPR    VARCHAR2(250 BYTE),
  ABBR_NPR         VARCHAR2(20 BYTE),
  ID               NUMBER(10),
  FLG_ALLOWED      NUMBER(1),
  GOST_NPR         VARCHAR2(40 BYTE),
  GD_KOD_NPR       VARCHAR2(6 BYTE),
  GD_NAME_NPR      VARCHAR2(100 BYTE),
  KOD_10           VARCHAR2(10 BYTE),
  KOD_OKDP         VARCHAR2(12 BYTE),
  KOD_FAS_MSK      NUMBER(3),
  ED_IZ            VARCHAR2(5 BYTE),
  NORMOTGR         NUMBER(4,1),
  FASOVKA          NUMBER(1),
  VOL_FAS          NUMBER(6,3),
  DOR_NALOG        NUMBER(2),
  AKCIZ            NUMBER(1),
  PROD_NAR_ID      NUMBER(10)                   DEFAULT 0,
  PROD_PLAN_ID     NUMBER(10),
  PROD_GU12_ID     VARCHAR2(10 BYTE),
  MOS_GRP_ID       VARCHAR2(10 BYTE),
  AZC_PR_GRP_ID    NUMBER(10),
  ID_GROUP_NPR_GD  VARCHAR2(5 BYTE),
  AVG_FACT_PL      NUMBER(6,4),
  SF_NAME          VARCHAR2(250 BYTE),
  KSSS_PROD_ID     VARCHAR2(8 BYTE),
  MATNR            VARCHAR2(8 BYTE),
  UNP_ID           NUMBER(10),
  ANALIT           NUMBER,
  BILL_POS         NUMBER(10),
  VID_USL_ID       NUMBER(10),
  NAME_GOST        VARCHAR2(250 BYTE),
  SF_GROTP_VIEW    NUMBER(1)                    DEFAULT 1,
  SF_POLUCH_VIEW   NUMBER(1)                    DEFAULT 1,
  SF_NDS_VIEW      NUMBER(1)                    DEFAULT 1,
  NAME_REFINERY    VARCHAR2(50 BYTE),
  AV_KART          NUMBER(6),
  RAZRESH          VARCHAR2(50 BYTE),
  AV_KART_EX       NUMBER(3),
  ISU_KOD          VARCHAR2(8 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD IS 'Справочник продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD.ID_NPR IS 'Нефтепродукт';

COMMENT ON COLUMN MASTER.KLS_PROD.ID_KIND_NPR IS 'Группа (План поставок) - VARCHAR2';

COMMENT ON COLUMN MASTER.KLS_PROD.ID_GROUP_NPR IS 'Группа - ссылка на KLS_PROD.ID_NPR';

COMMENT ON COLUMN MASTER.KLS_PROD.NAME_NPR IS 'Наименование - краткое';

COMMENT ON COLUMN MASTER.KLS_PROD.LONG_NAME_NPR IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD.ABBR_NPR IS 'Аббревиатура';

COMMENT ON COLUMN MASTER.KLS_PROD.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_PROD.FLG_ALLOWED IS '1 - может быть отгружен';

COMMENT ON COLUMN MASTER.KLS_PROD.GOST_NPR IS 'ГОСТ или ТУ';

COMMENT ON COLUMN MASTER.KLS_PROD.GD_KOD_NPR IS 'ЖД код';

COMMENT ON COLUMN MASTER.KLS_PROD.GD_NAME_NPR IS 'ЖД наименование';

COMMENT ON COLUMN MASTER.KLS_PROD.KOD_10 IS 'Код ОКП';

COMMENT ON COLUMN MASTER.KLS_PROD.KOD_OKDP IS 'Группа нефтепродуктов';

COMMENT ON COLUMN MASTER.KLS_PROD.KOD_FAS_MSK IS 'Упаковка';

COMMENT ON COLUMN MASTER.KLS_PROD.ED_IZ IS 'Ед.изм.';

COMMENT ON COLUMN MASTER.KLS_PROD.NORMOTGR IS 'Норма отгрузки';

COMMENT ON COLUMN MASTER.KLS_PROD.FASOVKA IS '1 - фасовка';

COMMENT ON COLUMN MASTER.KLS_PROD.VOL_FAS IS 'Объем фасовки';

COMMENT ON COLUMN MASTER.KLS_PROD.AKCIZ IS '1 - Подакцизный';

COMMENT ON COLUMN MASTER.KLS_PROD.PROD_NAR_ID IS 'Группа (Наряды)';

COMMENT ON COLUMN MASTER.KLS_PROD.PROD_PLAN_ID IS 'Группа (План поставок) - NUMBER';

COMMENT ON COLUMN MASTER.KLS_PROD.PROD_GU12_ID IS 'Группа (ГУ12)';

COMMENT ON COLUMN MASTER.KLS_PROD.MOS_GRP_ID IS 'Группа (Для Москвы)';

COMMENT ON COLUMN MASTER.KLS_PROD.AZC_PR_GRP_ID IS 'Группа (АЗС)';

COMMENT ON COLUMN MASTER.KLS_PROD.ID_GROUP_NPR_GD IS 'ID группы нефтепродукта (ЖД)';

COMMENT ON COLUMN MASTER.KLS_PROD.AVG_FACT_PL IS 'Средневзвешенная фактическая плотность';

COMMENT ON COLUMN MASTER.KLS_PROD.SF_NAME IS 'Название для СФ';

COMMENT ON COLUMN MASTER.KLS_PROD.KSSS_PROD_ID IS 'Код КССС';

COMMENT ON COLUMN MASTER.KLS_PROD.MATNR IS 'Код SAP';

COMMENT ON COLUMN MASTER.KLS_PROD.UNP_ID IS 'Код УНП';

COMMENT ON COLUMN MASTER.KLS_PROD.BILL_POS IS 'N позиции в BILL_POS';

COMMENT ON COLUMN MASTER.KLS_PROD.VID_USL_ID IS 'Вид услуги';

COMMENT ON COLUMN MASTER.KLS_PROD.SF_GROTP_VIEW IS 'Отображать наименование грузоотправителя в СФ';

COMMENT ON COLUMN MASTER.KLS_PROD.SF_POLUCH_VIEW IS 'Отображать получателя в СФ';

COMMENT ON COLUMN MASTER.KLS_PROD.SF_NDS_VIEW IS 'Отображать НДС в СФ';

COMMENT ON COLUMN MASTER.KLS_PROD.NAME_REFINERY IS 'Наименование заводское';

COMMENT ON COLUMN MASTER.KLS_PROD.AV_KART IS 'Аварийная  карта';

COMMENT ON COLUMN MASTER.KLS_PROD.AV_KART_EX IS 'Аварийная карта на экспорт';



--
-- KLS_PROD_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_PROD_KONS
(
  ID            VARCHAR2(21 BYTE)               NOT NULL,
  NAME          VARCHAR2(50 BYTE),
  PROD_KONS_ID  VARCHAR2(21 BYTE),
  UPAK_ID       NUMBER(10),
  DOP_ID        VARCHAR2(2 BYTE),
  FLAG_FAS      NUMBER(1)                       DEFAULT 0,
  KOEF_KG       NUMBER(12,4)                    DEFAULT 0,
  KOEF_LIT      NUMBER(12,4)                    DEFAULT 0,
  GR_KONS_ID    VARCHAR2(12 BYTE),
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  TIP_AKCIZ_ID  NUMBER(10),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  P_YEAR        VARCHAR2(2 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PROD_KONS IS 'Конс.отчетность: Справочник продуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.ID IS 'Продукт (конс.отчетность)';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.PROD_KONS_ID IS 'Основной код продукта';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.UPAK_ID IS 'Упаковка';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.DOP_ID IS 'Дополнительный код';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.FLAG_FAS IS '1 - Фасовка';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.KOEF_KG IS 'Коэф. перевода в кг';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.KOEF_LIT IS 'Коэф. перевода в литры';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.GR_KONS_ID IS 'Группа нефтепродуктов';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.TIP_AKCIZ_ID IS 'Тип акциза';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.IS_AUTO_LINK IS 'Автоматическая привязка';

COMMENT ON COLUMN MASTER.KLS_PROD_KONS.P_YEAR IS 'Год ввода';



--
-- KLS_REGION  (Table) 
--
CREATE TABLE MASTER.KLS_REGION
(
  ID             NUMBER(3)                      NOT NULL,
  REGION_NAME    VARCHAR2(30 BYTE),
  OKATO          VARCHAR2(3 BYTE),
  KOD_MOSCOW     VARCHAR2(3 BYTE),
  SHORT_NAME     VARCHAR2(15 BYTE),
  KOD_STATISTIC  VARCHAR2(5 BYTE),
  STATES_ID      NUMBER(3),
  KSSS_ID        NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_STAN  (Table) 
--
CREATE TABLE MASTER.KLS_STAN
(
  STAN_KOD      NUMBER(6),
  ID            NUMBER(10)                      NOT NULL,
  STAN_NAME     VARCHAR2(50 BYTE),
  AREN_DAYS     NUMBER(3),
  RAST          NUMBER(5),
  REGION_ID     NUMBER(3),
  GDOR_ID       NUMBER(2),
  OTDELENIE     VARCHAR2(2 BYTE),
  STATES_ID     NUMBER(10),
  KSSS_STAN_ID  NUMBER,
  ISU_KOD       VARCHAR2(7 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OIL_PLAN  (Table) 
--
CREATE TABLE MASTER.OIL_PLAN
(
  KOD          NUMBER                           NOT NULL,
  SOBSTVEN     NUMBER,
  POSTAV       NUMBER,
  PER          NUMBER,
  MESTOR       NUMBER,
  DATAPLAN     DATE,
  OSTATKI      NUMBER                           DEFAULT 0,
  OSTMRT       NUMBER                           DEFAULT 0,
  OSTMRTK      NUMBER                           DEFAULT 0,
  PLAN         NUMBER                           DEFAULT 0,
  PLANPERER    NUMBER                           DEFAULT 0,
  POBR         NUMBER                           DEFAULT 0,
  PEROBR       NUMBER                           DEFAULT 0,
  ID_PROD_NPR  VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OIL_RESURS  (Table) 
--
CREATE TABLE MASTER.OIL_RESURS
(
  KOD        NUMBER                             NOT NULL,
  KOD_PLAN   NUMBER,
  DATARES    DATE,
  MPOR       NUMBER,
  POSTAV     NUMBER,
  MESTOR     NUMBER,
  PROIZ      NUMBER,
  GRUP       NUMBER,
  PASPORT    NUMBER,
  OSTAT      NUMBER                             DEFAULT 0,
  POST       NUMBER                             DEFAULT 0,
  POSTPLAN   NUMBER                             DEFAULT 0,
  PERER      NUMBER                             DEFAULT 0,
  PERERPLAN  NUMBER                             DEFAULT 0,
  AKT        VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- OSTAT_VYRAB  (Table) 
--
CREATE TABLE MASTER.OSTAT_VYRAB
(
  D_PLAN       DATE,
  QUANTITY     NUMBER,
  D_MAN        DATE,
  IS_HRAN      NUMBER,
  ID           NUMBER,
  ID_PROD_NPR  VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REPL_ANSW_IN  (Table) 
--
CREATE TABLE MASTER.REPL_ANSW_IN
(
  REPL_ID     NUMBER(17)                        NOT NULL,
  REPL_LIST   NUMBER(10),
  SRC_SITE    NUMBER(10),
  DST_SITE    NUMBER(10),
  REPL_ANSW   DATE,
  REPLSTATUS  NUMBER(1)                         DEFAULT 0,
  REPL_ERROR  VARCHAR2(100 BYTE),
  OSUSER      VARCHAR2(30 BYTE),
  FILE_TYPE   NUMBER(10),
  REPL_SQL1   VARCHAR2(250 BYTE),
  REPL_SQL2   VARCHAR2(250 BYTE),
  REPL_SQL3   VARCHAR2(250 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_ANSW_IN IS 'Таблица входящих ответов';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_ID IS 'Запись в репликационной таблице';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_LIST IS 'Репликация';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.SRC_SITE IS 'Узел-источник';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.DST_SITE IS 'Узел-назначение';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_ANSW IS 'Дата ответа';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPLSTATUS IS 'Статус';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_ERROR IS 'Ошибка';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.OSUSER IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.FILE_TYPE IS 'Тип транспортного файла';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_SQL1 IS 'Ответный запрос';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_SQL2 IS 'Ответный запрос';

COMMENT ON COLUMN MASTER.REPL_ANSW_IN.REPL_SQL3 IS 'Ответный запрос';



--
-- REPL_ANSW_OUT  (Table) 
--
CREATE TABLE MASTER.REPL_ANSW_OUT
(
  REPL_ID     NUMBER(17)                        NOT NULL,
  REPL_LIST   NUMBER(10),
  SRC_SITE    NUMBER(10),
  DST_SITE    NUMBER(10),
  REPL_ANSW   DATE,
  REPLSTATUS  NUMBER(1)                         DEFAULT 0,
  REPL_ERROR  VARCHAR2(100 BYTE),
  OSUSER      VARCHAR2(30 BYTE),
  FILE_TYPE   NUMBER(10),
  REPL_SQL1   VARCHAR2(250 BYTE),
  REPL_SQL2   VARCHAR2(250 BYTE),
  REPL_SQL3   VARCHAR2(250 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_ANSW_OUT IS 'Таблица исходящих ответов';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_ID IS 'Запись в репликационной таблице';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_LIST IS 'Репликация';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.SRC_SITE IS 'Узел-источник';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.DST_SITE IS 'Узел-назначение';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_ANSW IS 'Дата ответа';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPLSTATUS IS 'Статус';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_ERROR IS 'Ошибка';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.OSUSER IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.FILE_TYPE IS 'Тип транспортного файла';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_SQL1 IS 'Ответный запрос';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_SQL2 IS 'Ответный запрос';

COMMENT ON COLUMN MASTER.REPL_ANSW_OUT.REPL_SQL3 IS 'Ответный запрос';



--
-- REPL_CALL_IN  (Table) 
--
CREATE TABLE MASTER.REPL_CALL_IN
(
  REPL_ID    NUMBER(17)                         NOT NULL,
  REPL_LIST  NUMBER(10),
  SRC_SITE   NUMBER(10),
  DST_SITE   NUMBER(10),
  REPL_DATE  DATE,
  REPL_SQL1  VARCHAR2(250 BYTE),
  REPL_SQL2  VARCHAR2(250 BYTE),
  REPL_SQL3  VARCHAR2(250 BYTE),
  OSUSER     VARCHAR2(30 BYTE),
  FILE_TYPE  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_CALL_IN IS 'Таблица входящих запросов';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.REPL_ID IS 'Запись в репликационной таблице';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.REPL_LIST IS 'Репликация';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.SRC_SITE IS 'Узел-источник';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.DST_SITE IS 'Узел-назначение';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.REPL_DATE IS 'Дата изменения';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.REPL_SQL1 IS 'Запрос';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.REPL_SQL2 IS 'Запрос';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.REPL_SQL3 IS 'Запрос';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.OSUSER IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPL_CALL_IN.FILE_TYPE IS 'Тип транспортного файла';



--
-- REPL_CALL_OUT  (Table) 
--
CREATE TABLE MASTER.REPL_CALL_OUT
(
  REPL_ID    NUMBER(17)                         NOT NULL,
  REPL_LIST  NUMBER(10),
  SRC_SITE   NUMBER(10),
  DST_SITE   NUMBER(10),
  REPL_DATE  DATE,
  REPL_SQL1  VARCHAR2(250 BYTE),
  REPL_SQL2  VARCHAR2(250 BYTE),
  REPL_SQL3  VARCHAR2(250 BYTE),
  OSUSER     VARCHAR2(30 BYTE),
  FILE_TYPE  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_CALL_OUT IS 'Таблица исходящих запросов';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.REPL_ID IS 'Запись в репликационной таблице';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.REPL_LIST IS 'Репликация';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.SRC_SITE IS 'Узел-источник';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.DST_SITE IS 'Узел-назначение';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.REPL_DATE IS 'Дата изменения';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.REPL_SQL1 IS 'Запрос';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.REPL_SQL2 IS 'Запрос';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.REPL_SQL3 IS 'Запрос';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.OSUSER IS 'Пользователь';

COMMENT ON COLUMN MASTER.REPL_CALL_OUT.FILE_TYPE IS 'Тип транспортного файла';



--
-- REPL_CONFIG  (Table) 
--
CREATE TABLE MASTER.REPL_CONFIG
(
  REPL_SITE           NUMBER(10)                NOT NULL,
  REPL_AUTO_OSUSER    VARCHAR2(30 BYTE),
  REPL_AUTO_TERMINAL  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_CONFIG IS 'Конфигурация текущего узла';

COMMENT ON COLUMN MASTER.REPL_CONFIG.REPL_SITE IS 'Текущий узел';

COMMENT ON COLUMN MASTER.REPL_CONFIG.REPL_AUTO_OSUSER IS ' Пользователь, под которым запускается репликация (автомат)';

COMMENT ON COLUMN MASTER.REPL_CONFIG.REPL_AUTO_TERMINAL IS 'Терминал, под которым запускается репликация (автомат)';



--
-- REPL_LIST  (Table) 
--
CREATE TABLE MASTER.REPL_LIST
(
  ID              NUMBER(10)                    NOT NULL,
  NAME            VARCHAR2(50 BYTE),
  TAG             VARCHAR2(20 BYTE),
  REPL_KIND       NUMBER(10)                    DEFAULT 1,
  SRC_SITE        NUMBER(10),
  SRC_INFO_T      NUMBER(10)                    DEFAULT NULL,
  SRC_SCHEM       VARCHAR2(150 BYTE),
  SRC_TABLE       VARCHAR2(50 BYTE),
  SRC_FIELDS      VARCHAR2(1000 BYTE),
  SRC_WHERE       VARCHAR2(250 BYTE),
  SRC_QUERY       VARCHAR2(4000 BYTE),
  DST_SITE        NUMBER(10),
  DST_SCHEM       VARCHAR2(150 BYTE),
  DST_TABLE       VARCHAR2(50 BYTE),
  DST_FIELDS      VARCHAR2(1000 BYTE),
  DST_UNIQ        VARCHAR2(100 BYTE),
  SP_TYPE_BF      NUMBER(10)                    DEFAULT 0,
  SP_NAME_BF      VARCHAR2(250 BYTE),
  SP_TYPE_AF      NUMBER(10)                    DEFAULT 0,
  SP_NAME_AF      VARCHAR2(250 BYTE),
  COMPUTE_ST      VARCHAR2(100 BYTE),
  DATE_FIELD      VARCHAR2(10 BYTE),
  DATE_BEG        VARCHAR2(10 BYTE),
  DATE_END        VARCHAR2(10 BYTE),
  LASTDATE        DATE,
  LASTTIME        VARCHAR2(8 BYTE),
  LASTSIZE        NUMBER(14),
  PARAM1          VARCHAR2(30 BYTE),
  PARAM2          VARCHAR2(30 BYTE),
  PARAM3          VARCHAR2(30 BYTE),
  CHECK_MODE      NUMBER(10)                    DEFAULT 2,
  FLAG_IS         VARCHAR2(20 BYTE),
  STAT_SCHEM      VARCHAR2(150 BYTE),
  STAT_TABLE      VARCHAR2(50 BYTE),
  STAT_QUERY      VARCHAR2(4000 BYTE),
  REPL_SCHEM      VARCHAR2(50 BYTE),
  REPL_TABLE      VARCHAR2(50 BYTE),
  F_APPL_TAG      NUMBER(1)                     DEFAULT 0,
  F_CONFIRM       NUMBER(1)                     DEFAULT 0,
  FILE_TYPE_O     NUMBER(10),
  FILE_TYPE_I     NUMBER(10),
  IS_ACTIVE       NUMBER(1)                     DEFAULT 0,
  IS_TRACKING     NUMBER(1)                     DEFAULT 0,
  TRACKING_ORDER  NUMBER(10)                    DEFAULT 1,
  EXECDATE        DATE,
  EXECTIME        VARCHAR2(8 BYTE),
  EXECSTATUS      NUMBER(2),
  SP_SITE_BF      NUMBER(10),
  SP_SITE_AF      NUMBER(10),
  DST_DATE        VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REPL_LIST IS 'Список репликаций';

COMMENT ON COLUMN MASTER.REPL_LIST.ID IS 'Репликация';

COMMENT ON COLUMN MASTER.REPL_LIST.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.REPL_LIST.TAG IS 'ТАГ';

COMMENT ON COLUMN MASTER.REPL_LIST.REPL_KIND IS 'Вид репликации';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_SITE IS 'Узел-источник';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_INFO_T IS 'Тип источника';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_SCHEM IS 'Схема';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_TABLE IS 'Таблица-источник';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_FIELDS IS 'Список полей';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_WHERE IS 'Дополнительное условие';

COMMENT ON COLUMN MASTER.REPL_LIST.SRC_QUERY IS 'Запрос-источник';

COMMENT ON COLUMN MASTER.REPL_LIST.DST_SITE IS 'Узел-назначение';

COMMENT ON COLUMN MASTER.REPL_LIST.DST_SCHEM IS 'Схема';

COMMENT ON COLUMN MASTER.REPL_LIST.DST_TABLE IS 'Таблица-назначение';

COMMENT ON COLUMN MASTER.REPL_LIST.DST_FIELDS IS 'Список полей';

COMMENT ON COLUMN MASTER.REPL_LIST.DST_UNIQ IS 'Уникальный ключ (через запятую)';

COMMENT ON COLUMN MASTER.REPL_LIST.SP_TYPE_BF IS 'Тип процедуры обработки (ДО)';

COMMENT ON COLUMN MASTER.REPL_LIST.SP_NAME_BF IS 'Процедура обработки (ДО)';

COMMENT ON COLUMN MASTER.REPL_LIST.SP_TYPE_AF IS 'Тип процедуры обработки (ПОСЛЕ)';

COMMENT ON COLUMN MASTER.REPL_LIST.SP_NAME_AF IS 'Процедура обработки (ПОСЛЕ)';

COMMENT ON COLUMN MASTER.REPL_LIST.COMPUTE_ST IS 'Список таблиц Oracle, по которым необходимо собрать статистику';

COMMENT ON COLUMN MASTER.REPL_LIST.DATE_FIELD IS 'Поле ДАТА в запросе-источнике';

COMMENT ON COLUMN MASTER.REPL_LIST.DATE_BEG IS 'Временной интервал: с даты';

COMMENT ON COLUMN MASTER.REPL_LIST.DATE_END IS 'Временной интервал: по дату';

COMMENT ON COLUMN MASTER.REPL_LIST.LASTDATE IS 'Дата последнего изменения (для DBF)';

COMMENT ON COLUMN MASTER.REPL_LIST.LASTTIME IS 'Время последнего изменения (для DBF)';

COMMENT ON COLUMN MASTER.REPL_LIST.LASTSIZE IS 'Последний размер (для DBF)';

COMMENT ON COLUMN MASTER.REPL_LIST.PARAM1 IS 'Параметр для передачи в процедуру';

COMMENT ON COLUMN MASTER.REPL_LIST.PARAM2 IS 'Параметр для передачи в процедуру';

COMMENT ON COLUMN MASTER.REPL_LIST.PARAM3 IS 'Параметр для передачи в процедуру';

COMMENT ON COLUMN MASTER.REPL_LIST.CHECK_MODE IS 'Режим проверки необходимости запуска';

COMMENT ON COLUMN MASTER.REPL_LIST.FLAG_IS IS 'Флаг запуска репликации';

COMMENT ON COLUMN MASTER.REPL_LIST.STAT_SCHEM IS 'Схема';

COMMENT ON COLUMN MASTER.REPL_LIST.STAT_TABLE IS 'Таблица статусов';

COMMENT ON COLUMN MASTER.REPL_LIST.STAT_QUERY IS 'Команда обновления статуса';

COMMENT ON COLUMN MASTER.REPL_LIST.REPL_SCHEM IS 'Схема расположения репликационной таблицы';

COMMENT ON COLUMN MASTER.REPL_LIST.REPL_TABLE IS 'Репликационная таблица';

COMMENT ON COLUMN MASTER.REPL_LIST.F_APPL_TAG IS 'Флаг использования поля APPL_TAG';

COMMENT ON COLUMN MASTER.REPL_LIST.F_CONFIRM IS 'Флаг подтверждения репликации';

COMMENT ON COLUMN MASTER.REPL_LIST.FILE_TYPE_O IS 'Исходящий транспортный файл';

COMMENT ON COLUMN MASTER.REPL_LIST.FILE_TYPE_I IS 'Входящий транспортный файл';

COMMENT ON COLUMN MASTER.REPL_LIST.IS_ACTIVE IS 'Активная репликация';

COMMENT ON COLUMN MASTER.REPL_LIST.IS_TRACKING IS 'Участвует в автоматическом опросе';

COMMENT ON COLUMN MASTER.REPL_LIST.TRACKING_ORDER IS 'Порядок опроса';

COMMENT ON COLUMN MASTER.REPL_LIST.EXECDATE IS 'Дата последнего запуска репликации';

COMMENT ON COLUMN MASTER.REPL_LIST.EXECTIME IS 'Время последнего запуска репликации';

COMMENT ON COLUMN MASTER.REPL_LIST.EXECSTATUS IS 'Статус последнего запуска репликации';

COMMENT ON COLUMN MASTER.REPL_LIST.SP_SITE_BF IS 'Узел для вызова процедуры (ДО)';

COMMENT ON COLUMN MASTER.REPL_LIST.SP_SITE_AF IS 'Узел для вызова процедуры (ПОСЛЕ)';

COMMENT ON COLUMN MASTER.REPL_LIST.DST_DATE IS 'Поле "Дата" в таблице-назначении';



--
-- R3_MATERIALS  (Table) 
--
CREATE TABLE MASTER.R3_MATERIALS
(
  VBAP_MATNR    VARCHAR2(10 BYTE)               NOT NULL,
  MAKTX         VARCHAR2(100 BYTE),
  ATWRT_OKP     VARCHAR2(15 BYTE),
  ATWRT_TU      VARCHAR2(50 BYTE),
  ATWRT_GOST    VARCHAR2(50 BYTE),
  PROD_SIGN     VARCHAR2(2 BYTE),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  GROUP_S       VARCHAR2(2 BYTE),
  ZZZZ_STATUS   VARCHAR2(1 BYTE),
  ZZZZ_FILE     VARCHAR2(50 BYTE),
  ZZZZ_DATE     DATE,
  BEGIN_DATE    DATE,
  END_DATE      DATE,
  ED_IZM        VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_MATERIALS.VBAP_MATNR IS 'Материал';

COMMENT ON COLUMN MASTER.R3_MATERIALS.MAKTX IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ATWRT_OKP IS 'Код ОКП';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ATWRT_TU IS 'ТУ';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ATWRT_GOST IS 'ГОСТ';

COMMENT ON COLUMN MASTER.R3_MATERIALS.PROD_SIGN IS 'Помоему признак  фасовки';

COMMENT ON COLUMN MASTER.R3_MATERIALS.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.R3_MATERIALS.GROUP_S IS 'Группа материалов';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ZZZZ_STATUS IS 'Статус прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ZZZZ_DATE IS 'Дата прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_MATERIALS.ED_IZM IS 'Единица измерения';



--
-- SVED  (Table) 
--
CREATE TABLE MASTER.SVED
(
  ID              VARCHAR2(9 BYTE)              NOT NULL,
  FLG_OPERDATA    NUMBER(1)                     DEFAULT 1                     NOT NULL,
  SVED_NUM        NUMBER(10),
  SVED_DATE       DATE,
  SVED_VES        NUMBER(15,6)                  DEFAULT 0,
  SVED_CNT        NUMBER(5)                     DEFAULT 0,
  GOTOV_TIME      DATE,
  BEG_NALIV_TIME  DATE,
  END_NALIV_TIME  DATE,
  DATE_OFORML     DATE,
  NARIAD_ID       NUMBER(10),
  PASP_ID         VARCHAR2(9 BYTE),
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  MESTO_ID        NUMBER(10),
  DATE_EDIT       DATE,
  NOM_ZD          VARCHAR2(12 BYTE),
  LOAD_TYPE_ID    NUMBER(10),
  TECH_TIME       DATE,
  PASP_NUM        VARCHAR2(15 BYTE),
  REZ_NUM         VARCHAR2(15 BYTE),
  VES_CIST        NUMBER(12,3)                  DEFAULT 0,
  KOL_NET         NUMBER(14,5)                  DEFAULT 0,
  VES_ALL         NUMBER(12,3)                  DEFAULT 0,
  FROM_DBF        NUMBER(1)                     DEFAULT 0,
  DEFI_MASS_ID    NUMBER(10),
  CENA            NUMBER(10,2),
  CENA_OTP        NUMBER(10,2),
  DATE_CENA       DATE,
  PASP_DATE       DATE,
  POD_DATE        DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.SVED IS 'Сведение об отгрузке/наливе';

COMMENT ON COLUMN MASTER.SVED.ID IS 'ID сведения';

COMMENT ON COLUMN MASTER.SVED.FLG_OPERDATA IS 'Признак оперативной отгрузки';

COMMENT ON COLUMN MASTER.SVED.SVED_NUM IS '№ сведения';

COMMENT ON COLUMN MASTER.SVED.SVED_DATE IS 'Дата сведения';

COMMENT ON COLUMN MASTER.SVED.SVED_VES IS 'Чистый вес';

COMMENT ON COLUMN MASTER.SVED.SVED_CNT IS 'Кол-во';

COMMENT ON COLUMN MASTER.SVED.GOTOV_TIME IS 'Комерческая годность';

COMMENT ON COLUMN MASTER.SVED.BEG_NALIV_TIME IS 'Начало погрузки';

COMMENT ON COLUMN MASTER.SVED.END_NALIV_TIME IS 'Окончание погрузки';

COMMENT ON COLUMN MASTER.SVED.DATE_OFORML IS 'Окончание оформления';

COMMENT ON COLUMN MASTER.SVED.NARIAD_ID IS 'Наряд/разрешение';

COMMENT ON COLUMN MASTER.SVED.PASP_ID IS 'Паспорт';

COMMENT ON COLUMN MASTER.SVED.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.SVED.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.SVED.DATE_EDIT IS 'Последняя дата редактирования';

COMMENT ON COLUMN MASTER.SVED.NOM_ZD IS 'Заявка';

COMMENT ON COLUMN MASTER.SVED.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.SVED.TECH_TIME IS 'Техническая годность';

COMMENT ON COLUMN MASTER.SVED.PASP_NUM IS '№ паспорта';

COMMENT ON COLUMN MASTER.SVED.REZ_NUM IS '№ резервуара';

COMMENT ON COLUMN MASTER.SVED.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.SVED.KOL_NET IS 'Вес НЕТТО (нефти)';

COMMENT ON COLUMN MASTER.SVED.VES_ALL IS 'Вес вагона и упаковки';

COMMENT ON COLUMN MASTER.SVED.FROM_DBF IS 'Признак загрузки из DBF';

COMMENT ON COLUMN MASTER.SVED.DEFI_MASS_ID IS 'Метод определения веса';

COMMENT ON COLUMN MASTER.SVED.CENA IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.SVED.CENA_OTP IS 'Цена отпускная';

COMMENT ON COLUMN MASTER.SVED.DATE_CENA IS 'Дата начала действия цены';

COMMENT ON COLUMN MASTER.SVED.PASP_DATE IS 'Дата паспорта';

COMMENT ON COLUMN MASTER.SVED.POD_DATE IS 'Дата/время подачи';



--
-- EUL_BP_BP1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BP_BP1_UK ON MASTER.EUL_BATCH_PARAMS
(BP_BS_ID, BP_NAME)
TABLESPACE USERSINDX;


--
-- EUL_BP_BS_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BP_BS_FK_I ON MASTER.EUL_BATCH_PARAMS
(BP_BS_ID)
TABLESPACE USERSINDX;


--
-- EUL_BP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BP_PK ON MASTER.EUL_BATCH_PARAMS
(BP_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQ_BQ1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQ_BQ1_UK ON MASTER.EUL_BATCH_QUERIES
(BQ_BS_ID, BQ_QUERY_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQ_BS_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BQ_BS_FK_I ON MASTER.EUL_BATCH_QUERIES
(BQ_BS_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQ_PK ON MASTER.EUL_BATCH_QUERIES
(BQ_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQT_BQ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BQT_BQ_FK_I ON MASTER.EUL_BQ_TABLES
(BQT_BQ_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQT_BQT2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQT_BQT2_UK ON MASTER.EUL_BQ_TABLES
(BQT_TABLE_NAME)
TABLESPACE USERSINDX;


--
-- EUL_BQT_BQT3_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQT_BQT3_UK ON MASTER.EUL_BQ_TABLES
(BQT_BQ_ID, BQT_BRR_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQT_BRR_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BQT_BRR_FK_I ON MASTER.EUL_BQ_TABLES
(BQT_BRR_ID)
TABLESPACE USERSINDX;


--
-- EUL_BQT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQT_PK ON MASTER.EUL_BQ_TABLES
(BQT_ID)
TABLESPACE USERSINDX;


--
-- EUL_JJL_FK_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_JJL_FK_FK_I ON MASTER.EUL_JC_JOIN_LINKS
(JJL_KEY_ID)
TABLESPACE USERSINDX;


--
-- EUL_JJL_JC_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_JJL_JC_FK_I ON MASTER.EUL_JC_JOIN_LINKS
(JJL_JC_ID)
TABLESPACE USERSINDX;


--
-- EUL_JJL_JJL1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_JJL_JJL1_UK ON MASTER.EUL_JC_JOIN_LINKS
(JJL_KEY_ID, JJL_JC_ID)
TABLESPACE USERSINDX;


--
-- EUL_JJL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_JJL_PK ON MASTER.EUL_JC_JOIN_LINKS
(JJL_ID)
TABLESPACE USERSINDX;


--
-- EUL_NJU_JC_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_NJU_JC_FK_I ON MASTER.EUL_NMSDO_JC_USGS
(NJU_JC_ID)
TABLESPACE USERSINDX;


--
-- EUL_NJU_NJU1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_NJU_NJU1_UK ON MASTER.EUL_NMSDO_JC_USGS
(NJU_JC_ID, NJU_NMSDO_ID)
TABLESPACE USERSINDX;


--
-- EUL_NJU_NMSDO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_NJU_NMSDO_FK_I ON MASTER.EUL_NMSDO_JC_USGS
(NJU_NMSDO_ID)
TABLESPACE USERSINDX;


--
-- EUL_NJU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_NJU_PK ON MASTER.EUL_NMSDO_JC_USGS
(NJU_ID)
TABLESPACE USERSINDX;


--
-- EUL_OJU_COBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OJU_COBJ_FK_I ON MASTER.EUL_OBJ_JOIN_USGS
(OJU_OBJ_ID)
TABLESPACE USERSINDX;


--
-- EUL_OJU_FK_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OJU_FK_FK_I ON MASTER.EUL_OBJ_JOIN_USGS
(OJU_KEY_ID)
TABLESPACE USERSINDX;


--
-- EUL_OJU_OJU2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OJU_OJU2_UK ON MASTER.EUL_OBJ_JOIN_USGS
(OJU_OBJ_ID, OJU_KEY_ID, OJU_SUMO_ID)
TABLESPACE USERSINDX;


--
-- EUL_OJU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OJU_PK ON MASTER.EUL_OBJ_JOIN_USGS
(OJU_ID)
TABLESPACE USERSINDX;


--
-- EUL_OJU_SUMO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OJU_SUMO_FK_I ON MASTER.EUL_OBJ_JOIN_USGS
(OJU_SUMO_ID)
TABLESPACE USERSINDX;


--
-- ID  (Index) 
--
CREATE UNIQUE INDEX MASTER.ID ON MASTER.KLS_PROD
(ID)
TABLESPACE USERSINDX;


--
-- ID_GROUP_NPR  (Index) 
--
CREATE INDEX MASTER.ID_GROUP_NPR ON MASTER.KLS_PROD
(ID_GROUP_NPR)
TABLESPACE USERSINDX;


--
-- ID_KIND_NPR  (Index) 
--
CREATE INDEX MASTER.ID_KIND_NPR ON MASTER.KLS_PROD
(ID_KIND_NPR)
TABLESPACE USERSINDX;


--
-- KLS_REGION_KOD_MOSCOW  (Index) 
--
CREATE INDEX MASTER.KLS_REGION_KOD_MOSCOW ON MASTER.KLS_REGION
(KOD_MOSCOW)
TABLESPACE USERSINDX;


--
-- KLS_STAN_KSSS_I  (Index) 
--
CREATE INDEX MASTER.KLS_STAN_KSSS_I ON MASTER.KLS_STAN
(KSSS_STAN_ID)
TABLESPACE USERS;


--
-- KLS_STAN_STAN_KOD_I  (Index) 
--
CREATE INDEX MASTER.KLS_STAN_STAN_KOD_I ON MASTER.KLS_STAN
(STAN_KOD)
TABLESPACE USERSINDX;


--
-- KLS_STAN_STAN_NAME_I  (Index) 
--
CREATE INDEX MASTER.KLS_STAN_STAN_NAME_I ON MASTER.KLS_STAN
(STAN_NAME)
TABLESPACE USERSINDX;


--
-- MATERIALS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MATERIALS_PK ON MASTER.R3_MATERIALS
(VBAP_MATNR)
TABLESPACE USERSINDX;


--
-- MATERIALS_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.MATERIALS_PROD_FK_I ON MASTER.R3_MATERIALS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- MATERIALS_R3_MAT_GRP_FK_I  (Index) 
--
CREATE INDEX MASTER.MATERIALS_R3_MAT_GRP_FK_I ON MASTER.R3_MATERIALS
(GROUP_S)
TABLESPACE USERSINDX;


--
-- OIL_PLAN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_PLAN_PK ON MASTER.OIL_PLAN
(KOD)
TABLESPACE USERSINDX;


--
-- OIL_RESURS_MAIN  (Index) 
--
CREATE INDEX MASTER.OIL_RESURS_MAIN ON MASTER.OIL_RESURS
(KOD_PLAN, DATARES)
TABLESPACE USERSINDX;


--
-- OIL_RESURS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OIL_RESURS_PK ON MASTER.OIL_RESURS
(KOD)
TABLESPACE USERSINDX;


--
-- OSTAT_VYRAB_I_ID_PROD_NPR  (Index) 
--
CREATE INDEX MASTER.OSTAT_VYRAB_I_ID_PROD_NPR ON MASTER.OSTAT_VYRAB
(ID_PROD_NPR)
TABLESPACE USERSINDX;


--
-- PROD_AZC_PR_GRP_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_AZC_PR_GRP_FK_I ON MASTER.KLS_PROD
(AZC_PR_GRP_ID)
TABLESPACE USERSINDX;


--
-- PROD_KONS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_KONS_PK ON MASTER.KLS_PROD_KONS
(ID)
TABLESPACE USERSINDX;


--
-- PROD_KONS_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_KONS_PROD_FK_I ON MASTER.KLS_PROD_KONS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PROD_KONS_PROD_GR_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_KONS_PROD_GR_FK_I ON MASTER.KLS_PROD_KONS
(GR_KONS_ID)
TABLESPACE USERSINDX;


--
-- PROD_KONS_PROD_KONS_AK_UK  (Index) 
--
CREATE INDEX MASTER.PROD_KONS_PROD_KONS_AK_UK ON MASTER.KLS_PROD_KONS
(PROD_KONS_ID, UPAK_ID, DOP_ID, P_YEAR)
TABLESPACE USERSINDX;


--
-- PROD_KONS_TIP_AKCIZ_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_KONS_TIP_AKCIZ_FK_I ON MASTER.KLS_PROD_KONS
(TIP_AKCIZ_ID)
TABLESPACE USERSINDX;


--
-- PROD_KONS_UPAK_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_KONS_UPAK_FK_I ON MASTER.KLS_PROD_KONS
(UPAK_ID)
TABLESPACE USERSINDX;


--
-- PROD_MOS_GRP_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_MOS_GRP_FK_I ON MASTER.KLS_PROD
(MOS_GRP_ID)
TABLESPACE USERSINDX;


--
-- PROD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD_PK ON MASTER.KLS_PROD
(ID_NPR)
TABLESPACE USERSINDX;


--
-- PROD_PROD_GR_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_PROD_GR_FK_I ON MASTER.KLS_PROD
(KOD_OKDP)
TABLESPACE USERSINDX;


--
-- PROD_PROD_GU12_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_PROD_GU12_FK_I ON MASTER.KLS_PROD
(PROD_GU12_ID)
TABLESPACE USERSINDX;


--
-- PROD_PROD_NAR_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_PROD_NAR_FK_I ON MASTER.KLS_PROD
(PROD_NAR_ID)
TABLESPACE USERSINDX;


--
-- PROD_PROD_PLAN_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD_PROD_PLAN_FK_I ON MASTER.KLS_PROD
(PROD_PLAN_ID)
TABLESPACE USERSINDX;


--
-- R_ANSW_I_DST_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_I_DST_SITE_FK_I ON MASTER.REPL_ANSW_IN
(DST_SITE)
TABLESPACE USERSINDX;


--
-- R_ANSW_I_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_ANSW_I_PK ON MASTER.REPL_ANSW_IN
(REPL_ID)
TABLESPACE USERSINDX;


--
-- R_ANSW_I_R_FILETYP_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_I_R_FILETYP_FK_I ON MASTER.REPL_ANSW_IN
(FILE_TYPE)
TABLESPACE USERSINDX;


--
-- R_ANSW_I_R_LIST_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_I_R_LIST_FK_I ON MASTER.REPL_ANSW_IN
(REPL_LIST)
TABLESPACE USERSINDX;


--
-- R_ANSW_I_SRC_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_I_SRC_SITE_FK_I ON MASTER.REPL_ANSW_IN
(SRC_SITE)
TABLESPACE USERSINDX;


--
-- R_ANSW_O_DST_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_O_DST_SITE_FK_I ON MASTER.REPL_ANSW_OUT
(DST_SITE)
TABLESPACE USERSINDX;


--
-- R_ANSW_O_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_ANSW_O_PK ON MASTER.REPL_ANSW_OUT
(REPL_ID)
TABLESPACE USERSINDX;


--
-- R_ANSW_O_R_FILETYP_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_O_R_FILETYP_FK_I ON MASTER.REPL_ANSW_OUT
(FILE_TYPE)
TABLESPACE USERSINDX;


--
-- R_ANSW_O_R_LIST_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_O_R_LIST_FK_I ON MASTER.REPL_ANSW_OUT
(REPL_LIST)
TABLESPACE USERSINDX;


--
-- R_ANSW_O_SRC_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_ANSW_O_SRC_SITE_FK_I ON MASTER.REPL_ANSW_OUT
(SRC_SITE)
TABLESPACE USERSINDX;


--
-- R_CALL_I_DST_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_I_DST_SITE_FK_I ON MASTER.REPL_CALL_IN
(DST_SITE)
TABLESPACE USERSINDX;


--
-- R_CALL_I_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_CALL_I_PK ON MASTER.REPL_CALL_IN
(REPL_ID)
TABLESPACE USERSINDX;


--
-- R_CALL_I_R_FILETYP_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_I_R_FILETYP_FK_I ON MASTER.REPL_CALL_IN
(FILE_TYPE)
TABLESPACE USERSINDX;


--
-- R_CALL_I_R_LIST_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_I_R_LIST_FK_I ON MASTER.REPL_CALL_IN
(REPL_LIST)
TABLESPACE USERSINDX;


--
-- R_CALL_I_SRC_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_I_SRC_SITE_FK_I ON MASTER.REPL_CALL_IN
(SRC_SITE)
TABLESPACE USERSINDX;


--
-- R_CALL_O_DST_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_O_DST_SITE_FK_I ON MASTER.REPL_CALL_OUT
(DST_SITE)
TABLESPACE USERSINDX;


--
-- R_CALL_O_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_CALL_O_PK ON MASTER.REPL_CALL_OUT
(REPL_ID)
TABLESPACE USERSINDX;


--
-- R_CALL_O_R_FILETYP_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_O_R_FILETYP_FK_I ON MASTER.REPL_CALL_OUT
(FILE_TYPE)
TABLESPACE USERSINDX;


--
-- R_CALL_O_R_LIST_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_O_R_LIST_FK_I ON MASTER.REPL_CALL_OUT
(REPL_LIST)
TABLESPACE USERSINDX;


--
-- R_CALL_O_SRC_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CALL_O_SRC_SITE_FK_I ON MASTER.REPL_CALL_OUT
(SRC_SITE)
TABLESPACE USERSINDX;


--
-- R_CONFIG_R_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_CONFIG_R_SITE_FK_I ON MASTER.REPL_CONFIG
(REPL_SITE)
TABLESPACE USERSINDX;


--
-- REGION_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REGION_PK ON MASTER.KLS_REGION
(ID)
TABLESPACE USERSINDX;


--
-- REGION_STATES_FK_I  (Index) 
--
CREATE INDEX MASTER.REGION_STATES_FK_I ON MASTER.KLS_REGION
(STATES_ID)
TABLESPACE USERSINDX;


--
-- R_LIST_DST_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_DST_SITE_FK_I ON MASTER.REPL_LIST
(DST_SITE)
TABLESPACE USERSINDX;


--
-- R_LIST_FILE_TYPE_I_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_FILE_TYPE_I_FK_I ON MASTER.REPL_LIST
(FILE_TYPE_I)
TABLESPACE USERSINDX;


--
-- R_LIST_FILE_TYPE_O_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_FILE_TYPE_O_FK_I ON MASTER.REPL_LIST
(FILE_TYPE_O)
TABLESPACE USERSINDX;


--
-- R_LIST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_LIST_PK ON MASTER.REPL_LIST
(ID)
TABLESPACE USERSINDX;


--
-- R_LIST_R_CHK_M_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_R_CHK_M_FK_I ON MASTER.REPL_LIST
(CHECK_MODE)
TABLESPACE USERSINDX;


--
-- R_LIST_R_INFO_T_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_R_INFO_T_FK_I ON MASTER.REPL_LIST
(SRC_INFO_T)
TABLESPACE USERSINDX;


--
-- R_LIST_R_KIND_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_R_KIND_FK_I ON MASTER.REPL_LIST
(REPL_KIND)
TABLESPACE USERSINDX;


--
-- R_LIST_R_LIST_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R_LIST_R_LIST_AK_UK ON MASTER.REPL_LIST
(TAG)
TABLESPACE USERSINDX;


--
-- R_LIST_R_P_TYPE_1_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_R_P_TYPE_1_FK_I ON MASTER.REPL_LIST
(SP_TYPE_AF)
TABLESPACE USERSINDX;


--
-- R_LIST_SP_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_SP_TYPE_FK_I ON MASTER.REPL_LIST
(SP_TYPE_BF)
TABLESPACE USERSINDX;


--
-- R_LIST_SRC_SITE_FK_I  (Index) 
--
CREATE INDEX MASTER.R_LIST_SRC_SITE_FK_I ON MASTER.REPL_LIST
(SRC_SITE)
TABLESPACE USERSINDX;


--
-- STAN_GDOR_FK_I  (Index) 
--
CREATE INDEX MASTER.STAN_GDOR_FK_I ON MASTER.KLS_STAN
(GDOR_ID)
TABLESPACE USERSINDX;


--
-- STAN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.STAN_PK ON MASTER.KLS_STAN
(ID)
TABLESPACE USERSINDX;


--
-- STAN_REGION_FK_I  (Index) 
--
CREATE INDEX MASTER.STAN_REGION_FK_I ON MASTER.KLS_STAN
(REGION_ID)
TABLESPACE USERSINDX;


--
-- SVED_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.SVED_MESTO_FK_I ON MASTER.SVED
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- SVED_NARIAD_FK_I  (Index) 
--
CREATE INDEX MASTER.SVED_NARIAD_FK_I ON MASTER.SVED
(NARIAD_ID)
TABLESPACE USERSINDX;


--
-- SVED_NOM_ZD_FK_I  (Index) 
--
CREATE INDEX MASTER.SVED_NOM_ZD_FK_I ON MASTER.SVED
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- SVED_PASP_FK_I  (Index) 
--
CREATE INDEX MASTER.SVED_PASP_FK_I ON MASTER.SVED
(PASP_ID)
TABLESPACE USERSINDX;


--
-- SVED_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SVED_PK ON MASTER.SVED
(ID, FLG_OPERDATA)
TABLESPACE USERSINDX;


--
-- SVED_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.SVED_PROD_FK_I ON MASTER.SVED
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- SVED_SVED_DATE_I  (Index) 
--
CREATE INDEX MASTER.SVED_SVED_DATE_I ON MASTER.SVED
(SVED_DATE)
TABLESPACE USERSINDX;


--
-- SVED_SVED_NUM  (Index) 
--
CREATE INDEX MASTER.SVED_SVED_NUM ON MASTER.SVED
(SVED_NUM)
TABLESPACE USERSINDX;


--
-- SVED_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SVED_UK ON MASTER.SVED
(MESTO_ID, DECODE("FROM_DBF",1,"ID"||TO_CHAR("FLG_OPERDATA"),'0'), TRUNC("SVED_DATE",'fmyyyy'), SVED_NUM)
TABLESPACE USERSINDX;


--
-- SYS_C004983  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C004983 ON MASTER.OSTAT_VYRAB
(ID)
TABLESPACE USERSINDX;


--
-- RENEW_KLS_DOVER  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Dover (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE KLS_DOVER
    SET (NUM_DOVER,DATE_DOVER,DATE_END,FIO_DOVER,DOLJ_DOVER,PREDPR_ID) =
	    (SELECT A.NUM_DOVER,A.DATE_DOVER,TO_DATE(A.DATE_END,'dd.mm.yyyy'),
		        A.FIO_DOVER,A.DOLJ_DOVER,A.KOD_PREDPR
		   FROM load_buffer.DOVER A
		  WHERE A.ID_DOVER=KLS_DOVER.id)
  WHERE IS_LOADED=1 
    AND EXISTS (SELECT load_buffer.DOVER.ID_DOVER FROM load_buffer.DOVER
                 WHERE load_buffer.DOVER.ID_DOVER=KLS_DOVER.id);

  COMMIT;

  INSERT INTO KLS_DOVER (ID,NUM_DOVER,DATE_DOVER,DATE_END,FIO_DOVER,DOLJ_DOVER,PREDPR_ID,IS_LOADED)
     (SELECT A.ID_DOVER,A.NUM_DOVER,A.DATE_DOVER,TO_DATE(A.DATE_END,'dd.mm.yyyy'),
		        A.FIO_DOVER,A.DOLJ_DOVER,A.KOD_PREDPR,1
		   FROM load_buffer.DOVER A
      WHERE NOT EXISTS (SELECT KLS_DOVER.id FROM KLS_DOVER WHERE KLS_DOVER.id=A.ID_DOVER AND IS_LOADED=1));

  COMMIT;
  
  Renew_Kls_Dov_Line (DATE_BEG,DATE_END);
  Renew_Kls_Nariad (DATE_BEG,DATE_END);

  DELETE FROM KLS_DOVER WHERE IS_LOADED=1 AND NOT EXISTS (SELECT E.ID_DOVER FROM load_buffer.DOVER E WHERE E.ID_DOVER = KLS_DOVER.ID);

  COMMIT;
END Renew_Kls_Dover;

/

--
-- RENEW_KLS_PROD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Prod (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  --- Справчоник нефтепродуктов для нарядов
  UPDATE KLS_PROD_NAR
    SET (order_npr,abbr_npr,name_npr)
	  = (SELECT NVL(nar_order,0), nar_short, NVL(nar_group,'НЕ ИСПОЛЬЗУЕТСЯ В НАРЯДАХ')
  	     FROM load_buffer.kindprod WHERE nar_order=KLS_PROD_NAR.ID
         GROUP BY nar_order, nar_order, nar_short, nar_group)
     WHERE EXISTS (SELECT nar_order FROM load_buffer.kindprod WHERE nar_order=KLS_PROD_NAR.ID
                   GROUP BY nar_order, nar_order, nar_short, nar_group);

  INSERT INTO KLS_PROD_NAR (ID,order_npr,abbr_npr,name_npr)
	(SELECT  NVL(nar_order,0), NVL(nar_order,0), nar_short, NVL(nar_group,'НЕ ИСПОЛЬЗУЕТСЯ В НАРЯДАХ') FROM load_buffer.kindprod A
      WHERE NOT EXISTS (SELECT C.ID FROM KLS_PROD_NAR C WHERE C.ID=A.nar_order)
	  GROUP BY nar_order, nar_order, nar_short, nar_group);

  UPDATE KLS_PROD_NAR
    SET (order_npr,abbr_npr,name_npr)
	  = (SELECT DISTINCT 0,'','НЕ ИСПОЛЬЗУЕТСЯ В НАРЯДАХ' FROM load_buffer.kindprod)
  WHERE ID=0;

  INSERT INTO KLS_PROD_NAR (ID,order_npr,abbr_npr,name_npr)
	(SELECT DISTINCT 0,0,'','НЕ ИСПОЛЬЗУЕТСЯ В НАРЯДАХ' FROM load_buffer.kindprod
      WHERE NOT EXISTS (SELECT * FROM KLS_PROD_NAR E WHERE E.ID=0));


  COMMIT;

  --- Справчоник плановых нефтепродуктов
  UPDATE KLS_PROD_PLAN
    SET (name_npr,abbr_npr,order_npr,flg_allowed)
	  = (SELECT MAX(pf_group), '', MAX(pg_gr_ordn), 1
  	     FROM load_buffer.kindprod WHERE pf_kod_gr IS NOT NULL AND TO_NUMBER(pf_kod_gr)+100000=KLS_PROD_PLAN.ID)
   WHERE EXISTS (SELECT kind_npr FROM load_buffer.kindprod WHERE pf_kod_gr IS NOT NULL AND TO_NUMBER(pf_kod_gr)+100000=KLS_PROD_PLAN.ID);

  INSERT INTO KLS_PROD_PLAN (ID,name_npr,abbr_npr,order_npr,flg_allowed)
	(SELECT DISTINCT TO_NUMBER(pf_kod_gr)+100000,pf_group, '', pg_gr_ordn,1 FROM load_buffer.kindprod A
      WHERE pf_kod_gr IS NOT NULL AND NOT EXISTS (SELECT C.ID FROM KLS_PROD_PLAN C WHERE C.ID=TO_NUMBER(A.pf_kod_gr)+100000));
  COMMIT;

  UPDATE KLS_PROD_PLAN
    SET (name_npr,abbr_npr,order_npr,parent_id,flg_allowed)
	  = (SELECT B.naim_pr, B.abbr, B.pf_ordnung,DECODE(B.pf_kod_gr,NULL,NULL,TO_NUMBER(B.pf_kod_gr)+100000),1
  	     FROM load_buffer.kindprod B WHERE TO_NUMBER(B.kind_npr)=KLS_PROD_PLAN.ID)
   WHERE EXISTS (SELECT kind_npr FROM load_buffer.kindprod WHERE TO_NUMBER(kind_npr)=KLS_PROD_PLAN.ID);

  INSERT INTO KLS_PROD_PLAN (ID,name_npr,abbr_npr,order_npr,parent_id,flg_allowed)
	(SELECT TO_NUMBER(B.kind_npr),B.naim_pr, B.abbr, B.pf_ordnung, DECODE(B.pf_kod_gr,NULL,NULL,TO_NUMBER(B.pf_kod_gr)+100000),1
	   FROM load_buffer.kindprod B WHERE NOT EXISTS (SELECT C.ID FROM KLS_PROD_PLAN C WHERE C.ID=TO_NUMBER(B.kind_npr)));

  COMMIT;

  --- Базовый справочник нефтепродуктов
  UPDATE KLS_PROD
    SET (id_kind_npr,id_group_npr,id_group_npr_gd,name_npr,abbr_npr,long_name_npr,gost_npr,gd_name_npr,
	  gd_kod_npr,kod_10,kod_okdp,normotgr,ed_iz,flg_allowed,dor_nalog,akciz,fasovka,
	  vol_fas,kod_fas_msk,ID,prod_nar_id,prod_plan_id,PROD_GU12_ID, MOS_GRP_ID,SF_NAME, NAME_GOST,ksss_prod_id)
	  = (SELECT A.kind_npr,A.kod_gr,A.GD_KODGR,A.naim_pr,A.abbr,A.NAME ||A.name1,A.gost,A.name_gd || A.name_gd1 || A.name_gd2 || A.name_gd3,
	       A.kod_gd,A.kod_10,A.k_okdp,A.normotgr,A.ed_iz,IIF(a.dostup,1,0),A.dor_nalog,Iif(A.akciz,1,0),Iif(A.fasovka,1,0),
           A.vol_fas,A.kod_fas,A.ID,NVL(B.nar_order,0),TO_NUMBER(A.KIND_NPR),A.KOD_GU12,A.KOD_10_GRP,A.SF_NAME,A.NAME_GOST,a.kod_ksss
  	     FROM load_buffer.prod A,load_buffer.kindprod B WHERE A.kod=KLS_PROD.id_npr AND A.kind_npr=B.kind_npr(+))
    WHERE EXISTS (SELECT A.kod FROM load_buffer.prod A WHERE A.kod=KLS_PROD.id_npr);

  INSERT INTO KLS_PROD (id_npr,id_kind_npr,id_group_npr,id_group_npr_gd,name_npr,abbr_npr,long_name_npr,gost_npr,gd_name_npr,
                        gd_kod_npr,kod_10,kod_okdp,normotgr,ed_iz,flg_allowed,dor_nalog,akciz,fasovka,
                        vol_fas,kod_fas_msk,ID,prod_nar_id,prod_plan_id,PROD_GU12_ID, MOS_GRP_ID,SF_NAME,NAME_GOST,ksss_prod_id)
	(SELECT  A.kod,A.kind_npr,A.kod_gr,A.GD_KODGR,A.naim_pr,A.abbr,A.NAME || A.name1,A.gost,A.name_gd || A.name_gd1 || A.name_gd2 || A.name_gd3,A.kod_gd,
	         A.kod_10,A.k_okdp,A.normotgr,A.ed_iz,IIF(a.dostup,1,0),A.dor_nalog,Iif(A.akciz,1,0),Iif(A.fasovka,1,0),
			 A.vol_fas,A.kod_fas,A.ID,NVL(B.nar_order,0),TO_NUMBER(A.KIND_NPR),A.KOD_GU12,A.KOD_10_GRP,A.SF_NAME,A.NAME_GOST ,a.kod_ksss
  	   FROM load_buffer.prod A,load_buffer.kindprod B
      WHERE A.kind_npr=B.kind_npr(+) AND NOT EXISTS (SELECT C.id_npr FROM KLS_PROD C WHERE C.id_npr=A.kod));

  INSERT INTO KLS_PROD (id_npr,id_group_npr,id_group_npr_gd,name_npr,abbr_npr,long_name_npr,flg_allowed,ID,prod_nar_id)
	(SELECT DISTINCT '00000','     ','     ','ВСЕ ПРОДУКТЫ','ВСЕ','ВСЕ ПРОДУКТЫ',1,0,0 FROM load_buffer.prod
      WHERE NOT EXISTS (SELECT * FROM KLS_PROD E WHERE E.id_npr='00000'));

/*  UPDATE KLS_PROD SET id_group_npr='10101' WHERE id_npr='10300';
  UPDATE KLS_PROD SET id_group_npr='10101' WHERE id_npr='10400';
  UPDATE KLS_PROD SET id_group_npr='10101' WHERE id_npr='10500';
  UPDATE KLS_PROD SET id_group_npr='10102' WHERE id_npr='11500';
  UPDATE KLS_PROD SET id_group_npr='10101' WHERE id_npr='11900';
  UPDATE KLS_PROD SET id_group_npr='10102' WHERE id_npr='13000';
  UPDATE KLS_PROD SET id_group_npr='10102' WHERE id_npr='21000';
  UPDATE KLS_PROD SET id_group_npr='10102' WHERE id_npr='21100';
  UPDATE KLS_PROD SET id_group_npr='10102' WHERE id_npr='21200';
  UPDATE KLS_PROD SET id_group_npr='10102' WHERE id_npr='23000';*/

  UPDATE KLS_PROD SET id_group_npr='00000' WHERE id_group_npr=id_npr;

  UPDATE KLS_PROD SET id_group_npr_gd='00000' WHERE id_group_npr_gd=id_npr;

  UPDATE KLS_PROD SET ID_KIND_NPR='90099',ID_GROUP_NPR='90099',PROD_PLAN_ID='90099' WHERE ID_NPR='90000';
  COMMIT; 
END Renew_Kls_Prod;
/

--
-- RENEW_KLS_PROD_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Prod_Kons (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_PROD_KONS
    SET (NAME, PROD_KONS_ID, UPAK_ID, DOP_ID, FLAG_FAS, KOEF_KG, KOEF_LIT, GR_KONS_ID, TIP_AKCIZ_ID, P_YEAR)
	  = (SELECT PROD_NAME, PROD_COMP_, PROD_UPAK, DOP_KOD, PROD_UCHET, K_KG, K_LIT, PROD_KOD, DECODE(T_AKC,6,1,7,2,8,3,9,4,10,1,11,2,12,3,13,4,T_AKC),P_YEAR
  	     FROM load_buffer.produkts A WHERE A.kod=KLS_PROD_KONS.ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.produkts A WHERE A.kod=KLS_PROD_KONS.ID);

  INSERT INTO KLS_PROD_KONS (ID,NAME, PROD_KONS_ID, UPAK_ID, DOP_ID, FLAG_FAS, KOEF_KG, KOEF_LIT, GR_KONS_ID, TIP_AKCIZ_ID, P_YEAR)
	(SELECT kod,PROD_NAME, PROD_COMP_, PROD_UPAK, DOP_KOD, PROD_UCHET, K_KG, K_LIT, PROD_KOD, DECODE(T_AKC,6,1,7,2,8,3,9,4,10,1,11,2,12,3,13,4,T_AKC),P_YEAR
  	   FROM load_buffer.produkts A
      WHERE NOT EXISTS (SELECT NULL FROM KLS_PROD_KONS C WHERE C.ID=A.kod));

		  
  -- Привяжем фасованные масла
  UPDATE KLS_PROD_KONS C SET PROD_ID_NPR='80018'
  WHERE IS_AUTO_LINK=1 AND GR_KONS_ID='0253000000' and FLAG_FAS=1;
  
  UPDATE KLS_PROD_KONS_GROUPS_DESC C SET PROD_GROUPS_ID=176
  WHERE IS_AUTO_LINK=1 AND EXISTS
	(SELECT NULL
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='0253000000' and a.FLAG_FAS=1 and C.PROD_KONS_ID=A.ID);
  	   
  INSERT INTO KLS_PROD_KONS_GROUPS_DESC (PROD_KONS_ID, PROD_GROUPS_ID)
	(SELECT ID,176
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='0253000000' and a.FLAG_FAS=1
	    AND NOT EXISTS (SELECT NULL FROM KLS_PROD_KONS_GROUPS_DESC C WHERE C.PROD_KONS_ID=A.ID));
  	  
  -- Привяжем НЕ фасованные масла	   
/*  UPDATE KLS_PROD_KONS C SET PROD_ID_NPR='11900'
  WHERE IS_AUTO_LINK=1 AND GR_KONS_ID='0253000000' and FLAG_FAS=0;

  UPDATE KLS_PROD_KONS_GROUPS_DESC C SET PROD_GROUPS_ID=178
  WHERE IS_AUTO_LINK=1 AND EXISTS
	(SELECT NULL
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='0253000000' and a.FLAG_FAS=0 and C.PROD_KONS_ID=A.ID);

  INSERT INTO KLS_PROD_KONS_GROUPS_DESC (PROD_KONS_ID, PROD_GROUPS_ID)
	(SELECT ID,178
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='0253000000' and a.FLAG_FAS=0
	    AND NOT EXISTS (SELECT NULL FROM KLS_PROD_KONS_GROUPS_DESC C WHERE C.PROD_KONS_ID=A.ID));*/

  -- Привяжем ТТХ	   
  UPDATE KLS_PROD_KONS C SET PROD_ID_NPR='80020'
   WHERE IS_AUTO_LINK=1 AND GR_KONS_ID='2380000000';

  UPDATE KLS_PROD_KONS_GROUPS_DESC C SET PROD_GROUPS_ID=161
  WHERE IS_AUTO_LINK=1 AND EXISTS
	(SELECT NULL
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='2380000000' and C.PROD_KONS_ID=A.ID);

  INSERT INTO KLS_PROD_KONS_GROUPS_DESC (PROD_KONS_ID, PROD_GROUPS_ID)
	(SELECT ID,161
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='2380000000' 
	    AND NOT EXISTS (SELECT NULL FROM KLS_PROD_KONS_GROUPS_DESC C WHERE C.PROD_KONS_ID=A.ID));

  -- Привяжем Прочие продукты фасованные	   
  UPDATE KLS_PROD_KONS C SET PROD_ID_NPR='80019'
  WHERE IS_AUTO_LINK=1 AND GR_KONS_ID='0299910000' and FLAG_FAS=1;
  
  UPDATE KLS_PROD_KONS_GROUPS_DESC C SET PROD_GROUPS_ID=279
  WHERE IS_AUTO_LINK=1 AND EXISTS
	(SELECT NULL
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='0299910000' and a.FLAG_FAS=1 and C.PROD_KONS_ID=A.ID);

  INSERT INTO KLS_PROD_KONS_GROUPS_DESC (PROD_KONS_ID, PROD_GROUPS_ID)
	(SELECT ID,279
  	   FROM KLS_PROD_KONS A
      WHERE a.GR_KONS_ID='0299910000' and a.FLAG_FAS=1 
	    AND NOT EXISTS (SELECT NULL FROM KLS_PROD_KONS_GROUPS_DESC C WHERE C.PROD_KONS_ID=A.ID));
	  
  COMMIT;
  	   
END Renew_Kls_Prod_Kons;
/

--
-- RENEW_KLS_REGION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Region(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_REGION
    SET (region_name, short_name, kod_statistic, kod_moscow, okato, states_id) =
	    (SELECT A.naim, A.s_naim, TO_CHAR(A.kod_st), A.kod_mosk, A.okato, DECODE(A.kod_mosk,203,0,204,0,1) FROM load_buffer.region A WHERE A.kod=KLS_REGION.ID)
    WHERE EXISTS (SELECT B.kod FROM load_buffer.region B WHERE B.kod = KLS_REGION.ID);

  INSERT INTO KLS_REGION (ID,region_name,short_name,kod_statistic,kod_moscow,okato,states_id)
    SELECT C.kod, C.naim, C.s_naim, TO_CHAR(C.kod_st), C.kod_mosk, C.okato, DECODE(C.kod_mosk,203,0,204,0,1) FROM load_buffer.region C
    WHERE NOT EXISTS (SELECT D.ID FROM KLS_REGION D WHERE D.ID=C.KOD);

  COMMIT;

END Renew_Kls_Region;

/

--
-- RENEW_KLS_REGION_2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Region_2(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  INSERT INTO KLS_REGION (ID,region_name,short_name,kod_moscow,states_id)
    SELECT 400+C.kod_t, C.naim_ter, C.naim_ter, TO_CHAR(C.kod_t), DECODE(C.kod_t,203,0,204,0,1) FROM load_buffer.kod_ter C
    WHERE NOT EXISTS (SELECT D.ID FROM KLS_REGION D WHERE TO_NUMBER(D.KOD_MOSCOW)=C.KOD_T);

  COMMIT;

END Renew_Kls_Region_2;

/

--
-- RENEW_KLS_STAN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Stan(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_STAN
    SET (stan_kod,stan_name,rast,region_id,aren_days,gdor_id,otdelenie,states_id) =
	    (SELECT A.kod, A.naim, A.rast, A.kobl, A.aren_days, A.kodgd, A.n_otd, A.kstran FROM load_buffer.stan A WHERE A.ID=KLS_STAN.ID)
    WHERE EXISTS (SELECT B.ID FROM load_buffer.stan B WHERE B.ID=KLS_STAN.ID);

  INSERT INTO KLS_STAN (ID, stan_kod, stan_name, rast, region_id, aren_days, gdor_id, otdelenie,states_id)
   (SELECT C.ID, C.kod, C.naim, C.rast, C.kobl, C.aren_days, C.kodgd, C.n_otd, C.kstran FROM load_buffer.stan C
    WHERE NOT EXISTS (SELECT D.ID FROM KLS_STAN D WHERE D.ID=C.ID));

  COMMIT;

END Renew_Kls_Stan;

/

--
-- XX101_BDRVOTGR_EXEC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Xx101_bdrvotgr_Exec IS
  
BEGIN

/*delete from UF_RELTOPHD_OTGR where UF_RELTOPHD_OTGR.mfrpn is null;*/

update UF_RELTOPHD_OTGR set
ZNAME = 'Не указан',
mfrpn=999999,
PROPAGATESTATUS=0
where UF_RELTOPHD_OTGR.mfrpn is null;

update UF_RELTOPHD_OTGR set
ZNAME = 'Нефть ярегская'
where UF_RELTOPHD_OTGR.mfrpn=2054;

update UF_RELTOPHD_OTGR set
PROPAGATESTATUS=0
where UF_RELTOPHD_OTGR.PROPAGATESTATUS is null;

update UF_RELTOPHD_OTGR set
ZNAME =(select kls_prod.abbr_npr from kls_prod where kls_prod.ksss_prod_id=UF_RELTOPHD_OTGR.MFRPN and rownum=1),
PROPAGATESTATUS=0
where UF_RELTOPHD_OTGR.ZNAME is null;
  COMMIT;                                

END Xx101_bdrvotgr_Exec; 
/

--
-- GET_REGION  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Region
 (kod_moscow# NUMBER)
RETURN NUMBER
AS
  val# NUMBER;
--  propis# varchar2(4000);
BEGIN
  IF kod_moscow#=0 THEN
    RETURN 0;
  ELSE	 
    BEGIN
  	  SELECT MAX(ID) INTO val# FROM KLS_REGION
        WHERE TO_NUMBER(KLS_REGION.KOD_MOSCOW)=kod_moscow#;
    EXCEPTION
      WHEN OTHERS THEN
	    val#:=0;
	END;			
    RETURN val#;
  END IF;	 
END Get_Region;

/

--
-- V_AND_415_NEFT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AND_415_NEFT
(DAT, POSTAV, PROIZ, ID_PROD_NPR, NAME_NPR, 
 KSSS_PROD_ID, POST, A8, A10, A13)
AS 
select last_day(r.datares) as dat, r.postav, r.proiz, t.id_prod_npr, p.name_npr, p.ksss_prod_id,
 sum(r.post) as post, 5 as a8, 157143 as a10, 1149 as a13
from oil_resurs r, oil_trace t, kls_prod p
where r.mpor = t.kod
and t.id_prod_npr = p.id_npr
--and r.datares >= '01.01.2015' and r.datares <= '31.01.2015'
group by last_day(r.datares), t.id_prod_npr, r.postav, r.proiz, t.id_prod_npr, p.name_npr, p.ksss_prod_id;


--
-- V_ARC_REZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ARC_REZ
(DATEUPLOAD, REZ_NUM, REZ_NUM_UNP, VOL, DEAD_VOL, 
 MAX_VOL, PRIM, DISP_NAME, AR_TOV_ID, PROD_ID_NPR, 
 ORG_STRU_ID, STATUS, MAX_VOL_M3, DEAD_VOL_M3, TRK_COUNT, 
 FOR_AND, KOL_LKREZERV)
AS 
select z.data_zamer_reservuar+1 as dateupload,
       z.id_reservuar as rez_num,
       r.nomer_reservuar as rez_num_unp,
       z.tonag as vol,
       r.mertv_ostatok as dead_vol,
       r.max_vzliv as max_vol,
       z.primechanie as prim,
       null as disp_name,
       decode(z.id_vid_oil_product,1,1,0) as ar_tov_id,
       p.id_npr as prod_id_npr,
       1 as org_stru_id,
       null as status,
       null as max_vol_m3,
       null as dead_vol_m3,
       null as trk_count,
       null as for_and,
       z.KOL_LKREZERV                
from art.zamer_reservuar z, art.reservuar r, art.sprav_oil_product o,
     master.kls_prod p
where z.id_reservuar=r.id_reservuar
      and z.id_sprav_oil_product=o.id_sprav_oil_product
      and to_char(o.okp, 'FM0999999999')=p.kod_10;


--
-- V_AZC_PROD_GROUP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_PROD_GROUP
(ID, NAME_NPR, AZC_PR_GRP_ID)
AS 
SELECT TO_NUMBER(a.ID_NPR) AS ID, A.NAME_NPR,A.AZC_PR_GRP_ID  FROM KLS_PROD A
WHERE A.AZC_PR_GRP_ID IS NOT NULL
UNION
SELECT B.ID, B.NAME, 0 AS azc_pr_grp_id FROM AZC_PROD_GROUP B;


--
-- V_AZC_WEEK_PARUS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_WEEK_PARUS
(IS_OPT, AZC_GROUP_ORDER, AZC_GROUP_NAME, GROUP_ORDER, GROUP_NAME, 
 GROUP_FULL_NAME, KOD_OKDP, REALIZ, OSTATOK)
AS 
SELECT
  IS_OPT,
  AZC_GROUP_ORDER,
  AZC_GROUP_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME,
  MAX(KOD_OKDP) AS KOD_OKDP,
  SUM(REALIZ) AS REALIZ,
  SUM(OSTATOK) AS OSTATOK
FROM
(
-- Розница из MASTER
SELECT
  0 AS IS_OPT,
  C.ID AS AZC_GROUP_ORDER,
  C.NAME AS AZC_GROUP_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME,
  B.KOD_OKDP,
  FACT_REAL_VES AS REALIZ,
  END_OST AS OSTATOK
FROM V_FIL_SUT_REAL A,KLS_PROD B, AZC_PROD_GROUP C
WHERE A.PROD_ID_NPR=B.ID_NPR
AND B.AZC_PR_GRP_ID=C.ID
AND A.ORG_KIND_ID IN (5,12)
AND FILIAL_ID<>40
AND FILIAL_ID<>50
UNION ALL
-- Опт из MASTER
SELECT
  1 AS IS_OPT,
  C.ID AS AZC_GROUP_ORDER,
  C.NAME AS AZC_GROUP_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME,
  B.KOD_OKDP,
  FACT_REAL_VES AS REALIZ,
  END_OST AS OSTATOK
FROM V_FIL_SUT_REAL A,KLS_PROD B, AZC_PROD_GROUP C
WHERE A.PROD_ID_NPR=B.ID_NPR
AND B.AZC_PR_GRP_ID=C.ID
AND A.ORG_KIND_ID=1
AND FILIAL_ID<>40
AND FILIAL_ID<>50
UNION ALL
-- Транзит из MASTER
SELECT
  2 AS IS_OPT,
  C.ID AS AZC_GROUP_ORDER,
  C.NAME AS AZC_GROUP_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME,
  B.KOD_OKDP,
  FACT_REAL_VES AS REALIZ,
  END_OST AS OSTATOK
FROM V_FIL_SUT_TRANZIT A,KLS_PROD B, AZC_PROD_GROUP C
WHERE A.PROD_ID_NPR=B.ID_NPR
AND B.AZC_PR_GRP_ID=C.ID
AND A.ORG_KIND_ID=1
AND FILIAL_ID<>40
AND FILIAL_ID<>50
UNION ALL
-- Розница из Паруса
SELECT
  0 AS IS_OPT,
  E.ID AS AZC_GROUP_ORDER,
  E.NAME AS AZC_GROUP_NAME,
  C.GROUP_ORDER,
  C.GROUP_ABBR AS GROUP_NAME,
  C.GROUP_NAME AS GROUP_FULL_NAME,
  D.KOD_OKDP,
  usinsk.REALIZ,
  usinsk.OSTATOK
FROM
(
SELECT
  DECODE(A.NNOMEN,128857374, '10305', 72906864, '10421' , 95873245,'10315', 126748032,'10460', 72931860, '10421',173288904,'10351',A.NNOMEN) AS PROD_ID_NPR,
  A.REALIZ_ALL AS REALIZ,
  A.OSTATOK
FROM V_AZC_FROM_PARUS A
WHERE IS_AZC=1
) usinsk,
KLS_PROD_GROUPS_DESC B,
KLS_PROD_GROUPS C,
KLS_PROD D,
AZC_PROD_GROUP E
WHERE usinsk.PROD_ID_NPR=B.PROD_ID_NPR
AND B.PROD_GROUPS_ID=C.ID
AND C.PROD_TYPE_GRP_ID=5
AND usinsk.PROD_ID_NPR=D.ID_NPR
AND D.AZC_PR_GRP_ID=E.ID
--AND 1=0
UNION ALL
-- Опт из Паруса
SELECT
  1 AS IS_OPT,
  E.ID AS AZC_GROUP_ORDER,
  E.NAME AS AZC_GROUP_NAME,
  C.GROUP_ORDER,
  C.GROUP_ABBR AS GROUP_NAME,
  C.GROUP_NAME AS GROUP_FULL_NAME,
  D.KOD_OKDP,
  usinsk.REALIZ,
  usinsk.OSTATOK
FROM
(
SELECT
  DECODE(A.NNOMEN,128857374, '10305', 72906864, '10421' , 95873245,'10315', 126748032,'10460', 72931860, '10421',173288904,'10351',A.NNOMEN) AS PROD_ID_NPR,
  A.REALIZ_ALL AS REALIZ,
  A.OSTATOK
FROM v_azc_from_parus A
WHERE IS_AZC=0
) usinsk,
KLS_PROD_GROUPS_DESC B,
KLS_PROD_GROUPS C,
KLS_PROD D,
AZC_PROD_GROUP E
WHERE usinsk.PROD_ID_NPR=B.PROD_ID_NPR
AND B.PROD_GROUPS_ID=C.ID
AND C.PROD_TYPE_GRP_ID=5
AND usinsk.PROD_ID_NPR=D.ID_NPR
AND D.AZC_PR_GRP_ID=E.ID
--AND 1=0
)
GROUP BY
  IS_OPT,
  AZC_GROUP_ORDER,
  AZC_GROUP_NAME,
  GROUP_ORDER,
  GROUP_NAME,
  GROUP_FULL_NAME
ORDER BY
  IS_OPT,
  AZC_GROUP_ORDER,
  GROUP_ORDER;


--
-- V_GU12_STAN_NAZN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_STAN_NAZN
(ID, STAN_KOD, STAN_NAME, STATES_ID, STATES_NAME, 
 STATES_KOD)
AS 
SELECT 
A.ID
,A.STAN_KOD
,A.STAN_NAME||', '||B.SHORT_NAME AS STAN_NAME
,C.ID AS STATES_ID
,C.SHORT_NAME AS STATES_NAME
,C.GD_KOD AS STATES_KOD
FROM 
KLS_STAN A
,KLS_GDOR B
,KLS_STATES C
WHERE A.GDOR_ID=B.ID(+)
AND A.STATES_ID=C.ID(+)
AND A.ID<>0;


--
-- V_GU12_STAN_OTPR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_STAN_OTPR
(STAN_ID, STAN_KOD, STAN_NAME, OTDELENIE)
AS 
SELECT KLS_STAN.ID AS STAN_ID,KLS_STAN.STAN_KOD,KLS_STAN.STAN_NAME||','||KLS_GDOR.GDOR_NAME||' ж.д.' AS STAN_NAME,'7' AS OTDELENIE
FROM KLS_STAN
LEFT JOIN KLS_GDOR ON KLS_STAN.GDOR_ID=KLS_GDOR.ID
WHERE KLS_STAN.ID IN(2250,3110);


--
-- V_GU12_STAN_PER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_STAN_PER
(ID, STAN_NAME, STANPER_KOD)
AS 
SELECT S.ID,S.STAN_NAME||', '||D.SHORT_NAME AS STAN_NAME,S.STAN_KOD AS STANPER_KOD
FROM KLS_STAN S,KLS_GDOR D,STAN_ROLE R
WHERE S.GDOR_ID=D.ID AND S.ID=R.STAN_ID AND R.KLS_ROLE_ID=1 
ORDER BY STAN_NAME;


--
-- V_OIL_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_OIL_PLAN
(KOD, SOBSTVEN, POSTAV, PER, MESTOR, 
 DATAPLAN, OSTATKI, OSTMRT, OSTMRTK, PLAN, 
 PLANPERER, POBR, PEROBR, ID_PROD_NPR, KSSS_PROD_ID)
AS 
select p."KOD",p."SOBSTVEN",p."POSTAV",p."PER",p."MESTOR",p."DATAPLAN",p."OSTATKI",p."OSTMRT",p."OSTMRTK",p."PLAN",p."PLANPERER",p."POBR",p."PEROBR",p."ID_PROD_NPR", k.ksss_prod_id
from oil_plan p, kls_prod k
where p.id_prod_npr=k.id_npr;


--
-- V_PARUS_DISP_AZS_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_DISP_AZS_PSV
(BEG_DATE, END_DATE, STORE_RN, NOMEN_RN, OUT_O_PREV_VOL, 
 OUT_O_PREV_MAS, OUT_O_PREV_SUM, IN_VOL, IN_MAS, IN_SUM, 
 IN_HR_VOL, IN_HR_MAS, IN_HR_SUM, IN_I_VOL, IN_I_MAS, 
 IN_I_SUM, IN_O_VOL, IN_O_MAS, IN_O_SUM, OUT_VOL, 
 OUT_MAS, OUT_SUM, OUT_HR_VOL, OUT_HR_MAS, OUT_HR_SUM, 
 OUT_I_VOL, OUT_I_MAS, OUT_I_SUM, OUT_O_VOL, OUT_O_MAS, 
 OUT_O_SUM, OUT_O_VED_VOL, OUT_O_VED_MAS, OUT_O_VED_SUM, OUT_O_BK_VOL, 
 OUT_O_BK_MAS, OUT_O_BK_SUM, OUT_O_KR_VOL, OUT_O_KR_MAS, OUT_O_KR_SUM, 
 OUT_O_NAL_VOL, OUT_O_NAL_MAS, OUT_O_NAL_SUM, OUT_O_FIL_VOL, OUT_O_FIL_MAS, 
 OUT_O_FIL_SUM, OUT_O_LIC_VOL, OUT_O_LIC_MAS, OUT_O_LIC_SUM, END_VOLUME, 
 END_MASSA, END_FULL, END_WATER, IN_TTN_VOL, IN_TTN_MAS, 
 IN_TTN_SUM, OUT_O_1_VOL, OUT_O_1_MAS, OUT_O_2_VOL, OUT_O_2_MAS, 
 OUT_O_3_VOL, OUT_O_3_MAS, OUT_O_4_VOL, OUT_O_4_MAS, OUT_O_5_VOL, 
 OUT_O_5_MAS, OUT_O_6_VOL, OUT_O_6_MAS, OUT_O_7_VOL, OUT_O_7_MAS, 
 STORE_CRN, STORE_CODE, STORE_NAME, STORE_DEP, IS_TRANSIT, 
 NOMEN_CODE, NOMEN_NAME, LAST_DAY, SM_NUMBER, SM_BEGIN, 
 SM_END, IN_LAST_VOL, IN_LAST_MAS, IN_WAY_VOL, IN_WAY_MAS)
AS 
SELECT
 BEG_DATE,
 END_DATE,
 STORE_RN,
 NOMEN_RN,
 OUT_O_PREV_VOL,
 OUT_O_PREV_MAS/1000,
 OUT_O_PREV_SUM,
 IN_VOL,
 IN_MAS/1000,
 IN_SUM,
 IN_HR_VOL,
 IN_HR_MAS/1000,
 IN_HR_SUM,
 IN_I_VOL,
 IN_I_MAS/1000,
 IN_I_SUM,
 IN_O_VOL,
 IN_O_MAS/1000,
 IN_O_SUM,
 OUT_VOL,
 OUT_MAS/1000,
 OUT_SUM,
 OUT_HR_VOL,
 OUT_HR_MAS/1000,
 OUT_HR_SUM,
 OUT_I_VOL,
 OUT_I_MAS/1000,
 OUT_I_SUM,
 OUT_O_VOL,
 OUT_O_MAS/1000,
 OUT_O_SUM,
 OUT_O_VED_VOL,
 OUT_O_VED_MAS/1000,
 OUT_O_VED_SUM,
 OUT_O_BK_VOL,
 OUT_O_BK_MAS/1000,
 OUT_O_BK_SUM,
 OUT_O_KR_VOL,
 OUT_O_KR_MAS/1000,
 OUT_O_KR_SUM,
 OUT_O_NAL_VOL,
 OUT_O_NAL_MAS/1000,
 OUT_O_NAL_SUM,
 OUT_O_FIL_VOL,
 OUT_O_FIL_MAS/1000,
 OUT_O_FIL_SUM,
 OUT_O_LIC_VOL,
 OUT_O_LIC_MAS/1000,
 OUT_O_LIC_SUM,
 END_VOLUME,
 END_MASSA/1000,
 END_FULL,
 END_WATER,
 IN_TTN_VOL,
 IN_TTN_MAS/1000,
 IN_TTN_SUM,
 OUT_O_1_VOL,
 OUT_O_1_MAS/1000,
 OUT_O_2_VOL,
 OUT_O_2_MAS/1000,
 OUT_O_3_VOL,
 OUT_O_3_MAS/1000,
 OUT_O_4_VOL,
 OUT_O_4_MAS/1000,
 OUT_O_5_VOL,
 OUT_O_5_MAS/1000,
 OUT_O_6_VOL,
 OUT_O_6_MAS/1000,
 OUT_O_7_VOL,
 OUT_O_7_MAS/1000,
 STORE_CRN,
 STORE_CODE,
 STORE_NAME,
 STORE_DEP,
 IS_TRANSIT,
 NOMEN_CODE,
 NOMEN_NAME,
 LAST_DAY,
 SM_NUMBER,
 SM_BEGIN,
 SM_END,
 IN_LAST_VOL,
 IN_LAST_MAS/1000,
 IN_WAY_VOL,
 IN_WAY_MAS/1000
FROM MASTER.V_SNP_DISP_AZS_PSV;


--
-- V_PLAN_FACT_CONF_PROD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_CONF_PROD
(ID_NPR, GROUP_ORDER, GROUP_NAME, GROUP_VISIBLE, PROD_ORDER, 
 PROD_NAME)
AS 
select /*+ ORDERED */
  kls_prod.id_npr,
  grp.GROUP_ORDER,
  grp.GROUP_NAME,
  grp.GROUP_VISIBLE,
  NVL(mrk.GROUP_ORDER,kls_prod.ID_NPR) as PROD_ORDER,
  NVL(mrk.GROUP_NAME,kls_prod.NAME_NPR) as PROD_NAME
from kls_prod,
  (SELECT pg.*,pgd.PROD_ID_NPR from kls_prod_groups pg, kls_prod_groups_desc pgd
    WHERE pg.prod_type_grp_id=1
     and pg.ID=pgd.PROD_GROUPS_ID) grp,
  (SELECT pg.*,pgd.PROD_ID_NPR from kls_prod_groups pg, kls_prod_groups_desc pgd
    WHERE pg.prod_type_grp_id=3
     and pg.ID=pgd.PROD_GROUPS_ID
 	 AND pg.GROUP_VISIBLE=1) mrk
where kls_prod.id_npr=grp.PROD_ID_NPR(+)
  and kls_prod.id_npr=mrk.PROD_ID_NPR(+);


--
-- V_PLAN_FACT_DEC  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_DEC
(GROUP_ORDER, GROUP_NAME, GROUP_VISIBLE, POD_GROUP_ORDER, POD_GROUP_NAME, 
 POD_GROUP_VISIBLE, PROD_ORDER, NAZN_OTG_ID, PROD_ID_NPR, NAME_NPR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, PLAN_NAR_RASP, OBR_MON, 
 OBR_NAR, OBR_NAR_RASP, DATE_FACT, TIME_FACT, NUM_DECADA, 
 FACT, FACT_SUT, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, 
 PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
  NVL(GR.GROUP_ORDER,99000000) AS GROUP_ORDER,
  NVL(GR.GROUP_NAME,'') AS GROUP_NAME,
  NVL(GR.GROUP_VISIBLE,0) AS GROUP_VISIBLE,
  NVL(POD_GR.GROUP_ORDER,99900000) AS POD_GROUP_ORDER,
  NVL(POD_GR.GROUP_NAME,'') AS POD_GROUP_NAME,
  NVL(POD_GR.GROUP_VISIBLE,0) AS POD_GROUP_VISIBLE,
  DECODE(PR.PROD_ID_NPR,NULL,A.PROD_ORDER,PR.GROUP_ORDER) AS PROD_ORDER,
  DECODE(KLS_PLANSTRU.NAZN_OTG_ID,9,9,1) as NAZN_OTG_ID,
  DECODE(PR.PROD_ID_NPR,NULL,A.PROD_ID_NPR,TO_CHAR(PR.GROUP_ORDER)) AS PROD_ID_NPR,
  DECODE(PR.PROD_ID_NPR,NULL,KLS_PROD.NAME_NPR,PR.GROUP_NAME),
  MAX(A.DATE_PLAN) as DATE_PLAN,
  SUM(NVL(A.PLAN_MON_V,0)) as PLAN_MON,
  SUM(NVL(A.PLAN_NAR_V,0)) as PLAN_NAR,
  SUM(NVL(A.PLAN_NAR_RASP,0)) as PLAN_NAR_RASP,
  SUM(NVL(A.OBR_MON_V,0)) as OBR_MON,
  SUM(NVL(A.OBR_NAR_V,0)) as OBR_NAR,
  SUM(NVL(A.OBR_NAR_RASP,0)) as OBR_NAR_RASP,
  MAX(A.DATE_FACT) as DATE_FACT,
  MAX(A.TIME_FACT) as TIME_FACT,
  MAX(A.NUM_DECADA) as NUM_DECADA,
  SUM(NVL(A.FACT_V,0)) as FACT,
  SUM(NVL(A.FACT_SUT_V,0)) as FACT_SUT,
  SUM(NVL(A.FACT_DECADA_1,0)) AS FACT_DECADA_1,
  SUM(NVL(A.FACT_DECADA_2,0)) AS FACT_DECADA_2,
  SUM(NVL(A.FACT_DECADA_3,0)) AS FACT_DECADA_3,
  SUM(NVL(A.PLAN_DECADA_1,0)) AS PLAN_DECADA_1,
  SUM(NVL(A.PLAN_DECADA_2,0)) AS PLAN_DECADA_2,
  SUM(NVL(A.PLAN_DECADA_3,0)) AS PLAN_DECADA_3
FROM PLAN_FACT A, KLS_PROD, KLS_PLANSTRU,
  (SELECT AA.PROD_ID_NPR,BB.GROUP_ORDER,BB.GROUP_NAME,BB.GROUP_VISIBLE FROM KLS_PROD_GROUPS_DESC AA, KLS_PROD_GROUPS BB WHERE AA.PROD_GROUPS_ID=BB.ID AND BB.PROD_TYPE_GRP_ID=1) GR,
  (SELECT AA.PROD_ID_NPR,BB.GROUP_ORDER,BB.GROUP_NAME,BB.GROUP_VISIBLE FROM KLS_PROD_GROUPS_DESC AA, KLS_PROD_GROUPS BB WHERE AA.PROD_GROUPS_ID=BB.ID AND BB.PROD_TYPE_GRP_ID=7) POD_GR,
  (SELECT AA.PROD_ID_NPR,BB.GROUP_ORDER,BB.GROUP_NAME,BB.GROUP_VISIBLE FROM KLS_PROD_GROUPS_DESC AA, KLS_PROD_GROUPS BB WHERE AA.PROD_GROUPS_ID=BB.ID AND BB.PROD_TYPE_GRP_ID=3) PR
WHERE A.TIP_ROW='ПОДЕКАДНО'
  AND A.TERMINAL_NAME = For_Init.GetCurrTerm
  AND A.OSUSER_NAME = For_Init.GetCurrUser
  AND A.PLANSTRU_ID=KLS_PLANSTRU.ID
  AND A.PROD_ID_NPR=KLS_PROD.ID_NPR
  AND KLS_PROD.ID_NPR=GR.PROD_ID_NPR(+)
  AND KLS_PROD.ID_NPR=POD_GR.PROD_ID_NPR(+)
  AND KLS_PROD.ID_NPR=PR.PROD_ID_NPR(+)
GROUP BY
  NVL(GR.GROUP_ORDER,99000000),
  NVL(GR.GROUP_NAME,''),
  NVL(GR.GROUP_VISIBLE,0),
  NVL(POD_GR.GROUP_ORDER,99900000),
  NVL(POD_GR.GROUP_NAME,''),
  NVL(POD_GR.GROUP_VISIBLE,0),
  DECODE(PR.PROD_ID_NPR,NULL,A.PROD_ORDER,PR.GROUP_ORDER),
  DECODE(KLS_PLANSTRU.NAZN_OTG_ID,9,9,1),
  DECODE(PR.PROD_ID_NPR,NULL,A.PROD_ID_NPR,TO_CHAR(PR.GROUP_ORDER)),
  DECODE(PR.PROD_ID_NPR,NULL,KLS_PROD.NAME_NPR,PR.GROUP_NAME);


--
-- V_PLAN_FACT_DEC_READY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_DEC_READY
(GROUP_ORDER, GROUP_VISIBLE, PROD_ORDER, NAZN_OTG_ID, PROD_NAME, 
 DATE_PLAN, DATE_FACT, TIME_FACT, PLAN_ALL, PLAN_FIRST, 
 NUM_DECADA, DAYS_DECADA, PLAN_DECADA, FACT_SUT, PLAN_NAR, 
 PLAN_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, FACT_NAR)
AS 
SELECT "GROUP_ORDER","GROUP_VISIBLE","PROD_ORDER","NAZN_OTG_ID","PROD_NAME","DATE_PLAN","DATE_FACT","TIME_FACT","PLAN_ALL","PLAN_FIRST","NUM_DECADA","DAYS_DECADA","PLAN_DECADA","FACT_SUT","PLAN_NAR","PLAN_NAR_RASP","FACT_DECADA_1","FACT_DECADA_2","FACT_DECADA_3","FACT_NAR" FROM
(
-- ВСЕГО
SELECT
  0 as GROUP_ORDER,
  1 as GROUP_VISIBLE,
  0 as PROD_ORDER,
  1 as NAZN_OTG_ID,
  'ВСЕГО' as PROD_NAME,
  MAX(DATE_PLAN) as DATE_PLAN,
  MAX(DATE_FACT) as DATE_FACT,
  MAX(TIME_FACT) as TIME_FACT,
  SUM(PLAN_MON+OBR_MON) as PLAN_ALL,
  SUM(PLAN_MON) as PLAN_FIRST,
  MAX(NUM_DECADA) as NUM_DECADA,
  MAX(CASE
        WHEN NUM_DECADA=1 THEN 10
        WHEN NUM_DECADA=2 THEN 10
		ELSE TO_NUMBER(TO_CHAR(LAST_DAY(DATE_PLAN)-20,'DD'))
	  END) as DAYS_DECADA,
  SUM(CASE
     WHEN NUM_DECADA=1 THEN PLAN_DECADA_1
     WHEN NUM_DECADA=2 THEN PLAN_DECADA_2
     ELSE PLAN_DECADA_3
   END) as PLAN_DECADA,
  SUM(FACT_SUT) as FACT_SUT,
  SUM(PLAN_NAR+OBR_NAR) as PLAN_NAR,
  SUM(PLAN_NAR_RASP+OBR_NAR_RASP) as PLAN_NAR_RASP,
  SUM(FACT_DECADA_1) as FACT_DECADA_1,
  SUM(FACT_DECADA_2) as FACT_DECADA_2,
  SUM(FACT_DECADA_3) as FACT_DECADA_3,
  SUM(FACT) as FACT_NAR
FROM V_PLAN_FACT_DEC
UNION ALL
-- Группы
SELECT
  GROUP_ORDER,
  GROUP_VISIBLE,
  0 as PROD_ORDER,
  1 as NAZN_OTG_ID,
  GROUP_NAME as PROD_NAME,
  MAX(DATE_PLAN) as DATE_PLAN,
  MAX(DATE_FACT) as DATE_FACT,
  MAX(TIME_FACT) as TIME_FACT,
  SUM(PLAN_MON+OBR_MON) as PLAN_ALL,
  SUM(PLAN_MON) as PLAN_FIRST,
  MAX(NUM_DECADA) as NUM_DECADA,
  MAX(CASE
        WHEN NUM_DECADA=1 THEN 10
        WHEN NUM_DECADA=2 THEN 10
		ELSE TO_NUMBER(TO_CHAR(LAST_DAY(DATE_PLAN)-20,'DD'))
	  END) as DAYS_DECADA,
  SUM(CASE
     WHEN NUM_DECADA=1 THEN PLAN_DECADA_1
     WHEN NUM_DECADA=2 THEN PLAN_DECADA_2
     ELSE PLAN_DECADA_3
   END) as PLAN_DECADA,
  SUM(FACT_SUT) as FACT_SUT,
  SUM(PLAN_NAR+OBR_NAR) as PLAN_NAR,
  SUM(PLAN_NAR_RASP+OBR_NAR_RASP) as PLAN_NAR_RASP,
  SUM(FACT_DECADA_1) as FACT_DECADA_1,
  SUM(FACT_DECADA_2) as FACT_DECADA_2,
  SUM(FACT_DECADA_3) as FACT_DECADA_3,
  SUM(FACT) as FACT_NAR
FROM V_PLAN_FACT_DEC
GROUP BY
  GROUP_ORDER,
  GROUP_VISIBLE,
  GROUP_NAME
UNION ALL
-- Продукты
SELECT
  GROUP_ORDER,
  1 as GROUP_VISIBLE,
  PROD_ORDER,
  1 as NAZN_OTG_ID,
  NAME_NPR as PROD_NAME,
  MAX(DATE_PLAN) as DATE_PLAN,
  MAX(DATE_FACT) as DATE_FACT,
  MAX(TIME_FACT) as TIME_FACT,
  SUM(PLAN_MON+OBR_MON) as PLAN_ALL,
  SUM(PLAN_MON) as PLAN_FIRST,
  MAX(NUM_DECADA) as NUM_DECADA,
  MAX(CASE
        WHEN NUM_DECADA=1 THEN 10
        WHEN NUM_DECADA=2 THEN 10
		ELSE TO_NUMBER(TO_CHAR(LAST_DAY(DATE_PLAN)-20,'DD'))
	  END) as DAYS_DECADA,
  SUM(CASE
     WHEN NUM_DECADA=1 THEN PLAN_DECADA_1
     WHEN NUM_DECADA=2 THEN PLAN_DECADA_2
     ELSE PLAN_DECADA_3
   END) as PLAN_DECADA,
  SUM(FACT_SUT) as FACT_SUT,
  SUM(PLAN_NAR+OBR_NAR) as PLAN_NAR,
  SUM(PLAN_NAR_RASP+OBR_NAR_RASP) as PLAN_NAR_RASP,
  SUM(FACT_DECADA_1) as FACT_DECADA_1,
  SUM(FACT_DECADA_2) as FACT_DECADA_2,
  SUM(FACT_DECADA_3) as FACT_DECADA_3,
  SUM(FACT) as FACT_NAR
FROM V_PLAN_FACT_DEC
GROUP BY
  GROUP_ORDER,
  PROD_ORDER,
  NAME_NPR
UNION ALL
-- в т.ч.с хранения
SELECT
  GROUP_ORDER,
  1 as GROUP_VISIBLE,
  PROD_ORDER,
  NAZN_OTG_ID,
  'в т.ч. с хранения' as PROD_NAME,
  MAX(DATE_PLAN) as DATE_PLAN,
  MAX(DATE_FACT) as DATE_FACT,
  MAX(TIME_FACT) as TIME_FACT,
  SUM(PLAN_MON+OBR_MON) as PLAN_ALL,
  SUM(PLAN_MON) as PLAN_FIRST,
  MAX(NUM_DECADA) as NUM_DECADA,
  MAX(CASE
        WHEN NUM_DECADA=1 THEN 10
        WHEN NUM_DECADA=2 THEN 10
		ELSE TO_NUMBER(TO_CHAR(LAST_DAY(DATE_PLAN)-20,'DD'))
	  END) as DAYS_DECADA,
  SUM(CASE
     WHEN NUM_DECADA=1 THEN PLAN_DECADA_1
     WHEN NUM_DECADA=2 THEN PLAN_DECADA_2
     ELSE PLAN_DECADA_3
   END) as PLAN_DECADA,
  SUM(FACT_SUT) as FACT_SUT,
  SUM(PLAN_NAR+OBR_NAR) as PLAN_NAR,
  SUM(PLAN_NAR_RASP+OBR_NAR_RASP) as PLAN_NAR_RASP,
  SUM(FACT_DECADA_1) as FACT_DECADA_1,
  SUM(FACT_DECADA_2) as FACT_DECADA_2,
  SUM(FACT_DECADA_3) as FACT_DECADA_3,
  SUM(FACT) as FACT_NAR
FROM V_PLAN_FACT_DEC
WHERE NAZN_OTG_ID=9
GROUP BY
  GROUP_ORDER,
  PROD_ORDER,
  NAZN_OTG_ID,
  NAME_NPR
)
WHERE PLAN_ALL<>0 OR PLAN_FIRST<>0 OR PLAN_DECADA<>0 OR FACT_NAR<>0
ORDER BY GROUP_ORDER,PROD_ORDER,NAZN_OTG_ID,PROD_NAME;


--
-- V_PLAN_FACT_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FACT_GRP
(TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
 PLANSTRU_ORDER, PLANSTRU_ID, LEVEL_POS, PLANSTRU_NAME, KOD_SGR, 
 KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR, 
 DATE_PLAN, PLAN_MON, PLAN_NAR, OBR_MON, OBR_NAR, 
 KORR_MON, KORR_NAR, DATE_ZAYV, ZAYV, DATE_FACT, 
 TIME_FACT, FACT_SUT, FACT, PLAN_NAR_RASP, OBR_NAR_RASP, 
 KORR_NAR_RASP, FACT_DECADA_1, FACT_DECADA_2, FACT_DECADA_3, PLAN_DECADA_1, 
 PLAN_DECADA_2, PLAN_DECADA_3)
AS 
SELECT
  TIP_ROW,
  GROUP_ORDER,
  GROUP_NAME,
  PROD_ORDER,
  PROD_ID_NPR,
  PLANSTRU_ORDER,
  PLANSTRU_ID,
  LEVEL_POS,
  PLANSTRU_NAME,
  KOD_SGR,
  KOD_SPG,
  KOD_RZD,
  KOD_PRZ,
  KOD_GRP,
  KOD_PGR,
  MAX(DATE_PLAN) AS DATE_PLAN,
  NVL(SUM(PLAN_MON),0) AS PLAN_MON,
  NVL(SUM(PLAN_NAR),0) AS PLAN_NAR,
  NVL(SUM(OBR_MON),0) AS OBR_MON,
  NVL(SUM(OBR_NAR),0) AS OBR_NAR,
  NVL(SUM(KORR_MON),0) AS KORR_MON,
  NVL(SUM(KORR_NAR),0) AS KORR_NAR,
  MAX(DATE_ZAYV) AS DATE_ZAYV,
  NVL(SUM(ZAYV),0) AS ZAYV,
  MAX(DATE_FACT) AS DATE_FACT,
  MAX(TIME_FACT) AS TIME_FACT,
  NVL(SUM(FACT_SUT),0) AS FACT_SUT,
  NVL(SUM(FACT),0) AS FACT,
  NVL(SUM(PLAN_NAR_RASP),0) AS PLAN_NAR_RASP,
  NVL(SUM(OBR_NAR_RASP),0) AS OBR_NAR_RASP,
  NVL(SUM(KORR_NAR_RASP),0) AS KORR_NAR_RASP,
  NVL(SUM(FACT_DECADA_1),0) AS FACT_DECADA_1,
  NVL(SUM(FACT_DECADA_2),0) AS FACT_DECADA_2,
  NVL(SUM(FACT_DECADA_3),0) AS FACT_DECADA_3,
  NVL(SUM(PLAN_DECADA_1),0) AS PLAN_DECADA_1,
  NVL(SUM(PLAN_DECADA_2),0) AS PLAN_DECADA_2,
  NVL(SUM(PLAN_DECADA_3),0) AS PLAN_DECADA_3
FROM V_PLAN_FACT_UNI
GROUP BY
  TIP_ROW,
  GROUP_ORDER,
  GROUP_NAME,
  PROD_ORDER,
  PROD_ID_NPR,
  PLANSTRU_ORDER,
  PLANSTRU_ID,
  LEVEL_POS,
  PLANSTRU_NAME,
  KOD_SGR,
  KOD_SPG,
  KOD_RZD,
  KOD_PRZ,
  KOD_GRP,
  KOD_PGR
ORDER BY
  GROUP_ORDER,
  PROD_ORDER,
  PLANSTRU_ORDER;


--
-- V_PROD_LINKED_GRP_4  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PROD_LINKED_GRP_4
(FACT_ID_NPR, GROUP_NAME_NPR, LINK_ID_NPR)
AS 
SELECT
  Prod_1.Id_npr AS Fact_Id_Npr,
  KLS_PROD_GROUPS.Group_name AS Group_Name_npr,
  Gr_2.Prod_id_npr AS Link_Id_npr
FROM KLS_PROD Prod_1,
     KLS_PROD_GROUPS_DESC Gr_1,
     KLS_PROD_GROUPS_DESC Gr_2,
     KLS_PROD_GROUPS
WHERE Prod_1.Id_npr = Gr_1.Prod_id_npr
  AND Gr_1.Prod_groups_id = KLS_PROD_GROUPS.ID
  AND KLS_PROD_GROUPS.Prod_type_grp_id = 4
  AND Gr_1.Prod_groups_id = Gr_2.Prod_groups_id
ORDER BY Prod_1.Id_npr,Gr_2.Prod_id_npr;


--
-- V_PROD_LINKED_GRP_5  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PROD_LINKED_GRP_5
(FACT_ID_NPR, GROUP_NAME_NPR, LINK_ID_NPR)
AS 
SELECT
  Prod_1.Id_npr AS Fact_Id_Npr,
  KLS_PROD_GROUPS.Group_name AS Group_Name_npr,
  Gr_2.Prod_id_npr AS Link_Id_npr
FROM KLS_PROD Prod_1,
     KLS_PROD_GROUPS_DESC Gr_1,
     KLS_PROD_GROUPS_DESC Gr_2,
     KLS_PROD_GROUPS
WHERE Prod_1.Id_npr = Gr_1.Prod_id_npr
  AND Gr_1.Prod_groups_id = KLS_PROD_GROUPS.ID
  AND KLS_PROD_GROUPS.Prod_type_grp_id = 5
  AND Gr_1.Prod_groups_id = Gr_2.Prod_groups_id
ORDER BY Prod_1.Id_npr,Gr_2.Prod_id_npr;


--
-- V_PROD_OK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PROD_OK
(KOD, KOD_10)
AS 
SELECT MIN(A.ID_NPR) AS KOD, A.KOD_10 FROM master.kls_prod A 
WHERE A.ID_NPR<>'10320' AND A.ID_NPR<>'10313' AND A.KOD_10 IS NOT NULL
GROUP BY A.KOD_10;


--
-- V_REZ_UNP_ESB  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REZ_UNP_ESB
(DATE_ZAMER, FACTORY_KSSS, TANK_PARK, TANK_NUMBER, PRODUCT_CODE, 
 PRODUCT_NAME, PRODUCT_KSSS, STATUS, GDS_W, DEAD_W, 
 FREE_W, INFORM, TRANSIT_W, TECH_W, STORE_OBJ_ID, 
 KOD_OWN_KC, SUPPLY_KSSS, SRC_CATEGORY_ID, GDS_W2)
AS 
SELECT z.data_zamer_reservuar+1 AS date_zamer,
          157143 AS factory_ksss,
          decode (r.id_vid_rezervuar,14,'ВЦ','Товарный парк') AS tank_park,
          r.nomer_reservuar AS tank_number,
          z.id_sprav_oil_product AS product_code,
          p.name_npr AS product_name,
          o.kccc AS product_ksss,
          DECODE (z.id_vid_oil_product,
                  1, 'Паспортизовано',
                  'Не паспортизовано')
             AS status,
          art.pkt_sv_new.ras_ost (z.tonag, r.mertv_ostatok, 0) AS gds_w,
          art.pkt_sv_new.ras_mo (z.tonag, r.mertv_ostatok) AS dead_w,
          art.pkt_sv_new.ras_sve (z.tonag, r.max_vzliv) AS free_w,
          z.primechanie AS inform,
          0 as TRANSIT_W,
          0 as TECH_W,
          1149 as STORE_OBJ_ID,
          157143 as KOD_OWN_KC,
          157143 as SUPPLY_KSSS,
          6 as SRC_CATEGORY_ID,
          z.kol_lkrezerv as gds_w2
     FROM art.zamer_reservuar z,
          art.reservuar r,
          art.sprav_oil_product o,
          master.kls_prod p
    WHERE     z.id_reservuar = r.id_reservuar
          AND z.id_sprav_oil_product = o.id_sprav_oil_product
          AND TO_CHAR (o.okp, 'FM0999999999') = p.kod_10
          AND o.kccc IS NOT NULL
          AND (z.id_vid_oil_product = 1 OR z.id_vid_oil_product = 3)
          AND o.k_sort LIKE '1%'
          --AND r.id_vid_rezervuar <> 14
;


--
-- OIL_PLAN_BINS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.OIL_PLAN_BINS
BEFORE INSERT OR UPDATE
ON MASTER.OIL_PLAN
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.kod is NULL or :NEW.kod=0 then
   Select seq_plan_refinery.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END;
/


--
-- OIL_RESURS_BINS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.OIL_RESURS_BINS
BEFORE INSERT
ON MASTER.OIL_RESURS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :NEW.kod is NULL or :NEW.kod=0 then
   Select seq_plan_refinery.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END;
/


--
-- TRG_AIUDR_GU12_B  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_GU12_B
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.GU12_B
FOR EACH ROW
DECLARE
  v_old GU12_B%ROWTYPE;
  v_new GU12_B%ROWTYPE;
  vNOM_Z GU12_A.NOM_Z%TYPE;
  vFROM_DATE GU12_A.FROM_DATE%TYPE;
  vSTAN_ID KLS_STAN.ID%TYPE;
  vSTAN_KOD KLS_STAN.STAN_KOD%TYPE;
  vSTAN_NAME KLS_STAN.STAN_NAME%TYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN
  -- Выборка из родительской таблицы
  IF DELETING() THEN
    SELECT a.NOM_Z,a.FROM_DATE
	  INTO vNOM_Z,vFROM_DATE
	  FROM GU12_A a
	 WHERE a.ID=:old.ID_A;

    vSTAN_ID := :OLD.STAN_ID;
  ELSE
    SELECT a.NOM_Z,a.FROM_DATE
	  INTO vNOM_Z,vFROM_DATE
	  FROM GU12_A a
	 WHERE a.ID=:new.ID_A;

    vSTAN_ID := :NEW.STAN_ID;
  END IF;

  IF NVL(vSTAN_ID,0)<>0 THEN
    SELECT s.STAN_KOD,s.STAN_NAME
      INTO vSTAN_KOD,vSTAN_NAME
      FROM KLS_STAN s
     WHERE ID=vSTAN_ID;
  ELSE
    vSTAN_KOD:='';
	vSTAN_NAME:='';	 
  END IF;	 

  --
  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.PDATE := :OLD.PDATE;
    v_old.SOBSTVVAG_ID := :OLD.SOBSTVVAG_ID;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.STAN_PER_ID := :OLD.STAN_PER_ID;
    v_old.GRUZPOL_ID := :OLD.GRUZPOL_ID;
    v_old.KOL_VAG := :OLD.KOL_VAG;
    v_old.VES := :OLD.VES;
    v_old.VIDOTPR_ID := :OLD.VIDOTPR_ID;
    v_old.MRK := :OLD.MRK;
    v_old.ID_A := :OLD.ID_A;
    v_old.ID := :OLD.ID;
    v_old.PLAT_ID := :OLD.PLAT_ID;
    v_old.FOX_KOD := :OLD.FOX_KOD;
    v_old.ISCOR := :OLD.ISCOR;
    v_old.DATE_LETTER := :OLD.DATE_LETTER;
    v_old.NOM_LETTER := :OLD.NOM_LETTER;
    v_old.DATE_VHOD := :OLD.DATE_VHOD;
    v_old.NOM_VHOD := :OLD.NOM_VHOD;
    v_old.PRINVAG_ID := :OLD.PRINVAG_ID;
    v_old.OLD_ID := :OLD.OLD_ID;
    v_old.STATES_ID := :OLD.STATES_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Добавление в теневую таблицу
    INSERT INTO MASTER_SHADOW.GU12_B_DELETED
      (PDATE,SOBSTVVAG_ID,STAN_ID,STAN_PER_ID,GRUZPOL_ID,KOL_VAG,VES,VIDOTPR_ID,MRK,ID_A,ID,PLAT_ID,FOX_KOD,ISCOR,DATE_LETTER,NOM_LETTER,DATE_VHOD,NOM_VHOD,PRINVAG_ID,OLD_ID,STATES_ID)
    VALUES
      (v_old.PDATE,v_old.SOBSTVVAG_ID,v_old.STAN_ID,v_old.STAN_PER_ID,v_old.GRUZPOL_ID,v_old.KOL_VAG,v_old.VES,v_old.VIDOTPR_ID,v_old.MRK,v_old.ID_A,v_old.ID,v_old.PLAT_ID,v_old.FOX_KOD,v_old.ISCOR,v_old.DATE_LETTER,v_old.NOM_LETTER,v_old.DATE_VHOD,v_old.NOM_VHOD,v_old.PRINVAG_ID,v_old.OLD_ID,v_old.STATES_ID);

    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
        SELECT LogId,'GU12_B',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D',EMPTY_CLOB()
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

      SELECT WhatWasDone INTO cl_WhatWasDone
        FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
       WHERE ID = LogId
         FOR UPDATE;

      WritePos:=1;

      WriteStr:='Заявка № ' || (vNOM_Z) || ' от ' || TO_CHAR(vFROM_DATE,'dd.mm.yyyy hh24:mi:ss') ||
	            ' Станция '|| vSTAN_KOD ||' ' || (vSTAN_NAME) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      WritePos:=WritePos+LENGTH(WriteStr);
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.PDATE := :NEW.PDATE;
    v_new.SOBSTVVAG_ID := :NEW.SOBSTVVAG_ID;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.STAN_PER_ID := :NEW.STAN_PER_ID;
    v_new.GRUZPOL_ID := :NEW.GRUZPOL_ID;
    v_new.KOL_VAG := :NEW.KOL_VAG;
    v_new.VES := :NEW.VES;
    v_new.VIDOTPR_ID := :NEW.VIDOTPR_ID;
    v_new.MRK := :NEW.MRK;
    v_new.ID_A := :NEW.ID_A;
    v_new.ID := :NEW.ID;
    v_new.PLAT_ID := :NEW.PLAT_ID;
    v_new.FOX_KOD := :NEW.FOX_KOD;
    v_new.ISCOR := :NEW.ISCOR;
    v_new.DATE_LETTER := :NEW.DATE_LETTER;
    v_new.NOM_LETTER := :NEW.NOM_LETTER;
    v_new.DATE_VHOD := :NEW.DATE_VHOD;
    v_new.NOM_VHOD := :NEW.NOM_VHOD;
    v_new.PRINVAG_ID := :NEW.PRINVAG_ID;
    v_new.OLD_ID := :NEW.OLD_ID;
    v_new.STATES_ID := :NEW.STATES_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'GU12_B',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
           WHERE ID = LogId
             FOR UPDATE;

          WritePos:=1;

          WriteStr:='Заявка № ' || (vNOM_Z) || ' от ' || TO_CHAR(vFROM_DATE,'dd.mm.yyyy hh24:mi:ss') ||
	                ' Станция '|| vSTAN_KOD ||' ' || (vSTAN_NAME) || CHR(13);
          dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
          WritePos:=WritePos+LENGTH(WriteStr);
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'GU12_B',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'GU12_B',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.PDATE<>V_NEW.PDATE THEN
            WriteStr:=':OLD.PDATE=' || TO_CHAR(V_OLD.PDATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.PDATE=' || TO_CHAR(V_NEW.PDATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.SOBSTVVAG_ID,0)<>NVL(V_NEW.SOBSTVVAG_ID,0) THEN
            WriteStr:=':OLD.SOBSTVVAG_ID=' || TO_CHAR(V_OLD.SOBSTVVAG_ID) || ' :NEW.SOBSTVVAG_ID=' || TO_CHAR(V_NEW.SOBSTVVAG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.STAN_ID,0)<>NVL(V_NEW.STAN_ID,0) THEN
            WriteStr:=':OLD.STAN_ID=' || TO_CHAR(V_OLD.STAN_ID) || ' :NEW.STAN_ID=' || TO_CHAR(V_NEW.STAN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.STAN_PER_ID,0)<>NVL(V_NEW.STAN_PER_ID,0) THEN
            WriteStr:=':OLD.STAN_PER_ID=' || TO_CHAR(V_OLD.STAN_PER_ID) || ' :NEW.STAN_PER_ID=' || TO_CHAR(V_NEW.STAN_PER_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.GRUZPOL_ID,0)<>NVL(V_NEW.GRUZPOL_ID,0) THEN
            WriteStr:=':OLD.GRUZPOL_ID=' || TO_CHAR(V_OLD.GRUZPOL_ID) || ' :NEW.GRUZPOL_ID=' || TO_CHAR(V_NEW.GRUZPOL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.KOL_VAG,0)<>NVL(V_NEW.KOL_VAG,0) THEN
            WriteStr:=':OLD.KOL_VAG=' || TO_CHAR(V_OLD.KOL_VAG) || ' :NEW.KOL_VAG=' || TO_CHAR(V_NEW.KOL_VAG) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.VES,0)<>NVL(V_NEW.VES,0) THEN
            WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.VIDOTPR_ID,0)<>NVL(V_NEW.VIDOTPR_ID,0) THEN
            WriteStr:=':OLD.VIDOTPR_ID=' || TO_CHAR(V_OLD.VIDOTPR_ID) || ' :NEW.VIDOTPR_ID=' || TO_CHAR(V_NEW.VIDOTPR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.MRK||' '<>V_NEW.MRK||' ' THEN
            WriteStr:=':OLD.MRK=' || (V_OLD.MRK) || ' :NEW.MRK=' || (V_NEW.MRK) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ID_A<>V_NEW.ID_A THEN
            WriteStr:=':OLD.ID_A=' || TO_CHAR(V_OLD.ID_A) || ' :NEW.ID_A=' || TO_CHAR(V_NEW.ID_A) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.PLAT_ID,0)<>NVL(V_NEW.PLAT_ID,0) THEN
            WriteStr:=':OLD.PLAT_ID=' || TO_CHAR(V_OLD.PLAT_ID) || ' :NEW.PLAT_ID=' || TO_CHAR(V_NEW.PLAT_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FOX_KOD<>V_NEW.FOX_KOD THEN
            WriteStr:=':OLD.FOX_KOD=' || (V_OLD.FOX_KOD) || ' :NEW.FOX_KOD=' || (V_NEW.FOX_KOD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.ISCOR,0)<>NVL(V_NEW.ISCOR,0) THEN
            WriteStr:=':OLD.ISCOR=' || TO_CHAR(V_OLD.ISCOR) || ' :NEW.ISCOR=' || TO_CHAR(V_NEW.ISCOR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.DATE_LETTER,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(V_NEW.DATE_LETTER,TO_DATE('01.01.1900','dd.mm.yyyy')) THEN
            WriteStr:=':OLD.DATE_LETTER=' || TO_CHAR(V_OLD.DATE_LETTER,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_LETTER=' || TO_CHAR(V_NEW.DATE_LETTER,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_LETTER||' '<>V_NEW.NOM_LETTER||' ' THEN
            WriteStr:=':OLD.NOM_LETTER=' || (V_OLD.NOM_LETTER) || ' :NEW.NOM_LETTER=' || (V_NEW.NOM_LETTER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.DATE_VHOD,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(V_NEW.DATE_VHOD,TO_DATE('01.01.1900','dd.mm.yyyy')) THEN
            WriteStr:=':OLD.DATE_VHOD=' || TO_CHAR(V_OLD.DATE_VHOD,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_VHOD=' || TO_CHAR(V_NEW.DATE_VHOD,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_VHOD||' '<>V_NEW.NOM_VHOD||' ' THEN
            WriteStr:=':OLD.NOM_VHOD=' || (V_OLD.NOM_VHOD) || ' :NEW.NOM_VHOD=' || (V_NEW.NOM_VHOD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.PRINVAG_ID,0)<>NVL(V_NEW.PRINVAG_ID,0) THEN
            WriteStr:=':OLD.PRINVAG_ID=' || TO_CHAR(V_OLD.PRINVAG_ID) || ' :NEW.PRINVAG_ID=' || TO_CHAR(V_NEW.PRINVAG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.OLD_ID<>V_NEW.OLD_ID THEN
            WriteStr:=':OLD.OLD_ID=' || TO_CHAR(V_OLD.OLD_ID) || ' :NEW.OLD_ID=' || TO_CHAR(V_NEW.OLD_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF NVL(V_OLD.STATES_ID,0)<>NVL(V_NEW.STATES_ID,0) THEN
            WriteStr:=':OLD.STATES_ID=' || TO_CHAR(V_OLD.STATES_ID) || ' :NEW.STATES_ID=' || TO_CHAR(V_NEW.STATES_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'GU12_B',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_SVED  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_SVED
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.SVED
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN
  NULL;
END;
/


--
-- TRG_BEFORE_OSTSAT_VYRAB  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BEFORE_OSTSAT_VYRAB
BEFORE INSERT
ON MASTER.OSTAT_VYRAB
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
IF :NEW.ID IS NULL OR :NEW.ID=0 THEN
   SELECT seq_plan_refinery.NEXTVAL INTO tmpVar FROM dual;
   :NEW.ID := tmpVar;
END IF;
END ;
/


--
-- TRG_BIUDR_REPL_LIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REPL_LIST
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REPL_LIST
FOR EACH ROW
DECLARE
  v_old REPL_LIST%ROWTYPE;
  v_new REPL_LIST%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NAME := :OLD.NAME;
    v_old.TAG := :OLD.TAG;
    v_old.REPL_KIND := :OLD.REPL_KIND;
    v_old.SRC_SITE := :OLD.SRC_SITE;
    v_old.SRC_INFO_T := :OLD.SRC_INFO_T;
    v_old.SRC_SCHEM := :OLD.SRC_SCHEM;
    v_old.SRC_TABLE := :OLD.SRC_TABLE;
    v_old.SRC_FIELDS := :OLD.SRC_FIELDS;
    v_old.SRC_WHERE := :OLD.SRC_WHERE;
    v_old.SRC_QUERY := :OLD.SRC_QUERY;
    v_old.DST_SITE := :OLD.DST_SITE;
    v_old.DST_SCHEM := :OLD.DST_SCHEM;
    v_old.DST_TABLE := :OLD.DST_TABLE;
    v_old.DST_FIELDS := :OLD.DST_FIELDS;
    v_old.DST_UNIQ := :OLD.DST_UNIQ;
    v_old.SP_TYPE_BF := :OLD.SP_TYPE_BF;
    v_old.SP_SITE_BF := :OLD.SP_SITE_BF;
    v_old.SP_NAME_BF := :OLD.SP_NAME_BF;
    v_old.SP_TYPE_AF := :OLD.SP_TYPE_AF;
    v_old.SP_SITE_AF := :OLD.SP_SITE_AF;
    v_old.SP_NAME_AF := :OLD.SP_NAME_AF;
    v_old.COMPUTE_ST := :OLD.COMPUTE_ST;
    v_old.DATE_FIELD := :OLD.DATE_FIELD;
    v_old.DATE_BEG := :OLD.DATE_BEG;
    v_old.DATE_END := :OLD.DATE_END;
    v_old.LASTDATE := :OLD.LASTDATE;
    v_old.LASTTIME := :OLD.LASTTIME;
    v_old.LASTSIZE := :OLD.LASTSIZE;
    v_old.PARAM1 := :OLD.PARAM1;
    v_old.PARAM2 := :OLD.PARAM2;
    v_old.PARAM3 := :OLD.PARAM3;
    v_old.CHECK_MODE := :OLD.CHECK_MODE;
    v_old.FLAG_IS := :OLD.FLAG_IS;
    v_old.STAT_SCHEM := :OLD.STAT_SCHEM;
    v_old.STAT_TABLE := :OLD.STAT_TABLE;
    v_old.STAT_QUERY := :OLD.STAT_QUERY;
    v_old.REPL_SCHEM := :OLD.REPL_SCHEM;
    v_old.REPL_TABLE := :OLD.REPL_TABLE;
    v_old.F_APPL_TAG := :OLD.F_APPL_TAG;
    v_old.F_CONFIRM := :OLD.F_CONFIRM;
    v_old.FILE_TYPE_O := :OLD.FILE_TYPE_O;
    v_old.FILE_TYPE_I := :OLD.FILE_TYPE_I;
    v_old.IS_ACTIVE := :OLD.IS_ACTIVE;
    v_old.IS_TRACKING := :OLD.IS_TRACKING;
    v_old.TRACKING_ORDER := :OLD.TRACKING_ORDER;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NAME := :NEW.NAME;
    v_new.TAG := :NEW.TAG;
    v_new.REPL_KIND := :NEW.REPL_KIND;
    v_new.SRC_SITE := :NEW.SRC_SITE;
    v_new.SRC_INFO_T := :NEW.SRC_INFO_T;
    v_new.SRC_SCHEM := :NEW.SRC_SCHEM;
    v_new.SRC_TABLE := :NEW.SRC_TABLE;
    v_new.SRC_FIELDS := :NEW.SRC_FIELDS;
    v_new.SRC_WHERE := :NEW.SRC_WHERE;
    v_new.SRC_QUERY := :NEW.SRC_QUERY;
    v_new.DST_SITE := :NEW.DST_SITE;
    v_new.DST_SCHEM := :NEW.DST_SCHEM;
    v_new.DST_TABLE := :NEW.DST_TABLE;
    v_new.DST_FIELDS := :NEW.DST_FIELDS;
    v_new.DST_UNIQ := :NEW.DST_UNIQ;
    v_new.SP_TYPE_BF := :NEW.SP_TYPE_BF;
    v_new.SP_SITE_BF := :NEW.SP_SITE_BF;
    v_new.SP_NAME_BF := :NEW.SP_NAME_BF;
    v_new.SP_TYPE_AF := :NEW.SP_TYPE_AF;
    v_new.SP_SITE_AF := :NEW.SP_SITE_AF;
    v_new.SP_NAME_AF := :NEW.SP_NAME_AF;
    v_new.COMPUTE_ST := :NEW.COMPUTE_ST;
    v_new.DATE_FIELD := :NEW.DATE_FIELD;
    v_new.DATE_BEG := :NEW.DATE_BEG;
    v_new.DATE_END := :NEW.DATE_END;
    v_new.LASTDATE := :NEW.LASTDATE;
    v_new.LASTTIME := :NEW.LASTTIME;
    v_new.LASTSIZE := :NEW.LASTSIZE;
    v_new.PARAM1 := :NEW.PARAM1;
    v_new.PARAM2 := :NEW.PARAM2;
    v_new.PARAM3 := :NEW.PARAM3;
    v_new.CHECK_MODE := :NEW.CHECK_MODE;
    v_new.FLAG_IS := :NEW.FLAG_IS;
    v_new.STAT_SCHEM := :NEW.STAT_SCHEM;
    v_new.STAT_TABLE := :NEW.STAT_TABLE;
    v_new.STAT_QUERY := :NEW.STAT_QUERY;
    v_new.REPL_SCHEM := :NEW.REPL_SCHEM;
    v_new.REPL_TABLE := :NEW.REPL_TABLE;
    v_new.F_APPL_TAG := :NEW.F_APPL_TAG;
    v_new.F_CONFIRM := :NEW.F_CONFIRM;
    v_new.FILE_TYPE_O := :NEW.FILE_TYPE_O;
    v_new.FILE_TYPE_I := :NEW.FILE_TYPE_I;
    v_new.IS_ACTIVE := :NEW.IS_ACTIVE;
    v_new.IS_TRACKING := :NEW.IS_TRACKING;
    v_new.TRACKING_ORDER := :NEW.TRACKING_ORDER;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_REPL_LIST.nextval INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.NAME := v_new.NAME;
    :NEW.TAG := v_new.TAG;
    :NEW.REPL_KIND := v_new.REPL_KIND;
    :NEW.SRC_SITE := v_new.SRC_SITE;
    :NEW.SRC_INFO_T := v_new.SRC_INFO_T;
    :NEW.SRC_SCHEM := v_new.SRC_SCHEM;
    :NEW.SRC_TABLE := v_new.SRC_TABLE;
    :NEW.SRC_FIELDS := v_new.SRC_FIELDS;
    :NEW.SRC_WHERE := v_new.SRC_WHERE;
    :NEW.SRC_QUERY := v_new.SRC_QUERY;
    :NEW.DST_SITE := v_new.DST_SITE;
    :NEW.DST_SCHEM := v_new.DST_SCHEM;
    :NEW.DST_TABLE := v_new.DST_TABLE;
    :NEW.DST_FIELDS := v_new.DST_FIELDS;
    :NEW.DST_UNIQ := v_new.DST_UNIQ;
    :NEW.SP_TYPE_BF := v_new.SP_TYPE_BF;
    :NEW.SP_SITE_BF := v_new.SP_SITE_BF;
    :NEW.SP_NAME_BF := v_new.SP_NAME_BF;
    :NEW.SP_TYPE_AF := v_new.SP_TYPE_AF;
    :NEW.SP_SITE_AF := v_new.SP_SITE_AF;
    :NEW.SP_NAME_AF := v_new.SP_NAME_AF;
    :NEW.COMPUTE_ST := v_new.COMPUTE_ST;
    :NEW.DATE_FIELD := v_new.DATE_FIELD;
    :NEW.DATE_BEG := v_new.DATE_BEG;
    :NEW.DATE_END := v_new.DATE_END;
    :NEW.LASTDATE := v_new.LASTDATE;
    :NEW.LASTTIME := v_new.LASTTIME;
    :NEW.LASTSIZE := v_new.LASTSIZE;
    :NEW.PARAM1 := v_new.PARAM1;
    :NEW.PARAM2 := v_new.PARAM2;
    :NEW.PARAM3 := v_new.PARAM3;
    :NEW.CHECK_MODE := v_new.CHECK_MODE;
    :NEW.FLAG_IS := v_new.FLAG_IS;
    :NEW.STAT_SCHEM := v_new.STAT_SCHEM;
    :NEW.STAT_TABLE := v_new.STAT_TABLE;
    :NEW.STAT_QUERY := v_new.STAT_QUERY;
    :NEW.REPL_SCHEM := v_new.REPL_SCHEM;
    :NEW.REPL_TABLE := v_new.REPL_TABLE;
    :NEW.F_APPL_TAG := v_new.F_APPL_TAG;
    :NEW.F_CONFIRM := v_new.F_CONFIRM;
    :NEW.FILE_TYPE_O := v_new.FILE_TYPE_O;
    :NEW.FILE_TYPE_I := v_new.FILE_TYPE_I;
    :NEW.IS_ACTIVE := v_new.IS_ACTIVE;
    :NEW.IS_TRACKING := v_new.IS_TRACKING;
    :NEW.TRACKING_ORDER := v_new.TRACKING_ORDER;
  END IF;
END;
/


--
-- TRG_BIUDR_SVED  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_SVED
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.SVED
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_SVED.nextval INTO v_tmp FROM DUAL;
	  :new.ID:=TO_CHAR(v_tmp);
    END IF;
  END IF;
END;
/


--
-- BILLS  (Table) 
--
CREATE TABLE MASTER.BILLS
(
  NOM_DOK         NUMBER(10)                    NOT NULL,
  NOM_SF          NUMBER(7),
  DATE_VYP_SF     DATE,
  DATE_KVIT       DATE,
  DATE_BUXG       DATE,
  SUMMA_DOK       NUMBER(15,2)                  DEFAULT 0,
  NDS_DOK         NUMBER(15,2)                  DEFAULT 0,
  GSM_DOK         NUMBER(15,2)                  DEFAULT 0,
  AKCIZ_DOK       NUMBER(15,2)                  DEFAULT 0,
  PRIM            VARCHAR2(65 BYTE),
  FIO_ISPOL       VARCHAR2(40 BYTE),
  KOL_DN          NUMBER(5)                     DEFAULT 0,
  OLD_NOM_DOK     NUMBER(7),
  NOM_ZD          VARCHAR2(12 BYTE),
  OWNER_ID        NUMBER(6),
  DOG_ID          NUMBER(10),
  USL_NUMBER      NUMBER(3),
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  PROD_SUM        NUMBER(15,2)                  DEFAULT 0,
  PROD_NDS        NUMBER(15,2)                  DEFAULT 0,
  PROD_GSM        NUMBER(15,2)                  DEFAULT 0,
  PROD_AKCIZ      NUMBER(15,2)                  DEFAULT 0,
  DATE_MOS        DATE,
  NPO_SF          VARCHAR2(200 BYTE),
  OLD_NOM_SF      NUMBER(7),
  IS_AGENT        NUMBER(1),
  NUM_5_DAY       NUMBER(1),
  LUK_DOG_ID      NUMBER(10),
  LUK_USL_NUMBER  NUMBER(3),
  LUK_SUMMA_DOK   NUMBER(15,2),
  LUK_NDS_DOK     NUMBER(15,2),
  SNP_DOG_ID      NUMBER(10),
  SNP_USL_NUMBER  NUMBER(3),
  LUK_KOL_DN      NUMBER(5),
  SNP_KOL_DN      NUMBER(5),
  NAZN_OTG_ID     NUMBER(10)                    DEFAULT 1,
  KORR_5_DAY      NUMBER(1),
  PROTO_NUM       VARCHAR2(15 BYTE),
  PROTO_DATE      DATE,
  NO_AKCIZ        NUMBER(1)                     DEFAULT 0,
  KORR_PROD       NUMBER(1)                     DEFAULT 0,
  DATE_PLAT       DATE,
  IS_KORR         NUMBER(1)                     DEFAULT 0,
  TO_KORR         NUMBER(1)                     DEFAULT 0,
  ISU_KOD         VARCHAR2(10 BYTE),
  ISU_NOM_SF      VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.BILLS IS 'Оригинальные счета-фактуры';

COMMENT ON COLUMN MASTER.BILLS.NUM_5_DAY IS 'N пятидневки';

COMMENT ON COLUMN MASTER.BILLS.LUK_SUMMA_DOK IS 'Сумма по счету от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS.LUK_NDS_DOK IS 'НДС по счету от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS.LUK_KOL_DN IS 'Отсрочка по счету от ЛУКОЙЛ''а';

COMMENT ON COLUMN MASTER.BILLS.SNP_KOL_DN IS 'Отсрочка по договору от НПО';

COMMENT ON COLUMN MASTER.BILLS.KORR_PROD IS 'Признак корректировки продукта';

COMMENT ON COLUMN MASTER.BILLS.DATE_PLAT IS 'Дата окончания отсрочки платежа (Ожидаемая дата платежа)';

COMMENT ON COLUMN MASTER.BILLS.IS_KORR IS 'СФ:  1-откорректирована, 2-сторнирована';

COMMENT ON COLUMN MASTER.BILLS.TO_KORR IS 'СФ: 1-корректирует другую СФ, 2-сторнирует другую СФ';

COMMENT ON COLUMN MASTER.BILLS.ISU_KOD IS 'Логистический код СФ из ИСУ Переработка';

COMMENT ON COLUMN MASTER.BILLS.ISU_NOM_SF IS 'Бухгалтерский № СФ из ИСУ';



--
-- BILLS_SNP  (Table) 
--
CREATE TABLE MASTER.BILLS_SNP
(
  NOM_DOK        NUMBER(7)                      NOT NULL,
  NOM_SF         NUMBER(7),
  NPO_SF         VARCHAR2(200 BYTE),
  DATE_VYP_SF    DATE,
  DATE_KVIT      DATE,
  DATE_BUXG      DATE,
  DATE_MOS       DATE,
  SUMMA_DOK      NUMBER(15,2),
  NDS_DOK        NUMBER(15,2),
  GSM_DOK        NUMBER(15,2),
  AKCIZ_DOK      NUMBER(15,2),
  PRIM           VARCHAR2(65 BYTE),
  FIO_ISPOL      VARCHAR2(40 BYTE),
  KOL_DN         NUMBER(5),
  OLD_NOM_DOK    NUMBER(7),
  NOM_ZD         VARCHAR2(12 BYTE),
  OWNER_ID       NUMBER(6),
  DOG_ID         NUMBER(5),
  USL_NUMBER     NUMBER(3),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  CAT_CEN_ID     NUMBER(10),
  NPR_PRICES_ID  NUMBER(10),
  OLD_NOM_SF     NUMBER(7),
  IS_AGENT       NUMBER(1)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.BILLS_SNP IS 'Счета-фактуры НПО, выставленные в комплексе ФИНАНСЫ';



--
-- DAYLY_FACT  (Table) 
--
CREATE TABLE MASTER.DAYLY_FACT
(
  KOD           NUMBER(10)                      NOT NULL,
  KOD_PLAN      NUMBER(10),
  KOD_DEC       NUMBER(5),
  PERER         NUMBER(6),
  DATA          DATE,
  PROD          VARCHAR2(5 BYTE),
  OSTAT_TEK     NUMBER(10,3)                    DEFAULT 0,
  HRAN_TEK      NUMBER(10,3)                    DEFAULT 0,
  PLAN_DAY      NUMBER(10,3)                    DEFAULT 0,
  PLAN_NAR      NUMBER(10,3)                    DEFAULT 0,
  GRAF_NAR      NUMBER(10,3)                    DEFAULT 0,
  FAKT_NAR      NUMBER(10,3)                    DEFAULT 0,
  POLEZOSTATKI  NUMBER(10,3)                    DEFAULT 0,
  OTGR_NAR      NUMBER(10,3)                    DEFAULT 0,
  REFORM        NUMBER(10,3)                    DEFAULT 0,
  VSEGOZA       NUMBER(10,3)                    DEFAULT 0,
  POKUP         NUMBER(10,3)                    DEFAULT 0,
  SOBSTV        NUMBER(6),
  PEREPASP      NUMBER(10,3)                    DEFAULT 0,
  PROIZV        NUMBER(10,3)                    DEFAULT 0,
  KOMP          NUMBER(10,3)                    DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- JKCOMMIT_PROD2CENN  (Table) 
--
CREATE TABLE MASTER.JKCOMMIT_PROD2CENN
(
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  CAT_CEN_ID   NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_PREDPR  (Table) 
--
CREATE TABLE MASTER.KLS_PREDPR
(
  ID              NUMBER(6)                     NOT NULL,
  PREDPR_NAME     VARCHAR2(60 BYTE),
  SHORT_NAME      VARCHAR2(30 BYTE),
  INN             VARCHAR2(12 BYTE),
  POSTINDEX_J     VARCHAR2(6 BYTE),
  POSTINDEX_P     VARCHAR2(6 BYTE),
  CITY_P          VARCHAR2(25 BYTE),
  CITY_J          VARCHAR2(25 BYTE),
  ADDRESS_P       VARCHAR2(100 BYTE),
  ADDRESS_J       VARCHAR2(100 BYTE),
  OKONH           VARCHAR2(10 BYTE),
  OKPO            VARCHAR2(10 BYTE),
  EMAIL           VARCHAR2(40 BYTE),
  FAX             VARCHAR2(20 BYTE),
  PHONE           VARCHAR2(20 BYTE),
  BANK_KORS       VARCHAR2(20 BYTE),
  REGION_ID       NUMBER(5),
  HOLDING_ID      NUMBER(3),
  PERTYPE_ID      NUMBER(3),
  TALGAR_ID       NUMBER(10),
  GD_KOD          VARCHAR2(12 BYTE),
  RS              VARCHAR2(20 BYTE),
  BANKS_ID        NUMBER(10),
  STATES_ID       NUMBER(10),
  CLASS_ID        NUMBER(10),
  EX_SVID         NUMBER(10)                    DEFAULT 0,
  IS_BLOCK        NUMBER(1)                     DEFAULT 0,
  OKVED           VARCHAR2(20 BYTE),
  TAG             VARCHAR2(150 BYTE),
  OGRN            VARCHAR2(15 BYTE),
  KSSS_PREDPR_ID  NUMBER,
  UNP_ID          NUMBER(10),
  KPP             VARCHAR2(10 BYTE),
  REGION_P_ID     NUMBER(10),
  SF_NAME         VARCHAR2(250 BYTE),
  ISU_KOD_PLAT    VARCHAR2(7 BYTE),
  FULL_ADDRESS_P  VARCHAR2(300 BYTE),
  FULL_ADDRESS_J  VARCHAR2(300 BYTE),
  LIFNR           VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PREDPR IS 'Справочник предприятий и организаций';

COMMENT ON COLUMN MASTER.KLS_PREDPR.ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.KLS_PREDPR.PREDPR_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PREDPR.SHORT_NAME IS 'Кратко';

COMMENT ON COLUMN MASTER.KLS_PREDPR.INN IS 'ИНН';

COMMENT ON COLUMN MASTER.KLS_PREDPR.POSTINDEX_J IS 'Почтовый индекс (юр.адрес)';

COMMENT ON COLUMN MASTER.KLS_PREDPR.POSTINDEX_P IS 'Почтовый индекс (физ.адрес)';

COMMENT ON COLUMN MASTER.KLS_PREDPR.CITY_P IS 'Город (физ.адрес)';

COMMENT ON COLUMN MASTER.KLS_PREDPR.CITY_J IS 'Город (юр.адрес)';

COMMENT ON COLUMN MASTER.KLS_PREDPR.ADDRESS_P IS 'Адрес (физ.адрес)';

COMMENT ON COLUMN MASTER.KLS_PREDPR.ADDRESS_J IS 'Адрес (юр.адрес)';

COMMENT ON COLUMN MASTER.KLS_PREDPR.OKONH IS 'ОКОНХ';

COMMENT ON COLUMN MASTER.KLS_PREDPR.OKPO IS 'ОКПО';

COMMENT ON COLUMN MASTER.KLS_PREDPR.EMAIL IS 'адрес эл.почты';

COMMENT ON COLUMN MASTER.KLS_PREDPR.FAX IS 'Факс';

COMMENT ON COLUMN MASTER.KLS_PREDPR.PHONE IS 'Телефон';

COMMENT ON COLUMN MASTER.KLS_PREDPR.BANK_KORS IS 'Кор-счет банка';

COMMENT ON COLUMN MASTER.KLS_PREDPR.REGION_ID IS 'Регион';

COMMENT ON COLUMN MASTER.KLS_PREDPR.HOLDING_ID IS 'Положение в структуре ЛУКОЙЛ';

COMMENT ON COLUMN MASTER.KLS_PREDPR.PERTYPE_ID IS 'Вид деятельности';

COMMENT ON COLUMN MASTER.KLS_PREDPR.GD_KOD IS 'ЖД код';

COMMENT ON COLUMN MASTER.KLS_PREDPR.RS IS 'Расчетный счет в банке';

COMMENT ON COLUMN MASTER.KLS_PREDPR.BANKS_ID IS 'Банк';

COMMENT ON COLUMN MASTER.KLS_PREDPR.STATES_ID IS 'Страна';

COMMENT ON COLUMN MASTER.KLS_PREDPR.CLASS_ID IS 'Классификатор предприятий';

COMMENT ON COLUMN MASTER.KLS_PREDPR.EX_SVID IS 'Наличие акцизного свидетельства';

COMMENT ON COLUMN MASTER.KLS_PREDPR.IS_BLOCK IS '1 - заблокировано';

COMMENT ON COLUMN MASTER.KLS_PREDPR.OKVED IS 'Код ОКВЭД';

COMMENT ON COLUMN MASTER.KLS_PREDPR.OGRN IS 'Код ОГРН';

COMMENT ON COLUMN MASTER.KLS_PREDPR.KSSS_PREDPR_ID IS 'Код КССС';

COMMENT ON COLUMN MASTER.KLS_PREDPR.UNP_ID IS 'Код УНП';

COMMENT ON COLUMN MASTER.KLS_PREDPR.KPP IS 'КПП';

COMMENT ON COLUMN MASTER.KLS_PREDPR.LIFNR IS 'Код ИСУ ЛУКОЙЛ';



--
-- KLS_PREDPR_CONTACTS  (Table) 
--
CREATE TABLE MASTER.KLS_PREDPR_CONTACTS
(
  ID           NUMBER(10)                       NOT NULL,
  PREDPR_ID    NUMBER(6),
  IS_BOSS      NUMBER(1)                        DEFAULT 0,
  LASTNAME     VARCHAR2(15 BYTE),
  SHORTNAME    VARCHAR2(15 BYTE),
  FIRSTNAME    VARCHAR2(15 BYTE),
  MIDDLENAME   VARCHAR2(15 BYTE),
  LASTNAME1    VARCHAR2(15 BYTE),
  FIRSTNAME1   VARCHAR2(15 BYTE),
  MIDDLENAME1  VARCHAR2(15 BYTE),
  LASTNAME2    VARCHAR2(15 BYTE),
  FIRSTNAME2   VARCHAR2(15 BYTE),
  MIDDLENAME2  VARCHAR2(15 BYTE),
  PHONE        VARCHAR2(20 BYTE),
  STAFF        VARCHAR2(50 BYTE),
  STAFF1       VARCHAR2(50 BYTE),
  STAFF2       VARCHAR2(50 BYTE),
  SEX          NUMBER(1)                        DEFAULT 1,
  NA_OSNOV     VARCHAR2(100 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PREDPR_CONTACTS IS 'Контакты';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.ID IS 'Контакт';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.PREDPR_ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.IS_BOSS IS '0-Работник,1-Руководитель, 2-Главбух, 3-Зам';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.LASTNAME IS 'Именительный - Ф';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.SHORTNAME IS 'Именительный - И.О.';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.FIRSTNAME IS 'Именительный - И';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.MIDDLENAME IS 'Именительный - О';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.LASTNAME1 IS 'Дательный - Ф';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.FIRSTNAME1 IS 'Дательный - И';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.MIDDLENAME1 IS 'Дательный - О';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.LASTNAME2 IS 'Родительный - Ф';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.FIRSTNAME2 IS 'Родительный - И';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.MIDDLENAME2 IS 'Родительный - О';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.PHONE IS 'Телефон';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.STAFF IS 'Именительный - Должность';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.STAFF1 IS 'Дательный - Должность';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.STAFF2 IS 'Родительный - Должность';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.SEX IS '1-М, 0-Ж';

COMMENT ON COLUMN MASTER.KLS_PREDPR_CONTACTS.NA_OSNOV IS 'На основании';



--
-- KLS_PREDPR_KONS  (Table) 
--
CREATE TABLE MASTER.KLS_PREDPR_KONS
(
  ID         NUMBER(20)                         NOT NULL,
  NAME       VARCHAR2(50 BYTE),
  INN        VARCHAR2(15 BYTE),
  IS_AUTO    NUMBER(1)                          DEFAULT 0,
  PREDPR_ID  NUMBER(6)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PREDPR_KONS IS 'Конс.отчетность: Справочник предприятий';

COMMENT ON COLUMN MASTER.KLS_PREDPR_KONS.ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.KLS_PREDPR_KONS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_PREDPR_KONS.INN IS 'ИНН';

COMMENT ON COLUMN MASTER.KLS_PREDPR_KONS.IS_AUTO IS '0 - Связь в ручную';

COMMENT ON COLUMN MASTER.KLS_PREDPR_KONS.PREDPR_ID IS 'Связь с KLS_PREDPR';



--
-- KLS_PREDPR_RS  (Table) 
--
CREATE TABLE MASTER.KLS_PREDPR_RS
(
  ID         NUMBER(10)                         NOT NULL,
  PREDPR_ID  NUMBER(10),
  BANKS_ID   NUMBER(10),
  RS         VARCHAR2(20 BYTE),
  IS_MAIN    NUMBER(1)                          DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_PREDPR_RS IS 'Расчетные счета';

COMMENT ON COLUMN MASTER.KLS_PREDPR_RS.ID IS 'Расчетный счет';

COMMENT ON COLUMN MASTER.KLS_PREDPR_RS.PREDPR_ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.KLS_PREDPR_RS.BANKS_ID IS 'Банк';

COMMENT ON COLUMN MASTER.KLS_PREDPR_RS.RS IS 'Расчетный счет';

COMMENT ON COLUMN MASTER.KLS_PREDPR_RS.IS_MAIN IS 'Признак - основной';



--
-- KLS_SHABEXP  (Table) 
--
CREATE TABLE MASTER.KLS_SHABEXP
(
  ID           NUMBER(10)                       NOT NULL,
  FLG_DOSTUP   NUMBER(1),
  DOG_ID       NUMBER(5),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  STAN_ID      NUMBER(10),
  PRIM_DOG     VARCHAR2(20 BYTE),
  OSOB1        VARCHAR2(33 BYTE),
  OSOB2        VARCHAR2(33 BYTE),
  OSOB3        VARCHAR2(33 BYTE),
  OSOB4        VARCHAR2(33 BYTE),
  POL1         VARCHAR2(30 BYTE),
  POL2         VARCHAR2(30 BYTE),
  POL3         VARCHAR2(30 BYTE),
  POL4         VARCHAR2(30 BYTE),
  NEOB1        VARCHAR2(40 BYTE),
  NEOB2        VARCHAR2(40 BYTE),
  NEOB3        VARCHAR2(40 BYTE),
  NEOB4        VARCHAR2(40 BYTE),
  STAN1        VARCHAR2(40 BYTE),
  STAN2        VARCHAR2(40 BYTE),
  STAN3        VARCHAR2(40 BYTE),
  STAN4        VARCHAR2(40 BYTE),
  DORST1       VARCHAR2(40 BYTE),
  DORST2       VARCHAR2(40 BYTE),
  NM_GR1       VARCHAR2(26 BYTE),
  NM_GR2       VARCHAR2(26 BYTE),
  NM_GR3       VARCHAR2(26 BYTE),
  NM_GR4       VARCHAR2(26 BYTE),
  NM_GR5       VARCHAR2(26 BYTE),
  NM_GR6       VARCHAR2(26 BYTE),
  NM_GR7       VARCHAR2(26 BYTE),
  NM_GR8       VARCHAR2(26 BYTE),
  NM_GR9       VARCHAR2(26 BYTE),
  PLT_OT1      VARCHAR2(35 BYTE),
  PLT_OT2      VARCHAR2(35 BYTE),
  PLT_OT3      VARCHAR2(35 BYTE),
  PLT_OT4      VARCHAR2(35 BYTE),
  DOCS1        VARCHAR2(35 BYTE),
  DOCS2        VARCHAR2(35 BYTE),
  DOCS3        VARCHAR2(35 BYTE),
  DOCS4        VARCHAR2(35 BYTE),
  TAM1         VARCHAR2(35 BYTE),
  TAM2         VARCHAR2(35 BYTE),
  POS33        VARCHAR2(10 BYTE),
  POS34        VARCHAR2(10 BYTE),
  POS35        VARCHAR2(10 BYTE),
  POS36        VARCHAR2(10 BYTE),
  SHTAMP1      VARCHAR2(50 BYTE),
  SHTAMP2      VARCHAR2(50 BYTE),
  SHTAMP3      VARCHAR2(50 BYTE),
  SHTAMP4      VARCHAR2(50 BYTE),
  SHTAMP5      VARCHAR2(50 BYTE),
  GR1_TXT_EX   VARCHAR2(60 BYTE),
  GR2_TXT_EX   VARCHAR2(60 BYTE),
  MESTO_PAY    VARCHAR2(30 BYTE),
  CNT_VED      NUMBER(4),
  TEX_PD_ID    NUMBER(10),
  INSNUM       VARCHAR2(20 BYTE),
  INSDAT       DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_SHABEXP.FLG_DOSTUP IS '1-активный шаблон';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.DOG_ID IS 'Договор';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.PRIM_DOG IS 'примечание к договору';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.OSOB1 IS 'Особые отметки';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.INSNUM IS '№ Инструкции экспедитора';

COMMENT ON COLUMN MASTER.KLS_SHABEXP.INSDAT IS 'Дата инструкции экспедитора';



--
-- KLS_TEX_PD  (Table) 
--
CREATE TABLE MASTER.KLS_TEX_PD
(
  ID                  NUMBER(10)                NOT NULL,
  GROTP_ID            NUMBER(6)                 NOT NULL,
  GROTP_OKPO          VARCHAR2(10 BYTE),
  PLATTARIF_ID        NUMBER(6),
  TEX_PD_NAME         VARCHAR2(50 BYTE),
  BANK                VARCHAR2(60 BYTE),
  RS                  VARCHAR2(20 BYTE),
  GROTP_SHORT_NAME    VARCHAR2(50 BYTE),
  PLATTAR_SHORT_NAME  VARCHAR2(50 BYTE),
  KSSS_PLATTARIF_ID   VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- KLS_VAGOWNER  (Table) 
--
CREATE TABLE MASTER.KLS_VAGOWNER
(
  ID               NUMBER(10)                   NOT NULL,
  VAGOWNER_NAME    VARCHAR2(30 BYTE),
  SHORT_NAME       VARCHAR2(10 BYTE),
  PREDPR_ID        NUMBER(6),
  VAGOWN_MOS_ID    NUMBER(10),
  VAGOWN_TYP_ID    NUMBER(10),
  SOBSTV_ID        NUMBER(10),
  DISPLAY_NAME     VARCHAR2(50 BYTE),
  OWNER_ID         NUMBER(10),
  SMN_NAME         VARCHAR2(30 BYTE),
  SORTBY           NUMBER(10),
  LOAD_TYPE_ID     NUMBER(2),
  RAZR_MPS         VARCHAR2(40 BYTE),
  VZISK1           VARCHAR2(40 BYTE),
  VZISK2           VARCHAR2(40 BYTE),
  VZISK1_EX        VARCHAR2(40 BYTE),
  VZISK2_EX        VARCHAR2(40 BYTE),
  GR1_TXT          VARCHAR2(50 BYTE),
  GR2_TXT          VARCHAR2(50 BYTE),
  GR1_TXT_EX       VARCHAR2(50 BYTE),
  GR2_TXT_EX       VARCHAR2(50 BYTE),
  PRN_NAME         VARCHAR2(50 BYTE),
  R3_VSART_ID      VARCHAR2(5 BYTE),
  R3_VENDORS_ID    VARCHAR2(10 BYTE),
  ISU_POSTAV_ID    VARCHAR2(10 BYTE),
  ISU_POSTAV_NAME  VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VAGOWNER IS 'Владельцы вагонов';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.ID IS 'Владелец вагона (ID)';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VAGOWNER_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.SHORT_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.PREDPR_ID IS 'Контрагент';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VAGOWN_MOS_ID IS 'Владелец (Москва)';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VAGOWN_TYP_ID IS 'Тип собственности';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.SOBSTV_ID IS 'Собственник тр ср-ва';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.DISPLAY_NAME IS 'Отображаемое в интерфейсе наименование';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.OWNER_ID IS 'Владелец вагона';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.SMN_NAME IS 'Название собственника из реестра СМН';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.SORTBY IS 'Порядок';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.RAZR_MPS IS 'Разрешение на кусирование';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VZISK1 IS 'Доп. взыск 1';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VZISK2 IS 'Доп. взыск2';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VZISK1_EX IS 'Доп. взыск 1 экспорт';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.VZISK2_EX IS 'Доп. взыск 2 экспорт';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.GR1_TXT IS 'Под наименованием груза 1';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.GR2_TXT IS 'Под наименованием груза 2';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.GR1_TXT_EX IS 'Под наименованием груза 1 экспорт';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.GR2_TXT_EX IS 'Под наименованием груза 2 экспорт';

COMMENT ON COLUMN MASTER.KLS_VAGOWNER.PRN_NAME IS 'Имя для печати';



--
-- KLS_VETKA  (Table) 
--
CREATE TABLE MASTER.KLS_VETKA
(
  VETKA_NAME    VARCHAR2(50 BYTE),
  ID            NUMBER(10)                      NOT NULL,
  OWNER_ID      NUMBER(6),
  IS_AUTO_LINK  NUMBER(10)                      DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VETKA IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.KLS_VETKA.VETKA_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_VETKA.ID IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.KLS_VETKA.OWNER_ID IS 'Владелец';

COMMENT ON COLUMN MASTER.KLS_VETKA.IS_AUTO_LINK IS 'Автоматическая привязка';



--
-- KLS_VETKA_OTP  (Table) 
--
CREATE TABLE MASTER.KLS_VETKA_OTP
(
  ID            NUMBER(10)                      NOT NULL,
  VETKA_NAME    VARCHAR2(40 BYTE),
  SHORT_NAME    VARCHAR2(10 BYTE),
  DOSTUP        NUMBER(1),
  ORDNUNG       NUMBER(10),
  MESTO_ID      NUMBER(2),
  LOAD_TYPE_ID  NUMBER(2),
  OWNER_ID      NUMBER(6),
  DOSTUP_VETL   NUMBER(1)                       DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_VETKA_OTP IS 'Ветки отправителя';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.ID IS 'Ветка отправителя';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.VETKA_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.SHORT_NAME IS 'Краткое наименование';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.DOSTUP IS 'Доступ';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.ORDNUNG IS 'Порядок';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.OWNER_ID IS 'Владелец';

COMMENT ON COLUMN MASTER.KLS_VETKA_OTP.DOSTUP_VETL IS 'Доступ - на ст.Ветласян';



--
-- NAKL  (Table) 
--
CREATE TABLE MASTER.NAKL
(
  ID            NUMBER(10)                      NOT NULL,
  MESTO_ID      NUMBER(10),
  LOAD_TYPE_ID  NUMBER(10),
  NAKL_NUM      NUMBER(10),
  NAKL_DATE     DATE,
  PROD_GU12_ID  VARCHAR2(10 BYTE),
  FORMNAKL_ID   NUMBER(10),
  SHABNAKL_ID   NUMBER(10),
  SHABEXP_ID    NUMBER(10),
  K_TAR         VARCHAR2(10 BYTE),
  VES_CIST      NUMBER(12,3)                    DEFAULT 0,
  VES           NUMBER(12,3)                    DEFAULT 0,
  UPAK_VES      NUMBER(12,3)                    DEFAULT 0,
  VES_ALL       NUMBER(12,3)                    DEFAULT 0,
  NOM_ZD        VARCHAR2(12 BYTE),
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  SHABVOZ_ID    NUMBER(10),
  IS_EXP        NUMBER(1),
  OPERNALIV_ID  NUMBER(10),
  DOG_ID        NUMBER(10),
  STAN_ID       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.NAKL IS 'Накладные';

COMMENT ON COLUMN MASTER.NAKL.ID IS 'ID накладной';

COMMENT ON COLUMN MASTER.NAKL.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.NAKL.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.NAKL.NAKL_NUM IS 'Номер накладной';

COMMENT ON COLUMN MASTER.NAKL.NAKL_DATE IS 'Дата накладной';

COMMENT ON COLUMN MASTER.NAKL.PROD_GU12_ID IS 'Ж/д код груза';

COMMENT ON COLUMN MASTER.NAKL.FORMNAKL_ID IS 'Форма накладной';

COMMENT ON COLUMN MASTER.NAKL.SHABNAKL_ID IS 'Шаблон накладной';

COMMENT ON COLUMN MASTER.NAKL.SHABEXP_ID IS 'Шаблон экспортной накладной';

COMMENT ON COLUMN MASTER.NAKL.K_TAR IS 'Код исключительного тарифа';

COMMENT ON COLUMN MASTER.NAKL.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.NAKL.VES IS 'Вес груза';

COMMENT ON COLUMN MASTER.NAKL.UPAK_VES IS 'Вес упаковки';

COMMENT ON COLUMN MASTER.NAKL.VES_ALL IS 'Вес вагона груза и упаковки';

COMMENT ON COLUMN MASTER.NAKL.DOG_ID IS 'Оператор налива';



--
-- NPR_PRICES  (Table) 
--
CREATE TABLE MASTER.NPR_PRICES
(
  ID                   NUMBER(6)                NOT NULL,
  CAT_CEN_ID           NUMBER(3),
  PROD_ID_NPR          VARCHAR2(5 BYTE),
  CENA                 NUMBER(15,6)             DEFAULT 0,
  NDS20                NUMBER(15,6)             DEFAULT 0,
  NGSM25               NUMBER(15,6)             DEFAULT 0,
  AKCIZ                NUMBER(15,6)             DEFAULT 0,
  CENA_OTP             NUMBER(15,6)             DEFAULT 0,
  BEGIN_DATE           DATE,
  END_DATE             DATE,
  INPUT_DATE           DATE,
  OWNERSHIP_ID         NUMBER(3),
  SUPPLIER_ID          NUMBER(6),
  PROTOKOL_DATE        DATE,
  PROTOKOL_NUM         VARCHAR2(15 BYTE),
  IS_ORIGINAL          NUMBER(1)                DEFAULT 0,
  PROTOKOL_BEGIN_DATE  DATE,
  NDS20_NPO            NUMBER(15,6)             DEFAULT 0,
  CENA_NPO             NUMBER(15,6)             DEFAULT 0,
  CENA_OTP_NPO         NUMBER(15,6)             DEFAULT 0,
  NO_AKCIZ             NUMBER(1)                DEFAULT 0,
  CENA_BN              NUMBER(15,6)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- ORG_STRUCTURE  (Table) 
--
CREATE TABLE MASTER.ORG_STRUCTURE
(
  ID                     NUMBER(10)             NOT NULL,
  ADRESS                 VARCHAR2(100 BYTE),
  NOTE                   VARCHAR2(100 BYTE),
  NAME                   VARCHAR2(100 BYTE),
  ORG_KIND_ID            NUMBER(10),
  PREDPR_ID              NUMBER(6),
  ORG_TYPE_ID            NUMBER(10)             DEFAULT NULL,
  IS_AUTO_LINK           NUMBER(1)              DEFAULT 1,
  FILIAL                 NUMBER(10),
  WORKSHOP               VARCHAR2(10 BYTE),
  INN                    VARCHAR2(15 BYTE),
  IS_AUTO_KONS           NUMBER(1)              DEFAULT 1,
  PLAN_REAL              NUMBER(2),
  CITY_PREFIX_FILE       VARCHAR2(20 BYTE),
  CITY_IN_XLS            VARCHAR2(30 BYTE),
  FULL_NAME              VARCHAR2(50 BYTE),
  PARUS_CRN_AUTO         NUMBER(17),
  PARUS_CRN_KNT          NUMBER(17),
  PARUS_DEPARTMENT       VARCHAR2(30 BYTE),
  PARUS_PLAN_AZC_DEP     VARCHAR2(15 BYTE),
  PARUS_PLAN_AUTO_DEP    VARCHAR2(15 BYTE),
  PARUS_PLAN_MB_DEP      VARCHAR2(15 BYTE),
  PARUS_PLAN_TRAN_DEP    VARCHAR2(15 BYTE),
  PARUS_PLAN_AZC_DEP_2   VARCHAR2(15 BYTE),
  PARUS_PLAN_AUTO_DEP_2  VARCHAR2(15 BYTE),
  PARUS_PLAN_TRAN_DEP_2  VARCHAR2(15 BYTE),
  ABBR                   VARCHAR2(15 BYTE),
  RAST                   NUMBER(10,2),
  TRANS_ORG              VARCHAR2(50 BYTE),
  NO_WORK                NUMBER(1)              DEFAULT 0,
  IS_AUTO                NUMBER(1)              DEFAULT 1,
  IS_AUTO_FOR_DISP_AZS   NUMBER(1)              DEFAULT 1,
  LOAD_NALIV_FROM_XLS    NUMBER(1)              DEFAULT 0,
  LOAD_NALIV_FROM_PARUS  NUMBER(1)              DEFAULT 1,
  LOAD_FAS_FROM_XLS      NUMBER(1)              DEFAULT 0,
  LOAD_FAS_FROM_PARUS    NUMBER(1)              DEFAULT 1,
  KSSS_ID                NUMBER
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.ADRESS IS 'Адрес ОСЕ';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.NOTE IS 'Дополнение';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.NAME IS 'Наименование ОСЕ';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.IS_AUTO_LINK IS '0 - запрет обновления';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.FILIAL IS 'ID филиала (конс.отчетность)';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.WORKSHOP IS 'Цех (конс.отчетность)';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.INN IS 'ИНН';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PLAN_REAL IS 'Видеть при вводе плана реализации';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.CITY_PREFIX_FILE IS 'Филиал в имени файла';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.CITY_IN_XLS IS 'Филиал внутри XLS-файла';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.FULL_NAME IS 'Полное имя';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_CRN_AUTO IS 'Каталог лиц.счетов в Парусе (Заказы)';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_CRN_KNT IS 'Каталог лиц.счетов Маслобазы (Заказы)';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_DEPARTMENT IS 'Наименование штатного подразделения в Парусе';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_AZC_DEP IS 'Подразделение для планов - реализация с АЗС';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_AUTO_DEP IS 'Подразделение для планов - реализация с НБ';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_MB_DEP IS 'Подразделение для планов - реализация с Маслобазы';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_TRAN_DEP IS 'Подразделение для планов - транзит';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_AZC_DEP_2 IS 'Подразделение для планов - реализация с АЗС';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_AUTO_DEP_2 IS 'Подразделение для планов - реализация с НБ';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.PARUS_PLAN_TRAN_DEP_2 IS 'Подразделение для планов - транзит';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.ABBR IS 'Кратко';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.RAST IS 'Расстояние';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.TRANS_ORG IS 'Транспортная организация';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.NO_WORK IS '1-Не работает';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.IS_AUTO IS '1=Автоматизирована';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.IS_AUTO_FOR_DISP_AZS IS '1=Выбирать данные из Паруса (для Контроля АЗС)';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.LOAD_NALIV_FROM_XLS IS '1=Загружать наливные из XLS';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.LOAD_NALIV_FROM_PARUS IS '1=Загружать наливные из Паруса';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.LOAD_FAS_FROM_XLS IS '1=Загружать фасовку из XLS';

COMMENT ON COLUMN MASTER.ORG_STRUCTURE.LOAD_FAS_FROM_PARUS IS '1=Загружать фасовку из Паруса';



--
-- PLAN_POST_SVOD  (Table) 
--
CREATE TABLE MASTER.PLAN_POST_SVOD
(
  ID           NUMBER(10)                       NOT NULL,
  DATE_PLAN    DATE,
  VES          NUMBER(18,6)                     DEFAULT 0,
  HRAN         NUMBER(18,6)                     DEFAULT 0,
  SUPPLIER_ID  NUMBER(6),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  PLANSTRU_ID  NUMBER(10),
  IS_KORR      NUMBER(1)                        DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PLAN_POST_SVOD IS 'План закупок';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.ID IS 'План закупок';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.VES IS 'План (ВСЕГО)';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.HRAN IS 'В т.ч. хранение';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.SUPPLIER_ID IS 'Поставщик';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.PLANSTRU_ID IS 'Позиция плана поставки';

COMMENT ON COLUMN MASTER.PLAN_POST_SVOD.IS_KORR IS 'Корректировка';



--
-- PODACHA  (Table) 
--
CREATE TABLE MASTER.PODACHA
(
  ID              NUMBER(10)                    NOT NULL,
  POD_NUM         VARCHAR2(20 BYTE),
  POD_DATE        DATE,
  KOL             NUMBER(3)                     DEFAULT NULL,
  VES             NUMBER(12,3)                  DEFAULT NULL,
  GOTOV_DATE      DATE,
  NALIV_DATE      DATE,
  LUKOMA_NUM      NUMBER(7),
  MPS_NUM         NUMBER(7),
  SMN_NUM         NUMBER(7),
  GD_UVED_NUM     NUMBER(7),
  LOAD_TYPE_ID    NUMBER(2)                     DEFAULT 1,
  VETKA_OTP_ID    NUMBER(10)                    DEFAULT 10,
  MESTO_ID        NUMBER(2)                     DEFAULT 1,
  USER_ID         NUMBER(10),
  END_NALIV_DATE  DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PODACHA IS 'Ведомость подачи';

COMMENT ON COLUMN MASTER.PODACHA.ID IS 'ID ведомости подачи';

COMMENT ON COLUMN MASTER.PODACHA.POD_NUM IS 'Номер ведомости';

COMMENT ON COLUMN MASTER.PODACHA.POD_DATE IS 'Дата ведомости';

COMMENT ON COLUMN MASTER.PODACHA.KOL IS 'Кол-во вагонов';

COMMENT ON COLUMN MASTER.PODACHA.VES IS 'Вес продукта';

COMMENT ON COLUMN MASTER.PODACHA.GOTOV_DATE IS 'Дата готовности';

COMMENT ON COLUMN MASTER.PODACHA.NALIV_DATE IS 'Дата начала налива';

COMMENT ON COLUMN MASTER.PODACHA.LUKOMA_NUM IS 'Номер ЛУКОМ''а';

COMMENT ON COLUMN MASTER.PODACHA.MPS_NUM IS 'Номер МПС';

COMMENT ON COLUMN MASTER.PODACHA.SMN_NUM IS 'Номер СМН';

COMMENT ON COLUMN MASTER.PODACHA.GD_UVED_NUM IS 'Номер уведомления для ЖД';

COMMENT ON COLUMN MASTER.PODACHA.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.PODACHA.VETKA_OTP_ID IS 'Ветка отправителя';

COMMENT ON COLUMN MASTER.PODACHA.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.PODACHA.USER_ID IS 'Оператор';



--
-- PODACHA_ROWS  (Table) 
--
CREATE TABLE MASTER.PODACHA_ROWS
(
  ID             NUMBER(10)                     NOT NULL,
  PODACHA_ID     NUMBER(10),
  NUM_POS        NUMBER(10),
  NUM_CIST       VARCHAR2(10 BYTE),
  KALIBR_ID      VARCHAR2(5 BYTE),
  VAGOWNER_ID    NUMBER(10),
  AXES           NUMBER(2),
  CAPACITY       VARCHAR2(10 BYTE),
  VAGONTYPE_ID   NUMBER(10),
  NCISTDOP       NUMBER(2),
  VAG_STATUS_ID  NUMBER(10),
  DEFI_MASS_ID   NUMBER(10),
  VETKA_POD_ID   NUMBER(10),
  VES            NUMBER(10,3),
  KOL_NET        NUMBER(10,3),
  VES_BRUTTO     NUMBER(10,3),
  VES_CIST       NUMBER(10,3),
  ZPU_TYPE1      NUMBER(10),
  ZPU_TYPE2      NUMBER(10),
  PLOMBA1        VARCHAR2(15 BYTE),
  PLOMBA2        VARCHAR2(15 BYTE),
  VZLIV          NUMBER(6),
  VOLUME         NUMBER(10),
  TEMPER         NUMBER(10,1),
  PL15           NUMBER(10,4),
  PL20           NUMBER(10,4),
  FACT_PL        NUMBER(10,4),
  PASP_ID        VARCHAR2(9 BYTE),
  PASP_NUM       VARCHAR2(20 BYTE),
  PASP_DATE      DATE,
  REZ_NUM        VARCHAR2(20 BYTE),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  WATER_P        NUMBER(6,4),
  SALT_P         NUMBER(6,4),
  SALT_MG        NUMBER(5,1),
  DIRT_P         NUMBER(6,4),
  SULFUR_P       NUMBER(6,4),
  NOM_ZD         VARCHAR2(12 BYTE),
  SVED_NUM       NUMBER(6),
  SVED_DATE      DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PODACHA_ROWS IS 'Позиции ведомости подачи';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.ID IS 'Позиции ведомости подачи';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PODACHA_ID IS 'Ведомость подачи';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.NUM_POS IS 'Номер позиции по порядку';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.NUM_CIST IS 'Номер цистерны';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.KALIBR_ID IS 'Тип вагона';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VAGOWNER_ID IS 'Собственник/владелец вагона';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.AXES IS 'Оси';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VAGONTYPE_ID IS 'Род вагона';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.NCISTDOP IS 'Признак дорог СНГ';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VAG_STATUS_ID IS 'Состояние вагона';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.DEFI_MASS_ID IS 'Метод определения массы';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VETKA_POD_ID IS 'Путь подачи';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VES IS 'Вес';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.KOL_NET IS 'Вес НЕТТО для нефти';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VES_BRUTTO IS 'Вес БРУТТО (жд)';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.ZPU_TYPE1 IS 'Тип пломбы 1';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.ZPU_TYPE2 IS 'Тип пломбы 2';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PLOMBA1 IS 'Пломба 1';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PLOMBA2 IS 'Пломба 2';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VZLIV IS 'Взлив';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.VOLUME IS 'Объем';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.TEMPER IS 'Температура';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PL15 IS 'Плотность при 15';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PL20 IS 'Плотность при 20';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.FACT_PL IS 'Фактическая плотность';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PASP_ID IS 'ID паспорта';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PASP_NUM IS 'N паспорта';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PASP_DATE IS 'Дата паспорта';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.REZ_NUM IS 'N резервуара';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.WATER_P IS 'Обводненность, %';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.SALT_P IS 'Хлористые соли, %';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.SALT_MG IS 'Хлористые соли, мг/л';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.DIRT_P IS 'Механические примеси, %';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.SULFUR_P IS 'Сера, %';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.NOM_ZD IS 'N задания';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.SVED_NUM IS 'N сведения';

COMMENT ON COLUMN MASTER.PODACHA_ROWS.SVED_DATE IS 'Дата сведения';



--
-- PREDPR_ROLE  (Table) 
--
CREATE TABLE MASTER.PREDPR_ROLE
(
  PREDPR_ID    NUMBER(6),
  KLS_ROLE_ID  NUMBER(2),
  FOX_KOD      NUMBER(7),
  KOD_MOSCOW   VARCHAR2(10 BYTE),
  KOD_ISU      VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- REESTR  (Table) 
--
CREATE TABLE MASTER.REESTR
(
  ID              NUMBER(10)                    NOT NULL,
  SVED_ID         VARCHAR2(9 BYTE),
  SVED_POS        NUMBER(5),
  VED_POD_ROW_ID  NUMBER(10),
  NUM_CIST        VARCHAR2(10 BYTE),
  NCISTDOP        NUMBER(2),
  AXES            NUMBER(2),
  CAPACITY        VARCHAR2(10 BYTE),
  WES1            VARCHAR2(5 BYTE),
  VES_CIST        NUMBER(10,3),
  VAGONTYPE_ID    NUMBER(10),
  KALIBR_ID       VARCHAR2(5 BYTE),
  TIP1            VARCHAR2(5 BYTE),
  VAGOWNER_ID     NUMBER(10),
  VETKA_POD_ID    NUMBER(10),
  VETKA_OTP_ID    NUMBER(10),
  VETKA_NAPR_ID   NUMBER(10),
  VAG_STATUS_ID   NUMBER(10)                    DEFAULT 0,
  VZLIV           NUMBER(10),
  TEMPER          NUMBER(6,1),
  FAKT_PL         NUMBER(6,4),
  VES             NUMBER(10,3)                  DEFAULT 0,
  KOL_NET         NUMBER(12,5)                  DEFAULT 0,
  VES_ALL         NUMBER(10,3)                  DEFAULT 0,
  VES_ED          NUMBER(10,3)                  DEFAULT 0,
  KOL_ED          NUMBER(6)                     DEFAULT 0,
  UPAK_ID         NUMBER(10),
  UPAK_VES        NUMBER(10,3)                  DEFAULT 0,
  UPAK_VES_ED     NUMBER(10,3)                  DEFAULT 0,
  PODDONS         NUMBER(3)                     DEFAULT 0,
  PODDON_VES      NUMBER(10,3)                  DEFAULT 0,
  SHIELDS         NUMBER(3)                     DEFAULT 0,
  SHIELD_VES      NUMBER(10,3)                  DEFAULT 0,
  ZPU_TYPE1       NUMBER(10),
  ZPU_TYPE2       NUMBER(10),
  PLOMBA1         VARCHAR2(15 BYTE),
  PLOMBA2         VARCHAR2(15 BYTE),
  ROSINSPL1       VARCHAR2(6 BYTE),
  ROSINSPL2       VARCHAR2(6 BYTE),
  NAR_LINE_ID     NUMBER(10),
  NUM_PROP        NUMBER(5),
  FIO_DRIVER      VARCHAR2(50 BYTE),
  NAKL_ID         NUMBER(10),
  FORMNAKL_ID     NUMBER(10),
  NUM_KVIT        VARCHAR2(10 BYTE),
  DATE_KVIT       DATE,
  TARIF           NUMBER(12,2)                  DEFAULT 0,
  TARIF_GUARD     NUMBER(12,2)                  DEFAULT 0,
  VOLUME          NUMBER(10)                    DEFAULT 0,
  BAD_NUM         NUMBER(1)                     DEFAULT 0,
  GOST_ID         NUMBER(2)                     DEFAULT 0,
  CTLV            NUMBER(6,4)                   DEFAULT 0,
  VOLUME15        NUMBER(8)                     DEFAULT 0,
  NAKL_POS        NUMBER(5),
  UVED_ID         NUMBER(10),
  UVED_POS        NUMBER(5),
  IS_AUTO         NUMBER(1)                     DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.REESTR IS 'Отгрузки';

COMMENT ON COLUMN MASTER.REESTR.ID IS 'Отгрузка';

COMMENT ON COLUMN MASTER.REESTR.SVED_ID IS 'ID Сведения';

COMMENT ON COLUMN MASTER.REESTR.SVED_POS IS '№ п/п';

COMMENT ON COLUMN MASTER.REESTR.VED_POD_ROW_ID IS 'ID позиции ведомости подачи';

COMMENT ON COLUMN MASTER.REESTR.NUM_CIST IS 'Номер транспортного ср-ва';

COMMENT ON COLUMN MASTER.REESTR.NCISTDOP IS 'Признак отгрузки СНГ';

COMMENT ON COLUMN MASTER.REESTR.AXES IS 'Оси';

COMMENT ON COLUMN MASTER.REESTR.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.REESTR.WES1 IS '?';

COMMENT ON COLUMN MASTER.REESTR.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.REESTR.VAGONTYPE_ID IS 'Род вагона (ЦС,КР и т.п.)';

COMMENT ON COLUMN MASTER.REESTR.KALIBR_ID IS 'Тип вагона (номер)';

COMMENT ON COLUMN MASTER.REESTR.TIP1 IS '?';

COMMENT ON COLUMN MASTER.REESTR.VAGOWNER_ID IS 'Собственник тр.ср-ва';

COMMENT ON COLUMN MASTER.REESTR.VETKA_POD_ID IS 'Откуда подан';

COMMENT ON COLUMN MASTER.REESTR.VETKA_OTP_ID IS 'Путь погрузки';

COMMENT ON COLUMN MASTER.REESTR.VETKA_NAPR_ID IS 'Направление вывода';

COMMENT ON COLUMN MASTER.REESTR.VAG_STATUS_ID IS 'Статус вагона';

COMMENT ON COLUMN MASTER.REESTR.VZLIV IS 'Взлив';

COMMENT ON COLUMN MASTER.REESTR.TEMPER IS 'Температура';

COMMENT ON COLUMN MASTER.REESTR.FAKT_PL IS 'Факт.плотность';

COMMENT ON COLUMN MASTER.REESTR.VES IS 'Вес груза';

COMMENT ON COLUMN MASTER.REESTR.KOL_NET IS 'Вес НЕТТО (для нефти)';

COMMENT ON COLUMN MASTER.REESTR.VES_ALL IS 'Вес вагона, груза, упаковки';

COMMENT ON COLUMN MASTER.REESTR.VES_ED IS 'Вес ед.груза';

COMMENT ON COLUMN MASTER.REESTR.KOL_ED IS 'Кол-во ед-ц';

COMMENT ON COLUMN MASTER.REESTR.UPAK_ID IS 'Вид упаковки';

COMMENT ON COLUMN MASTER.REESTR.UPAK_VES IS 'Вес упаковки';

COMMENT ON COLUMN MASTER.REESTR.UPAK_VES_ED IS 'Вес (КГ) пустой упаковки 1 ед-цы товара';

COMMENT ON COLUMN MASTER.REESTR.PODDONS IS 'Кол-во поддонов';

COMMENT ON COLUMN MASTER.REESTR.PODDON_VES IS 'Вес (КГ) 1 поддона';

COMMENT ON COLUMN MASTER.REESTR.SHIELDS IS 'Кол-во щитов';

COMMENT ON COLUMN MASTER.REESTR.SHIELD_VES IS 'Вес (КГ) 1 щита';

COMMENT ON COLUMN MASTER.REESTR.ZPU_TYPE1 IS 'Тип пломбы 1';

COMMENT ON COLUMN MASTER.REESTR.ZPU_TYPE2 IS 'Тип пломбы 2';

COMMENT ON COLUMN MASTER.REESTR.PLOMBA1 IS 'Пломба 1';

COMMENT ON COLUMN MASTER.REESTR.PLOMBA2 IS 'Пломба 2';

COMMENT ON COLUMN MASTER.REESTR.ROSINSPL1 IS 'Пломба Росинспектората 1';

COMMENT ON COLUMN MASTER.REESTR.ROSINSPL2 IS 'Пломба Росинспектората 2';

COMMENT ON COLUMN MASTER.REESTR.NAR_LINE_ID IS 'ID позиции наряда/разрешения';

COMMENT ON COLUMN MASTER.REESTR.NUM_PROP IS '№ пропуска';

COMMENT ON COLUMN MASTER.REESTR.FIO_DRIVER IS 'ФИО водителя';

COMMENT ON COLUMN MASTER.REESTR.NAKL_ID IS 'ID накладной';

COMMENT ON COLUMN MASTER.REESTR.FORMNAKL_ID IS 'Форма накладной';

COMMENT ON COLUMN MASTER.REESTR.NUM_KVIT IS 'N квитанции';

COMMENT ON COLUMN MASTER.REESTR.DATE_KVIT IS 'Дата квитанции';

COMMENT ON COLUMN MASTER.REESTR.TARIF IS 'Тариф';

COMMENT ON COLUMN MASTER.REESTR.TARIF_GUARD IS 'Плата за охрану';

COMMENT ON COLUMN MASTER.REESTR.VOLUME IS 'Объем';

COMMENT ON COLUMN MASTER.REESTR.BAD_NUM IS '1-Неверный номер вагона';

COMMENT ON COLUMN MASTER.REESTR.GOST_ID IS 'ГОСТ расчета веса';

COMMENT ON COLUMN MASTER.REESTR.CTLV IS 'Коэффициент коррекции объема';

COMMENT ON COLUMN MASTER.REESTR.VOLUME15 IS 'Объем при 15''C';

COMMENT ON COLUMN MASTER.REESTR.NAKL_POS IS '№ п/п в накладной';

COMMENT ON COLUMN MASTER.REESTR.UVED_ID IS 'Уведомление об уборке';

COMMENT ON COLUMN MASTER.REESTR.UVED_POS IS '№ п/п в уведомлении об уборке';

COMMENT ON COLUMN MASTER.REESTR.IS_AUTO IS '1-Вес рассчитан автоматически';



--
-- R3_BILL_POS  (Table) 
--
CREATE TABLE MASTER.R3_BILL_POS
(
  VBELN           NUMBER(15)                    NOT NULL,
  R3_BILL_POS_ID  NUMBER(15)                    NOT NULL,
  CENA_BN         NUMBER(15,6)                  DEFAULT 0,
  CENA            NUMBER(15,6)                  DEFAULT 0,
  SUMMA_BN        NUMBER(20,6)                  DEFAULT 0,
  SUMMA_NDS       NUMBER(20,6)                  DEFAULT 0,
  SUMMA_AKCIZ     NUMBER(20,6)                  DEFAULT 0,
  SUMMA           NUMBER(20,6)                  DEFAULT 0,
  VBAP_MATNR      VARCHAR2(10 BYTE),
  VES             NUMBER(15,6)                  DEFAULT 0,
  DATE_REALIZ     DATE,
  PROD_ID_NPR     VARCHAR2(5 BYTE),
  IS_AGENT        NUMBER(1),
  NOM_DOK         NUMBER(7),
  OWNERSHIP_ID    NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_BILL_POS.VBELN IS 'Счет из R3';

COMMENT ON COLUMN MASTER.R3_BILL_POS.R3_BILL_POS_ID IS 'Позиция счета из R3';

COMMENT ON COLUMN MASTER.R3_BILL_POS.CENA_BN IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.R3_BILL_POS.CENA IS 'Отпускная цена';

COMMENT ON COLUMN MASTER.R3_BILL_POS.SUMMA_BN IS 'Сумма без налогов';

COMMENT ON COLUMN MASTER.R3_BILL_POS.SUMMA_NDS IS 'НДС';

COMMENT ON COLUMN MASTER.R3_BILL_POS.SUMMA_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.R3_BILL_POS.SUMMA IS 'Сумма';

COMMENT ON COLUMN MASTER.R3_BILL_POS.VBAP_MATNR IS 'Материал';



--
-- STAN_PREDPR  (Table) 
--
CREATE TABLE MASTER.STAN_PREDPR
(
  PREDPR_ID     NUMBER(6),
  STAN_ID       NUMBER(10),
  VETKA_ID      NUMBER(4),
  PREDPR_GDKOD  VARCHAR2(12 BYTE),
  IS_MAIN       NUMBER(1)                       DEFAULT 0,
  ID            NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.STAN_PREDPR IS 'Терминалы';

COMMENT ON COLUMN MASTER.STAN_PREDPR.PREDPR_ID IS 'Предприятие';

COMMENT ON COLUMN MASTER.STAN_PREDPR.STAN_ID IS 'Станция';

COMMENT ON COLUMN MASTER.STAN_PREDPR.VETKA_ID IS 'Ветка';

COMMENT ON COLUMN MASTER.STAN_PREDPR.PREDPR_GDKOD IS 'ж/д код';

COMMENT ON COLUMN MASTER.STAN_PREDPR.IS_MAIN IS 'Основной терминал';

COMMENT ON COLUMN MASTER.STAN_PREDPR.ID IS 'Терминал';



--
-- VED_OSMOTR_ROW  (Table) 
--
CREATE TABLE MASTER.VED_OSMOTR_ROW
(
  ID             NUMBER(10)                     NOT NULL,
  VED_ID         NUMBER(10),
  POD_DATE       DATE,
  NUM_CIST       VARCHAR2(10 BYTE),
  KALIBR_ID      VARCHAR2(5 BYTE),
  RAZMET_PER     VARCHAR2(50 BYTE),
  F_OST          NUMBER(1)                      DEFAULT 0,
  PRIM           VARCHAR2(50 BYTE),
  POD_POS        NUMBER(10),
  PROD_ID_NPR    VARCHAR2(6 BYTE),
  VAGOWNER_ID    NUMBER(10),
  CAPACITY       VARCHAR2(10 BYTE),
  NCISTDOP       NUMBER(2),
  AXES           NUMBER(2),
  VES_CIST       NUMBER(10,3),
  VAGONTYPE_ID   NUMBER(10),
  BAD_NUM        NUMBER(1)                      DEFAULT 0,
  VAG_STATUS_ID  NUMBER(10)                     DEFAULT 0,
  GOST1510       NUMBER(1)                      DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.VED_OSMOTR_ROW IS 'Позиции ведомости предварительного осмотра';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.VED_ID IS 'Ведомость';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.POD_DATE IS 'Дата/время подхода';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.NUM_CIST IS '№ цистерны';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.KALIBR_ID IS 'Тип';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.RAZMET_PER IS 'Разметка по пересылке';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.F_OST IS 'Наличие остатка';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.PRIM IS 'Примечание';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.POD_POS IS '№ п/п';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.PROD_ID_NPR IS 'Под какой продукт годен';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.VAGOWNER_ID IS 'Владелец вагона';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.NCISTDOP IS 'Признак дорог СНГ';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.AXES IS 'Осность';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.VAGONTYPE_ID IS 'Род вагона';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.BAD_NUM IS '1-Неверный номер';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.VAG_STATUS_ID IS 'Статус вагона';

COMMENT ON COLUMN MASTER.VED_OSMOTR_ROW.GOST1510 IS 'Подготовка под налив по ГОСТ 1510';



--
-- VED_POD  (Table) 
--
CREATE TABLE MASTER.VED_POD
(
  ID              NUMBER(10)                    NOT NULL,
  MESTO_ID        NUMBER(10)                    DEFAULT 1,
  LOAD_TYPE_ID    NUMBER(10)                    DEFAULT 1,
  VETKA_OTP_ID    NUMBER(10),
  POD_NUM         NUMBER(10),
  POD_DATE        DATE,
  TECH_TIME       DATE,
  GOTOV_TIME      DATE,
  BEG_NALIV_TIME  DATE,
  END_NALIV_TIME  DATE,
  KOL             NUMBER(5)                     DEFAULT 0,
  VES_CIST        NUMBER(12,3)                  DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.VED_POD IS 'Ведомость подачи';

COMMENT ON COLUMN MASTER.VED_POD.ID IS 'ID ведомости подачи';

COMMENT ON COLUMN MASTER.VED_POD.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.VED_POD.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.VED_POD.VETKA_OTP_ID IS 'Ветка отправителя';

COMMENT ON COLUMN MASTER.VED_POD.POD_NUM IS 'Номер ведомости';

COMMENT ON COLUMN MASTER.VED_POD.POD_DATE IS 'Дата ведомости';

COMMENT ON COLUMN MASTER.VED_POD.TECH_TIME IS 'Техническая годность';

COMMENT ON COLUMN MASTER.VED_POD.GOTOV_TIME IS 'Дата коммерческой годности';

COMMENT ON COLUMN MASTER.VED_POD.BEG_NALIV_TIME IS 'Дата начала налива';

COMMENT ON COLUMN MASTER.VED_POD.END_NALIV_TIME IS 'Дата окончания налива';

COMMENT ON COLUMN MASTER.VED_POD.KOL IS 'Кол-во вагонов';

COMMENT ON COLUMN MASTER.VED_POD.VES_CIST IS 'Вес вагонов';



--
-- VED_POD_ROW  (Table) 
--
CREATE TABLE MASTER.VED_POD_ROW
(
  ID                 NUMBER(10)                 NOT NULL,
  VED_POD_ID         NUMBER(10),
  POD_POS            NUMBER(10),
  RAZMET_FACT        VARCHAR2(30 BYTE),
  NUM_CIST           VARCHAR2(10 BYTE),
  NCISTDOP           NUMBER(2),
  AXES               NUMBER(2),
  CAPACITY           VARCHAR2(10 BYTE),
  VES_CIST           NUMBER(10,3)               DEFAULT 0,
  VAGONTYPE_ID       NUMBER(10),
  KALIBR_ID          VARCHAR2(5 BYTE),
  VAGOWNER_ID        NUMBER(10),
  VETKA_POD_ID       NUMBER(10),
  VETKA_NAPR_ID      NUMBER(10),
  VAG_STATUS_ID      NUMBER(10),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  VZLIV              NUMBER(10),
  TEMPER             NUMBER(6,1),
  VOLUME             NUMBER(10)                 DEFAULT 0,
  BAD_NUM            NUMBER(1)                  DEFAULT 0,
  ZPU_TYPE1          NUMBER(10),
  ZPU_TYPE2          NUMBER(10),
  PLOMBA1            VARCHAR2(15 BYTE),
  PLOMBA2            VARCHAR2(15 BYTE),
  ROSINSPL1          VARCHAR2(15 BYTE),
  ROSINSPL2          VARCHAR2(15 BYTE),
  VED_OSMOTR_ROW_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.VED_POD_ROW IS 'Позиции ведомости подачи';

COMMENT ON COLUMN MASTER.VED_POD_ROW.ID IS 'Позиции ведомости подачи';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VED_POD_ID IS 'Ведомость подачи';

COMMENT ON COLUMN MASTER.VED_POD_ROW.POD_POS IS '№ п/п';

COMMENT ON COLUMN MASTER.VED_POD_ROW.RAZMET_FACT IS 'Разметка под груз';

COMMENT ON COLUMN MASTER.VED_POD_ROW.NUM_CIST IS 'Номер цистерны';

COMMENT ON COLUMN MASTER.VED_POD_ROW.NCISTDOP IS 'Признак дорог СНГ';

COMMENT ON COLUMN MASTER.VED_POD_ROW.AXES IS 'Оси';

COMMENT ON COLUMN MASTER.VED_POD_ROW.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VAGONTYPE_ID IS 'Род вагона';

COMMENT ON COLUMN MASTER.VED_POD_ROW.KALIBR_ID IS 'Тип вагона';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VAGOWNER_ID IS 'Собственник/владелец вагона';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VETKA_POD_ID IS 'Путь подачи';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VETKA_NAPR_ID IS 'Направление вывода';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VAG_STATUS_ID IS 'Состояние вагона';

COMMENT ON COLUMN MASTER.VED_POD_ROW.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VZLIV IS 'Взлив';

COMMENT ON COLUMN MASTER.VED_POD_ROW.TEMPER IS 'Температура';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VOLUME IS 'Объем';

COMMENT ON COLUMN MASTER.VED_POD_ROW.BAD_NUM IS '1-Неверный номер';

COMMENT ON COLUMN MASTER.VED_POD_ROW.ZPU_TYPE1 IS 'Тип пломбы 1';

COMMENT ON COLUMN MASTER.VED_POD_ROW.ZPU_TYPE2 IS 'Тип пломбы 2';

COMMENT ON COLUMN MASTER.VED_POD_ROW.PLOMBA1 IS 'Пломба 1';

COMMENT ON COLUMN MASTER.VED_POD_ROW.PLOMBA2 IS 'Пломба 2';

COMMENT ON COLUMN MASTER.VED_POD_ROW.ROSINSPL1 IS 'Пломба Росинспектората 1';

COMMENT ON COLUMN MASTER.VED_POD_ROW.ROSINSPL2 IS 'Пломба Росинспектората 2';

COMMENT ON COLUMN MASTER.VED_POD_ROW.VED_OSMOTR_ROW_ID IS 'ID позиции ведомости предварительного осмотра';



--
-- BILLS_DATE_BUXG  (Index) 
--
CREATE INDEX MASTER.BILLS_DATE_BUXG ON MASTER.BILLS
(DATE_BUXG)
TABLESPACE USERSINDX;


--
-- BILLS_DATE_KVIT  (Index) 
--
CREATE INDEX MASTER.BILLS_DATE_KVIT ON MASTER.BILLS
(DATE_KVIT)
TABLESPACE USERSINDX;


--
-- BILLS_DATE_MOS_I  (Index) 
--
CREATE INDEX MASTER.BILLS_DATE_MOS_I ON MASTER.BILLS
(DATE_MOS)
TABLESPACE USERSINDX;


--
-- BILLS_DATE_PLAT_I  (Index) 
--
CREATE INDEX MASTER.BILLS_DATE_PLAT_I ON MASTER.BILLS
(DATE_PLAT)
TABLESPACE USERSINDX;


--
-- BILLS_DATE_VYP_SF  (Index) 
--
CREATE INDEX MASTER.BILLS_DATE_VYP_SF ON MASTER.BILLS
(DATE_VYP_SF)
TABLESPACE USERSINDX;


--
-- BILLS_DOG_ID  (Index) 
--
CREATE INDEX MASTER.BILLS_DOG_ID ON MASTER.BILLS
(DOG_ID)
TABLESPACE USERSINDX;


--
-- BILLS_IS_KORR_I  (Index) 
--
CREATE BITMAP INDEX MASTER.BILLS_IS_KORR_I ON MASTER.BILLS
(IS_KORR)
TABLESPACE USERSINDX;


--
-- BILLS_ISU_KOD_I  (Index) 
--
CREATE INDEX MASTER.BILLS_ISU_KOD_I ON MASTER.BILLS
(ISU_KOD)
TABLESPACE USERSINDX;


--
-- BILLS_KORR_PROD_I  (Index) 
--
CREATE INDEX MASTER.BILLS_KORR_PROD_I ON MASTER.BILLS
(KORR_PROD)
TABLESPACE USERSINDX;


--
-- BILLS_LUK_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_LUK_USL_DOG_FK_I ON MASTER.BILLS
(LUK_DOG_ID, LUK_USL_NUMBER)
TABLESPACE USERSINDX;


--
-- BILLS_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_MONTH_FK_I ON MASTER.BILLS
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- BILLS_NAZN_OTG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_NAZN_OTG_FK_I ON MASTER.BILLS
(NAZN_OTG_ID)
TABLESPACE USERSINDX;


--
-- BILLS_NOM_SF  (Index) 
--
CREATE INDEX MASTER.BILLS_NOM_SF ON MASTER.BILLS
(NOM_SF)
TABLESPACE USERSINDX;


--
-- BILLS_OLD_DOK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_OLD_DOK_I ON MASTER.BILLS
(OLD_NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_OWNER_FK_I ON MASTER.BILLS
(OWNER_ID)
TABLESPACE USERSINDX;


--
-- BILLS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILLS_PK ON MASTER.BILLS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_PROD_FK_I ON MASTER.BILLS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_CAT_CEN_FK_I ON MASTER.BILLS_SNP
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_DATE_BUXG  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_DATE_BUXG ON MASTER.BILLS_SNP
(DATE_BUXG)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_DATE_KVIT  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_DATE_KVIT ON MASTER.BILLS_SNP
(DATE_KVIT)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_DATE_MOS_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_DATE_MOS_I ON MASTER.BILLS_SNP
(DATE_MOS)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_DATE_VYP_SF  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_DATE_VYP_SF ON MASTER.BILLS_SNP
(DATE_VYP_SF)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_MONTH_FK_I ON MASTER.BILLS_SNP
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_NOM_SF  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_NOM_SF ON MASTER.BILLS_SNP
(NOM_SF)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_NPR_PRICES_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_NPR_PRICES_FK_I ON MASTER.BILLS_SNP
(NPR_PRICES_ID)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_OWNER_FK_I ON MASTER.BILLS_SNP
(OWNER_ID)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILLS_SNP_PK ON MASTER.BILLS_SNP
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_PROD_FK_I ON MASTER.BILLS_SNP
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_SUMMA_DOK  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_SUMMA_DOK ON MASTER.BILLS_SNP
(SUMMA_DOK)
TABLESPACE USERSINDX;


--
-- BILLS__SNP_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS__SNP_USL_DOG_FK_I ON MASTER.BILLS
(SNP_DOG_ID, SNP_USL_NUMBER)
TABLESPACE USERSINDX;


--
-- BILLS_SNP_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_SNP_USL_DOG_FK_I ON MASTER.BILLS_SNP
(DOG_ID, USL_NUMBER)
TABLESPACE USERSINDX;


--
-- BILLS_SUMMA_DOK  (Index) 
--
CREATE INDEX MASTER.BILLS_SUMMA_DOK ON MASTER.BILLS
(SUMMA_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_TO_KORR_I  (Index) 
--
CREATE BITMAP INDEX MASTER.BILLS_TO_KORR_I ON MASTER.BILLS
(TO_KORR)
TABLESPACE USERSINDX;


--
-- BILLS_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_USL_DOG_FK_I ON MASTER.BILLS
(DOG_ID, USL_NUMBER)
TABLESPACE USERSINDX;


--
-- DAYLY_FACT_MAIN  (Index) 
--
CREATE UNIQUE INDEX MASTER.DAYLY_FACT_MAIN ON MASTER.DAYLY_FACT
(KOD_PLAN, DATA, PROD)
TABLESPACE USERSINDX;


--
-- D_FACT_DEC_FK_I  (Index) 
--
CREATE INDEX MASTER.D_FACT_DEC_FK_I ON MASTER.DAYLY_FACT
(KOD_DEC)
TABLESPACE USERSINDX;


--
-- D_FACT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.D_FACT_PK ON MASTER.DAYLY_FACT
(KOD)
TABLESPACE USERSINDX;


--
-- D_FACT_PLAN_REF_FK_I  (Index) 
--
CREATE INDEX MASTER.D_FACT_PLAN_REF_FK_I ON MASTER.DAYLY_FACT
(KOD_PLAN)
TABLESPACE USERSINDX;


--
-- D_FACT_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.D_FACT_PROD_FK_I ON MASTER.DAYLY_FACT
(PROD)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_INN_I  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_INN_I ON MASTER.KLS_PREDPR
(INN)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_OKPO_I  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_OKPO_I ON MASTER.KLS_PREDPR
(OKPO)
TABLESPACE USERSINDX;


--
-- KLS_PREDPR_TAG_I  (Index) 
--
CREATE INDEX MASTER.KLS_PREDPR_TAG_I ON MASTER.KLS_PREDPR
(TAG)
TABLESPACE USERSINDX;


--
-- KLS_VETKA_NAME_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KLS_VETKA_NAME_UK ON MASTER.KLS_VETKA
(VETKA_NAME)
TABLESPACE USERS;


--
-- NAKL_DATE_I  (Index) 
--
CREATE INDEX MASTER.NAKL_DATE_I ON MASTER.NAKL
(NAKL_DATE)
TABLESPACE USERSINDX;


--
-- NAKL_FORMNAKL_FK_I  (Index) 
--
CREATE INDEX MASTER.NAKL_FORMNAKL_FK_I ON MASTER.NAKL
(FORMNAKL_ID)
TABLESPACE USERSINDX;


--
-- NAKL_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.NAKL_MESTO_FK_I ON MASTER.NAKL
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- NAKL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NAKL_PK ON MASTER.NAKL
(ID)
TABLESPACE USERSINDX;


--
-- NAKL_SHABEXP_FK_I  (Index) 
--
CREATE INDEX MASTER.NAKL_SHABEXP_FK_I ON MASTER.NAKL
(SHABEXP_ID)
TABLESPACE USERSINDX;


--
-- NAKL_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NAKL_UK ON MASTER.NAKL
(MESTO_ID, TRUNC("NAKL_DATE",'fmyyyy'), NAKL_NUM)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_BEGIN_DATE  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_BEGIN_DATE ON MASTER.NPR_PRICES
(BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_CAT_CEN_FK_I ON MASTER.NPR_PRICES
(CAT_CEN_ID, PROD_ID_NPR, BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_END_DATE  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_END_DATE ON MASTER.NPR_PRICES
(END_DATE)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_IS_ORIGINAL  (Index) 
--
CREATE BITMAP INDEX MASTER.NPR_PRICES_IS_ORIGINAL ON MASTER.NPR_PRICES
(IS_ORIGINAL)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_OWNERSHIP_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_OWNERSHIP_FK_I ON MASTER.NPR_PRICES
(OWNERSHIP_ID)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.NPR_PRICES_PK ON MASTER.NPR_PRICES
(ID)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_PROD_FK_I ON MASTER.NPR_PRICES
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- NPR_PRICES_SUPPLIER_FK_I  (Index) 
--
CREATE INDEX MASTER.NPR_PRICES_SUPPLIER_FK_I ON MASTER.NPR_PRICES
(SUPPLIER_ID)
TABLESPACE USERSINDX;


--
-- ORG_STRUCTURE_FILIAL_I  (Index) 
--
CREATE UNIQUE INDEX MASTER.ORG_STRUCTURE_FILIAL_I ON MASTER.ORG_STRUCTURE
(FILIAL)
TABLESPACE USERSINDX;


--
-- ORG_STRUCTURE_PARUS_CRN_I  (Index) 
--
CREATE INDEX MASTER.ORG_STRUCTURE_PARUS_CRN_I ON MASTER.ORG_STRUCTURE
(PARUS_CRN_AUTO)
TABLESPACE USERSINDX;


--
-- ORG_STRUCTURE_PLAN_REAL_I  (Index) 
--
CREATE INDEX MASTER.ORG_STRUCTURE_PLAN_REAL_I ON MASTER.ORG_STRUCTURE
(PLAN_REAL)
TABLESPACE USERSINDX;


--
-- ORG_STRU_ORG_KIND_FK_I  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_ORG_KIND_FK_I ON MASTER.ORG_STRUCTURE
(ORG_KIND_ID)
TABLESPACE USERSINDX;


--
-- ORG_STRU_ORG_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_ORG_TYPE_FK_I ON MASTER.ORG_STRUCTURE
(ORG_TYPE_ID)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PARUS_DEPARTMENT_I  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_PARUS_DEPARTMENT_I ON MASTER.ORG_STRUCTURE
(PARUS_DEPARTMENT)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ORG_STRU_PK ON MASTER.ORG_STRUCTURE
(ID)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PLAN_AUTO_DEP  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_PLAN_AUTO_DEP ON MASTER.ORG_STRUCTURE
(PARUS_PLAN_AUTO_DEP)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PLAN_AZC_DEP  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_PLAN_AZC_DEP ON MASTER.ORG_STRUCTURE
(PARUS_PLAN_AZC_DEP)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PLAN_MB_DEP  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_PLAN_MB_DEP ON MASTER.ORG_STRUCTURE
(PARUS_PLAN_MB_DEP)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PLAN_TRAN_DEP  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_PLAN_TRAN_DEP ON MASTER.ORG_STRUCTURE
(PARUS_PLAN_TRAN_DEP)
TABLESPACE USERSINDX;


--
-- ORG_STRU_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.ORG_STRU_PREDPR_FK_I ON MASTER.ORG_STRUCTURE
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PREDPR_CONTACTS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PREDPR_CONTACTS ON MASTER.KLS_PREDPR_CONTACTS
(ID)
TABLESPACE USERSINDX;


--
-- PK_KLS_PREDPR_RS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_PREDPR_RS ON MASTER.KLS_PREDPR_RS
(ID)
TABLESPACE USERSINDX;


--
-- PLANPOST_S_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLANPOST_S_PK ON MASTER.PLAN_POST_SVOD
(ID)
TABLESPACE USERSINDX;


--
-- PLANPOST_S_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PLANPOST_S_PLANSTRU_FK_I ON MASTER.PLAN_POST_SVOD
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLANPOST_S_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.PLANPOST_S_PREDPR_FK_I ON MASTER.PLAN_POST_SVOD
(SUPPLIER_ID)
TABLESPACE USERSINDX;


--
-- PLANPOST_S_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PLANPOST_S_PROD_FK_I ON MASTER.PLAN_POST_SVOD
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PODACHA_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.PODACHA_LOAD_TYPE_FK_I ON MASTER.PODACHA
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- PODACHA_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.PODACHA_MESTO_FK_I ON MASTER.PODACHA
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- PODACHA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PODACHA_PK ON MASTER.PODACHA
(ID)
TABLESPACE USERSINDX;


--
-- PODACHA_ROW_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PODACHA_ROW_PROD_FK_I ON MASTER.PODACHA_ROWS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PODACHA_ROWS_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.PODACHA_ROWS_VAGOWNER_FK_I ON MASTER.PODACHA_ROWS
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- PODACHA_VETKA_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.PODACHA_VETKA_OTP_FK_I ON MASTER.PODACHA
(VETKA_OTP_ID)
TABLESPACE USERSINDX;


--
-- POD_ROWS_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.POD_ROWS_KALIBR_FK_I ON MASTER.PODACHA_ROWS
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- POD_ROWS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.POD_ROWS_PK ON MASTER.PODACHA_ROWS
(ID)
TABLESPACE USERSINDX;


--
-- POD_ROWS_PODACHA_FK_I  (Index) 
--
CREATE INDEX MASTER.POD_ROWS_PODACHA_FK_I ON MASTER.PODACHA_ROWS
(PODACHA_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_BANK_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_BANK_FK_I ON MASTER.KLS_PREDPR
(BANK_KORS)
TABLESPACE USERSINDX;


--
-- PREDPR_BANKS_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_BANKS_FK_I ON MASTER.KLS_PREDPR
(BANKS_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_CLASS_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_CLASS_FK_I ON MASTER.KLS_PREDPR
(CLASS_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_CONTACTS_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_CONTACTS_PREDPR_FK_I ON MASTER.KLS_PREDPR_CONTACTS
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_HOLDING_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_HOLDING_FK_I ON MASTER.KLS_PREDPR
(HOLDING_ID)
TABLESPACE USERSINDX;


--
-- PREDPRKONS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PREDPRKONS_PK ON MASTER.KLS_PREDPR_KONS
(ID)
TABLESPACE USERSINDX;


--
-- PREDPRKONS_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPRKONS_PREDPR_FK_I ON MASTER.KLS_PREDPR_KONS
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_PERTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_PERTYPE_FK_I ON MASTER.KLS_PREDPR
(PERTYPE_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PREDPR_PK ON MASTER.KLS_PREDPR
(ID)
TABLESPACE USERSINDX;


--
-- PREDPR_REGION_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_REGION_FK_I ON MASTER.KLS_PREDPR
(REGION_ID)
TABLESPACE USERSINDX;


--
-- PREDPR_RS_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.PREDPR_RS_PREDPR_FK_I ON MASTER.KLS_PREDPR_RS
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- PROD2CENN_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD2CENN_CAT_CEN_FK_I ON MASTER.JKCOMMIT_PROD2CENN
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- PROD2CENN_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PROD2CENN_PROD_FK_I ON MASTER.JKCOMMIT_PROD2CENN
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PROD2CENN_PROD2CENN_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PROD2CENN_PROD2CENN_UK ON MASTER.JKCOMMIT_PROD2CENN
(CAT_CEN_ID, PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- REESTR_FORMNAKL_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_FORMNAKL_FK_I ON MASTER.REESTR
(FORMNAKL_ID)
TABLESPACE USERSINDX;


--
-- REESTR_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_KALIBR_FK_I ON MASTER.REESTR
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- REESTR_NAKL_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_NAKL_FK_I ON MASTER.REESTR
(NAKL_ID)
TABLESPACE USERSINDX;


--
-- REESTR_NAR_LINE_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_NAR_LINE_FK_I ON MASTER.REESTR
(NAR_LINE_ID)
TABLESPACE USERSINDX;


--
-- REESTR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_PK ON MASTER.REESTR
(ID)
TABLESPACE USERSINDX;


--
-- REESTR_SVED_ID  (Index) 
--
CREATE INDEX MASTER.REESTR_SVED_ID ON MASTER.REESTR
(SVED_ID)
TABLESPACE USERSINDX;


--
-- REESTR_UPAK_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_UPAK_FK_I ON MASTER.REESTR
(UPAK_ID)
TABLESPACE USERSINDX;


--
-- REESTR_UVED_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_UVED_FK_I ON MASTER.REESTR
(UVED_ID)
TABLESPACE USERSINDX;


--
-- REESTR_VAGONTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_VAGONTYPE_FK_I ON MASTER.REESTR
(VAGONTYPE_ID)
TABLESPACE USERSINDX;


--
-- REESTR_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_VAGOWNER_FK_I ON MASTER.REESTR
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- REESTR_VED_POD_ROW_I  (Index) 
--
CREATE UNIQUE INDEX MASTER.REESTR_VED_POD_ROW_I ON MASTER.REESTR
(VED_POD_ROW_ID)
TABLESPACE USERSINDX;


--
-- REESTR_VETKA_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.REESTR_VETKA_OTP_FK_I ON MASTER.REESTR
(VETKA_OTP_ID)
TABLESPACE USERSINDX;


--
-- ROLE_PR_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.ROLE_PR_PREDPR_FK_I ON MASTER.PREDPR_ROLE
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- ROLE_PR_ROLE_PR_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ROLE_PR_ROLE_PR_UK ON MASTER.PREDPR_ROLE
(PREDPR_ID, KLS_ROLE_ID)
TABLESPACE USERSINDX;


--
-- ROLE_PR_ROLE_SPR_FK_I  (Index) 
--
CREATE INDEX MASTER.ROLE_PR_ROLE_SPR_FK_I ON MASTER.PREDPR_ROLE
(KLS_ROLE_ID)
TABLESPACE USERSINDX;


--
-- R3_BILL_POS_DATE_REALIZ  (Index) 
--
CREATE INDEX MASTER.R3_BILL_POS_DATE_REALIZ ON MASTER.R3_BILL_POS
(DATE_REALIZ, IS_AGENT, NOM_DOK)
TABLESPACE USERSINDX;


--
-- R3_BILLPOS_MATERIALS_FK_I  (Index) 
--
CREATE INDEX MASTER.R3_BILLPOS_MATERIALS_FK_I ON MASTER.R3_BILL_POS
(VBAP_MATNR)
TABLESPACE USERSINDX;


--
-- R3_BILLPOS_NOM_DOK_I  (Index) 
--
CREATE INDEX MASTER.R3_BILLPOS_NOM_DOK_I ON MASTER.R3_BILL_POS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- R3_BILLPOS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.R3_BILLPOS_PK ON MASTER.R3_BILL_POS
(VBELN, R3_BILL_POS_ID)
TABLESPACE USERSINDX;


--
-- R3_BILLPOS_R3_BILLS_FK_I  (Index) 
--
CREATE INDEX MASTER.R3_BILLPOS_R3_BILLS_FK_I ON MASTER.R3_BILL_POS
(VBELN)
TABLESPACE USERSINDX;


--
-- SHABEXP_AK  (Index) 
--
CREATE INDEX MASTER.SHABEXP_AK ON MASTER.KLS_SHABEXP
(DOG_ID, PROD_ID_NPR, STAN_ID)
TABLESPACE USERSINDX;


--
-- SHABEXP_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.SHABEXP_DOG_FK_I ON MASTER.KLS_SHABEXP
(DOG_ID)
TABLESPACE USERSINDX;


--
-- SHABEXP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SHABEXP_PK ON MASTER.KLS_SHABEXP
(ID)
TABLESPACE USERSINDX;


--
-- SHABEXP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.SHABEXP_PROD_FK_I ON MASTER.KLS_SHABEXP
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- SHABEXP_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.SHABEXP_STAN_FK_I ON MASTER.KLS_SHABEXP
(STAN_ID)
TABLESPACE USERSINDX;


--
-- STAN_PRED_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.STAN_PRED_PREDPR_FK_I ON MASTER.STAN_PREDPR
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- STAN_PREDPR_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.STAN_PREDPR_PK ON MASTER.STAN_PREDPR
(ID)
TABLESPACE USERSINDX;


--
-- STAN_PRED_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.STAN_PRED_STAN_FK_I ON MASTER.STAN_PREDPR
(STAN_ID)
TABLESPACE USERSINDX;


--
-- STAN_PRED_STAN_PRED_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.STAN_PRED_STAN_PRED_UK ON MASTER.STAN_PREDPR
(STAN_ID, PREDPR_ID, VETKA_ID)
TABLESPACE USERSINDX;


--
-- STAN_PRED_VETKA_FK_I  (Index) 
--
CREATE INDEX MASTER.STAN_PRED_VETKA_FK_I ON MASTER.STAN_PREDPR
(VETKA_ID)
TABLESPACE USERSINDX;


--
-- TEX_PD_GROTP_FK_I  (Index) 
--
CREATE INDEX MASTER.TEX_PD_GROTP_FK_I ON MASTER.KLS_TEX_PD
(GROTP_ID)
TABLESPACE USERSINDX;


--
-- TEX_PD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.TEX_PD_PK ON MASTER.KLS_TEX_PD
(ID, GROTP_ID)
TABLESPACE USERSINDX;


--
-- TEX_PD_PLATTARIF_FK_I  (Index) 
--
CREATE INDEX MASTER.TEX_PD_PLATTARIF_FK_I ON MASTER.KLS_TEX_PD
(PLATTARIF_ID)
TABLESPACE USERSINDX;


--
-- VAGOWNER_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VAGOWNER_PK ON MASTER.KLS_VAGOWNER
(ID)
TABLESPACE USERSINDX;


--
-- VAGOWNER_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.VAGOWNER_PREDPR_FK_I ON MASTER.KLS_VAGOWNER
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- VAGOWNER_SORTBY_I  (Index) 
--
CREATE INDEX MASTER.VAGOWNER_SORTBY_I ON MASTER.KLS_VAGOWNER
(SORTBY)
TABLESPACE USERSINDX;


--
-- VAGOWNER_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.VAGOWNER_VAGOWNER_FK_I ON MASTER.KLS_VAGOWNER
(SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- VAGOWNER_VAGOWN_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.VAGOWNER_VAGOWN_MOS_FK_I ON MASTER.KLS_VAGOWNER
(VAGOWN_MOS_ID)
TABLESPACE USERSINDX;


--
-- VAGOWNER_VAGOWN_TYP_FK_I  (Index) 
--
CREATE INDEX MASTER.VAGOWNER_VAGOWN_TYP_FK_I ON MASTER.KLS_VAGOWNER
(VAGOWN_TYP_ID)
TABLESPACE USERSINDX;


--
-- VED_OSMORT_ROW_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_OSMORT_ROW_PK ON MASTER.VED_OSMOTR_ROW
(ID)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_ROW_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_ROW_KALIBR_FK_I ON MASTER.VED_OSMOTR_ROW
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_ROW_PROD_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_ROW_PROD_I ON MASTER.VED_OSMOTR_ROW
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_ROW_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_OSMOTR_ROW_UK ON MASTER.VED_OSMOTR_ROW
(VED_ID, NUM_CIST)
TABLESPACE USERSINDX;


--
-- VED_OSMOTR_ROW_VAGOWNER_I  (Index) 
--
CREATE INDEX MASTER.VED_OSMOTR_ROW_VAGOWNER_I ON MASTER.VED_OSMOTR_ROW
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- VED_POD_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_POD_LOAD_TYPE_FK_I ON MASTER.VED_POD
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- VED_POD_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_POD_MESTO_FK_I ON MASTER.VED_POD
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- VED_POD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_POD_PK ON MASTER.VED_POD
(ID)
TABLESPACE USERSINDX;


--
-- VED_POD_ROW_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_POD_ROW_KALIBR_FK_I ON MASTER.VED_POD_ROW
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- VED_POD_ROW_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_POD_ROW_PK ON MASTER.VED_POD_ROW
(ID)
TABLESPACE USERSINDX;


--
-- VED_POD_ROW_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_POD_ROW_PROD_FK_I ON MASTER.VED_POD_ROW
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- VED_POD_ROW_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_POD_ROW_UK ON MASTER.VED_POD_ROW
(VED_POD_ID, NUM_CIST)
TABLESPACE USERSINDX;


--
-- VED_POD_ROW_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_POD_ROW_VAGOWNER_FK_I ON MASTER.VED_POD_ROW
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- VED_POD_ROW_VOR_I  (Index) 
--
CREATE UNIQUE INDEX MASTER.VED_POD_ROW_VOR_I ON MASTER.VED_POD_ROW
(VED_OSMOTR_ROW_ID)
TABLESPACE USERSINDX;


--
-- VED_POD_VETKA_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.VED_POD_VETKA_OTP_FK_I ON MASTER.VED_POD
(VETKA_OTP_ID)
TABLESPACE USERSINDX;


--
-- VETKA_OTP_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.VETKA_OTP_LOAD_TYPE_FK_I ON MASTER.KLS_VETKA_OTP
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- VETKA_OTP_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.VETKA_OTP_MESTO_FK_I ON MASTER.KLS_VETKA_OTP
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- VETKA_OTP_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.VETKA_OTP_OWNER_FK_I ON MASTER.KLS_VETKA_OTP
(OWNER_ID)
TABLESPACE USERSINDX;


--
-- VETKA_OTP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VETKA_OTP_PK ON MASTER.KLS_VETKA_OTP
(ID)
TABLESPACE USERSINDX;


--
-- VETKA_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.VETKA_OWNER_FK_I ON MASTER.KLS_VETKA
(OWNER_ID)
TABLESPACE USERSINDX;


--
-- VETKA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VETKA_PK ON MASTER.KLS_VETKA
(ID)
TABLESPACE USERSINDX;


--
-- FOR_UVED_VOZ  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_UVED_VOZ AS
/******************************************************************************
   NAME:       FOR_UVED_VOZ
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        16.02.2006             1. Created this package.
******************************************************************************/
/* УВЕДОМЛЕНИЯ о СЛИВЕ */

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pUVED_ID NUMBER) RETURN NUMBER;

  -- Максимальный номер позиции в таблице TEMP_UVED
  FUNCTION GetTempMaxNumPos RETURN NUMBER;
  
  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER);

  /* Очистить временную таблицу TEMP_UVED */
  PROCEDURE EMPTY_TEMP_UVED;

  /* Первоначальное заполнение временной таблицы TEMP_UVED */
  PROCEDURE FILL_TEMP_UVED (pUVED_ID NUMBER, pSRC_REESTR_ID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER);

  /* Добавить запись в таблицу TEMP_UVED */
  PROCEDURE ADD_TEMP_UVED (pREESTR_ID NUMBER);
  
    /* Удалить запись из таблицы TEMP_UVED */
  PROCEDURE DEL_TEMP_UVED (pREESTR_ID NUMBER);
  
  /* Перенести позиции из TEMP_UVED в REESTR */
  PROCEDURE SAVE_TEMP_UVED (pUVED_ID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pUVED_NUM NUMBER, pUVED_DATE DATE, pLUKOMA_NUM NUMBER, pCHER_NUM NUMBER, pMPS_NUM NUMBER, pVETL_NUM NUMBER, pOPERSGS_ID NUMBER, pPROD_ID_NPR VARCHAR2 DEFAULT NULL)
    RETURN NUMBER;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pUVED_ID NUMBER, pUVED_POS NUMBER);

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_UVED_ID NUMBER) RETURN NUMBER;

END;
/

--
-- FOR_VED_OSMOTR  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_VED_OSMOTR AS


  -- Максимальный номер позиции "Ведомости предварительного осмотра"
  FUNCTION GetMaxNumPos(pVED_ID NUMBER) RETURN NUMBER;

  /* УДАЛИТЬ ПОЗИЦИЮ "Ведомости предварительного осмотра" */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* Добавить/Изменить заголовок "Ведомости предварительного осмтора" */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
     pVED_NUM NUMBER, pVED_DATE DATE, pFROM_DATE DATE, pTO_DATE DATE, 
	 pFIO1 VARCHAR2, pFIO2 VARCHAR2, pFIO3 VARCHAR2, pSIGN1 VARCHAR2) RETURN NUMBER;

  /* УДАЛИТЬ заголовок "Ведомости предварительного осмотра" */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER);

  /* Скопировать позицию из ДОКУМЕНТА в ДОКУМЕНТ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pROW_ID NUMBER, pNEW_TITLE_ID NUMBER) RETURN NUMBER;

  /* Проверка вагона на уникальность
     Возвращаемое значение - номер ведомости, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER;
  
END;

/

--
-- FOR_UVED_VOZ  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_UVED_VOZ
AS
/* УВЕДОМЛЕНИЯ о СЛИВЕ */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pUVED_ID NUMBER) RETURN NUMBER AS
    MaxNum REESTR_IN.UVED_POS%TYPE;
    CurNum REESTR_IN.UVED_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR_IN.UVED_POS) as MAX_NUM
                 FROM REESTR_IN
				WHERE UVED_ID=pUVED_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  -- Максимальный номер позиции в таблице TEMP_UVED
  FUNCTION GetTempMaxNumPos RETURN NUMBER AS
    MaxNum TEMP_UVED.UVED_POS%TYPE;
    CurNum TEMP_UVED.UVED_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(UVED_POS) as MAX_NUM
                 FROM TEMP_UVED)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;
  
  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    UPDATE REESTR_IN SET UVED_ID=NULL, UVED_POS=NULL WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR_IN WHERE UVED_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Накладную нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM UVED WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Очистить временную таблицу TEMP_UVED */
  PROCEDURE EMPTY_TEMP_UVED AS
  BEGIN
    DELETE TEMP_UVED;
  END;

  /* Первоначальное заполнение временной таблицы TEMP_UVED */
  PROCEDURE FILL_TEMP_UVED (pUVED_ID NUMBER, pSRC_REESTR_ID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) AS
    vRow REESTR_IN%ROWTYPE;
    vSved SVED_IN%ROWTYPE;
  BEGIN
    EMPTY_TEMP_UVED;
	
	IF NVL(pUVED_ID,0)<>0 THEN
	  -- Если редактирование накладной
      INSERT INTO TEMP_UVED (UVED_POS, REESTR_ID, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    PROD_NAME, VAGOWNER_NAME, SVED_DATE,NAKL_NUM,VES_CIST) 
      SELECT
	    reestr_in.UVED_POS,
  	    reestr_in.ID as REESTR_ID,
		sved_in.SVED_NUM,
        reestr_in.NUM_CIST,
	    reestr_in.VES,
        sved_in.DATE_OFORML,
	    KLS_PROD.ABBR_NPR as PROD_NAME,
        KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
		sved_in.SVED_DATE,
        nakl.NAKL_NUM,
		reestr_in.VES_CIST
      from reestr_in, sved_in, KLS_VAGOWNER, KLS_PROD,nakl
      where reestr_in.sved_in_id=sved_in.id
	    and sved_in.prod_id_npr=kls_prod.id_npr(+)
        and reestr_in.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		and reestr_in.NAKL_ID=nakl.ID(+)
        and reestr_in.UVED_id=pUVED_ID
      ORDER BY
        reestr_in.UVED_POS, reestr_in.ID;
	ELSE
	  -- Отбираем реквизиты вагона
	  BEGIN
  	    SELECT * INTO vRow FROM reestr_in
         WHERE ID=pSRC_REESTR_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      RETURN;
	  END;
	  -- Отбираем реквизиты сведения
	  BEGIN
  	    SELECT * INTO vSved FROM sved_in
         WHERE ID=vRow.SVED_IN_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      RETURN;
  	  END;

	  -- Если добавление нового	    
      INSERT INTO TEMP_UVED (UVED_POS, REESTR_ID, VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,NAKL_NUM,VES_ALL,VES_CIST,VES_UPAK) 
      SELECT
 	    ROWNUM as UVED_POS,
        REESTR_ID,
        VETKA_OTP_NAME,
        POD_NUM,
        SVED_NUM,
        NUM_CIST,
        VES,
        DATE_OFORML,
        NOM_ZD,
        STAN_NAME,
        PROD_NAME,
        VAGOWNER_NAME,
        PLOUCH_NAME,
		SVED_DATE,
		PASP_NUM,
		VAG_STATUS,
		NAKL_NUM,
		VES_ALL,
		VES_CIST,
		UPAK_VES
      FROM
        (
      SELECT
	    reestr_in.UVED_POS,
  	    reestr_in.ID as REESTR_ID,
		null as VETKA_OTP_NAME,
	    null as POD_NUM,
		sved_in.SVED_NUM,
        reestr_in.NUM_CIST,
	    reestr_in.VES,
        sved_in.DATE_OFORML,
		null as NOM_ZD,
        null as stan_name,
	    KLS_PROD.ABBR_NPR as PROD_NAME,
        KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
	    null as PLOUCH_NAME,
		sved_in.SVED_DATE,
		null as PASP_NUM,
		null as VAG_STATUS,
        nakl.NAKL_NUM,
		null as VES_ALL,
		reestr_in.VES_CIST,
		null as UPAK_VES
      from reestr_in, sved_in, kls_stan stan_voz,KLS_VAGOWNER, KLS_PROD,nakl
      where reestr_in.sved_in_id=sved_in.id
	  	and reestr_in.STAN_VOZ_ID=stan_voz.id(+)
	    and sved_in.prod_id_npr=kls_prod.id_npr(+)
        and reestr_in.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		and reestr_in.NAKL_ID=nakl.ID(+)
        and sved_in.MESTO_ID=pMESTO_ID
        and sved_in.PROD_ID_NPR=vSved.PROD_ID_NPR -- тот же продукт, что и в эталонном сведении
        and reestr_in.UVED_id is null -- не входят в уведомление
        and sved_in.SVED_DATE BETWEEN vSved.SVED_DATE-1 AND vSved.SVED_DATE+1
        ORDER BY
          sved_in.SVED_DATE,
          sved_in.SVED_NUM,
          reestr_in.SVED_POS
        );
	END IF;		  
  END;

  /* Добавить запись в таблицу TEMP_UVED */
  PROCEDURE ADD_TEMP_UVED (pREESTR_ID NUMBER) AS
  BEGIN
    IF NVL(pREESTR_ID,0)<>0 THEN
      INSERT INTO TEMP_UVED (UVED_POS, REESTR_ID) VALUES (GetTempMaxNumPos, pREESTR_ID);

  	  UPDATE TEMP_UVED
	  SET (VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,NAKL_NUM,VES_ALL,
		VES_CIST,VES_UPAK)=
        (SELECT
		null as VETKA_OTP_NAME,
	    null as POD_NUM,
		sved_in.SVED_NUM,
        reestr_in.NUM_CIST,
	    reestr_in.VES,
        sved_in.DATE_OFORML,
		null as NOM_ZD,
        stan_voz.STAN_NAME as stan_name,
	    KLS_PROD.ABBR_NPR as PROD_NAME,
        KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
	    null as PLOUCH_NAME,
		sved_in.SVED_DATE,
		sved_in.PASP_NUM,
		null as VAG_STATUS,
        nakl.NAKL_NUM,
		null as VES_ALL,
		reestr_in.VES_CIST,
		null as VES_UPAK
      from reestr_in, sved_in, kls_stan stan_voz,KLS_VAGOWNER, KLS_PROD,nakl
      where reestr_in.sved_in_id=sved_in.id
	  	and reestr_in.STAN_VOZ_ID=stan_voz.id(+)
	    and sved_in.prod_id_npr=kls_prod.id_npr(+)
        and reestr_in.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		and reestr_in.NAKL_ID=nakl.ID(+)
        and reestr_in.ID=pREESTR_ID)
	  WHERE REESTR_ID=pREESTR_ID
	    AND EXISTS (SELECT NULL FROM reestr_in WHERE reestr_in.ID=pREESTR_ID);
	END IF;		  
  END;

  /* Добавить запись в таблицу TEMP_UVED */
  PROCEDURE DEL_TEMP_UVED (pREESTR_ID NUMBER) AS
  BEGIN
	DELETE FROM TEMP_UVED WHERE REESTR_ID=pREESTR_ID;
	COMMIT;
  END;

  
  /* Перенести позиции из TEMP_UVED в REESTR */
  PROCEDURE SAVE_TEMP_UVED (pUVED_ID NUMBER) AS
    vTmp NUMBER;
  BEGIN
    IF NVL(pUVED_ID,0)<>0 THEN
      UPDATE reestr_in SET UVED_ID=NULL, UVED_POS=NULL WHERE UVED_ID=pUVED_ID;
      FOR lcur IN (SELECT * FROM TEMP_UVED)
	  LOOP
  	    AddRow(0,lcur.REESTR_ID,pUVED_ID,lcur.UVED_POS);
	  END LOOP;
	END IF;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pUVED_NUM NUMBER, pUVED_DATE DATE, pLUKOMA_NUM NUMBER, pCHER_NUM NUMBER, pMPS_NUM NUMBER, pVETL_NUM NUMBER, pOPERSGS_ID NUMBER, pPROD_ID_NPR VARCHAR2 DEFAULT NULL)
    RETURN NUMBER AS

	vID UVED.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.nextval INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM UVED
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Уведомление нельзя отредактировать - оно удалено!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE UVED SET (UVED_NUM, UVED_DATE, MESTO_ID, LOAD_TYPE_ID, LUKOMA_NUM, MPS_NUM, CHER_NUM, VETL_NUM, OPERSGS_ID,PROD_ID_NPR)=
	  (SELECT pUVED_NUM, pUVED_DATE, pMESTO_ID, pLOAD_TYPE_ID, pLUKOMA_NUM, pMPS_NUM, pCHER_NUM, pVETL_NUM, pOPERSGS_ID, pPROD_ID_NPR FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO UVED (ID,UVED_NUM, UVED_DATE, MESTO_ID, LOAD_TYPE_ID, LUKOMA_NUM, MPS_NUM, CHER_NUM, VETL_NUM, OPERSGS_ID,PROD_ID_NPR)
	  VALUES (vID, pUVED_NUM, pUVED_DATE, pMESTO_ID, pLOAD_TYPE_ID, pLUKOMA_NUM, pMPS_NUM, pCHER_NUM, pVETL_NUM, pOPERSGS_ID,pPROD_ID_NPR);
	END IF;

	-- Сохранение позиций из временной таблицы TEMP_UVED
	SAVE_TEMP_UVED(vID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pUVED_ID NUMBER, pUVED_POS NUMBER) AS
	vID REESTR_IN.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vPos NUMBER;
  BEGIN
    vID:=pID;

	-- Проверка существования позиции
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM REESTR_IN
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Позицию нельзя включить в уведомление - вагон удален!');
	END;

	vPos:=NVL(pUVED_POS,GetMaxNumPos(pUVED_ID));

	-- Обновляем позицию
	UPDATE REESTR_IN SET UVED_ID=pUVED_ID, UVED_POS=vPos WHERE ID=vID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  /* Скопировать позицию уведомления в другоеуведомление 
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_UVED_ID NUMBER) RETURN NUMBER AS
	vRow REESTR_IN%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из накладной
	BEGIN
	  SELECT * INTO vRow
	    FROM REESTR_IN
	   WHERE ID=pREESTR_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Переносить нечего, такой записи в накладной нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM UVED
	   WHERE ID=pNEW_UVED_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Уведомление в которую переносится вагон - удалено!');
	END;

    -- Переносим вагон из накладной в накладную
	AddRow(0,vRow.ID,pNEW_UVED_ID,NULL);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;

END;
/

--
-- FOR_VED_OSMOTR  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_VED_OSMOTR AS

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  
  -- Максимальный номер позиции "Ведомости предварительного осмотра"
  FUNCTION GetMaxNumPos(pVED_ID NUMBER) RETURN NUMBER AS
    MaxNum NUMBER;
    CurNum NUMBER;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(VED_OSMOTR_ROW.POD_POS) as MAX_NUM
                 FROM VED_OSMOTR_ROW
				WHERE VED_ID=pVED_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;
  
  /* УДАЛИТЬ ПОЗИЦИЮ "Ведомости предварительного осмотра" */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций ведомости подачи 
	SELECT COUNT(*) INTO vCNT FROM VED_POD_ROW WHERE VED_OSMOTR_ROW_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Позицию ведомости осмотра нельзя удалить - есть позиции ведомости подачи!');
	END IF;

    DELETE FROM VED_OSMOTR_ROW WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок "Ведомости предварительного осмотра" */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM VED_OSMOTR_ROW WHERE VED_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Ведомость осмотра нельзя удалить - есть позиции!');
	END IF;
	 
    DELETE FROM VED_OSMOTR WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Добавить/Изменить заголовок "Ведомости предварительного осмтора" */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
     pVED_NUM NUMBER, pVED_DATE DATE, pFROM_DATE DATE, pTO_DATE DATE, 
	 pFIO1 VARCHAR2, pFIO2 VARCHAR2, pFIO3 VARCHAR2, pSIGN1 VARCHAR2) RETURN NUMBER AS

	vID NUMBER;
	vADD NUMBER;
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)<=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ VED_NUM
        INTO vTmp
	 	FROM VED_OSMOTR
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Ведомость осмотра нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем ведомость
	UPDATE VED_OSMOTR SET (VED_NUM, VED_DATE, FROM_DATE, TO_DATE, 
	  FIO1, FIO2, FIO3, SIGN1, MESTO_ID, LOAD_TYPE_ID)=
	  (SELECT pVED_NUM, pVED_DATE, pFROM_DATE, pTO_DATE, 
	  pFIO1, pFIO2, pFIO3, pSIGN1, pMESTO_ID, pLOAD_TYPE_ID FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем ведомость
      INSERT INTO VED_OSMOTR (ID,VED_NUM, VED_DATE, FROM_DATE, TO_DATE, 
	                     FIO1, FIO2, FIO3, SIGN1, MESTO_ID, LOAD_TYPE_ID)
	  VALUES (vID, pVED_NUM, pVED_DATE, pFROM_DATE, pTO_DATE, 
  	          pFIO1, pFIO2, pFIO3, pSIGN1, pMESTO_ID, pLOAD_TYPE_ID);
	END IF;

	-- Обновляем справочники фамилий
	INSERT INTO VED_OSMOTR_SMENA (NAME)
	  SELECT pFIO1 FROM dual
	  WHERE pFIO1||' '<>' ' AND
	    NOT EXISTS (SELECT NULL FROM VED_OSMOTR_SMENA a 
	                     WHERE NLS_UPPER(a.NAME)=NLS_UPPER(pFIO1) ); 

	INSERT INTO VED_OSMOTR_SMENA (NAME)
	  SELECT pFIO2 FROM dual
	  WHERE pFIO2||' '<>' ' AND
	    NOT EXISTS (SELECT NULL FROM VED_OSMOTR_SMENA a 
	                     WHERE NLS_UPPER(a.NAME)=NLS_UPPER(pFIO2) ); 
						 
	INSERT INTO VED_OSMOTR_SMENA (NAME)
	  SELECT pFIO3 FROM dual
	  WHERE pFIO3||' '<>' ' AND
	    NOT EXISTS (SELECT NULL FROM VED_OSMOTR_SMENA a 
	                     WHERE NLS_UPPER(a.NAME)=NLS_UPPER(pFIO3) ); 

	INSERT INTO VED_OSMOTR_PODPIS (NAME)
	  SELECT pSIGN1 FROM dual
	  WHERE pSIGN1||' '<>' ' AND
	    NOT EXISTS (SELECT NULL FROM VED_OSMOTR_PODPIS a 
	                     WHERE NLS_UPPER(a.NAME)=NLS_UPPER(pSIGN1) ); 

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Скопировать позицию из ДОКУМЕНТА в ДОКУМЕНТ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pROW_ID NUMBER, pNEW_TITLE_ID NUMBER) RETURN NUMBER AS
	vTitle VED_OSMOTR%ROWTYPE;
	vRow VED_OSMOTR_ROW%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из ведомости
	BEGIN
	  SELECT * INTO vRow
	    FROM VED_OSMOTR_ROW
	   WHERE ID=pROW_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Добавлять нечего, такой записи в ведомости нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT * INTO vTitle
	    FROM VED_OSMOTR
	   WHERE ID=pNEW_TITLE_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Ведомость осмотра в которую переносится вагон - удалена!');
	END;

    -- Переносим вагон из ведомости в ведомость
	UPDATE VED_OSMOTR_ROW SET VED_ID=pNEW_TITLE_ID WHERE ID=vRow.ID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;
  
  /* Проверка вагона на уникальность
     Возвращаемое значение - номер ведомости, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER AS
  PRAGMA AUTONOMOUS_TRANSACTION;
    vRes NUMBER;
	vWorklen NUMBER;
  BEGIN
    IF pLOAD_TYPE_ID=1 THEN
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#1',FOR_INIT.GetCurrUser);
	ELSE
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#2',FOR_INIT.GetCurrUser);
	END IF;
    SELECT a.VED_NUM INTO vRes
	  FROM VED_OSMOTR_ROW b,VED_OSMOTR a
	 WHERE b.VED_ID=a.ID
	   AND a.VED_DATE>=pDATE-2
	   AND b.NUM_CIST=pNUM_CIST
	   AND b.ID<>pID
	   AND (TRUNC(a.VED_DATE)=TRUNC(pDATE) OR
	        ABS(hours_between(a.VED_DATE,pDATE))<vWorklen);
    ROLLBACK;
    RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  ROLLBACK;
	  RETURN NULL;
  END;

END;

/

--
-- CLOSE_OLD_PRICES  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.CLOSE_OLD_PRICES (DATE_PRICE DATE,CAT_CEN NUMBER,PROD_ID VARCHAR2) IS
BEGIN
  UPDATE npr_prices SET
    END_DATE=LAST_DAY(BEGIN_DATE)
	WHERE 
	  END_DATE is NULL AND 
	  BEGIN_DATE<TRUNC(date_price) AND
	  PROD_ID_NPR=prod_id AND
	  CAT_CEN_ID=cat_cen;
  COMMIT;
END CLOSE_OLD_PRICES;

/

--
-- RENEW_KLS_PREDPR_CONTACTS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Predpr_contacts (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_PREDPR_CONTACTS
    SET (IS_BOSS, SHORTNAME, FIRSTNAME, MIDDLENAME, 
	     LASTNAME1, FIRSTNAME1, MIDDLENAME1, 
		 LASTNAME2, FIRSTNAME2, MIDDLENAME2, PHONE, 
		 STAFF, STAFF1, STAFF2, SEX, NA_OSNOV) =
        (SELECT IIF(BOSS,1,0), SHORTNAME, FIRSTNAME, MIDDLENAME, 
		 LASTNAME_, FIRST_, MIDDLE_, 
		 LAST2, FIRST2, MIDDLE2,  PHONE, 
		 STAFF, STAFF_, STAFF2, SEX, NA_OSNOV
        FROM load_buffer.contacts A 
		WHERE A.kod_predpr=KLS_PREDPR_CONTACTS.PREDPR_ID
		  AND NLS_UPPER(TRIM(A.LASTNAME))=NLS_UPPER(TRIM(KLS_PREDPR_CONTACTS.LASTNAME)))
   WHERE EXISTS 
        (SELECT NULL
        FROM load_buffer.contacts A 
		WHERE A.kod_predpr=KLS_PREDPR_CONTACTS.PREDPR_ID
		  AND NLS_UPPER(TRIM(A.LASTNAME))=NLS_UPPER(TRIM(KLS_PREDPR_CONTACTS.LASTNAME)));

  COMMIT;

  INSERT INTO KLS_PREDPR_CONTACTS (PREDPR_ID, LASTNAME,
         IS_BOSS, SHORTNAME, FIRSTNAME, MIDDLENAME, 
	     LASTNAME1, FIRSTNAME1, MIDDLENAME1, 
		 LASTNAME2, FIRSTNAME2, MIDDLENAME2, PHONE, 
		 STAFF, STAFF1, STAFF2, SEX, NA_OSNOV)
        (SELECT C.kod_predpr,C.lastname,
		 IIF(BOSS,1,0), SHORTNAME, FIRSTNAME, MIDDLENAME,
		 LASTNAME_, FIRST_, MIDDLE_, 
		 LAST2, FIRST2, MIDDLE2,  PHONE, 
		 STAFF, STAFF_, STAFF2, SEX, NA_OSNOV
	   FROM load_buffer.contacts C
	WHERE NOT EXISTS (SELECT NULL FROM KLS_PREDPR_CONTACTS D 
	WHERE C.kod_predpr=D.PREDPR_ID
		  AND NLS_UPPER(TRIM(C.LASTNAME))=NLS_UPPER(TRIM(D.LASTNAME))));

  COMMIT;

END Renew_Kls_Predpr_contacts;

/

--
-- RENEW_KLS_PREDPR_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Predpr_Kons (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_PREDPR_KONS
    SET (NAME, INN) =
        (SELECT NVL(POST_NAME,'?'), NVL(POST_INN,'?')
           FROM load_buffer.kod_post A WHERE NVL(TO_NUMBER(A.post_inn),0)=KLS_PREDPR_KONS.ID)
   WHERE EXISTS (SELECT NULL FROM load_buffer.kod_post B WHERE NVL(TO_NUMBER(B.post_inn),0)=KLS_PREDPR_KONS.ID);

  COMMIT;

  INSERT INTO KLS_PREDPR_KONS (ID, NAME,INN)
        (SELECT NVL(TO_NUMBER(POST_INN),0),NVL(POST_NAME,'?'),NVL(POST_INN,'?') 
	   FROM load_buffer.kod_post C
	WHERE NOT EXISTS (SELECT NULL FROM KLS_PREDPR_KONS D WHERE D.ID=NVL(TO_NUMBER(C.POST_INN),0)));

  COMMIT;

END Renew_Kls_Predpr_Kons;

/

--
-- RENEW_KLS_SHABEXP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_SHABEXP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE kls_shabexp
    set (FLG_DOSTUP,DOG_ID,PROD_ID_NPR,STAN_ID,PRIM_DOG,OSOB1,OSOB2,OSOB3,OSOB4,POL1,POL2,POL3,POL4,
         NEOB1,NEOB2,NEOB3,NEOB4,STAN1,STAN2,STAN3,STAN4,DORST1,DORST2,NM_GR1,NM_GR2,NM_GR3,NM_GR4,
         NM_GR5,NM_GR6,NM_GR7,NM_GR8,NM_GR9,PLT_OT1,PLT_OT2,PLT_OT3,PLT_OT4,DOCS1,DOCS2,DOCS3,DOCS4,
         TAM1,TAM2,POS33,POS34,POS35,POS36,SHTAMP1,SHTAMP2,SHTAMP3,SHTAMP4,SHTAMP5,CNT_VED, MESTO_PAY, 
         GR1_TXT_EX, GR2_TXT_EX, INSNUM, INSDAT) =
	(SELECT IIF(DOSTUP,1,0),DOG_ID,KOD_NPR,STAN_ID,PRIM_D,OSOB1,OSOB2,OSOB3,OSOB4,POL1,POL2,POL3,POL4,
         NEOB1,NEOB2,NEOB3,NEOB4,STAN1,STAN2,STAN3,STAN4,DORST1,DORST2,NM_GR1,NM_GR2,NM_GR3,NM_GR4,
         NM_GR5,NM_GR6,NM_GR7,NM_GR8,NM_GR9,PLT_OT1,PLT_OT2,PLT_OT3,PLT_OT4,DOCS1,DOCS2,DOCS3,DOCS4,
         TAM1,TAM2,POS33,POS34,POS35,POS36,SHTAMP1,SHTAMP2,SHTAMP3,SHTAMP4,SHTAMP5,CNT_VED, MESTO_PAY, 
         GR1_TXT_EX, GR2_TXT_EX, INSNUM, INSDAT
		 FROM load_buffer.export_grp WHERE NN=kls_shabexp.id)
    where exists (SELECT * FROM load_buffer.export_grp B WHERE B.nn=kls_shabexp.id);

  INSERT INTO kls_shabexp
     (ID,FLG_DOSTUP,DOG_ID,PROD_ID_NPR,STAN_ID,PRIM_DOG,OSOB1,OSOB2,OSOB3,OSOB4,POL1,POL2,POL3,POL4,
         NEOB1,NEOB2,NEOB3,NEOB4,STAN1,STAN2,STAN3,STAN4,DORST1,DORST2,NM_GR1,NM_GR2,NM_GR3,NM_GR4,
         NM_GR5,NM_GR6,NM_GR7,NM_GR8,NM_GR9,PLT_OT1,PLT_OT2,PLT_OT3,PLT_OT4,DOCS1,DOCS2,DOCS3,DOCS4,
         TAM1,TAM2,POS33,POS34,POS35,POS36,SHTAMP1,SHTAMP2,SHTAMP3,SHTAMP4,SHTAMP5,CNT_VED, MESTO_PAY, 
         GR1_TXT_EX, GR2_TXT_EX, INSNUM, INSDAT)
	(SELECT DISTINCT NN,IIF(DOSTUP,1,0),DOG_ID,KOD_NPR,STAN_ID,PRIM_D,OSOB1,OSOB2,OSOB3,OSOB4,POL1,POL2,POL3,POL4,
         NEOB1,NEOB2,NEOB3,NEOB4,STAN1,STAN2,STAN3,STAN4,DORST1,DORST2,NM_GR1,NM_GR2,NM_GR3,NM_GR4,
         NM_GR5,NM_GR6,NM_GR7,NM_GR8,NM_GR9,PLT_OT1,PLT_OT2,PLT_OT3,PLT_OT4,DOCS1,DOCS2,DOCS3,DOCS4,
         TAM1,TAM2,POS33,POS34,POS35,POS36,SHTAMP1,SHTAMP2,SHTAMP3,SHTAMP4,SHTAMP5,CNT_VED, MESTO_PAY, 
         GR1_TXT_EX, GR2_TXT_EX, INSNUM, INSDAT
 		 FROM load_buffer.export_grp
		 WHERE not exists (SELECT B.ID FROM kls_shabexp B WHERE B.ID=NN));

  INSERT INTO kls_shabexp
        (ID,FLG_DOSTUP,DOG_ID,PROD_ID_NPR,STAN_ID)
		(SELECT DISTINCT 0,0,4,'00000',1 FROM load_buffer.export_grp WHERE
          not exists (SELECT E.ID FROM kls_shabexp E where E.ID=0));

  COMMIT;

END RENEW_KLS_SHABEXP; 
/

--
-- RENEW_KLS_TEX_PD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_KLS_TEX_PD (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

 UPDATE kls_tex_pd
    set (grotp_id,grotp_okpo,plattarif_id,tex_pd_name,bank,rs,grotp_short_name,plattar_short_name) =
	    (SELECT kod_grotpr,okpo_grotp,kod_predpr,name,bank,rs,name_grotp,name_plat FROM load_buffer.tex_pd
		  WHERE tex_pd.kod_tex_pd=kls_tex_pd.id AND tex_pd.kod_grotpr=kls_tex_pd.grotp_id)
  where exists (SELECT kod_tex_pd FROM load_buffer.tex_pd where tex_pd.kod_tex_pd=kls_tex_pd.id AND tex_pd.kod_grotpr=kls_tex_pd.grotp_id);

  INSERT INTO kls_tex_pd (id,grotp_id,grotp_okpo,plattarif_id,tex_pd_name,bank,rs,grotp_short_name,plattar_short_name)
    (SELECT kod_tex_pd,kod_grotpr,okpo_grotp,kod_predpr,name,bank,rs,name_grotp,name_plat FROM load_buffer.tex_pd
      WHERE not exists (SELECT id FROM kls_tex_pd where tex_pd.kod_tex_pd=kls_tex_pd.id AND tex_pd.kod_grotpr=kls_tex_pd.grotp_id));

  COMMIT;

END RENEW_KLS_TEX_PD;

/

--
-- RENEW_KLS_VAGOWNER  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Vagowner (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE KLS_VAGOWNER
    SET (vagowner_name,short_name,predpr_id,VAGOWN_MOS_ID,VAGOWN_TYP_ID,SOBSTV_ID,DISPLAY_NAME,OWNER_ID,SORTBY,LOAD_TYPE_ID) =
	(SELECT NAME,name_k,kod_predpr,kod_m,tip_sobs,sobstv,view_name,vlad,sortby,tip_otgr 
	   FROM load_buffer.TYPES WHERE nom=ID)
    WHERE EXISTS (SELECT nom FROM load_buffer.TYPES B WHERE B.nom=KLS_VAGOWNER.ID);

  INSERT INTO KLS_VAGOWNER (ID,vagowner_name,short_name,predpr_id,VAGOWN_MOS_ID,VAGOWN_TYP_ID,SOBSTV_ID,DISPLAY_NAME,owner_id,SORTBY,LOAD_TYPE_ID)
	(SELECT nom,NAME,name_k,kod_predpr,kod_m,tip_sobs,sobstv,view_name,vlad,sortby,tip_otgr 
	   FROM load_buffer.TYPES
    WHERE NOT EXISTS (SELECT ID FROM KLS_VAGOWNER WHERE ID=nom));

  COMMIT;

END Renew_Kls_Vagowner;

/

--
-- RENEW_KLS_VETKA  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Vetka (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN
  UPDATE load_buffer.vetka SET vetka='<Ветка получателя>' WHERE vetka IS NULL;
  COMMIT;

--  UPDATE KLS_VETKA
--    SET vetka_name = (SELECT A.vetka FROM load_buffer.vetka A WHERE A.kod=KLS_VETKA.id)
--    WHERE EXISTS (SELECT B.kod FROM load_buffer.vetka B WHERE B.kod=KLS_VETKA.id);

  INSERT INTO KLS_VETKA (id, vetka_name) (SELECT C.kod, C.vetka FROM load_buffer.vetka C
    WHERE NOT EXISTS (SELECT D.id FROM KLS_VETKA D WHERE D.ID=C.KOD));

  COMMIT;

END Renew_Kls_Vetka;

/

--
-- RENEW_KLS_VETKA_OTP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Vetka_Otp (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_VETKA_OTP
    SET (MESTO_ID,LOAD_TYPE_ID,VETKA_NAME,SHORT_NAME,ORDNUNG,DOSTUP)
	  = (SELECT A.mesto,A.tip_otgr,A.track_name,A.naim_pr,A.sortby,Iif(A.dostup,1,0)
  	     FROM load_buffer.tracks A WHERE A.kod=KLS_VETKA_OTP.id)
    WHERE EXISTS (SELECT A.kod FROM load_buffer.tracks A WHERE A.kod=KLS_VETKA_OTP.id);

  INSERT INTO KLS_VETKA_OTP (ID,MESTO_ID,LOAD_TYPE_ID,VETKA_NAME,SHORT_NAME,ORDNUNG,DOSTUP)
	(SELECT  A.kod,A.mesto,A.tip_otgr,A.track_name,A.naim_pr,A.sortby,Iif(A.dostup,1,0) FROM load_buffer.tracks A
      WHERE NOT EXISTS (SELECT C.id FROM KLS_VETKA_OTP C WHERE C.id=A.kod));

  COMMIT;

END Renew_Kls_Vetka_Otp;

/

--
-- RENEW_MOVEPROD_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.renew_moveprod_test (
   date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
   date_end   DATE := SYSDATE,
   param1     VARCHAR2 := '',
   param2     VARCHAR2 := '',
   param3     VARCHAR2 := ''
)
IS
BEGIN
-- Удаляем
   DELETE FROM SFDBF.moveprod_test
   WHERE month=date_beg;

   COMMIT;

INSERT INTO SFDBF.moveprod_test (month) values (TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY')));
   
   
--- Добавляем производство
   INSERT INTO SFDBF.moveprod_test
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re)
      (SELECT /*+ FIRST_ROWS */
              date_beg, 1, 1, dayly_fact.prod, dayly_fact.proizv, date_beg,
              '', '', '', '', 1, '', '', dayly_fact.kod, 0
         FROM dayly_fact
        WHERE dayly_fact.DATA = TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY'))
          AND dayly_fact.sobstv = 8
          AND dayly_fact.proizv > 0.0001);
   COMMIT;

END renew_moveprod_test;

/

--
-- RENEW_NPR_PRICES  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_NPR_PRICES (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='')IS
BEGIN
  return;
  
  UPDATE load_buffer.npr_cen SET time_='12:00:00' WHERE time_ is NULL;
  DELETE FROM load_buffer.npr_cen WHERE id=0 OR kod_npr is null or kod_npr='';
  UPDATE load_buffer.npr_cen SET kod_post=1 WHERE kod_post=0;
--- инсерт перед апдейтом это специально. Ради SUPPLIER_ID (VEV 27.6.2001)
  INSERT INTO npr_prices
    (id,cat_cen_id,prod_id_npr,cena,nds20,ngsm25,akciz,cena_otp,begin_date,input_date,ownership_id,supplier_id)
	(SELECT a.id,A.kateg_cen,a.kod_npr,a.cena,a.nds20,a.ndf25,a.akciz,a.cena_otp,a.date_dey,
	TO_DATE(TO_CHAR(a.date_,'dd.mm.yyyy ') || SUBSTR(a.TIME_,1,5),'dd.mm.yyyy hh24:mi'),var_real,1
	  FROM load_buffer.npr_cen A WHERE not exists (SELECT D.id FROM npr_prices D where D.id=a.id));

  UPDATE npr_prices
    set (cat_cen_id,prod_id_npr,cena,nds20,ngsm25,akciz,cena_otp,begin_date,input_date,ownership_id) =
	(SELECT A.kateg_cen,a.kod_npr,a.cena,a.nds20,a.ndf25,a.akciz,a.cena_otp,a.date_dey,
	TO_DATE(TO_CHAR(a.date_,'dd.mm.yyyy ') || SUBSTR(a.TIME_,1,5),'dd.mm.yyyy hh24:mi'),var_real
	  FROM load_buffer.npr_cen A WHERE A.id=npr_prices.id),
	supplier_id=(SELECT predpr_role.PREDPR_ID from predpr_role,load_buffer.npr_cen a
	   where predpr_role.KLS_ROLE_ID=1 and predpr_role.FOX_KOD=a.kod_post and a.id=npr_prices.id)
  where exists (SELECT B.id FROM load_buffer.npr_cen B where B.id=npr_prices.id );

  DELETE FROM npr_prices WHERE not exists (SELECT B.id FROM load_buffer.npr_cen B where B.id=npr_prices.id );
  COMMIT;

END RENEW_NPR_PRICES;
/

--
-- RENEW_OBOROT_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Oborot_Kons (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

UPDATE load_buffer.oborot SET st_prich=NULL WHERE st_prich=99;
UPDATE load_buffer.oborot SET st_ras=NULL WHERE st_ras=99;
UPDATE load_buffer.oborot SET tip_real=NULL WHERE tip_real=99;
UPDATE load_buffer.oborot SET vid_post=NULL WHERE vid_post=99;
UPDATE load_buffer.oborot SET vid_real=NULL WHERE vid_real=99;
UPDATE load_buffer.oborot SET otgr_post=NULL WHERE otgr_post=0;
UPDATE load_buffer.oborot SET nom_ob=(TO_NUMBER(TO_CHAR(DA,'YYYY'))*100000000+nom_ob);

UPDATE load_buffer.oborot SET kod_ob=44 WHERE kod_ob=2033;
UPDATE load_buffer.oborot SET kod_ob=7001 WHERE kod_ob=12001;
UPDATE load_buffer.oborot SET kod_ob=7002 WHERE kod_ob=12002;
UPDATE load_buffer.oborot SET kod_ob=2007 WHERE kod_ob=12007;
UPDATE load_buffer.oborot SET kod_ob=2008 WHERE kod_ob=12008;
UPDATE load_buffer.oborot SET kod_ob=1024 WHERE kod_ob=1091;
UPDATE load_buffer.oborot SET kod_ob=1035 WHERE kod_ob=1092;
UPDATE load_buffer.oborot SET kod_ob=9020 WHERE kod_ob=9071;
UPDATE load_buffer.oborot SET kod_ob=9021 WHERE kod_ob=9072;
UPDATE load_buffer.oborot SET kod_ob=9022 WHERE kod_ob=9073;
UPDATE load_buffer.oborot SET kod_ob=9023 WHERE kod_ob=9074;
UPDATE load_buffer.oborot SET kod_ob=9004 WHERE kod_ob=9075;
UPDATE load_buffer.oborot SET kod_ob=1022 WHERE kod_ob=11022;
UPDATE load_buffer.oborot SET kod_ob=1029 WHERE kod_ob=11029;
UPDATE load_buffer.oborot SET kod_ob=1034 WHERE kod_ob=11034;
UPDATE load_buffer.oborot SET kod_ob=1036 WHERE kod_ob=11036;
UPDATE load_buffer.oborot SET kod_ob=1044 WHERE kod_ob=11044;
UPDATE load_buffer.oborot SET kod_ob=1046 WHERE kod_ob=11046;
UPDATE load_buffer.oborot SET kod_ob=1083 WHERE kod_ob=11083;
UPDATE load_buffer.oborot SET kod_ob=1080 WHERE kod_ob=11084;
UPDATE load_buffer.oborot SET kod_ob=9021 WHERE kod_ob=9080;
UPDATE load_buffer.oborot SET kod_ob=9080 WHERE kod_ob=13002;
UPDATE load_buffer.oborot SET kod_ob=9076 WHERE kod_ob=13001;

UPDATE load_buffer.oborot SET ob_pp=44 WHERE ob_pp=2033;
UPDATE load_buffer.oborot SET ob_pp=7001 WHERE ob_pp=12001;
UPDATE load_buffer.oborot SET ob_pp=7002 WHERE ob_pp=12002;
UPDATE load_buffer.oborot SET ob_pp=2007 WHERE ob_pp=12007;
UPDATE load_buffer.oborot SET ob_pp=2008 WHERE ob_pp=12008;
UPDATE load_buffer.oborot SET ob_pp=1024 WHERE ob_pp=1091;
UPDATE load_buffer.oborot SET ob_pp=1035 WHERE ob_pp=1092;
UPDATE load_buffer.oborot SET ob_pp=9020 WHERE ob_pp=9071;
UPDATE load_buffer.oborot SET ob_pp=9021 WHERE ob_pp=9072;
UPDATE load_buffer.oborot SET ob_pp=9022 WHERE ob_pp=9073;
UPDATE load_buffer.oborot SET ob_pp=9023 WHERE ob_pp=9074;
UPDATE load_buffer.oborot SET ob_pp=9004 WHERE ob_pp=9075;
UPDATE load_buffer.oborot SET ob_pp=1022 WHERE ob_pp=11022;
UPDATE load_buffer.oborot SET ob_pp=1029 WHERE ob_pp=11029;
UPDATE load_buffer.oborot SET ob_pp=1034 WHERE ob_pp=11034;
UPDATE load_buffer.oborot SET ob_pp=1036 WHERE ob_pp=11036;
UPDATE load_buffer.oborot SET ob_pp=1044 WHERE ob_pp=11044;
UPDATE load_buffer.oborot SET ob_pp=1046 WHERE ob_pp=11046;
UPDATE load_buffer.oborot SET ob_pp=1083 WHERE ob_pp=11083;
UPDATE load_buffer.oborot SET ob_pp=1080 WHERE ob_pp=11084;
UPDATE load_buffer.oborot SET ob_pp=9021 WHERE ob_pp=9080;
UPDATE load_buffer.oborot SET ob_pp=9080 WHERE ob_pp=13002;
UPDATE load_buffer.oborot SET ob_pp=9076 WHERE ob_pp=13001;

COMMIT;
  
UPDATE OBOROT_KONS SET
  (DATE_OPER, KOL, KG, LIT, 
   SUMMA_POKUP_BN, SUMMA_POKUP_NDS, SUMMA_POKUP_AKCIZ, SUMMA_POKUP, 
   SUMMA_REALIZ_BN,SUMMA_REALIZ_NDS, SUMMA_REALIZ_AKCIZ, SUMMA_REALIZ, 
   SUMMA_UCHET, UPDATE_USER, UPDATE_DATE, AKCIZ_SVED, 
   ORG_STRU_ID, PREDPR_KONS_ID, PROD_KONS_ID,  PREDPR_CLASS_ID, 
   TIP_OP_ID, ST_PRIH_ID, ST_RASH_ID, TIP_REAL_ID, VID_REAL_ID, 
   VID_POST_ID, OTGR_POST_ID, LOAD_TYPE_ID, REGION_ID,ORG_POLUCH_ID)
 = (
  SELECT A.DA, NVL(A.KOL,0), NVL(A.KG,0), NVL(A.LIT,0), 
      NVL(A.S_POK_BN,0), NVL(A.S_POK,0)-NVL(A.S_POK_BN,0),0,NVL(A.S_POK,0),
      NVL(A.S_REAL_BN,0), NVL(A.S_REAL,0)-NVL(A.S_REAL_BN,0),0,NVL(A.S_REAL,0),
	  NVL(A.S_UCH,0),N_USER, NVL(A.DT,A.DA),NVL(A.SVID,0),
	  A.KOD_OB,TO_NUMBER(A.POST_INN),A.KOD_PROD,TO_NUMBER(A.GR_POT),
	  A.TIP_OP,A.ST_PRICH,A.ST_RAS,A.TIP_REAL,A.VID_REAL,
  	  A.VID_POST,A.OTGR_POST,Get_Tip_Otgr(NVL(A.VID_TR,0)),Get_Region(NVL(A.Kod_ter,0)),C.ID
    FROM load_buffer.Oborot A, ORG_STRUCTURE B, ORG_STRUCTURE C
    WHERE A.nom_ob=OBOROT_KONS.ID_OPER AND A.kod_fil=B.FILIAL AND A.fil_pp=C.FILIAL AND B.ID=OBOROT_KONS.FILIAL_ID 
		)
WHERE EXISTS (SELECT NULL FROM load_buffer.Oborot A, ORG_STRUCTURE B, ORG_STRUCTURE C
    WHERE A.nom_ob=OBOROT_KONS.ID_OPER AND A.kod_fil=B.FILIAL AND A.fil_pp=C.FILIAL AND B.ID=OBOROT_KONS.FILIAL_ID);

COMMIT;


INSERT INTO OBOROT_KONS
  (FILIAL_ID,ID_OPER,DATE_OPER, KOL, KG, LIT, 
   SUMMA_POKUP_BN, SUMMA_POKUP_NDS, SUMMA_POKUP_AKCIZ, SUMMA_POKUP, 
   SUMMA_REALIZ_BN,SUMMA_REALIZ_NDS, SUMMA_REALIZ_AKCIZ, SUMMA_REALIZ, 
   SUMMA_UCHET, UPDATE_USER, UPDATE_DATE, AKCIZ_SVED, 
   ORG_STRU_ID, PREDPR_KONS_ID, PROD_KONS_ID,  PREDPR_CLASS_ID, 
   TIP_OP_ID, ST_PRIH_ID, ST_RASH_ID, TIP_REAL_ID, VID_REAL_ID, 
   VID_POST_ID, OTGR_POST_ID, LOAD_TYPE_ID, REGION_ID, ORG_POLUCH_ID)
 (SELECT B.ID,A.nom_ob,A.DA, NVL(A.KOL,0), NVL(A.KG,0), NVL(A.LIT,0), 
      NVL(A.S_POK_BN,0), NVL(A.S_POK,0)-NVL(A.S_POK_BN,0),0,NVL(A.S_POK,0),
      NVL(A.S_REAL_BN,0), NVL(A.S_REAL,0)-NVL(A.S_REAL_BN,0),0,NVL(A.S_REAL,0),
	  NVL(A.S_UCH,0),N_USER, NVL(A.DT,A.DA),NVL(A.SVID,0),
	  A.KOD_OB,TO_NUMBER(A.POST_INN),A.KOD_PROD,TO_NUMBER(A.GR_POT),
	  A.TIP_OP,A.ST_PRICH,A.ST_RAS,A.TIP_REAL,A.VID_REAL,
  	  A.VID_POST,A.OTGR_POST,Get_Tip_Otgr(NVL(A.VID_TR,0)),Get_Region(NVL(A.Kod_ter,0)),C.ID
    FROM load_buffer.Oborot A, ORG_STRUCTURE B, ORG_STRUCTURE C
    WHERE A.kod_fil=B.FILIAL AND A.fil_pp=C.FILIAL
	  AND NOT EXISTS (SELECT NULL FROM OBOROT_KONS E WHERE E.ID_OPER=A.nom_ob AND E.FILIAL_ID=B.ID));

COMMIT;

DELETE FROM OBOROT_KONS A WHERE  
    NOT EXISTS (SELECT NULL FROM load_buffer.oborot k,ORG_STRUCTURE B WHERE k.nom_ob = A.ID_OPER AND k.kod_fil=B.FILIAL AND B.ID=A.FILIAL_ID)
    AND A.DATE_OPER BETWEEN date_beg AND date_end;

COMMIT;

END Renew_Oborot_Kons; 
/

--
-- RENEW_OSTAT_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Ostat_Kons (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

UPDATE load_buffer.ostat SET kod_ob=44 WHERE kod_ob=2033;
UPDATE load_buffer.ostat SET kod_ob=7001 WHERE kod_ob=12001;
UPDATE load_buffer.ostat SET kod_ob=7002 WHERE kod_ob=12002;
UPDATE load_buffer.ostat SET kod_ob=2007 WHERE kod_ob=12007;
UPDATE load_buffer.ostat SET kod_ob=2008 WHERE kod_ob=12008;
UPDATE load_buffer.ostat SET kod_ob=1024 WHERE kod_ob=1091;
UPDATE load_buffer.ostat SET kod_ob=1035 WHERE kod_ob=1092;
UPDATE load_buffer.ostat SET kod_ob=9020 WHERE kod_ob=9071;
UPDATE load_buffer.ostat SET kod_ob=9021 WHERE kod_ob=9072;
UPDATE load_buffer.ostat SET kod_ob=9022 WHERE kod_ob=9073;
UPDATE load_buffer.ostat SET kod_ob=9023 WHERE kod_ob=9074;
UPDATE load_buffer.ostat SET kod_ob=9004 WHERE kod_ob=9075;
UPDATE load_buffer.ostat SET kod_ob=1022 WHERE kod_ob=11022;
UPDATE load_buffer.ostat SET kod_ob=1029 WHERE kod_ob=11029;
UPDATE load_buffer.ostat SET kod_ob=1034 WHERE kod_ob=11034;
UPDATE load_buffer.ostat SET kod_ob=1036 WHERE kod_ob=11036;
UPDATE load_buffer.ostat SET kod_ob=1044 WHERE kod_ob=11044;
UPDATE load_buffer.ostat SET kod_ob=1046 WHERE kod_ob=11046;
UPDATE load_buffer.ostat SET kod_ob=1083 WHERE kod_ob=11083;
UPDATE load_buffer.ostat SET kod_ob=1080 WHERE kod_ob=11084;
UPDATE load_buffer.ostat SET kod_ob=9021 WHERE kod_ob=9080;
UPDATE load_buffer.ostat SET kod_ob=9080 WHERE kod_ob=13002;
UPDATE load_buffer.ostat SET kod_ob=9076 WHERE kod_ob=13001;

UPDATE OSTAT_KONS SET
  (DATE_OST, KOL, KG, LIT, SUMMA_POKUP_BN, SUMMA_POKUP_NDS, SUMMA_POKUP_AKCIZ, SUMMA_POKUP, 
   SUMMA_UCHET, ORG_STRU_ID, PREDPR_KONS_ID, PROD_KONS_ID)
 = (
  SELECT A.DA, NVL(A.KOL,0), NVL(A.KG,0), 0, 
      NVL(A.S_POK_BN,0), NVL(A.S_POK,0)-NVL(A.S_POK_BN,0),0,NVL(A.S_POK,0),
   NVL(A.S_UCH,0),
   A.KOD_OB,TO_NUMBER(A.POST_INN),A.KOD_PROD
    FROM load_buffer.Ostat A, ORG_STRUCTURE B
    WHERE A.nom_ost=OSTAT_KONS.ID_OST AND A.KOD_FIL=B.FILIAL AND B.ID=OSTAT_KONS.FILIAL_ID
  )
WHERE EXISTS (SELECT NULL FROM load_buffer.Ostat A, ORG_STRUCTURE B
    WHERE A.nom_ost=OSTAT_KONS.ID_OST AND A.KOD_FIL=B.FILIAL AND B.ID=OSTAT_KONS.FILIAL_ID);

COMMIT;

INSERT  INTO OSTAT_KONS
  (FILIAL_ID, ID_OST, DATE_OST, KOL, KG, LIT, SUMMA_POKUP_BN, SUMMA_POKUP_NDS, 
   SUMMA_POKUP_AKCIZ, SUMMA_POKUP, SUMMA_UCHET, ORG_STRU_ID, PREDPR_KONS_ID, PROD_KONS_ID)
 (SELECT B.ID,A.nom_ost,A.DA, NVL(A.KOL,0), NVL(A.KG,0), 0, 
      NVL(A.S_POK_BN,0), NVL(A.S_POK,0)-NVL(A.S_POK_BN,0),0,NVL(A.S_POK,0),
   NVL(A.S_UCH,0),
   A.KOD_OB,TO_NUMBER(A.POST_INN),A.KOD_PROD
    FROM load_buffer.Ostat A, ORG_STRUCTURE B
    WHERE A.kod_fil=B.FILIAL 
   AND NOT EXISTS (SELECT NULL FROM OSTAT_KONS C WHERE C.ID_OST=A.nom_ost AND C.FILIAL_ID=B.ID));

COMMIT;

DELETE FROM OSTAT_KONS A WHERE 
    NOT EXISTS (SELECT NULL FROM load_buffer.ostat k,ORG_STRUCTURE B WHERE k.nom_ost = A.ID_OST AND k.kod_fil=B.FILIAL AND b.ID=A.FILIAL_ID)
    AND A.DATE_OST BETWEEN date_beg AND date_end;

COMMIT;

END Renew_Ostat_Kons; 
/

--
-- RENEW_PODACHA  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Podacha (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  vDateBeg DATE;
  vDateEnd DATE;
BEGIN

update load_buffer.podacha set time_pod='00:00' where substr(time_pod,1,1)=' ' or time_pod is NULL OR time_pod='24:00'; 
UPDATE load_buffer.podacha SET N_NAL='00:00' WHERE substr(N_NAL,1,1)=' ' or N_NAL is NULL OR n_nal='24:00';
UPDATE load_buffer.podacha SET K_NAL='00:00' WHERE substr(K_NAL,1,1)=' ' or K_NAL is NULL OR k_nal='24:00';
UPDATE load_buffer.podacha SET GOTOV='00:00' WHERE substr(GOTOV,1,1)=' ' or GOTOV is NULL OR gotov='24:00';

BEGIN
  SELECT MIN(DATE_POD),MAX(DATE_POD) INTO vDateBeg,vDateEnd
    FROM load_buffer.podacha;
  IF vDateBeg IS NULL OR vDateEnd IS NULL THEN
    RETURN;
  END IF;		
EXCEPTION
  WHEN OTHERS THEN
    RETURN;
END;		
  
-- Удаляем предыдущие подачи
DELETE FROM PODACHA WHERE pod_date>=vDateBeg AND pod_date<vDateEnd+1;

--- Добавляем новые подачи
INSERT INTO MASTER.PODACHA
     (ID, POD_NUM, POD_DATE, 
	  KOL, VES, GOTOV_DATE, 
	  NALIV_DATE, LUKOMA_NUM, MPS_NUM, SMN_NUM, GD_UVED_NUM, 
	  LOAD_TYPE_ID, VETKA_OTP_ID, MESTO_ID, USER_ID,END_NALIV_DATE)
    (SELECT DISTINCT TO_NUMBER(POD_ID), POD_NUM, TO_DATE(TO_CHAR(date_pod,'dd.mm.yyyy')||' '||time_pod,'dd.mm.yyyy hh24:mi:ss'),
	 POD_KOL, POD_VES,TO_DATE(TO_CHAR(gotovd,'dd.mm.yyyy')||' '||gotov,'dd.mm.yyyy hh24:mi:ss'),
	 TO_DATE(TO_CHAR(n_nald,'dd.mm.yyyy')||' '||n_nal,'dd.mm.yyyy hh24:mi:ss'),NUM_LUKOMA,NUM_MPS, NUM_SMN, NUM_UVED,
	 TIP_OTGR, GD_TRACK,  MESTO, KOD_OPER,
	 TO_DATE(TO_CHAR(k_nald,'dd.mm.yyyy')||' '||k_nal,'dd.mm.yyyy hh24:mi:ss')
     FROM load_buffer.podacha);

--- Добавляем новые подачи
INSERT INTO MASTER.PODACHA_ROWS
   (ID, PODACHA_ID, NUM_POS, NUM_CIST, KALIBR_ID, VAGOWNER_ID, AXES, CAPACITY, VAGONTYPE_ID, NCISTDOP, VAG_STATUS_ID, 
    DEFI_MASS_ID, VETKA_POD_ID, VES, KOL_NET, VES_BRUTTO, VES_CIST, ZPU_TYPE1, ZPU_TYPE2, PLOMBA1, PLOMBA2, 
	VZLIV, VOLUME, TEMPER, PL20, FACT_PL, PASP_ID, PASP_NUM, PASP_DATE, REZ_NUM, PROD_ID_NPR, NOM_ZD, SVED_NUM, SVED_DATE)
(SELECT /*+ RULE */ ID, TO_NUMBER(POD_ID), POD_ORD, NUM_OTGR, TIP, TIPV, OSC, WES, RODV,NCISTDOP, ERROR, 
    DEFI_MASS,100+PODPUT, VES, KOL_NET,KOL_ALL,TARA_ALL,ZPU_TYPE1, ZPU_TYPE2,PLOMBA1, PLOMBA2,  
	VZLIV, OBIEM, TEMPER, PL, XPL,KODPASP,NUM_PASP, DINS, NUM_REZ,KOD_NPR,NOM_ZD,NP,DATE_OTGR
  FROM load_buffer.podacha); 

COMMIT;

END Renew_Podacha;

/

--
-- RENEW_PREDPR_ROLE1  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_PREDPR_ROLE1 (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  INSERT INTO predpr_role (predpr_id,kls_role_id,fox_kod)
   (SELECT C.kod_predpr,1,C.kod_sob FROM load_buffer.spr_sob C
    WHERE C.kod_predpr<>0 AND not exists (SELECT * FROM predpr_role D WHERE D.predpr_id=C.kod_predpr AND D.kls_role_id=1 AND D.fox_kod=C.KOD_SOB));
  COMMIT;

  DELETE FROM predpr_role WHERE predpr_role.KLS_ROLE_ID=1 AND
    NOT EXISTS (SELECT * from load_buffer.spr_sob E WHERE E.kod_predpr = predpr_role.PREDPR_ID and predpr_role.kls_role_id=1 and E.kod_sob=predpr_role.FOX_KOD AND E.kod_predpr<>0);
  COMMIT;

END RENEW_PREDPR_ROLE1;

/

--
-- RENEW_PREDPR_ROLE2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_PREDPR_ROLE2 (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  INSERT INTO predpr_role (predpr_id,kls_role_id,fox_kod)
   (SELECT C.kod_predpr,2,C.kod FROM load_buffer.pererab C
    WHERE C.kod_predpr<>0 AND not exists (SELECT * FROM predpr_role D WHERE D.predpr_id=C.kod_predpr AND D.kls_role_id=2 AND D.fox_kod=C.KOD));
  COMMIT;

  DELETE FROM predpr_role WHERE predpr_role.KLS_ROLE_ID=2 AND
    NOT EXISTS (SELECT * from load_buffer.pererab E WHERE E.kod_predpr = predpr_role.PREDPR_ID and predpr_role.kls_role_id=2 and E.kod=predpr_role.FOX_KOD AND E.kod_predpr<>0);
  COMMIT;

  INSERT INTO predpr_role (predpr_id,kls_role_id,fox_kod)
	(SELECT DISTINCT 0,2,0 FROM load_buffer.pererab
      WHERE not exists (SELECT * FROM predpr_role E where E.predpr_id=0 and E.kls_role_id=2 and E.fox_kod=0));

END RENEW_PREDPR_ROLE2;

/

--
-- RENEW_STAN_PREDPR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_STAN_PREDPR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
BEGIN

  UPDATE stan_predpr
    set (predpr_gdkod) =
	    (SELECT DISTINCT A.gdkod FROM load_buffer.stan_predpr A
		 WHERE A.kod=stan_predpr.predpr_id AND
		       A.kst=stan_predpr.stan_id AND
			   A.kvet=stan_predpr.vetka_id)
    WHERE exists (SELECT * FROM load_buffer.stan_predpr B
              		 WHERE B.kod=stan_predpr.predpr_id AND
		                   B.kst=stan_predpr.stan_id AND
			               B.kvet=stan_predpr.vetka_id);

  INSERT INTO stan_predpr (predpr_id,stan_id,vetka_id,predpr_gdkod)
    (SELECT C.kod, C.kst, C.kvet, C.gdkod FROM load_buffer.stan_predpr C
      WHERE not exists (SELECT * FROM stan_predpr D
              		 WHERE C.kod=D.predpr_id AND
		                   C.kst=D.stan_id AND
			               C.kvet=D.vetka_id));

  COMMIT;

END RENEW_STAN_PREDPR;

/

--
-- RENEW_TOW_PUT_KONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Tow_Put_Kons (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

UPDATE load_buffer.tow_put SET kod_ob=44 WHERE kod_ob=2033;
UPDATE load_buffer.tow_put SET kod_ob=7001 WHERE kod_ob=12001;
UPDATE load_buffer.tow_put SET kod_ob=7002 WHERE kod_ob=12002;
UPDATE load_buffer.tow_put SET kod_ob=2007 WHERE kod_ob=12007;
UPDATE load_buffer.tow_put SET kod_ob=2008 WHERE kod_ob=12008;
UPDATE load_buffer.tow_put SET kod_ob=1024 WHERE kod_ob=1091;
UPDATE load_buffer.tow_put SET kod_ob=1035 WHERE kod_ob=1092;
UPDATE load_buffer.tow_put SET kod_ob=9020 WHERE kod_ob=9071;
UPDATE load_buffer.tow_put SET kod_ob=9021 WHERE kod_ob=9072;
UPDATE load_buffer.tow_put SET kod_ob=9022 WHERE kod_ob=9073;
UPDATE load_buffer.tow_put SET kod_ob=9023 WHERE kod_ob=9074;
UPDATE load_buffer.tow_put SET kod_ob=9004 WHERE kod_ob=9075;
UPDATE load_buffer.tow_put SET kod_ob=1022 WHERE kod_ob=11022;
UPDATE load_buffer.tow_put SET kod_ob=1029 WHERE kod_ob=11029;
UPDATE load_buffer.tow_put SET kod_ob=1034 WHERE kod_ob=11034;
UPDATE load_buffer.tow_put SET kod_ob=1036 WHERE kod_ob=11036;
UPDATE load_buffer.tow_put SET kod_ob=1044 WHERE kod_ob=11044;
UPDATE load_buffer.tow_put SET kod_ob=1046 WHERE kod_ob=11046;
UPDATE load_buffer.tow_put SET kod_ob=1083 WHERE kod_ob=11083;
UPDATE load_buffer.tow_put SET kod_ob=1080 WHERE kod_ob=11084;
UPDATE load_buffer.tow_put SET kod_ob=9021 WHERE kod_ob=9080;
UPDATE load_buffer.tow_put SET kod_ob=9080 WHERE kod_ob=13002;
UPDATE load_buffer.tow_put SET kod_ob=9076 WHERE kod_ob=13001;


UPDATE TOW_PUT_KONS TP SET
  (DATE_OPER, KOL_1, KG_1, SUMMA_POK_BN_1, SUMMA_POK_NDS_1, 
   SUMMA_POK_AKCIZ_1, SUMMA_POK_1, KOL_2, KG_2, SUMMA_POK_BN_2, 
   SUMMA_POK_NDS_2, SUMMA_POK_AKCIZ_2, SUMMA_POK_2, ORG_STRU_ID, PREDPR_KONS_ID, 
   PROD_KONS_ID, LOAD_TYPE_ID, ORG_POLUCH_ID)
 = (
  SELECT A.DA, NVL(A.KOL1,0), NVL(A.KG1,0),  
      NVL(A.S_POK_BN1,0), NVL(A.S_POK1,0)-NVL(A.S_POK_BN1,0),0,NVL(A.S_POK1,0),
      NVL(A.KOL2,0), NVL(A.KG2,0),
      NVL(A.S_POK_BN2,0), NVL(A.S_POK2,0)-NVL(A.S_POK_BN2,0),0,NVL(A.S_POK2,0),
  	  A.KOD_OB,TO_NUMBER(A.POST_INN),A.KOD_PROD,Get_Tip_Otgr(NVL(A.VID_TR,0)),C.ID
    FROM load_buffer.Tow_Put A, ORG_STRUCTURE B, ORG_STRUCTURE C
    WHERE A.KOD_FIL=B.FILIAL AND A.FIL_PP=C.FILIAL 
	  AND A.nom_tw=TP.ID_OPER 
	  AND B.ID=TP.FILIAL_ID 
		)
WHERE EXISTS (SELECT NULL FROM load_buffer.Tow_Put A, ORG_STRUCTURE B, ORG_STRUCTURE C
    WHERE A.KOD_FIL=B.FILIAL AND A.FIL_PP=C.FILIAL 
	  AND A.nom_tw=TP.ID_OPER AND B.ID=TP.FILIAL_ID);

COMMIT;

INSERT  INTO TOW_PUT_KONS
  (FILIAL_ID,ID_OPER,DATE_OPER, KOL_1, KG_1, SUMMA_POK_BN_1, SUMMA_POK_NDS_1, 
   SUMMA_POK_AKCIZ_1, SUMMA_POK_1, KOL_2, KG_2, SUMMA_POK_BN_2, 
   SUMMA_POK_NDS_2, SUMMA_POK_AKCIZ_2, SUMMA_POK_2, ORG_STRU_ID, PREDPR_KONS_ID, 
   PROD_KONS_ID, LOAD_TYPE_ID, ORG_POLUCH_ID)
 (SELECT B.ID,A.nom_tw,A.DA, NVL(A.KOL1,0), NVL(A.KG1,0),  
      NVL(A.S_POK_BN1,0), NVL(A.S_POK1,0)-NVL(A.S_POK_BN1,0),0,NVL(A.S_POK1,0),
      NVL(A.KOL2,0), NVL(A.KG2,0),
      NVL(A.S_POK_BN2,0), NVL(A.S_POK2,0)-NVL(A.S_POK_BN2,0),0,NVL(A.S_POK2,0),
  	  A.KOD_OB,TO_NUMBER(A.POST_INN),A.KOD_PROD,Get_Tip_Otgr(NVL(A.VID_TR,0)), C.ID
    FROM load_buffer.Tow_Put A, ORG_STRUCTURE B, ORG_STRUCTURE C
    WHERE A.KOD_FIL=B.FILIAL AND A.FIL_PP=C.FILIAL 
	  AND NOT EXISTS (SELECT NULL FROM TOW_PUT_KONS E WHERE E.ID_OPER=A.nom_tw AND E.FILIAL_ID=B.ID));

COMMIT;

DELETE FROM TOW_PUT_KONS A WHERE 
    NOT EXISTS (SELECT NULL FROM load_buffer.tow_put k, ORG_STRUCTURE B WHERE k.nom_tw = A.ID_OPER AND k.kod_fil=B.filial AND B.ID = A.FILIAL_ID)
    AND A.DATE_OPER BETWEEN date_beg AND date_end;

COMMIT;

END Renew_Tow_Put_Kons; 
/

--
-- TALGAR_PREDPR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Talgar_predpr IS
BEGIN

insert into csl_k.cs_adr (name,city,zipcode,id_country,status)
(select p_adressp as name,p_cityp as city,p_zipp as zipcode,p_idCountry as id_Country,p_status as status from master.predpr_talgar
minus
select name,city,zipcode,id_Country,status from csl_k.cs_adr);

insert into csl_k.cs_adr (name,city,zipcode,id_country,status)
(select p_adressj as name,p_cityj as city,p_zipj as zipcode,p_idCountry as id_Country,p_status as status from master.predpr_talgar
minus
select name,city,zipcode,id_Country,status from csl_k.cs_adr);

/*insert into csl_k.cs_adr (name,city,zipcode,id_country,status)
(select null as name,pb_adress as city,pb_ziz as zipcode,p_idCountry as id_Country,p_status as status from master.predpr_talgar
minus
select name,city,zipcode,id_Country,status from csl_k.cs_adr);
*/

insert into csl_k.cs_company (name,sname,id_fs,id_country,id_grcom,id_bsch,id_adr_u, id_adr,
                                phone,fax,inn,okonx,okpo,status,created,modified,local_code)
								(select predpr_talgar.p_name,predpr_talgar.p_sname,predpr_talgar.p_idfs,
								predpr_talgar.p_idCountry,predpr_talgar.p_idgrcom,predpr_talgar.p_idbsch,aj.id,ap.id,
								predpr_talgar.p_phone,predpr_talgar.p_fax,predpr_talgar.p_inn,predpr_talgar.p_okonh,
								predpr_talgar.p_okpo,predpr_talgar.p_status,predpr_talgar.p_created,
								predpr_talgar.p_modified, predpr_talgar.P_ID 
								from master.predpr_talgar,csl_k.cs_adr ap, csl_k.cs_adr aj
								where (predpr_talgar.p_adressp=ap.name)
									  and (predpr_talgar.p_cityp=ap.city)
									  and (predpr_talgar.p_zipp=ap.zipcode) 
									  and (predpr_talgar.p_adressj=aj.name)
									  and (predpr_talgar.p_cityj=aj.city)
									  and (predpr_talgar.p_zipj=aj.zipcode) );


update kls_predpr c set c.talgar_id = (select max(b.ID) 
from kls_predpr a,csl_k.cs_company b where c.id=a.id and b.local_code=a.ID and b.local_code>0);

  
COMMIT;
END Talgar_Predpr;

/

--
-- TALGAR_PREDPR_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Talgar_predpr_Test IS
BEGIN

insert into sprtest.cs_adr (name,city,zipcode,id_country,status)
(select p_adressp as name,p_cityp as city,p_zipp as zipcode,p_idCountry as id_Country,p_status as status from master.predpr_talgar
minus
select name,city,zipcode,id_Country,status from sprtest.cs_adr);

insert into sprtest.cs_adr (name,city,zipcode,id_country,status)
(select p_adressj as name,p_cityj as city,p_zipj as zipcode,p_idCountry as id_Country,p_status as status from master.predpr_talgar
minus
select name,city,zipcode,id_Country,status from sprtest.cs_adr);

/*insert into sprtest.cs_adr (name,city,zipcode,id_country,status)
(select null as name,pb_adress as city,pb_ziz as zipcode,p_idCountry as id_Country,p_status as status from master.predpr_talgar
minus
select name,city,zipcode,id_Country,status from sprtest.cs_adr);
*/

COMMIT;

insert into sprtest.cs_company (name,sname,id_fs,id_country,id_grcom,id_bsch,id_adr_u, id_adr,
                                phone,fax,inn,okonx,okpo,status,created,modified,local_code)
								(select predpr_talgar.p_name,predpr_talgar.p_sname,predpr_talgar.p_idfs,
								predpr_talgar.p_idCountry,predpr_talgar.p_idgrcom,predpr_talgar.p_idbsch,aj.id,ap.id,
								predpr_talgar.p_phone,predpr_talgar.p_fax,predpr_talgar.p_inn,predpr_talgar.p_okonh,
								predpr_talgar.p_okpo,predpr_talgar.p_status,predpr_talgar.p_created,
								predpr_talgar.p_modified, predpr_talgar.P_ID 
								from master.predpr_talgar,sprtest.cs_adr ap, sprtest.cs_adr aj
								where (predpr_talgar.p_adressp=ap.name)
									  and (predpr_talgar.p_cityp=ap.city)
									  and (predpr_talgar.p_zipp=ap.zipcode) 
									  and (predpr_talgar.p_adressj=aj.name)
									  and (predpr_talgar.p_cityj=aj.city)
									  and (predpr_talgar.p_zipj=aj.zipcode) );

 
update kls_predpr c set c.talgar_id = (select max(b.ID) 
from kls_predpr a,sprtest.cs_company b where c.id=a.id and b.local_code=a.ID and b.local_code>0);
COMMIT;
END Talgar_Predpr_Test;

/

--
-- GET_FILIAL_KONS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Filial_Kons
 (kod_fil# NUMBER)
RETURN NUMBER
AS
  val# NUMBER;
BEGIN
  BEGIN
    SELECT MIN(ID) INTO val# FROM ORG_STRUCTURE
      WHERE filial=kod_fil#;
  EXCEPTION
    WHEN OTHERS THEN
	  val#:=31;
  END;			
  RETURN val#;
END Get_Filial_Kons;

/

--
-- GET_OLD_SF  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Old_Sf(pNom_Dok NUMBER, pNom_Sf NUMBER, pOld_dok NUMBER, pOld_sf NUMBER) RETURN NUMBER IS
  vOld_Old_sf NUMBER;
  vOld_Old_dok NUMBER;
BEGIN
  -- Функция возвращает номер корректируемого счета для визуализации в СФ и реестрах (через дробь) с 
  -- учетом ситуации когда корректирующие СФ в свою очередб тоже корректируются
  IF NVL(pOld_Sf,0)=0 THEN -- Если нет ссылки на корректируемый счет
    RETURN NULL;
  ELSE
    IF NVL(pOld_Sf,0)=NVL(pNom_Sf,0) THEN -- Если корректируемый и корректирующий счета равны, то Корректирующий счет - минусовой
	  -- Проверяем не является ли корректируемый счет корректирующим для другого (цепочка корректировок)
	  BEGIN
  	    SELECT Old_nom_sf,Old_nom_dok INTO vOld_old_sf,vOld_old_dok FROM BILLS WHERE nom_dok=pOld_Dok;
      EXCEPTION
        WHEN OTHERS THEN
  	      vOld_old_sf:=0;
		  vOld_old_dok:=0;
      END;
 	  IF NVL(vOld_Old_Sf,0)=0 THEN -- Если корректируемый счет не ссылается на другой
	    RETURN NULL;
	  ELSE -- Если корректируемый счет является корректирующим для другого
	    RETURN vOld_Old_sf;
	  END IF;
	ELSE
	  RETURN pOld_sf;
	END IF;
  END IF;	      		   
END Get_Old_sf;
/

--
-- DAYLY_FOR_DEKAD_TRIAD_SPLITING  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.DAYLY_FOR_DEKAD_TRIAD_SPLITING
(DATA, NAME_NPR, XVALUE)
AS 
select A.DATA,KLS_PROD.NAME_NPR,
       case EXTRACT(DAY FROM A.DATA) 
       WHEN 1 THEN A.plan_nar 
       ELSE
        (select A.plan_nar-B.plan_nar from Dayly_Fact b where b.prod=a.prod AND a.DATA=b.DATA+1)
       end as Xvalue
       from Dayly_Fact A 
            LEFT JOIN KLS_PROD ON KLS_PROD.ID_NPR=A.PROD
         order by A.DATA,KLS_PROD.NAME_NPR;


--
-- PREDPR_TALGAR_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.PREDPR_TALGAR_ALL
(P_NAME, P_ID, P_SNAME, P_INN, P_ZIPJ, 
 P_ZIPP, P_CITYP, P_CITYJ, P_ADRESSP, P_ADRESSJ, 
 P_OKONH, P_OKPO, P_FAX, P_PHONE, PB_KKORS, 
 P_TID, PB_NAME, PB_ADRESS, PB_BIK, PB_ZIZ, 
 PR_NAME, PR_SNAME, P_HNAME, P_STATSNAME, P_STATESHORT, 
 P_PERTYPE, P_FS, P_IDCOUNTRY, P_IDBSCH, P_IDGRCOM, 
 P_FDK, P_STATUS, P_CREATED, P_MODIFIED)
AS 
SELECT kls_predpr.predpr_name, kls_predpr.id, kls_predpr.short_name,
       kls_predpr.inn, kls_predpr.postindex_j, kls_predpr.postindex_p,
       kls_predpr.city_p, kls_predpr.city_j, kls_predpr.address_p,
       kls_predpr.address_j, kls_predpr.okonh, substr(kls_predpr.okpo,1,8), kls_predpr.fax,
       kls_predpr.phone, kls_predpr.bank_kors, kls_predpr.talgar_id,
       kls_bank.bank_name, kls_bank.address, kls_bank.bik, kls_bank.postindex,
       kls_region.region_name, kls_region.short_name, kls_holding.holding_name,
       kls_states.state_name, kls_states.short_name, kls_pertype.pertype_name, 
	   rtrim(substr(kls_predpr.predpr_name,1,4)),181,121,kls_holding.id,3,3,sysdate,sysdate
  FROM kls_predpr, kls_bank, kls_holding, kls_region, kls_states, kls_pertype
 WHERE (    (kls_bank.kors = kls_predpr.bank_kors)
        AND (kls_holding.id = kls_predpr.holding_id)
        AND (kls_region.id = kls_predpr.region_id)
        AND (kls_states.id = kls_region.states_id)
        AND (kls_pertype.id = kls_predpr.pertype_id)
        AND (kls_predpr.postindex_j <> '0')
        AND (kls_predpr.postindex_p <> '0')
        AND ((kls_predpr.talgar_id = 0) or (kls_predpr.talgar_id is null))
		
       );


--
-- V_BILLS_FIN_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILLS_FIN_SNP
(IS_AGENT, NOM_DOK, NOM_SF, NPO_SF, DATE_VYP_SF, 
 DATE_KVIT, DATE_BUXG, DATE_MOS, SUMMA_DOK, NDS_DOK, 
 GSM_DOK, AKCIZ_DOK, PRIM, FIO_ISPOL, KOL_DN, 
 OLD_NOM_DOK, NOM_ZD, OWNER_ID, DOG_ID, USL_NUMBER, 
 PROD_ID_NPR, ORIG_DOG_ID, ORIG_USL_NUMBER, SNP_DOG_ID, SNP_USL_NUMBER, 
 ORIG_NOM_SF, ORIG_SUMMA_DOK, ORIG_NDS_DOK, ORIG_GSM_DOK, ORIG_AKCIZ_DOK, 
 OLD_NOM_SF, NUM_5_DAY, NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, 
 PROTO_DATE, NO_AKCIZ, KORR_PROD)
AS 
SELECT /*+ ALL_ROWS INDEX(BILLS BILLS_DATE_MOS_I) */
-- Счета-фактуры из комплекса ФИНАНСЫ
  BILLS.IS_AGENT,
  BILLS.NOM_DOK,
  BILLS.NOM_SF,
  BILLS.NPO_SF,
  BILLS.DATE_VYP_SF,
  BILLS.DATE_KVIT,
  BILLS.DATE_BUXG,
  BILLS.DATE_MOS,
  BILLS.LUK_SUMMA_DOK,
  BILLS.LUK_NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  BILLS.PRIM,
  BILLS.FIO_ISPOL,
  BILLS.KOL_DN,
  BILLS.OLD_NOM_DOK,
  BILLS.NOM_ZD,
  BILLS.OWNER_ID,
  BILLS.LUK_DOG_ID,
  BILLS.LUK_USL_NUMBER,
  BILLS.PROD_ID_NPR,
  BILLS.DOG_ID,
  BILLS.USL_NUMBER,
  BILLS.SNP_DOG_ID,
  BILLS.SNP_USL_NUMBER,
  BILLS.NOM_SF,
  BILLS.SUMMA_DOK,
  BILLS.NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  BILLS.OLD_NOM_SF,
  BILLS.NUM_5_DAY,
  BILLS.NAZN_OTG_ID,
  BILLS.KORR_5_DAY,
  BILLS.PROTO_NUM,
  BILLS.PROTO_DATE,
  BILLS.NO_AKCIZ,
  BILLS.KORR_PROD
FROM BILLS,BILLS_PRIMARY
WHERE BILLS_PRIMARY.PRIMARY_APPL='FIN_SNP'
  AND BILLS.DATE_MOS BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
  AND BILLS.IS_AGENT<3
  AND BILLS.NAZN_OTG_ID<>10;


--
-- V_BILLS_FIN_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILLS_FIN_UNP
(IS_AGENT, NOM_DOK, NOM_SF, NPO_SF, DATE_VYP_SF, 
 DATE_KVIT, DATE_BUXG, DATE_MOS, SUMMA_DOK, NDS_DOK, 
 GSM_DOK, AKCIZ_DOK, PRIM, FIO_ISPOL, KOL_DN, 
 OLD_NOM_DOK, NOM_ZD, OWNER_ID, DOG_ID, USL_NUMBER, 
 PROD_ID_NPR, ORIG_DOG_ID, ORIG_USL_NUMBER, SNP_DOG_ID, SNP_USL_NUMBER, 
 ORIG_NOM_SF, ORIG_SUMMA_DOK, ORIG_NDS_DOK, ORIG_GSM_DOK, ORIG_AKCIZ_DOK, 
 OLD_NOM_SF, NUM_5_DAY, NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, 
 PROTO_DATE, NO_AKCIZ, KORR_PROD)
AS 
SELECT /*+ ALL_ROWS INDEX(BILLS BILLS_DATE_MOS_I) */
-- Счета-фактуры из комплекса ФИНАНСЫ
  BILLS.IS_AGENT,
  BILLS.NOM_DOK,
  BILLS.NOM_SF,
  BILLS.NPO_SF,
  BILLS.DATE_VYP_SF,
  BILLS.DATE_KVIT,
  BILLS.DATE_BUXG,
  BILLS.DATE_MOS,
  BILLS.LUK_SUMMA_DOK,
  BILLS.LUK_NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  BILLS.PRIM,
  BILLS.FIO_ISPOL,
  BILLS.KOL_DN,
  BILLS.OLD_NOM_DOK,
  BILLS.NOM_ZD,
  BILLS.OWNER_ID,
  BILLS.DOG_ID,
  BILLS.USL_NUMBER,
  BILLS.PROD_ID_NPR,
  BILLS.DOG_ID,
  BILLS.USL_NUMBER,
  BILLS.SNP_DOG_ID,
  BILLS.SNP_USL_NUMBER,
  BILLS.NOM_SF,
  BILLS.SUMMA_DOK,
  BILLS.NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  BILLS.OLD_NOM_SF,
  BILLS.NUM_5_DAY,
  BILLS.NAZN_OTG_ID,
  BILLS.KORR_5_DAY,
  BILLS.PROTO_NUM,
  BILLS.PROTO_DATE,
  BILLS.NO_AKCIZ,
  BILLS.KORR_PROD
FROM BILLS,BILLS_PRIMARY
WHERE BILLS_PRIMARY.PRIMARY_APPL='FIN_UNP'
  AND BILLS.DATE_MOS BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE;


--
-- V_BILLS_FOR_REAL_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILLS_FOR_REAL_OPL
(NOM_DOK, NOM_SF, DATE_VYP_SF, DATE_BUXG, DATE_KVIT, 
 KOL_DN, DOG_ID, USL_NUMBER, NOM_ZD, SUMMA_DOK, 
 OWNER_ID, PROD_ID_NPR)
AS 
SELECT  NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,KOL_DN,DOG_ID,USL_NUMBER,NOM_ZD,SUMMA_DOK,OWNER_ID,PROD_ID_NPR FROM BILLS
UNION ALL
SELECT NOM_DOK,NOM_SF,DATA_DOK,DATA_BUXG,DATA_KVIT,KOL_DN,DOG_ID,K_USL,NOM_ZD,SUMMA_DOK,KOD_SOB,KOD_NFP FROM master.to_ss;


--
-- V_BILLS_R3  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILLS_R3
(IS_AGENT, NOM_DOK, NOM_SF, NPO_SF, DATE_VYP_SF, 
 DATE_KVIT, DATE_BUXG, DATE_MOS, SUMMA_DOK, NDS_DOK, 
 GSM_DOK, AKCIZ_DOK, PRIM, FIO_ISPOL, KOL_DN, 
 OLD_NOM_DOK, NOM_ZD, OWNER_ID, DOG_ID, USL_NUMBER, 
 PROD_ID_NPR, ORIG_DOG_ID, ORIG_USL_NUMBER, SNP_DOG_ID, SNP_USL_NUMBER, 
 ORIG_NOM_SF, ORIG_SUMMA_DOK, ORIG_NDS_DOK, ORIG_GSM_DOK, ORIG_AKCIZ_DOK, 
 OLD_NOM_SF, NUM_5_DAY, NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, 
 PROTO_DATE, NO_AKCIZ, KORR_PROD)
AS 
SELECT /*+ ALL_ROWS INDEX(BILLS BILLS_DATE_MOS_I)*/
-- Счета-фактуры из комплекса ФИНАНСЫ, которых еще нет в R3
  BILLS.IS_AGENT,
  BILLS.NOM_DOK,
  BILLS.NOM_SF,
  BILLS.NPO_SF,
  BILLS.DATE_VYP_SF,
  BILLS.DATE_KVIT,
  BILLS.DATE_BUXG,
  BILLS.DATE_MOS,
  BILLS.LUK_SUMMA_DOK,
  BILLS.LUK_NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  BILLS.PRIM,
  BILLS.FIO_ISPOL,
  BILLS.KOL_DN,
  BILLS.OLD_NOM_DOK,
  BILLS.NOM_ZD,
  BILLS.OWNER_ID,
  BILLS.LUK_DOG_ID,
  BILLS.LUK_USL_NUMBER,
  BILLS.PROD_ID_NPR,
  BILLS.DOG_ID,
  BILLS.USL_NUMBER,
  BILLS.SNP_DOG_ID,
  BILLS.SNP_USL_NUMBER,
  BILLS.NOM_SF,
  BILLS.SUMMA_DOK,
  BILLS.NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  BILLS.OLD_NOM_SF,
  BILLS.NUM_5_DAY,
  BILLS.NAZN_OTG_ID,
  BILLS.KORR_5_DAY,
  BILLS.PROTO_NUM,
  BILLS.PROTO_DATE,
  BILLS.NO_AKCIZ,
  BILLS.KORR_PROD
FROM BILLS,BILLS_PRIMARY
WHERE BILLS_PRIMARY.PRIMARY_APPL='R3'
  AND BILLS.DATE_MOS BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
  AND BILLS.IS_AGENT<3
  AND BILLS.NAZN_OTG_ID<>10
  AND (NOT EXISTS (SELECT NULL FROM R3_BILLS WHERE R3_BILLS.NOM_DOK=BILLS.NOM_DOK))
UNION ALL
SELECT /*+ ALL_ROWS INDEX(BILLS BILLS_DATE_MOS_I) INDEX(R3_BILLS R3_BILLS_NOM_DOK_I) */
-- Счета-фактуры из R3
  R3_BILLS.IS_AGENT,
  R3_BILLS.NOM_DOK,
  R3_BILLS.NOM_R3,
  BILLS.NPO_SF,
  BILLS.DATE_VYP_SF,
  BILLS.DATE_KVIT,
  BILLS.DATE_BUXG,
  BILLS.DATE_MOS,
  R3_BILLS.SUMMA_DOK,
  R3_BILLS.SUMMA_PROD_NDS+R3_BILLS.SUMMA_TARIF_NDS+R3_BILLS.SUMMA_VOZN_NDS,
  0 AS GSM_DOK,
  R3_BILLS.SUMMA_AKCIZ,
  BILLS.PRIM,
  BILLS.FIO_ISPOL,
  BILLS.KOL_DN,
  BILLS.OLD_NOM_DOK,
  BILLS.NOM_ZD,
  BILLS.OWNER_ID,
  BILLS.LUK_DOG_ID,
  BILLS.LUK_USL_NUMBER,
  BILLS.PROD_ID_NPR,
  BILLS.DOG_ID,
  BILLS.USL_NUMBER,
  BILLS.SNP_DOG_ID,
  BILLS.SNP_USL_NUMBER,
  BILLS.NOM_SF,
  BILLS.SUMMA_DOK,
  BILLS.NDS_DOK,
  BILLS.GSM_DOK,
  BILLS.AKCIZ_DOK,
  NULL,
  BILLS.NUM_5_DAY,
  BILLS.NAZN_OTG_ID,
  BILLS.KORR_5_DAY,
  BILLS.PROTO_NUM,
  BILLS.PROTO_DATE,
  BILLS.NO_AKCIZ,
  BILLS.KORR_PROD
FROM BILLS,R3_BILLS,BILLS_PRIMARY
WHERE BILLS_PRIMARY.PRIMARY_APPL='R3'
  AND BILLS.DATE_MOS BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
  AND BILLS.IS_AGENT<3
  AND BILLS.NAZN_OTG_ID<>10
  AND BILLS.NOM_DOK=R3_BILLS.NOM_DOK;


--
-- V_DAYLYFACT_PROIZV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DAYLYFACT_PROIZV
(D_FAKT_DATE, PLAN_REF_ID, PROIZV)
AS 
SELECT a.D_FAKT_DATE, a.PLAN_REF_ID, iif_num(a.d_fakt_otgr_nar-pla.ostat+a.d_fakt_ostat_tek+a.d_fakt_hran_tek-pla.hran-a.d_fakt_perepasp-a.d_fakt_pokup,'<',0,0,a.d_fakt_otgr_nar-pla.ostat+a.d_fakt_ostat_tek+a.d_fakt_hran_tek-pla.hran-a.d_fakt_perepasp-a.d_fakt_pokup) as proizv
  FROM dayly_fact a, plan_refinery pla
 WHERE ((pla.ID = a.plan_ref_id));


--
-- V_FIN_OTPCEN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_OTPCEN
(ID_NPR, NAME_NPR, CAT_CEN_ID, CAT_CEN_NAME, ID, 
 CENA_BN, CENA, AKCIZ, NDS20, NGSM25, 
 CENA_OTP, BEGIN_DATE, END_DATE, PROD_ID_NPR, OWNERSHIP_ID, 
 OWNERSHIP_NAME, SUPPLIER, SUPPLIER_ID, PROTOKOL_NUM, PROTOKOL_DATE, 
 IS_ORIGINAL, PROTOKOL_BEGIN_DATE, CENA_NPO, CENA_OTP_NPO, NDS20_NPO, 
 NO_AKCIZ, PLAT_ID)
AS 
SELECT /*+ ORDERED USE_NL(NPR_PRICES, KLS_CAT_CEN, KLS_PROD, KLS_OWNERSHIP, KLS_PREDPR SUPPLIER, PREDPR_ROLE) */
  KLS_PROD.ID_NPR,
  KLS_PROD.NAME_NPR,
  KLS_CAT_CEN.ID AS CAT_CEN_ID,
  KLS_CAT_CEN.CAT_CEN_NAME,
  NPR_PRICES.ID,
  NPR_PRICES.CENA_BN,
  NPR_PRICES.CENA,
  NPR_PRICES.AKCIZ,
  NPR_PRICES.NDS20,
  NPR_PRICES.NGSM25,
  NPR_PRICES.CENA_OTP,
  NPR_PRICES.BEGIN_DATE,
  NPR_PRICES.END_DATE,
  NPR_PRICES.PROD_ID_NPR,
  NPR_PRICES.OWNERSHIP_ID,
  KLS_OWNERSHIP.OWNERSHIP_NAME,
  SUPPLIER.PREDPR_NAME AS supplier,
  SUPPLIER_ID,protokol_num,protokol_date,is_original,protokol_begin_date,cena_npo,cena_otp_npo,nds20_npo,no_akciz,kls_cat_cen.PREDPR_ID as PLAT_ID
FROM NPR_PRICES, KLS_CAT_CEN, KLS_PROD, KLS_OWNERSHIP, KLS_PREDPR SUPPLIER, PREDPR_ROLE,
(SELECT DISTINCT DECODE(app_users.unp,1,TO_DATE('01.01.2020','dd.mm.yyyy'),TO_DATE('31.12.2004','dd.mm.yyyy')) AS EndDate FROM app_users WHERE app_users.NETNAME=For_Init.GetCurrUser) a
WHERE ((NPR_PRICES.CAT_CEN_ID = KLS_CAT_CEN.ID) AND
       (NPR_PRICES.PROD_ID_NPR = KLS_PROD.ID_NPR) AND
       (NPR_PRICES.OWNERSHIP_ID=KLS_OWNERSHIP.ID) AND
	   (NPR_PRICES.SUPPLIER_ID=SUPPLIER.ID) AND
	   (PREDPR_ROLE.PREDPR_ID=SUPPLIER.ID) AND
	   (PREDPR_ROLE.KLS_ROLE_ID=1)) AND
	   (NPR_PRICES.BEGIN_DATE<=a.EndDate or KLS_CAT_CEN.PREDPR_ID=2641);


--
-- V_FINREPORT_SDZ_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_SDZ_OPL
(IS_HOLDING, KOD_PLAT, DOG_ID, DATA_POST, SUMMA, 
 NOM_DOK)
AS 
SELECT
  DECODE(KLS_PREDPR.HOLDING_ID,41,0,DECODE(KLS_PREDPR.HOLDING_ID,42,0,1)),
  opl.KOD_PLD,
  dog.id,
  OPL.DATA_POST,
  OPL.SUMMA, 
  OPL.NOM_DOK
FROM load_buffer.opl,KLS_PREDPR,load_buffer.dog
WHERE opl.kod_pld=KLS_PREDPR.ID AND load_buffer.opl.NOM_DOG=load_buffer.dog.NUM_DOG;


--
-- V_GU12_EXPED  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_EXPED
(ID, SHORT_NAME, PREDPR_NAME, OKPO, EXPED_ADR, 
 FOX_KOD)
AS 
select a.ID
,DECODE(a.ID,0,'',a.SHORT_NAME) AS SHORT_NAME
,DECODE(a.ID,0,'',A.PREDPR_NAME) AS PREDPR_NAME
,A.OKPO
,DECODE(a.ID,0,'',A.POSTINDEX_P||' '||A.CITY_P||' '||A.ADDRESS_P) AS EXPED_ADR
,B.FOX_KOD
from KLS_PREDPR a,PREDPR_ROLE B
where a.ID=b.PREDPR_ID
and (b.KLS_ROLE_ID=3
or a.ID=0)
order by SHORT_NAME;


--
-- V_GU12_GRAF_PER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_GRAF_PER
(PROD, M_OTGR, EXPED, PRINVAG, DATE_R, 
 KOL, VES)
AS 
SELECT PROD,M_OTGR,EXPED,PRINVAG,DATE_R,SUM(KOL) AS KOL,SUM(VES) AS VES
FROM (
      SELECT
      KP.NAME AS PROD
      ,(CASE
            WHEN A.VLADPUT_ID=1111 THEN 'НПЗ'
            WHEN A.VLADPUT_ID=2952 THEN 'НПЗ'
            WHEN A.VLADPUT_ID=2120 THEN 'СМН'
	        ELSE 'СМН'
        END) AS M_OTGR
      ,E.PREDPR_NAME AS EXPED
      ,PV.ABBR AS PRINVAG
      ,BR.DATE_R
      ,BR.KOL_VAG AS KOL
      ,BR.VES AS VES
      FROM GU12_BR BR
      ,GU12_B B
      ,GU12_A A
      ,KLS_GD_PRINVAG PV
      ,KLS_PROD_GU12 KP
      ,V_GU12_EXPED E
      WHERE A.ID=B.ID_A
      AND B.ID=BR.ID_B
      AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_GRAF','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_GRAF','MASTER','GU12')
      AND B.PRINVAG_ID=PV.ID
      AND A.PROD_ID=KP.ID(+)
      AND A.EXPED_ID=E.ID(+)
	  AND A.SOGL_DATE IS NOT NULL
	  AND B.ISCOR<>2)
GROUP BY PROD,M_OTGR,EXPED,PRINVAG,DATE_R
ORDER BY PROD,M_OTGR,EXPED,PRINVAG,DATE_R;


--
-- V_GU12_GRUZ_POL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_GRUZ_POL
(ID, GD_KOD, FOX_KOD, PREDPR_NAME, SHORT_NAME, 
 OKPO)
AS 
select id,Trim(gd_kod),decode(id,2641,'03478446',3633,'3032',Trim(gd_kod)),predpr_name,short_name,okpo
from kls_predpr
where id<>1 and is_block=0 and gd_kod is not null
order by short_name;


--
-- V_GU12_OTPRAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_OTPRAV
(GROTP_ID, SHORT_NAME, GROTP_OKPO, PREDPR_NAME, OTPR_ADR, 
 GROTP_RS, BANK_NAME)
AS 
SELECT DISTINCT 
	   KLS_TEX_PD.GROTP_ID
	   ,KLS_PREDPR.SHORT_NAME
	   ,Trim(KLS_PREDPR.OKPO) AS GROTP_OKPO
	   ,KLS_PREDPR.PREDPR_NAME
	   ,KLS_PREDPR.POSTINDEX_P||' '||KLS_PREDPR.CITY_P||' '||KLS_PREDPR.ADDRESS_P AS OTPR_ADR
	   ,KLS_PREDPR.RS AS GROTP_RS
	   ,KLS_BANKS.BANK_NAME
FROM KLS_TEX_PD
	 LEFT JOIN KLS_PREDPR ON KLS_TEX_PD.GROTP_ID=KLS_PREDPR.ID
	 LEFT JOIN KLS_BANKS ON KLS_PREDPR.BANKS_ID=KLS_BANKS.ID 
WHERE GROTP_ID<>0 AND KLS_TEX_PD.ID<>0;


--
-- V_GU12_PLATTAR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_PLATTAR
(PLATTAR_ID, DOGOVOR, SHORT_NAME, PREDPR_NAME, OKPO, 
 GD_KOD, PLATTAR_ADR, RS, BANK_NAME)
AS 
SELECT PL.*
,KLS_PREDPR.SHORT_NAME
,KLS_PREDPR.PREDPR_NAME
,KLS_PREDPR.OKPO
,KLS_PREDPR.GD_KOD
,KLS_PREDPR.POSTINDEX_P||' '||KLS_PREDPR.CITY_P||' '||KLS_PREDPR.ADDRESS_P AS PLATTAR_ADR 
,KLS_PREDPR.RS
,KLS_BANKS.BANK_NAME 
FROM
(SELECT PLATTARIF_ID AS PLATTAR_ID, MAX(ID) AS DOGOVOR
 FROM KLS_TEX_PD
 WHERE PLATTARIF_ID<>0
 GROUP BY PLATTARIF_ID) PL
LEFT JOIN KLS_PREDPR ON PL.PLATTAR_ID=KLS_PREDPR.ID
LEFT JOIN KLS_BANKS ON KLS_PREDPR.BANKS_ID=KLS_BANKS.ID;


--
-- V_GU12_REP_SVERKA  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_SVERKA
(NOM_Z, STAN_NAME, KOL_B, VES_B, KOL_BR, 
 VES_BR)
AS 
SELECT A.NOM_Z,S.STAN_NAME,B.KOL_VAG AS KOL_B,B.VES AS VES_B,R.KOL_BR,R.VES_BR
FROM GU12_A_TEST A,GU12_B_TEST B,V_GU12_STAN_NAZN S,
(SELECT
B.ID
,ROUND(SUM(BR.KOL_VAG)) AS KOL_BR
,ROUND(SUM(BR.VES)) AS VES_BR
,MAX(B.ID_A) AS ID_A
FROM
GU12_B B
,GU12_BR BR
WHERE
B.ID=BR.ID_B(+)
AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_SVER','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_SVER','MASTER','GU12')
--AND BR.DATE_R>=TO_DATE('01.01.2005','DD.MM.YYYY')
--AND BR.DATE_R<=TO_DATE('31.01.2005','DD.MM.YYYY')
GROUP BY B.ID) R
WHERE A.ID=B.ID_A
      AND B.ID=R.ID
	  AND B.STAN_ID=S.ID
	  AND (B.KOL_VAG<>R.KOL_BR OR B.VES<>R.VES_BR);


--
-- V_GU12_VLADPUT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_VLADPUT
(VLADPUT_ID, VLADPUT, VLADPUT_OKPO)
AS 
SELECT P.ID AS VLADPUT_ID,P.PREDPR_NAME||', '||P.CITY_P||', '||P.ADDRESS_P AS VLADPUT,P.OKPO AS VLADPUT_OKPO
FROM KLS_PREDPR P,PREDPR_ROLE R
WHERE P.ID=R.PREDPR_ID AND R.KLS_ROLE_ID=5
UNION
SELECT 1111 AS VLADPUT_ID,'ООО "СЕВЕРКОМПЛЕКТСТРОЙ", Г.УХТА, УЛ.ЗАВОДСКАЯ, 16'  AS VLADPUT,'12891286' AS VLADPUT_OKPO
FROM DUAL;


--
-- V_GU12_ZAYAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_ZAYAV
(ID, NOM_Z, FROM_DATE, TO_DATE, PROD_ID, 
 PROD, REG_DATE, SOGL_DATE, GROTP_ID, OTPRAV, 
 GROTP_OKPO, OTPR_ADR, PLATTAR_ID, PLATTAR, PLATTAR_KOD, 
 PLATTAR_OKPO, PLATTAR_ADR, EXPED_ID, EXPED, EXPED_OKPO, 
 EXPED_ADR, RODVAG_ID, RODVAG, STAT_NAGR, DOGOVOR, 
 STANOTPR_ID, STANOTPR, STANKODOTPR, PODACH_ID, PODACH, 
 VIDSOOB_ID, VIDSOOB, GR_GRUZ_ID, GR_GRUZ, GR_GRUZ_ABBR, 
 PRIZNOTPR_ID, PRIZNOTPR, VLADPUT_ID, VLADPUT, VLADPUT_OKPO, 
 ID_NOSOGL, SOGL)
AS 
SELECT
Z.ID,
Z.NOM_Z,
Z.FROM_DATE,
Z.TO_DATE,
Z.PROD_ID,
KP.NAME AS PROD,
Z.REG_DATE,
Z.SOGL_DATE,
Z.GROTP_ID,
O.PREDPR_NAME AS OTPRAV,
O.GROTP_OKPO,
O.OTPR_ADR,
Z.PLATTAR_ID,
PLT.PREDPR_NAME AS PLATTAR,
PLT.GD_KOD AS PLATTAR_KOD,
PLT.OKPO AS PLATTAR_OKPO,
PLT.PLATTAR_ADR,
Z.EXPED_ID,
E.PREDPR_NAME AS EXPED,
E.OKPO AS EXPED_OKPO,
E.EXPED_ADR,
Z.RODVAG_ID,
RV.NAME AS RODVAG,
KP.STAT_NAGR AS STAT_NAGR,
Z.DOGOVOR,
Z.STANOTPR_ID,
SO.STAN_NAME AS STANOTPR,
SO.STAN_KOD AS STANKODOTPR,
Z.PODACH_ID,
POD.NAME AS PODACH,
Z.VIDSOOB_ID AS VIDSOOB_ID,
SOOB.NAME AS VIDSOOB,
Z.GR_GRUZ_ID,
GRGR.NAME AS GR_GRUZ,
GRGR.ABBR AS GR_GRUZ_ABBR,
Z.PRIZNOTPR_ID,
PROT.NAME AS PRIZNOTPR,
Z.VLADPUT_ID,
VP.VLADPUT,
VP.VLADPUT_OKPO,
Z.ID_NOSOGL,
Z.SOGL
FROM
GU12_A Z,
V_GU12_OTPRAV O,
V_GU12_PLATTAR PLT,
V_GU12_EXPED E,
KLS_PROD_GU12 KP,
KLS_GD_VAGTYPE RV,
V_GU12_STAN_OTPR SO,
KLS_GD_PODACH POD,
KLS_GD_SOOB SOOB,
KLS_GD_GROUP GRGR,
KLS_GD_OTPR PROT,
V_GU12_VLADPUT VP
WHERE
Z.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND Z.GROTP_ID=O.GROTP_ID(+)
AND Z.PLATTAR_ID=PLT.PLATTAR_ID(+)
AND Z.EXPED_ID=E.ID(+)
AND Z.PROD_ID=KP.ID(+)
AND Z.RODVAG_ID=RV.ID(+)
AND Z.STANOTPR_ID=SO.STAN_ID(+)
AND Z.PODACH_ID=POD.ID(+)
AND Z.VIDSOOB_ID=SOOB.ID(+)
AND Z.GR_GRUZ_ID=GRGR.ID(+)
AND Z.PRIZNOTPR_ID=PROT.ID(+)
AND Z.VLADPUT_ID=VP.VLADPUT_ID(+)
ORDER BY ID;


--
-- V_LIST_DOVER_IN_NARIAD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LIST_DOVER_IN_NARIAD
(ID, DATE_DOVER, DATE_END, NUM_DOVER, FIO_DOVER, 
 DOLJ_DOVER, PREDPR_ID, SHORT_NAME, PREDPR_NAME)
AS 
SELECT DISTINCT KLS_DOVER.ID, KLS_DOVER.DATE_DOVER, KLS_DOVER.DATE_END,  
KLS_DOVER.NUM_DOVER, KLS_DOVER.FIO_DOVER, KLS_DOVER.DOLJ_DOVER, KLS_DOVER.PREDPR_ID, KLS_PREDPR.SHORT_NAME, KLS_PREDPR.PREDPR_NAME FROM KLS_NARIAD,KLS_PREDPR,KLS_DOVER     
WHERE KLS_DOVER.PREDPR_ID = KLS_PREDPR.ID AND    
      KLS_NARIAD.DOVER_ID = KLS_DOVER.ID    
ORDER BY KLS_DOVER.ID DESC;


--
-- V_LIST_PLATEL_IN_DOVER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LIST_PLATEL_IN_DOVER
(ID, SHORT_NAME)
AS 
SELECT DISTINCT KLS_PREDPR.ID, KLS_PREDPR.SHORT_NAME FROM KLS_PREDPR,KLS_DOVER  
WHERE KLS_PREDPR.ID = KLS_DOVER.PREDPR_ID  
ORDER BY KLS_PREDPR.SHORT_NAME;


--
-- V_LOAD_GU12_A  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LOAD_GU12_A
(NOM_Z, FROM_DATE, TO_DATE, SOGL_DATE, REG_DATE, 
 DOGOVOR, STANOTPR_ID, GROTP_ID, EXPED_ID, GR_GRUZ_ID, 
 VIDSOOB_ID, PODACH_ID, SOGL, PLATTAR_ID, PROD_ID, 
 PRIZNOTPR_ID, VLADPUT_ID, RODVAG_ID, FOX_KOD, ISCOR)
AS 
SELECT
  A.NOM_Z,
  A.BDATE as FROM_DATE,
  A.EDATE as TO_DATE,
  A.SDATE as SOGL_DATE,
  A.ZDATE as REG_DATE,
  A.DOGOVOR,
  STAN_OTP.ID as STANOTPR_ID,
  GROTP.GROTP_ID as GROTP_ID,
  EXPED.ID as EXPED_ID,
  TO_NUMBER(GRUZ) as GR_GRUZ_ID,
  TO_NUMBER(VID_SOOB) as VIDSOOB_ID,
  TO_NUMBER(PODACHA) as PODACH_ID,
  DECODE(A.SDATE,NULL,0,1) as SOGL,
  PLATTAR.PLATTAR_ID,
  TO_NUMBER(PROD) as PROD_ID,
  KLS_GD_OTPR.ID as priznotpr_id,
  TO_NUMBER(vlad_put) as VLADPUT_ID,
  TO_NUMBER(rod_vag) as RODVAG_ID,
  RELA as FOX_KOD,
  MAX(A.ISCOR) as ISCOR
FROM LOAD_BUFFER.GU12A_B A, KLS_STAN STAN_OTP, V_GU12_OTPRAV GROTP,
     V_GU12_EXPED exped, V_GU12_PLATTAR plattar,
	 KLS_GD_OTPR
WHERE A.STANOTPR=STAN_OTP.STAN_KOD(+)
  AND A.GROTPR=GROTP.GROTP_OKPO(+)
  AND A.EXPED=EXPED.FOX_KOD (+)
  AND A.GRPLAT=plattar.DOGOVOR (+)
  AND A.prizn_otpr=KLS_GD_OTPR.TAG (+)
GROUP BY
  A.NOM_Z,
  A.BDATE,
  A.EDATE,
  A.SDATE,
  A.ZDATE,
  A.DOGOVOR,
  STAN_OTP.ID,
  GROTP.GROTP_ID,
  EXPED.ID,
  TO_NUMBER(GRUZ),
  TO_NUMBER(VID_SOOB),
  TO_NUMBER(PODACHA),
  DECODE(A.SDATE,NULL,0,1),
  PLATTAR.PLATTAR_ID,
  TO_NUMBER(PROD),
  KLS_GD_OTPR.ID,
  TO_NUMBER(vlad_put),
  TO_NUMBER(rod_vag),
  RELA;


--
-- V_LOAD_GU12_B  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LOAD_GU12_B
(PDATE, SOBSTVAG_ID, STAN_ID, STAN_POG, STAN_PER_ID, 
 PREDPR, GRUZPOL_ID, KOL_VAG, VES, VIDOTPR_ID, 
 MRK, PLAT_ID, FOX_KOD, FOX_KOD_A, ISCOR, 
 DATE_LETTER, NOM_LETTER, PRINVAG_ID)
AS 
SELECT
  A.PDATE,
  TO_NUMBER(sobst_vag) as SOBSTVAG_ID,
  STAN.ID as STAN_ID,
  A.STAN_POG,
  STAN_PER.ID as STAN_PER_ID,
  A.predpr,
  gruz_pol.ID as gruzpol_id,
  kol_vag,
  ves,
  KLS_GD_VID_OTPR.ID as vidotpr_id,
  mrk,
  TO_NUMBER(prplat) as PLAT_ID,
  TIME_AP as FOX_KOD,
  RELA as FOX_KOD_A,
  ISCOR,
  DATE_LET as DATE_LETTER,
  NOM_LET as NOM_LETTER,
  KLS_GD_PRINVAG.ID as PRINVAG_ID
FROM LOAD_BUFFER.GU12A_B A, KLS_STAN STAN, KLS_STAN STAN_PER,
    (select KOD,MAX(ID_PREDPR) AS ID_PREDPR FROM load_buffer.PREDPR_GU12 GROUP BY KOD) b,
     V_GU12_GRUZ_POL gruz_pol,KLS_GD_VID_OTPR, KLS_GD_PRINVAG
WHERE A.STAN=STAN.STAN_KOD(+)
  AND A.STAN_POG=STAN_PER.STAN_KOD(+)
  AND A.predpr=B.KOD(+)
  and b.ID_PREDPR=gruz_pol.ID(+)
  AND A.vid_otpr=KLS_GD_VID_OTPR.TAG(+)
  AND A.PRIN_VAG=KLS_GD_PRINVAG.ABBR(+);


--
-- V_NPR_PRICES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NPR_PRICES
(ID, CAT_CEN_ID, PROD_ID_NPR, CENA, NDS20, 
 NGSM25, AKCIZ, CENA_OTP, BEGIN_DATE, END_DATE, 
 INPUT_DATE, OWNERSHIP_ID, SUPPLIER_ID, PROTOKOL_DATE, PROTOKOL_NUM, 
 IS_ORIGINAL, PROTOKOL_BEGIN_DATE, CENA_NPO, NDS20_NPO, CENA_OTP_NPO)
AS 
SELECT 
  ID, 
  CAT_CEN_ID, 
  PROD_ID_NPR, 
  CENA      , 
  NDS20     , 
  NGSM25    , 
  AKCIZ     , 
  CENA_OTP  , 
  BEGIN_DATE , 
  TRUNC(DECODE(END_DATE,NULL,TO_DATE('31.12.2200','dd.mm.yyyy'),END_DATE),'DD') AS NEW_END_DATE  , 
  INPUT_DATE , 
  OWNERSHIP_ID  , 
  SUPPLIER_ID   , 
  PROTOKOL_DATE , 
  PROTOKOL_NUM  , 
  IS_ORIGINAL   , 
  PROTOKOL_BEGIN_DATE, 
  CENA_NPO, 
  NDS20_NPO, 
  CENA_OTP_NPO 
FROM NPR_PRICES 
WHERE IS_ORIGINAL=1 
ORDER BY CAT_CEN_ID,PROD_ID_NPR,BEGIN_DATE,NEW_END_DATE;


--
-- V_NPR_PRICES_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NPR_PRICES_SNP
(ID, CAT_CEN_ID, PROD_ID_NPR, CENA, NDS20, 
 NGSM25, AKCIZ, CENA_OTP, BEGIN_DATE, END_DATE, 
 INPUT_DATE, OWNERSHIP_ID, SUPPLIER_ID, PROTOKOL_DATE, PROTOKOL_NUM, 
 IS_ORIGINAL, PROTOKOL_BEGIN_DATE, CENA_NPO, NDS20_NPO, CENA_OTP_NPO)
AS 
SELECT 
  ID, 
  CAT_CEN_ID, 
  PROD_ID_NPR, 
  0 AS CENA      , 
  0 AS NDS20     , 
  0 AS NGSM25    , 
  0 AS AKCIZ     , 
  0 AS CENA_OTP  , 
  BEGIN_DATE , 
  TRUNC(DECODE(END_DATE,NULL,TO_DATE('31.12.2200','dd.mm.yyyy'),END_DATE),'DD') AS NEW_END_DATE  , 
  INPUT_DATE , 
  OWNERSHIP_ID  , 
  SUPPLIER_ID   , 
  PROTOKOL_DATE , 
  PROTOKOL_NUM  , 
  IS_ORIGINAL   , 
  PROTOKOL_BEGIN_DATE,  
  CENA_NPO,
  NDS20_NPO,
  CENA_OTP_NPO  
FROM NPR_PRICES
WHERE CAT_CEN_ID>=900 AND IS_ORIGINAL=1
ORDER BY CAT_CEN_ID,PROD_ID_NPR,BEGIN_DATE,NEW_END_DATE;


--
-- V_PARUS_CONSORDS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_CONSORDS
(LOAD_ABBR, NRN, NPRN, SINPUT_NUMBER, DINPUT_DATE, 
 NFACEACC, SFACEACC, NAGENT, SAGENT, SAGENTNAME, 
 SDOG_NUMB, DDOG_DATE, SPAY_TYPE, NFILIAL, SFILIAL, 
 NNOMEN, SNOMEN, SNOMENNAME, NNOMMODIF, SNOMMODIF, 
 SMODIFNAME, VES, PRICE, OTGR_VES, DPLAN_DATE, 
 NBLOCKED, NORD_STATE, VES_TONN, PRICE_TONN, OTGR_TONN, 
 FILIAL_ID, USL_OPL_ID)
AS 
SELECT /*+ ALL_ROWS*/
   'САМ' AS LOAD_ABBR,
   p."NRN",p."NPRN",p."SINPUT_NUMBER",p."DINPUT_DATE",p."NFACEACC",p."SFACEACC",p."NAGENT",p."SAGENT",p."SAGENTNAME",p."SDOG_NUMB",p."DDOG_DATE",p."SPAY_TYPE",p."NFILIAL",p."SFILIAL",p."NNOMEN",p."SNOMEN",p."SNOMENNAME",p."NNOMMODIF",p."SNOMMODIF",p."SMODIFNAME",p."VES",p."PRICE",p."OTGR_VES",p."DPLAN_DATE",p."NBLOCKED",p."NORD_STATE",
   p.VES/1000 AS VES_TONN,
   p.PRICE*1000 AS PRICE_TONN,
   p.OTGR_VES/1000 as OTGR_TONN,
   ORG_STRUCTURE.ID AS FILIAL_ID,
   Get_Usl_Opl_From_Pay_Type(p.sPAY_TYPE) AS USL_OPL_ID
 FROM VANEEV.V_CONSORDS_TO_MASTER_PSV@ORACLE.WORLD p, ORG_STRUCTURE
 WHERE p.nFILIAL=ORG_STRUCTURE.PARUS_CRN_AUTO
   AND p.VES<>0
UNION ALL
SELECT
   'КНТ' AS LOAD_ABBR,
   p."NRN",p."NPRN",p."SINPUT_NUMBER",p."DINPUT_DATE",p."NFACEACC",p."SFACEACC",p."NAGENT",p."SAGENT",p."SAGENTNAME",p."SDOG_NUMB",p."DDOG_DATE",p."SPAY_TYPE",p."NFILIAL",p."SFILIAL",p."NNOMEN",p."SNOMEN",p."SNOMENNAME",p."NNOMMODIF",p."SNOMMODIF",p."SMODIFNAME",p."VES",p."PRICE",p."OTGR_VES",p."DPLAN_DATE",p."NBLOCKED",p."NORD_STATE",
   p.VES/1000 AS VES_TONN,
   p.PRICE*1000 AS PRICE_TONN,
   p.OTGR_VES/1000 as OTGR_TONN,
   ORG_STRUCTURE.ID AS FILIAL_ID,
   Get_Usl_Opl_From_Pay_Type(p.sPAY_TYPE) AS USL_OPL_ID
 FROM VANEEV.V_CONSORDS_TO_MASTER_PSV@ORACLE.WORLD p, ORG_STRUCTURE
 WHERE p.nFILIAL=ORG_STRUCTURE.PARUS_CRN_KNT
   AND p.VES<>0;


--
-- V_PARUS_GRAPHPOINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_GRAPHPOINT
(NCONTRACT, SCONTRACT, EXT_NUMBER, NCONTRACT_STATUS, NSTAGE, 
 SSTAGE, NSTAGE_STATUS, NRN, NFACEACC, SFACEACC, 
 NAGENT, SAGENT, SAGENTNAME, SDOG_NUMB, DDOG_DATE, 
 SPAY_TYPE, SGRAPHPOINT, NDEPARTMENT, SDEPARTMENT_CODE, SDEPARTMENT, 
 NSUPPLIER, SSUPPLIER_CODE, SSUPPLIER, NNOMEN, SNOMEN, 
 SNOMENNAME, NNOMMODIF, SNOMMODIF, SMODIFNAME, VES, 
 PRICE, OTGR_VES, BEGIN_DATE, END_DATE, LOAD_ABBR, 
 VES_TONN, PRICE_TONN, FILIAL_ID, SUPPLIER_ID, TIP_REAL_ID, 
 VID_REAL_ID, ORG_KIND_ID)
AS 
SELECT /*+ ALL_ROWS*/
	  p."NCONTRACT",p."SCONTRACT",p."EXT_NUMBER",p."NCONTRACT_STATUS",p."NSTAGE",p."SSTAGE",p."NSTAGE_STATUS",p."NRN",p."NFACEACC",p."SFACEACC",p."NAGENT",p."SAGENT",p."SAGENTNAME",p."SDOG_NUMB",p."DDOG_DATE",p."SPAY_TYPE",p."SGRAPHPOINT",p."NDEPARTMENT",p."SDEPARTMENT_CODE",p."SDEPARTMENT",p."NSUPPLIER",p."SSUPPLIER_CODE",p."SSUPPLIER",p."NNOMEN",p."SNOMEN",p."SNOMENNAME",p."NNOMMODIF",p."SNOMMODIF",p."SMODIFNAME",p."VES",p."PRICE",p."OTGR_VES",p."BEGIN_DATE",p."END_DATE",
	  'САМ' AS LOAD_ABBR,
	  p.VES/1000 AS VES_TONN,
	  p.PRICE*1000 AS PRICE_TONN,
	  ORG_STRUCTURE.ID AS FILIAL_ID,
	  DECODE(p.SSUPPLIER_CODE,'ВОЛГА',3353,'НИЖНЕВОЛЖСК',3352,'ПЕРМ',3354,8) as SUPPLIER_ID,
	  1 as TIP_REAL_ID,
	  1 as VID_REAL_ID,
	  1 as ORG_KIND_ID
	FROM VANEEV.V_FCACOPERPLANS_IN_PSV@ORACLE.WORLD p, ORG_STRUCTURE
	WHERE (p.SDEPARTMENT_CODE=ORG_STRUCTURE.PARUS_PLAN_AUTO_DEP OR p.SDEPARTMENT_CODE=ORG_STRUCTURE.PARUS_PLAN_AUTO_DEP_2)
	  AND p.VES<>0
	UNION ALL
    SELECT
	  p."NCONTRACT",p."SCONTRACT",p."EXT_NUMBER",p."NCONTRACT_STATUS",p."NSTAGE",p."SSTAGE",p."NSTAGE_STATUS",p."NRN",p."NFACEACC",p."SFACEACC",p."NAGENT",p."SAGENT",p."SAGENTNAME",p."SDOG_NUMB",p."DDOG_DATE",p."SPAY_TYPE",p."SGRAPHPOINT",p."NDEPARTMENT",p."SDEPARTMENT_CODE",p."SDEPARTMENT",p."NSUPPLIER",p."SSUPPLIER_CODE",p."SSUPPLIER",p."NNOMEN",p."SNOMEN",p."SNOMENNAME",p."NNOMMODIF",p."SNOMMODIF",p."SMODIFNAME",p."VES",p."PRICE",p."OTGR_VES",p."BEGIN_DATE",p."END_DATE",
	  'КНТ' AS LOAD_ABBR,
	  p.VES/1000 AS VES_TONN,
	  p.PRICE*1000 AS PRICE_TONN,
	  ORG_STRUCTURE.ID AS FILIAL_ID,
	  DECODE(p.SSUPPLIER_CODE,'ВОЛГА',3353,'НИЖНЕВОЛЖСК',3352,'ПЕРМ',3354,8) as SUPPLIER_ID,
	  1 as TIP_REAL_ID,
	  1 as VID_REAL_ID,
	  1 as ORG_KIND_ID
	FROM VANEEV.V_FCACOPERPLANS_IN_PSV@ORACLE.WORLD p, ORG_STRUCTURE
	WHERE p.SDEPARTMENT_CODE=ORG_STRUCTURE.PARUS_PLAN_MB_DEP
	  AND p.VES<>0
	UNION ALL
    SELECT
	  p."NCONTRACT",p."SCONTRACT",p."EXT_NUMBER",p."NCONTRACT_STATUS",p."NSTAGE",p."SSTAGE",p."NSTAGE_STATUS",p."NRN",p."NFACEACC",p."SFACEACC",p."NAGENT",p."SAGENT",p."SAGENTNAME",p."SDOG_NUMB",p."DDOG_DATE",p."SPAY_TYPE",p."SGRAPHPOINT",p."NDEPARTMENT",p."SDEPARTMENT_CODE",p."SDEPARTMENT",p."NSUPPLIER",p."SSUPPLIER_CODE",p."SSUPPLIER",p."NNOMEN",p."SNOMEN",p."SNOMENNAME",p."NNOMMODIF",p."SNOMMODIF",p."SMODIFNAME",p."VES",p."PRICE",p."OTGR_VES",p."BEGIN_DATE",p."END_DATE",
	  'САМ' AS LOAD_ABBR,
	  p.VES/1000 AS VES_TONN,
	  p.PRICE*1000 AS PRICE_TONN,
	  ORG_STRUCTURE.ID AS FILIAL_ID,
	  DECODE(p.SSUPPLIER_CODE,'ВОЛГА',3353,'НИЖНЕВОЛЖСК',3352,'ПЕРМ',3354,8) as SUPPLIER_ID,
	  1 as TIP_REAL_ID,
	  1 as VID_REAL_ID,
	  5 as ORG_KIND_ID
	FROM VANEEV.V_FCACOPERPLANS_IN_PSV@ORACLE.WORLD p, ORG_STRUCTURE
	WHERE (p.SDEPARTMENT_CODE=ORG_STRUCTURE.PARUS_PLAN_AZC_DEP OR p.SDEPARTMENT_CODE=ORG_STRUCTURE.PARUS_PLAN_AZC_DEP_2)
	  AND p.VES<>0;


--
-- V_PLAN_POST_REALIZ_COLUMNS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_REALIZ_COLUMNS
(VR_ID, VR_NAME, TR_ID, TR_NAME, OK_ID, 
 OK_NAME, OS_ID, OS_NAME)
AS 
SELECT /*+ ORDERED */ 
  vr.ID AS vr_id 
  , vr.NAME AS vr_name 
  , tr.ID AS tr_id 
  , tr.NAME AS tr_name 
  , ok.ID AS ok_id 
  , ok.NAME AS ok_name 
  , os.ID AS os_id 
  , os.NAME AS os_name 
FROM MASTER.ORG_STRUCTURE os 
  , MASTER.KLS_ORG_KIND ok 
  , MASTER.KLS_TIP_REAL_KONS tr 
  , MASTER.KLS_VID_REAL_KONS vr 
WHERE tr.ID IN (1, 2) 
  AND vr.ID IN (1, 5) 
  AND os.PLAN_REAL <> 0 
  AND ok.ID IN (1, 5);


--
-- V_PLAN_POST_REALIZ_COLUMNS_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_REALIZ_COLUMNS_OLD
(VID_REAL, TIP_REAL, ORG_STRU, ORG_KIND, DATE_PLAN, 
 VID_REAL_ID, TIP_REAL_ID, ORG_KIND_ID, ORG_STRU_ID)
AS 
SELECT DISTINCT 
       vid_real.NAME AS vid_real, tip_real.NAME AS tip_real,
       org_stru.NAME AS org_stru, org.NAME AS org_kind,
       pr.date_plan, 
       vid_real.ID AS vid_real_id, tip_real.ID AS tip_real_id,
       org.ID AS org_kind_id, org_stru.ID AS org_stru_id
  FROM PLAN_REALIZ pr,
       KLS_ORG_KIND org,
       KLS_VID_REAL_KONS vid_real,
       KLS_TIP_REAL_KONS tip_real,
       ORG_STRUCTURE org_stru
 WHERE pr.parus_rn IS NULL
   AND (pr.org_kind_id = org.ID(+))
   AND (pr.vid_real_id = vid_real.ID(+))
   AND (pr.tip_real_id = tip_real.ID)
   AND (pr.org_stru_id = org_stru.ID)
   AND (pr.org_stru_id = org_stru.ID);


--
-- V_PLAN_POST_REALIZ_ROWS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_REALIZ_ROWS
(DATE_PLAN, SUPPLIER_ID, PROD_ID_NPR, SHORT_NAME, NAME_NPR)
AS 
SELECT /*+ RULE*/ c.DATE_PLAN,c.SUPPLIER_ID, c.PROD_ID_NPR,pr.SHORT_NAME,prod.NAME_NPR
FROM (SELECT DISTINCT "SUPPLIER_ID","PROD_ID_NPR","DATE_PLAN" FROM (
SELECT supplier_id,prod_id_npr,date_plan FROM PLAN_POST_SVOD
UNION 
SELECT supplier_id,prod_id_npr,date_plan FROM PLAN_REALIZ)) c,KLS_PREDPR pr,KLS_PROD prod
WHERE c.SUPPLIER_ID=pr.ID
AND c.PROD_ID_NPR=prod.ID_NPR;


--
-- V_PLAN_REALIZ_PRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_REALIZ_PRP
(AZS_ID, AZS_NAME, UCH_ID, UCH_NAME, NB_ID, 
 NBASA, POST_ID, POST, ID_NPR, NAME_NPR, 
 GROUP_KIND_NAME, DATE_PLAN, VES, ORG_KIND_ID, TIP_REAL_ID)
AS 
SELECT /*+ ORDERED FIRST_ROWS */
       org.ID AS azs_id, org.NAME AS azs_name, org.uch_id,
       org.uchastok AS uch_name, org.nb_id, org.nbasa, POST.ID AS post_id,
       POST.short_name AS POST, prod.id_npr, prod.name_npr,
       'АЗС' AS group_kind_name, rl.date_plan, rl.ves, rl.org_kind_id,
       rl.tip_real_id
  FROM kls_prod prod,
       plan_realiz rl,
       kls_predpr POST,
       (SELECT azs.ID, azs.NAME, uch.uchastok, uch.uch_id, nb.nbasa, nb.nb_id
          FROM org_links ol,
               org_structure azs,
               (SELECT olu.org_stru_1_id, nbu.NAME AS uchastok,
                       nbu.ID AS uch_id
                  FROM org_links olu, org_structure nbu
                 WHERE olu.org_stru_2_id = nbu.ID AND nbu.org_kind_id = 4) uch,
               (SELECT olu.org_stru_1_id, nb.NAME AS nbasa, nb.ID AS nb_id
                  FROM org_links olu, org_links oln, org_structure nb
                 WHERE olu.org_stru_2_id = oln.org_stru_1_id
                   AND oln.org_stru_2_id = nb.ID
                   AND nb.org_kind_id = 1
                   AND oln.is_root <> 1
                UNION ALL
                SELECT olu.org_stru_1_id, nb.NAME AS nbasa, nb.ID AS nb_id
                  FROM org_links olu, org_structure nb, org_structure az
                 WHERE olu.org_stru_2_id = nb.ID
                   AND olu.org_stru_1_id = az.ID
                   AND az.org_kind_id IN (5, 12)
                   AND nb.org_kind_id = 1
                   AND olu.is_root <> 1) nb
         WHERE ol.org_stru_1_id = azs.ID
           AND azs.org_kind_id IN (5, 12)
           AND ol.org_stru_1_id = uch.org_stru_1_id(+)
           AND ol.org_stru_1_id = nb.org_stru_1_id(+)) org
 WHERE rl.sklad_id = org.ID
   AND rl.prod_id_npr = prod.id_npr
   AND rl.supplier_id = POST.ID
UNION ALL
SELECT /*+ ORDERED */
       skl.ID AS azs_id, skl.NAME AS azs_name, 0 AS uch_id, '' AS uch_name,
       fil.ID AS nb_id, fil.NAME AS nbasa, POST.ID AS post_id,
       POST.short_name AS POST, prod.id_npr, prod.name_npr,
       ok.group_kind_name, rl.date_plan, rl.ves, rl.org_kind_id,
       rl.tip_real_id
  FROM kls_prod prod,
       plan_realiz rl,
       org_structure skl,
       kls_org_kind ok,
       org_structure fil,
       kls_predpr POST
 WHERE rl.org_stru_id = fil.ID
   AND rl.sklad_id = skl.ID
   AND rl.prod_id_npr = prod.id_npr
   AND rl.supplier_id = POST.ID
   AND skl.org_kind_id = ok.ID
   AND ok.group_kind_id = 1;


--
-- V_PODACHA_PRINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PODACHA_PRINT
(POD_NUM, POD_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, 
 VETKA_NAME, POD_POS, PROD_NAME, NUM_CIST, KALIBR_ID, 
 VES_CIST, CAPACITY, VAGOWNER_NAME, VZLIV, PLOMBA1, 
 PLOMBA2, VES, KOL_NET, SVED_NUM)
AS 
SELECT
  a.POD_NUM,
  a.POD_DATE,
  a.GOTOV_DATE as GOTOV_TIME,
  a.NALIV_DATE as BEG_NALIV_TIME,
  a.END_NALIV_DATE as END_NALIV_TIME,
  KLS_VETKA_OTP.VETKA_NAME as VETKA_NAME,
  b.NUM_POS as POD_POS,
  KLS_PROD.ABBR_NPR as PROD_NAME,
  b.NUM_CIST,
  b.KALIBR_ID,
  DECODE(NVL(b.VES_CIST,0),0,NULL,b.VES_CIST) as VES_CIST,
  b.CAPACITY,
  DECODE(NVL(KLS_VAGOWNER.ID,0),0,'',KLS_VAGOWNER.SHORT_NAME) as VAGOWNER_NAME,
  DECODE(NVL(b.VZLIV,0),0,NULL,b.VZLIV) as VZLIV,
  b.PLOMBA1,
  b.PLOMBA2,
  b.VES,
  b.KOL_NET,
  b.SVED_NUM
FROM PODACHA_ROWS b, PODACHA a, KLS_PROD, KLS_VAGOWNER, KLS_VETKA_OTP
WHERE b.PODACHA_ID=a.ID
  AND b.PROD_ID_NPR=KLS_PROD.ID_NPR(+)
  AND b.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND a.VETKA_OTP_ID=KLS_VETKA_OTP.ID
  AND a.ID=NVL(FOR_TEMP.GET_AS_NUM('PODACHA_ID','MASTER','MO_MNOS.XLS'),0)
ORDER BY b.NUM_POS,b.NUM_CIST;


--
-- V_PROIZVOD_DEK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PROIZVOD_DEK
(PROD, MES, DEKADA, TRIADA, PLAN_PROIZV)
AS 
SELECT /* + RULE*/ d.PROD,
to_char(DATA,'mm') as mes,
CASE 
	  WHEN trunc((to_number(to_char(d.DATA,'dd'))-1)/10) = 0 then 1
	  WHEN trunc((to_number(to_char(d.DATA,'dd'))-1)/10) = 1 then 2
	  ELSE 3
end as DEKADA,
CASE 
	  WHEN to_number(to_char(d.DATA,'dd')) in (1,2,3) then 1
	  WHEN to_number(to_char(d.DATA,'dd')) in (4,5,6) then 2
	  WHEN to_number(to_char(d.DATA,'dd')) in (7,8,9,10) then 3
	  WHEN to_number(to_char(d.DATA,'dd')) in (11,12,13) then 1
	  WHEN to_number(to_char(d.DATA,'dd')) in (14,15,16) then 2
	  WHEN to_number(to_char(d.DATA,'dd')) in (17,18,19,20) then 3
	  WHEN to_number(to_char(d.DATA,'dd')) in (21,22,23) then 1
	  WHEN to_number(to_char(d.DATA,'dd')) in (24,25,26) then 2
	  ELSE 3
END as TRIADA,
sum(case EXTRACT(DAY FROM d.DATA) 
		          WHEN 1 THEN d.plan_nar 
				  ELSE (select d.plan_nar-B.plan_nar from Dayly_Fact b where b.prod=d.prod AND d.DATA=b.DATA+1)
       		  end
) as PLAN_PROIZV 
from dayly_fact d
WHERE to_char(d.DATA,'mm.yyyy')=to_char(FOR_TEMP.GET_AS_DATE('DBEG_PLAN','MASTER','GU12'),'mm.yyyy')
group by
	  d.PROD,
	  to_char(DATA,'mm'),
	  CASE 
	  	   WHEN trunc((to_number(to_char(d.DATA,'dd'))-1)/10) = 0 then 1
	  	   WHEN trunc((to_number(to_char(d.DATA,'dd'))-1)/10) = 1 then 2
	  	   ELSE 3
	  END,
	  CASE 
		 WHEN to_number(to_char(d.DATA,'dd')) in (1,2,3) then 1
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (4,5,6) then 2
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (7,8,9,10) then 3
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (11,12,13) then 1
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (14,15,16) then 2
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (17,18,19,20) then 3
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (21,22,23) then 1
	  	 WHEN to_number(to_char(d.DATA,'dd')) in (24,25,26) then 2
	  	 ELSE 3
	  END;


--
-- V_SLIV_NEFT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SLIV_NEFT
(PROD_ID_NPR, PROD_NAME, NUM_CIST, NUM_KVIT, SVED_NUM, 
 VAGOWNER_NAME, VES_KVIT, DATE_IN_STAN, DATE_VOZ, STAN_VOZ_NAME, 
 PRIM, SVED_POS, SVED_DATE)
AS 
SELECT
  Si.PROD_ID_NPR,
  P.NAME_NPR as PROD_NAME,
  Ri.NUM_CIST,
  DECODE(Ri.NUM_KVIT,99999,'?',LPAD(TO_CHAR(Ri.NUM_KVIT),6,'0')) as NUM_KVIT,
  TO_CHAR(Si.SVED_NUM) as SVED_NUM,
  V.DISPLAY_NAME as VAGOWNER_NAME,
  Ri.VES_KVIT,
  Ri.DATE_IN_STAN,
  Ri.DATE_VOZ,
  SV.STAN_KOD || ' ' || SV.STAN_NAME as STAN_VOZ_NAME,
  (CASE
    WHEN Ri.DATE_IN_STAN+2<NVL(Ri.DATE_VOZ,r.END_DATE) THEN 'Просрочка'
	ELSE ''
   END) as PRIM,
  Ri.SVED_POS,
  Si.SVED_DATE
FROM
  SVED_IN Si, REESTR_IN Ri, KLS_PROD P, KLS_VAGOWNER V, KLS_STAN SV,
  v_master_reports r
WHERE
  Si.ID=Ri.SVED_IN_ID AND
  Si.PROD_ID_NPR=P.ID_NPR AND
  Ri.VAGOWNER_ID=V.ID(+) AND
  Ri.STAN_VOZ_ID=SV.ID(+) AND
  NLS_UPPER(TRIM(r.report_file))='SLIV_NEFT.XLS' AND
/*  Ri.DATE_IN_STAN>=r.begin_date AND
  Ri.DATE_IN_STAN<=r.end_date AND */
  Si.PROD_ID_NPR=DECODE(r.PROD_ID_NPR,'*',Si.PROD_ID_NPR,r.PROD_ID_NPR);


--
-- V_STAN_PREDPR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_STAN_PREDPR
(STAN_ID, PREDPR_ID, PREDPR_GDKOD)
AS 
SELECT /*+ INDEX(STAN_PREDPR STAN_PRED_STAN_PRED_UK) */ STAN_ID, PREDPR_ID, MAX(PREDPR_GDKOD) AS PREDPR_GDKOD
FROM STAN_PREDPR
GROUP BY STAN_ID,PREDPR_ID;


--
-- V_VED_OSMOTR_PRINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VED_OSMOTR_PRINT
(VED_NUM, VED_DATE, FIO, SIGN, POD_POS, 
 POD_DATE, RAZMET_PER, PROD_NAME, NUM_CIST, KALIBR_ID, 
 VES_CIST, CAPACITY, VAGOWNER_NAME)
AS 
SELECT 
  a.VED_NUM, 
  a.VED_DATE, 
  TRIM(a.FIO1 || DECODE(a.FIO2,'','',' '||a.FIO2) || DECODE(a.FIO3,'','',' '||a.FIO3))||' ' as FIO, 
  a.SIGN1||' ' as SIGN, 
  b.POD_POS, 
  b.POD_DATE, 
  b.RAZMET_PER, 
  KLS_PROD.ABBR_NPR as PROD_NAME, 
  b.NUM_CIST, 
  b.KALIBR_ID, 
  DECODE(NVL(b.VES_CIST,0),0,NULL,b.VES_CIST) as VES_CIST, 
  b.CAPACITY, 
  DECODE(NVL(KLS_VAGOWNER.ID,0),0,'',KLS_VAGOWNER.SHORT_NAME) as VAGOWNER_NAME 
FROM VED_OSMOTR_ROW b, VED_OSMOTR a, KLS_PROD, KLS_VAGOWNER 
WHERE b.VED_ID=a.ID 
  AND b.PROD_ID_NPR=KLS_PROD.ID_NPR(+) 
  AND b.VAGOWNER_ID=KLS_VAGOWNER.ID(+) 
--  AND a.MESTO_ID=NVL(FOR_TEMP.GET_AS_NUM('MESTO_ID','MASTER','MO_VED_OSMOTR.XLS'),0) 
  AND a.LOAD_TYPE_ID=NVL(FOR_TEMP.GET_AS_NUM('LOAD_TYPE_ID','MASTER','MO_VED_OSMOTR.XLS'),0) 
  AND a.ID=NVL(FOR_TEMP.GET_AS_NUM('VED_OSMOTR_ID','MASTER','MO_VED_OSMOTR.XLS'),0) 
ORDER BY b.POD_POS,b.NUM_CIST;


--
-- V_VED_POD_PRINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VED_POD_PRINT
(POD_NUM, POD_DATE, TECH_TIME, GOTOV_TIME, BEG_NALIV_TIME, 
 END_NALIV_TIME, VETKA_NAME, POD_POS, PROD_NAME, NUM_CIST, 
 KALIBR_ID, VES_CIST, CAPACITY, VAGOWNER_NAME, VZLIV, 
 PLOMBA1, PLOMBA2, ROSINSPL1, ROSINSPL2)
AS 
SELECT
  a.POD_NUM,
  a.POD_DATE,
  a.TECH_TIME,
  a.GOTOV_TIME,
  a.BEG_NALIV_TIME,
  a.END_NALIV_TIME,
  KLS_VETKA_OTP.VETKA_NAME as VETKA_NAME,
  b.POD_POS,
  DECODE(b.PROD_ID_NPR,'',b.RAZMET_FACT,KLS_PROD.ABBR_NPR) as PROD_NAME,
  b.NUM_CIST,
  b.KALIBR_ID,
  DECODE(NVL(b.VES_CIST,0),0,NULL,b.VES_CIST) as VES_CIST,
  b.CAPACITY,
  DECODE(NVL(KLS_VAGOWNER.ID,0),0,'',KLS_VAGOWNER.SHORT_NAME) as VAGOWNER_NAME,
  DECODE(NVL(b.VZLIV,0),0,NULL,b.VZLIV) as VZLIV,
  b.PLOMBA1,
  b.PLOMBA2,
  b.ROSINSPL1,
  b.ROSINSPL2
FROM VED_POD_ROW b, VED_POD a, KLS_PROD, KLS_VAGOWNER, KLS_VETKA_OTP
WHERE b.VED_POD_ID=a.ID
  AND b.PROD_ID_NPR=KLS_PROD.ID_NPR(+)
  AND b.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND a.VETKA_OTP_ID=KLS_VETKA_OTP.ID
  AND a.MESTO_ID=NVL(FOR_TEMP.GET_AS_NUM('MESTO_ID','MASTER','MO_PODACHA.XLS'),0)
  AND a.LOAD_TYPE_ID=NVL(FOR_TEMP.GET_AS_NUM('LOAD_TYPE_ID','MASTER','MO_PODACHA.XLS'),0)
  AND a.ID=NVL(FOR_TEMP.GET_AS_NUM('VED_POD_ID','MASTER','MO_PODACHA.XLS'),0)
ORDER BY b.POD_POS,b.NUM_CIST;


--
-- V_ZAKAZ_SZNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_SZNP
(ZAKAZ_ID, ZAKAZ_HIST_ID, NAME, STAN_NAME, PROD_NAME, 
 POLUCH_NAME, VES)
AS 
select  
b.zakaz_id
,b.id as zakaz_hist_id
,'Заказ N '||a.client_number ||' от '||to_char(a.client_date,'dd.mm.yyyy')||' - '||to_char(b.load_ves)||' тн, '||KLS_STAN.STAN_NAME||', '||KLS_PROD.ABBR_NPR||', '||POLUCH.PREDPR_NAME as NAME
,KLS_STAN.STAN_NAME
,KLS_PROD.ABBR_NPR as PROD_NAME
,POLUCH.PREDPR_NAME as POLUCH_NAME
,b.load_ves as ves
from zakaz a, zakaz_hist b, kls_prod, kls_stan, kls_predpr poluch 
where a.id=b.zakaz_id 
and a.date_plan=trunc(sysdate,'month') 
and a.is_agent=2
and a.is_accept=1
and a.lukdog_id=3447
and B.STATUS_ZAKAZ_ID=20
and a.prod_id_npr=KLS_PROD.ID_NPR (+)
and a.stan_id=kls_stan.id(+)
and a.poluch_id=poluch.id(+)
order by b.zakaz_id,b.sortby,b.id;


--
-- V_ZAKAZ_UNP_FOR_SZNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_UNP_FOR_SZNP
(ZAKAZ_ID, ZAKAZ_HIST_ID, NAME, STAN_NAME, PROD_NAME, 
 POLUCH_NAME, VES)
AS 
select  
b.zakaz_id
,b.id as zakaz_hist_id
,'Заказ N '||a.client_number ||' от '||to_char(a.client_date,'dd.mm.yyyy')||' - '||to_char(b.load_ves)||' тн, '||KLS_STAN.STAN_NAME||', '||KLS_PROD.ABBR_NPR||', '||POLUCH.PREDPR_NAME as NAME
,KLS_STAN.STAN_NAME
,KLS_PROD.ABBR_NPR as PROD_NAME
,POLUCH.PREDPR_NAME as POLUCH_NAME
,B.LOAD_VES as ves
from zakaz a, zakaz_hist b, kls_prod, kls_stan, kls_predpr poluch 
where a.id=b.zakaz_id 
and a.date_plan=trunc(sysdate,'month') 
and a.is_agent=1 
and a.is_accept=1
and a.plat_id=10
and B.STATUS_ZAKAZ_ID=20
and a.prod_id_npr=KLS_PROD.ID_NPR (+)
and a.stan_id=kls_stan.id(+)
and a.poluch_id=poluch.id(+)
order by b.zakaz_id,b.sortby,b.id;


--
-- XX101_ZKERP_TO_KVIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.XX101_ZKERP_TO_KVIT
(FILENAME, PARSEDATETIME, PROPAGATESTATUS, FILEROWNUM, ACTIONCODE, 
 WAYBILLID, WAYBILLROWID, ID, PROD_ID_NPR, NUM_CIST, 
 DATE_OTGR, VES, KOL_NET, TARIF, NUM_KVIT, 
 DATE_KVIT, VAGONTYPE_ID, KALIBR_ID, VZLIV, MESTO_ID, 
 VETKA_OTP_ID, VAGOWNER_ID, NOM_ZD, AXES, VES_BRUTTO, 
 SVED_NUM, DATE_OFORML, PLOMBA1, PLOMBA2, TEMPER, 
 FAKT_PL, SHABEXP_ID, SVED_ID, KOL_ED, VES_ED, 
 VES_CIST, PASP_ID, PASP_NUM, NUM_DOVER, CAPACITY, 
 PODDONS, TTN_ID, FIO_DRIVER, DATE_DOVER, VOLUME, 
 FLG_DOP_CIST)
AS 
SELECT filename,
          parsedatetime,
          propagatestatus,
          filerownum,
          z.actioncode,
          --------------------------------------------------------------------------------
          -- Сергей Антонов 06.10.2008
          waybillid,
          waybillrowid,
          --------------------------------------------------------------------------------

          TO_NUMBER (waybillid || waybillrowid) AS id,
          prod.id_npr AS prod_id_npr,
          SUBSTR (transportnum, 1, 10) AS num_cist,
          ADD_MONTHS (shipmentdate, 0) AS date_otgr,
          DECODE (prod.id_npr, '90000', totalweight, pureweight) AS ves,
          pureweight AS kol_net,
          ora_val (tariff) AS tarif,
          ora_val (kvitnum) AS num_kvit,
          ADD_MONTHS (kvitdate, 0) AS date_kvit,
          NVL ( (SELECT vt.id
                 FROM kls_vagontype vt
                 WHERE z.transporttypecode LIKE vt.isu_kod2), 0
          )
             AS vagontype_id,
          NVL ( (SELECT k.id
                 FROM kls_kalibr k
                 WHERE REPLACE (z.transportunittype, 'A', 'А') LIKE k.kod_isu),
               '0'
          )
             AS kalibr_id,
          (CASE WHEN transportkind = '01' THEN ora_val (productvolume) ELSE fillingheight END) AS vzliv,
          (CASE WHEN transportkind = '01' THEN 2 ELSE 1 END) AS mesto_id,
          (CASE WHEN transportkind = '01' THEN 7 ELSE 14 END) AS vetka_otp_id,
          (CASE
              WHEN ownershiptype = 1
              THEN
                 3
              ELSE
                 NVL ( (SELECT id
                        FROM kls_vagowner
                        WHERE isu_postav_name =
                                 DECODE (z.owner,
                                    'МАГИСТРАЛЬ НЕФТЕОРГСИНЕЗ', 'МНОС',
                                    'МАГИСТРАЛЬ НЕФТЕОРГСИНТЕЗ', 'МНОС',
                                    'ЗАО "ЛУКОЙЛ-ТРАНС"', 'ЛУКОЙЛ-ТРАНС',
                                    'ООО "ЛУКОЙЛ-ТРАНС"', 'ЛУКОЙЛ-ТРАНС',
                                    z.owner)),
                      99
                 )
           END)
             AS vagowner_id,
          z.ordercode AS nom_zd,
          z.axescount AS axes,
          DECODE (prod.id_npr, '90000', totalweight, pureweight) AS ves_brutto,
          DECODE (reestrnum, '1300000118', NULL, reestrnum) AS sved_num,
          (CASE
              WHEN shipmentdate IS NULL
              THEN
                 TO_DATE (NULL)
              ELSE
                 TO_DATE (TO_CHAR (ADD_MONTHS (shipmentdate, 0), 'dd.mm.yyyy')
                          || ' '
                          || SUBSTR (z.shipmenttime, 1, 2)
                          || ':'
                          || SUBSTR (z.shipmenttime, 3, 2)
                          || ':'
                          || SUBSTR (z.shipmenttime, 5, 2),
                          'dd.mm.yyyy hh24:mi:ss'
                 )
           END)
             AS date_oforml,
          seal1 AS plomba1,
          seal2 AS plomba2,
          tempoffilling AS temper,
          densityfact AS fakt_pl,
          TO_NUMBER (ttnsamplecode) AS shabexp_id,
          (CASE
              WHEN reestrnum || ' ' = ' ' OR reestrnum = '1300000118' THEN ''
              ELSE 'R' || SUBSTR (reestrnum, -8, 8)
           END)
             AS sved_id,
          packingitemcount AS kol_ed,
          z.packingitemweight AS ves_ed,
          ora_val (z.tarevagonweight) AS ves_cist,
          (CASE
              WHEN z.passportnum || ' ' = ' '
              THEN
                 ''
              WHEN TO_NUMBER (z.passportnum) > 3000000000
              THEN
                 'R' || TO_CHAR (TO_NUMBER (z.passportnum) - 3000000000)
              ELSE
                 'R' || z.passportnum
           END)
             AS pasp_id,
          z.passportnum AS pasp_num,
          warrantnum AS num_dover,
          ora_val (vagontonnage) AS capacity,
          pancount AS poddons,
          TO_NUMBER (waybillid) AS ttn_id,
          driverfio AS fio_driver,
          warrantdate AS date_dover,
          ora_val (productvolume) AS volume,
          1 AS flg_dop_cist
   FROM --------------------------------------------------------------------------------
                                                  -- Сергей Антонов 06.10.2008
                                                        -- xx101_zkerp_data z,
  xx101_zkerp_pending_action z, --------------------------------------------------------------------------------
                                (SELECT *
                                 FROM kls_prod
                                 WHERE id_npr <= '90000') prod
   WHERE z.productcode = prod.ksss_prod_id(+);


--
-- TRG_AIUDR_NPR_PRICES  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_NPR_PRICES
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.NPR_PRICES
FOR EACH ROW
DECLARE
  v_old NPR_PRICES%ROWTYPE;
  v_new NPR_PRICES%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.CAT_CEN_ID := :OLD.CAT_CEN_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.CENA := :OLD.CENA;
    v_old.NDS20 := :OLD.NDS20;
    v_old.NGSM25 := :OLD.NGSM25;
    v_old.AKCIZ := :OLD.AKCIZ;
    v_old.CENA_OTP := :OLD.CENA_OTP;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.INPUT_DATE := :OLD.INPUT_DATE;
    v_old.OWNERSHIP_ID := :OLD.OWNERSHIP_ID;
    v_old.SUPPLIER_ID := :OLD.SUPPLIER_ID;
    v_old.PROTOKOL_DATE := :OLD.PROTOKOL_DATE;
    v_old.PROTOKOL_NUM := :OLD.PROTOKOL_NUM;
    v_old.IS_ORIGINAL := :OLD.IS_ORIGINAL;
    v_old.PROTOKOL_BEGIN_DATE := :OLD.PROTOKOL_BEGIN_DATE;
    v_old.NDS20_NPO := :OLD.NDS20_NPO;
    v_old.CENA_NPO := :OLD.CENA_NPO;
    v_old.CENA_OTP_NPO := :OLD.CENA_OTP_NPO;
    v_old.NO_AKCIZ := :OLD.NO_AKCIZ;
    v_old.CENA_BN := :OLD.CENA_BN;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'NPR_PRICES',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.CAT_CEN_ID := :NEW.CAT_CEN_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.CENA := :NEW.CENA;
    v_new.NDS20 := :NEW.NDS20;
    v_new.NGSM25 := :NEW.NGSM25;
    v_new.AKCIZ := :NEW.AKCIZ;
    v_new.CENA_OTP := :NEW.CENA_OTP;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.INPUT_DATE := :NEW.INPUT_DATE;
    v_new.OWNERSHIP_ID := :NEW.OWNERSHIP_ID;
    v_new.SUPPLIER_ID := :NEW.SUPPLIER_ID;
    v_new.PROTOKOL_DATE := :NEW.PROTOKOL_DATE;
    v_new.PROTOKOL_NUM := :NEW.PROTOKOL_NUM;
    v_new.IS_ORIGINAL := :NEW.IS_ORIGINAL;
    v_new.PROTOKOL_BEGIN_DATE := :NEW.PROTOKOL_BEGIN_DATE;
    v_new.NDS20_NPO := :NEW.NDS20_NPO;
    v_new.CENA_NPO := :NEW.CENA_NPO;
    v_new.CENA_OTP_NPO := :NEW.CENA_OTP_NPO;
    v_new.NO_AKCIZ := :NEW.NO_AKCIZ;
    v_new.CENA_BN := :NEW.CENA_BN;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'NPR_PRICES',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'NPR_PRICES',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'NPR_PRICES',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CAT_CEN_ID<>V_NEW.CAT_CEN_ID THEN
            WriteStr:=':OLD.CAT_CEN_ID=' || TO_CHAR(V_OLD.CAT_CEN_ID) || ' :NEW.CAT_CEN_ID=' || TO_CHAR(V_NEW.CAT_CEN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROD_ID_NPR<>V_NEW.PROD_ID_NPR THEN
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA<>V_NEW.CENA THEN
            WriteStr:=':OLD.CENA=' || TO_CHAR(V_OLD.CENA) || ' :NEW.CENA=' || TO_CHAR(V_NEW.CENA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NDS20<>V_NEW.NDS20 THEN
            WriteStr:=':OLD.NDS20=' || TO_CHAR(V_OLD.NDS20) || ' :NEW.NDS20=' || TO_CHAR(V_NEW.NDS20) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NGSM25<>V_NEW.NGSM25 THEN
            WriteStr:=':OLD.NGSM25=' || TO_CHAR(V_OLD.NGSM25) || ' :NEW.NGSM25=' || TO_CHAR(V_NEW.NGSM25) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.AKCIZ<>V_NEW.AKCIZ THEN
            WriteStr:=':OLD.AKCIZ=' || TO_CHAR(V_OLD.AKCIZ) || ' :NEW.AKCIZ=' || TO_CHAR(V_NEW.AKCIZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA_OTP<>V_NEW.CENA_OTP THEN
            WriteStr:=':OLD.CENA_OTP=' || TO_CHAR(V_OLD.CENA_OTP) || ' :NEW.CENA_OTP=' || TO_CHAR(V_NEW.CENA_OTP) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BEGIN_DATE<>V_NEW.BEGIN_DATE THEN
            WriteStr:=':OLD.BEGIN_DATE=' || TO_CHAR(V_OLD.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.BEGIN_DATE=' || TO_CHAR(V_NEW.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.END_DATE<>V_NEW.END_DATE THEN
            WriteStr:=':OLD.END_DATE=' || TO_CHAR(V_OLD.END_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.END_DATE=' || TO_CHAR(V_NEW.END_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.INPUT_DATE<>V_NEW.INPUT_DATE THEN
            WriteStr:=':OLD.INPUT_DATE=' || TO_CHAR(V_OLD.INPUT_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.INPUT_DATE=' || TO_CHAR(V_NEW.INPUT_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.OWNERSHIP_ID<>V_NEW.OWNERSHIP_ID THEN
            WriteStr:=':OLD.OWNERSHIP_ID=' || TO_CHAR(V_OLD.OWNERSHIP_ID) || ' :NEW.OWNERSHIP_ID=' || TO_CHAR(V_NEW.OWNERSHIP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUPPLIER_ID<>V_NEW.SUPPLIER_ID THEN
            WriteStr:=':OLD.SUPPLIER_ID=' || TO_CHAR(V_OLD.SUPPLIER_ID) || ' :NEW.SUPPLIER_ID=' || TO_CHAR(V_NEW.SUPPLIER_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROTOKOL_DATE<>V_NEW.PROTOKOL_DATE THEN
            WriteStr:=':OLD.PROTOKOL_DATE=' || TO_CHAR(V_OLD.PROTOKOL_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.PROTOKOL_DATE=' || TO_CHAR(V_NEW.PROTOKOL_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROTOKOL_NUM<>V_NEW.PROTOKOL_NUM THEN
            WriteStr:=':OLD.PROTOKOL_NUM=' || (V_OLD.PROTOKOL_NUM) || ' :NEW.PROTOKOL_NUM=' || (V_NEW.PROTOKOL_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_ORIGINAL<>V_NEW.IS_ORIGINAL THEN
            WriteStr:=':OLD.IS_ORIGINAL=' || TO_CHAR(V_OLD.IS_ORIGINAL) || ' :NEW.IS_ORIGINAL=' || TO_CHAR(V_NEW.IS_ORIGINAL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROTOKOL_BEGIN_DATE<>V_NEW.PROTOKOL_BEGIN_DATE THEN
            WriteStr:=':OLD.PROTOKOL_BEGIN_DATE=' || TO_CHAR(V_OLD.PROTOKOL_BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.PROTOKOL_BEGIN_DATE=' || TO_CHAR(V_NEW.PROTOKOL_BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NDS20_NPO<>V_NEW.NDS20_NPO THEN
            WriteStr:=':OLD.NDS20_NPO=' || TO_CHAR(V_OLD.NDS20_NPO) || ' :NEW.NDS20_NPO=' || TO_CHAR(V_NEW.NDS20_NPO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA_NPO<>V_NEW.CENA_NPO THEN
            WriteStr:=':OLD.CENA_NPO=' || TO_CHAR(V_OLD.CENA_NPO) || ' :NEW.CENA_NPO=' || TO_CHAR(V_NEW.CENA_NPO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA_OTP_NPO<>V_NEW.CENA_OTP_NPO THEN
            WriteStr:=':OLD.CENA_OTP_NPO=' || TO_CHAR(V_OLD.CENA_OTP_NPO) || ' :NEW.CENA_OTP_NPO=' || TO_CHAR(V_NEW.CENA_OTP_NPO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NO_AKCIZ<>V_NEW.NO_AKCIZ THEN
            WriteStr:=':OLD.NO_AKCIZ=' || TO_CHAR(V_OLD.NO_AKCIZ) || ' :NEW.NO_AKCIZ=' || TO_CHAR(V_NEW.NO_AKCIZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA_BN<>V_NEW.CENA_BN THEN
            WriteStr:=':OLD.CENA_BN=' || TO_CHAR(V_OLD.CENA_BN) || ' :NEW.CENA_BN=' || TO_CHAR(V_NEW.CENA_BN) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'NPR_PRICES',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PLAN_POST_SVOD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PLAN_POST_SVOD
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_POST_SVOD
FOR EACH ROW
DECLARE
  v_old PLAN_POST_SVOD%ROWTYPE;
  v_new PLAN_POST_SVOD%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.VES := :OLD.VES;
    v_old.HRAN := :OLD.HRAN;
    v_old.SUPPLIER_ID := :OLD.SUPPLIER_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.VES := :NEW.VES;
    v_new.HRAN := :NEW.HRAN;
    v_new.SUPPLIER_ID := :NEW.SUPPLIER_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_VED_POD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_VED_POD
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.VED_POD
FOR EACH ROW
BEGIN
  -- Обновляем путь отгрузки в "связанной" позиции сведения
  IF UPDATING('VETKA_OTP_ID') THEN
    FOR lcur IN (SELECT ID FROM VED_POD_ROW WHERE VED_POD_ID=:NEW.ID)
	LOOP
      UPDATE REESTR SET VETKA_OTP_ID=:NEW.VETKA_OTP_ID WHERE VED_POD_ROW_ID=lcur.ID;
	END LOOP;
  END IF;
END;
/


--
-- TRG_BIR_DAYLY_FACT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_DAYLY_FACT
BEFORE INSERT
ON MASTER.DAYLY_FACT
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
   if :NEW.kod is NULL or :NEW.kod=0 then
   Select seq_dayly_fact.NextVal into tmpVar from dual;
   :NEW.kod := tmpVar;
end if;
END trg_bir_dayly_fact;
/


--
-- TRG_BIR_ORG_STRUCTURE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_ORG_STRUCTURE
BEFORE INSERT
ON MASTER.ORG_STRUCTURE
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_org_structure.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_org_structure;
/


--
-- TRG_BIUDR_KLS_PREDPR_CONTACTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PREDPR_CONTACTS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PREDPR_CONTACTS
FOR EACH ROW
DECLARE
  v_old KLS_PREDPR_CONTACTS%ROWTYPE;
  v_new KLS_PREDPR_CONTACTS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.IS_BOSS := :OLD.IS_BOSS;
    v_old.LASTNAME := :OLD.LASTNAME;
    v_old.SHORTNAME := :OLD.SHORTNAME;
    v_old.FIRSTNAME := :OLD.FIRSTNAME;
    v_old.MIDDLENAME := :OLD.MIDDLENAME;
    v_old.LASTNAME1 := :OLD.LASTNAME1;
    v_old.FIRSTNAME1 := :OLD.FIRSTNAME1;
    v_old.MIDDLENAME1 := :OLD.MIDDLENAME1;
    v_old.LASTNAME2 := :OLD.LASTNAME2;
    v_old.FIRSTNAME2 := :OLD.FIRSTNAME2;
    v_old.MIDDLENAME2 := :OLD.MIDDLENAME2;
    v_old.PHONE := :OLD.PHONE;
    v_old.STAFF := :OLD.STAFF;
    v_old.STAFF1 := :OLD.STAFF1;
    v_old.STAFF2 := :OLD.STAFF2;
    v_old.SEX := :OLD.SEX;
    v_old.NA_OSNOV := :OLD.NA_OSNOV;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.IS_BOSS := :NEW.IS_BOSS;
    v_new.LASTNAME := :NEW.LASTNAME;
    v_new.SHORTNAME := :NEW.SHORTNAME;
    v_new.FIRSTNAME := :NEW.FIRSTNAME;
    v_new.MIDDLENAME := :NEW.MIDDLENAME;
    v_new.LASTNAME1 := :NEW.LASTNAME1;
    v_new.FIRSTNAME1 := :NEW.FIRSTNAME1;
    v_new.MIDDLENAME1 := :NEW.MIDDLENAME1;
    v_new.LASTNAME2 := :NEW.LASTNAME2;
    v_new.FIRSTNAME2 := :NEW.FIRSTNAME2;
    v_new.MIDDLENAME2 := :NEW.MIDDLENAME2;
    v_new.PHONE := :NEW.PHONE;
    v_new.STAFF := :NEW.STAFF;
    v_new.STAFF1 := :NEW.STAFF1;
    v_new.STAFF2 := :NEW.STAFF2;
    v_new.SEX := :NEW.SEX;
    v_new.NA_OSNOV := :NEW.NA_OSNOV;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PREDPR_CONTACTS.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PREDPR_ID := v_new.PREDPR_ID;
    :NEW.IS_BOSS := v_new.IS_BOSS;
    :NEW.LASTNAME := v_new.LASTNAME;
    :NEW.SHORTNAME := v_new.SHORTNAME;
    :NEW.FIRSTNAME := v_new.FIRSTNAME;
    :NEW.MIDDLENAME := v_new.MIDDLENAME;
    :NEW.LASTNAME1 := v_new.LASTNAME1;
    :NEW.FIRSTNAME1 := v_new.FIRSTNAME1;
    :NEW.MIDDLENAME1 := v_new.MIDDLENAME1;
    :NEW.LASTNAME2 := v_new.LASTNAME2;
    :NEW.FIRSTNAME2 := v_new.FIRSTNAME2;
    :NEW.MIDDLENAME2 := v_new.MIDDLENAME2;
    :NEW.PHONE := v_new.PHONE;
    :NEW.STAFF := v_new.STAFF;
    :NEW.STAFF1 := v_new.STAFF1;
    :NEW.STAFF2 := v_new.STAFF2;
    :NEW.SEX := v_new.SEX;
    :NEW.NA_OSNOV := v_new.NA_OSNOV;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PREDPR_RS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PREDPR_RS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PREDPR_RS
FOR EACH ROW
DECLARE
  v_old KLS_PREDPR_RS%ROWTYPE;
  v_new KLS_PREDPR_RS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.BANKS_ID := :OLD.BANKS_ID;
    v_old.RS := :OLD.RS;
    v_old.IS_MAIN := :OLD.IS_MAIN;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.BANKS_ID := :NEW.BANKS_ID;
    v_new.RS := :NEW.RS;
    v_new.IS_MAIN := :NEW.IS_MAIN;

    IF INSERTING() THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_KLS_PREDPR_RS.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PREDPR_ID := v_new.PREDPR_ID;
    :NEW.BANKS_ID := v_new.BANKS_ID;
    :NEW.RS := v_new.RS;
    :NEW.IS_MAIN := v_new.IS_MAIN;
  END IF;
END;
/


--
-- TRG_BIUDR_KTU_2_NPO_SF  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KTU_2_NPO_SF
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KTU_2_NPO_SF
FOR EACH ROW
BEGIN
  IF INSERTING OR (UPDATING('NPO_SF')) THEN
    BEGIN
	  UPDATE BILLS SET NPO_SF=:NEW.NPO_SF WHERE BILLS.NOM_DOK=:NEW.NOM_DOK
	    AND BILLS.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy');
	EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;
    BEGIN
	  UPDATE BILLS_SNP SET NPO_SF=:NEW.NPO_SF WHERE BILLS_SNP.NOM_DOK=:NEW.NOM_DOK
	    AND BILLS_SNP.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy');
	EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;
  ELSE 
    IF DELETING THEN
      BEGIN
	    UPDATE BILLS SET NPO_SF=NULL WHERE BILLS.NOM_DOK=:OLD.NOM_DOK
  	      AND BILLS.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy');
      EXCEPTION
	    WHEN OTHERS THEN
	      NULL;
      END;
      BEGIN
	    UPDATE BILLS_SNP SET NPO_SF=NULL WHERE BILLS_SNP.NOM_DOK=:OLD.NOM_DOK
  	     AND BILLS_SNP.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy');
      EXCEPTION
	    WHEN OTHERS THEN
	      NULL;
      END;
	END IF;   
  END IF;
END TRG_BIUDR_KTU_2_NPO_SF;
/


--
-- TRG_BIUDR_NAKL  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_NAKL
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.NAKL
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID||' '=' ' OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;
END;
/


--
-- TRG_BIUDR_NPR_PRICES  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_NPR_PRICES
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.NPR_PRICES
FOR EACH ROW
DECLARE
  v_old NPR_PRICES%ROWTYPE;
  v_new NPR_PRICES%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.CAT_CEN_ID := :OLD.CAT_CEN_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.CENA := :OLD.CENA;
    v_old.NDS20 := :OLD.NDS20;
    v_old.NGSM25 := :OLD.NGSM25;
    v_old.AKCIZ := :OLD.AKCIZ;
    v_old.CENA_OTP := :OLD.CENA_OTP;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
    v_old.INPUT_DATE := :OLD.INPUT_DATE;
    v_old.OWNERSHIP_ID := :OLD.OWNERSHIP_ID;
    v_old.SUPPLIER_ID := :OLD.SUPPLIER_ID;
    v_old.PROTOKOL_DATE := :OLD.PROTOKOL_DATE;
    v_old.PROTOKOL_NUM := :OLD.PROTOKOL_NUM;
    v_old.IS_ORIGINAL := :OLD.IS_ORIGINAL;
    v_old.PROTOKOL_BEGIN_DATE := :OLD.PROTOKOL_BEGIN_DATE;
    v_old.NDS20_NPO := :OLD.NDS20_NPO;
    v_old.CENA_NPO := :OLD.CENA_NPO;
    v_old.CENA_OTP_NPO := :OLD.CENA_OTP_NPO;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.CAT_CEN_ID := :NEW.CAT_CEN_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.CENA := :NEW.CENA;
    v_new.NDS20 := :NEW.NDS20;
    v_new.NGSM25 := :NEW.NGSM25;
    v_new.AKCIZ := :NEW.AKCIZ;
    v_new.CENA_OTP := :NEW.CENA_OTP;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;
    v_new.INPUT_DATE := :NEW.INPUT_DATE;
    v_new.OWNERSHIP_ID := :NEW.OWNERSHIP_ID;
    v_new.SUPPLIER_ID := :NEW.SUPPLIER_ID;
    v_new.PROTOKOL_DATE := :NEW.PROTOKOL_DATE;
    v_new.PROTOKOL_NUM := :NEW.PROTOKOL_NUM;
    v_new.IS_ORIGINAL := :NEW.IS_ORIGINAL;
    v_new.PROTOKOL_BEGIN_DATE := :NEW.PROTOKOL_BEGIN_DATE;
    v_new.NDS20_NPO := :NEW.NDS20_NPO;
    v_new.CENA_NPO := :NEW.CENA_NPO;
    v_new.CENA_OTP_NPO := :NEW.CENA_OTP_NPO;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_NPR_PRICES.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.CAT_CEN_ID := v_new.CAT_CEN_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.CENA := v_new.CENA;
    :NEW.NDS20 := v_new.NDS20;
    :NEW.NGSM25 := v_new.NGSM25;
    :NEW.AKCIZ := v_new.AKCIZ;
    :NEW.CENA_OTP := v_new.CENA_OTP;
    :NEW.BEGIN_DATE := v_new.BEGIN_DATE;
    :NEW.END_DATE := v_new.END_DATE;
    :NEW.INPUT_DATE := v_new.INPUT_DATE;
    :NEW.OWNERSHIP_ID := v_new.OWNERSHIP_ID;
    :NEW.SUPPLIER_ID := v_new.SUPPLIER_ID;
    :NEW.PROTOKOL_DATE := v_new.PROTOKOL_DATE;
    :NEW.PROTOKOL_NUM := v_new.PROTOKOL_NUM;
    :NEW.IS_ORIGINAL := v_new.IS_ORIGINAL;
    :NEW.PROTOKOL_BEGIN_DATE := v_new.PROTOKOL_BEGIN_DATE;
    :NEW.NDS20_NPO := v_new.NDS20_NPO;
    :NEW.CENA_NPO := v_new.CENA_NPO;
    :NEW.CENA_OTP_NPO := v_new.CENA_OTP_NPO;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_POST_SVOD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_POST_SVOD
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_POST_SVOD
FOR EACH ROW
DECLARE
  v_old PLAN_POST_SVOD%ROWTYPE;
  v_new PLAN_POST_SVOD%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.VES := :OLD.VES;
    v_old.HRAN := :OLD.HRAN;
    v_old.SUPPLIER_ID := :OLD.SUPPLIER_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_PLAN := TRUNC(:NEW.DATE_PLAN);
    v_new.VES := :NEW.VES;
    v_new.HRAN := :NEW.HRAN;
    v_new.SUPPLIER_ID := :NEW.SUPPLIER_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_PLAN_POST_SVOD.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
      -- Проверка на изменение PRIMARY KEY
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, For_Scripts.SG$PK_CHANGE_TXT);
      END IF;

    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.VES := v_new.VES;
    :NEW.HRAN := v_new.HRAN;
    :NEW.SUPPLIER_ID := v_new.SUPPLIER_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
  END IF;
END;
/


--
-- TRG_BIUDR_PODACHA  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PODACHA
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PODACHA
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN


  IF INSERTING() OR UPDATING() THEN

      IF :new.ID=0 OR :new.ID IS NULL THEN
        SELECT SEQ_PODACHA.nextval INTO :new.ID FROM DUAL;
      END IF;
  END IF;


END;
/


--
-- TRG_BIUDR_PODACHA_ROWS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PODACHA_ROWS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PODACHA_ROWS
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

    IF INSERTING() OR UPDATING() THEN
      IF :new.ID=0 OR :new.ID IS NULL THEN
        SELECT SEQ_PODACHA_ROWS.nextval INTO :new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

END;
/


--
-- TRG_BIUDR_STAN_PREDPR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_STAN_PREDPR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.STAN_PREDPR
FOR EACH ROW
DECLARE
  v_old STAN_PREDPR%ROWTYPE;
  v_new STAN_PREDPR%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.VETKA_ID := :OLD.VETKA_ID;
    v_old.PREDPR_GDKOD := :OLD.PREDPR_GDKOD;
    v_old.IS_MAIN := :OLD.IS_MAIN;
    v_old.ID := :OLD.ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.VETKA_ID := :NEW.VETKA_ID;
    v_new.PREDPR_GDKOD := :NEW.PREDPR_GDKOD;
    v_new.IS_MAIN := :NEW.IS_MAIN;
    v_new.ID := :NEW.ID;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_STAN_PREDPR.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.PREDPR_ID := v_new.PREDPR_ID;
    :NEW.STAN_ID := v_new.STAN_ID;
    :NEW.VETKA_ID := v_new.VETKA_ID;
    :NEW.PREDPR_GDKOD := v_new.PREDPR_GDKOD;
    :NEW.IS_MAIN := v_new.IS_MAIN;
    :NEW.ID := v_new.ID;
  END IF;
END;
/


--
-- TRG_BIUDR_VED_POD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_POD
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_POD
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN


  IF INSERTING() OR UPDATING() THEN
      IF :new.ID=0 OR :new.ID IS NULL THEN
        SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
      END IF;
  END IF;


END;
/


--
-- TRG_CHECKARH_BILLS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_BILLS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.BILLS
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
  v_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Контроль
  IF DELETING() AND :OLD.DATE_KVIT<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND :OLD.DATE_KVIT<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND :NEW.DATE_KVIT<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_NAKL  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_NAKL
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.NAKL
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.NAKL_DATE;
    /*BEGIN
      SELECT MONTH_REESTR.DATE_REE INTO doc_dat
	    FROM MONTH_REESTR WHERE MONTH_REESTR.ID=:OLD.MONTH_REESTR_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.NAKL_DATE;
    /*BEGIN
      SELECT MONTH_REESTR.DATE_REE INTO doc_dat
	    FROM MONTH_REESTR WHERE MONTH_REESTR.ID=:NEW.MONTH_REESTR_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_NPR_PRICES  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_NPR_PRICES
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.NPR_PRICES
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='NPR_PRICES';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.BEGIN_DATE;
    /*BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:OLD.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  ELSE
    doc_dat:=:NEW.BEGIN_DATE;
    /*BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:NEW.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_REESTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_REESTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REESTR
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.SVED_DATE;
    BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:OLD.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
    --doc_dat:=:NEW.SVED_DATE;
    BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:NEW.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_VED_POD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_VED_POD
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_POD
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='REESTR';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.POD_DATE;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:OLD.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.POD_DATE;
    /*BEGIN
      SELECT SVED.SVED_DATE INTO doc_dat
	    FROM SVED WHERE SVED.ID=:NEW.SVED_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- ARC_REZ  (Table) 
--
CREATE TABLE MASTER.ARC_REZ
(
  DATEUPLOAD   DATE,
  REZ_NUM      VARCHAR2(15 BYTE),
  REZ_NUM_UNP  VARCHAR2(15 BYTE),
  VOL          NUMBER(15,3),
  DEAD_VOL     NUMBER(15,3),
  MAX_VOL      NUMBER(15,3),
  PRIM         VARCHAR2(50 BYTE),
  DISP_NAME    VARCHAR2(50 BYTE),
  AR_TOV_ID    NUMBER(2),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  ORG_STRU_ID  NUMBER(10),
  STATUS       NUMBER(1),
  MAX_VOL_M3   NUMBER(15,3),
  DEAD_VOL_M3  NUMBER(15,3),
  TRK_COUNT    NUMBER(15),
  FOR_AND      NUMBER(1),
  KOL_LKREZ    NUMBER(15,3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.ARC_REZ.DATEUPLOAD IS 'Дата актуальности';

COMMENT ON COLUMN MASTER.ARC_REZ.REZ_NUM IS 'N резервуара';

COMMENT ON COLUMN MASTER.ARC_REZ.VOL IS 'Текущий остаток (т.)';

COMMENT ON COLUMN MASTER.ARC_REZ.DEAD_VOL IS 'Мервый остаток';

COMMENT ON COLUMN MASTER.ARC_REZ.MAX_VOL IS 'Максимальный объем';

COMMENT ON COLUMN MASTER.ARC_REZ.AR_TOV_ID IS 'Тип товарной позиции (1-нефтепродукт)';

COMMENT ON COLUMN MASTER.ARC_REZ.PROD_ID_NPR IS 'Продукт (KLS_PROD)';

COMMENT ON COLUMN MASTER.ARC_REZ.ORG_STRU_ID IS 'Подразделение (ORG_STRUCTURE)';

COMMENT ON COLUMN MASTER.ARC_REZ.STATUS IS 'Состояние резервуара: 0-в работе, 1-на консервации, 2-на ремонте';

COMMENT ON COLUMN MASTER.ARC_REZ.MAX_VOL_M3 IS 'Максимальная емкость в м3';

COMMENT ON COLUMN MASTER.ARC_REZ.DEAD_VOL_M3 IS 'Мертвые остатки в м3';

COMMENT ON COLUMN MASTER.ARC_REZ.TRK_COUNT IS 'Количество колонок';

COMMENT ON COLUMN MASTER.ARC_REZ.FOR_AND IS 'Для АНД';



--
-- AZC_GOOD_IN_WAY  (Table) 
--
CREATE TABLE MASTER.AZC_GOOD_IN_WAY
(
  DENCITY        NUMBER(6,4)                    DEFAULT 0,
  ID             NUMBER(10)                     NOT NULL,
  NOTE           VARCHAR2(100 BYTE),
  VES            NUMBER(10)                     DEFAULT 0,
  DATE_OPER      DATE,
  VOLUME         NUMBER(10)                     DEFAULT 0,
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  ORG_STRU_ID    NUMBER(10),
  PLACE_SEND_ID  NUMBER(10),
  PREDPR_ID      NUMBER(6),
  DATE_INTO      DATE                           DEFAULT SYSDATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.AZC_GOOD_IN_WAY IS 'Груз в пути';

COMMENT ON COLUMN MASTER.AZC_GOOD_IN_WAY.DENCITY IS 'плотность';

COMMENT ON COLUMN MASTER.AZC_GOOD_IN_WAY.VES IS 'груз в пути (кг)';

COMMENT ON COLUMN MASTER.AZC_GOOD_IN_WAY.DATE_OPER IS 'Дата';

COMMENT ON COLUMN MASTER.AZC_GOOD_IN_WAY.VOLUME IS 'груз в пути (л)';

COMMENT ON COLUMN MASTER.AZC_GOOD_IN_WAY.ORG_STRU_ID IS 'ID ОСЕ';



--
-- AZC_OPERATION  (Table) 
--
CREATE TABLE MASTER.AZC_OPERATION
(
  ID             NUMBER(15)                     NOT NULL,
  DATE_OPER      DATE,
  DENCITY        NUMBER(6,4)                    DEFAULT 0,
  VOLUME         NUMBER(14,3)                   DEFAULT 0,
  VES            NUMBER(14,3)                   DEFAULT 0,
  NOTE           VARCHAR2(100 BYTE),
  TYPE_OPER_ID   NUMBER(10),
  PLACE_SEND_ID  NUMBER(10),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  SOBSTV_ID      NUMBER(10),
  ORG_STRU_ID    NUMBER(10),
  SUMMA          NUMBER(12,2),
  PRICE          NUMBER(12,2),
  DISCOUNT       NUMBER(5)                      DEFAULT 0,
  DISCOUNT_TYPE  CHAR(17 BYTE),
  DATE_INTO      DATE                           DEFAULT SYSDATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.AZC_OPERATION.ID IS 'ID операции';

COMMENT ON COLUMN MASTER.AZC_OPERATION.DATE_OPER IS 'Дата операции';

COMMENT ON COLUMN MASTER.AZC_OPERATION.DENCITY IS 'Плотность подукта';

COMMENT ON COLUMN MASTER.AZC_OPERATION.VOLUME IS 'Объем продукта';

COMMENT ON COLUMN MASTER.AZC_OPERATION.VES IS 'Вес продукиа';

COMMENT ON COLUMN MASTER.AZC_OPERATION.NOTE IS 'Примечание';

COMMENT ON COLUMN MASTER.AZC_OPERATION.ORG_STRU_ID IS 'ID ОСЕ';



--
-- AZC_REALIZ_LIKARD  (Table) 
--
CREATE TABLE MASTER.AZC_REALIZ_LIKARD
(
  ID           NUMBER(10)                       NOT NULL,
  DATE_OPER    DATE,
  DENCITY      NUMBER(6,4)                      DEFAULT 0,
  VES          NUMBER(10)                       DEFAULT 0,
  VOLUME       NUMBER(10)                       DEFAULT 0,
  NOTE         VARCHAR2(100 BYTE),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  ORG_STRU_ID  NUMBER(10),
  SOBSTV_ID    NUMBER(6),
  SUMMA        NUMBER(8,2),
  PRICE        NUMBER(8,2),
  DISCOUNT     NUMBER(2)                        DEFAULT 0,
  DATE_INTO    DATE                             DEFAULT SYSDATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.AZC_REALIZ_LIKARD IS 'Ликард';

COMMENT ON COLUMN MASTER.AZC_REALIZ_LIKARD.ORG_STRU_ID IS 'ID ОСЕ';



--
-- BILL_POS  (Table) 
--
CREATE TABLE MASTER.BILL_POS
(
  NOM_DOK            NUMBER(10)                 NOT NULL,
  BILL_POS_ID        NUMBER(7)                  NOT NULL,
  VES                NUMBER(15,6)               DEFAULT 0,
  CENA_BN            NUMBER(16,6)               DEFAULT 0,
  CENA               NUMBER(16,6)               DEFAULT 0,
  SUMMA_BN           NUMBER(20,6)               DEFAULT 0,
  SUMMA_AKCIZ        NUMBER(20,6)               DEFAULT 0,
  SUMMA_NDS20        NUMBER(20,6)               DEFAULT 0,
  SUMMA_GSM25        NUMBER(20,6)               DEFAULT 0,
  SUMMA              NUMBER(20,6)               DEFAULT 0,
  CENA_POKUP         NUMBER(16,6)               DEFAULT 0,
  SUMMA_BN_POKUP     NUMBER(20,6)               DEFAULT 0,
  SUMMA_NDS20_POKUP  NUMBER(20,6)               DEFAULT 0,
  SUMMA_GSM25_POKUP  NUMBER(20,6)               DEFAULT 0,
  DATE_REALIZ        DATE,
  ID_OLD             NUMBER(7),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  OWNERSHIP_ID       NUMBER(3),
  ANALIT_ID          NUMBER(3),
  IS_AGENT           NUMBER(1),
  IS_LUK             NUMBER(1),
  NACENKA            NUMBER(10,2)               DEFAULT 0,
  NUM_AKT            NUMBER(10),
  PROTO_NUM          VARCHAR2(15 BYTE),
  PROTO_DATE         DATE,
  NO_AKCIZ           NUMBER(1)                  DEFAULT 0,
  SUPPLIER_ID        NUMBER(10),
  NOM_SF_POKUP       VARCHAR2(10 BYTE),
  NOM_DOK_POKUP      NUMBER(10),
  IS_POKUP           NUMBER(10)                 DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.BILL_POS.NOM_DOK IS 'ID СФ';

COMMENT ON COLUMN MASTER.BILL_POS.BILL_POS_ID IS '№ позиции';

COMMENT ON COLUMN MASTER.BILL_POS.VES IS 'Вес';

COMMENT ON COLUMN MASTER.BILL_POS.CENA_BN IS 'Цена без налогов';

COMMENT ON COLUMN MASTER.BILL_POS.CENA IS 'Отпускная цена';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA_BN IS 'Сумма без налогов';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA_NDS20 IS 'НДС';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA IS 'Сумма с налогами';

COMMENT ON COLUMN MASTER.BILL_POS.CENA_POKUP IS 'Цена приобретения';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA_BN_POKUP IS 'Сумме за приобретение без налогов';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA_NDS20_POKUP IS 'НДС за приобретение';

COMMENT ON COLUMN MASTER.BILL_POS.SUMMA_GSM25_POKUP IS 'Сумма за приобретение';

COMMENT ON COLUMN MASTER.BILL_POS.DATE_REALIZ IS 'Дата реализации';

COMMENT ON COLUMN MASTER.BILL_POS.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.BILL_POS.OWNERSHIP_ID IS 'Собстенный/Приобретенный';

COMMENT ON COLUMN MASTER.BILL_POS.ANALIT_ID IS 'Аналитика';

COMMENT ON COLUMN MASTER.BILL_POS.IS_AGENT IS 'Группа договоров (0-комиссия,1-агентский,2-поставка,3-собственные договора НПО)';

COMMENT ON COLUMN MASTER.BILL_POS.IS_LUK IS 'Позиция печатается в счет-фактуре';

COMMENT ON COLUMN MASTER.BILL_POS.NACENKA IS 'Страховой тариф';

COMMENT ON COLUMN MASTER.BILL_POS.NUM_AKT IS '№ акта приема/передачи';

COMMENT ON COLUMN MASTER.BILL_POS.PROTO_NUM IS 'Протокол цен';

COMMENT ON COLUMN MASTER.BILL_POS.PROTO_DATE IS 'Дата протокола цен';

COMMENT ON COLUMN MASTER.BILL_POS.NO_AKCIZ IS 'Цена без акциза';

COMMENT ON COLUMN MASTER.BILL_POS.SUPPLIER_ID IS 'Поставщик приобретенного товара';

COMMENT ON COLUMN MASTER.BILL_POS.NOM_SF_POKUP IS '№ сф на приобретение';

COMMENT ON COLUMN MASTER.BILL_POS.NOM_DOK_POKUP IS 'ID сф на приобретение';

COMMENT ON COLUMN MASTER.BILL_POS.IS_POKUP IS 'Позиция приобретенного продукта';



--
-- BILL_POS_SNP  (Table) 
--
CREATE TABLE MASTER.BILL_POS_SNP
(
  NOM_DOK            NUMBER(7)                  NOT NULL,
  BILL_POS_SNP_ID    NUMBER(7)                  NOT NULL,
  VES                NUMBER(15,6),
  KVIT_VES           NUMBER(15,6),
  SVED_NUM           NUMBER(6),
  DATE_OTGR          DATE,
  CENA_BN            NUMBER(12,2),
  CENA               NUMBER(12,2),
  SUMMA_BN           NUMBER(15,2),
  SUMMA_AKCIZ        NUMBER(15,2),
  SUMMA_NDS20        NUMBER(15,2),
  SUMMA_GSM25        NUMBER(15,2),
  SUMMA              NUMBER(15,2),
  CENA_POKUP         NUMBER(12,2),
  SUMMA_BN_POKUP     NUMBER(15,2),
  SUMMA_NDS20_POKUP  NUMBER(15,2),
  SUMMA_GSM25_POKUP  NUMBER(15,2),
  DATE_REALIZ        DATE,
  ID_OLD             NUMBER(7),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  OWNERSHIP_ID       NUMBER(3),
  ANALIT_ID          NUMBER(3),
  IS_AGENT           NUMBER(1),
  NPR_PRICES_ID      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- GD_PLAN  (Table) 
--
CREATE TABLE MASTER.GD_PLAN
(
  ID             NUMBER(10)                     NOT NULL,
  DATE_PLAN      DATE,
  FROM_DATE      DATE,
  TO_DATE        DATE,
  PLAN_CIST      NUMBER(10),
  PLAN_VES       NUMBER(14,3),
  DATE_KORR      DATE,
  KORR_CIST      NUMBER(10),
  KORR_VES       NUMBER(14,3),
  MARSHRUT_CIST  NUMBER(10),
  MARSHRUT_VES   NUMBER(14,3),
  GROTP_ID       NUMBER(6),
  NAPR_MOS_ID    NUMBER(10),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  LOAD_TYPE_ID   NUMBER(2),
  VAGOWNER_ID    NUMBER(10),
  STANOTP_ID     NUMBER(10),
  TIP_PLAN       VARCHAR2(3 BYTE),
  APPL_TAG       VARCHAR2(6 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.GD_PLAN IS 'План перевозок';

COMMENT ON COLUMN MASTER.GD_PLAN.ID IS 'План перевозок';

COMMENT ON COLUMN MASTER.GD_PLAN.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.GD_PLAN.FROM_DATE IS 'Действует с';

COMMENT ON COLUMN MASTER.GD_PLAN.TO_DATE IS 'Действует по';

COMMENT ON COLUMN MASTER.GD_PLAN.PLAN_CIST IS 'План - цистерн';

COMMENT ON COLUMN MASTER.GD_PLAN.PLAN_VES IS 'План - тонн';

COMMENT ON COLUMN MASTER.GD_PLAN.DATE_KORR IS 'Дата корректировки';

COMMENT ON COLUMN MASTER.GD_PLAN.KORR_CIST IS 'Корректировка - цистерн';

COMMENT ON COLUMN MASTER.GD_PLAN.KORR_VES IS 'Корректировка - тонн';

COMMENT ON COLUMN MASTER.GD_PLAN.MARSHRUT_CIST IS 'Маршрут - цистерн';

COMMENT ON COLUMN MASTER.GD_PLAN.MARSHRUT_VES IS 'Маршрут - тонн';

COMMENT ON COLUMN MASTER.GD_PLAN.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.GD_PLAN.NAPR_MOS_ID IS 'Направление отгрузки';

COMMENT ON COLUMN MASTER.GD_PLAN.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.GD_PLAN.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.GD_PLAN.VAGOWNER_ID IS 'Собственник вагонов';

COMMENT ON COLUMN MASTER.GD_PLAN.STANOTP_ID IS 'Станция отправления';

COMMENT ON COLUMN MASTER.GD_PLAN.TIP_PLAN IS 'Тип плана';



--
-- GD_RAZN  (Table) 
--
CREATE TABLE MASTER.GD_RAZN
(
  ID              NUMBER(10)                    NOT NULL,
  TRANSPORTER_ID  NUMBER(6),
  NUM_ZAYV        VARCHAR2(15 BYTE),
  DATE_PLAN       DATE,
  FROM_DATE       DATE,
  TO_DATE         DATE,
  DATE_SOGL       DATE,
  DATE_REG        DATE,
  DATE_UTV        DATE,
  GD_DOGOVOR      VARCHAR2(10 BYTE),
  STAN_OTP_ID     NUMBER(10),
  VETKA_OTP_ID    NUMBER(10),
  GD_OTPR_ID      NUMBER(10),
  GROTP_ID        NUMBER(6),
  TEX_PD_ID       NUMBER(10),
  LOAD_TYPE_ID    NUMBER(2),
  EXPED_ID        NUMBER(6),
  GD_GROUP_ID     NUMBER(10),
  GD_SOOB_ID      NUMBER(10),
  GD_PODACH_ID    NUMBER(10),
  NAPR_MOS_ID     NUMBER(10),
  SOGL            INTEGER
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.GD_RAZN IS 'Месячная разнарядка';

COMMENT ON COLUMN MASTER.GD_RAZN.ID IS 'Месячная заявка';

COMMENT ON COLUMN MASTER.GD_RAZN.TRANSPORTER_ID IS 'Перевозчик';

COMMENT ON COLUMN MASTER.GD_RAZN.NUM_ZAYV IS 'Номер заявки';

COMMENT ON COLUMN MASTER.GD_RAZN.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.GD_RAZN.FROM_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.GD_RAZN.TO_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.GD_RAZN.DATE_SOGL IS 'Дата согласования';

COMMENT ON COLUMN MASTER.GD_RAZN.DATE_REG IS 'Дата регистрации';

COMMENT ON COLUMN MASTER.GD_RAZN.DATE_UTV IS 'Дата утверждения';

COMMENT ON COLUMN MASTER.GD_RAZN.GD_DOGOVOR IS '№ договора об организации перевозок';

COMMENT ON COLUMN MASTER.GD_RAZN.STAN_OTP_ID IS 'Станция отправления';

COMMENT ON COLUMN MASTER.GD_RAZN.VETKA_OTP_ID IS 'Ветка отправителя';

COMMENT ON COLUMN MASTER.GD_RAZN.GD_OTPR_ID IS 'Признак отправки';

COMMENT ON COLUMN MASTER.GD_RAZN.GROTP_ID IS 'Отправитель';

COMMENT ON COLUMN MASTER.GD_RAZN.TEX_PD_ID IS 'Плательщик тарифа';

COMMENT ON COLUMN MASTER.GD_RAZN.LOAD_TYPE_ID IS 'Тип транспортировки';

COMMENT ON COLUMN MASTER.GD_RAZN.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.GD_RAZN.GD_GROUP_ID IS 'Группа груза';

COMMENT ON COLUMN MASTER.GD_RAZN.GD_SOOB_ID IS 'Вид сообщения';

COMMENT ON COLUMN MASTER.GD_RAZN.GD_PODACH_ID IS 'Вид подачи';

COMMENT ON COLUMN MASTER.GD_RAZN.NAPR_MOS_ID IS 'Направление ЭКСПОРТ_ВНУТР РЫНОК';

COMMENT ON COLUMN MASTER.GD_RAZN.SOGL IS 'Отметка о согласовании';



--
-- GD_RAZN_POS  (Table) 
--
CREATE TABLE MASTER.GD_RAZN_POS
(
  ID             NUMBER(10)                     NOT NULL,
  GD_RAZN_ID     NUMBER(10),
  NUM_POS        NUMBER(10),
  DATE_POS       DATE,
  KOL            NUMBER(10),
  VES            NUMBER(14,3),
  PRIM           VARCHAR2(50 BYTE),
  PROD_ID_NPR    VARCHAR2(5 BYTE),
  STAN_ID        NUMBER(10),
  VETKA_ID       NUMBER(4),
  POLUCH_ID      NUMBER(6),
  VID_OTPR_ID    NUMBER(10),
  GD_VAGTYPE_ID  NUMBER(10),
  GD_PRINVAG_ID  NUMBER(10),
  VAGOWNER_ID    NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.GD_RAZN_POS IS 'Позиции месячной заявки';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.ID IS 'Позиции заявки';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.GD_RAZN_ID IS 'Месячная заявка';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.NUM_POS IS 'Номер позиции';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.DATE_POS IS 'Дата погрузки';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.KOL IS 'Кол-во';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.VES IS 'Вес';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.PRIM IS 'Примечание';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.VETKA_ID IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.POLUCH_ID IS 'Получатель';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.VID_OTPR_ID IS 'Вид отправки';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.GD_VAGTYPE_ID IS 'Род вагона (для ГУ-12)';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.GD_PRINVAG_ID IS 'Принадлежность вагонов';

COMMENT ON COLUMN MASTER.GD_RAZN_POS.VAGOWNER_ID IS 'Собственник вагонов';



--
-- KLS_DOG  (Table) 
--
CREATE TABLE MASTER.KLS_DOG
(
  ID                   NUMBER(5)                DEFAULT 0                     NOT NULL,
  DOG_NUMBER           VARCHAR2(30 BYTE),
  SHORT_NUMBER         VARCHAR2(11 BYTE),
  DOG_BEGIN_DATE       DATE,
  DOG_END_DATE         DATE,
  DOG_DATE             DATE,
  DOG_YEAR             NUMBER(4),
  REP_KOD              VARCHAR2(6 BYTE),
  PREDPR_ID            NUMBER(6),
  INSURE_ID            NUMBER(5),
  VIDDOG_ID            NUMBER(2),
  GROUPDOG_ID          NUMBER(2),
  GOSPROG_ID           NUMBER(2),
  LUKDOG_ID            NUMBER(5),
  USL_OPL_ID           NUMBER(10),
  SALDO_01042002       NUMBER(15,2),
  SALDO_01042002_PROD  NUMBER(15,2),
  MAINDOG_ID           NUMBER(5),
  SALDO_01072002       NUMBER(18,2)             DEFAULT 0,
  SALDO_01_07_2002     NUMBER(18,2)             DEFAULT 0,
  APPL_TAG             VARCHAR2(6 BYTE),
  SALDO_01122002       NUMBER(12,2)             DEFAULT 0,
  IS_AGENT             NUMBER(10)               DEFAULT NULL,
  AGENT_ID             NUMBER(10),
  PLAT_DOG_NUMBER      VARCHAR2(30 BYTE),
  ZAKAZ_CONTACT_ID     NUMBER(10),
  UNP_ID               NUMBER(10),
  AGENT_DOG_NUMBER     VARCHAR2(30 BYTE),
  ISU_KOD_DOG_TEST     VARCHAR2(13 BYTE),
  ISU_KOD_DOG          VARCHAR2(13 BYTE),
  ISU_KOD_DOG_USLUG    VARCHAR2(10 BYTE),
  ISU_KOD_DOG_TAR      VARCHAR2(10 BYTE),
  ISU_KOD_DOG_VOZN     VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOG IS 'Договора';

COMMENT ON COLUMN MASTER.KLS_DOG.DOG_NUMBER IS 'Полный номер договора';

COMMENT ON COLUMN MASTER.KLS_DOG.SHORT_NUMBER IS 'Краткий номер договора';

COMMENT ON COLUMN MASTER.KLS_DOG.DOG_BEGIN_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.KLS_DOG.DOG_END_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.KLS_DOG.DOG_DATE IS 'Дата регистрации';

COMMENT ON COLUMN MASTER.KLS_DOG.DOG_YEAR IS 'Год';

COMMENT ON COLUMN MASTER.KLS_DOG.PREDPR_ID IS 'Контрагент (с кем договор)';

COMMENT ON COLUMN MASTER.KLS_DOG.INSURE_ID IS 'Договор страхования';

COMMENT ON COLUMN MASTER.KLS_DOG.VIDDOG_ID IS 'Вид договора';

COMMENT ON COLUMN MASTER.KLS_DOG.GROUPDOG_ID IS 'Группа договоров';

COMMENT ON COLUMN MASTER.KLS_DOG.GOSPROG_ID IS 'Госпрограмма';

COMMENT ON COLUMN MASTER.KLS_DOG.LUKDOG_ID IS 'Договор с Компанией';

COMMENT ON COLUMN MASTER.KLS_DOG.USL_OPL_ID IS 'Условия оплаты';

COMMENT ON COLUMN MASTER.KLS_DOG.MAINDOG_ID IS 'В рамках договора с Компанией';

COMMENT ON COLUMN MASTER.KLS_DOG.IS_AGENT IS 'Принадлежность договора';

COMMENT ON COLUMN MASTER.KLS_DOG.AGENT_ID IS 'Владелец договора';

COMMENT ON COLUMN MASTER.KLS_DOG.PLAT_DOG_NUMBER IS 'Номер  договора у контрагента';

COMMENT ON COLUMN MASTER.KLS_DOG.UNP_ID IS 'ID из справочника договоров УНП';

COMMENT ON COLUMN MASTER.KLS_DOG.AGENT_DOG_NUMBER IS 'Номер договора у владельца';

COMMENT ON COLUMN MASTER.KLS_DOG.ISU_KOD_DOG_TEST IS 'Код договора в ИСУ (тестовая база)';

COMMENT ON COLUMN MASTER.KLS_DOG.ISU_KOD_DOG IS 'Код договора в ИСУ (продуктив)';



--
-- KLS_DOG_MAIN  (Table) 
--
CREATE TABLE MASTER.KLS_DOG_MAIN
(
  ID           NUMBER(10)                       NOT NULL,
  DOG_ID       NUMBER(10),
  IS_AGENT     NUMBER(1),
  FROM_DATE    DATE,
  TO_DATE      DATE,
  NAME         VARCHAR2(30 BYTE),
  U_DOG_ID     NUMBER(10),
  NEFT_DOG_ID  NUMBER(10),
  HRAN_DOG_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KLS_DOG_MAIN IS 'Базовые договора с Компанией';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.ID IS 'ID';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.DOG_ID IS 'Договор';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.IS_AGENT IS 'Тип';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.FROM_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.TO_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.U_DOG_ID IS 'Базовое условие';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.NEFT_DOG_ID IS 'Договор по перевалке нефти';

COMMENT ON COLUMN MASTER.KLS_DOG_MAIN.HRAN_DOG_ID IS 'Договор хранения';



--
-- KLS_PLAN  (Table) 
--
CREATE TABLE MASTER.KLS_PLAN
(
  ID              NUMBER(2)                     NOT NULL,
  PLAN_NAME       VARCHAR2(30 BYTE),
  PLAN_KIND_ID    NUMBER(10),
  BROTHER_ID      NUMBER(2),
  PLAN_OWNER_ID   NUMBER(6),
  SHORT_NAME      VARCHAR2(10 BYTE),
  GLOBAL_PLAN_ID  NUMBER(10),
  SHORT_GLOBAL    VARCHAR2(20 BYTE),
  ONLY_SNP        NUMBER(1),
  ONLY_UNP        NUMBER(1)                     DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.KLS_PLAN.PLAN_NAME IS 'Наименование плана (Ухтинский, Московский)';

COMMENT ON COLUMN MASTER.KLS_PLAN.GLOBAL_PLAN_ID IS 'ID общего плана';

COMMENT ON COLUMN MASTER.KLS_PLAN.ONLY_SNP IS '1-Только по СНП';



--
-- LOAD_FIL_ORG  (Table) 
--
CREATE TABLE MASTER.LOAD_FIL_ORG
(
  ID            NUMBER(10)                      NOT NULL,
  TAG           VARCHAR2(150 BYTE),
  NAME          VARCHAR2(100 BYTE),
  ORG_KIND_ID   NUMBER(10),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  ORG_STRU_ID   NUMBER(10),
  FILIAL_ID     NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.LOAD_FIL_ORG IS 'Загружаемые подразделения';

COMMENT ON COLUMN MASTER.LOAD_FIL_ORG.ID IS 'Подразделение';

COMMENT ON COLUMN MASTER.LOAD_FIL_ORG.TAG IS 'ТЕГ';

COMMENT ON COLUMN MASTER.LOAD_FIL_ORG.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.LOAD_FIL_ORG.IS_AUTO_LINK IS 'Признак автоматической привязки';

COMMENT ON COLUMN MASTER.LOAD_FIL_ORG.ORG_STRU_ID IS 'ID подразделения';

COMMENT ON COLUMN MASTER.LOAD_FIL_ORG.FILIAL_ID IS 'ID филиала';



--
-- LOAD_FIL_PERIODS  (Table) 
--
CREATE TABLE MASTER.LOAD_FIL_PERIODS
(
  ID           NUMBER(10)                       NOT NULL,
  FILIAL_ID    NUMBER(10)                       NOT NULL,
  DATE_REPORT  DATE,
  FILENAME     VARCHAR2(100 BYTE),
  DATE_LOAD    DATE,
  USER_LOAD    VARCHAR2(240 BYTE),
  REP_TYPE_ID  NUMBER(10)                       NOT NULL,
  STATUS       NUMBER(2)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.LOAD_FIL_PERIODS IS 'Загруженные отчетные даты';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.ID IS 'ID загрузки';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.FILIAL_ID IS 'ID филиала';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.DATE_REPORT IS 'Отчетная дата';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.FILENAME IS 'Файл';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.DATE_LOAD IS 'Дата время загрузки';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.USER_LOAD IS 'Пользователь';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.REP_TYPE_ID IS 'Тип загружаемого отчета';

COMMENT ON COLUMN MASTER.LOAD_FIL_PERIODS.STATUS IS 'Статус отчета: 0-Загружен в буфер, 1-Проверен, 2-Загружен в AZC_OPERATION';



--
-- LOAD_FIL_REALIZ  (Table) 
--
CREATE TABLE MASTER.LOAD_FIL_REALIZ
(
  ID             NUMBER(10)                     NOT NULL,
  FILIAL_ID      NUMBER(10),
  FIL_PERIOD_ID  NUMBER(10),
  FIL_ORG_ID     NUMBER(10),
  FIL_PROD_ID    NUMBER(10),
  REP_TYPE_ID    NUMBER(10),
  TYPE_OPER_ID   NUMBER(10),
  FACT           NUMBER(15,3)                   DEFAULT 0,
  DATE_OPER      DATE,
  FACT_SUM       NUMBER(15,2)                   DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.LOAD_FIL_REALIZ IS 'Загрузка реализации';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.ID IS 'Реализация';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.FILIAL_ID IS 'ID филиала';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.FIL_PERIOD_ID IS 'ID загрузки';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.FIL_ORG_ID IS 'Подразделение';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.FIL_PROD_ID IS 'Загружаемый продукт';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.REP_TYPE_ID IS 'Тип загружаемого отчета';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.FACT IS 'Факт';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.DATE_OPER IS 'Дата операции';

COMMENT ON COLUMN MASTER.LOAD_FIL_REALIZ.FACT_SUM IS 'Сумма';



--
-- ORG_RELATIONS  (Table) 
--
CREATE TABLE MASTER.ORG_RELATIONS
(
  ORG_STRU_1_ID  NUMBER(10)                     NOT NULL,
  ORG_STRU_2_ID  NUMBER(10)                     DEFAULT 0                     NOT NULL,
  KIND_RELA_ID   NUMBER(10),
  IS_ROOT        NUMBER(1)                      DEFAULT 0
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.ORG_RELATIONS.ORG_STRU_1_ID IS 'ID ОСЕ';

COMMENT ON COLUMN MASTER.ORG_RELATIONS.ORG_STRU_2_ID IS 'ID ОСЕ';



--
-- PAYMENTS  (Table) 
--
CREATE TABLE MASTER.PAYMENTS
(
  ID          NUMBER                            NOT NULL,
  DOG_ID      NUMBER,
  BANK_ID     NUMBER(10),
  RS          VARCHAR2(20 BYTE),
  SUMMA       NUMBER(15,2)                      DEFAULT 0,
  NAZN_PLAT   VARCHAR2(500 BYTE),
  OURBANK_ID  NUMBER(10),
  NUM_PLAT    VARCHAR2(20 BYTE),
  DATE_PLAT   DATE,
  PAYFORM_ID  NUMBER,
  DATE_POST   DATE,
  DEST_ID     NUMBER(10)                        DEFAULT 1,
  RS_ID       NUMBER                            DEFAULT 9
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.PAYMENTS.DATE_POST IS 'Дата попадания платежки в выписку (дата прихода платежа)';

COMMENT ON COLUMN MASTER.PAYMENTS.DEST_ID IS 'Назначение (для процедуры закрытия)';



--
-- PAYMENTS_ON_BILLS  (Table) 
--
CREATE TABLE MASTER.PAYMENTS_ON_BILLS
(
  ID           NUMBER(10)                       NOT NULL,
  NOM_DOK      NUMBER(10),
  BILL_POS_ID  NUMBER(7),
  PAYMENTS_ID  NUMBER,
  SUMMA        NUMBER(15,2),
  DATE_REALIZ  DATE,
  SUMMA_NDS    NUMBER(20,6),
  SUMMA_AKCIZ  NUMBER(20,6),
  VES          NUMBER(15,6)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PAYMENTS_PROD  (Table) 
--
CREATE TABLE MASTER.PAYMENTS_PROD
(
  PAYMENTS_ID  NUMBER                           NOT NULL,
  PROD_ID_NPR  VARCHAR2(5 BYTE)                 NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PAYMENTS_PROD IS 'Назначения платежа (Номенклатура)';



--
-- PAYMENTS_TO_BILLS  (Table) 
--
CREATE TABLE MASTER.PAYMENTS_TO_BILLS
(
  PAYMENTS_ID  NUMBER                           NOT NULL,
  NOM_DOK      NUMBER(10)                       NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PLAN_PERIODS  (Table) 
--
CREATE TABLE MASTER.PLAN_PERIODS
(
  ID            NUMBER(10)                      NOT NULL,
  PLAN_ID       NUMBER(2)                       NOT NULL,
  DATE_PLAN     DATE,
  NUM_IZM_POST  NUMBER(2)                       DEFAULT 0,
  NUM_IZM_RESU  NUMBER(2)                       DEFAULT 0,
  BEGIN_DATE    DATE,
  END_DATE      DATE,
  NUM_PLAN      NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.PLAN_PERIODS.DATE_PLAN IS 'Плановый месяц';

COMMENT ON COLUMN MASTER.PLAN_PERIODS.NUM_IZM_POST IS '№ текущего изменения плана';

COMMENT ON COLUMN MASTER.PLAN_PERIODS.NUM_IZM_RESU IS '№ текущего изменения ресурса';

COMMENT ON COLUMN MASTER.PLAN_PERIODS.BEGIN_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.PLAN_PERIODS.END_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.PLAN_PERIODS.NUM_PLAN IS 'N плана';



--
-- PLAN_POST  (Table) 
--
CREATE TABLE MASTER.PLAN_POST
(
  ID           NUMBER(10)                       NOT NULL,
  PLAN_CENA    NUMBER(9,2)                      DEFAULT 0,
  PLAN_VES     NUMBER(15,6)                     DEFAULT 0,
  PLAN_SUM     NUMBER(15,2)                     DEFAULT 0,
  PLAN_ID      NUMBER(2),
  PLAN_PER_ID  NUMBER(10),
  PLANSTRU_ID  NUMBER(20),
  DOG_ID       NUMBER(5),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  PAYFORM_ID   NUMBER(2),
  DATE_CENA    DATE,
  CAT_CEN_ID   NUMBER(3),
  APPL_TAG     VARCHAR2(6 BYTE),
  REFINERY_ID  NUMBER(10)                       DEFAULT 8,
  ORGSTRU_ID   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.PLAN_POST IS 'План поставок';

COMMENT ON COLUMN MASTER.PLAN_POST.PLAN_CENA IS 'Плановая цена';

COMMENT ON COLUMN MASTER.PLAN_POST.PLAN_VES IS 'Плановый объем';

COMMENT ON COLUMN MASTER.PLAN_POST.PLAN_SUM IS 'Плановая сумма';

COMMENT ON COLUMN MASTER.PLAN_POST.DATE_CENA IS 'Дата цены';

COMMENT ON COLUMN MASTER.PLAN_POST.REFINERY_ID IS 'Завод-производитель (ID из KLS_PREDPR)';

COMMENT ON COLUMN MASTER.PLAN_POST.ORGSTRU_ID IS 'Склад-получатель';



--
-- PLAN_POST_HIST  (Table) 
--
CREATE TABLE MASTER.PLAN_POST_HIST
(
  ID           NUMBER(10)                       NOT NULL,
  NUM_IZM      NUMBER(2)                        NOT NULL,
  PLAN_CENA    NUMBER(9,2)                      DEFAULT 0,
  PLAN_VES     NUMBER(15,6)                     DEFAULT 0,
  PLAN_SUM     NUMBER(15,2)                     DEFAULT 0,
  PLAN_ID      NUMBER(2),
  PLAN_PER_ID  NUMBER(10),
  PLANSTRU_ID  NUMBER(20),
  DOG_ID       NUMBER(5),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  PAYFORM_ID   NUMBER(2),
  DATE_CENA    DATE,
  CAT_CEN_ID   NUMBER(3),
  REFINERY_ID  NUMBER(10),
  ORGSTRU_ID   NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- PLAN_RESU  (Table) 
--
CREATE TABLE MASTER.PLAN_RESU
(
  ID           NUMBER(10)                       NOT NULL,
  PLAN_UTMSK   NUMBER(15,6)                     DEFAULT 0,
  HRAN_UTMSK   NUMBER(15,6)                     DEFAULT 0,
  OSTAT_UTMSK  NUMBER(15,6)                     DEFAULT 0,
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  PLAN_ID      NUMBER(2),
  PLAN_PER_ID  NUMBER(10),
  SOBSTV_ID    NUMBER(6),
  REFINER_ID   NUMBER(6)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.PLAN_RESU.PLAN_UTMSK IS 'План выработки';

COMMENT ON COLUMN MASTER.PLAN_RESU.HRAN_UTMSK IS 'На хранении';

COMMENT ON COLUMN MASTER.PLAN_RESU.OSTAT_UTMSK IS 'Остатки';



--
-- PLAN_RESU_HIST  (Table) 
--
CREATE TABLE MASTER.PLAN_RESU_HIST
(
  ID           NUMBER(10)                       NOT NULL,
  NUM_IZM      NUMBER(2)                        NOT NULL,
  PLAN_UTMSK   NUMBER(15,6)                     DEFAULT 0,
  HRAN_UTMSK   NUMBER(15,6)                     DEFAULT 0,
  OSTAT_UTMSK  NUMBER(15,6)                     DEFAULT 0,
  PLAN_ID      NUMBER(2),
  PLAN_PER_ID  NUMBER(10),
  PROD_ID_NPR  VARCHAR2(5 BYTE),
  SOBSTV_ID    NUMBER(6),
  REFINER_ID   NUMBER(6)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.PLAN_RESU_HIST.PLAN_UTMSK IS 'План выработки';

COMMENT ON COLUMN MASTER.PLAN_RESU_HIST.HRAN_UTMSK IS 'На хранении';

COMMENT ON COLUMN MASTER.PLAN_RESU_HIST.OSTAT_UTMSK IS 'Остатки';



--
-- PLAN_STRU_RELATIONS  (Table) 
--
CREATE TABLE MASTER.PLAN_STRU_RELATIONS
(
  PLAN_FROM_ID      NUMBER(2)                   NOT NULL,
  PLANSTRU_FROM_ID  NUMBER(20)                  NOT NULL,
  PLAN_TO_ID        NUMBER(2)                   NOT NULL,
  PLANSTRU_TO_ID    NUMBER(20)                  NOT NULL
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- SPECIF  (Table) 
--
CREATE TABLE MASTER.SPECIF
(
  ID            NUMBER(10)                      NOT NULL,
  DOG_ID        NUMBER(5),
  PROD_ID_NPR   VARCHAR2(5 BYTE),
  LOAD_ABBR     VARCHAR2(3 BYTE),
  STANOTP_ID    NUMBER(10),
  STAN_ID       NUMBER(10),
  VETKA_ID      NUMBER(4),
  POLUCH_ID     NUMBER(6),
  POTREB_ID     NUMBER(6),
  PRIM          VARCHAR2(100 BYTE)              DEFAULT ' ',
  GR4           VARCHAR2(100 BYTE),
  BEGIN_DATE    DATE,
  END_DATE      DATE,
  M1            NUMBER(15,6)                    DEFAULT 0,
  M2            NUMBER(15,6)                    DEFAULT 0,
  M3            NUMBER(15,6)                    DEFAULT 0,
  M4            NUMBER(15,6)                    DEFAULT 0,
  M5            NUMBER(15,6)                    DEFAULT 0,
  M6            NUMBER(15,6)                    DEFAULT 0,
  M7            NUMBER(15,6)                    DEFAULT 0,
  M8            NUMBER(15,6)                    DEFAULT 0,
  M9            NUMBER(15,6)                    DEFAULT 0,
  M10           NUMBER(15,6)                    DEFAULT 0,
  M11           NUMBER(15,6)                    DEFAULT 0,
  M12           NUMBER(15,6)                    DEFAULT 0,
  KV1           NUMBER(15,6)                    DEFAULT 0,
  KV2           NUMBER(15,6)                    DEFAULT 0,
  KV3           NUMBER(15,6)                    DEFAULT 0,
  KV4           NUMBER(15,6)                    DEFAULT 0,
  VES_ALL       NUMBER(15,6)                    DEFAULT 0,
  APPL_TAG      VARCHAR2(6 BYTE),
  UPDATE_DATE   DATE,
  MONTH_ALL_ID  NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.SPECIF.ID IS 'Портфель заказов';

COMMENT ON COLUMN MASTER.SPECIF.APPL_TAG IS 'Тег приложения';

COMMENT ON COLUMN MASTER.SPECIF.UPDATE_DATE IS 'Дата обновления';

COMMENT ON COLUMN MASTER.SPECIF.MONTH_ALL_ID IS 'Ссылка на заказ потребителя';



--
-- USL_DOG  (Table) 
--
CREATE TABLE MASTER.USL_DOG
(
  DOG_ID            NUMBER(5)                   NOT NULL,
  USL_NUMBER        NUMBER(3)                   NOT NULL,
  USL_NAME          VARCHAR2(75 BYTE),
  USL_BEGIN_DATE    DATE,
  USL_END_DATE      DATE,
  VID_USL_ID        NUMBER(2),
  PAYDELAY_ID       NUMBER(2),
  PAYDELAY_DATE     DATE,
  KOL_DN            NUMBER(4),
  USL_AKT           NUMBER(1),
  USL_UTV           NUMBER(1),
  USL_BAZ           NUMBER(1),
  PROC_PRED         NUMBER(3),
  PROC_PENI         NUMBER(5,2),
  PROC_INSURE       NUMBER(5,2),
  NEUST             NUMBER(4,1),
  USL_SUM           NUMBER(6,2),
  PAYFORM_ID        NUMBER(2),
  CAT_CEN_ID        NUMBER(3),
  ID                NUMBER(10),
  NPOCAT_CEN_ID     NUMBER(3),
  R3_NUM_ISP        VARCHAR2(10 BYTE),
  USL_SUM_AREND     NUMBER(6,2),
  ISU_KOD_DOG_TEST  VARCHAR2(13 BYTE),
  ISU_KOD_DOG       VARCHAR2(13 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.USL_DOG.DOG_ID IS 'Договор';

COMMENT ON COLUMN MASTER.USL_DOG.USL_NUMBER IS 'Условие';

COMMENT ON COLUMN MASTER.USL_DOG.USL_NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.USL_DOG.USL_BEGIN_DATE IS 'С даты';

COMMENT ON COLUMN MASTER.USL_DOG.USL_END_DATE IS 'По дату';

COMMENT ON COLUMN MASTER.USL_DOG.VID_USL_ID IS 'Вид условия';

COMMENT ON COLUMN MASTER.USL_DOG.PAYDELAY_ID IS 'Вид отсрочки';

COMMENT ON COLUMN MASTER.USL_DOG.PAYDELAY_DATE IS 'отсрочка до определенной даты';

COMMENT ON COLUMN MASTER.USL_DOG.KOL_DN IS 'число дней отсрочки';

COMMENT ON COLUMN MASTER.USL_DOG.USL_AKT IS 'Актуально';

COMMENT ON COLUMN MASTER.USL_DOG.USL_UTV IS 'Утверждено';

COMMENT ON COLUMN MASTER.USL_DOG.USL_BAZ IS 'Базовое';

COMMENT ON COLUMN MASTER.USL_DOG.PROC_PRED IS 'процент предоплаты';

COMMENT ON COLUMN MASTER.USL_DOG.PROC_PENI IS 'процент пени';

COMMENT ON COLUMN MASTER.USL_DOG.PROC_INSURE IS 'процент страховки';

COMMENT ON COLUMN MASTER.USL_DOG.NEUST IS 'размер неустойки';

COMMENT ON COLUMN MASTER.USL_DOG.USL_SUM IS 'Руб. с тонны';

COMMENT ON COLUMN MASTER.USL_DOG.PAYFORM_ID IS 'Вид оплаты';

COMMENT ON COLUMN MASTER.USL_DOG.CAT_CEN_ID IS 'Категория цены';

COMMENT ON COLUMN MASTER.USL_DOG.ID IS 'ID';

COMMENT ON COLUMN MASTER.USL_DOG.NPOCAT_CEN_ID IS 'Категория цены при продаже';

COMMENT ON COLUMN MASTER.USL_DOG.R3_NUM_ISP IS 'Направление R3';

COMMENT ON COLUMN MASTER.USL_DOG.USL_SUM_AREND IS 'Руб. с тонны за аренд.вагоны';

COMMENT ON COLUMN MASTER.USL_DOG.ISU_KOD_DOG_TEST IS 'Код договора из ИСУ Переработка (тестовая база)';

COMMENT ON COLUMN MASTER.USL_DOG.ISU_KOD_DOG IS 'Код договора из ИСУ Переработка (продуктив)';



--
-- ARC_REZ_AR_TOV_FK_I  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_AR_TOV_FK_I ON MASTER.ARC_REZ
(AR_TOV_ID)
TABLESPACE USERSINDX;


--
-- ARC_REZ_DATENUM  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_DATENUM ON MASTER.ARC_REZ
(DATEUPLOAD, REZ_NUM)
TABLESPACE USERSINDX;


--
-- ARC_REZ_DATEUPLOAD  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_DATEUPLOAD ON MASTER.ARC_REZ
(DATEUPLOAD)
TABLESPACE USERSINDX;


--
-- ARC_REZ_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_ORG_STRU_FK_I ON MASTER.ARC_REZ
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- ARC_REZ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ARC_REZ_PK ON MASTER.ARC_REZ
(DATEUPLOAD, ORG_STRU_ID, PROD_ID_NPR, REZ_NUM)
TABLESPACE USERSINDX;


--
-- ARC_REZ_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_PROD_FK_I ON MASTER.ARC_REZ
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- ARC_REZ_REZ_NUM  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_REZ_NUM ON MASTER.ARC_REZ
(REZ_NUM)
TABLESPACE USERSINDX;


--
-- ARC_REZ_VOL  (Index) 
--
CREATE INDEX MASTER.ARC_REZ_VOL ON MASTER.ARC_REZ
(VOL)
TABLESPACE USERSINDX;


--
-- BILL_POS_ANALIT_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_ANALIT_FK_I ON MASTER.BILL_POS
(ANALIT_ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_BILLS_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_BILLS_FK_I ON MASTER.BILL_POS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILL_POS_DATE_REALIZ  (Index) 
--
CREATE INDEX MASTER.BILL_POS_DATE_REALIZ ON MASTER.BILL_POS
(DATE_REALIZ, IS_LUK, IS_AGENT, NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILL_POS_IS_LUK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_IS_LUK_I ON MASTER.BILL_POS
(IS_LUK)
TABLESPACE USERSINDX;


--
-- BILL_POS_NOM_DOK_2_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_NOM_DOK_2_I ON MASTER.BILL_POS
(NOM_DOK, IS_AGENT, DATE_REALIZ)
TABLESPACE USERSINDX;


--
-- BILL_POS_OWNERSHIP_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_OWNERSHIP_FK_I ON MASTER.BILL_POS
(OWNERSHIP_ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILL_POS_PK ON MASTER.BILL_POS
(BILL_POS_ID, NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILL_POS_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_PROD_FK_I ON MASTER.BILL_POS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_ANALIT_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SNP_ANALIT_FK_I ON MASTER.BILL_POS_SNP
(ANALIT_ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_BILLS_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SNP_BILLS_FK_I ON MASTER.BILL_POS_SNP
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_DATE_OTGR  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SNP_DATE_OTGR ON MASTER.BILL_POS_SNP
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_DATE_REALIZ  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SNP_DATE_REALIZ ON MASTER.BILL_POS_SNP
(DATE_REALIZ)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_OWNERSHIP_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SNP_OWNERSHIP_FK_I ON MASTER.BILL_POS_SNP
(OWNERSHIP_ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILL_POS_SNP_PK ON MASTER.BILL_POS_SNP
(NOM_DOK, BILL_POS_SNP_ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_SNP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SNP_PROD_FK_I ON MASTER.BILL_POS_SNP
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILL_POS_SUMMA_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_SUMMA_I ON MASTER.BILL_POS
(SUMMA)
TABLESPACE USERSINDX;


--
-- DOG_GOSPROG_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_GOSPROG_FK_I ON MASTER.KLS_DOG
(GOSPROG_ID)
TABLESPACE USERSINDX;


--
-- DOG_GROUPDOG_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_GROUPDOG_FK_I ON MASTER.KLS_DOG
(GROUPDOG_ID)
TABLESPACE USERSINDX;


--
-- DOG_INSURE_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_INSURE_FK_I ON MASTER.KLS_DOG
(INSURE_ID)
TABLESPACE USERSINDX;


--
-- DOG_LUKDOG_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_LUKDOG_FK_I ON MASTER.KLS_DOG
(LUKDOG_ID)
TABLESPACE USERSINDX;


--
-- DOG_MAINDOG_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_MAINDOG_FK_I ON MASTER.KLS_DOG
(MAINDOG_ID)
TABLESPACE USERSINDX;


--
-- DOG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOG_PK ON MASTER.KLS_DOG
(ID)
TABLESPACE USERSINDX;


--
-- DOG_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_PREDPR_FK_I ON MASTER.KLS_DOG
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- DOG_SHORT_NUMBER  (Index) 
--
CREATE UNIQUE INDEX MASTER.DOG_SHORT_NUMBER ON MASTER.KLS_DOG
(SHORT_NUMBER)
TABLESPACE USERSINDX;


--
-- DOG_USL_OPL_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_USL_OPL_FK_I ON MASTER.KLS_DOG
(USL_OPL_ID)
TABLESPACE USERSINDX;


--
-- DOG_VIDDOG_FK_I  (Index) 
--
CREATE INDEX MASTER.DOG_VIDDOG_FK_I ON MASTER.KLS_DOG
(VIDDOG_ID)
TABLESPACE USERSINDX;


--
-- FIL_ORG_FILIAL_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_ORG_FILIAL_FK_I ON MASTER.LOAD_FIL_ORG
(FILIAL_ID)
TABLESPACE USERSINDX;


--
-- FIL_ORG_FIL_ORG_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_ORG_FIL_ORG_AK_UK ON MASTER.LOAD_FIL_ORG
(FILIAL_ID, TAG)
TABLESPACE USERSINDX;


--
-- FIL_ORG_ORG_KIND_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_ORG_ORG_KIND_FK_I ON MASTER.LOAD_FIL_ORG
(ORG_KIND_ID)
TABLESPACE USERSINDX;


--
-- FIL_ORG_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_ORG_ORG_STRU_FK_I ON MASTER.LOAD_FIL_ORG
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- FIL_ORG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_ORG_PK ON MASTER.LOAD_FIL_ORG
(ID)
TABLESPACE USERSINDX;


--
-- FIL_ORG_TAG_I  (Index) 
--
CREATE INDEX MASTER.FIL_ORG_TAG_I ON MASTER.LOAD_FIL_ORG
(TAG)
TABLESPACE USERSINDX;


--
-- FIL_PERIOD_FIL_PERIOD_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_PERIOD_FIL_PERIOD_AK_UK ON MASTER.LOAD_FIL_PERIODS
(FILIAL_ID, DATE_REPORT, REP_TYPE_ID)
TABLESPACE USERSINDX;


--
-- FIL_PERIOD_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_PERIOD_ORG_STRU_FK_I ON MASTER.LOAD_FIL_PERIODS
(FILIAL_ID)
TABLESPACE USERSINDX;


--
-- FIL_PERIOD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_PERIOD_PK ON MASTER.LOAD_FIL_PERIODS
(ID, FILIAL_ID, REP_TYPE_ID)
TABLESPACE USERSINDX;


--
-- FIL_PERIOD_REP_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_PERIOD_REP_TYPE_FK_I ON MASTER.LOAD_FIL_PERIODS
(REP_TYPE_ID)
TABLESPACE USERSINDX;


--
-- FIL_REALIZ_DATE_OPER_I  (Index) 
--
CREATE INDEX MASTER.FIL_REALIZ_DATE_OPER_I ON MASTER.LOAD_FIL_REALIZ
(DATE_OPER)
TABLESPACE USERSINDX;


--
-- FIL_REALIZ_FIL_ORG_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_REALIZ_FIL_ORG_FK_I ON MASTER.LOAD_FIL_REALIZ
(FIL_ORG_ID)
TABLESPACE USERSINDX;


--
-- FIL_REALIZ_FIL_PERIOD_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_REALIZ_FIL_PERIOD_FK_I ON MASTER.LOAD_FIL_REALIZ
(FIL_PERIOD_ID, FILIAL_ID, REP_TYPE_ID)
TABLESPACE USERSINDX;


--
-- FIL_REALIZ_FIL_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_REALIZ_FIL_PROD_FK_I ON MASTER.LOAD_FIL_REALIZ
(FIL_PROD_ID)
TABLESPACE USERSINDX;


--
-- FIL_REALIZ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.FIL_REALIZ_PK ON MASTER.LOAD_FIL_REALIZ
(ID)
TABLESPACE USERSINDX;


--
-- FIL_REALIZ_TYPE_OPER_FK_I  (Index) 
--
CREATE INDEX MASTER.FIL_REALIZ_TYPE_OPER_FK_I ON MASTER.LOAD_FIL_REALIZ
(TYPE_OPER_ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_DATE_PLAN_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_DATE_PLAN_I ON MASTER.GD_PLAN
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- GD_PLAN_FROM_DATE_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_FROM_DATE_I ON MASTER.GD_PLAN
(FROM_DATE)
TABLESPACE USERSINDX;


--
-- GD_PLAN_GD_PLAN_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_PLAN_GD_PLAN_AK_UK ON MASTER.GD_PLAN
(TIP_PLAN, DATE_PLAN, GROTP_ID, NAPR_MOS_ID, PROD_ID_NPR, 
LOAD_TYPE_ID, VAGOWNER_ID, STANOTP_ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_LOAD_TYPE_FK_I ON MASTER.GD_PLAN
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_NAPR_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_NAPR_MOS_FK_I ON MASTER.GD_PLAN
(NAPR_MOS_ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_PLAN_PK ON MASTER.GD_PLAN
(ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_PREDPR_FK_I ON MASTER.GD_PLAN
(GROTP_ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_PROD_FK_I ON MASTER.GD_PLAN
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- GD_PLAN_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_STAN_FK_I ON MASTER.GD_PLAN
(STANOTP_ID)
TABLESPACE USERSINDX;


--
-- GD_PLAN_TIP_DATE_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_TIP_DATE_I ON MASTER.GD_PLAN
(TIP_PLAN)
TABLESPACE USERSINDX;


--
-- GD_PLAN_TO_DATE_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_TO_DATE_I ON MASTER.GD_PLAN
(TO_DATE)
TABLESPACE USERSINDX;


--
-- GD_PLAN_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_PLAN_VAGOWNER_FK_I ON MASTER.GD_PLAN
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_EXPED_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_EXPED_FK_I ON MASTER.GD_RAZN
(EXPED_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_GD_GROUP_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_GD_GROUP_FK_I ON MASTER.GD_RAZN
(GD_GROUP_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_GD_OTPR_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_GD_OTPR_FK_I ON MASTER.GD_RAZN
(GD_OTPR_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_GD_PODACH_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_GD_PODACH_FK_I ON MASTER.GD_RAZN
(GD_PODACH_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_GD_SOOB_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_GD_SOOB_FK_I ON MASTER.GD_RAZN
(GD_SOOB_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_LOAD_TYPE_FK_I ON MASTER.GD_RAZN
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_NAPR_MOS_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_NAPR_MOS_FK_I ON MASTER.GD_RAZN
(NAPR_MOS_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_RAZN_PK ON MASTER.GD_RAZN
(ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_GD_PRINVAG_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_GD_PRINVAG_FK_I ON MASTER.GD_RAZN_POS
(GD_PRINVAG_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_GD_RAZN_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_GD_RAZN_FK_I ON MASTER.GD_RAZN_POS
(GD_RAZN_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_GD_VAGTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_GD_VAGTYPE_FK_I ON MASTER.GD_RAZN_POS
(GD_VAGTYPE_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_RAZNPOS_PK ON MASTER.GD_RAZN_POS
(ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_POLUCH_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_POLUCH_FK_I ON MASTER.GD_RAZN_POS
(POLUCH_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_PROD_FK_I ON MASTER.GD_RAZN_POS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_STAN_FK_I ON MASTER.GD_RAZN_POS
(STAN_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_VAGOWNER_FK_I ON MASTER.GD_RAZN_POS
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_VETKA_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_VETKA_FK_I ON MASTER.GD_RAZN_POS
(VETKA_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZNPOS_VID_OTPR_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZNPOS_VID_OTPR_FK_I ON MASTER.GD_RAZN_POS
(VID_OTPR_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_STAN_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_STAN_OTP_FK_I ON MASTER.GD_RAZN
(STAN_OTP_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_TEX_PD_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_TEX_PD_FK_I ON MASTER.GD_RAZN
(TEX_PD_ID, GROTP_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_TRANSPORTER_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_TRANSPORTER_FK_I ON MASTER.GD_RAZN
(TRANSPORTER_ID)
TABLESPACE USERSINDX;


--
-- GD_RAZN_VETKA_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RAZN_VETKA_OTP_FK_I ON MASTER.GD_RAZN
(VETKA_OTP_ID)
TABLESPACE USERSINDX;


--
-- IN_WAY_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.IN_WAY_ORG_STRU_FK_I ON MASTER.AZC_GOOD_IN_WAY
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- IN_WAY_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.IN_WAY_PK ON MASTER.AZC_GOOD_IN_WAY
(ID)
TABLESPACE USERSINDX;


--
-- IN_WAY_PLACE_SEND_FK_I  (Index) 
--
CREATE INDEX MASTER.IN_WAY_PLACE_SEND_FK_I ON MASTER.AZC_GOOD_IN_WAY
(PLACE_SEND_ID)
TABLESPACE USERSINDX;


--
-- IN_WAY_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.IN_WAY_PREDPR_FK_I ON MASTER.AZC_GOOD_IN_WAY
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- IN_WAY_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.IN_WAY_PROD_FK_I ON MASTER.AZC_GOOD_IN_WAY
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- KLS_DOG_MAIN_AK  (Index) 
--
CREATE INDEX MASTER.KLS_DOG_MAIN_AK ON MASTER.KLS_DOG_MAIN
(FROM_DATE, IS_AGENT)
TABLESPACE USERSINDX;


--
-- KLS_DOG_MAIN_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.KLS_DOG_MAIN_DOG_FK_I ON MASTER.KLS_DOG_MAIN
(DOG_ID)
TABLESPACE USERSINDX;


--
-- LFR_LOAD_I  (Index) 
--
CREATE INDEX MASTER.LFR_LOAD_I ON MASTER.LOAD_FIL_REALIZ
(REP_TYPE_ID, FIL_PERIOD_ID, DATE_OPER, FILIAL_ID, FIL_ORG_ID, 
FIL_PROD_ID, TYPE_OPER_ID)
TABLESPACE USERSINDX;


--
-- OPERATION_DATE_OPER  (Index) 
--
CREATE INDEX MASTER.OPERATION_DATE_OPER ON MASTER.AZC_OPERATION
(DATE_OPER)
TABLESPACE USERSINDX;


--
-- OPERATION_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.OPERATION_ORG_STRU_FK_I ON MASTER.AZC_OPERATION
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- OPERATION_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OPERATION_PK ON MASTER.AZC_OPERATION
(ID)
TABLESPACE USERSINDX;


--
-- OPERATION_PLACE_SEND_FK_I  (Index) 
--
CREATE INDEX MASTER.OPERATION_PLACE_SEND_FK_I ON MASTER.AZC_OPERATION
(PLACE_SEND_ID)
TABLESPACE USERSINDX;


--
-- OPERATION_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.OPERATION_PREDPR_FK_I ON MASTER.AZC_OPERATION
(SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- OPERATION_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.OPERATION_PROD_FK_I ON MASTER.AZC_OPERATION
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- OPERATION_TYPE_OPER_FK_I  (Index) 
--
CREATE INDEX MASTER.OPERATION_TYPE_OPER_FK_I ON MASTER.AZC_OPERATION
(TYPE_OPER_ID)
TABLESPACE USERSINDX;


--
-- ORG_REL_KIND_RELA_FK_I  (Index) 
--
CREATE INDEX MASTER.ORG_REL_KIND_RELA_FK_I ON MASTER.ORG_RELATIONS
(KIND_RELA_ID)
TABLESPACE USERSINDX;


--
-- ORG_REL_ORG_STRU_1_FK_I  (Index) 
--
CREATE INDEX MASTER.ORG_REL_ORG_STRU_1_FK_I ON MASTER.ORG_RELATIONS
(ORG_STRU_1_ID)
TABLESPACE USERSINDX;


--
-- ORG_REL_ORG_STRU_2_FK_I  (Index) 
--
CREATE INDEX MASTER.ORG_REL_ORG_STRU_2_FK_I ON MASTER.ORG_RELATIONS
(ORG_STRU_2_ID)
TABLESPACE USERSINDX;


--
-- ORG_REL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.ORG_REL_PK ON MASTER.ORG_RELATIONS
(ORG_STRU_1_ID, ORG_STRU_2_ID)
TABLESPACE USERSINDX;


--
-- PAYMENTS_BANKS_FK_I  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_BANKS_FK_I ON MASTER.PAYMENTS
(BANK_ID)
TABLESPACE USERSINDX;


--
-- PAYMENTS_DATE_POST_I  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_DATE_POST_I ON MASTER.PAYMENTS
(DATE_POST)
TABLESPACE USERSINDX;


--
-- PAYMENTS_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_DOG_FK_I ON MASTER.PAYMENTS
(DOG_ID)
TABLESPACE USERSINDX;


--
-- PAYMENTS_ON_BILLS_DATE_I  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_ON_BILLS_DATE_I ON MASTER.PAYMENTS_ON_BILLS
(DATE_REALIZ)
TABLESPACE USERSINDX;


--
-- PAYMENTS_ON_BILLS_FK1  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_ON_BILLS_FK1 ON MASTER.PAYMENTS_ON_BILLS
(BILL_POS_ID, NOM_DOK)
TABLESPACE USERSINDX;


--
-- PAYMENTS_ON_BILLS_NOM_DOK_I  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_ON_BILLS_NOM_DOK_I ON MASTER.PAYMENTS_ON_BILLS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- PAYMENTS_ON_BILLS_PAY_ID  (Index) 
--
CREATE INDEX MASTER.PAYMENTS_ON_BILLS_PAY_ID ON MASTER.PAYMENTS_ON_BILLS
(PAYMENTS_ID)
TABLESPACE USERSINDX;


--
-- PAYMENTSTO_BILLS_NOM_DOK_I  (Index) 
--
CREATE INDEX MASTER.PAYMENTSTO_BILLS_NOM_DOK_I ON MASTER.PAYMENTS_TO_BILLS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- PK_KLS_DOG_MAIN  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_KLS_DOG_MAIN ON MASTER.KLS_DOG_MAIN
(ID)
TABLESPACE USERSINDX;


--
-- PK_PAYMENTS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PAYMENTS ON MASTER.PAYMENTS
(ID)
TABLESPACE USERSINDX;


--
-- PK_PAYMENTS_DEST  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PAYMENTS_DEST ON MASTER.PAYMENTS_PROD
(PAYMENTS_ID, PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PK_PAYMENTS_ON_BILLS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PAYMENTS_ON_BILLS ON MASTER.PAYMENTS_ON_BILLS
(ID)
TABLESPACE USERSINDX;


--
-- PK_PAYMENTS_TO_BILLS  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_PAYMENTS_TO_BILLS ON MASTER.PAYMENTS_TO_BILLS
(PAYMENTS_ID, NOM_DOK)
TABLESPACE USERSINDX;


--
-- PLAN_BROTHER_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_BROTHER_FK_I ON MASTER.KLS_PLAN
(BROTHER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_PER_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_PER_PK ON MASTER.PLAN_PERIODS
(PLAN_ID, ID)
TABLESPACE USERSINDX;


--
-- PLAN_PER_PLAN_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_PER_PLAN_FK_I ON MASTER.PLAN_PERIODS
(PLAN_ID)
TABLESPACE USERSINDX;


--
-- PLAN_PER_PLAN_PER_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_PER_PLAN_PER_AK_UK ON MASTER.PLAN_PERIODS
(PLAN_ID, DATE_PLAN, BEGIN_DATE)
TABLESPACE USERSINDX;


--
-- PLAN_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_PK ON MASTER.KLS_PLAN
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_PLAN_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_PLAN_AK_UK ON MASTER.KLS_PLAN
(PLAN_KIND_ID, PLAN_NAME)
TABLESPACE USERSINDX;


--
-- PLAN_PLAN_KIND_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_PLAN_KIND_FK_I ON MASTER.KLS_PLAN
(PLAN_KIND_ID)
TABLESPACE USERSINDX;


--
-- PLAN_PLAN_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_PLAN_OWNER_FK_I ON MASTER.KLS_PLAN
(PLAN_OWNER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_CAT_CEN_FK_I ON MASTER.PLAN_POST
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_DOG_FK_I ON MASTER.PLAN_POST
(DOG_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_HIST_NUM_IZM_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_HIST_NUM_IZM_I ON MASTER.PLAN_POST_HIST
(NUM_IZM)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PAYFORM_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_PAYFORM_FK_I ON MASTER.PLAN_POST
(PAYFORM_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_POST_PK ON MASTER.PLAN_POST
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PLAN_PER_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_PLAN_PER_FK_I ON MASTER.PLAN_POST
(PLAN_ID, PLAN_PER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PLANPOST_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_POST_PLANPOST_AK_UK ON MASTER.PLAN_POST
(PLAN_PER_ID, PLAN_ID, PROD_ID_NPR, DOG_ID, PLANSTRU_ID, 
PAYFORM_ID, REFINERY_ID, ORGSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_PLANSTRU_FK_I ON MASTER.PLAN_POST
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PLAN_POST_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_POST_PROD_FK_I ON MASTER.PLAN_POST
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PLAN_RELA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_RELA_PK ON MASTER.PLAN_STRU_RELATIONS
(PLAN_FROM_ID, PLANSTRU_FROM_ID, PLAN_TO_ID, PLANSTRU_TO_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RELA_PLAN_FROM_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RELA_PLAN_FROM_FK_I ON MASTER.PLAN_STRU_RELATIONS
(PLAN_FROM_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RELA_PLANSTRU_FROM_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RELA_PLANSTRU_FROM_FK_I ON MASTER.PLAN_STRU_RELATIONS
(PLANSTRU_FROM_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RELA_PLANSTRU_TO_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RELA_PLANSTRU_TO_FK_I ON MASTER.PLAN_STRU_RELATIONS
(PLANSTRU_TO_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RELA_PLAN_TO_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RELA_PLAN_TO_FK_I ON MASTER.PLAN_STRU_RELATIONS
(PLAN_TO_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_HIST_NUM_IZM_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RESU_HIST_NUM_IZM_I ON MASTER.PLAN_RESU_HIST
(NUM_IZM)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_RESU_PK ON MASTER.PLAN_RESU
(ID)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_PLAN_PER_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RESU_PLAN_PER_FK_I ON MASTER.PLAN_RESU
(PLAN_ID, PLAN_PER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_PLAN_RESU_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PLAN_RESU_PLAN_RESU_AK_UK ON MASTER.PLAN_RESU
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, REFINER_ID, SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RESU_PROD_FK_I ON MASTER.PLAN_RESU
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_REFINER_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RESU_REFINER_FK_I ON MASTER.PLAN_RESU
(REFINER_ID)
TABLESPACE USERSINDX;


--
-- PLAN_RESU_SOBSTV_FK_I  (Index) 
--
CREATE INDEX MASTER.PLAN_RESU_SOBSTV_FK_I ON MASTER.PLAN_RESU
(SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_PST_HST_CAT_CEN_FK_I ON MASTER.PLAN_POST_HIST
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_PST_HST_DOG_FK_I ON MASTER.PLAN_POST_HIST
(DOG_ID)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_PAYFORM_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_PST_HST_PAYFORM_FK_I ON MASTER.PLAN_POST_HIST
(PAYFORM_ID)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PL_PST_HST_PK ON MASTER.PLAN_POST_HIST
(ID, NUM_IZM)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_PLAN_PER_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_PST_HST_PLAN_PER_FK_I ON MASTER.PLAN_POST_HIST
(PLAN_ID, PLAN_PER_ID)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_PST_HST_PLANSTRU_FK_I ON MASTER.PLAN_POST_HIST
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- PL_PST_HST_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_PST_HST_PROD_FK_I ON MASTER.PLAN_POST_HIST
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PL_RES_HST_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.PL_RES_HST_PK ON MASTER.PLAN_RESU_HIST
(ID, NUM_IZM)
TABLESPACE USERSINDX;


--
-- PL_RES_HST_PLAN_PER_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_RES_HST_PLAN_PER_FK_I ON MASTER.PLAN_RESU_HIST
(PLAN_ID, PLAN_PER_ID)
TABLESPACE USERSINDX;


--
-- PL_RES_HST_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_RES_HST_PROD_FK_I ON MASTER.PLAN_RESU_HIST
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- PL_RES_HST_REFINER_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_RES_HST_REFINER_FK_I ON MASTER.PLAN_RESU_HIST
(REFINER_ID)
TABLESPACE USERSINDX;


--
-- PL_RES_HST_SOBSTV_FK_I  (Index) 
--
CREATE INDEX MASTER.PL_RES_HST_SOBSTV_FK_I ON MASTER.PLAN_RESU_HIST
(SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- REL_LIKARD_ORG_STRU_FK_I  (Index) 
--
CREATE INDEX MASTER.REL_LIKARD_ORG_STRU_FK_I ON MASTER.AZC_REALIZ_LIKARD
(ORG_STRU_ID)
TABLESPACE USERSINDX;


--
-- REL_LIKARD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.REL_LIKARD_PK ON MASTER.AZC_REALIZ_LIKARD
(ID)
TABLESPACE USERSINDX;


--
-- REL_LIKARD_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.REL_LIKARD_PREDPR_FK_I ON MASTER.AZC_REALIZ_LIKARD
(SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- REL_LIKARD_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.REL_LIKARD_PROD_FK_I ON MASTER.AZC_REALIZ_LIKARD
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- SPECIF_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_DOG_FK_I ON MASTER.SPECIF
(DOG_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_MONTH_ALL_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_MONTH_ALL_I ON MASTER.SPECIF
(MONTH_ALL_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SPECIF_PK ON MASTER.SPECIF
(ID)
TABLESPACE USERSINDX;


--
-- SPECIF_POLUCH_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_POLUCH_FK_I ON MASTER.SPECIF
(POLUCH_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_POTREB_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_POTREB_FK_I ON MASTER.SPECIF
(POTREB_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_PROD_FK_I ON MASTER.SPECIF
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- SPECIF_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_STAN_FK_I ON MASTER.SPECIF
(STAN_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_STANOTP_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_STANOTP_FK_I ON MASTER.SPECIF
(STANOTP_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_VETKA_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_VETKA_FK_I ON MASTER.SPECIF
(VETKA_ID)
TABLESPACE USERSINDX;


--
-- SPECIF_VID_OTGR_FK_I  (Index) 
--
CREATE INDEX MASTER.SPECIF_VID_OTGR_FK_I ON MASTER.SPECIF
(LOAD_ABBR)
TABLESPACE USERSINDX;


--
-- USL_DOG_AK  (Index) 
--
CREATE UNIQUE INDEX MASTER.USL_DOG_AK ON MASTER.USL_DOG
(ID)
TABLESPACE USERSINDX;


--
-- USL_DOG_AK2  (Index) 
--
CREATE INDEX MASTER.USL_DOG_AK2 ON MASTER.USL_DOG
(ISU_KOD_DOG_TEST)
TABLESPACE USERSINDX;


--
-- USL_DOG_CAT_CEN_FK_I  (Index) 
--
CREATE INDEX MASTER.USL_DOG_CAT_CEN_FK_I ON MASTER.USL_DOG
(CAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- USL_DOG_CAT_CEN_FK_II  (Index) 
--
CREATE INDEX MASTER.USL_DOG_CAT_CEN_FK_II ON MASTER.USL_DOG
(NPOCAT_CEN_ID)
TABLESPACE USERSINDX;


--
-- USL_DOG_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.USL_DOG_DOG_FK_I ON MASTER.USL_DOG
(DOG_ID)
TABLESPACE USERSINDX;


--
-- USL_DOG_PAYDELAY_FK_I  (Index) 
--
CREATE INDEX MASTER.USL_DOG_PAYDELAY_FK_I ON MASTER.USL_DOG
(PAYDELAY_ID)
TABLESPACE USERSINDX;


--
-- USL_DOG_PAYFORM_FK_I  (Index) 
--
CREATE INDEX MASTER.USL_DOG_PAYFORM_FK_I ON MASTER.USL_DOG
(PAYFORM_ID)
TABLESPACE USERSINDX;


--
-- USL_DOG_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.USL_DOG_PK ON MASTER.USL_DOG
(DOG_ID, USL_NUMBER)
TABLESPACE USERSINDX;


--
-- USL_DOG_VID_USL_FK_I  (Index) 
--
CREATE INDEX MASTER.USL_DOG_VID_USL_FK_I ON MASTER.USL_DOG
(VID_USL_ID)
TABLESPACE USERSINDX;


--
-- AZC_TEST  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.Azc_Test AS

 FUNCTION GET_AZC_OST_VES_TEST(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;
 FUNCTION GET_AZC_OST_VOL_TEST(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;
  -- Остаток объема по АЗС, продукту, собственнику на определенную дату

END;

/

--
-- FOR_AZC  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Azc AS

  -- Остаток веса по АЗС, продукту, собственнику на определенную дату
  FUNCTION GET_AZC_OST_VES(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;
  FUNCTION GET_AZC_OST_VES_ex(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;

  -- Остаток объема по АЗС, продукту, собственнику на определенную дату
  FUNCTION GET_AZC_OST_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE,FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;
  FUNCTION GET_AZC_OST_VOL_ex(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE,FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;

  -- Остаток веса на хранении по АЗС, продукту, собственнику на определенную дату
  FUNCTION GET_AZC_HRAN_VES(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;

  -- Остаток объема на хранении по АЗС, продукту, собственнику на определенную дату
  FUNCTION GET_AZC_HRAN_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER;
  -- Остаток объема продукта по объекту по всем собственникам
  FUNCTION GET_AZC_OST_VOL_all(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER;
  -- Остаток веса продукта по объекту по всем собственникам
  FUNCTION GET_AZC_OST_VES_all(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER;
  -- Остаток весь по продукту и собственнику
  FUNCTION get_azc_ost_allv(pPROD_ID VARCHAR2, pID_KIND_ORG NUMBER, pID_SOBSTV NUMBER, pTYPE VARCHAR2,  pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER;
  -- вывод остатов объетка по продукту 
  FUNCTION get_vol_rez(pID_ORG VARCHAR2, pID_PROD NUMBER, pTYPE VARCHAR2 DEFAULT 'DEAD', pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;
  
  -- функция вывода веса последней записи по собственнику,объекту, продукту
  FUNCTION get_ves_last(pID_SOBSTV NUMBER, pID_ORG NUMBER, pID_PROD NUMBER,pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;
  
  -- процедура проставление остатков на месяц
  -- date_from - дата из меяца остатков , date_to  -  дата из месяца, куда остатки будт проставлены  
  PROCEDURE for_rec_ostatki(DATE_FROM DATE, DATE_TO DATE);
  
  PROCEDURE for_rec_catalog(date_to DATE);


 --Функция возвращает сумму по весу за данный период (АЗС, ПРОДУКТ, ОПЕРАЦИЯ,ДАТА НАЧАЛА, ДАТА КОНЦА) 
  FUNCTION GET_AZC_WEEK_PARUS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pID_OPERATION NUMBER,pDateFirst DATE, pDateLast DATE DEFAULT SYSDATE) RETURN NUMBER;
  
 --перенос сумм по операции и продукту 
  PROCEDURE for_week_parus (DATE_FROM VARCHAR2, DATE_TO VARCHAR2);
-- перенос остатков с приведением к общему продукту
   PROCEDURE for_rec_ostatki_rename(DATE_FROM DATE, DATE_TO DATE);
  
    
END;

/

--
-- FOR_PLANPOST  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_PLANPOST AS
  PLAN_PERIODS_ID PLAN_PERIODS.ID%TYPE;

  -- Открыть плановый период
  -- возвращает PLAN_PERIODS.ID
  FUNCTION NewPeriod (PlanID NUMBER, DatePlan DATE, BeginDate DATE, EndDate DATE) RETURN NUMBER;

  -- Изменить плановый период
  PROCEDURE ChangePeriod (PlanPerID NUMBER, DatePlan DATE, BeginDate DATE, EndDate DATE);

  -- Удалить плановый период
  PROCEDURE DeletePeriod (PlanPerID NUMBER);

  -- Копирование плана
  -- возвращает PLAN_PERIODS.ID
  FUNCTION CopyPlan (PlanPerIdFrom NUMBER, PlanIdTo NUMBER) RETURN NUMBER;

  -- Изменение плана
  PROCEDURE NewIzm (TableID VARCHAR2 DEFAULT 'POST', PlanPerID NUMBER, NumIzm NUMBER, NumCheck NUMBER);

  -- Заполнение временной таблицы для ввода/редактирования позиции плана
  -- Возвращает уникальное имя временной таблицы
  FUNCTION FillTempPayForms(IsAdd NUMBER, PlanId NUMBER, PlanPerId NUMBER, ProdId VARCHAR2, PlanStruId NUMBER, DogId NUMBER, RefineryId NUMBER DEFAULT 8, OrgStruId NUMBER DEFAULT NULL) RETURN VARCHAR2;

  -- Заполнение цен во временной таблице
  PROCEDURE FillTempPrices(PlanPerId NUMBER, ProdId VARCHAR2, DogId NUMBER);

  -- Сохранение изменений из временной таблицы в PLAN_POST
  FUNCTION AddPlanPost(EditId NUMBER, PlanId NUMBER, PlanPerId NUMBER, ProdId VARCHAR2, PlanStruId NUMBER, DogId NUMBER, 
                           RefineryId NUMBER, OrgStruId NUMBER, PayFormId NUMBER, Price NUMBER, Ves NUMBER, CatCenId NUMBER, DateCena DATE) RETURN NUMBER;

  -- Очистка временной таблицы
  PROCEDURE ClearTempPayForms(TempTableName VARCHAR2);

  -- Удалить позицию плана
  PROCEDURE DeletePlanPost(EditId NUMBER);

END;
/

--
-- AZC_TEST  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.Azc_Test AS

FUNCTION GET_AZC_OST_VES_TEST(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER,  pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih NUMBER;
  v_rash NUMBER;
  v_num_fil NUMBER;  
  
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT C.ORG_STRU_2_ID, MAX(A.DATE_OPER) INTO v_num_fil,v_lastost 
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B, ORG_RELATIONS C	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.ORG_STRU_ID = C.ORG_STRU_1_ID
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER)
	   GROUP BY C.ORG_STRU_2_ID;
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  IF v_num_fil=31 THEN
  -- ухтинский район 
  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT VES INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
  RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);
  END IF;
  
  -- Приход
  SELECT SUM(A.VES) INTO v_prih 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=1
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  -- Расход
  SELECT SUM(A.VES) INTO v_rash 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=2
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);
  ELSE
  --Филиалы
    SELECT A.VES INTO v_ost FROM AZC_OPERATION A, AZC_TYPE_OPERATION B
	WHERE 
	A.DATE_OPER = v_lastost
	AND A.TYPE_OPER_ID = B.ID
	AND A.ORG_STRU_ID=pORG_STRU_ID
	AND A.PROD_ID_NPR=pPROD_ID_NPR
	AND A.SOBSTV_ID=pSOBSTV_ID
	AND B.KIND_OPER = 0;
	RETURN NVL(V_ost,0);
  END IF;  	   	     	
END;

FUNCTION GET_AZC_OST_VOL_TEST(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER,  pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih NUMBER;
  v_rash NUMBER;
  v_num_fil NUMBER;  
  
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT C.ORG_STRU_2_ID, MAX(A.DATE_OPER) INTO v_num_fil,v_lastost 
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B, ORG_RELATIONS C	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.ORG_STRU_ID = C.ORG_STRU_1_ID
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER)
	   GROUP BY C.ORG_STRU_2_ID;
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  IF v_num_fil=31 THEN
  -- ухтинский район 
  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT VOLUME INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
  RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);
  END IF;
  
  -- Приход
  SELECT SUM(A.VOLUME) INTO v_prih 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=1
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  -- Расход
  SELECT SUM(A.VOLUME) INTO v_rash 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=2
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);
  ELSE
  --Филиалы
    SELECT A.VOLUME INTO v_ost FROM AZC_OPERATION A, AZC_TYPE_OPERATION B
	WHERE 
	A.DATE_OPER = v_lastost
    AND A.ORG_STRU_ID=pORG_STRU_ID
    AND A.PROD_ID_NPR=pPROD_ID_NPR
    AND A.SOBSTV_ID=pSOBSTV_ID
	AND A.TYPE_OPER_ID = B.ID
	AND B.KIND_OPER = 0;
	RETURN NVL(V_ost,0);
  END IF;  	   	     	
END;
END;

/

--
-- FOR_AZC  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Azc AS

FUNCTION GET_AZC_OST_VES(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER,  pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;
  
  IF  v_lastost = pDate_oper OR  v_lastost = pDate_oper-1 THEN
  v_lastost:=v_lastost;
  ELSE
  v_lastost:=TRUNC(v_lastost,'MONTH');
  END IF; 


  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT SUM(VES) INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
    RETURN NVL(v_ost,0);
  END IF;
  
  -- Приход и расход
  v_prih_rash:=0;
  IF v_lastost<=pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VES,2,-A.VES,0)) INTO v_prih_rash 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
  	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
	     AND A.SOBSTV_ID=pSOBSTV_ID
	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2)
	     AND A.DATE_OPER>=v_lastost
	     AND A.DATE_OPER<=pDATE_OPER;
  END IF;   		 

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

FUNCTION GET_AZC_OST_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE,FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;
  IF  v_lastost = pDate_oper  OR  v_lastost = pDate_oper-1 THEN
  v_lastost:=v_lastost;
  ELSE
  v_lastost:=TRUNC(v_lastost,'MONTH');
  END IF; 

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT SUM(VOLUME) INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
    RETURN NVL(v_ost,0);
  END IF;
  
  -- Приход и расход
  v_prih_rash:=0;
  IF v_lastost<=pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VOLUME,2,-A.VOLUME,0)) INTO v_prih_rash 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
       AND (B.KIND_OPER=1 OR B.KIND_OPER=2)
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;
  END IF;	   

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

FUNCTION GET_AZC_HRAN_VES(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE,FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih NUMBER;
  v_rash NUMBER;  
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER)
	   AND B.KIND_OPER=3;
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT VES INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=3
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
  	 RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);
  END IF;

  
  -- Приход
  SELECT SUM(A.VES) INTO v_prih 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=4
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  -- Расход
  SELECT SUM(A.VES) INTO v_rash 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=5
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);	   	     			
END;

FUNCTION GET_AZC_HRAN_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE,FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih NUMBER;
  v_rash NUMBER;  
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER)
	   AND B.KIND_OPER=3;
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT VOLUME INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=3
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
  	 RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);
  END IF;
  
  -- Приход
  SELECT SUM(A.VOLUME) INTO v_prih 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=4
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  -- Расход
  SELECT SUM(A.VOLUME) INTO v_rash 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=5
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;

  RETURN NVL(v_ost,0)+NVL(v_prih,0)-NVL(v_rash,0);	   	     			
END;

FUNCTION GET_AZC_OST_VES_all(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	


  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER)
	   AND B.KIND_OPER=0;
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT SUM(VES) INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  -- Приход - Расход
  v_prih_rash:=0;
  IF v_lastost<pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VES,2,-A.VES,0)) INTO v_prih_rash 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
  	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2) 
	     AND A.DATE_OPER>v_lastost
	     AND A.DATE_OPER<=pDATE_OPER;
  END IF;		 

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

FUNCTION GET_AZC_OST_VOL_ALL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT SUM(VOLUME) INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  -- Приход - Расход
  v_prih_rash:=0;
  IF v_lastost<pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VOLUME,2,-A.VOLUME,0)) INTO v_prih_rash 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
  	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2)
	     AND A.DATE_OPER>v_lastost
	     AND A.DATE_OPER<=pDATE_OPER;
  END IF;		 

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

-- по продукту, типу собственника (АЗС), вес/обхем
FUNCTION get_azc_ost_allv (pPROD_ID VARCHAR2, pID_KIND_ORG NUMBER, pID_SOBSTV NUMBER,pTYPE VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER IS
  v_datefirst DATE;
  v_itog NUMBER;
    
BEGIN
  IF pPROD_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pID_SOBSTV  IS NULL THEN
    RETURN 0;
  END IF;	

  IF pID_KIND_ORG IS NULL THEN
    RETURN 0;
  END IF;	
  
  IF pTYPE NOT IN ('VES', 'VOL') THEN
   RETURN 0;
  END IF;
  
  
SELECT TRUNC (pDATE_OPER, 'MONTH') INTO v_datefirst FROM DUAL;
BEGIN 
	SELECT SUM( DECODE(pTYPE, 'VES', ves, 'VOL', vol, vol)) INTO v_itog FROM 
	(SELECT  A.PROD_ID_NPR,C.ABBR_NPR, A.SOBSTV_ID,e.ID AS ID_KIND_ORG, E.NAME,B.ID,
	For_Azc.GET_AZC_OST_VES(A.ORG_STRU_ID, A.PROD_ID_NPR,A.SOBSTV_ID, pDATE_OPER)  AS VES,
	For_Azc.GET_AZC_OST_VOL(A.ORG_STRU_ID, A.PROD_ID_NPR,A.SOBSTV_ID, pDATE_OPER) AS VOL
	FROM AZC_OPERATION A, ORG_STRUCTURE B, KLS_PROD C, AZC_PROD_GROUP D, KLS_ORG_KIND E
	WHERE A.DATE_OPER >=v_datefirst
	AND A.DATE_OPER <=pDATE_OPER
	AND A.ORG_STRU_ID = B.ID 
	AND C.ID_NPR = A.PROD_ID_NPR
	AND A.PROD_ID_NPR = pPROD_ID 
	AND A.SOBSTV_ID = pID_SOBSTV
	AND B.ORG_KIND_ID = E.ID
	GROUP BY A.ORG_STRU_ID,A.PROD_ID_NPR,C.ABBR_NPR,A.SOBSTV_ID,E.ID,E.NAME,B.ID) JJ
	WHERE ID_KIND_ORG=pID_KIND_ORG
	GROUP BY  id_kind_org, NAME, PROD_ID_NPR,ABBR_NPR;
END;

  RETURN v_itog;   	     			
END; 

FUNCTION get_vol_rez(pID_ORG VARCHAR2, pID_PROD NUMBER, pTYPE VARCHAR2 DEFAULT 'DEAD', pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
v_itog NUMBER;
v_date DATE;
BEGIN
  IF pID_ORG IS NULL THEN
    RETURN 0;
  END IF;	

  IF pID_PROD  IS NULL THEN
    RETURN 0;
  END IF;	

 SELECT MAX(DATEUPLOAD) INTO v_date
 FROM ARC_REZ B
 WHERE 
 B.ORG_STRU_ID = pID_ORG
 AND B.PROD_ID_NPR = pID_PROD
 AND B.DATEUPLOAD<=pDATE;

SELECT SUM (DECODE (pTYPE, 'VOL', VOL, 'DEAD', DEAD_VOL, 'VOL')) INTO v_itog  
FROM ARC_REZ B
WHERE 
B.DATEUPLOAD = v_date
AND B.PROD_ID_NPR = pID_PROD
AND B.ORG_STRU_ID = pID_ORG;
RETURN v_itog;

END;


PROCEDURE for_rec_ostatki (DATE_FROM DATE, DATE_TO DATE)  IS
CURSOR c1 IS
SELECT
For_Azc.GET_AZC_OST_VOL( select_.ORG_STRU_ID,select_.PROD_ID_NPR,select_.SOBSTV_ID, LAST_DAY(DATE_FROM)) AS VOL,
For_Azc.GET_AZC_OST_VES (select_.ORG_STRU_ID,select_.PROD_ID_NPR,select_.SOBSTV_ID, LAST_DAY(DATE_FROM)) AS VES,
select_.PROD_ID_NPR,select_.SOBSTV_ID, select_.ORG_STRU_ID
FROM
(SELECT SOBSTV_ID, ORG_STRU_ID, PROD_ID_NPR FROM AZC_OPERATION WHERE
AZC_OPERATION.DATE_OPER >=	TRUNC (DATE_FROM, 'MONTH')
AND AZC_OPERATION.DATE_OPER <= LAST_DAY(DATE_FROM)
GROUP BY SOBSTV_ID, ORG_STRU_ID, PROD_ID_NPR) select_,
ORG_RELATIONS B
WHERE 
B.ORG_STRU_1_ID = select_.org_stru_id
AND B.ORG_STRU_2_ID = 31
ORDER BY select_.SOBSTV_ID, select_.ORG_STRU_ID,select_.PROD_ID_NPR;
VOLUME_ AZC_OPERATION.VOLUME%TYPE;
VES_ AZC_OPERATION.VES%TYPE;
PROD_ID_NPR_  AZC_OPERATION.PROD_ID_NPR%TYPE;
SOBSTV_ID_  AZC_OPERATION.SOBSTV_ID%TYPE;
ORG_STRU_ID_  AZC_OPERATION.ORG_STRU_ID%TYPE;
COUNT_VAR NUMBER;
BEGIN
OPEN c1;
LOOP
FETCH c1 INTO VOLUME_ ,VES_,PROD_ID_NPR_ ,SOBSTV_ID_,ORG_STRU_ID_;
EXIT WHEN c1%NOTFOUND;
SELECT COUNT (A.ID) INTO COUNT_VAR 
FROM AZC_OPERATION A WHERE 
A.SOBSTV_ID = SOBSTV_ID_
AND A.PROD_ID_NPR = PROD_ID_NPR_
AND A.ORG_STRU_ID = ORG_STRU_ID_
AND A.TYPE_OPER_ID = 3
AND A.DATE_INTO>=TRUNC(SYSDATE, 'MONTH');
IF COUNT_VAR<1 THEN 
INSERT  INTO AZC_OPERATION (DATE_OPER, VOLUME, VES, TYPE_OPER_ID,PROD_ID_NPR, SOBSTV_ID, ORG_STRU_ID, PLACE_SEND_ID) VALUES
( TRUNC(DATE_TO, 'MONTH'), VOLUME_ ,VES_, 3 ,PROD_ID_NPR_ ,SOBSTV_ID_, ORG_STRU_ID_, 1);
COMMIT;
END IF;
END LOOP;
CLOSE c1;
END for_rec_ostatki ;


FUNCTION get_ves_last(pID_SOBSTV NUMBER, pID_ORG NUMBER, pID_PROD NUMBER,pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
v_datefirst DATE;
v_lastdate DATE;
v_ves NUMBER;
BEGIN

  IF pID_SOBSTV IS NULL THEN
    RETURN 0;
  END IF;	

  IF pID_ORG  IS NULL THEN
    RETURN 0;
  END IF;
  
  IF pID_PROD  IS NULL THEN
    RETURN 0;
  END IF;
  
  SELECT TRUNC (pDATE, 'MONTH') INTO v_datefirst FROM DUAL;
 
  SELECT MAX(A.DATE_OPER) INTO v_lastdate
	   FROM AZC_OPERATION A	
	   WHERE A.ORG_STRU_ID=pID_ORG
	   AND A.PROD_ID_NPR=pID_PROD
	   AND A.SOBSTV_ID=pID_SOBSTV
	   AND A.DATE_OPER>=v_datefirst
	   AND A.DATE_OPER<=pDate;
	   
  SELECT A.VES INTO v_ves
    FROM AZC_OPERATION A
	WHERE A.ORG_STRU_ID=pID_ORG
	   AND A.PROD_ID_NPR=pID_PROD
	   AND A.SOBSTV_ID=pID_SOBSTV
	   AND A.DATE_OPER = v_lastdate;

RETURN v_ves;
  
END;

PROCEDURE for_rec_catalog (DATE_TO DATE)  IS
CURSOR c1 IS SELECT A.IS_ROOT,a.ORG_STRU_1_ID  FROM ORG_RELATIONS A;
IS_NUM_ NUMBER;
id_ ORG_RELATIONS.ORG_STRU_1_ID%TYPE;
is_root NUMBER;
BEGIN
OPEN c1;
LOOP
FETCH c1 INTO is_root, Id_;
EXIT WHEN c1%NOTFOUND;
SELECT (COUNT (B.ORG_STRU_1_ID)) INTO IS_NUM_ FROM ORG_RELATIONS B 
WHERE b.ORG_STRU_2_ID=Id_;
UPDATE ORG_RELATIONS SET is_root=DECODE(is_num_,0,0,1)
WHERE ORG_RELATIONS.ORG_STRU_1_ID=id_;
END LOOP;
COMMIT;
CLOSE c1;
END for_rec_catalog;


FUNCTION GET_AZC_WEEK_PARUS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pID_OPERATION NUMBER,pDateFirst DATE, pDateLast DATE DEFAULT SYSDATE) RETURN NUMBER IS
  v_ves NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pID_OPERATION IS NULL THEN
    RETURN 0;
 END IF;
	
  IF pDateFirst IS NULL THEN
    RETURN 0;
  END IF;	

SELECT  SUM (A.VES) INTO v_ves  
FROM AZC_OPERATION A 
WHERE
A.DATE_OPER>= pDateFirst
AND A.DATE_OPER<=PDateLast
AND A.PROD_ID_NPR = pPROD_ID_NPR
AND A.TYPE_OPER_ID = pID_OPERATION
AND a.ORG_STRU_ID = pORG_STRU_ID;
IF v_ves IS NULL 
THEN v_ves:=0;
END IF;
RETURN v_ves;	   	     			
END;

-----
PROCEDURE for_week_parus (DATE_FROM VARCHAR2, DATE_TO VARCHAR2)  IS

vDATE_FROM DATE;
vDATE_TO DATE;

CURSOR c1 IS 
SELECT A.ORG_STRU_ID,C.GROUP_KIND_ID ,A.PROD_ID_NPR
FROM AZC_OPERATION A, ORG_STRUCTURE B , KLS_ORG_KIND C
WHERE 
A.date_oper<=vDATE_TO
AND A.date_oper>=vDATE_FROM
AND A.ORG_STRU_ID = B.ID
AND B.ORG_KIND_ID = C.ID
GROUP BY A.ORG_STRU_ID,C.GROUP_KIND_ID,A.PROD_ID_NPR;
--===========================
c_org_stru_id AZC_OPERATION.ORG_STRU_ID%TYPE;
c_prod_id_npr AZC_OPERATION.PROD_ID_NPR%TYPE;
c_org_kind_id ORG_STRUCTURE.ORG_KIND_ID%TYPE;
ostatok_ AZC_OPERATION.VES%TYPE;
q_realiz_AZC_sum NUMERIC;
q_realiz_opt_sum NUMERIC;
q_realiz NUMERIC;
ostatok NUMERIC;
BEGIN

vDATE_TO:=TO_DATE(DATE_TO,'dd.mm.yyyy');
vDATE_FROM:=TO_DATE(DATE_FROM,'dd.mm.yyyy');
 
DELETE FROM AZC_WEEK_PARUS;
COMMIT;
q_realiz_opt_sum:=0;
q_realiz_azc_sum:=0;
OPEN c1;
LOOP
FETCH c1 INTO c_org_stru_id , c_org_kind_id, c_prod_id_npr;
EXIT WHEN c1%NOTFOUND;
-- остатки
SELECT For_Azc.GET_AZC_OST_VES( c_org_stru_id, c_prod_id_npr,1,vDATE_TO+1) INTO ostatok FROM dual;
--реализация в разрезе АЗС
IF c_org_kind_id = 2 THEN
SELECT For_Azc.GET_AZC_WEEK_PARUS(c_org_stru_id, c_prod_id_npr, 1, vDATE_FROM, vDATE_TO) INTO q_realiz FROM dual;
q_realiz_AZC_sum:=q_realiz_AZC_sum+q_realiz;
END IF;
-------------------------
--реализация в разрезе оптовых поставок
IF c_org_kind_id <> 2 THEN
--SELECT For_Azc.GET_AZC_WEEK_PARUS(c_org_stru_id, c_prod_id_npr, 4, vDATE_FROM, vDATE_TO) INTO q_realiz FROM dual;
--q_realiz_opt_sum:=q_realiz+q_realiz_opt_sum;
SELECT For_Azc.GET_AZC_WEEK_PARUS(c_org_stru_id, c_prod_id_npr, 1, vDATE_FROM, vDATE_TO) INTO q_realiz FROM dual;
q_realiz_opt_sum:=q_realiz+q_realiz_opt_sum;
END IF;
INSERT INTO AZC_WEEK_PARUS (ID_ORG, ID_PROD, ALL_VES, REALIZ_VES, OSTATOK) VALUES
( c_org_stru_id, c_prod_id_npr,q_realiz_opt_sum+q_realiz_azc_sum, q_realiz_azc_sum,ostatok);
COMMIT;
q_realiz_opt_sum:=0;
q_realiz_azc_sum:=0;
END LOOP;
CLOSE c1;
END for_week_parus;


FUNCTION GET_AZC_OST_VES_EX(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER,  pDATE_OPER DATE DEFAULT SYSDATE, FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT SUM(VES) INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
    RETURN NVL(v_ost,0);
  END IF;
  
  -- Приход и расход
  v_prih_rash:=0;
  IF v_lastost<=pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VES,2,-A.VES,0)) INTO v_prih_rash 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
  	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
	     AND A.SOBSTV_ID=pSOBSTV_ID
	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2)
	     AND A.DATE_OPER>=v_lastost
	     AND A.DATE_OPER<=pDATE_OPER;
  END IF;   		 

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

FUNCTION GET_AZC_OST_VOL_EX(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE_OPER DATE DEFAULT SYSDATE,FIRST_DAY NUMBER DEFAULT 1) RETURN NUMBER IS
  v_lastost DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  IF pSOBSTV_ID IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату ввода последнего остатка
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER<=LAST_DAY(pDATE_OPER);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NULL THEN
    v_ost:=0;
	v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  ELSE
    SELECT SUM(VOLUME) INTO v_ost
	  FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  END IF;
  
  IF FIRST_DAY=0 THEN 
    RETURN NVL(v_ost,0);
  END IF;
  
  -- Приход и расход
  v_prih_rash:=0;
  IF v_lastost<=pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VOLUME,2,-A.VOLUME,0)) INTO v_prih_rash 
     FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
       AND (B.KIND_OPER=1 OR B.KIND_OPER=2)
	   AND A.DATE_OPER>=v_lastost
	   AND A.DATE_OPER<=pDATE_OPER;
  END IF;	   

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

PROCEDURE for_rec_ostatki_rename  (DATE_FROM DATE, DATE_TO DATE)  IS
CURSOR c1 IS
SELECT SUM(VVV.VOL) AS vol, SUM(VVV.VES) AS VES , VVV.prod_id_npr, VVV.SOBSTV_ID, VVV.org_stru_id  FROM ORG_STRUCTURE  V, KLS_PROD VV,
(SELECT
For_Azc.GET_AZC_OST_VOL( select_.ORG_STRU_ID,select_.PROD_ID_NPR,select_.SOBSTV_ID, LAST_DAY(DATE_FROM)) AS VOL,
For_Azc.GET_AZC_OST_VES (select_.ORG_STRU_ID,select_.PROD_ID_NPR,select_.SOBSTV_ID, LAST_DAY(DATE_FROM)) AS VES,
DECODE(select_.PROD_ID_NPR,'80003','80018','10304', '10305','10314','10315','10405','10400','10426','10400', '10313', '10315', '10427','10400', '10423', '10400', select_.PROD_ID_NPR) AS prod_id_npr,
select_.SOBSTV_ID,
select_.ORG_STRU_ID
FROM
(SELECT SOBSTV_ID, ORG_STRU_ID, PROD_ID_NPR FROM AZC_OPERATION WHERE
AZC_OPERATION.DATE_OPER >=	TRUNC (DATE_FROM, 'MONTH')
AND AZC_OPERATION.DATE_OPER <= LAST_DAY(DATE_FROM)
GROUP BY SOBSTV_ID, ORG_STRU_ID, PROD_ID_NPR) select_,
ORG_RELATIONS B
WHERE 
B.ORG_STRU_1_ID = select_.org_stru_id
AND B.ORG_STRU_2_ID = 31
ORDER BY select_.SOBSTV_ID, select_.ORG_STRU_ID,select_.PROD_ID_NPR ) VVV
WHERE
VVV.org_stru_id = V.ID
AND VVV.prod_id_npr = VV.ID_NPR
GROUP BY V.NAME, VV.ID_NPR, VV.ABBR_NPR, VVV.prod_id_npr, VVV.org_stru_id, VVV.SOBSTV_ID;
VOLUME_ AZC_OPERATION.VOLUME%TYPE;
VES_ AZC_OPERATION.VES%TYPE;
PROD_ID_NPR_  AZC_OPERATION.PROD_ID_NPR%TYPE;
SOBSTV_ID_  AZC_OPERATION.SOBSTV_ID%TYPE;
ORG_STRU_ID_  AZC_OPERATION.ORG_STRU_ID%TYPE;
COUNT_VAR NUMBER;
BEGIN
OPEN c1;
LOOP
FETCH c1 INTO VOLUME_ ,VES_,PROD_ID_NPR_ ,SOBSTV_ID_,ORG_STRU_ID_;
EXIT WHEN c1%NOTFOUND;
SELECT COUNT (A.ID) INTO COUNT_VAR 
FROM AZC_OPERATION A WHERE 
A.SOBSTV_ID = SOBSTV_ID_
AND A.PROD_ID_NPR = PROD_ID_NPR_
AND A.ORG_STRU_ID = ORG_STRU_ID_
AND A.TYPE_OPER_ID = 3
AND A.DATE_INTO>=TRUNC(date_to, 'MONTH');
IF COUNT_VAR<1 THEN 
INSERT  INTO AZC_OPERATION (DATE_OPER, VOLUME, VES, TYPE_OPER_ID,PROD_ID_NPR, SOBSTV_ID, ORG_STRU_ID, PLACE_SEND_ID) VALUES
( TRUNC(DATE_TO, 'MONTH'), VOLUME_ ,VES_, 3 ,PROD_ID_NPR_ ,SOBSTV_ID_, ORG_STRU_ID_, 1);
COMMIT;
END IF;
END LOOP;
CLOSE c1;
END for_rec_ostatki_rename ;


END;

/

--
-- FOR_PLANPOST  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Planpost AS

-- Открыть плановый период
FUNCTION NewPeriod (PlanID NUMBER, DatePlan DATE, BeginDate DATE, EndDate DATE) RETURN NUMBER IS
BEGIN

  IF PlanId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан план');
  END IF;

  INSERT INTO PLAN_PERIODS (PLAN_ID,DATE_PLAN,NUM_IZM_POST,NUM_IZM_RESU,BEGIN_DATE,END_DATE)
    VALUES (PlanId,DatePlan,0,0,BeginDate,EndDate);
  COMMIT;

  RETURN PLAN_PERIODS_ID;
END;

-- Изменить плановый период
PROCEDURE ChangePeriod (PlanPerID NUMBER, DatePlan DATE, BeginDate DATE, EndDate DATE) IS
BEGIN

  IF PlanPerId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период');
  END IF;

  UPDATE PLAN_PERIODS SET DATE_PLAN=DatePlan, BEGIN_DATE=BeginDate, END_DATE=EndDate
	WHERE ID=PlanPerId;
  COMMIT;
END;

-- Удалить плановый период
PROCEDURE DeletePeriod (PlanPerID NUMBER) IS
  v_tmp NUMBER;
BEGIN

  IF PlanPerId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период');
  END IF;

  BEGIN
    SELECT NULL INTO v_tmp
	  FROM PLAN_POST
	 WHERE PLAN_PER_ID=PlanPerId;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Вначале удалите позиции плана');
  EXCEPTION
    WHEN TOO_MANY_ROWS THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$MANY_ROWS, 'Вначале удалите позиции плана');
	WHEN NO_DATA_FOUND THEN
	  NULL;
	WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, For_Scripts.SG$NO_CORRECT_TXT);
  END;

  DELETE FROM PLAN_PERIODS WHERE ID=PlanPerId;
  COMMIT;
END;

-- Копирование плана
FUNCTION CopyPlan (PlanPerIdFrom NUMBER, PlanIdTo NUMBER) RETURN NUMBER IS
  v_DATE_PLAN DATE;
  v_NUM_IZM_POST NUMBER;
  v_NUM_IZM_RESU NUMBER;
  v_BEGIN_DATE DATE;
  v_END_DATE DATE;
  PlanPerIdTo NUMBER;
  v_tmp NUMBER;
BEGIN

  IF PlanPerIdFrom IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период-источник');
  END IF;

  IF PlanIdTo IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан план-назначение');
  END IF;

  -- Определяем параметры планового периода-источника
  BEGIN
    SELECT DATE_PLAN, NUM_IZM_POST, NUM_IZM_RESU, BEGIN_DATE, END_DATE
	  INTO v_DATE_PLAN, v_NUM_IZM_POST, v_NUM_IZM_RESU, v_BEGIN_DATE, v_END_DATE
	  FROM PLAN_PERIODS
	 WHERE ID=PlanPerIdFrom;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_ROW, 'Плановый период-источник не найден');
  END;

  -- Ищем плановый период-назначение
  BEGIN
    SELECT ID
	  INTO PlanPerIdTo
	  FROM PLAN_PERIODS
	 WHERE PLAN_ID=PlanIdTo
	   AND DATE_PLAN=v_DATE_PLAN
	   AND BEGIN_DATE=v_BEGIN_DATE;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      PlanPerIdTo:=0;
  END;

  IF PlanPerIdTo=0 THEN
    -- Создадим новый плановый период
	PlanPerIdTo:=NewPeriod(PlanIdTo,v_DATE_PLAN,v_BEGIN_DATE,v_END_DATE);
  ELSE
    -- Проверим, есть ли данные в этом периоде
    SELECT COUNT(*) INTO v_tmp
	  FROM PLAN_POST
	 WHERE PLAN_PER_ID=PlanPerIdTo;
	IF v_tmp>0 THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$MANY_ROWS, 'В плановом периоде-назначении есть какие-то данные');
	END IF;

    SELECT COUNT(*) INTO v_tmp
	  FROM PLAN_RESU
	 WHERE PLAN_PER_ID=PlanPerIdTo;
	IF v_tmp>0 THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$MANY_ROWS, 'В плановом периоде-назначении есть какие-то данные');
	END IF;

	-- Очистим историю
	DELETE FROM PLAN_POST_HIST WHERE PLAN_PER_ID=PlanPerIdTo;
	COMMIT;

	DELETE FROM PLAN_RESU_HIST WHERE PLAN_PER_ID=PlanPerIdTo;
	COMMIT;
  END IF;

  -- Установим текущее изменение
  NewIzm('POST',PlanPerIdTo,v_NUM_IZM_POST,0);
  NewIzm('RESU',PlanPerIdTo,v_NUM_IZM_RESU,0);

  -- Копируем данные
  INSERT INTO PLAN_POST (PLAN_CENA, PLAN_VES, PLAN_SUM, DATE_CENA, PLAN_ID, PLAN_PER_ID, PLANSTRU_ID, DOG_ID, PROD_ID_NPR, PAYFORM_ID, CAT_CEN_ID, REFINERY_ID, ORGSTRU_ID)
  SELECT PLAN_CENA, PLAN_VES, PLAN_SUM, DATE_CENA, PlanIdTo, PlanPerIdTo, PLANSTRU_ID, DOG_ID, PROD_ID_NPR, PAYFORM_ID, CAT_CEN_ID, REFINERY_ID, ORGSTRU_ID
    FROM PLAN_POST
   WHERE PLAN_PER_ID = PlanPerIdFrom;

  INSERT INTO PLAN_RESU (PLAN_UTMSK, HRAN_UTMSK, OSTAT_UTMSK, PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, SOBSTV_ID, REFINER_ID)
  SELECT PLAN_UTMSK, HRAN_UTMSK, OSTAT_UTMSK, PlanIdTo, PlanPerIdTo, PROD_ID_NPR, SOBSTV_ID, REFINER_ID
    FROM PLAN_RESU
   WHERE PLAN_PER_ID = PlanPerIdFrom;

  COMMIT;
  RETURN PlanPerIdTo;
END;

-- Изменение плана
PROCEDURE NewIzm (TableID VARCHAR2 DEFAULT 'POST', PlanPerID NUMBER, NumIzm NUMBER, NumCheck NUMBER) IS
  v_NumIzm NUMBER;
  v_tmp NUMBER;
  v_TableID VARCHAR2(4);
BEGIN
  IF PlanPerId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период');
  END IF;
  v_TableID:=UPPER(SUBSTR(TableID,1,4));
  v_NumIzm:=NVL(NumIzm,0);

  -- Проверям, а меняется ли что-либо?
  BEGIN
    SELECT DECODE(v_TableID,'RESU',NUM_IZM_RESU,NUM_IZM_POST)
      INTO v_tmp
      FROM PLAN_PERIODS
  	 WHERE ID=PlanPerId;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Плановый период не найден');
  END;

  IF NumCheck=1 THEN
    IF v_tmp>v_NumIzm THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, '№ изменения меньше текущего');
    END IF;
  END IF;

  IF v_tmp<>v_NumIzm THEN
    -- Удаление старой истории
	IF v_TableID='RESU' THEN
      DELETE FROM PLAN_RESU_HIST WHERE PLAN_PER_ID=PlanPerId AND NUM_IZM=v_tmp;
	ELSE
      DELETE FROM PLAN_POST_HIST WHERE PLAN_PER_ID=PlanPerId AND NUM_IZM=v_tmp;
	END IF;

    -- Обновление PLAN_PERIODS
	IF v_TableID='RESU' THEN
      UPDATE PLAN_PERIODS SET NUM_IZM_RESU=v_NumIzm WHERE ID=PlanPerId;
	ELSE
      UPDATE PLAN_PERIODS SET NUM_IZM_POST=v_NumIzm WHERE ID=PlanPerId;
    END IF;

    -- Перенос данных в истории
	IF v_TableID='RESU' THEN
      INSERT INTO PLAN_RESU_HIST (ID,NUM_IZM,PLAN_UTMSK, HRAN_UTMSK, OSTAT_UTMSK, PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, SOBSTV_ID, REFINER_ID)
      SELECT ID,v_tmp,PLAN_UTMSK, HRAN_UTMSK, OSTAT_UTMSK, PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, SOBSTV_ID, REFINER_ID
        FROM PLAN_RESU
       WHERE PLAN_PER_ID=PlanPerId;
	ELSE
      INSERT INTO PLAN_POST_HIST (ID,NUM_IZM, PLAN_CENA, PLAN_VES, PLAN_SUM, DATE_CENA, PLAN_ID, PLAN_PER_ID, PLANSTRU_ID, DOG_ID, PROD_ID_NPR, PAYFORM_ID, CAT_CEN_ID, REFINERY_ID, ORGSTRU_ID)
      SELECT ID,v_tmp, PLAN_CENA, PLAN_VES, PLAN_SUM, DATE_CENA, PLAN_ID, PLAN_PER_ID, PLANSTRU_ID, DOG_ID, PROD_ID_NPR, PAYFORM_ID, CAT_CEN_ID, REFINERY_ID, ORGSTRU_ID
        FROM PLAN_POST
       WHERE PLAN_PER_ID=PlanPerId;
	END IF;

	COMMIT;
  END IF;

END;

-- Заполнение временной таблицы для ввода/редактирования позиции плана
-- Возвращает уникальное имя временной таблицы
FUNCTION FillTempPayForms(IsAdd NUMBER, PlanId NUMBER, PlanPerId NUMBER, ProdId VARCHAR2, PlanStruId NUMBER, DogId NUMBER, RefineryId NUMBER DEFAULT 8, OrgStruId NUMBER DEFAULT NULL) RETURN VARCHAR2 IS
  v_tmp NUMBER;
  v_tablename VARCHAR2(20);
BEGIN

  IF PlanId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан план');
  END IF;

  IF PlanPerId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период');
  END IF;

  -- Сформируем имя временной таблицы
  SELECT SEQ_TEMP_TABLES.NEXTVAL INTO v_tmp FROM DUAL;
  v_tablename := 'PLAN_POST_' || TO_CHAR(v_tmp);

  -- Заполним таблицу
  IF IsAdd=1 THEN

    INSERT INTO V_TEMPTABLE (APP_NAME, UNIT_NAME, TABLE_NAME, NUM1, CHAR2, NUM3, NUM4, NUM5)
    SELECT
	  'MASTER','PLAN_POST',v_tablename,
      ID AS PAYFORM_ID,
      PAYFORM_NAME,
      0 AS PLAN_CENA,
      0 AS PLAN_VES,
      0 AS PLAN_SUM
    FROM KLS_PAYFORM; 
	
    --FillTempPrices(v_tablename,PlanId,PlanPerId,ProdId,DogId);
  ELSE
    INSERT INTO V_TEMPTABLE (APP_NAME, UNIT_NAME, TABLE_NAME, NUM1, CHAR2, NUM3, NUM4, NUM5, NUM6, DATE7)
    SELECT
	  'MASTER','PLAN_POST',v_tablename,
      A.ID AS PAYFORM_ID,
      A.PAYFORM_NAME,
      NVL(B.PLAN_CENA,0) AS PLAN_CENA,
      NVL(B.PLAN_VES,0) AS PLAN_VES,
      NVL(B.PLAN_SUM,0) AS PLAN_SUM,
	  B.CAT_CEN_ID AS CAT_CEN_ID,
	  B.DATE_CENA AS DATE_CENA
    FROM KLS_PAYFORM A,
    (
     SELECT
       PAYFORM_ID,
       KLS_PAYFORM.PAYFORM_NAME,
       PLAN_CENA,
       PLAN_VES,
       PLAN_SUM,
	   CAT_CEN_ID,
	   DATE_CENA
     FROM PLAN_POST,KLS_PAYFORM
     WHERE PLAN_POST.PAYFORM_ID=KLS_PAYFORM.ID
       AND PLAN_POST.PLAN_ID=PlanId
       AND PLAN_POST.PLAN_PER_ID=PlanPerId
       AND PLAN_POST.PROD_ID_NPR=ProdId
       AND PLAN_POST.PLANSTRU_ID=PlanStruId
       AND PLAN_POST.DOG_ID=DogId
	   AND PLAN_POST.REFINERY_ID=RefineryId
	   AND PLAN_POST.ORGSTRU_ID=OrgStruId
    ) B
    WHERE A.ID=B.PAYFORM_ID(+);
  END IF;

  COMMIT;

  RETURN v_tablename;
END;

-- Заполнение цен во временной таблице
PROCEDURE FillTempPrices(PlanPerId NUMBER, ProdId VARCHAR2, DogId NUMBER) IS
  v_tmp NUMBER;
  v_price_id NUMBER;
  v_cat_cen NUMBER;
  v_date_cena DATE;
  v_cena NUMBER;
  v_beg DATE;
  v_end DATE;
BEGIN

  IF PlanPerId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период');
  END IF;

  -- Определим период дат
  SELECT BEGIN_DATE, END_DATE INTO v_beg,v_end FROM PLAN_PERIODS
   WHERE ID=PlanPerId;

  -- Определим текущую цену
  BEGIN
    SELECT A.ID,A.CAT_CEN_ID,A.INPUT_DATE,A.CENA_OTP
        INTO v_price_id,v_cat_cen,v_date_cena,v_cena
        FROM NPR_PRICES A,USL_DOG
       WHERE A.PROD_ID_NPR=ProdId
         AND A.IS_ORIGINAL=1
  	     AND A.BEGIN_DATE<v_End+1
  	     AND NVL(A.END_DATE,LAST_DAY(BEGIN_DATE))>v_Beg-1
  	     AND A.CAT_CEN_ID=USL_DOG.CAT_CEN_ID
	     AND USL_DOG.USL_BAZ=1
  	     AND USL_DOG.DOG_ID=DogId
		 AND ROWNUM=1;
  EXCEPTION
    WHEN OTHERS THEN
      v_price_id:=NULL;
	  v_cat_cen:=NULL;
      v_date_cena:=NULL;
  	  v_cena:=0;
  END;

  -- Запомним цены во временных переменных
  v_tmp:=FOR_TEMP.SET_VARI('PRICE_ID',v_price_id,'MASTER','PLAN_POST');
  v_tmp:=FOR_TEMP.SET_VARI('CAT_CEN_ID',v_cat_cen,'MASTER','PLAN_POST');
  v_tmp:=FOR_TEMP.SET_VARI('DATE_CENA',v_date_cena,'MASTER','PLAN_POST');
  v_tmp:=FOR_TEMP.SET_VARI('PLAN_CENA',v_cena,'MASTER','PLAN_POST');
END;

-- Сохранение изменений из временной таблицы в PLAN_POST
function AddPlanPost(EditId NUMBER, PlanId NUMBER, PlanPerId NUMBER, ProdId VARCHAR2, PlanStruId NUMBER, DogId NUMBER, 
                           RefineryId NUMBER, OrgStruId NUMBER, PayFormId NUMBER, Price NUMBER, Ves NUMBER, CatCenId NUMBER, DateCena DATE) RETURN NUMBER IS
  vID NUMBER;
BEGIN
  vID:=EditId;
  
  IF PlanId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан план');
  END IF;

  IF PlanPerId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан плановый период');
  END IF;

  IF ProdId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан продукт');
  END IF;

  IF PlanStruId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указана позиция плана');
  END IF;

  IF DogId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указан договор');
  END IF;

  IF PayFormId IS NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Не указана форма оплаты');
  END IF;


  
  UPDATE PLAN_POST A SET
    (PLAN_CENA, PLAN_VES, PLAN_ID, PLAN_PER_ID, PLANSTRU_ID, DOG_ID, PROD_ID_NPR, PAYFORM_ID, 
	 DATE_CENA, CAT_CEN_ID, REFINERY_ID, ORGSTRU_ID)=
	(SELECT Price,Ves,PlanId,PlanPerId,PlanStruId,DogId,ProdId,PayFormId,
	        DateCena,CatCenId,RefineryId,OrgStruId FROM dual)
  WHERE ID=vId;
  			
  IF SQL%NOTFOUND THEN
    SELECT SEQ_PLAN_POST.NEXTVAL INTO vID FROM dual;			
    INSERT INTO PLAN_POST 
      (ID,PLAN_CENA, PLAN_VES, PLAN_ID, PLAN_PER_ID, PLANSTRU_ID, DOG_ID, PROD_ID_NPR, PAYFORM_ID, 
	   DATE_CENA, CAT_CEN_ID, REFINERY_ID, ORGSTRU_ID)
	VALUES (vId,Price,Ves,PlanId,PlanPerId,PlanStruId,DogId,ProdId,PayFormId,
	        DateCena,CatCenId,RefineryId,OrgStruId);
  END IF;			

  COMMIT;
  RETURN vID;
END;

-- Очистка временной таблицы
PROCEDURE ClearTempPayForms(TempTableName VARCHAR2) IS
BEGIN
  DELETE FROM V_TEMPTABLE B
        WHERE B.APP_NAME='MASTER'
          AND B.UNIT_NAME='PLAN_POST'
          AND B.TABLE_NAME=TempTableName;

  COMMIT;
END;

-- Удалить позицию плана
PROCEDURE DeletePlanPost(EditId NUMBER) IS
BEGIN
  DELETE FROM PLAN_POST B
   WHERE ID=EditID;

  COMMIT;
END;

END;
/

--
-- P_LOAD_SF_USL_R3  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_Load_Sf_Usl_R3(vDATE DATE) IS
  vPrevDok NUMBER;
  vPrevProd VARCHAR2(5);
  vBillPosId NUMBER;
  vNomSf NUMBER;
  vNumAkt NUMBER;
/******************************************************************************
   NAME:       P_LOAD_SF_USL_R3
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        05.02.2007          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     P_LOAD_SF_USL_R3
      Sysdate:         05.02.2007
      Date and Time:   05.02.2007, 16:43:36, and 05.02.2007 16:43:36
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
vBillPosId:=1;

--Удаляем все фактуры по услугам за сутки
DELETE FROM BILL_POS WHERE NOM_DOK IN (SELECT NOM_DOK FROM BILLS WHERE DATE_KVIT=vDATE 
   AND PROD_ID_NPR>='10000' AND PROD_ID_NPR<='10100' AND PROD_ID_NPR<>'10080');
DELETE FROM BILLS WHERE DATE_KVIT=vDATE AND PROD_ID_NPR>='10000' AND PROD_ID_NPR<='10100' AND PROD_ID_NPR<>'10080';
   
--цикл по заголовкам
FOR REC3 IN (SELECT /*+ ORDERED */ DISTINCT 
	 	 		IB.NOM_SF AS ISU_NOM_SF
				,IBP.ISU_KOD_POS
		 		,IB.DATE_VYP_SF
		 		,IB.ISU_KOD
		 		,vDate AS DATE_KVIT
				,For_Init.GetCurrUser AS FIO_ISPOL
				,TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS KOL_DN
				,IB.ISU_KOD_OLD
				,'?' AS NOM_ZD
				,8 AS OWNER_ID
				,D.ID AS DOG_ID
				,1 AS USL_NUMBER
				,P.ID_NPR AS PROD_ID_NPR
				,vDate AS DATE_MOS
				,D.IS_AGENT
				,(CASE
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 1 AND 5 THEN 1
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 6 AND 10 THEN 2
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 11 AND 15 THEN 3
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 16 AND 20 THEN 4
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 20 AND 25 THEN 5
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD'))>25 THEN 6
					   ELSE 0
				  END) AS NUM_5_DAY
				,NULL AS NAZN_OTG_ID
				,vDate+TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS DATE_PLAT
				,1-NVL(IBP.IS_AKCIZ,0) AS NO_AKCIZ
				,vDate AS DATE_BUXG
				,NVL(IB.STATUS,0) AS STATUS
        		,IBP.PRICE AS CENA
        		,IBP.PRICE_WITH_NDS AS CENA_OTP
        		,IBP.SUMMA_BN AS SUM_PROD
        		,0 AS SUM_AKCIZ
        		,IBP.SUMMA_NDS AS SUM_PROD_NDS
        		,IBP.TARIF_NDS AS TARIF_NDS 
        		,IBP.TARIF_GUARD_NDS AS TARIF_GUARD_NDS 
        		,IBP.SUMMA_VOZN_BN AS SUM_VOZN11
        		,ROUND(IBP.SUMMA_VOZN_BN*0.18,2) AS SUM_VOZN11_NDS  
        		,IBP.SUMMA_RAZN_BN AS SUM_VOZN12
        		,ROUND(IBP.SUMMA_RAZN_BN*0.18,2) AS SUM_VOZN12_NDS
		 FROM ISU_BILLS IB
			  ,ISU_BILL_POS IBP
			  ,KLS_DOG D
			  ,KLS_PROD P
		 WHERE IB.DATE_KVIT=vDATE
		   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
		   AND SUBSTR(IB.ISU_KOD_DOG,1,10)=SUBSTR(D.ISU_KOD_DOG_USLUG,1,10)
		   AND IBP.Material_KSSS=P.ID_NPR
		   AND NVL(IB.STATUS,0) IN (0,3)
		   AND IB.LATENT||' '<>'X'
		   AND P.ID_NPR<>'10003'
			   )
LOOP

		vNumAkt:=0;
		--заполняем заголовок
		INSERT INTO BILLS (ISU_NOM_SF
			   		  ,NOM_SF /* PSV - номер нового счета =0 */
    		          ,DATE_VYP_SF
					  ,ISU_KOD
					  ,NOM_DOK
					  ,DATE_KVIT
					  ,FIO_ISPOL
					  ,KOL_DN
					  ,OLD_NOM_DOK
					  ,NOM_ZD
					  ,OWNER_ID
					  ,DOG_ID
					  ,USL_NUMBER
					  ,PROD_ID_NPR
					  ,DATE_MOS
					  ,IS_AGENT
					  ,NUM_5_DAY
					  ,KORR_5_DAY
					  ,NAZN_OTG_ID
					  ,DATE_PLAT
					  ,NO_AKCIZ
					  ,DATE_BUXG
					  ,SUMMA_DOK
     	              ,NDS_DOK
     				  ,PROD_SUM
     				  ,PROD_NDS
     				  ,LUK_SUMMA_DOK
     				  ,LUK_NDS_DOK
					  )
          VALUES (REC3.ISU_NOM_SF
		  		 ,REC3.ISU_NOM_SF --,vNomSF с 01.01.2007 берем номер из r3
		         ,REC3.DATE_VYP_SF
				 ,REC3.ISU_KOD
				 ,TO_NUMBER(REC3.ISU_KOD)
				 ,REC3.DATE_KVIT
				 ,REC3.FIO_ISPOL
				 ,REC3.KOL_DN
				 ,REC3.ISU_KOD_OLD
				 ,REC3.NOM_ZD
				 ,REC3.OWNER_ID
				 ,REC3.DOG_ID
				 ,REC3.USL_NUMBER
				 ,REC3.PROD_ID_NPR
				 ,REC3.DATE_MOS
				 ,REC3.IS_AGENT
				 ,REC3.NUM_5_DAY
				 ,REC3.NUM_5_DAY
				 ,REC3.NAZN_OTG_ID
				 ,REC3.DATE_PLAT
				 ,REC3.NO_AKCIZ
				 ,REC3.DATE_BUXG
				 ,REC3.SUM_PROD
     	         ,REC3.SUM_PROD_NDS
				 ,REC3.SUM_PROD
     	         ,REC3.SUM_PROD_NDS
				 ,REC3.SUM_PROD
     	         ,REC3.SUM_PROD_NDS
				 );
		 INSERT INTO BILL_POS (
		   					  BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 ,NUM_AKT
							 )
		              VALUES(
							  1
							 ,REC3.ISU_KOD
		   					 ,0
							 ,REC3.CENA
							 ,REC3.SUM_PROD
							 ,REC3.SUM_AKCIZ
							 ,REC3.SUM_PROD_NDS
							 ,REC3.SUM_PROD
							 ,REC3.PROD_ID_NPR
							 ,REC3.IS_AGENT
							 ,REC3.NO_AKCIZ
							 ,1
							 ,1
							 ,NULL
							 ,NULL
							 ,vDate
							 ,0
							 );	
			 
END LOOP;

FOR REC3 IN (SELECT /*+ ORDERED */ DISTINCT 
	 	 		IB.NOM_SF AS ISU_NOM_SF
		 		,IB.DATE_VYP_SF
		 		,IB.ISU_KOD
		 		,vDate AS DATE_KVIT
				,For_Init.GetCurrUser AS FIO_ISPOL
				,TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS KOL_DN
				,IB.ISU_KOD_OLD
				,'?' AS NOM_ZD
				,8 AS OWNER_ID
				,D.ID AS DOG_ID
				,1 AS USL_NUMBER
				,P.ID_NPR AS PROD_ID_NPR
				,vDate AS DATE_MOS
				,D.IS_AGENT
				,(CASE
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 1 AND 5 THEN 1
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 6 AND 10 THEN 2
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 11 AND 15 THEN 3
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 16 AND 20 THEN 4
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD')) BETWEEN 20 AND 25 THEN 5
				  	   WHEN TO_NUMBER(TO_CHAR(vDate,'DD'))>25 THEN 6
					   ELSE 0
				  END) AS NUM_5_DAY
				,NULL AS NAZN_OTG_ID
				,vDate+TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS DATE_PLAT
				,1-NVL(IBP.IS_AKCIZ,0) AS NO_AKCIZ
				,vDate AS DATE_BUXG
				,NVL(IB.STATUS,0) AS STATUS
        		,IBP.PRICE AS CENA
        		,IBP.PRICE_WITH_NDS AS CENA_OTP
				,IBP.SUMMA
				,IBP.SUMMA_BN
        		,0 AS SUM_AKCIZ
        		,IBP.SUMMA_NDS AS SUM_PROD_NDS
        		,IBP.TARIF_NDS AS TARIF_NDS 
        		,IBP.TARIF_GUARD_NDS AS TARIF_GUARD_NDS 
        		,IBP.SUMMA_VOZN_BN AS SUM_VOZN11
        		,ROUND(IBP.SUMMA_VOZN_BN*0.18,2) AS SUM_VOZN11_NDS  
        		,IBP.SUMMA_RAZN_BN AS SUM_VOZN12
        		,ROUND(IBP.SUMMA_RAZN_BN*0.18,2) AS SUM_VOZN12_NDS
		 FROM ISU_BILLS IB
			  ,ISU_BILL_POS IBP
			  ,KLS_DOG D
			  ,KLS_PROD P
		 WHERE IB.DATE_KVIT=vDate
		   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
		   AND SUBSTR(IB.ISU_KOD_DOG,1,10)=SUBSTR(D.ISU_KOD_DOG,1,10)
		   AND IBP.Material_KSSS=P.ID_NPR
		   AND NVL(IB.STATUS,0) IN (0,3)
		   AND IB.LATENT||' '<>'X'
		   AND P.ID_NPR='10003'
			   )
LOOP

		vNumAkt:=0;
		--заполняем заголовок
		INSERT INTO BILLS (ISU_NOM_SF
			   		  ,NOM_SF /* PSV - номер нового счета =0 */
    		          ,DATE_VYP_SF
					  ,ISU_KOD
					  ,NOM_DOK
					  ,DATE_KVIT
					  ,FIO_ISPOL
					  ,KOL_DN
					  ,OLD_NOM_DOK
					  ,NOM_ZD
					  ,OWNER_ID
					  ,DOG_ID
					  ,USL_NUMBER
					  ,PROD_ID_NPR
					  ,DATE_MOS
					  ,IS_AGENT
					  ,NUM_5_DAY
					  ,KORR_5_DAY
					  ,NAZN_OTG_ID
					  ,DATE_PLAT
					  ,NO_AKCIZ
					  ,DATE_BUXG
					  ,SUMMA_DOK
     	              ,NDS_DOK
     				  ,PROD_SUM
     				  ,PROD_NDS
     				  ,LUK_SUMMA_DOK
     				  ,LUK_NDS_DOK
					  )
          VALUES (REC3.ISU_NOM_SF
		  		 ,REC3.ISU_NOM_SF --,vNomSF с 01.01.2007 берем номер из r3
		         ,REC3.DATE_VYP_SF
				 ,REC3.ISU_KOD
				 ,TO_NUMBER(REC3.ISU_KOD)
				 ,REC3.DATE_KVIT
				 ,REC3.FIO_ISPOL
				 ,REC3.KOL_DN
				 ,REC3.ISU_KOD_OLD
				 ,REC3.NOM_ZD
				 ,REC3.OWNER_ID
				 ,REC3.DOG_ID
				 ,REC3.USL_NUMBER
				 ,REC3.PROD_ID_NPR
				 ,REC3.DATE_MOS
				 ,REC3.IS_AGENT
				 ,REC3.NUM_5_DAY
				 ,REC3.NUM_5_DAY
				 ,REC3.NAZN_OTG_ID
				 ,REC3.DATE_PLAT
				 ,REC3.NO_AKCIZ
				 ,REC3.DATE_BUXG
				 ,REC3.SUMMA
     	         ,REC3.SUM_PROD_NDS
				 ,REC3.SUMMA
     	         ,REC3.SUM_PROD_NDS
				 ,REC3.SUMMA
     	         ,REC3.SUM_PROD_NDS
				 );
		 INSERT INTO BILL_POS (
		   					  BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 ,NUM_AKT
							 )
		              VALUES(
							  1
							 ,REC3.ISU_KOD
		   					 ,0
							 ,REC3.CENA
							 ,REC3.SUMMA_BN
							 ,REC3.SUM_AKCIZ
							 ,REC3.SUM_PROD_NDS
							 ,REC3.SUMMA
							 ,REC3.PROD_ID_NPR
							 ,REC3.IS_AGENT
							 ,REC3.NO_AKCIZ
							 ,1
							 ,1
							 ,NULL
							 ,NULL
							 ,vDate
							 ,0
							 );	
			 
END LOOP;
COMMIT;

END P_Load_Sf_Usl_R3;

/

--
-- RENEW_ARC_REZ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Arc_Rez (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  new_DB DATE;
  new_DE DATE;
BEGIN

new_DB:=TO_DATE(TO_CHAR(date_beg,'dd.mm.yyyy') || ' 00:00','dd.mm.yyyy hh24:mi');
new_DE:=TO_DATE(TO_CHAR(date_end,'dd.mm.yyyy') || ' 23:59','dd.mm.yyyy hh24:mi');

--- Удаляем записи
DELETE FROM MASTER.ARC_REZ C WHERE C.dateupload BETWEEN new_DB AND new_DE AND ORG_STRU_ID=1;

UPDATE load_buffer.ARC_REZ_LOC SET NUM_REZ=' ' WHERE NUM_REZ IS NULL;
UPDATE load_buffer.ARC_REZ_LOC SET M_O=0 WHERE M_O IS NULL;
UPDATE load_buffer.ARC_REZ_LOC SET KOL_K=0 WHERE KOL_K IS NULL;
UPDATE load_buffer.ARC_REZ_LOC SET MAX_KOL=0 WHERE MAX_KOL IS NULL;
UPDATE load_buffer.ARC_REZ_LOC SET TIM_='00:01' WHERE TIM_='24:00';
UPDATE load_buffer.ARC_REZ_LOC SET TIM_='14:00' WHERE TIM_='014:0';

--- Добавляем
INSERT INTO MASTER.ARC_REZ
     (ORG_STRU_ID,DATEUPLOAD,REZ_NUM,REZ_NUM_UNP,VOL,MAX_VOL,DEAD_VOL,PRIM,DISP_NAME,AR_TOV_ID,PROD_ID_NPR,kol_lkrez)
     (SELECT 1,TO_DATE(TO_CHAR(AR.dat_,'dd.mm.yyyy ') || SUBSTR(AR.tim_,1,5),'dd.mm.yyyy hh24:mi'),
             AR.NUM_REZ,AR.N_REZ,sum(AR.KOL_K),sum(AR.MAX_KOL),sum(AR.M_O),AR.PRIM,AR.DISP,sum(AR.TOV_K),P.KOD,sum(ar.kol_lkrez)
        FROM load_buffer.arc_rez_loc AR,MASTER.V_PROD_OK P
       WHERE P.KOD_10=AR.OKP and AR.KOL_K<>0 AND
         NOT EXISTS (SELECT C.REZ_NUM FROM MASTER.ARC_REZ C
                   WHERE TO_DATE(TO_CHAR(AR.dat_,'dd.mm.yyyy ') || SUBSTR(AR.tim_,1,5),'dd.mm.yyyy hh24:mi')=C.DATEUPLOAD
                     AND AR.NUM_REZ=C.REZ_NUM
                     AND AR.TOV_K=C.AR_TOV_ID
                     AND P.KOD=C.PROD_ID_NPR
                       AND AR.KOL_K=C.VOL)
                       group by 1,TO_DATE(TO_CHAR(AR.dat_,'dd.mm.yyyy ') || SUBSTR(AR.tim_,1,5),'dd.mm.yyyy hh24:mi'),AR.NUM_REZ,AR.N_REZ,AR.PRIM,AR.DISP,P.KOD);

     COMMIT;
END Renew_Arc_Rez;
/

--
-- RENEW_GD_PLAN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Gd_Plan (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  vTipPlan VARCHAR2(50);
BEGIN

  IF param1 || ' ' =' ' OR (NLS_UPPER(param1)<>'DAY' AND NLS_UPPER(param1)<>'MON') THEN
    RETURN;
  ELSE
    vTipPlan:=NLS_UPPER(param1);
  END IF;

  -- Обновление плана  	 
  UPDATE GD_PLAN C
    SET (FROM_DATE, TO_DATE, PLAN_CIST, PLAN_VES, KORR_CIST, KORR_VES, MARSHRUT_CIST, STANOTP_ID)
 	 = (SELECT A.FROM_DATE, A.TO_DATE, 
			   A.PLAN_CIST,A.PLAN_VES, A.KORR_CIST, A.KORR_VES, A.MARSHRUTED,A.STANOTP_ID  
 		FROM load_buffer.V_GD_PLAN A
		WHERE A.KOD_PREDPR=C.GROTP_ID
		  AND A.DATE_PLAN=C.DATE_PLAN
		  AND A.TIP_OTGR=C.LOAD_TYPE_ID
		  AND A.KOD_NPR=C.PROD_ID_NPR
		  AND A.EXPORT=C.NAPR_MOS_ID
		  AND A.VAGOWNER_ID=C.VAGOWNER_ID)
	WHERE C.TIP_PLAN=vTipPlan
	  AND EXISTS (SELECT NULL 
  		    FROM load_buffer.V_GD_PLAN A
		   WHERE A.KOD_PREDPR=C.GROTP_ID
		     AND A.DATE_PLAN=C.DATE_PLAN
		     AND A.TIP_OTGR=C.LOAD_TYPE_ID
		     AND A.KOD_NPR=C.PROD_ID_NPR
		     AND A.EXPORT=C.NAPR_MOS_ID
  	  	     AND A.VAGOWNER_ID=C.VAGOWNER_ID);

  COMMIT;
 
  -- Добавление плана  
  INSERT INTO GD_PLAN (TIP_PLAN, DATE_PLAN, FROM_DATE, TO_DATE, PLAN_CIST, PLAN_VES, KORR_CIST, KORR_VES, MARSHRUT_CIST, 
        GROTP_ID, NAPR_MOS_ID, PROD_ID_NPR, LOAD_TYPE_ID, VAGOWNER_ID, STANOTP_ID)
   (SELECT vTipPlan, A.DATE_PLAN, A.FROM_DATE, A.TO_DATE,
		   A.PLAN_CIST,A.PLAN_VES, A.KORR_CIST, A.KORR_VES, A.MARSHRUTED,
		   A.KOD_PREDPR, A.EXPORT, A.KOD_NPR, A.TIP_OTGR, A.VAGOWNER_ID, A.STANOTP_ID 
		FROM load_buffer.V_GD_PLAN A
		WHERE NOT EXISTS 
		    (SELECT NULL 
			 FROM GD_PLAN C 
			 WHERE C.TIP_PLAN=vTipPlan
			   AND VAGOWNER_ID=A.VAGOWNER_ID
			   AND C.DATE_PLAN=A.DATE_PLAN
			   AND C.GROTP_ID=A.KOD_PREDPR
			   AND C.LOAD_TYPE_ID=A.TIP_OTGR
			   AND C.PROD_ID_NPR=A.KOD_NPR
			   AND C.NAPR_MOS_ID=A.EXPORT));

  COMMIT;
  
  -- Удаление плана  
  DELETE FROM GD_PLAN C
    WHERE C.TIP_PLAN=vTipPlan
	  AND C.DATE_PLAN BETWEEN DATE_BEG AND DATE_END
--      AND C.APPL_TAG<>'MASTER'
	  AND NOT EXISTS (SELECT NULL 
		FROM load_buffer.v_gd_plan A
		WHERE A.KOD_PREDPR=C.GROTP_ID
		  AND A.DATE_PLAN=C.DATE_PLAN
		  AND A.TIP_OTGR=C.LOAD_TYPE_ID
		  AND A.KOD_NPR=C.PROD_ID_NPR
		  AND A.EXPORT=C.NAPR_MOS_ID
		  AND A.VAGOWNER_ID=C.VAGOWNER_ID);
		  
  COMMIT;

END Renew_Gd_Plan;

/

--
-- RENEW_GU12_A  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_GU12_A (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
  IsFull NUMBER(1);
BEGIN
  RETURN;

-- Обновление заявок 
  UPDATE /*+ RULE */ GU12_A
    SET (NOM_Z, FROM_DATE, TO_DATE, SOGL_DATE, REG_DATE, DOGOVOR, STANOTPR_ID, 
	     GROTP_ID, EXPED_ID, GR_GRUZ_ID, VIDSOOB_ID, PODACH_ID, SOGL, PLATTAR_ID, 
		 PROD_ID, PRIZNOTPR_ID, VLADPUT_ID, RODVAG_ID, ISCOR) =
	(SELECT 
	   NOM_Z, FROM_DATE, TO_DATE, SOGL_DATE, REG_DATE, DOGOVOR, STANOTPR_ID, 
	   GROTP_ID, EXPED_ID, GR_GRUZ_ID, VIDSOOB_ID, PODACH_ID, SOGL, PLATTAR_ID, 
	   PROD_ID, PRIZNOTPR_ID, VLADPUT_ID, RODVAG_ID, ISCOR
     FROM v_load_gu12_a A 
    WHERE A.fox_kod=GU12_A.fox_kod) 
   WHERE EXISTS (SELECT NULL FROM v_load_gu12_a A WHERE A.fox_kod=GU12_A.fox_kod);

--  COMMIT;

-- Добавление заявок   
  INSERT INTO GU12_A
    (NOM_Z, FROM_DATE, TO_DATE, SOGL_DATE, REG_DATE, DOGOVOR, STANOTPR_ID, 
	 GROTP_ID, EXPED_ID, GR_GRUZ_ID, VIDSOOB_ID, PODACH_ID, SOGL, PLATTAR_ID, 
	 PROD_ID, PRIZNOTPR_ID, VLADPUT_ID, RODVAG_ID, FOX_KOD, ISCOR)
	(SELECT /*+ RULE */ NOM_Z, FROM_DATE, TO_DATE, SOGL_DATE, REG_DATE, DOGOVOR, STANOTPR_ID, 
	        GROTP_ID, EXPED_ID, GR_GRUZ_ID, VIDSOOB_ID, PODACH_ID, SOGL, PLATTAR_ID, 
			PROD_ID, PRIZNOTPR_ID, VLADPUT_ID, RODVAG_ID, FOX_KOD, ISCOR
     FROM v_load_gu12_a A
     WHERE NOT EXISTS (SELECT null FROM GU12_A C WHERE A.fox_kod=C.fox_kod));
--  COMMIT;


-- Удаление рейсов
  DELETE FROM /*+ RULE */ GU12_B WHERE NOT EXISTS
      (SELECT NULL FROM v_load_gu12_b B WHERE B.fox_kod=GU12_B.fox_kod)
	  AND EXISTS
	  (SELECT NULL FROM GU12_A a 
	   WHERE a.FROM_DATE BETWEEN date_beg AND date_end
	     AND a.ID=GU12_B.ID_a);

-- Обновление рейсов  
  UPDATE /*+ RULE */ GU12_B
    SET (PDATE, SOBSTVVAG_ID, STAN_ID, STAN_PER_ID, GRUZPOL_ID, KOL_VAG, VES, 
	     VIDOTPR_ID, MRK, ID_A, 
		 PLAT_ID, FOX_KOD,ISCOR,DATE_LETTER,NOM_LETTER, PRINVAG_ID) =
	(SELECT 
	   PDATE, SOBSTVAG_ID, STAN_ID, STAN_PER_ID, GRUZPOL_ID, KOL_VAG, VES, 
	     VIDOTPR_ID, MRK, A.ID, PLAT_ID, B.FOX_KOD,B.ISCOR,DATE_LETTER,NOM_LETTER, b.PRINVAG_ID
     FROM v_load_gu12_b B, GU12_A A 
    WHERE B.fox_kod=GU12_B.fox_kod AND B.fox_kod_a=A.fox_kod) 
   WHERE EXISTS (SELECT NULL FROM v_load_gu12_b B WHERE B.fox_kod=GU12_B.fox_kod);

-- Добавление рейсов   
  INSERT INTO GU12_B
    (PDATE, SOBSTVVAG_ID, STAN_ID, STAN_PER_ID, GRUZPOL_ID, KOL_VAG, VES, 
	 VIDOTPR_ID, MRK, ID_A, PLAT_ID, FOX_KOD,ISCOR,DATE_LETTER,NOM_LETTER, PRINVAG_ID)
	(SELECT /*+ RULE */ PDATE, SOBSTVAG_ID, STAN_ID, STAN_PER_ID, GRUZPOL_ID, KOL_VAG, VES, 
	        VIDOTPR_ID, MRK, A.ID, PLAT_ID, B.FOX_KOD,B.ISCOR,DATE_LETTER,NOM_LETTER, b.PRINVAG_ID
     FROM v_load_gu12_b B, GU12_A A
     WHERE B.fox_kod_a=A.fox_kod 
       AND NOT EXISTS (SELECT null FROM GU12_B C WHERE C.fox_kod=B.fox_kod));
		 
-- Удаление заявок  
  DELETE FROM /*+ RULE */ GU12_A WHERE NOT EXISTS
      (SELECT NULL FROM v_load_gu12_a a WHERE a.fox_kod=GU12_A.fox_kod)
	  AND GU12_A.FROM_DATE BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_GU12_A;

/

--
-- RENEW_KLS_DOG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Dog (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE KLS_DOG
        SET (dog_number, short_number, predpr_id, dog_year, dog_date, dog_begin_date, dog_end_date, rep_kod,
		     groupdog_id, viddog_id, insure_id, gosprog_id, lukdog_id, usl_opl_id, agent_id,is_agent,unp_id)
        = (SELECT A.long_num, A.NUM_DOG, A.kod_plat, A.god_d, A.date_dog,A.date_begin, A.date_end, A.rep_kod,
		     A.group_, A.vid_dog, A.dog_strah, A.program, NVL(lukdog.id,0), NVL(A.kod_opl,0), A.kod_agent,A.is_agent,A.unp_id 
			 FROM load_buffer.v_dog_2009 A, load_buffer.v_dog_2009 lukdog WHERE A.id=KLS_DOG.id AND A.NUM_DOG2=lukdog.NUM_DOG(+))
    WHERE EXISTS (SELECT A.id FROM load_buffer.v_dog_2009 A WHERE A.id=KLS_DOG.id);
  COMMIT;

  INSERT INTO KLS_DOG (id, dog_number, short_number, predpr_id, dog_year, dog_date, dog_begin_date, dog_end_date, rep_kod,
		     groupdog_id, viddog_id, insure_id,gosprog_id, lukdog_id, usl_opl_id, agent_id,is_agent,unp_id)
	           (SELECT C.id, C.long_num, C.NUM_DOG, C.kod_plat, C.god_d, C.date_dog, C.date_begin, C.date_end, C.rep_kod,
			   C.group_, C.vid_dog, C.dog_strah,c.program,NVL(lukdog.id,0),NVL(C.kod_opl,0), C.kod_agent,C.is_agent,c.unp_id 
			   FROM load_buffer.v_dog_2009 C, load_buffer.v_dog_2009 lukdog
      WHERE C.NUM_DOG2=lukdog.NUM_DOG(+) AND NOT EXISTS (SELECT D.id FROM KLS_DOG D WHERE D.id=C.id));
  COMMIT;

END Renew_Kls_Dog; 
/

--
-- RENEW_KLS_PREDPR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kls_Predpr (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  vBankID NUMBER;
  vID_CLASS NUMBER;
BEGIN

  Renew_Kls_Banks (DATE_BEG,DATE_END);
--  Renew_Kls_Bank_Kors (DATE_BEG,DATE_END);

  UPDATE load_buffer.predpr SET holding = 41 WHERE holding=0 OR holding IS NULL;
  UPDATE load_buffer.predpr SET pertype = 10 WHERE pertype=0 OR pertype IS NULL;

  COMMIT;

  FOR lcur IN (SELECT * FROM load_buffer.predpr) LOOP

    IF lcur.kors_new IS NULL THEN
	  vBankID:=NULL;
	ELSE  
      BEGIN
        SELECT MAX(ID) INTO vBankID
	      FROM KLS_BANKS
	     WHERE kors=RTRIM(LTRIM(lcur.KORS_NEW))
	       AND NVL(bank_name,' ')=NLS_UPPER(NVL(lcur.NAIMB,' '))
  		   AND NVL(ADDRESS,' ')=NLS_UPPER(NVL(lcur.ADRESB,' '))
		   AND NVL(POSTINDEX,0)=NVL(lcur.PINDEXB,0);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN 
          vBankID:=600000+lcur.kod;
	  END;
	END IF;  	  

	vID_CLASS:=TO_NUMBER(NVL(lcur.id_class,'9999999900'));
    UPDATE KLS_PREDPR
      SET (predpr_name, short_name, postindex_j, postindex_p, address_j, address_p, 
	       city_j, city_p, phone, fax, inn, okpo, okonh, email, bank_kors, region_id, holding_id, pertype_id, rs, 
		   banks_id, gd_kod,states_id,class_id,EX_SVID,is_block,okved,kpp,region_p_id,ksss_predpr_id,sf_name) =
          (SELECT lcur.naim, lcur.naim_k, lcur.pindex, lcur.pindex_p, lcur.adres, lcur.adres_p, 
		          lcur.gorod, lcur.gorod_p, lcur.telefon, lcur.fax, lcur.okpo, lcur.kokpo, lcur.kokonx, 
				  lcur.email, RTRIM(LTRIM(lcur.kors_new)), lcur.kobl, lcur.holding, lcur.pertype, lcur.rs_new, 
				  vBankID,lcur.gdkod,lcur.kstr,vID_CLASS,lcur.EX_SVID,lcur.is_block,lcur.okved,lcur.kpp,lcur.kobl_p,lcur.kod_ksss,DECODE(lcur.SF_NAME,NULL,lcur.naim,lcur.SF_NAME)
           FROM dual)
      WHERE KLS_PREDPR.ID=lcur.kod;
    
	IF SQL%NOTFOUND THEN
      INSERT INTO KLS_PREDPR 
	      (ID,predpr_name, short_name, postindex_j, postindex_p, address_j, address_p, 
	       city_j, city_p, phone, fax, inn, okpo, okonh, email, bank_kors, region_id, holding_id, pertype_id, rs, 
		   banks_id, gd_kod,states_id,class_id,EX_SVID,is_block,okved,kpp,region_p_id,ksss_predpr_id,sf_name) 
          VALUES (lcur.kod,lcur.naim, lcur.naim_k, lcur.pindex, lcur.pindex_p, lcur.adres, lcur.adres_p, 
		          lcur.gorod, lcur.gorod_p, lcur.telefon, lcur.fax, lcur.okpo, lcur.kokpo, lcur.kokonx, 
				  lcur.email, RTRIM(LTRIM(lcur.kors_new)), lcur.kobl, lcur.holding, lcur.pertype, lcur.rs_new, 
				  vBankID,lcur.gdkod,lcur.kstr,vID_CLASS,lcur.EX_SVID,lcur.is_block,lcur.okved,lcur.kpp,lcur.kobl_p,lcur.kod_ksss,
				  DECODE(lcur.SF_NAME,NULL,lcur.naim,lcur.SF_NAME));
    END IF; 
  
  END LOOP;
  
  COMMIT;
  
  Renew_Stan_Predpr (DATE_BEG, DATE_END);

  COMMIT;

END Renew_Kls_Predpr;

/

--
-- RENEW_ORG_STRUCTURE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Org_Structure(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  -- Обновление объектов
/*  UPDATE ORG_STRUCTURE B SET
    (NAME, ORG_KIND_ID, WORKSHOP)=
	(SELECT A.OBIEKT, DECODE(A.TIP_OB, 1, 1, 5), TO_CHAR(A.CECH)
	   FROM load_buffer.kod_ob A WHERE A.kod_ob=B.ID)
    WHERE IS_AUTO_KONS=1 AND EXISTS 
  	  (SELECT NULL FROM load_buffer.kod_ob A WHERE A.kod_ob=B.ID);*/

  INSERT INTO ORG_STRUCTURE 
    (ID, ADRESS, NAME, FULL_NAME, ORG_KIND_ID, ORG_TYPE_ID, WORKSHOP)
	SELECT A.KOD_OB, '?', A.OBIEKT, A.OBIEKT, DECODE(A.TIP_OB, 1, 1, 5), 1, TO_CHAR(A.CECH)
	   FROM load_buffer.kod_ob A 
	   WHERE NOT EXISTS (SELECT NULL FROM ORG_STRUCTURE B WHERE A.kod_ob=B.ID)
	    AND kod_ob not in (1091,1092,2033,9071,9072,9073,9074,9075,9080,11022,11029,11034,11036,11044,11046,11083,11084,12001,12002,12007,12008,13001,13002);
	  
  COMMIT;

  -- Обновление связей
  UPDATE ORG_RELATIONS B SET
    (ORG_STRU_2_ID, KIND_RELA_ID)=
	(SELECT C.ID, 1
	   FROM load_buffer.kod_ob A, ORG_STRUCTURE C WHERE A.KOD_FIL=C.FILIAL AND A.kod_ob=B.ORG_STRU_1_ID AND C.IS_AUTO_KONS=1)
    WHERE EXISTS 
  	  (SELECT NULL
	   FROM load_buffer.kod_ob A, ORG_STRUCTURE C WHERE A.KOD_FIL=C.FILIAL AND A.kod_ob=B.ORG_STRU_1_ID AND C.IS_AUTO_KONS=1);

  INSERT INTO ORG_RELATIONS
    (ORG_STRU_1_ID, ORG_STRU_2_ID, KIND_RELA_ID) 
	SELECT A.KOD_OB, C.ID, 1
	   FROM load_buffer.kod_ob A, ORG_STRUCTURE C WHERE A.KOD_FIL=C.FILIAL AND 
	   NOT EXISTS 
  	  (SELECT NULL FROM ORG_RELATIONS B WHERE A.kod_ob=B.ORG_STRU_1_ID)   
  	  AND kod_ob not in (1091,1092,2033,9071,9072,9073,9074,9075,9080,11022,11029,11034,11036,11044,11046,11083,11084,12001,12002,12007,12008,13001,13002);
  
  COMMIT;

END Renew_Org_Structure; 
/

--
-- RENEW_PLAN_POST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Plan_Post (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  PlanPerId NUMBER;
  PlanDate DATE;
  PlanId NUMBER;
BEGIN

  PlanDate:=TO_DATE(param1,'dd.mm.yyyy');
  PlanId:=TO_NUMBER(param2);
  
  
  -- Определяем плановые периоды 
  SELECT ID INTO PlanPerId
    FROM PLAN_PERIODS
   WHERE PLAN_ID=PlanId
     AND DATE_PLAN=TRUNC(PlanDate,'MONTH')
	 AND BEGIN_DATE=TRUNC(PlanDate,'MONTH')
	 AND END_DATE=LAST_DAY(PlanDate);

  -- Обновление плана	 
  UPDATE PLAN_POST C
    SET (PLAN_CENA, PLAN_VES, PLAN_SUM, DATE_CENA, CAT_CEN_ID)
 	 = (SELECT A.CENA_OTP, A.T_ITOG, A.D_ITOG, A.DATE_CEN, A.CAT_CEN 
		FROM load_buffer.plotg A, KLS_PLANSTRU B, KLS_DOG D
		WHERE A.KOD_POS=B.LEVEL_POS
		  AND A.KOD_SGR=B.KOD_SGR
		  AND A.KOD_SPG=B.KOD_SPG
		  AND A.KOD_RZD=B.KOD_RZD
		  AND A.KOD_PRZ=B.KOD_PRZ
		  AND A.KOD_GRP=B.KOD_GRP
		  AND A.KOD_PGR=B.KOD_PGR
		  AND A.N_DOG=D.SHORT_NUMBER
		  AND D.ID=C.DOG_ID
		  AND B.ID=C.PLANSTRU_ID
		  AND A.kod_npr=C.PROD_ID_NPR)
	WHERE EXISTS (SELECT NULL 
		FROM load_buffer.plotg A, KLS_PLANSTRU B, KLS_DOG D
		WHERE A.KOD_POS=B.LEVEL_POS
		  AND A.KOD_SGR=B.KOD_SGR
		  AND A.KOD_SPG=B.KOD_SPG
		  AND A.KOD_RZD=B.KOD_RZD
		  AND A.KOD_PRZ=B.KOD_PRZ
		  AND A.KOD_GRP=B.KOD_GRP
		  AND A.KOD_PGR=B.KOD_PGR
		  AND A.N_DOG=D.SHORT_NUMBER
		  AND D.ID=C.DOG_ID
		  AND B.ID=C.PLANSTRU_ID
		  AND A.kod_npr=C.PROD_ID_NPR)
	  AND C.PLAN_ID=PlanId
	  AND C.PLAN_PER_ID=PlanPerId
	  AND C.PAYFORM_ID=10;

  COMMIT;

  -- Добавление в план  
  INSERT INTO PLAN_POST (PLAN_CENA, PLAN_VES, PLAN_SUM, PLAN_ID, PLAN_PER_ID, PLANSTRU_ID, 
       DOG_ID, PROD_ID_NPR, PAYFORM_ID, DATE_CENA, CAT_CEN_ID, APPL_TAG)
   (SELECT A.CENA_OTP, A.T_ITOG, A.D_ITOG, PlanId, PlanPerId, B.ID, 
       D.ID, A.kod_npr, 10, A.DATE_CEN, A.CAT_CEN, '' 
		FROM load_buffer.plotg A, KLS_PLANSTRU B, KLS_DOG D
		WHERE A.KOD_POS=B.LEVEL_POS
		  AND A.KOD_SGR=B.KOD_SGR
		  AND A.KOD_SPG=B.KOD_SPG
		  AND A.KOD_RZD=B.KOD_RZD
		  AND A.KOD_PRZ=B.KOD_PRZ
		  AND A.KOD_GRP=B.KOD_GRP
		  AND A.KOD_PGR=B.KOD_PGR
		  AND A.N_DOG=D.SHORT_NUMBER
  		  AND NOT EXISTS 
		    (SELECT NULL 
			 FROM PLAN_POST C 
			 WHERE C.PLAN_ID=PlanId
			   AND C.PLAN_PER_ID=PlanPerId
			   AND C.PAYFORM_ID=10
			   AND C.DOG_ID=D.ID
			   AND C.PLANSTRU_ID=B.ID
			   AND C.PROD_ID_NPR=A.kod_npr));

  COMMIT;

  -- Удаление из рабочего плана  
  DELETE FROM PLAN_POST C
    WHERE C.PLAN_ID=PlanId
	  AND C.PLAN_PER_ID=PlanPerId
	  AND C.PAYFORM_ID=10
      AND (C.APPL_TAG<>'MASTER' or C.APPL_TAG IS NULL)
	  AND NOT EXISTS (SELECT NULL 
		FROM load_buffer.plotg A, KLS_PLANSTRU B, KLS_DOG D
		WHERE A.KOD_POS=B.LEVEL_POS
		  AND A.KOD_SGR=B.KOD_SGR
		  AND A.KOD_SPG=B.KOD_SPG
		  AND A.KOD_RZD=B.KOD_RZD
		  AND A.KOD_PRZ=B.KOD_PRZ
		  AND A.KOD_GRP=B.KOD_GRP
		  AND A.KOD_PGR=B.KOD_PGR
		  AND A.N_DOG=D.SHORT_NUMBER
          AND D.ID=C.DOG_ID
		  AND B.ID=C.PLANSTRU_ID
		  AND A.kod_npr=C.PROD_ID_NPR);
  COMMIT;

END Renew_Plan_Post; 
/

--
-- RENEW_R3_BILL_POS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_R3_Bill_Pos (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN
  RETURN;

  IF param1 || ' ' = ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавляем продукты в справочник 
  INSERT INTO R3_MATERIALS (VBAP_MATNR, MAKTX)
    (SELECT DISTINCT A.VBAP_MATNR, NVL(M.NAME,'') FROM load_buffer.V_R3_BILL_POS A, load_buffer.r3_makt M
	 WHERE A.VBAP_MATNR=M.MATNR(+)
	   AND NOT EXISTS
	   (SELECT NULL FROM R3_MATERIALS B WHERE B.VBAP_MATNR=A.VBAP_MATNR));
  COMMIT;
  	   
  -- Обновление позиций 
  UPDATE R3_BILL_POS
    SET (VES, CENA_BN, CENA, SUMMA_BN, SUMMA_NDS, SUMMA_AKCIZ, SUMMA, VBAP_MATNR, PROD_ID_NPR, OWNERSHIP_ID) =
	(SELECT a.VES, a.CENA_BN, a.CENA, a.SUMMA_BN, a.SUMMA_NDS20, a.SUMMA_AKCIZ,
            a.SUMMA, a.VBAP_MATNR, TO_CHAR(10000+A.BILL_POS_ID), DECODE(A.BILL_POS_ID,1,1,11,13,12,13,0)
  	   FROM load_buffer.v_r3_bill_pos A 
  	  WHERE A.VBELN=R3_BILL_POS.VBELN 
		AND a.bill_pos_id=R3_BILL_POS.R3_BILL_POS_ID)
    WHERE EXISTS 
	(SELECT NULL
  	   FROM load_buffer.v_r3_bill_pos A 
  	  WHERE A.VBELN=R3_BILL_POS.VBELN 
		AND a.bill_pos_id=R3_BILL_POS.R3_BILL_POS_ID);
  COMMIT;

  -- Добавляем позиции  
  INSERT INTO R3_BILL_POS
    (VBELN, R3_BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_NDS, SUMMA_AKCIZ, SUMMA, VBAP_MATNR, PROD_ID_NPR,OWNERSHIP_ID)
	(SELECT a.VBELN,a.BILL_POS_ID, a.VES,a.CENA_BN, a.CENA, a.SUMMA_BN, a.SUMMA_NDS20, a.SUMMA_AKCIZ,
            a.SUMMA, a.VBAP_MATNR, TO_CHAR(10000+A.BILL_POS_ID), DECODE(A.BILL_POS_ID,1,1,11,13,12,13,0)
  	   FROM load_buffer.v_r3_bill_pos A
     WHERE NOT EXISTS 
      (SELECT NULL FROM R3_BILL_POS C WHERE C.VBELN=A.VBELN AND C.R3_BILL_POS_ID=A.BILL_POS_ID)
	   AND EXISTS
      (SELECT NULL FROM R3_BILLS C WHERE C.VBELN=A.VBELN));
  COMMIT;

  -- Обновление NOM_DOK  
  UPDATE R3_BILL_POS B
    SET (NOM_DOK,IS_AGENT,DATE_REALIZ) =
	(SELECT A.NOM_DOK,A.IS_AGENT,A.DATE_VYP_SF FROM R3_BILLS A WHERE A.VBELN=B.VBELN)
   WHERE EXISTS 
	(SELECT NULL FROM R3_BILLS A WHERE A.VBELN=B.VBELN);
  COMMIT;
  
  -- Обновляем позицию R3_BILL_POS_ID=1
  UPDATE R3_BILL_POS A 
    SET (PROD_ID_NPR,CENA_BN,CENA)=
	(SELECT B.PROD_ID_NPR,B.CENA_BN,B.CENA
	 FROM BILL_POS B WHERE B.NOM_DOK=A.NOM_DOK AND B.BILL_POS_ID=1) 
  WHERE A.R3_BILL_POS_ID=1
    AND EXISTS (SELECT NULL FROM BILL_POS B WHERE B.NOM_DOK=A.NOM_DOK AND B.BILL_POS_ID=1); 
  COMMIT;
  	
  -- Удаляем позиции
  IF IsFull=1 THEN
    DELETE FROM R3_BILL_POS WHERE NOT EXISTS
      (SELECT NULL FROM load_buffer.v_r3_bills a WHERE a.VBELN=R3_BILL_POS.VBELN);
    COMMIT;
    DELETE FROM R3_BILL_POS WHERE NOT EXISTS
      (SELECT NULL FROM load_buffer.v_r3_bill_pos a WHERE a.VBELN=R3_BILL_POS.VBELN AND a.bill_pos_id=R3_BILL_POS.R3_BILL_POS_ID);
    COMMIT;
    NULL; 
  END IF;
  COMMIT;	

END Renew_R3_Bill_Pos;

/

--
-- RENEW_R3_BILLS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_R3_Bills (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
  IsFull NUMBER(1);
BEGIN
  RETURN;
  
  IF param1 || ' ' = ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Обновление счетов R3 
  UPDATE R3_BILLS
    SET (NOM_R3, NOM_DOK, DATE_VYP_SF, IS_AGENT, NOM_SF, SUMMA_DOK, SUMMA_PROD, SUMMA_PROD_NDS, SUMMA_AKCIZ, 
	     SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_VOZN, SUMMA_VOZN_NDS, SUMMA_STRAH, VBAP_MATNR,VES) =
	(SELECT 
	   A.NOM_R3, NULL, A.DATE_VYP_SF, 3, A.NOM_SF, A.SUMMA_DOK,A.SUMMA_PROD,A.SUMMA_PROD_NDS,A.SUMMA_AKCIZ,
	     A.SUMMA_TARIF,A.SUMMA_TARIF_NDS,A.SUMMA_VOZN,A.SUMMA_VOZN_NDS,A.SUMMA_STRAH,A.VBAP_MATNR,A.VES
     FROM load_buffer.v_r3_bills A
    WHERE A.VBELN=R3_BILLS.VBELN) 
   WHERE EXISTS 
	(SELECT NULL 
     FROM load_buffer.v_r3_bills A
    WHERE A.VBELN=R3_BILLS.VBELN); 
  COMMIT;

  -- Добавление счетов R3   
  INSERT INTO R3_BILLS
    (VBELN, NOM_R3, NOM_DOK, DATE_VYP_SF, IS_AGENT, NOM_SF, SUMMA_DOK, SUMMA_PROD, SUMMA_PROD_NDS, 
	 SUMMA_AKCIZ, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_VOZN, SUMMA_VOZN_NDS, SUMMA_STRAH,VBAP_MATNR,VES)
	(SELECT A.VBELN, A.NOM_R3, NULL, A.DATE_VYP_SF, 3, A.NOM_SF, A.SUMMA_DOK,A.SUMMA_PROD,A.SUMMA_PROD_NDS,A.SUMMA_AKCIZ,
	     A.SUMMA_TARIF,A.SUMMA_TARIF_NDS,A.SUMMA_VOZN,A.SUMMA_VOZN_NDS,A.SUMMA_STRAH,A.VBAP_MATNR,A.VES
	FROM load_buffer.v_r3_bills A
     WHERE NOT EXISTS (SELECT NULL FROM R3_BILLS C WHERE C.VBELN=A.VBELN));
  COMMIT;

  -- Проставить NOM_DOK
  UPDATE R3_BILLS
    SET (NOM_DOK,IS_AGENT) =
	(SELECT DISTINCT A.NOM_DOK,A.IS_AGENT
       FROM BILLS A 
      WHERE A.nom_sf=R3_BILLS.nom_sf AND A.DATE_VYP_SF>=TO_DATE('01.01.2003','dd.mm.yyyy') AND NVL(A.OLD_NOM_DOK,0)=0)
   WHERE EXISTS 
	(SELECT NULL
       FROM BILLS A 
      WHERE A.nom_sf=R3_BILLS.nom_sf AND A.DATE_VYP_SF>=TO_DATE('01.01.2003','dd.mm.yyyy') AND NVL(A.OLD_NOM_DOK,0)=0);
  COMMIT;
   
-- Обновление позиций счетов  
  Renew_R3_Bill_Pos(DATE_BEG,DATE_END,PARAM1);

  IF IsFull=1 THEN
    DELETE FROM R3_BILLS WHERE NOT EXISTS
      (SELECT NULL FROM load_buffer.v_r3_bills a WHERE a.VBELN=R3_BILLS.VBELN);
    NULL; 
  END IF;
  COMMIT;
END Renew_R3_Bills;

/

--
-- RENEW_SOOB_EXP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Soob_Exp (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE MASTER.SOOB_EXP M_S
    SET (SORTBY, DOG_ID, PROD_ID_NPR, STAN_ID, EXPED_ID, LOAD_TYPE_ID, 
	     FACT_YEAR, PLAN_POST, PLAN_IZM, OBPR, PLAN_GD, NORMA_MON, 
		 FACT_MON, FACT_SUT, IS_BAD, PRICH, ZAPR_MPS
		 )
	 = (SELECT SORTBY, D.ID, PROD_KOD, S.ID, E.PREDPR_ID, VID_TRANS, 
	     FACT_YEAR, PLAN_POST, PLAN_IZM, OBPR, PLAN_GD, NORMA_MON, 
		 FACT_MON, FACT_SUT, IS_BAD, PRICH, ZAPR_MPS
          FROM load_buffer.SOOB_EXP L_S, KLS_DOG D, KLS_STAN S, PREDPR_ROLE E
		 WHERE L_S.NUM_DOG=D.SHORT_NUMBER
		   AND TO_NUMBER(L_S.STAN_KOD)=S.STAN_KOD
		   AND L_S.EXPED_KOD=E.KOD_MOSCOW
		   AND E.KLS_ROLE_ID=3
		   AND L_S.REP_DATE=M_S.REP_DATE
		   AND L_S.ID=M_S.POS_ID)
    WHERE EXISTS (SELECT NULL
          FROM load_buffer.SOOB_EXP L_S
		 WHERE L_S.REP_DATE=M_S.REP_DATE
		   AND L_S.ID=M_S.POS_ID);
  COMMIT;

  INSERT INTO MASTER.SOOB_EXP 
        (REP_DATE, POS_ID, SORTBY, DOG_ID, PROD_ID_NPR, STAN_ID, EXPED_ID, 
		 LOAD_TYPE_ID, FACT_YEAR, PLAN_POST, PLAN_IZM, OBPR, PLAN_GD, NORMA_MON, 
		 FACT_MON, FACT_SUT, IS_BAD, PRICH, ZAPR_MPS)
	 (SELECT REP_DATE,L_S.ID,SORTBY, D.ID, PROD_KOD, S.ID, E.PREDPR_ID, VID_TRANS, 
  	         FACT_YEAR, PLAN_POST, PLAN_IZM, OBPR, PLAN_GD, NORMA_MON, 
		     FACT_MON, FACT_SUT, IS_BAD, PRICH, ZAPR_MPS
          FROM load_buffer.SOOB_EXP L_S, KLS_DOG D, KLS_STAN S, PREDPR_ROLE E
		 WHERE L_S.NUM_DOG=D.SHORT_NUMBER
		   AND TO_NUMBER(L_S.STAN_KOD)=S.STAN_KOD
		   AND L_S.EXPED_KOD=E.KOD_MOSCOW
		   AND E.KLS_ROLE_ID=3
		   AND NOT EXISTS (SELECT NULL FROM MASTER.SOOB_EXP M_S 
                        	 WHERE L_S.REP_DATE=M_S.REP_DATE
                    		   AND L_S.ID=M_S.POS_ID));

   COMMIT;

  DELETE FROM MASTER.SOOB_EXP M_S 
    WHERE NOT EXISTS 
	  (SELECT NULL 
          FROM load_buffer.SOOB_EXP L_S
		 WHERE L_S.REP_DATE=M_S.REP_DATE
		   AND L_S.ID=M_S.POS_ID)
    AND M_S.REP_DATE BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_Soob_Exp;

/

--
-- RENEW_SPECIF  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Specif (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE MASTER.SPECIF M_S
    SET (DOG_ID, PROD_ID_NPR, LOAD_ABBR, STANOTP_ID, STAN_ID, VETKA_ID, POLUCH_ID, POTREB_ID, 
	     PRIM, GR4, BEGIN_DATE, END_DATE, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, 
		 KV1, KV2, KV3, KV4, VES_ALL, UPDATE_DATE, MONTH_ALL_ID)
	 = (SELECT D.ID, L_S.kod_npr, L_S.otgr, 2250, S.ID, L_S.KVET, DECODE(L_S.KOD_POLUCH,99999,0,L_S.KOD_POLUCH), L_S.KOD_POTREB,
	     NVL(L_S.PRIM,' '), L_S.GR4, L_S.VV_DAT, TO_DATE('31.12.'||TO_CHAR(L_S.GOD_SP),'dd.mm.yyyy'), 
		 M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, KV1, KV2, KV3, KV4, VSEGO,L_S.KR_DAT,L_S.ZAKAZ_ID 
        FROM load_buffer.SPECIF L_S, KLS_DOG D, KLS_STAN S
		 WHERE L_S.NUM_DOG = D.SHORT_NUMBER 
		   AND L_S.KST = S.STAN_KOD
		   AND L_S.ID=M_S.ID)
    WHERE EXISTS (SELECT NULL
        FROM load_buffer.SPECIF L_S, KLS_DOG D, KLS_STAN S
		 WHERE L_S.NUM_DOG = D.SHORT_NUMBER 
		   AND L_S.KST = S.STAN_KOD
		   AND L_S.ID=M_S.ID);
  COMMIT;

  INSERT INTO MASTER.SPECIF
        (ID, DOG_ID, PROD_ID_NPR, LOAD_ABBR, STANOTP_ID, STAN_ID, VETKA_ID, POLUCH_ID, POTREB_ID, 
	     PRIM, GR4, BEGIN_DATE, END_DATE, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, 
		 KV1, KV2, KV3, KV4, VES_ALL, UPDATE_DATE, MONTH_ALL_ID)
	 (SELECT L_S.ID, D.ID,L_S.kod_npr,L_S.otgr,2250,S.ID,L_S.KVET,DECODE(L_S.KOD_POLUCH,99999,0,L_S.KOD_POLUCH),
	     L_S.KOD_POTREB, NVL(L_S.PRIM,' '), L_S.GR4, L_S.VV_DAT,TO_DATE('31.12.'||TO_CHAR(L_S.GOD_SP),'dd.mm.yyyy'),  
		 M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, KV1, KV2, KV3, KV4, VSEGO,L_S.KR_DAT,L_S.ZAKAZ_ID 
        FROM load_buffer.SPECIF L_S, KLS_DOG D, KLS_STAN S
		 WHERE L_S.NUM_DOG = D.SHORT_NUMBER 
		   AND L_S.KST = S.STAN_KOD
		   AND NOT EXISTS (SELECT NULL FROM MASTER.SPECIF M_S WHERE M_S.ID=L_S.ID)); 
   COMMIT;

  DELETE FROM MASTER.SPECIF M_S 
   WHERE NOT EXISTS (SELECT NULL FROM load_buffer.SPECIF L_S WHERE L_S.ID=M_S.ID)
     AND M_S.update_date BETWEEN date_beg AND date_end;

  COMMIT;

END Renew_Specif;

/

--
-- RENEW_USL_DOG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Usl_Dog (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  UPDATE USL_DOG
    SET (USL_NUMBER, PROC_PRED, USL_UTV, USL_BAZ, USL_AKT, PROC_PENI, USL_BEGIN_DATE, PROC_INSURE,
		 NEUST, USL_NAME, PAYDELAY_DATE, USL_SUM, KOL_DN, USL_END_DATE, PAYDELAY_ID, PAYFORM_ID,
		 DOG_ID, CAT_CEN_ID, VID_USL_ID, ID, NPOCAT_CEN_ID,R3_NUM_ISP,USL_SUM_AREND)
 	 = (SELECT A.K_USL, A.PROC_PRED, A.P_UT, A.P_BAZ, A.P_AKT, A.PROC_PENI, A.DATE_BEGIN, A.PROC_ST,
	    A.NEUST2, A.NM_USL, A.D_OTSR,  A.US_T, A.KOL_DAYS, A.DATE_END, A.P_OTSR, A.K_FOPL,
		B.ID, A.KATEG_CEN, A.K_US_T, A.ID, A.KAT_CENNPO, A.R3_NAPR,A.US_T_AREND FROM load_buffer.u_dog A, load_buffer.v_dog_2009 B
		WHERE A.N_DOG = B.NUM_DOG AND a.k_usl=USL_DOG.USL_NUMBER AND B.ID=USL_DOG.DOG_ID)
	WHERE EXISTS (SELECT * FROM load_buffer.u_dog A, load_buffer.v_dog_2009 B WHERE A.K_USL = USL_DOG.USL_NUMBER AND B.ID=USL_DOG.DOG_ID AND A.N_DOG = B.NUM_DOG);

  COMMIT;

  INSERT INTO USL_DOG (USL_NUMBER, PROC_PRED, USL_UTV, USL_BAZ, USL_AKT, PROC_PENI, USL_BEGIN_DATE, PROC_INSURE,
		 NEUST, USL_NAME, PAYDELAY_DATE, USL_SUM, KOL_DN, USL_END_DATE, PAYDELAY_ID, PAYFORM_ID,
		 DOG_ID, CAT_CEN_ID, VID_USL_ID, ID, NPOCAT_CEN_ID,R3_NUM_ISP,USL_SUM_AREND)
   (SELECT C.K_USL, C.PROC_PRED, C.P_UT, C.P_BAZ, C.P_AKT, C.PROC_PENI, C.DATE_BEGIN, C.PROC_ST,
           C.NEUST2, C.NM_USL, C.D_OTSR,  C.US_T, C.KOL_DAYS, C.DATE_END, C.P_OTSR, C.K_FOPL,
           D.ID, C.KATEG_CEN, C.K_US_T, C.ID, c.KAT_CENNPO,C.R3_NAPR,C.US_T_AREND FROM load_buffer.u_dog C, load_buffer.v_dog_2009 D
     WHERE C.N_DOG = D.NUM_DOG AND
		NOT EXISTS (SELECT USL_DOG.USL_NUMBER, USL_DOG.DOG_ID FROM USL_DOG WHERE C.K_USL = USL_DOG.USL_NUMBER AND D.ID=USL_DOG.DOG_ID));

  COMMIT;
  
  UPDATE USL_DOG
    SET (USL_NUMBER, PROC_PRED, USL_UTV, USL_BAZ, USL_AKT, PROC_PENI, USL_BEGIN_DATE, PROC_INSURE,
		 NEUST, USL_NAME, PAYDELAY_DATE, USL_SUM, KOL_DN, USL_END_DATE, PAYDELAY_ID, PAYFORM_ID,
		 DOG_ID, CAT_CEN_ID, VID_USL_ID, ID, NPOCAT_CEN_ID,R3_NUM_ISP,USL_SUM_AREND)
 	 = (SELECT A.K_USL, A.PROC_PRED, A.P_UT, A.P_BAZ, A.P_AKT, A.PROC_PENI, A.DATE_BEGIN, A.PROC_ST,
	    A.NEUST2, A.NM_USL, A.D_OTSR,  A.US_T, A.KOL_DAYS, A.DATE_END, A.P_OTSR, A.K_FOPL,
		B.ID, A.KATEG_CEN, A.K_US_T, 100000+A.ID, A.KAT_CENNPO, A.R3_NAPR,A.US_T_AREND 
        FROM load_buffer.u_dog A, load_buffer.v_dog_2009 B
		WHERE '.'||A.N_DOG = B.NUM_DOG AND a.k_usl=USL_DOG.USL_NUMBER AND B.ID=USL_DOG.DOG_ID)
	WHERE EXISTS (SELECT * FROM load_buffer.u_dog A, load_buffer.v_dog_2009 B 
               WHERE A.K_USL = USL_DOG.USL_NUMBER AND B.ID=USL_DOG.DOG_ID AND '.'||A.N_DOG = B.NUM_DOG);

  COMMIT;

  INSERT INTO USL_DOG (USL_NUMBER, PROC_PRED, USL_UTV, USL_BAZ, USL_AKT, PROC_PENI, USL_BEGIN_DATE, PROC_INSURE,
		 NEUST, USL_NAME, PAYDELAY_DATE, USL_SUM, KOL_DN, USL_END_DATE, PAYDELAY_ID, PAYFORM_ID,
		 DOG_ID, CAT_CEN_ID, VID_USL_ID, ID, NPOCAT_CEN_ID,R3_NUM_ISP,USL_SUM_AREND)
   (SELECT C.K_USL, C.PROC_PRED, C.P_UT, C.P_BAZ, C.P_AKT, C.PROC_PENI, C.DATE_BEGIN, C.PROC_ST,
           C.NEUST2, C.NM_USL, C.D_OTSR,  C.US_T, C.KOL_DAYS, C.DATE_END, C.P_OTSR, C.K_FOPL,
           D.ID, C.KATEG_CEN, C.K_US_T, 100000+C.ID, c.KAT_CENNPO,C.R3_NAPR,C.US_T_AREND FROM load_buffer.u_dog C, load_buffer.v_dog_2009 D
     WHERE '.'||C.N_DOG = D.NUM_DOG AND
		NOT EXISTS (SELECT USL_DOG.USL_NUMBER, USL_DOG.DOG_ID FROM USL_DOG WHERE C.K_USL = USL_DOG.USL_NUMBER AND D.ID=USL_DOG.DOG_ID));

  COMMIT;

  --- Добавить базовые условия для договоров без условий 
  INSERT INTO USL_DOG (USL_NUMBER, PROC_PRED, USL_UTV, USL_BAZ, USL_AKT, PROC_PENI, USL_BEGIN_DATE, PROC_INSURE,
		 NEUST, USL_NAME, PAYDELAY_DATE, USL_SUM, KOL_DN, USL_END_DATE, PAYDELAY_ID, PAYFORM_ID,
		 DOG_ID, CAT_CEN_ID, VID_USL_ID, ID, NPOCAT_CEN_ID)
   (SELECT 1, D.PROC_PRED, 0, 1, 0, D.PROC_PENI, D.DATE_BEGIN, D.PROC_ST,
           D.NEUST2, 'БАЗОВОЕ УСЛОВИЕ', NULL,  0, NVL(UO.KOL_DN,D.KOL_DAYS), D.DATE_END, 1, 10,
           D.ID, D.KATEG_CEN, 0, 600000+D.ID, 999 
           FROM load_buffer.v_dog_2009 D, KLS_USL_OPL UO
     WHERE D.KOD_OPL=UO.ID(+) AND NOT EXISTS (SELECT USL_DOG.ID FROM USL_DOG WHERE D.ID=USL_DOG.DOG_ID AND 1=USL_DOG.USL_NUMBER));

  COMMIT;	  
---  DELETE FROM usl_dog WHERE NOT EXISTS (SELECT E.K_USL, F.ID from load_buffer.u_dog E, load_buffer.dog F
---    WHERE E.K_USL = usl_dog.USL_NUMBER AND F.ID=usl_dog.DOG_ID);
  UPDATE USL_DOG SET NPOCAT_CEN_ID=999 WHERE NPOCAT_CEN_ID=0; 
  COMMIT;
END Renew_Usl_Dog; 
/

--
-- GET_ISAGENT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_IsAgent(ALUK_DOG_ID NUMBER, ALUK_DOG_NUMBER VARCHAR2, ADOG_ID NUMBER, ADOG_NUMBER VARCHAR2)
  RETURN NUMBER IS
  vLUK_DOG_NUMBER VARCHAR2(250);
  vLUK_DOG_ID NUMBER;
  vDOG_NUMBER VARCHAR2(250);
  res NUMBER;
BEGIN
  vLUK_DOG_NUMBER:=RTrim(LTrim(NVL(ALUK_DOG_NUMBER,'')));
  vLUK_DOG_ID:=NVL(ALUK_DOG_ID,0);
  vDOG_NUMBER:=RTrim(LTrim(NVL(ADOG_NUMBER,'')));
  res:=1;

  IF vLUK_DOG_ID<>0 AND vLUK_DOG_NUMBER || ' '<> ' ' THEN
    BEGIN
      SELECT IS_AGENT INTO res FROM KLS_DOG WHERE KLS_DOG.DOG_NUMBER=vLUK_DOG_NUMBER;
	EXCEPTION
	  WHEN OTHERS THEN
	    res:=1;
	END;	    
  ELSE
    BEGIN
      SELECT IS_AGENT INTO res FROM KLS_DOG WHERE KLS_DOG.DOG_NUMBER=vDOG_NUMBER;
	EXCEPTION
	  WHEN OTHERS THEN
	    res:=1;
	END;	    
  END IF;
  
  RETURN res;	  		
End;

/

--
-- GET_PLAT_OKPO  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.get_plat_okpo
 (nom_dok# number)
return varchar2
as
  val# varchar2(50);
--  propis# varchar2(4000);
begin
  select kls_predpr.OKPO into val# from kls_predpr,kls_dog,bills
    where kls_predpr.id=kls_dog.PREDPR_ID and bills.dog_id=kls_dog.id and bills.nom_dok=nom_dok#;

  return val#;
end get_plat_okpo;

/

--
-- GET_PRICE_PROTOKOL_FAST  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Price_Protokol_Fast
 (nom_dok# NUMBER, kod_npr# VARCHAR2, date_kvit# DATE, dog_id# NUMBER, usl_number# NUMBER, date_vyp_sf# DATE, nom_sf# NUMBER, old_nom_sf# NUMBER)
RETURN VARCHAR2
AS
  val# VARCHAR2(50);
  cat_cen# NUMBER;
  date_cena# DATE;
  begin_date# DATE;
BEGIN
  SELECT USL_DOG.CAT_CEN_ID INTO cat_cen# FROM USL_DOG
    WHERE DOG_ID#=USL_DOG.dog_id AND USL_NUMBER#=USL_DOG.USL_NUMBER;

  -- Определяем дату
  IF NVL(old_nom_sf#,0)<>0 AND NVL(old_nom_sf#,0)<>NVL(nom_sf#,0) THEN
    -- Если счет корректирует другой счет (но не минусовой) - по дате счета
    date_cena#:=date_vyp_sf#;
  ELSE
    -- Если счет оригинальный или минусовой - по дате квитанции
    date_cena#:=date_kvit#;
  END IF;		

  BEGIN  
    SELECT MAX(begin_date) 
	  INTO begin_date# 
	  FROM NPR_PRICES b 
     WHERE b.cat_cen_id=cat_cen# 
       AND b.prod_id_npr=kod_npr# 
  	   AND b.begin_date<=date_cena# 
	   AND b.is_original=1;
	   
    SELECT MAX(DECODE(a.PROTOKOL_NUM,NULL,'',a.PROTOKOL_NUM || ' от ' || TO_CHAR(a.PROTOKOL_DATE,'dd.mm.yy') || 'г.')) 
      INTO val# FROM NPR_PRICES a
     WHERE a.begin_date=begin_date# 
       AND a.cat_cen_id=cat_cen# 
	   AND a.prod_id_npr=kod_npr# 
	   AND a.is_original=1;
	   
    RETURN val#;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN '';		 
  END;
END Get_Price_Protokol_Fast;

/

--
-- GET_REZ_VOL  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.get_rez_vol(ln_prod number, ln_org number, ls_par varchar2)
return  number 
is
result number;
begin
result:=0;
if ls_par = 'DEAD' then
select sum (arc_rez.dead_vol) into result 
from arc_Rez 
where Org_Stru_Id = ln_org
and prod_id_npr = ln_prod
group by Org_Stru_Id, prod_id_npr
order by Org_Stru_Id, prod_id_npr;
end if;
return(nvl(Result,0));
end; 
/

--
-- V_AND_AZS_REALIZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AND_AZS_REALIZ
(PROD_ID_NPR, PROD_NAME, KSSS_PROD_ID, ORG_STRU_ID, ORG_NAME, 
 KSSS_ORG_ID, DATE_OPER, FACT_SUM, FACT)
AS 
SELECT pr.prod_id_npr, pr.NAME AS prod_name, prod.ksss_prod_id,
       org.org_stru_id, org.NAME AS org_name, os.ksss_id AS ksss_org_id,
       fr.date_oper, fr.fact_sum, fr.fact
  FROM load_fil_realiz fr,
       load_fil_prod pr,
       load_fil_org org,
       kls_prod prod,
       org_structure os
 WHERE pr.ID = fr.fil_prod_id
   AND org.ID = fr.fil_org_id
   AND org.org_stru_id = os.ID
   AND pr.prod_id_npr = prod.id_npr
   AND fr.date_oper > '01-dec-2005'
   AND fr.type_oper_id = 1
   AND org.org_kind_id = 5;


--
-- V_AZC_ALLSNPR_OPT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_ALLSNPR_OPT
(NAME, NAME_NPR, VES, VOL, DATE_OPER)
AS 
SELECT C.NAME, B.NAME_NPR, SUM (A.VES) AS VES, SUM(A.VolUME) AS VOL, a.DATE_OPER
FROM AZC_OPERATION A, KLS_PROD B, AZC_PROD_GROUP C, KLS_ORG_KIND D, ORG_STRUCTURE E
WHERE 
A.PROD_ID_NPR = B.ID_NPR
AND B.AZC_PR_GRP_ID  = C.ID
AND A.TYPE_OPER_ID = 1
AND a.ORG_STRU_ID = E.ID
AND E.ORG_KIND_ID = D.ID
AND D.GROUP_KIND_ID <> 2
GROUP BY C.NAME, B.NAME_NPR,a.DATE_OPER
UNION
--приход оптом
SELECT C.NAME, B.NAME_NPR, SUM (A.VES) AS VES, SUM(A.VolUME) AS VOL, a.DATE_OPER  
FROM AZC_OPERATION A, KLS_PROD B, AZC_PROD_GROUP C, KLS_ORG_KIND D, ORG_STRUCTURE E
WHERE 
A.PROD_ID_NPR = B.ID_NPR
AND B.AZC_PR_GRP_ID  = C.ID
AND A.TYPE_OPER_ID = 4
AND a.ORG_STRU_ID = E.ID
AND E.ORG_KIND_ID = D.ID
AND D.GROUP_KIND_ID <> 2
GROUP BY C.NAME, B.NAME_NPR,a.DATE_OPER;


--
-- V_AZC_ORG  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_ORG
(ID_ORG, NAME_ORG, ID_PARENT_ORG, ID_ORG_TYPE, IS_ROOT)
AS 
SELECT ORG_RELATIONS.ORG_STRU_1_ID, ORG_STRUCTURE.NAME, DECODE(ORG_RELATIONS.ORG_STRU_2_ID,ORG_RELATIONS.ORG_STRU_1_ID, 0,ORG_RELATIONS.ORG_STRU_2_ID),
ORG_STRUCTURE.ORG_TYPE_ID,ORG_RELATIONS.is_root
FROM ORG_RELATIONS, ORG_STRUCTURE
WHERE ORG_STRUCTURE.ID = ORG_RELATIONS.ORG_STRU_1_ID
ORDER BY ORG_STRUCTURE.NAME;


--
-- V_AZC_REALIZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_REALIZ
(ID_SOBSTV, ID_ORG, ID_NPR, DATE_OP, SUMMA_VOL, 
 SUMMA_VES)
AS 
SELECT   /*+ FIRST_ROWS*/
            a.sobstv_id AS id_sobstv, a.org_stru_id AS id_org,
            a.prod_id_npr AS id_npr, a.date_oper AS date_op,
            SUM (a.volume) AS summa_vol, SUM (a.ves) AS summa_ves
       FROM azc_operation a, azc_type_operation b
      WHERE a.type_oper_id = b.ID AND b.kind_oper = 2
   GROUP BY a.date_oper, a.sobstv_id, a.org_stru_id, a.prod_id_npr
   ORDER BY a.date_oper, a.sobstv_id, a.org_stru_id, a.prod_id_npr;


--
-- V_AZC_REALIZ_LIKARD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZC_REALIZ_LIKARD
(ID_SOBSTV, ID_PROD, ID_ORG, SUMMA_VOL, SUMMA_VES)
AS 
select A.SOBSTV_ID as ID_SOBSTV, A.PROD_ID_NPR AS ID_PROD, A.ORG_STRU_ID as ID_ORG, SUM(A.VOLUME)  as SUMMA_VOL, SUM(A.VES) as SUMMA_VES   from azc_realiz_likard A
  GROUP BY A.SOBSTV_ID, A.PROD_ID_NPR, A.ORG_STRU_ID;


--
-- V_AZCREP_OST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AZCREP_OST
(END_DATE, ID, ID_NPR, OST)
AS 
SELECT A.END_DATE,B.ID, C.ID_NPR, (FOR_AZC.GET_AZC_OST_VOL(B.ID, C.ID_NPR, 1, A.END_DATE)) as OST FROM V_MASTER_REPORTS A,ORG_STRUCTURE B, KLS_PROD C
WHERE C.AZC_PR_GRP_ID is NOT NULL;


--
-- V_BILL_POS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILL_POS
(NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, 
 SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA_GSM25, SUMMA, 
 CENA_POKUP, SUMMA_BN_POKUP, SUMMA_NDS20_POKUP, SUMMA_GSM25_POKUP, DATE_REALIZ, 
 ID_OLD, PROD_ID_NPR, OWNERSHIP_ID, ANALIT_ID, NACENKA)
AS 
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_DATE_REALIZ) */
  -- Позиции счетов-фактур из комплекса ФИНАНСЫ
  BILL_POS.NOM_DOK,
  BILL_POS.BILL_POS_ID,
  BILL_POS.VES,
  BILL_POS.CENA_BN,
  BILL_POS.CENA,
  BILL_POS.SUMMA_BN,
  BILL_POS.SUMMA_AKCIZ,
  BILL_POS.SUMMA_NDS20,
  BILL_POS.SUMMA_GSM25,
  BILL_POS.SUMMA,
  BILL_POS.CENA_POKUP,
  BILL_POS.SUMMA_BN_POKUP,
  BILL_POS.SUMMA_NDS20_POKUP,
  BILL_POS.SUMMA_GSM25_POKUP,
  BILL_POS.DATE_REALIZ,
  BILL_POS.ID_OLD,
  BILL_POS.PROD_ID_NPR,
  BILL_POS.OWNERSHIP_ID,
  BILL_POS.ANALIT_ID,
  BILL_POS.NACENKA
FROM BILL_POS,BILLS_PRIMARY
WHERE BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='FIN_SNP'
AND BILL_POS.IS_LUK=1
AND BILL_POS.IS_AGENT<3
UNION ALL
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_DATE_REALIZ) */
  -- Позиции счетов-фактур из комплекса ФИНАНСЫ
  BILL_POS.NOM_DOK,
  BILL_POS.BILL_POS_ID,
  BILL_POS.VES,
  BILL_POS.CENA_BN,
  BILL_POS.CENA,
  BILL_POS.SUMMA_BN,
  BILL_POS.SUMMA_AKCIZ,
  BILL_POS.SUMMA_NDS20,
  BILL_POS.SUMMA_GSM25,
  BILL_POS.SUMMA,
  BILL_POS.CENA_POKUP,
  BILL_POS.SUMMA_BN_POKUP,
  BILL_POS.SUMMA_NDS20_POKUP,
  BILL_POS.SUMMA_GSM25_POKUP,
  BILL_POS.DATE_REALIZ,
  BILL_POS.ID_OLD,
  BILL_POS.PROD_ID_NPR,
  BILL_POS.OWNERSHIP_ID,
  BILL_POS.ANALIT_ID,
  BILL_POS.NACENKA
FROM BILL_POS,BILLS_PRIMARY
WHERE BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='FIN_UNP'
--AND BILL_POS.IS_LUK=1
UNION ALL
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_DATE_REALIZ) */
  -- Позиции счетов-фактур из комплекса ФИНАНСЫ, которых еще нет в R3
  BILL_POS.NOM_DOK,
  BILL_POS.BILL_POS_ID,
  BILL_POS.VES,
  BILL_POS.CENA_BN,
  BILL_POS.CENA,
  BILL_POS.SUMMA_BN,
  BILL_POS.SUMMA_AKCIZ,
  BILL_POS.SUMMA_NDS20,
  BILL_POS.SUMMA_GSM25,
  BILL_POS.SUMMA,
  BILL_POS.CENA_POKUP,
  BILL_POS.SUMMA_BN_POKUP,
  BILL_POS.SUMMA_NDS20_POKUP,
  BILL_POS.SUMMA_GSM25_POKUP,
  BILL_POS.DATE_REALIZ,
  BILL_POS.ID_OLD,
  BILL_POS.PROD_ID_NPR,
  BILL_POS.OWNERSHIP_ID,
  BILL_POS.ANALIT_ID,
  BILL_POS.NACENKA
FROM BILL_POS,BILLS_PRIMARY
WHERE BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='R3'
AND BILL_POS.IS_LUK=1
AND BILL_POS.IS_AGENT<3
AND NOT EXISTS (SELECT NULL FROM R3_BILLS WHERE R3_BILLS.NOM_DOK=BILL_POS.NOM_DOK)
UNION ALL
SELECT /*+ ALL_ROWS INDEX(R3_BILL_POS R3_BILL_POS_DATE_REALIZ) INDEX(R3_BILLS R3_BILLS_NOM_DOK_I) */
  -- Позиции счетов-фактур из R3
  R3_BILL_POS.NOM_DOK,
  R3_BILL_POS.R3_BILL_POS_ID,
  R3_BILL_POS.VES,
  R3_BILL_POS.CENA_BN,
  R3_BILL_POS.CENA,
  R3_BILL_POS.SUMMA_BN,
  R3_BILL_POS.SUMMA_AKCIZ,
  R3_BILL_POS.SUMMA_NDS,
  0 AS SUMMA_GSM25,
  R3_BILL_POS.SUMMA,
  0 AS CENA_POKUP,
  0 AS SUMMA_BN_POKUP,
  0 AS SUMMA_NDS20_POKUP,
  0 AS SUMMA_GSM25_POKUP,
  R3_BILL_POS.DATE_REALIZ,
  0 AS ID_OLD,
  R3_BILL_POS.PROD_ID_NPR,
  R3_BILL_POS.OWNERSHIP_ID,
  0 AS ANALIT_ID,
  0 as NACENKA
FROM R3_BILL_POS, R3_BILLS, BILLS_PRIMARY
WHERE R3_BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='R3'
AND R3_BILL_POS.IS_AGENT<3
AND R3_BILL_POS.NOM_DOK=R3_BILLS.NOM_DOK;


--
-- V_BILL_POS_FLAT_FIN_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILL_POS_FLAT_FIN_SNP
(NOM_DOK, IS_AGENT, DATE_REALIZ, VES, CENA_BN, 
 SUMMA_BN, SUMMA_AKCIZ, SUMMA_PROD_BN, SUMMA_PROD_NDS, CENA, 
 SUMMA_PROD, TARIF_BN, TARIF_NDS, TARIF, TARIF_GUARD_BN, 
 TARIF_GUARD_NDS, TARIF_GUARD, VOZN11_BN, VOZN11_NDS, VOZN11, 
 VOZN12_BN, VOZN12_NDS, VOZN12, STRAH, NACENKA)
AS 
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_DATE_REALIZ) */
  -- Счета из комплекса ФИНАНСЫ
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,VES,0)) AS VES,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA_BN,0)) AS CENA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN,0)) AS SUMMA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_AKCIZ,0)) AS SUMMA_AKCIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN+SUMMA_AKCIZ,0)) AS SUMMA_PROD_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_NDS20,0)) AS SUMMA_PROD_NDS,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA,0)) AS CENA,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA,0)) AS SUMMA_PROD,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_BN,0)) AS TARIF_BN,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_NDS20,0)) AS TARIF_NDS,
  SUM(DECODE(BILL_POS_ID,10,SUMMA,0)) AS TARIF,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_BN,0)) AS TARIF_GUARD_BN,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_NDS20,0)) AS TARIF_GUARD_NDS,
  SUM(DECODE(BILL_POS_ID,13,SUMMA,0)) AS TARIF_GUARD,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_BN,0)) AS VOZN11_BN,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_NDS20,0)) AS VOZN11_NDS,
  SUM(DECODE(BILL_POS_ID,11,SUMMA,0)) AS VOZN11,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_BN,0)) AS VOZN12_BN,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_NDS20,0)) AS VOZN12_NDS,
  SUM(DECODE(BILL_POS_ID,12,SUMMA,0)) AS VOZN12,
  SUM(DECODE(BILL_POS_ID,20,SUMMA,0)) AS STRAH,
  MAX(DECODE(BILL_POS_ID,20,NACENKA,0)) AS NACENKA
FROM BILL_POS,BILLS_PRIMARY
WHERE BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='FIN_SNP'
AND BILL_POS.IS_LUK=1
AND BILL_POS.IS_AGENT<3
GROUP BY
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ;


--
-- V_BILL_POS_FLAT_FIN_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILL_POS_FLAT_FIN_UNP
(NOM_DOK, IS_AGENT, DATE_REALIZ, VES, CENA_BN, 
 SUMMA_BN, SUMMA_AKCIZ, SUMMA_PROD_BN, SUMMA_PROD_NDS, CENA, 
 SUMMA_PROD, TARIF_BN, TARIF_NDS, TARIF, TARIF_GUARD_BN, 
 TARIF_GUARD_NDS, TARIF_GUARD, VOZN11_BN, VOZN11_NDS, VOZN11, 
 VOZN12_BN, VOZN12_NDS, VOZN12, STRAH, NACENKA)
AS 
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_DATE_REALIZ) */
  -- Счета из комплекса ФИНАНСЫ
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,VES,0)) AS VES,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA_BN,0)) AS CENA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN,0)) AS SUMMA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_AKCIZ,0)) AS SUMMA_AKCIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN+SUMMA_AKCIZ,0)) AS SUMMA_PROD_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_NDS20,0)) AS SUMMA_PROD_NDS,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA,0)) AS CENA,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA,0)) AS SUMMA_PROD,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_BN,0)) AS TARIF_BN,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_NDS20,0)) AS TARIF_NDS,
  SUM(DECODE(BILL_POS_ID,10,SUMMA,0)) AS TARIF,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_BN,0)) AS TARIF_GUARD_BN,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_NDS20,0)) AS TARIF_GUARD_NDS,
  SUM(DECODE(BILL_POS_ID,13,SUMMA,0)) AS TARIF_GUARD,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_BN,0)) AS VOZN11_BN,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_NDS20,0)) AS VOZN11_NDS,
  SUM(DECODE(BILL_POS_ID,11,SUMMA,0)) AS VOZN11,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_BN,0)) AS VOZN12_BN,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_NDS20,0)) AS VOZN12_NDS,
  SUM(DECODE(BILL_POS_ID,12,SUMMA,0)) AS VOZN12,
  SUM(DECODE(BILL_POS_ID,20,SUMMA,0)) AS STRAH,
  MAX(DECODE(BILL_POS_ID,20,NACENKA,0)) AS NACENKA
FROM BILL_POS,BILLS_PRIMARY
WHERE BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='FIN_UNP'
--AND BILL_POS.IS_LUK=1
GROUP BY
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ;


--
-- V_BILL_POS_FLAT_ORIG  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILL_POS_FLAT_ORIG
(NOM_DOK, IS_AGENT, DATE_REALIZ, VES, CENA_BN, 
 SUMMA_BN, SUMMA_AKCIZ, SUMMA_PROD_BN, SUMMA_PROD_NDS, CENA, 
 SUMMA_PROD, TARIF_BN, TARIF_NDS, TARIF, TARIF_GUARD_BN, 
 TARIF_GUARD_NDS, TARIF_GUARD, VOZN11_BN, VOZN11_NDS, VOZN11, 
 VOZN12_BN, VOZN12_NDS, VOZN12, STRAH, NACENKA)
AS 
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_NOM_DOK_2_I) */
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,VES,0)) AS VES,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA_BN,0)) AS CENA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN,0)) AS SUMMA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_AKCIZ,0)) AS SUMMA_AKCIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN+SUMMA_AKCIZ,0)) AS SUMMA_PROD_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_NDS20,0)) AS SUMMA_PROD_NDS,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA,0)) AS CENA,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA,0)) AS SUMMA_PROD,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_BN,0)) AS TARIF_BN,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_NDS20,0)) AS TARIF_NDS,
  SUM(DECODE(BILL_POS_ID,10,SUMMA,0)) AS TARIF,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_BN,0)) AS TARIF_GUARD_BN,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_NDS20,0)) AS TARIF_GUARD_NDS,
  SUM(DECODE(BILL_POS_ID,13,SUMMA,0)) AS TARIF_GUARD,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_BN,0)) AS VOZN11_BN,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_NDS20,0)) AS VOZN11_NDS,
  SUM(DECODE(BILL_POS_ID,11,SUMMA,0)) AS VOZN11,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_BN,0)) AS VOZN12_BN,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_NDS20,0)) AS VOZN12_NDS,
  SUM(DECODE(BILL_POS_ID,12,SUMMA,0)) AS VOZN12,
  SUM(DECODE(BILL_POS_ID,20,SUMMA,0)) AS STRAH,
  MAX(DECODE(BILL_POS_ID,20,NACENKA,0)) AS NACENKA
FROM BILL_POS
GROUP BY
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ;


--
-- V_BILL_POS_FLAT_R3  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILL_POS_FLAT_R3
(NOM_DOK, IS_AGENT, DATE_REALIZ, VES, CENA_BN, 
 SUMMA_BN, SUMMA_AKCIZ, SUMMA_PROD_BN, SUMMA_PROD_NDS, CENA, 
 SUMMA_PROD, TARIF_BN, TARIF_NDS, TARIF, TARIF_GUARD_BN, 
 TARIF_GUARD_NDS, TARIF_GUARD, VOZN11_BN, VOZN11_NDS, VOZN11, 
 VOZN12_BN, VOZN12_NDS, VOZN12, STRAH, NACENKA)
AS 
SELECT /*+ ALL_ROWS INDEX(BILL_POS BILL_POS_DATE_REALIZ) */
  -- Счета из комплекса ФИНАНСЫ, которых нет в R3
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,VES,0)) AS VES,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA_BN,0)) AS CENA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN,0)) AS SUMMA_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_AKCIZ,0)) AS SUMMA_AKCIZ,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN+SUMMA_AKCIZ,0)) AS SUMMA_PROD_BN,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_NDS20,0)) AS SUMMA_PROD_NDS,
  MAX(DECODE(SIGN(BILL_POS_ID-10),-1,CENA,0)) AS CENA,
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA,0)) AS SUMMA_PROD,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_BN,0)) AS TARIF_BN,
  SUM(DECODE(BILL_POS_ID,10,SUMMA_NDS20,0)) AS TARIF_NDS,
  SUM(DECODE(BILL_POS_ID,10,SUMMA,0)) AS TARIF,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_BN,0)) AS TARIF_GUARD_BN,
  SUM(DECODE(BILL_POS_ID,13,SUMMA_NDS20,0)) AS TARIF_GUARD_NDS,
  SUM(DECODE(BILL_POS_ID,13,SUMMA,0)) AS TARIF_GUARD,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_BN,0)) AS VOZN11_BN,
  SUM(DECODE(BILL_POS_ID,11,SUMMA_NDS20,0)) AS VOZN11_NDS,
  SUM(DECODE(BILL_POS_ID,11,SUMMA,0)) AS VOZN11,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_BN,0)) AS VOZN12_BN,
  SUM(DECODE(BILL_POS_ID,12,SUMMA_NDS20,0)) AS VOZN12_NDS,
  SUM(DECODE(BILL_POS_ID,12,SUMMA,0)) AS VOZN12,
  SUM(DECODE(BILL_POS_ID,20,SUMMA,0)) AS STRAH,
  MAX(DECODE(BILL_POS_ID,20,NACENKA,0)) AS NACENKA
FROM BILL_POS,BILLS_PRIMARY
WHERE BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='R3'
AND BILL_POS.IS_LUK=1
AND BILL_POS.IS_AGENT<3
AND NOT EXISTS (SELECT NULL FROM R3_BILLS WHERE R3_BILLS.NOM_DOK=BILL_POS.NOM_DOK)
GROUP BY
  NOM_DOK,
  IS_AGENT,
  DATE_REALIZ
UNION ALL
SELECT /*+ ALL_ROWS INDEX(R3_BILL_POS R3_BILL_POS_DATE_REALIZ)*/
  -- Счета из R3
  R3_BILL_POS.NOM_DOK,
  R3_BILL_POS.IS_AGENT,
  R3_BILL_POS.DATE_REALIZ,
  SUM(DECODE(SIGN(R3_BILL_POS_ID-10),-1,R3_BILL_POS.VES,0)) AS VES,
  MAX(DECODE(SIGN(R3_BILL_POS_ID-10),-1,CENA_BN,0)) AS CENA_BN,
  SUM(DECODE(SIGN(R3_BILL_POS_ID-10),-1,SUMMA_BN,0)) AS SUMMA_BN,
  SUM(DECODE(SIGN(R3_BILL_POS_ID-10),-1,R3_BILL_POS.SUMMA_AKCIZ,0)) AS SUMMA_AKCIZ,
  SUM(DECODE(SIGN(R3_BILL_POS_ID-10),-1,SUMMA_BN+R3_BILL_POS.SUMMA_AKCIZ,0)) AS SUMMA_PROD_BN,
  SUM(DECODE(SIGN(R3_BILL_POS_ID-10),-1,SUMMA_NDS,0)) AS SUMMA_PROD_NDS,
  MAX(DECODE(SIGN(R3_BILL_POS_ID-10),-1,CENA,0)) AS CENA,
  SUM(DECODE(SIGN(R3_BILL_POS_ID-10),-1,SUMMA,0)) AS SUMMA_PROD,
  SUM(DECODE(R3_BILL_POS_ID,10,SUMMA_BN,0)) AS TARIF_BN,
  SUM(DECODE(R3_BILL_POS_ID,10,SUMMA_NDS,0)) AS TARIF_NDS,
  SUM(DECODE(R3_BILL_POS_ID,10,SUMMA,0)) AS TARIF,
  SUM(DECODE(R3_BILL_POS_ID,13,SUMMA_BN,0)) AS TARIF_GUARD_BN,
  SUM(DECODE(R3_BILL_POS_ID,13,SUMMA_NDS,0)) AS TARIF_GUARD_NDS,
  SUM(DECODE(R3_BILL_POS_ID,13,SUMMA,0)) AS TARIF_GUARD,
  SUM(DECODE(R3_BILL_POS_ID,11,SUMMA_BN,0)) AS VOZN11_BN,
  SUM(DECODE(R3_BILL_POS_ID,11,SUMMA_NDS,0)) AS VOZN11_NDS,
  SUM(DECODE(R3_BILL_POS_ID,11,SUMMA,0)) AS VOZN11,
  SUM(DECODE(R3_BILL_POS_ID,12,SUMMA_BN,0)) AS VOZN12_BN,
  SUM(DECODE(R3_BILL_POS_ID,12,SUMMA_NDS,0)) AS VOZN12_NDS,
  SUM(DECODE(R3_BILL_POS_ID,12,SUMMA,0)) AS VOZN12,
  SUM(DECODE(R3_BILL_POS_ID,20,SUMMA,0)) AS STRAH,
  0 AS NACENKA
FROM R3_BILL_POS,R3_BILLS,BILLS_PRIMARY
WHERE R3_BILL_POS.DATE_REALIZ BETWEEN BILLS_PRIMARY.BEGIN_DATE AND BILLS_PRIMARY.END_DATE
AND BILLS_PRIMARY.PRIMARY_APPL='R3'
AND R3_BILL_POS.IS_AGENT<3
AND R3_BILL_POS.NOM_DOK=R3_BILLS.NOM_DOK
GROUP BY
  R3_BILL_POS.NOM_DOK,
  R3_BILL_POS.IS_AGENT,
  R3_BILL_POS.DATE_REALIZ;


--
-- V_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILLS
(IS_AGENT, NOM_DOK, NOM_SF, NPO_SF, DATE_VYP_SF, 
 DATE_KVIT, DATE_BUXG, DATE_MOS, SUMMA_DOK, NDS_DOK, 
 GSM_DOK, AKCIZ_DOK, PRIM, FIO_ISPOL, KOL_DN, 
 OLD_NOM_DOK, NOM_ZD, OWNER_ID, DOG_ID, USL_NUMBER, 
 PROD_ID_NPR, ORIG_DOG_ID, ORIG_USL_NUMBER, SNP_DOG_ID, SNP_USL_NUMBER, 
 ORIG_NOM_SF, ORIG_SUMMA_DOK, ORIG_NDS_DOK, ORIG_GSM_DOK, ORIG_AKCIZ_DOK, 
 OLD_NOM_SF, NUM_5_DAY, NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, 
 PROTO_DATE, NO_AKCIZ, KORR_PROD)
AS 
SELECT "IS_AGENT","NOM_DOK","NOM_SF","NPO_SF","DATE_VYP_SF","DATE_KVIT","DATE_BUXG","DATE_MOS","SUMMA_DOK","NDS_DOK","GSM_DOK","AKCIZ_DOK","PRIM","FIO_ISPOL","KOL_DN","OLD_NOM_DOK","NOM_ZD","OWNER_ID","DOG_ID","USL_NUMBER","PROD_ID_NPR","ORIG_DOG_ID","ORIG_USL_NUMBER","SNP_DOG_ID","SNP_USL_NUMBER","ORIG_NOM_SF","ORIG_SUMMA_DOK","ORIG_NDS_DOK","ORIG_GSM_DOK","ORIG_AKCIZ_DOK","OLD_NOM_SF","NUM_5_DAY","NAZN_OTG_ID","KORR_5_DAY","PROTO_NUM","PROTO_DATE","NO_AKCIZ","KORR_PROD" FROM V_BILLS_FIN_SNP
UNION ALL
SELECT "IS_AGENT","NOM_DOK","NOM_SF","NPO_SF","DATE_VYP_SF","DATE_KVIT","DATE_BUXG","DATE_MOS","SUMMA_DOK","NDS_DOK","GSM_DOK","AKCIZ_DOK","PRIM","FIO_ISPOL","KOL_DN","OLD_NOM_DOK","NOM_ZD","OWNER_ID","DOG_ID","USL_NUMBER","PROD_ID_NPR","ORIG_DOG_ID","ORIG_USL_NUMBER","SNP_DOG_ID","SNP_USL_NUMBER","ORIG_NOM_SF","ORIG_SUMMA_DOK","ORIG_NDS_DOK","ORIG_GSM_DOK","ORIG_AKCIZ_DOK","OLD_NOM_SF","NUM_5_DAY","NAZN_OTG_ID","KORR_5_DAY","PROTO_NUM","PROTO_DATE","NO_AKCIZ","KORR_PROD" FROM V_BILLS_FIN_UNP
UNION ALL
SELECT "IS_AGENT","NOM_DOK","NOM_SF","NPO_SF","DATE_VYP_SF","DATE_KVIT","DATE_BUXG","DATE_MOS","SUMMA_DOK","NDS_DOK","GSM_DOK","AKCIZ_DOK","PRIM","FIO_ISPOL","KOL_DN","OLD_NOM_DOK","NOM_ZD","OWNER_ID","DOG_ID","USL_NUMBER","PROD_ID_NPR","ORIG_DOG_ID","ORIG_USL_NUMBER","SNP_DOG_ID","SNP_USL_NUMBER","ORIG_NOM_SF","ORIG_SUMMA_DOK","ORIG_NDS_DOK","ORIG_GSM_DOK","ORIG_AKCIZ_DOK","OLD_NOM_SF","NUM_5_DAY","NAZN_OTG_ID","KORR_5_DAY","PROTO_NUM","PROTO_DATE","NO_AKCIZ","KORR_PROD" FROM V_BILLS_R3;


--
-- V_CHECK_PRICES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_CHECK_PRICES
(ERROR_ID, ID, CAT_CEN_ID, PROD_ID, PROD_NAME, 
 BEGIN_DATE, END_DATE)
AS 
SELECT 
  1,
  V_NPR_PRICES.ID, 
  CAT_CEN_ID, 
  PROD_ID_NPR,
  KLS_PROD.NAME_NPR, 
  BEGIN_DATE , 
  END_DATE   
FROM V_NPR_PRICES,KLS_PROD
WHERE BEGIN_DATE>END_DATE
  AND PROD_ID_NPR = KLS_PROD.ID_NPR
UNION ALL
--- Пересечение периодов действия
SELECT 
  2,
  V_NPR_PRICES.ID, 
  CAT_CEN_ID, 
  PROD_ID_NPR, 
  KLS_PROD.NAME_NPR, 
  BEGIN_DATE , 
  END_DATE   
FROM V_NPR_PRICES,KLS_PROD
WHERE V_NPR_PRICES.ID in (select a.id from v_npr_prices a,v_npr_prices b where a.id<>b.id and 
             a.begin_date<=b.END_DATE and a.END_DATE>=b.begin_date and a.CAT_CEN_ID=b.CAT_CEN_ID and a.PROD_ID_NPR=b.PROD_ID_NPR)
  AND PROD_ID_NPR = KLS_PROD.ID_NPR
ORDER BY CAT_CEN_ID,NAME_NPR,BEGIN_DATE,END_DATE;


--
-- V_DAYLY_FACT_MO  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DAYLY_FACT_MO
(DATE_MO, M_O, PROD_ID_NPR, SOBSTV_ID)
AS 
SELECT   to_date(to_char(arc_rez.dateupload,'dd.mm.yyyy'),'dd.mm.yyyy') as date_mo, SUM (arc_rez.dead_vol) as m_o, arc_rez.prod_id_npr, 1 as sobstv_id
    FROM arc_rez
   WHERE (arc_rez.ar_tov_id = 1) and arc_rez.dateupload>sysdate-40 
GROUP BY arc_rez.dateupload, arc_rez.prod_id_npr;


--
-- V_DEKADA_MOSK_OBR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DEKADA_MOSK_OBR
(VID_DOC, GR_PROD, PROD, PLAT, OBR_NUM, 
 DEKADA, DATE_PLAN, VES)
AS 
select
  'obr' as vid_doc,
  oil_prod_grp.NAME_NPR AS GR_PROD,
  oil_prod.NAME_NPR AS PROD,
  kls_predpr.PREDPR_NAME AS PLAT,	  	  
  TO_CHAR(plan_per.num_plan) as OBR_NUM,                 -- Номер ОБР или указания
  (case 
	   when to_number(to_char(plan_per.begin_date,'dd'))>=1 and to_number(to_char(plan_per.begin_date,'dd'))<=10 then 1
	   when to_number(to_char(plan_per.begin_date,'dd'))>10 and to_number(to_char(plan_per.begin_date,'dd'))<=20 then 2
	   else 3
	end) as dekada, -- Декада ОБР или указания	
  TO_CHAR(plan_per.date_plan,'YYYYMMDD') as date_plan,   -- Дата отгрузки (?)
  SUM(plan_post.plan_ves) as ves     -- Количество
from
  plan_post plan_post
  join
  kls_prod oil_prod on plan_post.prod_id_npr=oil_prod.id_npr
  join
  kls_prod oil_prod_grp on oil_prod.id_group_npr=oil_prod_grp.id_npr
  join
  kls_dog dogovor on plan_post.dog_id=dogovor.id
  join 
  kls_predpr on dogovor.PREDPR_ID=kls_predpr.ID
  join
  kls_planstru plan_pos on plan_post.planstru_id=plan_pos.id
  join
  plan_periods plan_per on plan_post.plan_per_id=plan_per.id
where plan_post.plan_id=3 -- ОБР
  and plan_per.begin_date between FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','raznar_mosk.xls') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','raznar_mosk.xls')
  and plan_pos.kod_sgr<>21
  and dogovor.isu_kod_dog like 'A%' --убираем из плана поставки на собственные нужды
GROUP BY
  kls_predpr.PREDPR_NAME,
  TO_CHAR(plan_per.num_plan),
  (case 
	   when to_number(to_char(plan_per.begin_date,'dd'))>=1 and to_number(to_char(plan_per.begin_date,'dd'))<=10 then 1
	   when to_number(to_char(plan_per.begin_date,'dd'))>10 and to_number(to_char(plan_per.begin_date,'dd'))<=20 then 2
	   else 3
	end),
  TO_CHAR(plan_per.date_plan,'YYYYMMDD'),   -- Дата отгрузки (?)
  oil_prod_grp.NAME_NPR,
  oil_prod.NAME_NPR
HAVING SUM(plan_post.plan_ves)<>0
ORDER BY "GR_PROD","PROD","PLAT" NULLS FIRST;


--
-- V_DOG  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DOG
(DOG_ID, DOG_NUMBER, PLAT_ID, PLAT_NAME, GOSPROG_ID, 
 USL_OPL_ID, KOL_DN, MAIN_IS_AGENT, MAIN_DOG_ID, MAIN_DOG_NUMBER, 
 LUK_DOG_ID, LUK_DOG_NUMBER)
AS 
SELECT /*+ ORDERED USE_NL (KLS_PREDPR) */
  KLS_DOG.ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  KLS_PREDPR.PREDPR_NAME AS PLAT_NAME,
  NVL(KLS_DOG.GOSPROG_ID,0) AS GOSPROG_ID,
  NVL(KLS_DOG.USL_OPL_ID,0) AS USL_OPL_ID,
  NVL(KLS_USL_OPL.KOL_DN,0) AS KOL_DN,
  NVL(MAIN_DOG.IS_AGENT,3) AS MAIN_IS_AGENT,
  NVL(KLS_DOG.MAINDOG_ID,0) AS MAIN_DOG_ID,
  NVL(MAIN_DOG.DOG_NUMBER,'') AS MAIN_DOG_NUMBER,
  NVL(KLS_DOG.LUKDOG_ID,0) AS LUK_DOG_ID,
  NVL(LUK_DOG.DOG_NUMBER,'') AS LUK_DOG_NUMBER
FROM KLS_DOG,KLS_DOG LUK_DOG,KLS_DOG MAIN_DOG,KLS_USL_OPL,KLS_PREDPR
WHERE KLS_DOG.PREDPR_ID=KLS_PREDPR.ID
  AND KLS_DOG.USL_OPL_ID=KLS_USL_OPL.ID(+)
  AND KLS_DOG.MAINDOG_ID=MAIN_DOG.ID(+)
  AND KLS_DOG.LUKDOG_ID=LUK_DOG.ID(+);


--
-- V_FIN_FACT_ISP_PLAN_PLAT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_FACT_ISP_PLAN_PLAT
(PER_TYPE, PREDPR_NAME, END_DATE, PAYED, OTGR)
AS 
SELECT
  DECODE(kls_predpr.PERTYPE_ID,
    3,'1. Лукойл-НПО (Договоры поставки)',
    1,'2. Предприятия нефтедобычи',
	  '3. Прочие покупатели') AS per_type,
  kls_predpr.PREDPR_NAME,
  MAX(c.end_date) AS end_date,
  SUM(payed) AS payed,
  SUM(otgr) AS otgr
  FROM kls_predpr,kls_dog, 
	(SELECT
	  payments.DOG_ID,
	  SUM(payments.SUMMA) AS payed
	  FROM payments,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='FACT_ISP_PLAN_PLAT.XLS') r
	  WHERE payments.DATE_POST BETWEEN TRUNC(r.end_date,'Month') AND r.end_date
	  GROUP BY payments.DOG_ID) a,	  
	(SELECT
	  bills.DOG_ID,
	  SUM(bills.LUK_SUMMA_DOK) AS otgr
	  FROM bills,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='FACT_ISP_PLAN_PLAT.XLS') r
	  WHERE bills.DATE_VYP_SF BETWEEN TRUNC(r.end_date,'Month') AND r.end_date
	  GROUP BY bills.DOG_ID) b,
    (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='FACT_ISP_PLAN_PLAT.XLS') c
  WHERE 
    kls_predpr.ID=kls_dog.PREDPR_ID AND
	kls_dog.AGENT_ID in (8,4175) AND
	kls_dog.ID=a.dog_id(+) AND
	kls_dog.ID=b.dog_id(+)
 GROUP BY
   DECODE(kls_predpr.PERTYPE_ID,
    3,'1. Лукойл-НПО (Договоры поставки)',
    1,'2. Предприятия нефтедобычи',
	  '3. Прочие покупатели'), 
   kls_predpr.PREDPR_NAME
 HAVING (SUM(payed) is not null) or (SUM(otgr) is not null)
 ORDER BY 1,2;


--
-- V_FIN_LICSCHET_UNUSEDPAY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_LICSCHET_UNUSEDPAY
(PREDPR_NAME, BEGIN_DATE, END_DATE, DOG_NUMBER, DOG_DATE, 
 PROD_NAME, NOM_DOK, NOM_SF, DATE_VYP_SF, SUMMA_DOK, 
 NUM_PLAT, DATE_PLAT, DATE_POST, SUMMA_PLAT, DATE_ORDER, 
 IS_SALDO)
AS 
SELECT
  d.predpr_name,
  r.begin_date,
  r.end_date,
  c.dog_number,
  c.dog_date,
  null as prod_name,
  null as nom_dok,
  null as nom_sf,
  null as date_vyp_sf,
  null as summa_dok,
  b.num_plat,
  b.date_plat,
  b.date_post,
  sum(a.summa) as summa_plat,
  TO_DATE(b.date_post) as date_order,
  DECODE(SIGN(b.date_post-r.begin_date),-1,1,0) as IS_SALDO
FROM
(
 SELECT
   payments.ID,
   payments.SUMMA
 FROM payments
 UNION ALL
 SELECT
   payments_on_bills.PAYMENTS_ID,
   -payments_on_bills.SUMMA
 FROM payments_on_bills
) a,payments b,kls_dog c,kls_predpr d, v_master_reports r
WHERE NLS_UPPER(TRIM(r.report_file))='LIC_SCHET.XLS' and
  a.id=b.id and
  b.dog_id=c.id and
  d.ID=c.PREDPR_ID and
  c.predpr_id=NVL(For_Temp.GET_AS_NUM('LC_PLAT','MASTER','LIC_SCHET.XLS'),0) and
  b.date_post<=r.end_date
GROUP BY
  c.dog_number,
  c.dog_date,
  b.num_plat,
  b.date_plat,
  b.date_post,
  d.predpr_name,
  r.begin_date,
  r.end_date;


--
-- V_FIN_OPER_INFO  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_OPER_INFO
(END_DATE, PREDPR_NAME, SALDO_PREV_MONTHS, OTGR_PREV_DAY, PAYED_PREV_DAY, 
 PAYED_THIS_MONTH, OTGR_THIS_MONTH, OTGR_THIS_DAY)
AS 
SELECT 
  r.end_date,
  kls_predpr.PREDPR_NAME,
  SUM(saldo_prev_months) AS saldo_prev_months,
  SUM(otgr_prev_day) AS otgr_prev_day,
  SUM(payed_prev_day) AS payed_prev_day,
  SUM(payed_this_month) AS payed_this_month,
  SUM(otgr_this_month) AS otgr_this_month,
  SUM(otgr_this_day) AS otgr_this_day
  FROM ( 
	SELECT
	  kls_dog.ID AS dog_id,
	  SUM(NVL((CASE
	     WHEN payments.date_post<TRUNC(r.end_date,'Month') THEN payments.SUMMA
	    ELSE 0
	  END),0)) AS saldo_prev_months,
	  SUM(0) AS otgr_prev_day,
	  SUM(NVL((CASE
	     WHEN payments.date_post=r.end_date-1 THEN payments.SUMMA
	    ELSE 0
	  END),0)) AS payed_prev_day,
	  SUM(NVL((CASE
	     WHEN TRUNC(payments.date_post,'Month')=TRUNC(r.end_date,'Month') AND payments.date_post<r.end_date THEN payments.SUMMA
	    ELSE 0
	  END),0)) AS payed_this_month,
	  SUM(0) AS otgr_this_month,
	  SUM(0) AS otgr_this_day
	  FROM payments,kls_dog,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='FINOPER_INFO.XLS') r
	  WHERE 
	    payments.DATE_POST<=r.end_date AND
		payments.DOG_ID=kls_dog.ID AND
		kls_dog.AGENT_ID in (8,4175)	
	  GROUP BY
	    kls_dog.ID 
	UNION ALL
	SELECT
	  kls_dog.ID AS dog_id,
	  SUM(NVL((CASE
	     WHEN bills.date_plat<TRUNC(r.end_date,'Month') THEN -bills.luk_summa_dok
	    ELSE 0
	  END),0)) AS saldo_prev_months,
	  SUM(NVL((CASE
	     WHEN bills.date_plat=r.end_date-1 THEN bills.luk_summa_dok
	    ELSE 0
	  END),0)) AS otgr_prev_day,
	  SUM(0) AS payed_prev_day,
	  SUM(0) AS payed_this_month,
	  SUM(NVL((CASE
	     WHEN TRUNC(bills.date_plat,'Month')=TRUNC(r.end_date,'Month') AND bills.date_plat<r.end_date THEN bills.luk_summa_dok
	    ELSE 0
	  END),0)) AS otgr_this_month,
	  SUM(NVL((CASE
	     WHEN bills.date_plat=r.end_date THEN bills.luk_summa_dok
	    ELSE 0
	  END),0)) AS otgr_this_day
	  FROM bills,kls_dog,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='FINOPER_INFO.XLS') r
	  WHERE 
	    bills.DATE_PLAT<=r.end_date AND
		bills.DOG_ID=kls_dog.ID AND
		kls_dog.AGENT_ID in (8,4175)	
	  GROUP BY
	    kls_dog.ID) a,kls_dog,kls_predpr,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='FINOPER_INFO.XLS') r
  WHERE a.dog_id=kls_dog.id AND
		kls_dog.predpr_id=kls_predpr.id
GROUP BY
  r.end_date,  
  kls_predpr.PREDPR_NAME
  order by kls_predpr.PREDPR_NAME;


--
-- V_FIN_REESTR_DEB  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_REESTR_DEB
(DOG_ID, SUMMA_DOK, PROSR, DATE_PROSR, SUM_TO_PAY_THIS_MONTH, 
 SUMMA_PAYED)
AS 
SELECT /*+ ORDERED */
  bills.dog_id,
  NVL(SUM(bills.luk_summa_dok),0) AS summa_dok,
  NVL(SUM(CASE
            WHEN bills.date_plat<=r.end_date THEN bills.LUK_SUMMA_DOK
            ELSE 0
          END),0) AS prosr,
  MIN(CASE
        WHEN bills.luk_summa_dok<=NVL(b.summa,0) THEN TO_DATE('01.01.2050','dd.mm.yyyy')
		ELSE bills.date_plat
	  END) AS date_prosr,
  NVL(SUM(CASE
            WHEN TRUNC(bills.date_plat,'Month')=TRUNC(r.end_date,'Month') THEN bills.LUK_SUMMA_DOK
            ELSE 0
          END),0) AS sum_to_pay_this_month,
  NVL(SUM(NVL(b.summa,0)),0) AS summa_payed
  FROM
	(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='REESTR_DEBKRED.XLS') r,
	bills,
	(SELECT nom_dok,SUM(payments_on_bills.summa) AS summa FROM payments_on_bills,payments
       WHERE payments_on_bills.payments_id=payments.id and
	     payments_on_bills.date_realiz<=NVL(For_Temp.GET_AS_DATE('DATE_END','MASTER','REESTR_DEBKRED.XLS'),TRUNC(SYSDATE)) and  
	     payments.date_post<=NVL(For_Temp.GET_AS_DATE('DATE_END','MASTER','REESTR_DEBKRED.XLS'),TRUNC(SYSDATE))
		 GROUP BY nom_dok) b
    where
	  bills.nom_dok=b.nom_dok(+) and
	  bills.date_kvit>=TO_DATE('01.01.2005','dd.mm.yyyy') and
	  bills.date_kvit<=r.end_date
GROUP BY
  bills.dog_id;


--
-- V_FIN_REESTR_DEB_CURDATE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_REESTR_DEB_CURDATE
(DOG_ID, SUMMA_DOK, PROSR, DATE_PROSR, SUM_TO_PAY_THIS_MONTH, 
 SUMMA_PAYED)
AS 
SELECT /*+ ORDERED */
  bills.dog_id,
  NVL(SUM(bills.luk_summa_dok),0) AS summa_dok,
  NVL(SUM(CASE
            WHEN bills.date_plat<=TRUNC(SYSDATE-1) THEN bills.LUK_SUMMA_DOK
            ELSE 0
          END),0) AS prosr,
  MIN(CASE
        WHEN bills.luk_summa_dok<=NVL(b.summa,0) THEN TO_DATE('01.01.2050','dd.mm.yyyy')
		ELSE bills.date_plat
	  END) AS date_prosr,
  NVL(SUM(CASE
            WHEN TRUNC(bills.date_plat,'Month')=TRUNC(SYSDATE-1,'Month') THEN bills.LUK_SUMMA_DOK
            ELSE 0
          END),0) AS sum_to_pay_this_month,
  NVL(SUM(NVL(b.summa,0)),0) AS summa_payed
  FROM
	bills,
	(SELECT nom_dok,SUM(payments_on_bills.summa) AS summa FROM payments_on_bills,payments
       WHERE payments_on_bills.payments_id=payments.id and
	     payments_on_bills.date_realiz<=TRUNC(SYSDATE-1) and  
	     payments.date_post<=TRUNC(SYSDATE-1)
		 GROUP BY nom_dok) b
    where
	  bills.nom_dok=b.nom_dok(+) and
	  bills.date_kvit>=TO_DATE('01.01.2005','dd.mm.yyyy') and
	  bills.date_kvit<=TRUNC(SYSDATE-1)
GROUP BY
  bills.dog_id;


--
-- V_FIN_REESTR_KRED  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_REESTR_KRED
(DOG_ID, SUMMA_KRED, SUM_PAYED_THIS_MONTH)
AS 
SELECT
  b.dog_id,
  sum(a.summa) as summa_kred,
  sum(sum_payed_this_month) AS sum_payed_this_month
  FROM
(
SELECT
  payments.ID,
  payments.SUMMA,
  NVL((CASE
     WHEN TRUNC(payments.date_post,'Month')=TRUNC(r.end_date,'Month') THEN payments.SUMMA
    ELSE 0
  END),0) AS sum_payed_this_month
  FROM payments,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='REESTR_DEBKRED.XLS') r
  WHERE payments.DATE_POST<=r.end_date
UNION ALL
SELECT
  pb.PAYMENTS_ID,
  -pb.SUMMA,
  0
  FROM payments_on_bills pb, (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='REESTR_DEBKRED.XLS') r
  where pb.date_realiz<=r.end_date
) a,payments b, (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='REESTR_DEBKRED.XLS') r
  WHERE a.id=b.id AND
    b.date_post<=r.END_DATE
  GROUP BY b.dog_id
--  HAVING sum(a.summa)>0;;
;


--
-- V_FINREPORT_SDZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_SDZ
(IS_HOLDING, KOD_PLAT, OWNER_ID, DOG_ID, DATE_BUXG, 
 KOL_DN, DATE_TO_OPL, SUMMA_DOK, SUMMA_PROD, SUMMA_AGEN, 
 NOM_DOK)
AS 
SELECT
  DECODE(KLS_PREDPR.HOLDING_ID,41,0,DECODE(KLS_PREDPR.HOLDING_ID,42,0,1)),
  KLS_DOG.PREDPR_ID,
  v_bills_for_real_opl.OWNER_ID,
  v_bills_for_real_opl.DOG_ID,
  v_bills_for_real_opl.DATE_BUXG,
  v_bills_for_real_opl.KOL_DN, 
  v_bills_for_real_opl.DATE_KVIT+v_bills_for_real_opl.KOL_DN, 
  NVL(r_o.d_41+r_o.d_191+r_o.sum_akciz+r_o.d_67+r_o.d_441+r_o.d_194+r_o.sum_nacen+r_o.sum_naliv+r_o.ndc_nal20+r_o.d_442+r_o.ndc_tr20,0) AS summa_dok,
  NVL(r_o.d_41+r_o.d_191+r_o.sum_akciz+r_o.d_67+r_o.d_441+r_o.d_194+r_o.sum_nacen,0),
  NVL(r_o.sum_naliv+r_o.ndc_nal20+r_o.d_442+r_o.ndc_tr20,0),
  r_o.nom_dok
FROM load_buffer.real_opl r_o,
     v_bills_for_real_opl,
     kls_dog,
     kls_predpr
WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok(+))
		AND (r_o.close_date is null OR r_o.CLOSE_DATE>TO_DATE('31.01.2002','dd.mm.yyyy'))
		AND KLS_DOG.PREDPR_ID<>710
       )
UNION ALL
SELECT
  DECODE(KLS_PREDPR.HOLDING_ID,41,0,DECODE(KLS_PREDPR.HOLDING_ID,42,0,1)),
  KLS_DOG.PREDPR_ID,
  v_bills_for_real_opl.OWNER_ID,
  v_bills_for_real_opl.DOG_ID,
  v_bills_for_real_opl.DATE_BUXG,
  v_bills_for_real_opl.KOL_DN, 
  v_bills_for_real_opl.DATE_KVIT+v_bills_for_real_opl.KOL_DN, 
  NVL(r_o.d_41+r_o.d_191+r_o.sum_akciz+r_o.d_67+r_o.d_441+r_o.d_194+r_o.sum_nacen+r_o.sum_naliv+r_o.ndc_nal20+r_o.d_442+r_o.ndc_tr20,0) AS summa_dok,
  DECODE(v_bills_for_real_opl.OWNER_ID,1,NVL(r_o.d_41+r_o.d_191+r_o.sum_akciz+r_o.d_67+r_o.d_441+r_o.d_194+r_o.sum_nacen,0),0),
  DECODE(v_bills_for_real_opl.OWNER_ID,1,NVL(r_o.sum_naliv+r_o.ndc_nal20+r_o.d_442+r_o.ndc_tr20,0),NVL(r_o.d_41+r_o.d_191+r_o.sum_akciz+r_o.d_67+r_o.d_441+r_o.d_194+r_o.sum_nacen+r_o.sum_naliv+r_o.ndc_nal20+r_o.d_442+r_o.ndc_tr20,0)),
  r_o.nom_dok
FROM load_buffer.real_opl r_o,
     v_bills_for_real_opl,
     kls_dog,
     kls_predpr
WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok(+))
		AND (r_o.close_date is null OR r_o.CLOSE_DATE>TO_DATE('31.01.2002','dd.mm.yyyy'))
		AND KLS_DOG.PREDPR_ID=710
       );


--
-- V_FINREPORT_SDZ_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_SDZ_SF
(IS_HOLDING, KOD_PLAT, DOG_ID, DATE_BUXG, KOL_DN, 
 DATE_TO_OPL, SUMMA_DOK, SUMMA_DOK1, SUMMA, SUMMA_PROD, 
 SUMMA_AGEN, NOM_DOK)
AS 
SELECT
  DECODE(KLS_PREDPR.HOLDING_ID,41,0,DECODE(KLS_PREDPR.HOLDING_ID,42,0,1)),
  KLS_DOG.PREDPR_ID,
  v_bills.DOG_ID,
  v_bills.DATE_KVIT,
  v_bills.KOL_DN, 
  v_bills.DATE_KVIT+v_bills.KOL_DN, 
  NVL(b_p.summa_agen,0)+NVL(b_p.summa_prod,0) AS summa_dok,
  v_bills.summa_dok AS summa_dok1,
  NVL(b_p.summa,0),
  NVL(b_p.summa_prod,0),
  NVL(b_p.summa_agen,0),
  v_bills.nom_dok
FROM v_bills, KLS_PREDPR, KLS_DOG,    
  (SELECT 
     bill_pos.NOM_DOK, 
	 SUM(bill_pos.SUMMA) AS summa, 
	 SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),1,DECODE(bill_pos.BILL_POS_ID,20,bill_pos.SUMMA,0),bill_pos.SUMMA)) AS summa_prod, 
	 SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA,12,bill_pos.SUMMA,0)) AS summa_agen 
    FROM bill_pos GROUP BY bill_pos.NOM_DOK) b_p 
WHERE v_bills.DOG_ID=KLS_DOG.ID(+) AND KLS_DOG.PREDPR_ID=KLS_PREDPR.ID AND v_bills.NOM_DOK = b_p.NOM_DOK(+);


--
-- V_FINREPORT_9_FIPP_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_OPL
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATA_POST, SUMMA)
AS 
SELECT
       10,
	   NVL(KLS_dog.GROUPDOG_ID,6),
	   NVL(opl.program,0),
	   KLS_PREDPR.PREDPR_NAME,
       OPL.dog_id,
	   opl.data_post, opl.summa
  FROM MASTER.opl,
       kls_dog,
	   KLS_PREDPR
 WHERE ((opl.DOG_ID = KLS_dog.ID) AND (KLS_dog.PREDPR_ID=KLS_PREDPR.ID));


--
-- V_FINREPORT_9_FIPP_OPL_END  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_OPL_END
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATA_POST, SUMMA)
AS 
SELECT
       payform_id,
	   groupdog_id,
	   0,
	   PREDPR_NAME,
       dog_id,
	   data_post, summa
  FROM v_finreport_9_fipp_opl
 WHERE NOT (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6)
UNION ALL
SELECT
       payform_id,
	   1,
	   gosprog_id,
	   PREDPR_NAME,
       dog_id,
	   data_post, summa
  FROM v_finreport_9_fipp_opl
 WHERE (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6);


--
-- V_FIN_STRUCT_DEB  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_STRUCT_DEB
(END_DATE, GROUP_ORDER, GROUP_ABBR, GROUP_NAME, SUMMA_DOK, 
 PROSR, PROSR45, PROSR90, PROSR365X3, SUMMA_DOK_LUK, 
 PROSR_LUK, PROSR45_LUK, PROSR90_LUK, PROSR365X3_LUK, SUMMA_PAYED, 
 SUMMA_PAYED_LUK)
AS 
SELECT /*+ RULE */ /* ORDERED INDEX(bill_pos BILL_POS_DATE_REALIZ) USE_NL(bill_pos,bills,b,KLS_PROD_GROUPS_DESC,KLS_PROD_GROUPS,KLS_DOG,KLS_PREDPR,c,r) */
  r.end_date,
  KLS_PROD_GROUPS.GROUP_ORDER,
  KLS_PROD_GROUPS.GROUP_ABBR,
  KLS_PROD_GROUPS.GROUP_NAME,
  NVL(SUM(bill_pos.SUMMA),0) AS summa_dok,
  NVL(SUM(DECODE(SIGN(bills.date_plat-r.end_date),1,0,bill_pos.SUMMA)),0) AS prosr,
  NVL(SUM(DECODE(SIGN(bills.date_plat-r.end_date+45),1,0,bill_pos.SUMMA)),0) AS prosr45,
  NVL(SUM(DECODE(SIGN(bills.date_plat-r.end_date+90),1,0,bill_pos.SUMMA)),0) AS prosr90,
  NVL(SUM(DECODE(SIGN(bills.date_plat-r.end_date+365*3),1,0,bill_pos.SUMMA)),0) AS prosr365x3,
  NVL(SUM(DECODE(c.holding_name,null,0,bill_pos.SUMMA)),0) AS summa_dok_luk,
  NVL(SUM(DECODE(c.holding_name,null,0,DECODE(SIGN(bills.date_plat-r.end_date),1,0,bill_pos.SUMMA))),0) AS prosr_luk,
  NVL(SUM(DECODE(c.holding_name,null,0,DECODE(SIGN(bills.date_plat-r.end_date+45),1,0,bill_pos.SUMMA))),0) AS prosr45_luk,
  NVL(SUM(DECODE(c.holding_name,null,0,DECODE(SIGN(bills.date_plat-r.end_date+90),1,0,bill_pos.SUMMA))),0) AS prosr90_luk,
  NVL(SUM(DECODE(c.holding_name,null,0,DECODE(SIGN(bills.date_plat-r.end_date+365*3),1,0,bill_pos.SUMMA))),0) AS prosr365x3_luk,
  NVL(SUM(NVL(b.summa,0)),0) AS summa_payed,
  NVL(SUM(DECODE(c.holding_name,null,0,NVL(b.summa,0))),0) AS summa_payed_luk
FROM bill_pos,bills,
	(SELECT nom_dok,payments_on_bills.BILL_POS_ID,SUM(payments_on_bills.summa) AS summa
	   FROM payments_on_bills,payments
       WHERE payments_on_bills.payments_id=payments.id and
	     payments.date_post<=(SELECT END_DATE FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='STRUCT_DEBZAD.XLS')
		 GROUP BY nom_dok,BILL_POS_ID) b,
    KLS_PROD_GROUPS_DESC,KLS_PROD_GROUPS,KLS_DOG,KLS_PREDPR,
	(select * FROM kls_holding c connect by prior id=boss start with c.id=40) c,
	(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='STRUCT_DEBZAD.XLS') r
where
	  bill_pos.DATE_REALIZ>=TO_DATE('01.01.2005','dd.mm.yyyy') and
	  bill_pos.is_luk=1 AND
	  bill_pos.nom_dok=b.nom_dok(+) and
	  bill_pos.bill_pos_id=b.bill_pos_id(+) and
	  bill_pos.PROD_ID_NPR=KLS_PROD_GROUPS_DESC.PROD_ID_NPR and
	  KLS_PROD_GROUPS_DESC.PROD_GROUPS_ID=KLS_PROD_GROUPS.ID and
	  KLS_PROD_GROUPS.PROD_TYPE_GRP_ID=10 and
	  bill_pos.NOM_DOK=bills.NOM_DOK and
	  bills.DOG_ID=kls_dog.id and
	  kls_dog.PREDPR_ID=kls_predpr.id and
	  kls_predpr.HOLDING_ID=c.id(+) and
	  bills.date_kvit<=r.end_date
GROUP BY
  r.end_date,
  KLS_PROD_GROUPS.GROUP_ORDER,
  KLS_PROD_GROUPS.GROUP_ABBR,
  KLS_PROD_GROUPS.GROUP_NAME;


--
-- V_GD_AGENT_GU12  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_GU12
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, RAZN_NUM, RAZN_DATE, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, KOL, VES, 
 IS_KORR, FOX_KOD)
AS 
SELECT /*+ RULE */ 
  /* Все заявки, действующие в отчетном месяце */ 
  gu12_a.ID as GU12_A_ID, 
  gu12_a.NOM_Z as ZAYV_NUM, 
  gu12_a.REG_DATE as ZAYV_DATE, 
  gu12_a.FROM_DATE, 
  gu12_a.TO_DATE, 
  C.BEGIN_DATE, 
  C.END_DATE, 
  gu12_b.NOM_LETTER as RAZN_NUM, 
  gu12_b.DATE_LETTER as RAZN_DATE, 
  gu12_b.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  KLS_PROD_GU12.ID as PROD_ID, 
  kls_prod_gu12.NAME_GU12 as PROD_NAME, 
  gu12_b.KOL_VAG as KOL, 
  gu12_b.VES as VES, 
  NVL(gu12_b.ISCOR,0) as IS_KORR, 
  GU12_B.FOX_KOD 
FROM gu12_a,gu12_b,v_master_reports C,kls_stan,kls_prod_gu12,KLS_DOG 
WHERE gu12_b.ID_A=gu12_a.id 
  AND gu12_b.PLAT_ID=KLS_DOG.PREDPR_ID
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  --FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS') 
  AND gu12_a.from_date<=C.END_DATE 
  AND gu12_a.to_date>=C.BEGIN_DATE 
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS' 
  and gu12_a.PROD_ID=kls_prod_gu12.ID 
  AND gu12_a.PROD_ID<>201005 -- Без НЕФТИ
  AND gu12_a.PROD_ID<>213337 -- Без масла моторного
  AND gu12_b.STAN_ID=KLS_STAN.ID;


--
-- V_GD_AGENT_GU12_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_GU12_GRP
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, STAN_NAME, 
 PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, ORIG_VES, 
 KOL, VES)
AS 
SELECT 
  /* Все заявки действующие в текущем месяце (сгруппированы по Номеру и Станции) */ 
  GU12_A_ID, 
  ZAYV_NUM, 
  ZAYV_DATE, 
  FROM_DATE, 
  TO_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  MIN(FOX_KOD) as FOX_KOD, 
  STAN_ID, 
  STAN_NAME, 
  PROD_ID, 
  PROD_NAME, 
  MAX(IS_KORR) as IS_KORR, 
  SUM(DECODE(IS_KORR,1,0,KOL)) as ORIG_KOL, 
  SUM(DECODE(IS_KORR,1,0,VES)) as ORIG_VES, 
  SUM(DECODE(IS_KORR,2,0,KOL)) as KOL, 
  SUM(DECODE(IS_KORR,2,0,VES)) as VES 
FROM V_GD_AGENT_GU12 
GROUP BY 
  ZAYV_NUM, 
  ZAYV_DATE, 
  FROM_DATE, 
  TO_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  STAN_ID, 
  STAN_NAME, 
  PROD_ID, 
  PROD_NAME, 
  GU12_A_ID;


--
-- V_GD_AGENT_GU12_KORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_GU12_KORR
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, RAZN_NUM, RAZN_DATE, 
 FROM_DATE, TO_DATE, BEGIN_DATE, END_DATE, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, IS_KORR, KOL, 
 VES)
AS 
SELECT
  /* Корректировки заявок в отчетном месяце */
  GU12_A_ID,
  ZAYV_NUM,
  ZAYV_DATE,
  RAZN_NUM,
  RAZN_DATE,
  FROM_DATE,
  TO_DATE,
  BEGIN_DATE,
  END_DATE,
  STAN_ID,
  STAN_NAME,
  PROD_ID,
  PROD_NAME,
  IS_KORR,
  SUM(DECODE(IS_KORR,2,-1,1)*KOL) as KOL,
  SUM(DECODE(IS_KORR,2,-1,1)*VES) as VES
FROM V_GD_AGENT_GU12
WHERE IS_KORR IN (1,2)
  AND from_date BETWEEN BEGIN_DATE AND END_DATE
GROUP BY
  GU12_A_ID,
  ZAYV_NUM,
  ZAYV_DATE,
  RAZN_NUM,
  RAZN_DATE,
  FROM_DATE,
  TO_DATE,
  BEGIN_DATE,
  END_DATE,
  STAN_ID,
  STAN_NAME,
  PROD_ID,
  PROD_NAME,
  IS_KORR
HAVING IS_KORR=2 OR SUM(DECODE(IS_KORR,2,-1,1)*KOL)<>0;


--
-- V_GD_AGENT_GU12_ZAYV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_GU12_ZAYV
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, STAN_NAME, 
 PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, ORIG_VES, 
 KOL, VES)
AS 
SELECT 
  /* Все заявки начинающие действовать в отчетном месяце */ 
  "GU12_A_ID","ZAYV_NUM","ZAYV_DATE","FROM_DATE","TO_DATE","BEGIN_DATE","END_DATE","FOX_KOD","STAN_ID","STAN_NAME","PROD_ID","PROD_NAME","IS_KORR","ORIG_KOL","ORIG_VES","KOL","VES" 
FROM V_GD_AGENT_GU12_GRP 
WHERE from_date BETWEEN BEGIN_DATE AND END_DATE;


--
-- V_GD_AGENT_2006_GU12  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, ZAKR_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, RAZN_NUM, RAZN_DATE, 
 STAN_ID, STAN_NAME, PROD_ID, PROD_NAME, KOL, 
 VES, IS_KORR, FOX_KOD)
AS 
SELECT /*+ RULE */ 
  /* Все заявки, действующие в отчетном месяце */ 
  gu12_a.ID as GU12_A_ID, 
  gu12_a.NOM_Z as ZAYV_NUM, 
  gu12_a.REG_DATE as ZAYV_DATE, 
  gu12_a.ZAKR_DATE, 
  gu12_a.FROM_DATE, 
  gu12_a.TO_DATE, 
  C.BEGIN_DATE, 
  C.END_DATE, 
  gu12_b.NOM_LETTER as RAZN_NUM, 
  gu12_b.DATE_LETTER as RAZN_DATE, 
  gu12_b.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  KLS_PROD_GU12.ID as PROD_ID, 
  kls_prod_gu12.NAME_GU12 as PROD_NAME, 
  gu12_b.KOL_VAG as KOL, 
  gu12_b.VES as VES, 
  NVL(gu12_b.ISCOR,0) as IS_KORR, 
  GU12_B.FOX_KOD 
FROM gu12_a,gu12_b,v_master_reports C,kls_stan,kls_prod_gu12,KLS_DOG 
WHERE gu12_b.ID_A=gu12_a.id 
  AND gu12_b.PLAT_ID=KLS_DOG.PREDPR_ID
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  --FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS') 
  AND gu12_a.from_date<=C.END_DATE 
  AND gu12_a.to_date>=C.BEGIN_DATE 
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2006.XLS' 
  and gu12_a.PROD_ID=kls_prod_gu12.ID 
  AND gu12_a.PROD_ID<>201005 -- Без НЕФТИ
  AND gu12_a.PROD_ID<>213337 -- Без масла моторного
  AND gu12_b.STAN_ID=KLS_STAN.ID;


--
-- V_GD_AGENT_2006_GU12_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_GRP
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, ZAKR_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, 
 ORIG_VES, KOL, VES)
AS 
SELECT 
  /* Все заявки действующие в текущем месяце (сгруппированы по Номеру и Станции) */ 
  GU12_A_ID, 
  ZAYV_NUM, 
  ZAYV_DATE, 
  ZAKR_DATE,
  FROM_DATE, 
  TO_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  MIN(FOX_KOD) as FOX_KOD, 
  STAN_ID, 
  STAN_NAME, 
  PROD_ID, 
  PROD_NAME, 
  MAX(IS_KORR) as IS_KORR, 
  SUM(DECODE(IS_KORR,1,0,KOL)) as ORIG_KOL, 
  SUM(DECODE(IS_KORR,1,0,VES)) as ORIG_VES, 
  SUM(DECODE(IS_KORR,2,0,KOL)) as KOL, 
  SUM(DECODE(IS_KORR,2,0,VES)) as VES 
FROM V_GD_AGENT_2006_GU12 
GROUP BY 
  ZAYV_NUM, 
  ZAYV_DATE,
  ZAKR_DATE, 
  FROM_DATE, 
  TO_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  STAN_ID, 
  STAN_NAME, 
  PROD_ID, 
  PROD_NAME, 
  GU12_A_ID;


--
-- V_GD_AGENT_2006_GU12_KORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_KORR
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, RAZN_NUM, RAZN_DATE, 
 FROM_DATE, TO_DATE, BEGIN_DATE, END_DATE, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, IS_KORR, KOL, 
 VES)
AS 
SELECT
  /* Корректировки заявок в отчетном месяце */
  GU12_A_ID,
  ZAYV_NUM,
  ZAYV_DATE,
  RAZN_NUM,
  RAZN_DATE,
  FROM_DATE,
  TO_DATE,
  BEGIN_DATE,
  END_DATE,
  STAN_ID,
  STAN_NAME,
  PROD_ID,
  PROD_NAME,
  IS_KORR,
  SUM(DECODE(IS_KORR,2,-1,1)*KOL) as KOL,
  SUM(DECODE(IS_KORR,2,-1,1)*VES) as VES
FROM V_GD_AGENT_2006_GU12
WHERE IS_KORR IN (1,2)
  AND from_date BETWEEN BEGIN_DATE AND END_DATE
GROUP BY
  GU12_A_ID,
  ZAYV_NUM,
  ZAYV_DATE,
  RAZN_NUM,
  RAZN_DATE,
  FROM_DATE,
  TO_DATE,
  BEGIN_DATE,
  END_DATE,
  STAN_ID,
  STAN_NAME,
  PROD_ID,
  PROD_NAME,
  IS_KORR
HAVING IS_KORR=2 OR SUM(DECODE(IS_KORR,2,-1,1)*KOL)<>0;


--
-- V_GD_AGENT_2006_GU12_ZAYV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_ZAYV
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, STAN_NAME, 
 PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, ORIG_VES, 
 KOL, VES)
AS 
SELECT 
  /* Все заявки начинающие действовать в отчетном месяце */ 
  "GU12_A_ID","ZAYV_NUM","ZAYV_DATE","FROM_DATE","TO_DATE","BEGIN_DATE","END_DATE","FOX_KOD","STAN_ID","STAN_NAME","PROD_ID","PROD_NAME","IS_KORR","ORIG_KOL","ORIG_VES","KOL","VES" 
FROM V_GD_AGENT_2006_GU12_GRP 
WHERE from_date BETWEEN BEGIN_DATE AND END_DATE;


--
-- V_GD_AGENT_2006_GU12_ZAYV_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_ZAYV_1
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, ZAKR_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, 
 ORIG_VES, KOL, VES)
AS 
SELECT 
  /* Заявки прошлых месяцев, закрытые в отчетном месяце */ 
  "GU12_A_ID","ZAYV_NUM","ZAYV_DATE","ZAKR_DATE","FROM_DATE","TO_DATE","BEGIN_DATE","END_DATE","FOX_KOD","STAN_ID","STAN_NAME","PROD_ID","PROD_NAME","IS_KORR","ORIG_KOL","ORIG_VES","KOL","VES" 
FROM V_GD_AGENT_2006_GU12_GRP 
WHERE zakr_date BETWEEN BEGIN_DATE AND END_DATE
  AND from_date<BEGIN_DATE;


--
-- V_GD_AGENT_2006_GU12_ZAYV_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_ZAYV_2
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, ZAKR_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, 
 ORIG_VES, KOL, VES)
AS 
SELECT 
  /* Заявки отчетного месяца, закрытые в отчетном месяце */ 
  "GU12_A_ID","ZAYV_NUM","ZAYV_DATE","ZAKR_DATE","FROM_DATE","TO_DATE","BEGIN_DATE","END_DATE","FOX_KOD","STAN_ID","STAN_NAME","PROD_ID","PROD_NAME","IS_KORR","ORIG_KOL","ORIG_VES","KOL","VES" 
FROM V_GD_AGENT_2006_GU12_GRP 
WHERE zakr_date BETWEEN BEGIN_DATE AND END_DATE
  AND from_date>=BEGIN_DATE;


--
-- V_GD_AGENT_2008_GU12  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_GU12
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, RAZN_NUM, RAZN_DATE, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, KOL, VES, 
 IS_KORR, FOX_KOD)
AS 
SELECT /*+ RULE */ 
  /* Все заявки, действующие в отчетном месяце */ 
  gu12_a.ID as GU12_A_ID, 
  gu12_a.NOM_Z as ZAYV_NUM, 
  gu12_a.REG_DATE as ZAYV_DATE, 
  gu12_a.FROM_DATE, 
  gu12_a.TO_DATE, 
  C.BEGIN_DATE, 
  C.END_DATE, 
  gu12_b.NOM_LETTER as RAZN_NUM, 
  gu12_b.DATE_LETTER as RAZN_DATE, 
  gu12_b.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  KLS_PROD_GU12.ID as PROD_ID, 
  kls_prod_gu12.NAME_GU12 as PROD_NAME, 
  gu12_b.KOL_VAG as KOL, 
  gu12_b.VES as VES, 
  NVL(gu12_b.ISCOR,0) as IS_KORR, 
  GU12_B.FOX_KOD 
FROM gu12_a,gu12_b,v_master_reports C,kls_stan,kls_prod_gu12,KLS_DOG 
WHERE gu12_b.ID_A=gu12_a.id 
  AND gu12_b.PLAT_ID=KLS_DOG.PREDPR_ID
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  --FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS') 
  AND gu12_a.from_date<=C.END_DATE 
  AND gu12_a.to_date>=C.BEGIN_DATE 
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS' 
  and gu12_a.PROD_ID=kls_prod_gu12.ID 
  AND gu12_a.PROD_ID<>201005 -- Без НЕФТИ
  AND gu12_a.PROD_ID<>213337 -- Без масла моторного
  AND gu12_b.STAN_ID=KLS_STAN.ID;


--
-- V_GD_AGENT_2008_GU12_GRP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_GU12_GRP
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, STAN_NAME, 
 PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, ORIG_VES, 
 KOL, VES)
AS 
SELECT 
  /* Все заявки действующие в текущем месяце (сгруппированы по Номеру и Станции) */ 
  GU12_A_ID, 
  ZAYV_NUM, 
  ZAYV_DATE, 
  FROM_DATE, 
  TO_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  MIN(FOX_KOD) as FOX_KOD, 
  STAN_ID, 
  STAN_NAME, 
  PROD_ID, 
  PROD_NAME, 
  MAX(IS_KORR) as IS_KORR, 
  SUM(DECODE(IS_KORR,1,0,KOL)) as ORIG_KOL, 
  SUM(DECODE(IS_KORR,1,0,VES)) as ORIG_VES, 
  SUM(DECODE(IS_KORR,2,0,KOL)) as KOL, 
  SUM(DECODE(IS_KORR,2,0,VES)) as VES 
FROM V_GD_AGENT_2008_GU12 
GROUP BY 
  ZAYV_NUM, 
  ZAYV_DATE, 
  FROM_DATE, 
  TO_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  STAN_ID, 
  STAN_NAME, 
  PROD_ID, 
  PROD_NAME, 
  GU12_A_ID;


--
-- V_GD_AGENT_2008_GU12_KORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_GU12_KORR
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, RAZN_NUM, RAZN_DATE, 
 FROM_DATE, TO_DATE, BEGIN_DATE, END_DATE, STAN_ID, 
 STAN_NAME, PROD_ID, PROD_NAME, IS_KORR, KOL, 
 VES)
AS 
SELECT
  /* Корректировки заявок в отчетном месяце */
  GU12_A_ID,
  ZAYV_NUM,
  ZAYV_DATE,
  RAZN_NUM,
  RAZN_DATE,
  FROM_DATE,
  TO_DATE,
  BEGIN_DATE,
  END_DATE,
  STAN_ID,
  STAN_NAME,
  PROD_ID,
  PROD_NAME,
  IS_KORR,
  SUM(DECODE(IS_KORR,2,-1,1)*KOL) as KOL,
  SUM(DECODE(IS_KORR,2,-1,1)*VES) as VES
FROM V_GD_AGENT_2008_GU12
WHERE IS_KORR IN (1,2)
  AND from_date BETWEEN BEGIN_DATE AND END_DATE
GROUP BY
  GU12_A_ID,
  ZAYV_NUM,
  ZAYV_DATE,
  RAZN_NUM,
  RAZN_DATE,
  FROM_DATE,
  TO_DATE,
  BEGIN_DATE,
  END_DATE,
  STAN_ID,
  STAN_NAME,
  PROD_ID,
  PROD_NAME,
  IS_KORR
HAVING IS_KORR=2 OR SUM(DECODE(IS_KORR,2,-1,1)*KOL)<>0;


--
-- V_GD_AGENT_2008_GU12_ZAYV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_GU12_ZAYV
(GU12_A_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, TO_DATE, 
 BEGIN_DATE, END_DATE, FOX_KOD, STAN_ID, STAN_NAME, 
 PROD_ID, PROD_NAME, IS_KORR, ORIG_KOL, ORIG_VES, 
 KOL, VES)
AS 
SELECT 
  /* Все заявки начинающие действовать в отчетном месяце */ 
  "GU12_A_ID","ZAYV_NUM","ZAYV_DATE","FROM_DATE","TO_DATE","BEGIN_DATE","END_DATE","FOX_KOD","STAN_ID","STAN_NAME","PROD_ID","PROD_NAME","IS_KORR","ORIG_KOL","ORIG_VES","KOL","VES" 
FROM V_GD_AGENT_2008_GU12_GRP 
WHERE from_date BETWEEN BEGIN_DATE AND END_DATE;


--
-- V_GU12_GRAF_1_ZAYAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_GRAF_1_ZAYAV
(ID, NOM_Z, FROM_DATE, TO_DATE, PROD_ID, 
 PROD, REG_DATE, SOGL_DATE, GROTP_ID, OTPRAV, 
 GROTP_OKPO, OTPR_ADR, PLATTAR_ID, PLATTAR, PLATTAR_KOD, 
 PLATTAR_OKPO, PLATTAR_ADR, EXPED_ID, EXPED, EXPED_OKPO, 
 EXPED_ADR, RODVAG_ID, RODVAG, STAT_NAGR, DOGOVOR, 
 STANOTPR_ID, STANOTPR, STANKODOTPR, PODACH_ID, PODACH, 
 VIDSOOB_ID, VIDSOOB, GR_GRUZ_ID, GR_GRUZ, GR_GRUZ_ABBR, 
 PRIZNOTPR_ID, PRIZNOTPR, VLADPUT_ID, VLADPUT, VLADPUT_OKPO, 
 ID_NOSOGL, SOGL)
AS 
SELECT
Z.ID,
Z.NOM_Z,
Z.FROM_DATE,
Z.TO_DATE,
Z.PROD_ID,
KP.NAME AS PROD,
Z.REG_DATE,
Z.SOGL_DATE,
Z.GROTP_ID,
O.PREDPR_NAME AS OTPRAV,
O.GROTP_OKPO,
O.OTPR_ADR,
Z.PLATTAR_ID,
PLT.PREDPR_NAME AS PLATTAR,
PLT.GD_KOD AS PLATTAR_KOD,
PLT.OKPO AS PLATTAR_OKPO,
PLT.PLATTAR_ADR,
Z.EXPED_ID,
E.PREDPR_NAME AS EXPED,
E.OKPO AS EXPED_OKPO,
E.EXPED_ADR,
Z.RODVAG_ID,
RV.NAME AS RODVAG,
KP.STAT_NAGR AS STAT_NAGR,
Z.DOGOVOR,
Z.STANOTPR_ID,
SO.STAN_NAME AS STANOTPR,
SO.STAN_KOD AS STANKODOTPR,
Z.PODACH_ID,
POD.NAME AS PODACH,
Z.VIDSOOB_ID AS VIDSOOB_ID,
SOOB.NAME AS VIDSOOB,
Z.GR_GRUZ_ID,
GRGR.NAME AS GR_GRUZ,
GRGR.ABBR AS GR_GRUZ_ABBR,
Z.PRIZNOTPR_ID,
PROT.NAME AS PRIZNOTPR,
Z.VLADPUT_ID,
VP.VLADPUT,
VP.VLADPUT_OKPO,
Z.ID_NOSOGL,
Z.SOGL
FROM
GU12_A Z,
V_GU12_OTPRAV O,
V_GU12_PLATTAR PLT,
V_GU12_EXPED E,
KLS_PROD_GU12 KP,
KLS_GD_VAGTYPE RV,
V_GU12_STAN_OTPR SO,
KLS_GD_PODACH POD,
KLS_GD_SOOB SOOB,
KLS_GD_GROUP GRGR,
KLS_GD_OTPR PROT,
V_GU12_VLADPUT VP
WHERE
Z.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND Z.GROTP_ID=O.GROTP_ID(+)
AND Z.PLATTAR_ID=PLT.PLATTAR_ID(+)
AND Z.EXPED_ID=E.ID(+)
AND Z.PROD_ID=KP.ID(+)
AND Z.RODVAG_ID=RV.ID(+)
AND Z.STANOTPR_ID=SO.STAN_ID(+)
AND Z.PODACH_ID=POD.ID(+)
AND Z.VIDSOOB_ID=SOOB.ID(+)
AND Z.GR_GRUZ_ID=GRGR.ID(+)
AND Z.PRIZNOTPR_ID=PROT.ID(+)
AND Z.VLADPUT_ID=VP.VLADPUT_ID(+)
ORDER BY ID;


--
-- V_GU12_PLAT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_PLAT
(PLAT_ID, PLAT_NAME, FULLPLAT)
AS 
SELECT /* RULE */ DISTINCT 
  KLS_PREDPR.ID AS PLAT_ID
  ,KLS_PREDPR.SHORT_NAME AS PLAT_NAME
  ,KLS_PREDPR.PREDPR_NAME AS FULLPLAT
FROM KLS_PREDPR,KLS_DOG
WHERE KLS_PREDPR.ID=KLS_DOG.PREDPR_ID
  AND DOG_YEAR>=2003
ORDER BY PLAT_NAME;


--
-- V_GU12_REP_CARD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_CARD
(ID, NOM_Z, FROM_DATE, TO_DATE, PROD_ID, 
 PROD, REG_DATE, SOGL_DATE, GROTP_ID, OTPRAV, 
 GROTP_OKPO, OTPR_ADR, GROTP_RS, OTPR_BANK, PLATTAR_ID, 
 PLATTAR, PLATTAR_KOD, PLATTAR_OKPO, PLATTAR_ADR, PLT_RS, 
 PLT_BANK, EXPED_ID, EXPED, EXPED_OKPO, EXPED_ADR, 
 RODVAG_ID, RODVAG, STAT_NAGR, DOGOVOR, STANOTPR_ID, 
 STANOTPR, STANKODOTPR, PODACH_ID, PODACH, VIDSOOB_ID, 
 VIDSOOB, GR_GRUZ_ID, GR_GRUZ, GR_GRUZ_ABBR, PRIZNOTPR_ID, 
 PRIZNOTPR, VLADPUT_ID, VLADPUT, VLADPUT_OKPO, ID_NOSOGL, 
 SOGL)
AS 
SELECT
Z.ID,
Z.NOM_Z,
Z.FROM_DATE,
Z.TO_DATE,
Z.PROD_ID,
KP.NAME AS PROD,
Z.REG_DATE,
Z.SOGL_DATE,
Z.GROTP_ID,
O.PREDPR_NAME AS OTPRAV,
O.GROTP_OKPO,
O.OTPR_ADR,
O.GROTP_RS,
O.BANK_NAME AS OTPR_BANK,
Z.PLATTAR_ID,
PLT.PREDPR_NAME AS PLATTAR,
PLT.GD_KOD AS PLATTAR_KOD,
PLT.OKPO AS PLATTAR_OKPO,
PLT.PLATTAR_ADR,
PLT.RS AS PLT_RS,
PLT.BANK_NAME AS PLT_BANK,
Z.EXPED_ID,
E.PREDPR_NAME AS EXPED,
E.OKPO AS EXPED_OKPO,
E.EXPED_ADR,
Z.RODVAG_ID,
RV.NAME AS RODVAG,
KP.STAT_NAGR AS STAT_NAGR,
Z.DOGOVOR,
Z.STANOTPR_ID,
SO.STAN_NAME AS STANOTPR,
SO.STAN_KOD AS STANKODOTPR,
Z.PODACH_ID,
POD.NAME AS PODACH,
Z.VIDSOOB_ID AS VIDSOOB_ID,
SOOB.NAME AS VIDSOOB,
Z.GR_GRUZ_ID,
GRGR.NAME AS GR_GRUZ,
GRGR.ABBR AS GR_GRUZ_ABBR,
Z.PRIZNOTPR_ID,
PROT.TAG AS PRIZNOTPR,
Z.VLADPUT_ID,
VP.VLADPUT,
VP.VLADPUT_OKPO,
Z.ID_NOSOGL,
Z.SOGL
FROM
GU12_A Z,
V_GU12_OTPRAV O,
V_GU12_PLATTAR PLT,
V_GU12_EXPED E,
KLS_PROD_GU12 KP,
KLS_GD_VAGTYPE RV,
V_GU12_STAN_OTPR SO,
KLS_GD_PODACH POD,
KLS_GD_SOOB SOOB,
KLS_GD_GROUP GRGR,
KLS_GD_OTPR PROT,
V_GU12_VLADPUT VP
WHERE
Z.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND Z.GROTP_ID=O.GROTP_ID(+)
AND Z.PLATTAR_ID=PLT.PLATTAR_ID(+)
AND Z.EXPED_ID=E.ID(+)
AND Z.PROD_ID=KP.ID(+)
AND Z.RODVAG_ID=RV.ID(+)
AND Z.STANOTPR_ID=SO.STAN_ID(+)
AND Z.PODACH_ID=POD.ID(+)
AND Z.VIDSOOB_ID=SOOB.ID(+)
AND Z.GR_GRUZ_ID=GRGR.ID(+)
AND Z.PRIZNOTPR_ID=PROT.ID(+)
AND Z.VLADPUT_ID=VP.VLADPUT_ID(+)
ORDER BY ID;


--
-- V_GU12_REP_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_PLAN
(PROD, PLAT_NAME, STAN_NAME, DATE_R, KOL, 
 VES)
AS 
SELECT P.NAME AS PROD,PL.PLAT_NAME,S.STAN_NAME,BR.DATE_R,SUM(BR.KOL_VAG) AS KOL,SUM(BR.VES) AS VES
FROM GU12_BR BR,GU12_B B,GU12_A A,KLS_PROD_GU12 P,V_GU12_PLAT PL,V_GU12_STAN_NAZN S
WHERE BR.ID_B=B.ID
AND B.ID_A=A.ID
AND A.PROD_ID=P.ID
AND PL.PLAT_ID=B.PLAT_ID
AND S.ID=B.STAN_ID
AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_PLAN','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_PLAN','MASTER','GU12')
AND BR.KOL_VAG<>0
AND A.SOGL_DATE IS NOT NULL
AND B.ISCOR<>2
GROUP BY PLAT_NAME,NAME,STAN_NAME,DATE_R
ORDER BY PLAT_NAME,NAME,STAN_NAME,DATE_R;


--
-- V_GU12_REP_PLAN_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_PLAN_SNP
(PROD, NOM_Z, PLAT_NAME, STAN_NAME, DATE_R, 
 KOL, VES)
AS 
SELECT 
NVL(NP.NAME_NPR,'   ') AS PROD
,A.NOM_Z
,PL.PLAT_NAME
,S.STAN_NAME
,BR.DATE_R
,SUM(BR.KOL_VAG) AS KOL
,SUM(BR.VES) AS VES
FROM 
GU12_BR BR
,GU12_B B
,GU12_A A
,KLS_PROD NP
,V_GU12_PLAT PL
,V_GU12_STAN_NAZN S
WHERE BR.ID_B=B.ID
AND B.ID_A=A.ID
AND BR.ID_NPR=NP.ID_NPR(+)
AND PL.PLAT_ID=B.PLAT_ID
AND S.ID=B.STAN_ID
AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_PLAN','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_PLAN','MASTER','GU12')
AND BR.KOL_VAG<>0
AND B.ISCOR<>2
AND (CASE
         WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		 ELSE PL.PLAT_ID
	 END)=2641
GROUP BY PLAT_NAME,NOM_Z,NAME_NPR,STAN_NAME,DATE_R
ORDER BY PLAT_NAME,NOM_Z,NAME_NPR,STAN_NAME,DATE_R;


--
-- V_GU12_REP_REIS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_REIS
(ID, ID_A, PDATE, SOBSTVVAG_ID, SOBSTVVAG_NAME, 
 STAN_ID, STANNAZN, STANNAZN_KOD, STATES_NAME, STATES_KOD, 
 STAN_PER_ID, STANPER, STANPER_KOD, GRUZPOL_ID, GRUZPOL_OKPO, 
 GRUZPOL, VIDOTPR_ID, VIDOTPR_NAME, VIDOTPR, KOL_VAG, 
 VES, MRK, PLAT_ID, PLAT_NAME, PRINVAG_ID, 
 PRINVAG_NAME)
AS 
SELECT
R.ID,
R.ID_A,
R.PDATE,
R.SOBSTVVAG_ID,
SV.NAME AS SOBSTVVAG_NAME,
R.STAN_ID,
SN.STAN_NAME AS STANNAZN ,
SN.STAN_KOD AS STANNAZN_KOD,
SN.STATES_NAME,
SN.STATES_KOD,
R.STAN_PER_ID,
SP.STAN_NAME AS STANPER,
SP.STANPER_KOD,
R.GRUZPOL_ID,
GP.OKPO AS GRUZPOL_OKPO,
GP.PREDPR_NAME AS GRUZPOL,
R.VIDOTPR_ID,
VO.NAME AS VIDOTPR_NAME,
VO.TAG AS VIDOTPR,
R.KOL_VAG,
R.VES,
R.MRK,
R.PLAT_ID,
PL.PLAT_NAME,
R.PRINVAG_ID,
PV.ABBR AS PRINVAG_NAME
FROM
GU12_B R,
KLS_GD_SOBSTVVAG SV,
V_GU12_STAN_NAZN SN,
V_GU12_STAN_PER SP,
V_GU12_GRUZ_POL GP,
V_GU12_PLAT PL,
KLS_GD_VID_OTPR VO,
KLS_GD_PRINVAG PV
WHERE
R.ID_A=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND R.SOBSTVVAG_ID=SV.ID(+)
AND R.STAN_ID=SN.ID(+)
AND R.GRUZPOL_ID=GP.ID(+)
AND R.VIDOTPR_ID=VO.ID(+)
AND R.STAN_PER_ID=SP.ID(+)
AND R.PLAT_ID=PL.PLAT_ID(+)
AND R.PRINVAG_ID=PV.ID(+)
ORDER BY ID;


--
-- V_GU12_REP_ZAYAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_ZAYAV
(ID, NOM_Z, FROM_DATE, TO_DATE, PROD_ID, 
 PROD, REG_DATE, SOGL_DATE, GROTP_ID, OTPRAV, 
 GROTP_OKPO, OTPR_ADR, GROTP_RS, OTPR_BANK, PLATTAR_ID, 
 PLATTAR, PLATTAR_KOD, PLATTAR_OKPO, PLATTAR_ADR, PLT_RS, 
 PLT_BANK, EXPED_ID, EXPED, EXPED_OKPO, EXPED_ADR, 
 RODVAG_ID, RODVAG, STAT_NAGR, DOGOVOR, STANOTPR_ID, 
 STANOTPR, STANKODOTPR, PODACH_ID, PODACH, VIDSOOB_ID, 
 VIDSOOB, GR_GRUZ_ID, GR_GRUZ, GR_GRUZ_ABBR, PRIZNOTPR_ID, 
 PRIZNOTPR, VLADPUT_ID, VLADPUT, VLADPUT_OKPO, ID_NOSOGL, 
 SOGL)
AS 
SELECT
Z.ID,
Z.NOM_Z,
Z.FROM_DATE,
Z.TO_DATE,
Z.PROD_ID,
KP.NAME AS PROD,
Z.REG_DATE,
Z.SOGL_DATE,
Z.GROTP_ID,
O.PREDPR_NAME AS OTPRAV,
O.GROTP_OKPO,
O.OTPR_ADR,
O.GROTP_RS,
O.BANK_NAME AS OTPR_BANK,
Z.PLATTAR_ID,
PLT.PREDPR_NAME AS PLATTAR,
PLT.GD_KOD AS PLATTAR_KOD,
PLT.OKPO AS PLATTAR_OKPO,
PLT.PLATTAR_ADR,
PLT.RS AS PLT_RS,
PLT.BANK_NAME AS PLT_BANK,
Z.EXPED_ID,
E.PREDPR_NAME AS EXPED,
E.OKPO AS EXPED_OKPO,
E.EXPED_ADR,
Z.RODVAG_ID,
RV.NAME AS RODVAG,
KP.STAT_NAGR AS STAT_NAGR,
Z.DOGOVOR,
Z.STANOTPR_ID,
SO.STAN_NAME AS STANOTPR,
SO.STAN_KOD AS STANKODOTPR,
Z.PODACH_ID,
POD.NAME AS PODACH,
Z.VIDSOOB_ID AS VIDSOOB_ID,
SOOB.NAME AS VIDSOOB,
Z.GR_GRUZ_ID,
GRGR.NAME AS GR_GRUZ,
GRGR.ABBR AS GR_GRUZ_ABBR,
Z.PRIZNOTPR_ID,
PROT.TAG AS PRIZNOTPR,
Z.VLADPUT_ID,
VP.VLADPUT,
VP.VLADPUT_OKPO,
Z.ID_NOSOGL,
Z.SOGL
FROM
GU12_A Z,
V_GU12_OTPRAV O,
V_GU12_PLATTAR PLT,
V_GU12_EXPED E,
KLS_PROD_GU12 KP,
KLS_GD_VAGTYPE RV,
V_GU12_STAN_OTPR SO,
KLS_GD_PODACH POD,
KLS_GD_SOOB SOOB,
KLS_GD_GROUP GRGR,
KLS_GD_OTPR PROT,
V_GU12_VLADPUT VP
WHERE
Z.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND Z.GROTP_ID=O.GROTP_ID(+)
AND Z.PLATTAR_ID=PLT.PLATTAR_ID(+)
AND Z.EXPED_ID=E.ID(+)
AND Z.PROD_ID=KP.ID(+)
AND Z.RODVAG_ID=RV.ID(+)
AND Z.STANOTPR_ID=SO.STAN_ID(+)
AND Z.PODACH_ID=POD.ID(+)
AND Z.VIDSOOB_ID=SOOB.ID(+)
AND Z.GR_GRUZ_ID=GRGR.ID(+)
AND Z.PRIZNOTPR_ID=PROT.ID(+)
AND Z.VLADPUT_ID=VP.VLADPUT_ID(+)
ORDER BY ID;


--
-- V_KOMISS_GRAPHICK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KOMISS_GRAPHICK
(DOG_NUMBER, DATE_PLAN, PLAN_PLAT, NUM_PLAT_POR, FACT_PLAT)
AS 
SELECT
  dog_number,
  date_plan,
  SUM(plan_plat) AS plan_plat,
  MAX(num_plat_por),
  SUM(fact_plat) AS fact_plat
FROM
(
SELECT 
  kls_dog.DOG_NUMBER,
  bills.date_kvit+bills.KOL_DN AS date_plan,
  bills.SUMMA_DOK AS plan_plat,
  '' AS num_plat_por,
  0 AS fact_plat
  FROM bills,kls_dog WHERE kls_dog.id=bills.dog_id AND kls_dog.LUKDOG_ID=793
UNION ALL
SELECT
  kls_dog.DOG_NUMBER,
  opl.DATA_POR AS date_plan,
  0 AS plan_plat,
  get_opl_plat_nums(kls_dog.id, opl.DATA_POR) AS num_plat_por,
  opl.SUMMA AS fact_plat
  FROM kls_dog,opl
  WHERE kls_dog.id=opl.dog_id AND kls_dog.LUKDOG_ID=793
) 
GROUP BY
  dog_number,
  date_plan;


--
-- V_KSSS_USL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KSSS_USL
(PERIOD, NAME_NPR, ID_NPR, NPR, SHORT_NAME, 
 ZAK, SUMMA)
AS 
SELECT /*+ ORDERED USE_NL (d) */
       TO_CHAR (b.date_kvit, 'yyyymm') AS period, pr.name_npr, pr.id_npr,
       pr.ksss_prod_id AS npr, p.short_name, p.ksss_predpr_id AS zak,
       bp.summa
  FROM bills b, bill_pos bp, kls_prod pr, kls_dog d, kls_predpr p
 WHERE b.nom_dok = bp.nom_dok
   AND bp.prod_id_npr = pr.id_npr
   AND b.dog_id = d.ID
   AND d.predpr_id = p.ID
   AND bp.prod_id_npr < '10300'
   AND b.date_kvit > '01-sep-2004'
   AND bp.summa <> 0;


--
-- V_LIST_PLATEL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LIST_PLATEL
(ID, SHORT_NAME, PREDPR_NAME)
AS 
SELECT DISTINCT KLS_PREDPR.ID, KLS_PREDPR.SHORT_NAME, KLS_PREDPR.PREDPR_NAME 
FROM KLS_PREDPR,KLS_DOG  
WHERE (KLS_PREDPR.ID = KLS_DOG.PREDPR_ID AND KLS_DOG.DOG_YEAR>1999)  
ORDER BY KLS_PREDPR.SHORT_NAME;


--
-- V_MOS_KOMISS_CLOSED_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MOS_KOMISS_CLOSED_SF
(FULL_NAME_PLAT, INN_PLAT, ADDR_PRED, DOGOVOR, DATADOG, 
 KOM_SF, DATE_KOM_SF, NPO_SF, DATE_NPO_SF, BUHANAL, 
 DATAPLAT, SUMBEZNDS, SUMNDS, SUMPLATBEZNDS, NDSPLAT, 
 TOTALPLAT)
AS 
select pred.PREDPR_NAME, pred.INN, pred.POSTINDEX_J || ' ' || pred.CITY_J || ' ' || pred.ADDRESS_J, dog.DOG_NUMBER, dog.DOG_DATE, s.SCHETF as kom_sf,
         s.DATA_VYP_SF as date_kom_sf, b.NPO_SF, b.DATE_VYP_SF as date_npo_sf,
         p.buhanal, o.dataplat, p.SUMMA as sumbeznds, p.SUMNDS, o.sumplatbeznds, o.ndsplat, o.totalplat
    from sveta.sf_sfak_prod s,
--         master.v_bills_snp b,
/* Вместо v_bills_snp */
         master.bills b,
/* - */
	     v_mos_komiss_opl o,
	     v_mos_komiss_pos p,
	     master.kls_predpr pred,
		 master.kls_dog dog
   where s.kod_prod=b.nom_dok and
         s.dogovor='0210218' and
         s.kod_prod=p.kod_prod and
		 p.kod_prod=o.kod_prod and
		 p.buhanal=o.buhanal and
--         b.PLAT_ID=pred.ID and
/* Вместо v_bills_snp */
         dog.PREDPR_ID=pred.ID and
/* - */
		 b.dog_id=dog.ID
   order by o.dataplat, p.buhanal, s.FULL_NAME_PLAT, kom_sf;


--
-- V_MREE_PLANPOST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_PLANPOST
(NAME, OTHER, ID_NPR, PLANSTRU_ID, PARENT_ID, 
 FOR_ID, FOR_NAME, PROD_PLAN_ID, ABBR_NPR, DATE_PLAN, 
 BEGIN_DATE, END_DATE, PLAN_VES, PLAN_VES_ARH, DOG_ID, 
 PLAN_ID)
AS 
SELECT
	   kls_planstru.NAME,
--	   DECODE(kls_planstru.KOD_SGR,91,1,0) AS other,
	   DECODE(kls_planstru.KOD_SGR,91,DECODE(kls_planstru.KOD_SPG,10,1,0),0) AS other,
	   kls_prod.id_npr, kls_planstru.ID planstru_id,
       kls_planstru.PARENT_ID,kls_planstru.FOR_ID,kls_planstru.FOR_NAME,
       kls_prod.PROD_PLAN_ID, kls_prod.abbr_npr, plan_periods.date_plan,
       plan_periods.begin_date, plan_periods.end_date, plan_post.plan_ves,
	   DECODE(kls_planstru.REGION_ID,21,plan_post.plan_ves,0) AS plan_ves_arh,
       plan_post.dog_id,plan_post.plan_id
  FROM plan_post, kls_planstru, plan_periods, kls_prod,V_TEMP_MREESTR_PARAMS, kls_plan
 WHERE (    (kls_planstru.ID = plan_post.planstru_id)
        AND (plan_periods.plan_id = plan_post.plan_id)
        AND (plan_periods.ID = plan_post.plan_per_id)
        AND (kls_prod.id_npr = plan_post.prod_id_npr)
		AND (plan_periods.PLAN_ID=KLS_PLAN.ID)
		AND (kls_plan.GLOBAL_PLAN_ID in (1,2)) -- Для отсеивания других планов
		AND (V_TEMP_MREESTR_PARAMS.DATE_PLAN=plan_periods.DATE_PLAN)
		AND (V_TEMP_MREESTR_PARAMS.DATETIME_REPORT>=plan_periods.BEGIN_DATE)
       );


--
-- V_MREE_SNP_PLANPOST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_SNP_PLANPOST
(REFINERY_ID, REFINERY_NAME, NAME, OTHER, ID_NPR, 
 PLANSTRU_ID, PARENT_ID, FOR_ID, FOR_NAME, PROD_PLAN_ID, 
 ABBR_NPR, DATE_PLAN, BEGIN_DATE, END_DATE, PLAN_VES, 
 PLAN_VES_ARH, DOG_ID, PLAN_ID)
AS 
SELECT
  A.REFINERY_ID,
  refinery.SF_NAME as REFINERY_NAME,
  A.NAME,
  A.other,
  A.id_npr,
  A.planstru_id,
  A.PARENT_ID,
  A.FOR_ID,
  A.FOR_NAME,
  A.PROD_PLAN_ID,
  A.abbr_npr,
  A.date_plan,
  A.begin_date,
  A.end_date,
  SUM(A.PLAN_VES) as PLAN_VES,
  SUM(A.PLAN_VES_ARH) as PLAN_VES_ARH,
  A.dog_id,
  A.plan_id
FROM
(
-- Позиции плана из плана поставок
SELECT
  plan_post.REFINERY_ID,
  kls_planstru.NAME,
  DECODE(kls_planstru.KOD_SGR,91,DECODE(kls_planstru.KOD_SPG,10,1,0),0) AS other,
  kls_prod.id_npr,
  kls_planstru.ID planstru_id,
  kls_planstru.PARENT_ID,
  kls_planstru.FOR_ID,
  kls_planstru.FOR_NAME,
  kls_prod.PROD_PLAN_ID,
  kls_prod.abbr_npr,
  plan_periods.date_plan,
  plan_periods.begin_date,
  plan_periods.end_date,
  plan_post.plan_ves,
  DECODE(kls_planstru.REGION_ID,21,plan_post.plan_ves,0) AS plan_ves_arh,
  plan_post.dog_id,
  plan_post.plan_id
FROM plan_post, kls_planstru, plan_periods, kls_prod,V_TEMP_MREESTR_SNP_PARAMS, kls_plan
WHERE (kls_planstru.ID = plan_post.planstru_id)
  AND (plan_periods.plan_id = plan_post.plan_id)
  AND (plan_periods.ID = plan_post.plan_per_id)
  AND (kls_prod.id_npr = plan_post.prod_id_npr)
  AND (plan_periods.PLAN_ID=KLS_PLAN.ID)
  AND (kls_plan.GLOBAL_PLAN_ID=12) -- План СНП
--  AND plan_post.REFINERY_ID=8 -- Только с УНП
  AND (V_TEMP_MREESTR_SNP_PARAMS.DATE_PLAN=plan_periods.DATE_PLAN)
  AND (V_TEMP_MREESTR_SNP_PARAMS.DATETIME_REPORT>=plan_periods.BEGIN_DATE)
UNION ALL
-- Позиции плана из заявок
SELECT distinct
  (CASE
     WHEN kls_dog2.is_agent=8 THEN kls_dog2.agent_id 
  ELSE 8
   END) as REFINERY_ID,    
  kls_planstru.NAME,
  DECODE(kls_planstru.KOD_SGR,91,DECODE(kls_planstru.KOD_SPG,10,1,0),0) AS other,
  kls_prod.id_npr,
  kls_planstru.ID planstru_id,
  kls_planstru.PARENT_ID,
  kls_planstru.FOR_ID,
  kls_planstru.FOR_NAME,
  kls_prod.PROD_PLAN_ID,
  kls_prod.abbr_npr,
  ZAKAZ.date_plan,
  ZAKAZ.date_plan as begin_date,
  LAST_DAY(ZAKAZ.date_plan) as end_date,
  0 as plan_ves,
  0 AS plan_ves_arh,
  ZAKAZ.LUKDOG_ID as dog_id,
  KLS_PLAN.ID as plan_id
FROM ZAKAZ, kls_planstru, kls_prod,V_TEMP_MREESTR_SNP_PARAMS, kls_plan,kls_dog kls_dog2
WHERE (kls_planstru.ID = ZAKAZ.planstru_id)
  AND (kls_prod.id_npr = ZAKAZ.prod_id_npr)
  AND (KLS_PLAN.ID=12)
  AND (V_TEMP_MREESTR_SNP_PARAMS.DATE_PLAN=ZAKAZ.DATE_PLAN)
  AND zakaz.is_agent=2
  AND zakaz.lukdog_id=kls_dog2.id(+)
  AND zakaz.is_accept=1
) a, kls_predpr refinery
WHERE a.refinery_id=refinery.id 
GROUP BY
  A.REFINERY_ID,
  refinery.SF_NAME,
  A.NAME,
  A.other,
  A.id_npr,
  A.planstru_id,
  A.PARENT_ID,
  A.FOR_ID,
  A.FOR_NAME,
  A.PROD_PLAN_ID,
  A.abbr_npr,
  A.date_plan,
  A.begin_date,
  A.end_date,
  A.dog_id,
  A.plan_id;


--
-- V_NEW_MONTH_SPECIF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NEW_MONTH_SPECIF
(ID, VBELN, NOM_ZD, DATE_RAZN, DATE_PLAN, 
 LOCK_STATUS, IS_EXP_NAME, IS_EXP, VBAK_VSBED, LOAD_NAME, 
 VBKD_TRATY, VAGONTYPE_NAME, LOAD_ABBR, LOAD_TYPE_ID, TYPE_OTGR_NAME, 
 VBAP_MATNR, PROD_NAME_NPR, PROD_ID_NPR, LUK_DOG_NUMBER, LUK_DOG_ID, 
 NPO_DOG_NUMBER, NPO_DOG_ID, DOG_NUMBER, DOG_ID, USL_NUMBER, 
 VBPA_KUNNR, PLAT_NAME, PLAT_ID, OT_LIFNR, GROTP_NAME, 
 GROTP_ID, TEX_PD_ID, VBAP_ROUTE, ROUTE_NAME, KNANF, 
 STANOTP_KOD, STANOTP_ID, STANOTP_NAME, KNEND, STAN_KOD, 
 STAN_ID, STAN_NAME, SH_KUNNR, POLUCH_NAME, POLUCH_ID, 
 POLUCH_GD_KOD, POTREB_NAME, POTREB_ID, VETKA_NAME, VETKA_ID, 
 OWNERSHIP_ID, VBAK_AUART, CONTRACTOR_ATTR, NAZN_OTG_ID, NAZN_OTG_NAME, 
 NP_OWNER, OWNER_NAME, OWNER_ID, NP_PRODR, PRODR_NAME, 
 PRODR_ID, SUPPLIER_ID, SUPPLIER_NAME, LGOBE, TARIF_CODE, 
 TRANSP_NUM, FORMA_2, FORMA_2_NAME, PRIM, GR4, 
 OSN_8, SLIV_V, DOP_CIST, OBOGR, VBKD_VSART, 
 VAGOWNER_NAME, TONN_DECLARED, CIST_DECLARED, TONN_ALLOW, CIST_ALLOW, 
 TONN_MIN, CIST_MIN, TONN_R, CIST_R, TONN_LOADED, 
 CIST_LOADED, GOSPROG_ID, GOSPROG_NAME, GP_NAPR_ID, GP_NAPR_NAME, 
 DATE_CEN, CENA, CENA_OTP, SUM_ZD, TARIF1TONN, 
 PLANSTRU_ID, PLANSTRU_NAME, UPDATE_DATE, UPDATE_FILE)
AS 
SELECT
  TO_CHAR(A.ID) AS ID, -- ID
  '' AS VBELN, -- номер разнарядки R3
  '' AS NOM_ZD, -- номер разнарядки НПО
  TRUNC(SYSDATE) AS DATE_RAZN, -- дата разнарядки
  TRUNC(SYSDATE,'MONTH') AS DATE_PLAN, -- плановая дата
  '0010' AS LOCK_STATUS, -- статус блокировки разнарядки
  DECODE(dog.VIDDOG_ID,41,'ЭКСПОРТ',42,'ЭКСПОРТ','ВНУТРЕННИЙ РЫНОК') AS IS_EXP_NAME, DECODE(dog.VIDDOG_ID,41,1,42,1,0) AS IS_EXP, -- направление
  '' AS VBAK_VSBED, NVL(C.LOAD_NAME,'') AS LOAD_NAME, '' AS VBKD_TRATY, '' AS VAGONTYPE_NAME, NVL(A.LOAD_ABBR,'') AS LOAD_ABBR, NVL(C.LOAD_TYPE_ID,1) AS LOAD_TYPE_ID, NVL(KLS_LOAD_TYPE.TYPE_OTGR_NAME,''), -- Тип транспортировки
  '' AS VBAP_MATNR, KLS_PROD.NAME_NPR AS PROD_NAME_NPR, A.PROD_ID_NPR, -- продукт
  DECODE(NVL(dog.MAINDOG_ID,0),0,'',DECODE(NVL(dog.LUKDOG_ID,0),0,dog.DOG_NUMBER,luk_dog.DOG_NUMBER)) AS LUK_DOG_NUMBER, DECODE(NVL(dog.MAINDOG_ID,0),0,0,DECODE(NVL(dog.LUKDOG_ID,0),0,dog.ID,dog.LUKDOG_ID)) AS LUK_DOG_ID, -- Договор ЛУКОЙЛ-Клиент
  DECODE(NVL(dog.MAINDOG_ID,0),0,dog.DOG_NUMBER,DECODE(NVL(dog.LUKDOG_ID,0),0,'',dog.DOG_NUMBER)) AS NPO_DOG_NUMBER, DECODE(NVL(dog.MAINDOG_ID,0),0,dog.ID,DECODE(NVL(dog.LUKDOG_ID,0),0,0,dog.ID)) AS NPO_DOG_ID, -- Договор НПО-Клиент
  DECODE(NVL(dog.LUKDOG_ID,0),0,DOG.DOG_NUMBER,DECODE(B.IS_AGENT,2,luk_dog.DOG_NUMBER,DOG.DOG_NUMBER)) AS DOG_NUMBER, DECODE(NVL(dog.LUKDOG_ID,0),0,DOG.ID,DECODE(B.IS_AGENT,2,dog.LUKDOG_ID,DOG.ID)) AS DOG_ID, -- Договор разнарядки
  0 AS USL_NUMBER, -- Номер условия
  '' AS VBPA_KUNNR, DECODE(NVL(dog.LUKDOG_ID,0),0,plat.PREDPR_NAME,DECODE(B.IS_AGENT,2,MAIN_PLAT.PREDPR_NAME,plat.PREDPR_NAME)) AS plat_name, DECODE(NVL(dog.LUKDOG_ID,0),0,dog.PREDPR_ID,DECODE(B.IS_AGENT,2,MAIN_DOG.PREDPR_ID,dog.PREDPR_ID)) AS plat_ID, -- Плательщик по договору разнарядки
  '' AS OT_LIFNR, 'ООО "ЛУКОЙЛ-СЕВЕРНЕФТЕПРОДУКТ"' AS grotp_name, 2641 AS grotp_ID, -- грузоотправитель
  0 AS TEX_PD_ID, -- плательщик тарифа
  '' AS VBAP_ROUTE, '' AS ROUTE_NAME, '' AS KNANF, STANOTP.STAN_KOD AS STANOTP_KOD, NVL(STANOTP.ID,0) AS STANOTP_ID, STANOTP.STAN_NAME AS STANOTP_NAME, '' AS KNEND, STAN.STAN_KOD, NVL(STAN.ID,0) AS STAN_ID, STAN.STAN_NAME, -- Маршрут
  '' AS SH_KUNNR, poluch.PREDPR_NAME AS poluch_name, NVL(A.poluch_ID,0) AS poluch_ID, -- грузополучатель
  poluch.GD_KOD AS POLUCH_GD_KOD,
  potreb.PREDPR_NAME AS POTREB_NAME, NVL(A.potreb_ID,0) AS potreb_ID, -- Потребитель
  KLS_VETKA.VETKA_NAME AS VETKA_NAME, NVL(A.vetka_id,0) AS VETKA_ID, -- Ветка получателя
  DECODE(NVL(dog.MAINDOG_ID,0),0,2,0) AS OWNERSHIP_ID, -- отношения собственности (0-собс.продукт,1-покупной,2-чужой)
  '' AS VBAK_AUART,
  0 AS CONTRACTOR_ATTR,
  DECODE(dog.VIDDOG_ID,41,5,42,5,DECODE(NVL(dog.MAINDOG_ID,0),0,4,1)) AS NAZN_OTG_ID, DECODE(dog.VIDDOG_ID,41,'ЭКСПОРТ (СОБСТВЕННЫЙ ПРОДУКТ НЕФТЯНОЙ КОМПАНИИ)',42,'ЭКСПОРТ (СОБСТВЕННЫЙ ПРОДУКТ НЕФТЯНОЙ КОМПАНИИ)',DECODE(NVL(dog.MAINDOG_ID,0),0,'УСЛУГИ ПО РЕАЛИЗАЦИИ СОБСТВЕННОГО ПРОДУКТА','СОБСТВЕННЫЙ ПРОДУКТ НЕФТЯНОЙ КОМПАНИИ')) AS NAZN_OTG_NAME, -- назначение отгрузки
  '' AS NP_OWNER, DECODE(NVL(dog.MAINDOG_ID,0),0,plat.PREDPR_NAME,'НЕФТЯНАЯ КОМПАНИЯ "ЛУКОЙЛ"') AS owner_name, DECODE(NVL(dog.MAINDOG_ID,0),0,dog.PREDPR_ID,1) AS owner_ID, -- собственник н/п
  '' AS NP_PRODR, '' AS prodr_name, 0 AS prodr_ID, -- производитель н/п
  DECODE(NVL(dog.MAINDOG_ID,0),0,0,1) AS SUPPLIER_ID, DECODE(NVL(dog.MAINDOG_ID,0),0,'','НЕФТЯНАЯ КОМПАНИЯ "ЛУКОЙЛ"') AS SUPPLIER_NAME,
  '' AS LGOBE,
  '' AS TARIF_CODE, -- Код искл.тарифа
  '' AS TRANSP_NUM, -- N транспорта
  0 AS FORMA_2, '' AS FORMA_2_NAME, -- Оплата по ф.2
  A.PRIM, -- Примечание
  A.GR4, -- Графа 4
  0 AS osn_8, -- можно в 8-осные
  0 AS sliv_v, -- врехний слив
  0 AS dop_cist, -- д/ц
  0 AS obogr, -- обогрев
  '' AS VBKD_VSART,
  '' AS VAGOWNER_NAME,
  A.VES_ALL AS TONN_DECLARED, -- Заявлено
  CEIL(A.VES_ALL/60) AS CIST_DECLARED, -- Заявлено цист.
  A.VES_ALL AS TONN_ALLOW, -- Разрешено
  CEIL(A.VES_ALL/60) AS CIST_ALLOW, -- Разрешено цист.
  0 AS TONN_MIN, -- Минимально
  0 AS CIST_MIN, -- Минимально цист.
  0 AS TONN_R,
  0 AS CIST_R,
  0 AS TONN_LOADED,
  0 AS CIST_LOADED,
  -1 AS GOSPROG_ID, '' AS GOSPROG_NAME, -- Госпрограмма
  0 AS GP_NAPR_ID, '' AS GP_NAPR_NAME, -- Получатель по ГП
  TRUNC(SYSDATE) AS DATE_CEN, -- Дата цены
  0 AS CENA, -- цена без НДС
  0 AS CENA_OTP, -- отпускная цена
  0 AS SUM_ZD, -- сумма по заданию
  0 AS TARIF1TONN, -- тариф за 1 тонну
  0 AS PLANSTRU_ID, '' AS PLANSTRU_NAME, -- позиция плана поставки
  A.UPDATE_DATE,
  '' AS UPDATE_FILE
FROM SPECIF A, KLS_DOG dog, KLS_STAN stan, KLS_STAN stanotp, KLS_VIDDOG B, KLS_DOG MAIN_DOG, KLS_VID_OTGR C,
     KLS_LOAD_TYPE, KLS_PROD, KLS_DOG LUK_DOG, KLS_PREDPR plat, KLS_PREDPR main_plat, KLS_PREDPR poluch,
	 KLS_PREDPR potreb, KLS_VETKA
WHERE A.DOG_ID=dog.ID
  AND A.STANOTP_ID=stanotp.ID(+)
  AND A.STAN_ID=stan.ID(+)
  AND dog.MAINDOG_ID=MAIN_DOG.ID(+)
  AND MAIN_DOG.VIDDOG_ID=B.ID(+)
  AND A.LOAD_ABBR=C.LOAD_ABBR (+)
  AND C.LOAD_TYPE_ID=KLS_LOAD_TYPE.ID(+)
  AND A.PROD_ID_NPR=KLS_PROD.ID_NPR(+)
  AND dog.LUKDOG_ID=luk_dog.ID(+)
  AND dog.PREDPR_ID=plat.ID
  AND main_dog.PREDPR_ID=main_plat.ID(+)
  AND A.POLUCH_ID=poluch.ID(+)
  AND A.POTREB_ID=potreb.ID(+)
  AND A.VETKA_ID=KLS_VETKA.ID(+);


--
-- V_OPL_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_OPL_SNP
(NOM_DOK, PLAT_ID, LUKPLAT_ID, NPOPLAT_ID, PLAT_RS, 
 PLAT_MFO, PLAT_NAME, SUMMA, NUM_PORUCH, DATE_PORUCH, 
 PLAT_PORUCH_ID, PLAT_PORUCH_NAME, NAZN_PLAT, DATE_OPL, TIP_VEK_ID, 
 DAVAL_ID, N_SCHET, NUM_BANK_VIPISK, DOG_NUMBER, KOL_VEK, 
 BANK_ID, BANK_NAME, NAME_VEK, USERNAME, T_TIME, 
 T_DATE, K_SCHET, OLD_NOM_DOK, DISKONT, DATE_VIP_VEK, 
 PR_DOG, DATECANCEL, EMITENT, INV, FLAG_AVIZO, 
 DEN_SOP, FLAG_VZ, GOSPROG_ID, DOG_ID, LUKDOG_ID, 
 NPODOG_ID, IS_SNP)
AS 
SELECT /*+ RULE*/
  NOM_DOK     ,
  KLS_DOG.PREDPR_ID AS PLAT_ID    ,
  DECODE(NVL(KLS_DOG.LUKDOG_ID,0),0,KLS_DOG.PREDPR_ID,LUK_DOG.PREDPR_ID) AS LUKPLAT_ID,
  KLS_DOG.PREDPR_ID AS NPOPLAT_ID,
  RS_PLD      ,
  MFO_PLD     ,
  PLAT_DOG    ,
  SUMMA       ,
  NOM_POR     ,
  DATA_POR    ,
  KOD_PLP     ,
  PLAT_POR    ,
  NAZN_PLAT   ,
  DATA_POST   ,
  TIP         ,
  DAV_ORG     ,
  N_SCHET     ,
  BANK_NOM    ,
  KLS_DOG.DOG_NUMBER,
  KOL         ,
  BANK        ,
  N_BANK      ,
  NAM_VEK     ,
  PATH        ,
  T_TIME      ,
  T_DATE      ,
  K_SCHET     ,
  STN_DOK     ,
  DISKONT     ,
  DATA_VIP    ,
  PR_DOG      ,
  DATECANCEL  ,
  EMITENT     ,
  INV         ,
  AVIZO       ,
  DEN_SOP     ,
  VZ          ,
  PROGRAM     ,
  DOG_ID ,
  DECODE(NVL(KLS_DOG.LUKDOG_ID,0),0,DOG_ID,KLS_DOG.LUKDOG_ID) AS LUKDOG_ID,
  DOG_ID,
  IS_SNP
FROM OPL,KLS_DOG,KLS_DOG LUK_DOG
WHERE OPL.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.LUKDOG_ID = LUK_DOG.ID (+);


--
-- V_ORG_STRUCTURE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ORG_STRUCTURE
(ID, ADRESS, NOTE, NAME, ORG_KIND_ID, 
 PREDPR_ID, ORG_TYPE_ID, IS_AUTO_LINK, FILIAL, WORKSHOP, 
 INN, IS_AUTO_KONS, PLAN_REAL, CITY_PREFIX_FILE, CITY_IN_XLS, 
 FULL_NAME, PARUS_CRN_AUTO, PARUS_CRN_KNT, PARUS_DEPARTMENT, PARUS_PLAN_AZC_DEP, 
 PARUS_PLAN_AUTO_DEP, PARUS_PLAN_MB_DEP, PARUS_PLAN_TRAN_DEP, PARUS_PLAN_AZC_DEP_2, PARUS_PLAN_AUTO_DEP_2, 
 PARUS_PLAN_TRAN_DEP_2, ABBR, RAST, TRANS_ORG, NO_WORK, 
 IS_AUTO, IS_AUTO_FOR_DISP_AZS, LOAD_NALIV_FROM_XLS, LOAD_NALIV_FROM_PARUS, LOAD_FAS_FROM_XLS, 
 LOAD_FAS_FROM_PARUS, KSSS_ID, FILIAL_ID, UCHASTOK_ID, FILIAL_NAME, 
 FILIAL_ABBR, AZS_NUMB, PARUS_RN, UCHASTOK_NAME, UCHASTOK_ABBR)
AS 
SELECT B."ID",
			 B."ADRESS",
			 B."NOTE",
			 B."NAME",
			 B."ORG_KIND_ID",
			 B."PREDPR_ID",
			 B."ORG_TYPE_ID",
			 B."IS_AUTO_LINK",
			 B."FILIAL",
			 B."WORKSHOP",
			 B."INN",
			 B."IS_AUTO_KONS",
			 B."PLAN_REAL",
			 B."CITY_PREFIX_FILE",
			 B."CITY_IN_XLS",
			 B."FULL_NAME",
			 B."PARUS_CRN_AUTO",
			 B."PARUS_CRN_KNT",
			 B."PARUS_DEPARTMENT",
			 B."PARUS_PLAN_AZC_DEP",
			 B."PARUS_PLAN_AUTO_DEP",
			 B."PARUS_PLAN_MB_DEP",
			 B."PARUS_PLAN_TRAN_DEP",
			 B."PARUS_PLAN_AZC_DEP_2",
			 B."PARUS_PLAN_AUTO_DEP_2",
			 B."PARUS_PLAN_TRAN_DEP_2",
			 B."ABBR",
			 B."RAST",
			 B."TRANS_ORG",
			 B."NO_WORK",
			 B."IS_AUTO",
			 B."IS_AUTO_FOR_DISP_AZS",
			 B."LOAD_NALIV_FROM_XLS",
			 B."LOAD_NALIV_FROM_PARUS",
			 B."LOAD_FAS_FROM_XLS",
			 B."LOAD_FAS_FROM_PARUS",
			 B."KSSS_ID",
			 B."FILIAL_ID",
			 B."UCHASTOK_ID",
			 C.NAME as FILIAL_NAME,
			 C.ABBR as FILIAL_ABBR,
			 (CASE
				 WHEN b.ID = 9067 THEN
					'999'
				 ELSE
					SUBSTR(B.NAME, 1, 3)
			 END) as AZS_NUMB,
			 (SELECT MAX(STORE_RN)
					FROM PARUS_STORE_ORG_STRU_LINK P
				 WHERE P.ORG_STRU_ID = B.ID
					 AND P.IS_MAIN = 1) as PARUS_RN,
			 D.NAME as UCHASTOK_NAME,
			 D.ABBR as UCHASTOK_ABBR
	FROM (SELECT A.*,
							 DECODE(A.FILIAL, NULL, NVL(rela.FILIAL_ID, 0), A.ID) AS FILIAL_ID, -- Филиал
							 DECODE(A.FILIAL, NULL, NVL(rela2.UCHASTOK_ID, 0), A.ID) AS UCHASTOK_ID -- Участок
					FROM ORG_STRUCTURE A,
							 (SELECT O_R.ORG_STRU_1_ID AS ORG_STRU_ID,
											 O_R.ORG_STRU_2_ID AS FILIAL_ID
									FROM ORG_RELATIONS O_R
								 WHERE O_R.KIND_RELA_ID = 1) rela,
							 (SELECT O_R.ORG_STRU_1_ID AS ORG_STRU_ID,
											 O_R.ORG_STRU_2_ID AS UCHASTOK_ID
									FROM ORG_LINKS O_R
								 WHERE O_R.KIND_RELA_ID = 1) rela2
				 WHERE A.ID = rela.ORG_STRU_ID(+)
					 AND A.ID = rela2.ORG_STRU_ID(+)) B,
			 ORG_STRUCTURE C,
			 ORG_STRUCTURE D
 WHERE B.FILIAL_ID = C.ID(+)
	 AND B.UCHASTOK_ID = D.ID(+);


--
-- V_PARUS_DEBITOR_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_DEBITOR_OPL
(LUKDOG_ID, PLAT_ID, DOG_ID, DATE_OPL, SUMMA, 
 NOM_DOK)
AS 
SELECT
  v_opl_snp.LUKDOG_ID,
  v_opl_snp.PLAT_ID,
  v_opl_snp.dog_id,
  v_OPL_snp.DATE_OPL,
  v_OPL_snp.SUMMA,
  v_OPL_snp.NOM_DOK
FROM v_opl_snp
WHERE v_OPL_snp.is_snp=2
  AND v_OPL_snp.DATE_OPL>=TO_DATE('01.12.2002','dd.mm.yyyy');


--
-- V_PARUS_DOG  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_DOG
(SAGENT, NAGENT, ACCNUMB, DOG_NUMBER, DOG_ID, 
 SFACEACC, NFACEACC, SSUBDIV, NSUBDIV, STARIF, 
 NTARIF, SPAY_TYPE, NPAY_TYPE, SACC_AGENT, NEXECUTIVE, 
 SJUR_PERS, NJUR_PERS, SACCDOC, ACCDOC, ACCDATE, 
 SSHIPVIEW, NSHIP_TYPE, NFA_CURRENCY, SFA_CURRENCY)
AS 
SELECT /*+ FIRST_ROWS*/
       s.sagent, s.nagent, TRIM (sdoc_pref) || TRIM (sdoc_numb) AS accnumb,
       kls_dog.dog_number, ab.dog_id, s.sfaceacc, s.nfaceacc, s.ssubdiv,
       s.nsubdiv, s.starif, s.ntarif, s.spay_type, s.npay_type,
       s.sexecutive AS sacc_agent, s.nexecutive, c.sjur_pers, c.njur_pers,
       c.sdoc_type AS saccdoc, c.ndoc_type AS accdoc, c.ddoc_date AS accdate,
       s.sship_type AS sshipview, s.nship_type, s.nfa_currency,
       s.sfa_currency
  FROM parus.v_contracts@oracle.world c,
       parus.v_stages@oracle.world s,
       kls_dog_parus ab,
       kls_dog
 WHERE c.nrn = s.nprn
   AND ab.dog_id = kls_dog.ID
   AND c.ddoc_date > TO_DATE ('20.03.2002', 'dd.mm.yyyy')
   AND s.nstatus = 1
   AND TRIM (c.sdoc_pref) || TRIM (c.sdoc_numb) = ab.base_numb
   AND (   c.sdoc_pref LIKE '%СНП%'
        OR c.sdoc_pref LIKE '%CНП%'
        OR c.sdoc_pref LIKE '%АРХ%'
       )
   AND ab.is_actual = 1;


--
-- V_PARUS_PRICE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_PRICE
(ACCNUMB, SACCDOC, ACCDATE, SFACEACC, SAGENT, 
 STARIF, SPAY_TYPE, SACC_AGENT, SSUBDIV, SJUR_PERS, 
 NOM_MODIF, NOMEN, DOG_NUMBER, DOG_ID, ORD_PREF, 
 PROD, NPRICE, SSHIPVIEW, VALID_DOCNUMB, PROC_INSURE, 
 USL_SUM)
AS 
SELECT pr.accnumb AS accnumb, pr.saccdoc, pr.accdate, pr.sfaceacc, pr.sagent,
       pr.starif, pr.spay_type, pr.sacc_agent, pr.ssubdiv, pr.sjur_pers,
       pr.nom_modif, pr.nomen, kls_dog.dog_number, ab.dog_id, pr.ord_pref,
       p.prod, pr.nprice AS nprice, pr.sshipview, pr.valid_docnumb,
       pr.proc_insure, pr.usl_sum
  FROM v_price_gtc_pvz@oracle.world pr,
       kls_dog_parus ab,
       kls_dog,
       kls_prod_nomenklator p
 WHERE LTRIM (RTRIM (UPPER (pr.accnumb))) =
                                          LTRIM (RTRIM (UPPER (ab.base_numb)))
   AND ab.dog_id = kls_dog.ID
   AND LTRIM (RTRIM (UPPER (pr.nomen))) = LTRIM (RTRIM (UPPER (p.modif)))
   AND LTRIM (RTRIM (UPPER (pr.nom_modif))) =
                                           LTRIM (RTRIM (UPPER (p.mod_modif)))
   AND p.is_actual = 1
   AND ab.is_actual = 1;


--
-- V_PARUS_REQUEST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_REQUEST
(ACCNUMB, SACCDOC, ACCDOC, ACCDATE, SFACEACC, 
 NFACEACC, SAGENT, NAGENT, STARIF, NTARIF, 
 SPAY_TYPE, NPAY_TYPE, SACC_AGENT, NEXECUTIVE, SSUBDIV, 
 NSUBDIV, SJUR_PERS, NJUR_PERS, NNOM_MODIF, SNOM_MODIF, 
 NNOMEN, SNOMEN, DOG_NUMBER, DOG_ID, SORD_PREF)
AS 
select trim(con.sdoc_pref)||trim(con.sdoc_numb) as accnumb,
con.sdoc_type as saccdoc,con.ndoc_type as accdoc, con.ddoc_date as accdate,
cord.sfaceacc,cord.nfaceacc,
cord.sagent,cord.nagent,
cord.starif,cord.ntarif,
cord.spay_type,cord.npay_type,
con.sexecutive as sacc_agent,con.nexecutive,
cord.ssubdiv,cord.nsubdiv,
cord.sjur_pers,
cord.njur_pers,
cords.nnom_modif,cords.snom_modif,cords.nnomen,cords.snomen,
KLS_DOG.DOG_NUMBER, AB.DOG_ID,
cord.sord_pref
from parus.v_consumerord@oracle.world cord,
parus.v_consumerords@oracle.world cords,
parus.v_stages@oracle.world st,
parus.v_contracts@oracle.world con,
KLS_DOG_PARUS AB,kls_dog
where cord.nrn=cords.nprn
and cord.nfaceacc=st.nfaceacc
and st.nprn=con.nrn
AND con.ddoc_date>TO_DATE('20.03.2002','dd.mm.yyyy') 
AND cord.dord_date>=TO_DATE('01.01.2003','dd.mm.yyyy') 
AND st.nstatus=1 
AND con.sdoc_pref LIKE 'СНП%'
AND trim(con.sdoc_pref)||trim(con.sdoc_numb)=AB.BASE_NUMB
AND AB.DOG_ID=KLS_DOG.ID;


--
-- V_PAYMENTS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS
(ID, DOG_ID, BANK_ID, RS, SUMMA, 
 NAZN_PLAT, OURBANK_ID, NUM_PLAT, DATE_PLAT, DATE_POST, 
 PAYFORM_ID, DOG_NUMBER, DOG_DATE, BANK_NAME, BANK_ADRESS, 
 OURBANK_NAME, OURBANK_ADRESS, PLAT_NAME, SUMMA_PLACED, PAYFORM_NAME, 
 DEST_ID, DEST_NAME, RS_ID, RS_UNP, PLAT_ID)
AS 
SELECT /*+ ORDERED INDEX (kls_predpr KLS_PREDPR_I_ID_SHORT_NAME_EMA) */
       PAYMENTS.ID, PAYMENTS.dog_id, PAYMENTS.bank_id, PAYMENTS.rs,
       PAYMENTS.summa, PAYMENTS.nazn_plat, PAYMENTS.ourbank_id,
       PAYMENTS.num_plat, PAYMENTS.date_plat, PAYMENTS.date_post,
       PAYMENTS.payform_id, KLS_DOG.dog_number, KLS_DOG.dog_date,
       KLS_BANKS.bank_name, KLS_BANKS.address AS bank_adress,
       kls_banks2.bank_name AS ourbank_name,
       kls_banks2.address AS ourbank_adress,
       KLS_PREDPR.predpr_name AS plat_name,
       (SELECT SUM (PAYMENTS_ON_BILLS.summa)
          FROM PAYMENTS_ON_BILLS
         WHERE PAYMENTS_ON_BILLS.payments_id = PAYMENTS.ID) AS summa_placed,
       KLS_PAYFORM.payform_name, PAYMENTS.dest_id,
       dest.dest_name AS dest_name, PAYMENTS.rs_id, rs.rs AS rs_unp,
       KLS_PREDPR.ID AS plat_id
  FROM PAYMENTS,
       KLS_DOG,
       KLS_PREDPR,
       KLS_PAYFORM,
       KLS_BANKS kls_banks2,
       KLS_BANKS,
       KLS_BILL_POS_TYPE dest,
       KLS_RS rs
 WHERE PAYMENTS.dog_id = KLS_DOG.ID(+)
   AND PAYMENTS.bank_id = KLS_BANKS.ID(+)
   AND PAYMENTS.ourbank_id = kls_banks2.ID(+)
   AND KLS_DOG.predpr_id = KLS_PREDPR.ID
   AND PAYMENTS.payform_id = KLS_PAYFORM.ID
   AND PAYMENTS.dest_id = dest.ID(+)
   AND PAYMENTS.rs_id = rs.ID;


--
-- V_PAYMENTS_CORR_BILLS_PAIRS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_CORR_BILLS_PAIRS
(NOM_DOK, NOM_SF, DATE_VYP_SF, DATE_KVIT, DATE_BUXG, 
 SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, PRIM, 
 FIO_ISPOL, KOL_DN, OLD_NOM_DOK, NOM_ZD, OWNER_ID, 
 DOG_ID, USL_NUMBER, PROD_ID_NPR, PROD_SUM, PROD_NDS, 
 PROD_GSM, PROD_AKCIZ, DATE_MOS, NPO_SF, OLD_NOM_SF, 
 IS_AGENT, NUM_5_DAY, LUK_DOG_ID, LUK_USL_NUMBER, LUK_SUMMA_DOK, 
 LUK_NDS_DOK, SNP_DOG_ID, SNP_USL_NUMBER, LUK_KOL_DN, SNP_KOL_DN, 
 NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, PROTO_DATE, NO_AKCIZ, 
 KORR_PROD)
AS 
select /* RULE */
  "NOM_DOK","NOM_SF","DATE_VYP_SF","DATE_KVIT","DATE_BUXG","SUMMA_DOK","NDS_DOK","GSM_DOK","AKCIZ_DOK","PRIM","FIO_ISPOL","KOL_DN","OLD_NOM_DOK","NOM_ZD","OWNER_ID","DOG_ID","USL_NUMBER","PROD_ID_NPR","PROD_SUM","PROD_NDS","PROD_GSM","PROD_AKCIZ","DATE_MOS","NPO_SF","OLD_NOM_SF","IS_AGENT","NUM_5_DAY","LUK_DOG_ID","LUK_USL_NUMBER","LUK_SUMMA_DOK","LUK_NDS_DOK","SNP_DOG_ID","SNP_USL_NUMBER","LUK_KOL_DN","SNP_KOL_DN","NAZN_OTG_ID","KORR_5_DAY","PROTO_NUM","PROTO_DATE","NO_AKCIZ","KORR_PROD"
  from bills where
  ((old_nom_dok<>0 and summa_dok<0) or
   nom_dok in (select /*+ RULE */ old_nom_dok from bills where old_nom_dok<>0)) and
   not exists (select nom_dok from payments_on_bills where bills.nom_dok=payments_on_bills.nom_dok);


--
-- V_PAYMENTS_CORR_BILLS_PAIRS_P  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_CORR_BILLS_PAIRS_P
(NOM_DOK, NOM_SF, DATE_VYP_SF, DATE_KVIT, DATE_BUXG, 
 SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, PRIM, 
 FIO_ISPOL, KOL_DN, OLD_NOM_DOK, NOM_ZD, OWNER_ID, 
 DOG_ID, USL_NUMBER, PROD_ID_NPR, PROD_SUM, PROD_NDS, 
 PROD_GSM, PROD_AKCIZ, DATE_MOS, NPO_SF, OLD_NOM_SF, 
 IS_AGENT, NUM_5_DAY, LUK_DOG_ID, LUK_USL_NUMBER, LUK_SUMMA_DOK, 
 LUK_NDS_DOK, SNP_DOG_ID, SNP_USL_NUMBER, LUK_KOL_DN, SNP_KOL_DN, 
 NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, PROTO_DATE, NO_AKCIZ, 
 KORR_PROD)
AS 
select /*+ RULE */
  "NOM_DOK","NOM_SF","DATE_VYP_SF","DATE_KVIT","DATE_BUXG","SUMMA_DOK","NDS_DOK","GSM_DOK","AKCIZ_DOK","PRIM","FIO_ISPOL","KOL_DN","OLD_NOM_DOK","NOM_ZD","OWNER_ID","DOG_ID","USL_NUMBER","PROD_ID_NPR","PROD_SUM","PROD_NDS","PROD_GSM","PROD_AKCIZ","DATE_MOS","NPO_SF","OLD_NOM_SF","IS_AGENT","NUM_5_DAY","LUK_DOG_ID","LUK_USL_NUMBER","LUK_SUMMA_DOK","LUK_NDS_DOK","SNP_DOG_ID","SNP_USL_NUMBER","LUK_KOL_DN","SNP_KOL_DN","NAZN_OTG_ID","KORR_5_DAY","PROTO_NUM","PROTO_DATE","NO_AKCIZ","KORR_PROD"
  from bills where
  ((old_nom_dok<>0 and summa_dok<0) or
   nom_dok in (select /*+ RULE */ old_nom_dok from bills where old_nom_dok<>0)) and
   not exists (select nom_dok from payments_on_bills where bills.nom_dok=payments_on_bills.nom_dok);


--
-- V_PAYMENTS_TO_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_TO_BILLS
(NOM_DOK, PAYMENTS_ID)
AS 
SELECT "NOM_DOK","PAYMENTS_ID" FROM
  (
  SELECT
    BILLS.nom_dok,
    PAYMENTS_ON_BILLS.PAYMENTS_ID
    FROM BILLS,PAYMENTS_ON_BILLS
	  WHERE old_nom_dok=PAYMENTS_ON_BILLS.nom_dok
		UNION ALL
	    SELECT nom_dok,payments_id FROM PAYMENTS_TO_BILLS
);


--
-- V_PAYMENTS_UNCLOSED_BILL_POS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_UNCLOSED_BILL_POS
(NOM_DOK, BILL_POS_ID, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, 
 VES)
AS 
SELECT
  a.nom_dok,
  a.bill_pos_id,
  sum(a.summa_akciz) as summa_akciz,
  sum(a.summa_nds20) as summa_nds20,
  sum(a.summa) AS summa,
  sum(a.ves) AS ves
FROM 
(
SELECT 
  bill_pos.NOM_DOK,
  bill_pos.bill_pos_id,
  bill_pos.SUMMA_NDS20,
  bill_pos.SUMMA_AKCIZ,
  bill_pos.SUMMA,
  bill_pos.VES
  FROM bill_pos WHERE is_luk=1
UNION ALL
SELECT
  payments_on_bills.NOM_DOK,
  payments_on_bills.bill_pos_id,
  -payments_on_bills.SUMMA_NDS,
  -payments_on_bills.SUMMA_AKCIZ,
  -payments_on_bills.SUMMA,
  -NVL(payments_on_bills.VES,0)
  FROM payments_on_bills
) a
GROUP BY
  a.nom_dok,
  a.bill_pos_id;


--
-- V_PAYMENTS_UNCLOSED_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_UNCLOSED_BILLS
(DOG_ID, PAY_DATE, NOM_DOK, NOM_SF, DATE_VYP_SF, 
 PAYMENTS_ID, LUK_SUMMA_DOK, LUK_SUMMA_DOK_FULL, PROD_BILL_POS)
AS 
SELECT                                     /* ORDERED USE_NL(a,b,kls_prod)  */
         b.dog_id, b.date_plat AS pay_date, b.nom_dok, b.nom_sf,
         b.date_vyp_sf, 0 AS payments_id,
         SUM (a.luk_summa_dok) AS luk_summa_dok,
         b.luk_summa_dok AS luk_summa_dok_full,
         NVL (kls_prod.bill_pos, 1) AS prod_bill_pos
    FROM (SELECT                                   /* INDEX(bills BILLS_PK) */
                 bills.nom_dok, bills.luk_summa_dok
            FROM bills
          UNION ALL
          SELECT                    /* INDEX(p PAYMENTS_ON_BILLS_NOM_DOK_I) */
                 p.nom_dok, -p.summa
            FROM payments_on_bills p) a,
         bills b,
         kls_prod
   WHERE b.nom_dok = a.nom_dok
     AND b.prod_id_npr = kls_prod.id_npr
     AND NOT EXISTS (SELECT *
                       FROM v_payments_corr_bills_pairs c
                      WHERE c.nom_dok = b.nom_dok)
---------------- условие которое делает обязтельной оплату привязанных счетов фактур однозначной --------------------------------
-- AND not exists (select * from V_PAYMENTS_UNCLOSED_BILLS_PAY d where d.nom_dok=b.nom_dok)
---------------- условие которое делает обязтельной оплату привязанных счетов фактур однозначной --------------------------------
GROUP BY b.dog_id,
         b.date_plat,
         b.nom_dok,
         b.nom_sf,
         b.date_vyp_sf,
         b.luk_summa_dok,
         kls_prod.bill_pos;


--
-- V_PAYMENTS_UNCLOSED_BILLS_PAY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_UNCLOSED_BILLS_PAY
(DOG_ID, PAY_DATE, NOM_DOK, NOM_SF, DATE_VYP_SF, 
 PAYMENTS_ID, LUK_SUMMA_DOK, LUK_SUMMA_DOK_FULL, PROD_BILL_POS)
AS 
SELECT   b.dog_id, (b.date_kvit + b.kol_dn) AS pay_date, a.nom_dok, b.nom_sf,
         b.date_vyp_sf, c.payments_id, SUM (a.luk_summa_dok) AS luk_summa_dok,
         b.luk_summa_dok AS luk_summa_dok_full,
         NVL (kls_prod.bill_pos, 1) AS prod_bill_pos
    FROM (SELECT bills.nom_dok, bills.luk_summa_dok
            FROM bills
          UNION ALL
          SELECT payments_on_bills.nom_dok, -payments_on_bills.summa
            FROM payments_on_bills) a,
         bills b,
         v_payments_to_bills c,
         kls_prod
   WHERE a.nom_dok = b.nom_dok
     AND b.nom_dok = c.nom_dok
     AND kls_prod.id_npr = b.prod_id_npr
GROUP BY b.dog_id,
         (b.date_kvit + b.kol_dn),
         a.nom_dok,
         b.nom_sf,
         b.date_vyp_sf,
         b.luk_summa_dok,
         c.payments_id,
         kls_prod.bill_pos;


--
-- V_PAYMENTS_UNCLOSED_BILLS_PSV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_UNCLOSED_BILLS_PSV
(DOG_ID, PAY_DATE, NOM_DOK, PAYMENTS_ID, LUK_SUMMA_DOK, 
 LUK_SUMMA_DOK_FULL, PROD_BILL_POS)
AS 
SELECT /* ORDERED INDEX(b BILL_DOG_ID) USE_NL(b,kls_prod,a) */ /*+ RULE */
  b.dog_id,
  b.DATE_PLAT AS pay_date,
  b.nom_dok,
  0 AS PAYMENTS_ID,
  sum(a.luk_summa_dok) AS luk_summa_dok,
  b.luk_SUMMA_DOK AS luk_summa_dok_full,
  NVL(kls_prod.bill_pos,1) AS prod_bill_pos
FROM bills b,kls_prod,
(
SELECT /* INDEX(bb BILLS_PK) */
  bb.NOM_DOK,
  bb.luk_SUMMA_DOK
  FROM bills bb
UNION ALL
SELECT /* INDEX(cc PAYMENTS_ON_BILLS_NOM_DOK_I) */
  cc.NOM_DOK,
  -cc.SUMMA
  FROM payments_on_bills cc
) a
WHERE
  b.nom_dok=a.nom_dok and
  b.prod_id_npr=kls_prod.id_npr and
  not exists (select * from V_PAYMENTS_CORR_BILLS_PAIRS_P c where c.nom_dok=b.nom_dok)
GROUP BY
  b.dog_id,
  b.DATE_PLAT,
  b.nom_dok,
  b.luk_SUMMA_DOK,
  kls_prod.bill_pos;


--
-- V_PAYMENTS_UNUSED  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PAYMENTS_UNUSED
(DOG_ID, ID, DATE_PLAT, SUMMA, DATE_POST, 
 DOG_NUMBER, DEST_ID)
AS 
SELECT
  b.dog_id,
  a.id,
  b.DATE_PLAT,
  sum(a.summa) as summa,
  b.DATE_POST,
  kls_dog.DOG_NUMBER,
  b.dest_id
  FROM
(
SELECT
  payments.ID,
  payments.SUMMA
  FROM payments
UNION ALL
SELECT
  payments_on_bills.PAYMENTS_ID,
  -payments_on_bills.SUMMA
  FROM payments_on_bills) a,payments b,kls_dog
  WHERE a.id=b.id AND b.dog_id=kls_dog.id
  GROUP BY b.dog_id,a.id,b.DATE_PLAT,
    b.DATE_POST,
    kls_dog.DOG_NUMBER,
    b.dest_id;


--
-- V_PLAN_FOR_AZS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_FOR_AZS
(IS_SIGN1, IS_SIGN2, DATE_PLAN, AZS_ID, AZS_NUMB, 
 AZS_NAME, FILIAL_ID, FILIAL_NAME, PROD_ID_NPR, ABBR_NPR, 
 NAME_NPR, VES, SUMM)
AS 
SELECT
  MIN(A.IS_SIGN1) as IS_SIGN1,
  MIN(A.IS_SIGN2) as IS_SIGN2,
  A.DATE_PLAN,
  A.SKLAD_ID as AZS_ID, C.AZS_NUMB, C.NAME as AZS_NAME, C.FILIAL_ID, C.FILIAL_NAME,
  A.PROD_ID_NPR, E.GROUP_ABBR as ABBR_NPR, B.NAME_NPR,
  SUM(A.VES) as VES, sum(a.summa) as summ
  FROM PLAN_REALIZ A, KLS_PROD B, v_ORG_STRUCTURE C, KLS_PROD_GROUPS_DESC D, KLS_PROD_GROUPS E,
  (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='PLAN_AZS.XLS') r
WHERE A.DATE_PLAN=TRUNC(r.end_date,'MONTH')
  AND C.FILIAL_ID=DECODE(NVL(r.FILIAL_ID,0),0,C.FILIAL_ID,r.FILIAL_ID)
  AND A.SKLAD_ID=C.ID
  AND A.ORG_KIND_ID IN (5,12)
  AND A.PROD_ID_NPR=B.ID_NPR
  AND A.PROD_ID_NPR=D.PROD_ID_NPR AND D.PROD_TYPE_GRP_ID=5 AND D.PROD_GROUPS_ID=E.ID
  AND A.IS_SIGN1=1 AND A.IS_SIGN2=1
GROUP BY
  A.DATE_PLAN,
  A.SKLAD_ID, C.AZS_NUMB, C.NAME, C.FILIAL_ID, C.FILIAL_NAME,
  A.PROD_ID_NPR, E.GROUP_ABBR, B.NAME_NPR
ORDER BY DATE_PLAN, FILIAL_ID, LPAD(TRIM(AZS_NUMB),5,' '), AZS_ID, ABBR_NPR;


--
-- V_PLAN_POST_PROIZV1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_PROIZV1
(PROD_ID_NPR, NAME_NPR, NAME, NAME1, PLAN_VES, 
 DATE_PLAN)
AS 
SELECT v.prod_id_npr, kp.name_npr, v.NAME,v.name1, v.plan_ves, pp.date_plan
  FROM (SELECT plan_id, plan_per_id, prod_id_npr,
               kls_planstru.ID AS planstru_id, kls_planstru.level_pos,
               kls_planstru.NAME,name1, kod_sgr1, kod_spg1, kod_rzd1, kod_prz1,
               kod_grp1, kod_pgr1, kls_planstru.parent_id, dog_id, payform_id,
               plan_ves, plan_sum
          FROM kls_planstru,
               (SELECT   plan_post.plan_id, plan_post.plan_per_id,
                         plan_post.prod_id_npr, plan_post.planstru_id,kls_planstru.name as name1,
                         kls_planstru.kod_sgr AS kod_sgr1, 0 AS kod_spg1,
                         0 AS kod_rzd1, 0 AS kod_prz1, 0 AS kod_grp1,
                         0 AS kod_pgr1, plan_post.dog_id,
                         plan_post.payform_id,
                         SUM (plan_post.plan_ves) AS plan_ves,
                         SUM (plan_post.plan_sum) AS plan_sum
                    FROM kls_planstru, plan_post
                   WHERE (kls_planstru.ID = plan_post.planstru_id)
                     AND (kls_planstru.view_level = 1)
                     AND plan_post.plan_id = 2
                GROUP BY plan_post.plan_id,
                         plan_post.plan_per_id,
                         plan_post.prod_id_npr,
                         plan_post.planstru_id,kls_planstru.name,
                         kls_planstru.kod_sgr,
                         0,
                         0,
                         0,
                         0,
                         0,
                         plan_post.dog_id,
                         plan_post.payform_id)
         WHERE kod_sgr = kod_sgr1
           AND kod_spg = kod_spg1
           AND kod_rzd = kod_rzd1
           AND kod_prz = kod_prz1
           AND kod_grp = kod_grp1
           AND kod_pgr = kod_pgr1
        UNION ALL
        SELECT plan_id, plan_per_id, prod_id_npr,
               kls_planstru.ID AS planstru_id, kls_planstru.level_pos,
               kls_planstru.NAME, name1,kod_sgr1, kod_spg1, kod_rzd1, kod_prz1,
               kod_grp1, kod_pgr1, kls_planstru.parent_id, dog_id, payform_id,
               plan_ves, plan_sum
          FROM kls_planstru,
               (SELECT   plan_post.plan_id, plan_post.plan_per_id,
                         plan_post.prod_id_npr, plan_post.planstru_id,kls_planstru.name as name1,
                         kls_planstru.kod_sgr AS kod_sgr1,
                         kls_planstru.kod_spg AS kod_spg1, 0 AS kod_rzd1,
                         0 AS kod_prz1, 0 AS kod_grp1, 0 AS kod_pgr1,
                         plan_post.dog_id, plan_post.payform_id,
                         SUM (plan_post.plan_ves) AS plan_ves,
                         SUM (plan_post.plan_sum) AS plan_sum
                    FROM kls_planstru, plan_post
                   WHERE (kls_planstru.ID = plan_post.planstru_id)
                     AND (kls_planstru.view_level = 2)
                     AND plan_post.plan_id = 2
                GROUP BY plan_post.plan_id,
                         plan_post.plan_per_id,
                         plan_post.prod_id_npr,
                         plan_post.planstru_id,kls_planstru.name,
                         kls_planstru.kod_sgr,
                         kls_planstru.kod_spg,
                         0,
                         0,
                         0,
                         0,
                         plan_post.dog_id,
                         plan_post.payform_id)
         WHERE kod_sgr = kod_sgr1
           AND kod_spg = kod_spg1
           AND kod_rzd = kod_rzd1
           AND kod_prz = kod_prz1
           AND kod_grp = kod_grp1
           AND kod_pgr = kod_pgr1
        UNION ALL
        SELECT plan_id, plan_per_id, prod_id_npr,
               kls_planstru.ID AS planstru_id, kls_planstru.level_pos,
               kls_planstru.NAME,name1, kod_sgr1, kod_spg1, kod_rzd1, kod_prz1,
               kod_grp1, kod_pgr1, kls_planstru.parent_id, dog_id, payform_id,
               plan_ves, plan_sum
          FROM kls_planstru,
               (SELECT   plan_post.plan_id, plan_post.plan_per_id,
                         plan_post.prod_id_npr, plan_post.planstru_id,kls_planstru.name as name1,
                         kls_planstru.kod_sgr AS kod_sgr1,
                         kls_planstru.kod_spg AS kod_spg1,
                         kls_planstru.kod_rzd AS kod_rzd1, 0 AS kod_prz1,
                         0 AS kod_grp1, 0 AS kod_pgr1, plan_post.dog_id,
                         plan_post.payform_id,
                         SUM (plan_post.plan_ves) AS plan_ves,
                         SUM (plan_post.plan_sum) AS plan_sum
                    FROM kls_planstru, plan_post
                   WHERE (kls_planstru.ID = plan_post.planstru_id)
                     AND (kls_planstru.view_level = 3)
                     AND plan_post.plan_id = 2
                GROUP BY plan_post.plan_id,
                         plan_post.plan_per_id,
                         plan_post.prod_id_npr,
                         plan_post.planstru_id,kls_planstru.name,
                         kls_planstru.kod_sgr,
                         kls_planstru.kod_spg,
                         kls_planstru.kod_rzd,
                         0,
                         0,
                         0,
                         plan_post.dog_id,
                         plan_post.payform_id)
         WHERE kod_sgr = kod_sgr1
           AND kod_spg = kod_spg1
           AND kod_rzd = kod_rzd1
           AND kod_prz = kod_prz1
           AND kod_grp = kod_grp1
           AND kod_pgr = kod_pgr1) v,
       plan_periods pp,
       kls_prod kp
 WHERE v.plan_per_id = pp.ID AND kp.id_npr = v.prod_id_npr;


--
-- V_PLAN_POST_VIEW_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_VIEW_1
(ID, PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, NAME_NPR, 
 PLANSTRU_ID, PLANSTRU_ORDER, LEVEL_POS, PLANSTRU_NAME, DOG_ID, 
 DOG_NUMBER, PLAT_ID, PLAT_NAME, REFINERY_ID, REFINERY_NAME, 
 ORGSTRU_ID, ORGSTRU_NAME, PAYFORM_ID, PAYFORM_NAME, CAT_CEN_ID, 
 DATE_CENA, PLAN_CENA, PLAN_VES, PLAN_SUM)
AS 
SELECT
  A.ID,
  A.PLAN_ID,
  A.PLAN_PER_ID,
  A.PROD_ID_NPR,
  KLS_PROD.NAME_NPR,
  A.PLANSTRU_ID,
  TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR) AS PLANSTRU_ORDER,
  KLS_PLANSTRU.LEVEL_POS,
  KLS_PLANSTRU.NAME AS PLANSTRU_NAME,
  A.DOG_ID,
  KLS_DOG.DOG_NUMBER,
  KLS_DOG.PREDPR_ID  AS plat_id,
  KLS_PREDPR.SHORT_NAME AS plat_name,
  refinery.ID AS refinery_id,
  refinery.PREDPR_NAME as refinery_name,
  v_org_structure.ID AS orgstru_id,
  v_org_structure.NAME || ' - (' || v_org_structure.FILIAL_NAME || ')' as orgstru_name,
  kls_payform.ID AS payform_id,
  kls_payform.payform_NAME as payform_name,
  A.CAT_CEN_ID AS CAT_CEN_ID,
  A.DATE_CENA AS DATE_CENA,
  A.PLAN_CENA AS PLAN_CENA,
  A.PLAN_VES AS PLAN_VES,
  A.PLAN_SUM AS PLAN_SUM
FROM PLAN_POST A, KLS_PROD, KLS_DOG, KLS_PREDPR, KLS_PLANSTRU, kls_predpr refinery, v_org_structure, KLS_PAYFORM
WHERE A.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND A.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = KLS_PREDPR.ID
  AND A.PLANSTRU_ID = KLS_PLANSTRU.ID
  AND a.REFINERY_ID=refinery.id(+)
  AND a.ORGSTRU_ID=v_org_structure.id(+)
  AND a.PAYFORM_ID=KLS_PAYFORM.ID(+)
/*GROUP BY PLAN_ID,
  A.PLAN_ID,
  A.PLAN_PER_ID,
  A.PROD_ID_NPR,
  KLS_PROD.NAME_NPR,
  TO_CHAR(KLS_PLANSTRU.KOD_SGR*1000000000000000+KLS_PLANSTRU.KOD_SPG*1000000000000+KLS_PLANSTRU.KOD_RZD*1000000000+KLS_PLANSTRU.KOD_PRZ*1000000+KLS_PLANSTRU.KOD_GRP*1000+KLS_PLANSTRU.KOD_PGR),
  A.PLANSTRU_ID,
  KLS_PLANSTRU.LEVEL_POS,
  KLS_PLANSTRU.NAME,
  A.DOG_ID,
  KLS_DOG.DOG_NUMBER,
  KLS_DOG.PREDPR_ID,
  KLS_PREDPR.SHORT_NAME,
  refinery.ID,
  refinery.PREDPR_NAME,
  org_structure.ID,
  org_structure.NAME*/
;


--
-- V_PLAN_POST_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_1
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT
   PLAN_ID,
   PLAN_PER_ID,
   PROD_ID_NPR,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   KLS_PLANSTRU.PARENT_ID,
   DOG_ID,
   PAYFORM_ID,
   plan_ves,
   plan_sum
 FROM KLS_PLANSTRU,(
 SELECT
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
 0 AS kod_spg1,
 0 AS kod_rzd1,
 0 AS kod_prz1,
 0 AS KOD_GRP1,
 0 AS KOD_PGR1,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID,
 SUM(PLAN_POST.PLAN_VES) AS plan_ves,
 SUM(PLAN_POST.PLAN_SUM) AS plan_sum
FROM KLS_PLANSTRU, PLAN_POST
WHERE
(KLS_PLANSTRU.ID = PLAN_POST.PLANSTRU_ID) AND
(KLS_PLANSTRU.LEVEL_POS>=1)
GROUP BY
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR,
 0,
 0,
 0,
 0,
 0,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 and kod_grp=kod_grp1 and kod_pgr=kod_pgr1;


--
-- V_PLAN_POST_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_2
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT
   PLAN_ID,
   PLAN_PER_ID,
   PROD_ID_NPR,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   KLS_PLANSTRU.PARENT_ID,
   DOG_ID,
   PAYFORM_ID,
   plan_ves,
   plan_sum
FROM KLS_PLANSTRU,(
 SELECT
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
 KLS_PLANSTRU.KOD_SPG AS kod_spg1,
 0 AS kod_rzd1,
 0 AS kod_prz1,
 0 AS KOD_GRP1,
 0 AS KOD_PGR1,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID,
 SUM(PLAN_POST.PLAN_VES) AS plan_ves,
 SUM(PLAN_POST.PLAN_SUM) AS plan_sum
FROM KLS_PLANSTRU, PLAN_POST
WHERE
(KLS_PLANSTRU.ID = PLAN_POST.PLANSTRU_ID) AND
(KLS_PLANSTRU.LEVEL_POS>=2)
GROUP BY
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR,
 KLS_PLANSTRU.KOD_SPG,
 0,
 0,
 0,
 0,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_POST_3  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_3
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT
   PLAN_ID,
   PLAN_PER_ID,
   PROD_ID_NPR,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   KLS_PLANSTRU.PARENT_ID,
   DOG_ID,
   PAYFORM_ID,
   plan_ves,
   plan_sum
FROM KLS_PLANSTRU,(
 SELECT
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
 KLS_PLANSTRU.KOD_SPG AS kod_spg1,
 KLS_PLANSTRU.KOD_RZD AS kod_rzd1,
 0 AS kod_prz1,
 0 AS KOD_GRP1,
 0 AS KOD_PGR1,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID,
 SUM(PLAN_POST.PLAN_VES) AS plan_ves,
 SUM(PLAN_POST.PLAN_SUM) AS plan_sum
FROM KLS_PLANSTRU, PLAN_POST
WHERE
(KLS_PLANSTRU.ID = PLAN_POST.PLANSTRU_ID) AND
(KLS_PLANSTRU.LEVEL_POS>=3)
GROUP BY
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR,
 KLS_PLANSTRU.KOD_SPG,
 KLS_PLANSTRU.KOD_RZD,
 0,
 0,
 0,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_POST_4  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_4
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT
   PLAN_ID,
   PLAN_PER_ID,
   PROD_ID_NPR,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   KLS_PLANSTRU.PARENT_ID,
   DOG_ID,
   PAYFORM_ID,
   plan_ves,
   plan_sum
FROM KLS_PLANSTRU,(
 SELECT
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
 KLS_PLANSTRU.KOD_SPG AS kod_spg1,
 KLS_PLANSTRU.KOD_RZD AS kod_rzd1,
 KLS_PLANSTRU.KOD_PRZ AS kod_prz1,
 0 AS KOD_GRP1,
 0 AS KOD_PGR1,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID,
 SUM(PLAN_POST.PLAN_VES) AS plan_ves,
 SUM(PLAN_POST.PLAN_SUM) AS plan_sum
FROM KLS_PLANSTRU , PLAN_POST
WHERE
(KLS_PLANSTRU.ID = PLAN_POST.PLANSTRU_ID) AND
(KLS_PLANSTRU.LEVEL_POS>=4)
GROUP BY
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR,
 KLS_PLANSTRU.KOD_SPG,
 KLS_PLANSTRU.KOD_RZD,
 KLS_PLANSTRU.KOD_PRZ,
 0,
 0,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_POST_5  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_5
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT
   PLAN_ID,
   PLAN_PER_ID,
   PROD_ID_NPR,
   KLS_PLANSTRU.ID AS PLANSTRU_ID,
   KLS_PLANSTRU.level_pos,
   KLS_PLANSTRU.NAME,
   KOD_SGR1,
   KOD_SPG1,
   KOD_RZD1,
   KOD_PRZ1,
   KOD_GRP1,
   KOD_PGR1,
   KLS_PLANSTRU.PARENT_ID,
   DOG_ID,
   PAYFORM_ID,
   plan_ves,
   plan_sum
FROM KLS_PLANSTRU,(
 SELECT
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR AS kod_sgr1,
 KLS_PLANSTRU.KOD_SPG AS kod_spg1,
 KLS_PLANSTRU.KOD_RZD AS kod_rzd1,
 KLS_PLANSTRU.KOD_PRZ AS kod_prz1,
 KLS_PLANSTRU.KOD_GRP AS KOD_GRP1,
 0 AS KOD_PGR1,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID,
 SUM(PLAN_POST.PLAN_VES) AS plan_ves,
 SUM(PLAN_POST.PLAN_SUM) AS plan_sum
FROM KLS_PLANSTRU, PLAN_POST
WHERE
(KLS_PLANSTRU.ID = PLAN_POST.PLANSTRU_ID) AND
(KLS_PLANSTRU.LEVEL_POS>=5)
GROUP BY
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.KOD_SGR,
 KLS_PLANSTRU.KOD_SPG,
 KLS_PLANSTRU.KOD_RZD,
 KLS_PLANSTRU.KOD_PRZ,
 KLS_PLANSTRU.KOD_GRP,
 0,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID)
WHERE kod_sgr=kod_sgr1 AND kod_spg=kod_spg1 AND kod_rzd=kod_rzd1 AND
      kod_prz=kod_prz1 AND kod_grp=kod_grp1 AND kod_pgr=kod_pgr1;


--
-- V_PLAN_POST_6  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_6
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.LEVEL_POS,
 KLS_PLANSTRU.NAME,
 KLS_PLANSTRU.KOD_SGR,
 KLS_PLANSTRU.KOD_SPG,
 KLS_PLANSTRU.KOD_RZD,
 KLS_PLANSTRU.KOD_PRZ,
 KLS_PLANSTRU.KOD_GRP,
 KLS_PLANSTRU.KOD_PGR,
 KLS_PLANSTRU.PARENT_ID,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID,
 SUM(PLAN_POST.PLAN_VES) AS plan_ves,
 SUM(PLAN_POST.PLAN_SUM) AS plan_sum
FROM KLS_PLANSTRU, PLAN_POST
WHERE
(KLS_PLANSTRU.ID = PLAN_POST.PLANSTRU_ID) AND
(KLS_PLANSTRU.LEVEL_POS>=6)
GROUP BY
 PLAN_POST.PLAN_ID,
 PLAN_POST.PLAN_PER_ID,
 PLAN_POST.PROD_ID_NPR,
 PLAN_POST.PLANSTRU_ID,
 KLS_PLANSTRU.LEVEL_POS,
 KLS_PLANSTRU.NAME,
 KLS_PLANSTRU.KOD_SGR,
 KLS_PLANSTRU.KOD_SPG,
 KLS_PLANSTRU.KOD_RZD,
 KLS_PLANSTRU.KOD_PRZ,
 KLS_PLANSTRU.KOD_GRP,
 KLS_PLANSTRU.KOD_PGR,
 KLS_PLANSTRU.PARENT_ID,
 PLAN_POST.DOG_ID,
 PLAN_POST.PAYFORM_ID;


--
-- V_PRICE_COND  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PRICE_COND
(ACCNUMB, SACCDOC, ACCDOC, ACCDATE, SFACEACC, 
 NFACEACC, SAGENT, NAGENT, STARIF, NTARIF, 
 SPAY_TYPE, NPAY_TYPE, SACC_AGENT, NEXECUTIVE, SSUBDIV, 
 NSUBDIV, SJUR_PERS, NJUR_PERS, NNOM_MODIF, SNOM_MODIF, 
 NNOMEN, SNOMEN, DOG_NUMBER, DOG_ID, SORD_PREF, 
 BEGIN_DATE, END_DATE, PROD, NPRICE)
AS 
select trim(con.sdoc_pref)||trim(con.sdoc_numb) as accnumb,
con.sdoc_type as saccdoc,con.ndoc_type as accdoc, con.ddoc_date as accdate,
cord.sfaceacc,cord.nfaceacc,
cord.sagent,cord.nagent,
cord.starif,cord.ntarif,
cord.spay_type,cord.npay_type,
con.sexecutive as sacc_agent,con.nexecutive,
cord.ssubdiv,cord.nsubdiv,
cord.sjur_pers,
cord.njur_pers,
cords.nnom_modif,cords.snom_modif,cords.nnomen,cords.snomen,
KLS_DOG.DOG_NUMBER, AB.DOG_ID,
cord.sord_pref,
rs.dpricedate as begin_date,
NVL(rs.denddate,TO_DATE('31.12.2099','dd.mm.yyyy')) AS end_date,
P.PROD,rsc.nprice
from parus.v_consumerord@oracle.world cord,
parus.v_consumerords@oracle.world cords,
parus.v_stages@oracle.world st,
parus.v_contracts@oracle.world con,
KLS_DOG_PARUS AB,kls_dog,
parus.v_rlpricespecs@oracle.world rs,
parus.v_rlpricescond@oracle.world rsc,
KLS_PROD_NOMENKLATOR P
where cord.nrn=cords.nprn
and cord.nfaceacc=st.nfaceacc
and st.nprn=con.nrn
and cord.ntarif=rs.ntarif and (rs.nrn=rsc.nprn and cord.npay_type=rsc.npaytype)
and rs.nnommodif=cords.nnom_modif
AND con.ddoc_date>TO_DATE('20.03.2002','dd.mm.yyyy') 
AND cord.dord_date>=TO_DATE('01.01.2003','dd.mm.yyyy') 
AND st.nstatus=1 
AND con.sdoc_pref LIKE 'СНП%'
AND trim(con.sdoc_pref)||trim(con.sdoc_numb)=AB.BASE_NUMB
AND AB.DOG_ID=KLS_DOG.ID
AND LTRIM(RTRIM(UPPER(rs.snomen)))=P.MODIF
AND LTRIM(RTRIM(UPPER(rs.snommodif)))=P.MOD_MODIF;


--
-- V_REE_PLANPOST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_PLANPOST
(NAME, ID_NPR, PROD_PLAN_ID, PLANSTRU_ID, PARENT_ID, 
 FOR_ID, FOR_NAME, ID_KIND_NPR, ABBR_NPR, DATE_PLAN, 
 BEGIN_DATE, END_DATE, PLAN_VES, PLAN_VES_ARH, DOG_ID, 
 PLAN_ID)
AS 
SELECT kls_planstru.NAME, kls_prod.id_npr, kls_prod.PROD_PLAN_ID, kls_planstru.ID planstru_id,
       kls_planstru.PARENT_ID,kls_planstru.FOR_ID,kls_planstru.FOR_NAME,
       kls_prod.id_kind_npr, kls_prod.abbr_npr, plan_periods.date_plan,
       plan_periods.begin_date, plan_periods.end_date, plan_post.plan_ves,
	   DECODE(kls_planstru.REGION_ID,21,plan_post.plan_ves,0) AS plan_ves_arh,
       plan_post.dog_id,plan_post.plan_id
  FROM plan_post, kls_planstru, plan_periods, kls_prod,V_TEMP_REESTR_PARAMS
 WHERE (    (kls_planstru.ID = plan_post.planstru_id)
        AND (plan_periods.plan_id = plan_post.plan_id)
        AND (plan_periods.ID = plan_post.plan_per_id)
        AND (kls_prod.id_npr = plan_post.prod_id_npr)
		AND (V_TEMP_REESTR_PARAMS.DATE_PLAN=plan_periods.DATE_PLAN)
		AND (V_TEMP_REESTR_PARAMS.DATETIME_REPORT>=plan_periods.BEGIN_DATE)
       );


--
-- V_REE_REZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_REZ
(KIND_NPR, OST)
AS 
SELECT
  kls_prod.PROD_PLAN_ID AS kind_npr,
  SUM(DECODE(SIGN(arc_rez.VOL-arc_rez.DEAD_VOL),1,arc_rez.VOL-arc_rez.DEAD_VOL,0)) AS ost
  FROM arc_rez,kls_prod
  WHERE
    arc_rez.PROD_ID_NPR=kls_prod.ID_NPR and
	arc_rez.AR_TOV_ID=1 and  
    arc_rez.Dateupload=
     (SELECT MAX(arc_rez.DATEUPLOAD) 
       FROM arc_rez,v_temp_reestr_params WHERE
        arc_rez.DATEUPLOAD<=v_temp_reestr_params.DATETIME_REPORT)
  GROUP BY kls_prod.PROD_PLAN_ID;


--
-- V_REZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REZ
(SDEP_READY, SNAME, REZ_NUM, NAME_NPR, STATUS, 
 DEAD_VOL_M3, MAX_VOL_M3, TRK_COUNT)
AS 
select a.sdep_ready, a.sname, d.rez_num, f.name_npr,
	   decode(d.status, 0, 'рабочий', 1, 'на консервации', 2, 'на ремонте') status,
	   d.dead_vol_m3, d.max_vol_m3, d.trk_count
from VANEEV.V_DICSTORE_PSV@oracle.world a, PARUS_STORE_ORG_STRU_LINK b, org_structure c,
	 arc_rez d, (SELECT /*+ ALL_ROWS */  DISTINCT A.SDEP_READY, C.FILIAL_ID    
	 		 			FROM V_PARUS_DICSTORE A, PARUS_STORE_ORG_STRU_LINK B, V_ORG_STRUCTURE C
						WHERE sDEP_READY IS NOT NULL
						  AND A.nRN=B.STORE_RN
						    AND B.ORG_STRU_ID=C.ID
						ORDER BY sDEP_READY
	 ) e, kls_prod f
where
b.org_stru_id = c.id
and f.id_npr = d.prod_id_npr
and b.store_rn = a.nrn
and d.org_stru_id = c.id
and b.is_main = 1
and e.sdep_ready = a.sdep_ready
and  e.filial_id = (select max(filial_id) from v_master_reports)
order by 2, 3;


--
-- V_RITM_POST_GRAFIK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RITM_POST_GRAFIK
(PLAT_ID, PLAT_NAME, NUM_DECADA, GRAF_VES)
AS 
SELECT
  --Анализ ритмичности: График поставок по декадам
  PLAT_ID,
  PLAT_NAME,
  NUM_DECADA,
  ROUND(SUM(GRAF_VES),0) AS GRAF_VES
FROM
(
  -- График поставок по ЖД
  SELECT /*+ RULE */
    plat.ID AS PLAT_ID,
    plat.PREDPR_NAME AS PLAT_NAME,
    (CASE
        WHEN TO_NUMBER(TO_CHAR(GU12_BR.DATE_R,'DD'))<=10 THEN 1
        WHEN TO_NUMBER(TO_CHAR(GU12_BR.DATE_R,'DD'))<=20 THEN 2
  	    ELSE 3
  	 END) AS NUM_DECADA,
    GU12_BR.VES AS GRAF_VES
  FROM GU12_A,GU12_B,GU12_BR,KLS_PREDPR plat,
           (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r
  WHERE
	GU12_BR.ID_B=GU12_B.ID AND
    GU12_B.ID_A=GU12_A.ID AND
	GU12_BR.DATE_R BETWEEN r.BEGIN_DATE AND r.END_DATE AND
	GU12_B.PLAT_ID=plat.ID
    AND GU12_A.PROD_ID<>'201005'
    AND plat.ID=DECODE(r.IS_UNP,1,plat.ID,2641)
  UNION ALL
  -- График поставок по автоналиву
  SELECT
    pp.PLAT_ID,
    pp.PLAT_NAME,
    wd.NUM_DECADA,
    pp.PLAN_VES*wd.COUNT_DECADA/wd.COUNT_MON AS GRAF_VES
  FROM
  (
    SELECT /*+ RULE */
      plat.ID AS PLAT_ID,
      plat.PREDPR_NAME AS PLAT_NAME,
      SUM(ZAKAZ.VES) AS plan_ves
    FROM ZAKAZ,KLS_DOG,KLS_PREDPR plat,
           (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r
    WHERE ZAKAZ.DOG_ID=KLS_DOG.ID AND KLS_DOG.PREDPR_ID=plat.ID AND
      ZAKAZ.STAN_ID=2595 AND -- Автоналив
   	  ZAKAZ.IS_ACCEPT=1 AND -- Утвержденные
      ZAKAZ.DATE_PLAN BETWEEN TRUNC(r.BEGIN_DATE,'MONTH') AND LAST_DAY(r.END_DATE) AND
	  ZAKAZ.IS_AGENT=1 -- Только заказы УНП
	  AND KLS_DOG.AGENT_ID IN (8,1,4175) AND plat.ID<>1334
      AND plat.ID=DECODE(r.IS_UNP,1,plat.ID,2641)
    GROUP BY
      plat.ID,
      plat.PREDPR_NAME
  ) pp,
  (
     -- Расчет кол-ва рабочих дней подекадно и за месяц
    SELECT
      A.NUM_DECADA,
  	  SUM(A.IS_WORK) AS COUNT_DECADA,
      MAX(B.COUNT_MON) AS COUNT_MON
    FROM
      (
       SELECT
          (CASE
            WHEN TO_NUMBER(TO_CHAR(VALUE,'DD'))<=10 THEN 1
            WHEN TO_NUMBER(TO_CHAR(VALUE,'DD'))<=20 THEN 2
  	        ELSE 3
    	   END) AS NUM_DECADA,
          IS_WORK
        FROM KLS_DATES,
           (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r
        WHERE VALUE BETWEEN r.BEGIN_DATE AND r.END_DATE
	  ) a,
      (
       SELECT
          SUM(IS_WORK) AS COUNT_MON
        FROM KLS_DATES,
           (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r
        WHERE VALUE BETWEEN TRUNC(r.BEGIN_DATE,'MONTH') AND LAST_DAY(r.END_DATE)
	  ) b
    GROUP BY A.NUM_DECADA
  ) wd
)
GROUP BY
  PLAT_ID,
  PLAT_NAME,
  NUM_DECADA
ORDER BY
  PLAT_ID,
  PLAT_NAME,
  NUM_DECADA;


--
-- V_RITM_POST_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RITM_POST_PLAN
(PLAT_ID, PLAT_NAME, PLAN_VES)
AS 
SELECT
  -- Анализ ритмичности: План поставок с учетом ОБР
  plat.ID AS PLAT_ID,
  plat.PREDPR_NAME AS PLAT_NAME,
  SUM(A.PLAN_VES) AS PLAN_VES
FROM PLAN_POST A, PLAN_PERIODS P, KLS_DOG D, KLS_PREDPR plat,
           (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r
WHERE A.DOG_ID=D.ID
      AND A.PLAN_ID IN (2,3)
      AND A.PLAN_PER_ID=P.ID
	  AND P.DATE_PLAN BETWEEN TRUNC(r.BEGIN_DATE,'MONTH') AND LAST_DAY(r.END_DATE)
	  AND D.PREDPR_ID=plat.ID
	  AND A.PROD_ID_NPR<>'90000'
	  AND D.AGENT_ID IN (8,1,4175) AND plat.ID<>1334
	  AND plat.ID=DECODE(r.IS_UNP,1,plat.ID,2641)
GROUP BY
  plat.ID,
  plat.PREDPR_NAME
ORDER BY
  plat.ID,
  plat.PREDPR_NAME;


--
-- V_SF_CLOSED  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_CLOSED
(VES, D_41, SUM_AKCIZ, D_191, SUM_NALIV, 
 NDC_NAL20, NDC_NAL03, D_441, D_194, D_442, 
 NDC_TR20, SUM_NACEN, KOD_REALP, DOG_REALP, NOM_SF, 
 NOM_DOK, NOM_POR, CLOSE_DATE, KOD_NFP)
AS 
select sum(nvl(r.VES,0)) as VES,
       sum(nvl(r.D_41,0))as D_41,
	   sum(nvl(r.SUM_AKCIZ,0))as SUM_AKCIZ,
	   sum(nvl(r.D_191,0))as D_191,
	   sum(nvl(r.SUM_NALIV,0))as SUM_NALIV,
       sum(nvl(r.NDC_NAL20,0))as NDC_NAL20,
	   sum(nvl(r.NDC_NAL03,0))as NDC_NAL03,
	   sum(nvl(r.D_441,0))as D_441,
	   sum(nvl(r.D_194,0))as D_194,
	   sum(nvl(r.D_442,0))as D_442,
	   sum(nvl(r.NDC_TR20,0))as NDC_TR20,
	   sum(nvl(r.SUM_NACEN,0))as SUM_NACEN,
	   r.KOD_REALP,
	   r.DOG_REALP,
	   r.NOM_SF,
	   r.nom_dok,
	   o.NOM_POR,
	   r.CLOSE_DATE,
	   MAX(r.kod_nfp) as kod_nfp
	   from real_opl r,opl o,KLS_DOG D1, KLS_DOG D2
	   where r.close_date is not null and r.UN_DOK=o.NOM_DOK AND d1.short_NUMBER=r.DOG_REALP and d1.MAINDOG_ID=d2.ID and d2.DOG_NUMBER='0210218'
	   group by r.KOD_REALP,r.DOG_REALP,r.NOM_SF,o.NOM_POR,r.CLOSE_DATE,r.nom_dok;


--
-- V_SF_POS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_POS
(ABBR_NPR, LONG_NAME_NPR, NOM_DOK, BILL_POS_ID, VES, 
 CENA, SUMMA, SUMMA_BN, SUMMA_NDS20, PAYED_SUMMA)
AS 
SELECT
  kls_prod.ABBR_NPR,
  kls_prod.NAME_NPR as LONG_NAME_NPR,
  BILL_POS.NOM_DOK,
  BILL_POS.BILL_POS_ID,
  BILL_POS.VES,
  BILL_POS.CENA_BN,
  BILL_POS.SUMMA,
  BILL_POS.SUMMA_BN,
  BILL_POS.SUMMA_NDS20,
  SUM(payments_on_bills.SUMMA) AS payed_summa
FROM
  BILL_POS,kls_prod,payments_on_bills
WHERE
  bill_pos.PROD_ID_NPR=kls_prod.ID_NPR(+) and
  bill_pos.NOM_DOK=payments_on_bills.NOM_DOK(+) and
  bill_pos.BILL_POS_ID=payments_on_bills.BILL_POS_ID(+)
GROUP BY
  kls_prod.ABBR_NPR,
  kls_prod.NAME_NPR,
  BILL_POS.VES,
  BILL_POS.CENA_BN,
  BILL_POS.SUMMA,
  BILL_POS.SUMMA_BN,
  BILL_POS.SUMMA_NDS20,
  BILL_POS.NOM_DOK,
  BILL_POS.BILL_POS_ID;


--
-- V_SF_POS_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_POS_OPL
(ID, NOM_DOK, BILL_POS_ID, PAYMENTS_ID, SUMMA, 
 DATE_REALIZ, SUMMA_NDS, SUMMA_AKCIZ, VES, NUM_PLAT, 
 DATE_PLAT, NAZN_PLAT)
AS 
SELECT
  payments_on_bills."ID",payments_on_bills."NOM_DOK",payments_on_bills."BILL_POS_ID",payments_on_bills."PAYMENTS_ID",payments_on_bills."SUMMA",payments_on_bills."DATE_REALIZ",payments_on_bills."SUMMA_NDS",payments_on_bills."SUMMA_AKCIZ",payments_on_bills."VES",
  payments.NUM_PLAT,
  payments.DATE_PLAT,
  payments.NAZN_PLAT
FROM
  payments_on_bills,payments
WHERE
  payments_on_bills.PAYMENTS_ID=payments.ID;


--
-- V_SNP_DEBITOR_OPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DEBITOR_OPL
(LUKDOG_ID, PLAT_ID, DOG_ID, DATE_OPL, SUMMA, 
 NOM_DOK)
AS 
SELECT
  v_opl_snp.LUKDOG_ID,
  v_opl_snp.PLAT_ID,
  v_opl_snp.dog_id,
  v_OPL_snp.DATE_OPL,
  v_OPL_snp.SUMMA, 
  v_OPL_snp.NOM_DOK
FROM v_opl_snp
WHERE v_OPL_snp.is_snp=2
  AND v_OPL_snp.DATE_OPL>=TO_DATE('01.04.2002','dd.mm.yyyy');


--
-- V_SNP_DEBITOR_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNP_DEBITOR_SF
(NOM_SF, NOM_DOK, LUKDOG_ID, PLAT_ID, DOG_ID, 
 IS_PROD, DATE_KVIT, KOL_DN, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT
  BILLS_SNP.nom_sf AS nom_sf,
  BILLS_SNP.nom_dok AS nom_dok,
  DECODE(NVL(KLS_DOG.LUKDOG_ID,0),0,BILLS_SNP.DOG_ID,KLS_DOG.LUKDOG_ID) AS LUKDOG_ID,
  KLS_DOG.PREDPR_ID AS NPOPLAT_ID,
  BILLS_SNP.DOG_ID AS NPODOG_ID,
  DECODE(SIGN(bp.BILL_POS_SNP_ID-10),-1,1,0),
  MAX(BILLS_SNP.DATE_KVIT),
  MAX(BILLS_SNP.KOL_DN),
  MAX(BILLS_SNP.DATE_KVIT+BILLS_SNP.KOL_DN),
  SUM(bp.summa) AS summa_dok
FROM BILLS, BILLS_SNP, BILL_POS_SNP bp, KLS_DOG
WHERE BILLS_SNP.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
  AND BILLS.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
  AND BILLS_SNP.NOM_DOK=BILLS.nom_dok
  AND BILLS_SNP.DOG_ID = KLS_DOG.ID
  AND bp.nom_dok = BILLS_SNP.nom_dok
GROUP BY
  BILLS_SNP.nom_sf,
  BILLS_SNP.nom_dok,
  DECODE(NVL(KLS_DOG.LUKDOG_ID,0),0,BILLS_SNP.DOG_ID,KLS_DOG.LUKDOG_ID),
  KLS_DOG.PREDPR_ID,
  BILLS_SNP.DOG_ID,
  DECODE(SIGN(bp.BILL_POS_SNP_ID-10),-1,1,0)
UNION ALL
SELECT
  0 AS nom_sf,
  0 AS nom_dok,
  KLS_DOG.LUKDOG_ID AS LUKDOG_ID,
  KLS_PREDPR.ID AS NPOPLAT_ID,
  KLS_DOG.ID AS NPODOG_ID,
  1,
  TO_DATE('31.03.2002','dd.mm.yyyy'),
  KLS_USL_OPL.KOL_DN,
  TO_DATE('31.03.2002','dd.mm.yyyy')+KLS_USL_OPL.KOL_DN,
  KLS_DOG.SALDO_01042002_PROD
FROM KLS_DOG,KLS_PREDPR,KLS_USL_OPL
WHERE KLS_DOG.SALDO_01042002<>0
  AND KLS_DOG.USL_OPL_ID = KLS_USL_OPL.ID (+)
  AND KLS_DOG.PREDPR_ID = KLS_PREDPR.ID
UNION ALL
SELECT
  0 AS nom_sf,
  0 AS nom_dok,
  KLS_DOG.LUKDOG_ID AS LUKDOG_ID,
  KLS_PREDPR.ID AS NPOPLAT_ID,
  KLS_DOG.ID AS NPODOG_ID,
  0,
  TO_DATE('31.03.2002','dd.mm.yyyy'),
  KLS_USL_OPL.KOL_DN,
  TO_DATE('31.03.2002','dd.mm.yyyy')+KLS_USL_OPL.KOL_DN,
  KLS_DOG.SALDO_01042002-KLS_DOG.SALDO_01042002_PROD
FROM KLS_DOG,KLS_PREDPR,KLS_USL_OPL
WHERE KLS_DOG.SALDO_01042002<>0
  AND KLS_DOG.USL_OPL_ID = KLS_USL_OPL.ID (+)
  AND KLS_DOG.PREDPR_ID = KLS_PREDPR.ID;


--
-- V_SNPORDEXP_OUTPUT_KSE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SNPORDEXP_OUTPUT_KSE
(CONTRACT1NUM, ORDROWCODE, ORDDATE, ORDNUM, DELIVDATE, 
 CUSTCODE, PAYERCODE, CONSIGNEECODE, USERCODE, CONTRACT2NUM, 
 CONTRACT2DATE, PRICECAT, PRODCODE, WEIGHT, VOLUME, 
 PRICENOTAX, UNIT, SHIPTYPE, DISPSTAN, ENDSTAN, 
 UNLOADTERM, CONTRACT3NUM_SUBA, CONTRACT3DATE_SUBA, SUPPLIERCODE_SUBA, PAYERCODE_SUBA, 
 SALEPRICENOTAX_SUBA, UNIT_SUBA, NOTE, SPECNOTE, LETTERNUM, 
 LETTERDATE, UNLOADTERM2, "orderid")
AS 
select luk_dog.isu_kod_dog as contract1num,
         zakaz_hist.id as ordrowcode, zakaz_hist.input_date as orddate,
         zakaz_hist.client_number/* ||'/'|| zakaz_hist.input_number*/ as ordnum,
         last_day(zakaz.date_plan) as delivdate,
         969 as custcode, payerpr.ksss_predpr_id as payercode,
         consignpr.ksss_predpr_id as consigneecode, userpr.ksss_predpr_id as usercode,
         ''/*kls_dog.isu_kod_dog*/ as contract2num, ''/*kls_dog.dog_date*/ as contract2date,
         '' as pricecat, kls_prod.ksss_prod_id as prodcode,
         zakaz_hist.load_ves as weight, 0 as volume,
         0 as pricenotax, 'Т' as unit,
         case kls_load_type.id
            when 1 then 3 when 6 then 3
            when 2 then 1
            when 3 then 5
            when 4 then 6
            else 0
         end as shiptype,
         case nvl(kls_stan.ksss_stan_id, 0)
           when 0 then null
           else 'RR11229'/*'2520'*/
         end as dispstan,
         kls_stan.isu_kod/*ksss_stan_id*/ as endstan, kls_vetka.vetka_name as unloadterm,
         '' as contract3num_suba, '' as contract3date_suba,
         0 as suppliercode_suba, 969/*payerpr.ksss_predpr_id*/ as payercode_suba,
         0 as salepricenotax_suba, '' as unit_suba,
         '' as note, '' as specnote, '' as letternum,
         '' as letterdate, '' as unloadterm2,
         zakaz_hist.id as orderid -- это поле всегда последнее, нужно для регистрации выгрузки
  from zakaz
       left join kls_dog luk_dog on luk_dog.id=zakaz.lukdog_id
       join zakaz_hist on zakaz_hist.zakaz_id=zakaz.id
       left join t_snpordexp_uploadord_kse uo on uo.orderid=zakaz_hist.id
       join kls_predpr payerpr on payerpr.id=zakaz.plat_id
       left join kls_predpr consignpr on consignpr.id=zakaz.poluch_id
       left join kls_predpr userpr on userpr.id=zakaz.potreb_id
       left join kls_dog on kls_dog.id=zakaz.dog_id
       join kls_prod on kls_prod.id_npr=zakaz.prod_id_npr
       join kls_vid_otgr on kls_vid_otgr.load_abbr=zakaz.load_abbr
       join kls_load_type on kls_load_type.id=kls_vid_otgr.load_type_id
       left join kls_stan on kls_stan.id=zakaz.stan_id
       left join kls_vetka on kls_vetka.id=zakaz.vetka_id
  where zakaz.is_agent=2 and zakaz_hist.status_zakaz_id=20 and
        uo.orderid is null;

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CONTRACT1NUM IS 'Номер договора';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.ORDROWCODE IS 'Код строки разнарядки';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.ORDDATE IS 'Дата разнарядки';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.ORDNUM IS 'Номер разнарядки';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.DELIVDATE IS 'Период действия разнарядки. Дата начала действия разнарядки';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CUSTCODE IS 'Код КССС заказчика';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.PAYERCODE IS 'Код КССС плательщика по агентской схеме';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CONSIGNEECODE IS 'Код КССС грузополучателя';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.USERCODE IS 'Код КССС потребителя';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CONTRACT2NUM IS 'Юридический номер стороннего договора';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CONTRACT2DATE IS 'Дата стороннего договора';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.PRICECAT IS 'Категория цены. Номер позиции ссылочного заказа на поставку — количество вагонов';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.PRODCODE IS 'Код КССС продукта';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.WEIGHT IS 'Общий вес заказа в кг';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.VOLUME IS 'Запланированный объём заказа в штуках (для фасовки)';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.PRICENOTAX IS 'Цена нетто без налогов, руб.';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.UNIT IS 'Продажная ЕИ: Т — тонна, КГ — килограмм, ШТ — штука, Л — литр';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.SHIPTYPE IS 'Вид отгрузки: 1 — автомобильный транс., 2 — МНПП, 3 — ж/д транс., 5 — водный транс., 6 — трубопроводный транс.';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.DISPSTAN IS 'Код станции, порта или терминала (для отгрузки по трубе) отправления в кодировке ЖД';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.ENDSTAN IS 'Код станции, порта или терминала (для отгрузки по трубе) назначения в кодировке ЖД';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.UNLOADTERM IS 'Пункт выгрузки. Примечание к разнарядке, если есть условия по подводу состава на определённую ветку';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CONTRACT3NUM_SUBA IS 'Номер договора при реализации по субагентской схеме';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.CONTRACT3DATE_SUBA IS 'Дата договора, указанного в поле CONTRACT3NUM_SUBA';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.SUPPLIERCODE_SUBA IS 'Код КССС поставщика товара конечному клиенту';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.PAYERCODE_SUBA IS 'Плательщик по субагентской схеме. Код КССС клиента';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.SALEPRICENOTAX_SUBA IS 'Цена продажи по субагентской схеме без учёта налогов, руб.';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.UNIT_SUBA IS 'Продажная ЕИ по субагентской схеме: Т — тонна, КГ — килограмм, ШТ — штука, Л — литр';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.NOTE IS 'Примечание в заголовке, тексты';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.SPECNOTE IS 'Особые отметки в заголовке, тексты';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.LETTERNUM IS 'Номер письма в данных заказа на поставку';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.LETTERDATE IS 'Дата письма в данных заказа на поставку';

COMMENT ON COLUMN MASTER.V_SNPORDEXP_OUTPUT_KSE.UNLOADTERM2 IS 'Пункт выгрузки в доп. данных Б.';



--
-- V_TRIADA_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TRIADA_PLAN
(GR_PROD, PROD, PLAT, VES)
AS 
SELECT 
	  RES.GR_PROD,
	  RES.PROD,
	  RES.PLAT,
	  SUM(RES.VES) as VES
FROM
(select
  oil_prod_grp.NAME_NPR AS GR_PROD,
  oil_prod.NAME_NPR AS PROD,
  kls_predpr.PREDPR_NAME AS PLAT,
  SUM(plan_post.plan_ves) as VES	  	  
from
  plan_post plan_post
  join
  kls_prod oil_prod on plan_post.prod_id_npr=oil_prod.id_npr
  join
  kls_prod oil_prod_grp on oil_prod.id_group_npr=oil_prod_grp.id_npr
  join
  kls_dog dogovor on plan_post.dog_id=dogovor.id
  join 
  kls_predpr on dogovor.PREDPR_ID=kls_predpr.ID
  join
  kls_planstru plan_pos on plan_post.planstru_id=plan_pos.id
  join
  plan_periods plan_per on plan_post.plan_per_id=plan_per.id
where plan_post.plan_id=3 -- ОБР
  and plan_per.begin_date between FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_TRIADA.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_TRIADA.XLS')
--  and plan_pos.kod_sgr<>21
  and dogovor.isu_kod_dog like 'A%' --убираем из плана поставки на собственные нужды
GROUP BY
  kls_predpr.PREDPR_NAME,
  oil_prod_grp.NAME_NPR,
  oil_prod.NAME_NPR
HAVING SUM(plan_post.plan_ves)<>0
UNION ALL
select
  oil_prod_grp.NAME_NPR AS GR_PROD,
  oil_prod.NAME_NPR AS PROD,
  kls_predpr.PREDPR_NAME AS PLAT,
  SUM(plan_post.plan_ves) as VES
 from
  plan_post plan_post
  join
  kls_prod oil_prod on plan_post.prod_id_npr=oil_prod.id_npr
  join
  kls_prod oil_prod_grp on oil_prod.id_group_npr=oil_prod_grp.id_npr
  join
  kls_dog dogovor on plan_post.dog_id=dogovor.id
  join 
  kls_predpr on dogovor.PREDPR_ID=kls_predpr.ID
  join
  kls_planstru plan_pos on plan_post.planstru_id=plan_pos.id
  join
  plan_periods plan_per on plan_post.plan_per_id=plan_per.id
where plan_post.plan_id=2 -- московский план
  and plan_per.date_plan between FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_TRIADA.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_TRIADA.XLS')
--  and plan_pos.kod_sgr<>21
  and dogovor.isu_kod_dog like 'A%' --убираем из плана поставки на собственные нужды
GROUP BY
  kls_predpr.PREDPR_NAME,
  oil_prod_grp.NAME_NPR,
  oil_prod.NAME_NPR
HAVING SUM(plan_post.plan_ves)<>0
) RES
HAVING SUM(RES.ves)<>0
GROUP BY RES.GR_PROD,RES.PROD,RES.PLAT
ORDER BY RES.GR_PROD,RES.PROD,RES.PLAT NULLS FIRST;


--
-- V_UNP_BUDJET_NPR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_BUDJET_NPR
(BEGIN_DATE, END_DATE, PLAT_NAME, BEGIN_DEB, BEGIN_DEB_PROSR, 
 BEGIN_DEB_CUR, BEGIN_DEB_NEXT, BEGIN_KRED, SUMMA_DOK_CUR, SUMMA_DOK_NEXT, 
 SUMMA_PAYED, SUMMA_TOPAY, END_DEB, END_DEB_PROSR, END_DEB_CUR, 
 END_KRED)
AS 
SELECT
  a.begin_date,
  a.end_date,
  KLS_PREDPR.SF_NAME as PLAT_NAME,
  NVL(SUM(A.begin_deb),0) AS begin_deb, -- Задолженность в предыдущем периоде
  NVL(SUM(A.begin_deb_prosr),0) AS begin_deb_prosr, -- Просрочена задолженность в предыдущем периоде
  NVL(SUM(A.begin_deb_cur),0) AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  NVL(SUM(A.begin_deb_next),0) AS begin_deb_next, -- Задолженность прошлого периода к погашению в текущем
  NVL(SUM(A.begin_kred),0) AS begin_kred, -- Кредиторка в предыдущем периоде
  NVL(SUM(A.summa_dok_cur),0) AS summa_dok_cur, -- Отгружено в текущем периоде, к погашению в текущем периоде
  NVL(SUM(A.summa_dok_next),0) AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  NVL(SUM(A.summa_payed),0) AS summa_payed, -- Оплачено в текущем периоде
  NVL(SUM(A.summa_topay),0) AS summa_topay, -- Не разнесены оплаты в текущем периоде
  NVL(SUM(A.end_deb),0) AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_deb_prosr),0) AS end_deb_prosr, -- Просрочена задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_deb_cur),0) AS end_deb_cur, -- Текущая задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_kred),0) AS end_kred -- Кредиторка на конец текущего периода (для ПРОВЕРКИ)
FROM
(
SELECT /*+ ORDERED USE_NL(bills,pay,r) */
  r.begin_date,
  r.end_date,
  bills.DOG_ID,
  (CASE
     WHEN bills.date_kvit<r.begin_date THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
	 ELSE 0
   END) AS begin_deb, -- Задолженность предыдущего периода
  (CASE
     WHEN bills.date_kvit<r.begin_date AND bills.date_plat<r.begin_date THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
	 ELSE 0
   END) AS begin_deb_prosr, -- Просрочена задолженность предыдущего периода
  (CASE
     WHEN bills.date_kvit<r.begin_date AND bills.date_plat>=r.begin_date AND bills.date_plat<=LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
	 ELSE 0
   END) AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  (CASE
     WHEN bills.date_kvit<r.begin_date AND bills.date_plat>LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
	 ELSE 0
   END) AS begin_deb_next, -- Задолженность прошлого периода к погашению в следующем
  0 AS begin_kred, -- Кредиторка в предыдущем периоде
  (CASE
     WHEN bills.date_kvit>=r.begin_date AND bills.date_plat<=LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK
	 ELSE 0
   END) AS summa_dok_cur, -- Отгружено в текущем периоде, к погашению в текущем периоде
  (CASE
     WHEN date_kvit>=r.begin_date AND bills.date_plat>LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK
	 ELSE 0
   END) AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  NVL(pay.summa,0) AS summa_payed, -- Оплачено в текущем периоде
  0 AS summa_topay, -- Не разнесены оплаты в текущем периоде
  bills.LUK_SUMMA_DOK-NVL(pay.end_summa,0) AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  (CASE
     WHEN bills.date_plat<=LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.end_summa,0)
	 ELSE 0
   END) AS end_deb_prosr, -- Просроченная задолженность на конец текущего периода (для ПРОВЕРКИ)
  (CASE
     WHEN bills.date_plat>LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.end_summa,0)
	 ELSE 0
   END) AS end_deb_cur, -- Текущая задолженность на конец текущего периода (для ПРОВЕРКИ)
  0 AS end_kred -- Кредиторка на конец текущего периода (для ПРОВЕРКИ)
FROM bills,
	(SELECT
	   payments_on_bills.nom_dok,
	   SUM(CASE
	         WHEN date_realiz<r.begin_date THEN payments_on_bills.summa
			 ELSE 0
		   END) AS begin_summa, -- Реализация предыдущего периода
	   SUM(CASE
	         WHEN date_realiz>=r.begin_date THEN payments_on_bills.summa
			 ELSE 0
		   END) AS summa,  -- Реализация текущего периода
	   	SUM(payments_on_bills.summa) as end_summa -- Оплачено всего
	 FROM payments_on_bills,payments,(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
     WHERE payments_on_bills.payments_id=payments.id and
		 payments_on_bills.date_realiz<=r.end_date and
		 payments.date_post<=r.end_date
	 GROUP BY nom_dok) pay, -- разнесенные оплаты
	(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
where
  bills.nom_dok=pay.nom_dok(+) and
  bills.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy') and
  bills.date_kvit<=r.end_date
--
UNION ALL
--
SELECT
  r.begin_date,
  r.end_date,
  b.DOG_ID,
  0 AS begin_deb, -- Задолженность в предыдущем периоде
  0 AS begin_deb_prosr, -- Просрочена задолженность в предыдущем периоде
  0 AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  0 AS begin_deb_next, -- Задолженность прошлого периода к погашению в следующем
  a.begin_summa AS begin_kred, -- Кредиторка в предыдущем периоде
  0 AS summa_dok_cur, -- Отгружено в текущем периоде, к погашению в текущем периоде
  0 AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  0 AS summa_payed, -- Оплачено в текущем периоде
  a.summa AS summa_topay, -- Не разнесены оплаты в текущем периоде
  0 AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  0 AS end_deb_prosr, -- Просрочена Задолженность на конец текущего периода (для ПРОВЕРКИ)
  0 AS end_deb_cur, -- Текущая здолженность на конец текущего периода (для ПРОВЕРКИ)
  a.end_summa AS end_kred -- Не разнесены оплаты на конец текущего периода (для ПРОВЕРКИ)
FROM
  (
    SELECT
       payments.ID,
       (CASE
	      WHEN date_post<r.begin_date THEN payments.SUMMA
		  ELSE 0
	 	END) AS begin_summa, -- Оплаты на конец предыдущего периода
	   (CASE
	      WHEN date_post>=r.begin_date AND date_post<=r.end_date THEN payments.SUMMA
	 	  ELSE 0
		 END) AS summa,  -- Оплаты в течение текущего периода
	   (CASE
	      WHEN date_post<=r.end_date THEN payments.SUMMA
	 	  ELSE 0
		 END) AS end_summa  -- Оплаты на конец текущего периода
     FROM payments, (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
     UNION ALL
     SELECT
       pb.PAYMENTS_ID,
       (CASE
	      WHEN p.date_post<r.begin_date AND pb.date_realiz<r.begin_date THEN -pb.SUMMA
		  ELSE 0
	 	END) AS begin_summa, -- Реализация предыдущего периода
	   (CASE
	      WHEN p.date_post>=r.begin_date AND p.date_post<=r.end_date THEN -pb.SUMMA
	 	  ELSE 0
		 END) AS summa,  -- Реализация на конец текущего периода
	   (CASE
	      WHEN p.date_post<=r.end_date THEN -pb.SUMMA
	 	  ELSE 0
		 END) AS end_summa -- Реализация на конец текущего периода
     FROM payments_on_bills pb, payments p, (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
	 WHERE pb.date_realiz<=r.end_date
	   AND pb.PAYMENTS_ID=p.id
  ) a,payments b, (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
WHERE a.id=b.id
  AND b.date_post<=r.end_date
) A, KLS_DOG,KLS_PREDPR
WHERE A.DOG_ID=KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID=KLS_PREDPR.ID
GROUP BY
  A.begin_date,
  A.end_date,
  KLS_PREDPR.SF_NAME;


--
-- V_UNP_BUDJET_NPR_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_BUDJET_NPR_FACT
(BEGIN_DATE, END_DATE, GROUP_ORDER, GROUP_NAME, PLAT_NAME, 
 BEGIN_DEB, BEGIN_DEB_PROSR, BEGIN_DEB_CUR, BEGIN_DEB_NEXT, BEGIN_KRED, 
 SUMMA_DOK_CUR, SUMMA_DOK_NEXT, SUMMA_PAYED, SUMMA_TOPAY, END_DEB, 
 END_DEB_PROSR, END_DEB_CUR, END_KRED)
AS 
SELECT
  a.begin_date,
  a.end_date,
  a.GROUP_ORDER,
  a.GROUP_NAME,
  KLS_PREDPR.SF_NAME as PLAT_NAME,
  NVL(SUM(A.begin_deb),0) AS begin_deb, -- Задолженность в предыдущем периоде
  NVL(SUM(A.begin_deb_prosr),0) AS begin_deb_prosr, -- Просрочена задолженность в предыдущем периоде
  NVL(SUM(A.begin_deb_cur),0) AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  NVL(SUM(A.begin_deb_next),0) AS begin_deb_next, -- Задолженность прошлого периода к погашению в текущем
  NVL(SUM(A.begin_kred),0) AS begin_kred, -- Кредиторка в предыдущем периоде
  NVL(SUM(A.summa_dok_cur),0) AS summa_dok_cur, -- Отгружено в текущем периоде, к погашению в текущем периоде
  NVL(SUM(A.summa_dok_next),0) AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  NVL(SUM(A.summa_payed),0) AS summa_payed, -- Оплачено в текущем периоде
  NVL(SUM(A.summa_topay),0) AS summa_topay, -- Не разнесены оплаты в текущем периоде
  NVL(SUM(A.end_deb),0) AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_deb_prosr),0) AS end_deb_prosr, -- Просрочена задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_deb_cur),0) AS end_deb_cur, -- Текущая задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_kred),0) AS end_kred -- Кредиторка на конец текущего периода (для ПРОВЕРКИ)
FROM
(
SELECT 
  r.begin_date,
  r.end_date,
  KLS_PROD_GROUPS.GROUP_ORDER,
  KLS_PROD_GROUPS.GROUP_NAME,
  bills.DOG_ID,
  SUM(CASE
     WHEN bills.date_kvit<r.begin_date THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
  ELSE 0
   END) AS begin_deb, -- Задолженность предыдущего периода
  SUM(CASE
     WHEN bills.date_kvit<r.begin_date AND bills.date_plat<r.begin_date THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
  ELSE 0
   END) AS begin_deb_prosr, -- Просрочена задолженность предыдущего периода
  SUM(CASE
     WHEN bills.date_kvit<r.begin_date AND bills.date_plat>=r.begin_date AND bills.date_plat<=LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
  ELSE 0
   END) AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  SUM(CASE
     WHEN bills.date_kvit<r.begin_date AND bills.date_plat>LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.begin_summa,0)
  ELSE 0
   END) AS begin_deb_next, -- Задолженность прошлого периода к погашению в следующем
  0 AS begin_kred, -- Кредиторка в предыдущем периоде
  SUM(CASE
     WHEN bills.date_kvit>=r.begin_date AND bills.date_plat<=LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK
  ELSE 0
   END) AS summa_dok_cur, -- Отгружено в текущем периоде, к погашению в текущем периоде
  SUM(CASE
     WHEN date_kvit>=r.begin_date AND bills.date_plat>LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK
  ELSE 0
   END) AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  SUM(NVL(pay.summa,0)) AS summa_payed, -- Оплачено в текущем периоде
  0 AS summa_topay, -- Не разнесены оплаты в текущем периоде
  SUM(bills.LUK_SUMMA_DOK-NVL(pay.end_summa,0)) AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  SUM(CASE
     WHEN bills.date_plat<=LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.end_summa,0)
  ELSE 0
   END) AS end_deb_prosr, -- Просроченная задолженность на конец текущего периода (для ПРОВЕРКИ)
  SUM(CASE
     WHEN bills.date_plat>LAST_DAY(r.end_date) THEN bills.LUK_SUMMA_DOK-NVL(pay.end_summa,0)
  ELSE 0
   END) AS end_deb_cur, -- Текущая задолженность на конец текущего периода (для ПРОВЕРКИ)
  0 AS end_kred -- Кредиторка на конец текущего периода (для ПРОВЕРКИ)
FROM bills,
 (SELECT   /*+ ORDERED INDEX (payments PAYMENTS_DATE_POST_I) INDEX (payments_on_bills PAYMENTS_ON_BILLS_PAY_ID) USE_NL (payments_on_bills) */
         payments_on_bills.nom_dok,
         SUM
            (CASE
                WHEN payments_on_bills.date_realiz <
                                      master_reports_master_reports.begin_date
                   THEN payments_on_bills.summa
                ELSE 0
             END
            ) AS begin_summa,                -- Реализация предыдущего периода
         SUM
            (CASE
                WHEN payments_on_bills.date_realiz >=
                                      master_reports_master_reports.begin_date
                   THEN payments_on_bills.summa
                ELSE 0
             END
            ) AS summa,                         -- Реализация текущего периода
         SUM (payments_on_bills.summa) AS end_summa
    FROM master_reports master_reports_master_reports,
         payments,
         payments_on_bills
   WHERE payments_on_bills.payments_id = payments.ID
     AND payments_on_bills.date_realiz <=
                                        master_reports_master_reports.end_date
     AND payments.date_post <= master_reports_master_reports.end_date
     AND NLS_UPPER (master_reports_master_reports.report_file) =
                                                          'UNP_FIN_BUDGET.XLS'
     AND master_reports_master_reports.terminal_name =
                                                   MASTER.for_init.getcurrterm
     AND master_reports_master_reports.osuser_name =
                                                   MASTER.for_init.getcurruser
GROUP BY payments_on_bills.nom_dok) pay, -- разнесенные оплаты
 (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r,
 KLS_PROD_GROUPS_DESC,KLS_PROD_GROUPS
where
  bills.nom_dok=pay.nom_dok(+) and
  bills.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy') and
  bills.date_kvit<=r.end_date and
  bills.PROD_ID_NPR=KLS_PROD_GROUPS_DESC.PROD_ID_NPR and
  KLS_PROD_GROUPS_DESC.PROD_GROUPS_ID=KLS_PROD_GROUPS.ID and
  KLS_PROD_GROUPS.PROD_TYPE_GRP_ID=10
GROUP BY
  r.begin_date,
  r.end_date,
  KLS_PROD_GROUPS.GROUP_ORDER,
  KLS_PROD_GROUPS.GROUP_NAME,
  bills.DOG_ID
--
UNION ALL
--
SELECT   master_reports_master_reports.begin_date,
         master_reports_master_reports.end_date, 2 AS group_order,
         'Расчеты за нефте- и газопродукты' AS group_name, b.dog_id,
         0 AS begin_deb,                 -- Задолженность в предыдущем периоде
                        0 AS begin_deb_prosr,
-- Просрочена задолженность в предыдущем периоде
         0 AS begin_deb_cur,
-- Задолженность прошлого периода к погашению в текущем
         0 AS begin_deb_next,
-- Задолженность прошлого периода к погашению в следующем
                             SUM (a.begin_summa) AS begin_kred,
         
-- Кредиторка в предыдущем периоде
         0 AS summa_dok_cur,
-- Отгружено в текущем периоде, к погашению в текущем периоде
         0 AS summa_dok_next,
-- Отгружено в текущем периоде, к погашению в следующем периоде
         0 AS summa_payed,
-- Оплачено в текущем периоде
                          SUM (a.summa) AS summa_topay,
-- Не разнесены оплаты в текущем периоде
         0 AS end_deb,
-- Задолженность на конец текущего периода (для ПРОВЕРКИ)
         0 AS end_deb_prosr,
-- Просрочена Задолженность на конец текущего периода (для ПРОВЕРКИ)
         0 AS end_deb_cur,
-- Текущая здолженность на конец текущего периода (для ПРОВЕРКИ)
                          SUM (a.end_summa) AS end_kred
    FROM (SELECT payments.ID,
                 (CASE
                     WHEN payments.date_post <
                                      master_reports_master_reports.begin_date
                        THEN payments.summa
                     ELSE 0
                  END
                 ) AS begin_summa,
                 
-- Оплаты на конец предыдущего периода
                 (CASE
                     WHEN payments.date_post >=
                                      master_reports_master_reports.begin_date
                     AND payments.date_post <=
                                        master_reports_master_reports.end_date
                        THEN payments.summa
                     ELSE 0
                  END
                 ) AS summa,
                 
-- Оплаты в течение текущего периода
                 (CASE
                     WHEN payments.date_post <=
                                        master_reports_master_reports.end_date
                        THEN payments.summa
                     ELSE 0
                  END
                 ) AS end_summa
            FROM payments, master_reports master_reports_master_reports
           WHERE NLS_UPPER (master_reports_master_reports.report_file) =
                                                          'UNP_FIN_BUDGET.XLS'
             AND master_reports_master_reports.terminal_name =
                                                   MASTER.for_init.getcurrterm
             AND master_reports_master_reports.osuser_name =
                                                   MASTER.for_init.getcurruser
          UNION ALL
          SELECT /*+
ORDERED */
                 pb.payments_id,
                 (CASE
                     WHEN p.date_post <
                                      master_reports_master_reports.begin_date
                     AND pb.date_realiz <
                                      master_reports_master_reports.begin_date
                        THEN -pb.summa
                     ELSE 0
                  END
                 ) AS begin_summa,           -- Реализация предыдущего периода
                 (CASE
                     WHEN p.date_post >=
                                      master_reports_master_reports.begin_date
                     AND p.date_post <= master_reports_master_reports.end_date
                        THEN -pb.summa
                     ELSE 0
                  END
                 ) AS summa,           -- Реализация на конец текущего периода
                 (CASE
                     WHEN p.date_post <=
                                        master_reports_master_reports.end_date
                        THEN -pb.summa
                     ELSE 0
                  END
                 ) AS end_summa
            FROM master_reports master_reports_master_reports,
                 payments_on_bills pb,
                 payments p
           WHERE pb.date_realiz <= master_reports_master_reports.end_date
             AND pb.payments_id = p.ID
             AND NLS_UPPER (master_reports_master_reports.report_file) =
                                                          'UNP_FIN_BUDGET.XLS'
             AND master_reports_master_reports.terminal_name =
                                                   MASTER.for_init.getcurrterm
             AND master_reports_master_reports.osuser_name =
                                                   MASTER.for_init.getcurruser) a,
         payments b,
         master_reports master_reports_master_reports
   WHERE a.ID = b.ID
     AND b.date_post <= master_reports_master_reports.end_date
     AND NLS_UPPER (master_reports_master_reports.report_file) =
                                                          'UNP_FIN_BUDGET.XLS'
     AND master_reports_master_reports.terminal_name =
                                                   MASTER.for_init.getcurrterm
     AND master_reports_master_reports.osuser_name =
                                                   MASTER.for_init.getcurruser
GROUP BY master_reports_master_reports.begin_date,
         master_reports_master_reports.end_date,
         b.dog_id
  HAVING SUM (a.begin_summa) > 0 OR SUM (a.summa) > 0 OR SUM (a.end_summa) > 0) A, KLS_DOG,KLS_PREDPR
WHERE A.DOG_ID=KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID=KLS_PREDPR.ID
GROUP BY
  A.begin_date,
  A.end_date,
  a.GROUP_ORDER,
  a.GROUP_NAME,
  KLS_PREDPR.SF_NAME;


--
-- V_UNP_GRAFIK_FACT_PAY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK_FACT_PAY
(DOG_ID, DATE_PLAT, SUMMA_PLAT)
AS 
SELECT   /*+ ORDERED */
         aa.dog_id, aa.date_plat, SUM (aa.summa_plat) AS summa_plat
    FROM (SELECT /*+ ORDERED USE_NL (c, a, b, bp, kls_dog) USE_HASH (kls_prod)*/
                                                        -- Разнесенные платежи
                 c.dog_id, c.date_post AS date_plat,
                                                   -- Фактическая дата платежа
                 a.summa AS summa_plat            -- Фактическая сумма платежа
            FROM v_temp_unp_garfik_params r,
                 payments c,
                 payments_on_bills a,
                 bill_pos bp,
                 bills b,
                 kls_dog,
                 kls_prod
           WHERE c.date_post BETWEEN r.begin_date AND LAST_DAY (r.end_date)
             AND c.ID = a.payments_id
             AND a.nom_dok = bp.nom_dok
             AND a.bill_pos_id = bp.bill_pos_id
             AND bp.nom_dok = b.nom_dok
             AND bp.prod_id_npr = kls_prod.id_npr
             AND kls_prod.id_group_npr >=
                             DECODE (r.grp_id_npr,
                                     '*', '00000',
                                     r.grp_id_npr
                                    )
             AND kls_prod.id_group_npr <=
                    DECODE (r.grp_id_npr,
                            '10100', '99999',
                            '*', '99999',
                            r.grp_id_npr
                           )
             AND b.dog_id = kls_dog.ID
             AND kls_dog.predpr_id =
                           DECODE (r.plat_id,
                                   0, kls_dog.predpr_id,
                                   r.plat_id
                                  )
             AND kls_dog.dog_number LIKE r.dog_number
             AND bp.is_luk = 1
          --
          UNION ALL
          --
          SELECT   /*+ ORDERED USE_NL (r_MASTER_REPORTS, b, a, kls_dog) INDEX (b PK_PAYMENTS) USE_HASH (b) USE_HASH (r_MASTER_REPORTS) USE_HASH (kls_dog)*/
-- Не разнесенные платежи
                   b.dog_id, b.date_post AS date_plat,         -- Дата платежа
                   SUM (a.summa) AS summa_plat                -- Сумма платежа
              FROM v_temp_unp_garfik_params r,
                   payments b,
                   (SELECT payments.ID, payments.summa
                      FROM payments
                    UNION ALL
                    SELECT payments_on_bills.payments_id,
                           -payments_on_bills.summa
                      FROM payments_on_bills) a,
                   kls_dog
             WHERE b.date_post BETWEEN r.begin_date AND LAST_DAY (r.end_date)
               AND r.grp_id_npr =
                               '*'
                                  -- Показывать, когда отбор по всем продуктам
               AND a.ID = b.ID
               AND b.dog_id = kls_dog.ID
               AND kls_dog.predpr_id =
                           DECODE (r.plat_id,
                                   0, kls_dog.predpr_id,
                                   r.plat_id
                                  )
               AND kls_dog.dog_number LIKE r.dog_number
          GROUP BY b.dog_id, b.date_post
            HAVING SUM (a.summa) > 0) aa
GROUP BY aa.dog_id, aa.date_plat;


--
-- V_UNP_GRAFIK_PLAN_PAY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK_PLAN_PAY
(DOG_ID, DATE_PLAT, SUMMA_PLAT)
AS 
SELECT   /*+ ORDERED */
         aa.dog_id, aa.date_plat, SUM (aa.summa_plat) AS summa_plat
    FROM (SELECT /*+ ORDERED INDEX (bp BILL_POS_NOM_DOK_2_I) USE_HASH (kls_prod)*/
                                                                      --Все СФ
                 b.dog_id, b.date_plat AS date_plat,
              -- Дата окончания отсрочки платежа (предполагаемая дата платежа)
                 bp.summa AS summa_plat             -- Ожидаемая сумма платежа
            FROM v_temp_unp_garfik_params r,
                 bills b,
                 bill_pos bp,
                 kls_dog,
                 kls_prod
           WHERE b.date_plat BETWEEN r.begin_date AND LAST_DAY (r.end_date)
             AND b.date_kvit >= TO_DATE ('01.01.2005', 'dd.mm.yyyy')
             AND bp.prod_id_npr = kls_prod.id_npr
             AND kls_prod.id_group_npr >=
                             DECODE (r.grp_id_npr,
                                     '*', '00000',
                                     r.grp_id_npr
                                    )
             AND kls_prod.id_group_npr <=
                    DECODE (r.grp_id_npr,
                            '10100', '99999',
                            '*', '99999',
                            r.grp_id_npr
                           )
             AND b.dog_id = kls_dog.ID
             AND kls_dog.predpr_id =
                           DECODE (r.plat_id,
                                   0, kls_dog.predpr_id,
                                   r.plat_id
                                  )
             AND kls_dog.dog_number LIKE r.dog_number
             AND b.nom_dok = bp.nom_dok
             AND bp.is_luk = 1
          --
          UNION ALL
          --
          SELECT /*+ ORDERED INDEX (p PAYMENTS_ON_BILLS_NOM_DOK_I) USE_HASH (kls_prod)*/
                                                          --Оплаты (с минусом)
                 b.dog_id, b.date_plat AS date_plat,
              -- Дата окончания отсрочки платежа (предполагаемая дата платежа)
                 -p.summa AS summa_plat                  -- Оплата (с минусом)
            FROM v_temp_unp_garfik_params r,
                 bills b,
                 bill_pos bp,
                 payments_on_bills p,
                 kls_dog,
                 kls_prod
           WHERE b.date_plat BETWEEN r.begin_date AND LAST_DAY (r.end_date)
             AND b.date_kvit >= TO_DATE ('01.01.2005', 'dd.mm.yyyy')
             AND bp.prod_id_npr = kls_prod.id_npr
             AND kls_prod.id_group_npr >=
                             DECODE (r.grp_id_npr,
                                     '*', '00000',
                                     r.grp_id_npr
                                    )
             AND kls_prod.id_group_npr <=
                    DECODE (r.grp_id_npr,
                            '10100', '99999',
                            '*', '99999',
                            r.grp_id_npr
                           )
             AND b.dog_id = kls_dog.ID
             AND kls_dog.predpr_id =
                           DECODE (r.plat_id,
                                   0, kls_dog.predpr_id,
                                   r.plat_id
                                  )
             AND kls_dog.dog_number LIKE r.dog_number
             AND b.nom_dok = bp.nom_dok
             AND bp.nom_dok = p.nom_dok
             AND bp.bill_pos_id = p.bill_pos_id
             AND bp.is_luk = 1
          --
          UNION ALL
          --
          SELECT /*+ ORDERED INDEX (a PAYMENTS_ON_BILLS_NOM_DOK_I)*/
                                                               --Оплаченные СФ
                 b.dog_id,
--    c.DATE_POST as date_plat, -- фактическая дата платежа
                          b.date_plat AS date_plat,
                                                -- Предполагаемая дата платежа
                 a.summa AS summa_plat            -- Фактическая сумма платежа
            FROM v_temp_unp_garfik_params r,
                 bills b,
                 bill_pos bp,
                 payments_on_bills a,
                 payments c,
                 kls_dog,
                 kls_prod
           WHERE b.nom_dok = bp.nom_dok
             AND bp.nom_dok = a.nom_dok
             AND bp.bill_pos_id = a.bill_pos_id
             AND a.payments_id = c.ID
             AND b.date_kvit >= TO_DATE ('01.01.2005', 'dd.mm.yyyy')
             AND b.date_plat BETWEEN r.begin_date AND LAST_DAY (r.end_date)
--    AND c.DATE_POST BETWEEN r.BEGIN_DATE AND r.END_DATE
             AND bp.prod_id_npr = kls_prod.id_npr
             AND kls_prod.id_group_npr >=
                             DECODE (r.grp_id_npr,
                                     '*', '00000',
                                     r.grp_id_npr
                                    )
             AND kls_prod.id_group_npr <=
                    DECODE (r.grp_id_npr,
                            '10100', '99999',
                            '*', '99999',
                            r.grp_id_npr
                           )
             AND b.dog_id = kls_dog.ID
             AND kls_dog.predpr_id =
                           DECODE (r.plat_id,
                                   0, kls_dog.predpr_id,
                                   r.plat_id
                                  )
             AND kls_dog.dog_number LIKE r.dog_number
             AND bp.is_luk = 1) aa
GROUP BY aa.dog_id, aa.date_plat;


--
-- V_UNP_GRAFIK_PRED_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK_PRED_SF
(DOG_ID, DATE_PRED, SUMMA_PRED)
AS 
SELECT   /*+ ORDERED INDEX (b BILLS_DATE_KVIT) USE_NL (b, bp, kls_dog) INDEX (bp BILL_POS_NOM_DOK_2_I)
*/
         b.dog_id, b.date_kvit AS date_pred,
-- Дата предъявления (дата квитанции)
                                            SUM (bp.summa) AS summa_pred
    FROM master_reports r_master_reports,
         bills b,
         bill_pos bp,
         kls_dog,
         kls_prod
   WHERE b.date_kvit BETWEEN r_master_reports.begin_date
                         AND LAST_DAY (r_master_reports.end_date)
     AND b.nom_dok = bp.nom_dok
     AND bp.prod_id_npr = kls_prod.id_npr
     AND kls_prod.id_group_npr >=
            DECODE (r_master_reports.grp_id_npr,
                    '*', '00000',
                    r_master_reports.grp_id_npr
                   )
     AND kls_prod.id_group_npr <=
            DECODE (r_master_reports.grp_id_npr,
                    '10100', '99999',
                    '*', '99999',
                    r_master_reports.grp_id_npr
                   )
     AND bp.is_luk = 1
     AND b.dog_id = kls_dog.ID
     AND kls_dog.predpr_id =
            DECODE (r_master_reports.plat_id,
                    0, kls_dog.predpr_id,
                    r_master_reports.plat_id
                   )
     AND kls_dog.dog_number LIKE r_master_reports.dog_number
     AND NLS_UPPER (TRIM (r_master_reports.report_file)) =
                                                         'UNP_GRAFIK_PLAT.XLS'
     AND r_master_reports.terminal_name = MASTER.for_init.getcurrterm
     AND r_master_reports.osuser_name = MASTER.for_init.getcurruser
GROUP BY b.dog_id, b.date_kvit;


--
-- V_UNP_GRAFIK_PROSR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK_PROSR
(DOG_ID, DATE_PLAT, SUMMA_PLAT)
AS 
SELECT /* RULE */
  aa.dog_id,
  aa.date_plat,
  SUM(aa.summa_plat) as summa_plat
FROM
(
  SELECT /*+ ORDERED USE_NL (c, a, b, bp, kls_dog) USE_HASH (kls_prod) */ -- Разнесенные платежи
    c.dog_id,
    r.BEGIN_DATE-1 as date_plat, -- Фактическая дата платежа
    SUM(-a.SUMMA) AS summa_plat -- Фактическая сумма платежа
  FROM V_TEMP_UNP_GARFIK_PARAMS r, payments c, payments_on_bills a, bill_pos bp, bills b, kls_dog, kls_prod
  WHERE c.DATE_POST<r.BEGIN_DATE
    AND c.ID=a.PAYMENTS_ID
    AND a.NOM_DOK=bp.nom_dok
 AND a.BILL_POS_ID=bp.BILL_POS_ID
 AND bp.NOM_DOK=b.NOM_DOK
 AND bp.PROD_ID_NPR=KLS_PROD.ID_NPR
    AND kls_prod.ID_GROUP_NPR>=DECODE(r.GRP_ID_NPR,'*','00000',r.GRP_ID_NPR)
    AND kls_prod.ID_GROUP_NPR<=DECODE(r.GRP_ID_NPR,'10100','99999','*','99999',r.GRP_ID_NPR)
    AND b.dog_id=kls_dog.id
    AND kls_dog.predpr_id=DECODE(r.PLAT_ID,0,kls_dog.predpr_id,r.PLAT_ID)
    AND kls_dog.dog_number like r.DOG_NUMBER
 AND bp.IS_LUK+0=1
  GROUP BY
    c.dog_id,
    r.BEGIN_DATE-1
  --
  UNION ALL
  --
  SELECT /*+ ORDERED USE_HASH (kls_dog)  */ -- Не разнесенные платежи
    b.dog_id,
    r.BEGIN_DATE-1 as date_plat, -- Дата платежа
    sum(-a.summa) as summa_plat -- Сумма платежа
  FROM V_TEMP_UNP_GARFIK_PARAMS r, payments b,
    (
     SELECT
       payments.ID,
       payments.SUMMA
     FROM payments
     UNION ALL
     SELECT
       payments_on_bills.PAYMENTS_ID,
       -payments_on_bills.SUMMA
     FROM payments_on_bills
    ) a, kls_dog
  WHERE b.DATE_POST<r.BEGIN_DATE
    AND r.GRP_ID_NPR='*' -- Показывать, когда отбор по всем продуктам
    AND a.id=b.id
    AND b.dog_id=kls_dog.id
    AND kls_dog.predpr_id=DECODE(r.PLAT_ID,0,kls_dog.predpr_id,r.PLAT_ID)
    AND kls_dog.dog_number like r.DOG_NUMBER
  GROUP BY b.dog_id,r.BEGIN_DATE-1
  --
  UNION ALL
  --
  SELECT /*+ ORDERED INDEX (b BILLS_DATE_PLAT_I) USE_HASH (kls_prod) */ -- Счета-фактуры
    b.dog_id,
    r.BEGIN_DATE-1 as date_plat, -- Ожидаемая дата платежа
    SUM(bp.summa) AS summa_plat -- Ожидаемая сумма платежа
  FROM V_TEMP_UNP_GARFIK_PARAMS r, bills b, bill_pos bp,  kls_dog, kls_prod
  WHERE b.DATE_PLAT >= TO_DATE('01.01.2005','dd.mm.yyyy')
    AND b.DATE_PLAT < r.BEGIN_DATE
 AND bp.NOM_DOK=b.NOM_DOK
 AND bp.PROD_ID_NPR=KLS_PROD.ID_NPR
    AND kls_prod.ID_GROUP_NPR>=r.FROM_GRP_ID
    AND kls_prod.ID_GROUP_NPR<=r.TO_GRP_ID
    AND b.dog_id=kls_dog.id
    AND kls_dog.predpr_id=(CASE WHEN r.PLAT_ID=0 THEN kls_dog.predpr_id ELSE r.PLAT_ID END)
    AND kls_dog.dog_number like r.DOG_NUMBER
 AND bp.IS_LUK+0=1
  GROUP BY
    b.dog_id,
    r.BEGIN_DATE-1
) aa
GROUP BY
  aa.dog_id,
  aa.date_plat
HAVING sum(aa.summa_plat)<>0;


--
-- V_USER_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_USER_BILLS
(NOM_DOK, BILL_POS_ID, NOM_SF, DATE_VYP_SF, DATE_KVIT, 
 DATE_BUXG, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, 
 PRIM, FIO_ISPOL, KOL_DN, OLD_NOM_DOK, NOM_ZD, 
 OWNER_ID, DOG_ID, USL_NUMBER, PROD_ID_NPR, PROD_SUM, 
 PROD_NDS, PROD_GSM, PROD_AKCIZ, DATE_MOS, NPO_SF, 
 OLD_NOM_SF, IS_AGENT, NUM_5_DAY, LUK_DOG_ID, LUK_USL_NUMBER, 
 LUK_SUMMA_DOK, LUK_NDS_DOK, SNP_DOG_ID, SNP_USL_NUMBER, LUK_KOL_DN, 
 SNP_KOL_DN, NAZN_OTG_ID, KORR_5_DAY, PROTO_NUM, PROTO_DATE, 
 NO_AKCIZ, KORR_PROD, DATE_PLAT)
AS 
SELECT /*+  */
  A.NOM_DOK,
  NVL(B.BILL_POS_ID,0) as BILL_POS_ID,
  A.NOM_SF, A.DATE_VYP_SF, A.DATE_KVIT, A.DATE_BUXG,
  NVL(B.SUMMA_DOK,A.SUMMA_DOK) as SUMMA_DOK,
  NVL(B.NDS_DOK,A.NDS_DOK) as NDS_DOK,
  NVL(B.GSM_DOK,A.GSM_DOK) as GSM_DOK,
  NVL(B.AKCIZ_DOK,A.AKCIZ_DOK) as AKCIZ_DOK,
  A.PRIM, A.FIO_ISPOL, A.KOL_DN, A.OLD_NOM_DOK, A.NOM_ZD, A.OWNER_ID, A.DOG_ID, A.USL_NUMBER,
  NVL(B.PROD_ID_NPR,A.PROD_ID_NPR) as PROD_ID_NPR,
  NVL(B.PROD_SUM,A.PROD_SUM) as PROD_SUM,
  NVL(B.PROD_NDS,A.PROD_NDS) as PROD_NDS,
  NVL(B.PROD_GSM,A.PROD_GSM) as PROD_GSM,
  NVL(B.PROD_AKCIZ,A.PROD_AKCIZ) as PROD_AKCIZ,
  A.DATE_MOS, A.NPO_SF, A.OLD_NOM_SF, A.IS_AGENT, A.NUM_5_DAY, A.LUK_DOG_ID, A.LUK_USL_NUMBER,
  NVL(B.LUK_SUMMA_DOK,A.LUK_SUMMA_DOK) as LUK_SUMMA_DOK,
  NVL(B.LUK_NDS_DOK,A.LUK_NDS_DOK) as LUK_NDS_DOK,
  A.SNP_DOG_ID, A.SNP_USL_NUMBER, A.LUK_KOL_DN, A.SNP_KOL_DN, A.NAZN_OTG_ID, A.KORR_5_DAY, A.PROTO_NUM, A.PROTO_DATE,
  A.NO_AKCIZ, A.KORR_PROD, A.DATE_PLAT
FROM BILLS A,
(
 SELECT /*+  Счета ЛУКОЙЛу с 2005 года */
  AA.NOM_DOK, BB.BILL_POS_ID,
  BB.SUMMA as SUMMA_DOK, BB.SUMMA_NDS20 as NDS_DOK, BB.SUMMA_GSM25 as GSM_DOK, BB.SUMMA_AKCIZ as AKCIZ_DOK,
  BB.PROD_ID_NPR, BB.SUMMA as PROD_SUM, BB.SUMMA_NDS20 as PROD_NDS, BB.SUMMA_GSM25 as PROD_GSM, BB.SUMMA_AKCIZ as PROD_AKCIZ,
  BB.SUMMA as LUK_SUMMA_DOK, BB.SUMMA_NDS20 as LUK_NDS_DOK
 FROM BILLS AA,BILL_POS BB
 WHERE AA.NOM_DOK=BB.NOM_DOK
   AND AA.PROD_ID_NPR='10080'
) B
WHERE A.NOM_DOK=B.NOM_DOK(+);


--
-- V_VANEEV_TOKILL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VANEEV_TOKILL
(NAME_1, NAME_NPR, DATE_OPER, VES, SUMMA, 
 OST)
AS 
SELECT
  NAME_1,
  NAME_NPR,
  DATE_OPER,
  SUM(DECODE(name_oper,'РЕАЛИЗАЦИЯ',ves,0)) AS ves,
  SUM(DECODE(name_oper,'РЕАЛИЗАЦИЯ',summa,0)) AS summa,
  SUM(DECODE(name_oper,'ОСТАТОК',ves,0)) AS ost   
 FROM
(
SELECT   azc_operation.*, azc_operation.ID AS id_,
         azc_type_operation.NAME AS name_oper, azc_type_operation.kind_oper,
         org_structure.NAME AS name_1, azc_place_send.NAME AS name_2,
         kls_prod.name_npr, kls_prod.azc_pr_grp_id, kls_predpr.short_name,
         org_relations.org_stru_2_id, kls_cat_cen.for_azc,
         azc_prod_group.note_
    FROM azc_operation,
         azc_type_operation,
         org_structure,
         kls_cat_cen,
         azc_prod_group,
         azc_place_send,
         kls_prod,
         kls_predpr,
         org_relations
   WHERE azc_type_operation.ID = azc_operation.type_oper_id
     AND azc_operation.org_stru_id = org_structure.ID
     AND azc_operation.discount = kls_cat_cen.ID
     AND azc_operation.place_send_id = azc_place_send.ID
     AND kls_prod.azc_pr_grp_id = azc_prod_group.ID
     AND azc_operation.prod_id_npr = kls_prod.id_npr
     AND azc_operation.sobstv_id = kls_predpr.ID
     AND org_structure.ID = org_relations.org_stru_1_id
     AND (azc_type_operation.kind_oper in (0,3,2,5)
         )
     AND azc_operation.date_oper <= TO_DATE ('30.06.2004', 'dd-mm-yyyy')
     AND azc_operation.date_oper >= TO_DATE ('01.01.2004', 'dd-mm-yyyy')
     AND EXISTS (
            SELECT NULL
              FROM org_relations a
             WHERE a.org_stru_1_id = azc_operation.org_stru_id
               AND a.org_stru_2_id = 32)
--ORDER BY azc_operation.org_stru_id DESC
)
GROUP BY   
  NAME_1,
  NAME_NPR,
  DATE_OPER
  ORDER BY
    NAME_1,
  NAME_NPR,
  DATE_OPER;


--
-- V_1FIPP_NORMATIV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1FIPP_NORMATIV
(DOG_NUMBER, DATE_PLAN, PLAN_PLAT)
AS 
SELECT
  dog_number,
  date_plan,
  SUM(plan_plat) AS plan_plat
FROM
(
SELECT 
  kls_dog.DOG_NUMBER,
  bills.date_kvit+bills.KOL_DN AS date_plan,
  bills.summa_dok AS plan_plat
  FROM bills,kls_dog WHERE kls_dog.id=bills.dog_id AND kls_dog.LUKDOG_ID=793 
) 
GROUP BY
  dog_number,
  date_plan;


--
-- V_1FIPP_NORMATIV_NFP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1FIPP_NORMATIV_NFP
(DOG_NUMBER, DATE_PLAN, PLAN_PLAT)
AS 
SELECT
  dog_number,
  date_plan,
  SUM(plan_plat) AS plan_plat
FROM
(
SELECT 
  kls_dog.DOG_NUMBER,
  bills.date_kvit+bills.KOL_DN AS date_plan,
  v_bill_pos.summa AS plan_plat
  FROM bills,kls_dog,v_bill_pos WHERE kls_dog.id=bills.dog_id AND kls_dog.LUKDOG_ID=793 and v_bill_pos.nom_dok=bills.nom_dok and v_bill_pos.PROD_ID_NPR>10300 
) 
GROUP BY
  dog_number,
  date_plan;


--
-- XX101_ACTIVE_KLS_PREDPR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.XX101_ACTIVE_KLS_PREDPR
(ID, PREDPR_NAME, SHORT_NAME, INN, POSTINDEX_J, 
 POSTINDEX_P, CITY_P, CITY_J, ADDRESS_P, ADDRESS_J, 
 OKONH, OKPO, EMAIL, FAX, PHONE, 
 BANK_KORS, REGION_ID, HOLDING_ID, PERTYPE_ID, TALGAR_ID, 
 GD_KOD, RS, BANKS_ID, STATES_ID, CLASS_ID, 
 EX_SVID, IS_BLOCK, OKVED, TAG, OGRN, 
 KSSS_PREDPR_ID, UNP_ID, KPP, REGION_P_ID, SF_NAME, 
 ISU_KOD_PLAT, FULL_ADDRESS_P, FULL_ADDRESS_J, LIFNR)
AS 
select "ID","PREDPR_NAME","SHORT_NAME","INN","POSTINDEX_J","POSTINDEX_P","CITY_P","CITY_J","ADDRESS_P","ADDRESS_J","OKONH","OKPO","EMAIL","FAX","PHONE","BANK_KORS","REGION_ID","HOLDING_ID","PERTYPE_ID","TALGAR_ID","GD_KOD","RS","BANKS_ID","STATES_ID","CLASS_ID","EX_SVID","IS_BLOCK","OKVED","TAG","OGRN","KSSS_PREDPR_ID","UNP_ID","KPP","REGION_P_ID","SF_NAME","ISU_KOD_PLAT","FULL_ADDRESS_P","FULL_ADDRESS_J","LIFNR" from kls_predpr a
where a.is_block<>1 
and a.id in
(
select id from
(
select ksss_predpr_id,max(id) as id from kls_predpr b 
where b.is_block<>1 or b.id in (select distinct predpr_id from kls_dog)
group by ksss_predpr_id
)
);


--
-- XX101_ZVZAV_TO_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.XX101_ZVZAV_TO_MONTH
(FILENAME, PARSEDATETIME, PROPAGATESTATUS, FILEROWNUM, ACTIONCODE, 
 PLAT_ID, POLUCH_ID, POTREB_ID, PROD_ID_NPR, PROD_GU12_ID, 
 DOG_ID, USL_NUMBER, USL_OPL_ID, VES, KOL, 
 DATE_PLAN, IS_EXP, TRANSPORT, PRIM, LOAD_ABBR, 
 STAN_ID, VETKA_NAME, CAT_CEN_ID, DATE_CENA, CENA, 
 CENA_OTP, NAZN_OTG_ID, SUM_ZD, DOC302_ID, BEGIN_DATE, 
 UPDATE_DATE, UPDATE_TIME, GR4, TEX_PD_ID, PLATTARIF_ID, 
 PLANSTRU_ID, STANOTP_ID, NOM_ETRAN, EXPED_ID, LINK_ID, 
 LINK_HIST_ID, INPUT_NUM, INPUT_DATE, DOC301_ID, RODVAG_ID, 
 GR_GRUZ_ID, MEASUREUNIT)
AS 
SELECT
  filename,PARSEDATETIME,PROPAGATESTATUS,filerownum,z.ACTIONCODE,
  plat.ID AS plat_id,
  poluch.ID AS poluch_id,
  NVL(potreb.ID,poluch.ID) AS potreb_id,
  prod.ID_NPR AS prod_id_npr,
  prod.PROD_GU12_ID,
  d.id AS dog_id,
  u_d.USL_NUMBER,
  d.USL_OPL_ID,
  z.ORDERWEIGHT AS ves,
  FLOOR(z.ORDERWEIGHT/DECODE(NVL(prod.NORMOTGR,0),0,55,prod.NORMOTGR)) AS kol,
  TRUNC(ADD_MONTHS(z.begindate,0),'month') AS date_plan,
  DECODE(z.DELIVERYDIRECTION,1,1,0) AS is_exp,
  '' AS transport,
  z.REMARKTEXT AS prim,
  (CASE
     WHEN z.shipmentkindcode='01' THEN 'САМ'
     WHEN z.shipmentkindcode='03' AND z.VAGONSOWNERSHIPCODE='0001' THEN 'МПС'
     WHEN z.shipmentkindcode='03' AND z.VAGONSOWNERSHIPCODE='0003' THEN 'КЛИ'
     WHEN z.shipmentkindcode='03' AND z.VAGONSOWNERSHIPCODE='0004' THEN 'ЛТР'
     ELSE 'ПОС'
   END) AS load_abbr,
  (CASE
     WHEN z.shipmentkindcode='01' THEN 2595
     ELSE s.ID
   END) AS stan_id,
  SUBSTR(NLS_UPPER(z.UNLOADINGSTATIONNAME),1,50) AS vetka_name,
  u_d.cat_cen_id ,
  ADD_MONTHS(z.begindate,0) AS date_cena,
  Ora_Val(z.price) AS cena,
  ora_val(z.price)*1.18 AS cena_otp,
  DECODE(z.DELIVERYDIRECTION,1,5,1) AS nazn_otg_id,
  NVL(Ora_Val(z.price),0)*NVL(z.PLANWEIGHT,0) AS sum_zd,
  z.ORDERNUM AS doc302_id,
  ADD_MONTHS(z.begindate,0) AS begin_date,
  ADD_MONTHS(z.begindate,0) AS update_date,
  '00:00:00' AS update_time,
  z.senderspecialmark AS gr4,
  --nvl(tpd.kod_tex_pd,0) as kod_tex_pd,
  7247252 AS tex_pd_id,
  (SELECT NVL(plattarif_id,0) FROM KLS_TEX_PD WHERE KLS_TEX_PD.ID=7247252 AND KLS_TEX_PD.GROTP_ID=4175) AS plattarif_id,
  ps.ID AS PLANSTRU_ID,
  s_o.ID AS stanotp_id,
  z.NUMOFETRANSYSTEM AS NOM_ETRAN,
  ex.predpr_id AS exped_id,
  (SELECT DISTINCT zakaz_id FROM ZAKAZ_HIST WHERE id=TO_NUMBER(z.NPOORDERID)) AS LINK_ID,
  z.NPOORDERID AS LINK_HIST_id,
  z.SUPPLYORDERNUM AS INPUT_NUM,
  ADD_MONTHS(z.SUPPLYORDERDATE,0) AS INPUT_DATE,
  z.SHIPMENTREQUESTID AS doc301_id,
  pgu12.gd_vagtype_id AS rodvag_id,
  pgu12.gd_group_id AS gr_gruz_id,z.measureunit
FROM
  XX101_ZVZAV_DATA z, KLS_STAN s_o,
  KLS_STAN s,
  (SELECT isu_kod_dog, dog_id, MAX(usl_number) AS usl_number, MAX(cat_cen_id) AS cat_cen_id FROM USL_DOG GROUP BY isu_kod_dog, dog_id) u_d,
  KLS_DOG d, KLS_PREDPR plat,
  XX101_ACTIVE_KLS_PREDPR poluch, XX101_ACTIVE_KLS_PREDPR potreb,
  (select * from KLS_PROD where id_npr<='90000')  prod, KLS_PROD_GU12 pgu12,
  --(select p.id, t.id as kod_tex_pd, p.KSSS_PREDPR_ID from kls_tex_pd t, kls_predpr p where t.plattarif_id=p.id and t.grotp_id=4175 and t.id<>0) tpd
  KLS_PLANSTRU ps,
  (SELECT predpr_id,kod_isu FROM PREDPR_ROLE WHERE kls_role_id=3) ex
WHERE z.SOURCESTATIONCODE=s_o.ksss_stan_id (+)
  AND z.DESTINATIONSTATIONCODE=s.ksss_stan_id (+)
  AND REPLACE(DECODE(z.CONTRACT,'A200707804  000','УНП',z.contract),' ','')=u_d.isu_kod_dog (+)
  AND u_d.dog_id=d.id (+)
  AND d.predpr_id=plat.id (+)
  AND z.PRODUCTRECIPIENTKSSSCODE=poluch.KSSS_PREDPR_ID(+)
  AND z.CONSUMERKSSSCODE=potreb.KSSS_PREDPR_ID(+)
  AND z.PRODUCTKSSSCODE=prod.KSSS_prod_id(+)
  AND prod.PROD_GU12_ID=pgu12.ID(+)
  --and z.TARIFFPAYERKSSSCODE=tpd.ksss_predpr_id(+)
  AND z.PLANNINGGROUPSHIERARCHY=ps.ISU_KOD(+)
  AND z.FORWARDERKSSSCODE=ex.KOD_ISU(+)
  --and z.ordernum in (3020085711);
;


--
-- T_GD_RAZN_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T_GD_RAZN_ID
BEFORE INSERT
ON MASTER.GD_RAZN
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

   IF :NEW.ID IS NULL OR :NEW.ID = 0
   THEN
      SELECT seq_gd_razn.NEXTVAL
        INTO tmpvar
        FROM DUAL;

      :NEW.ID := tmpvar;
   END IF;

END T_GD_RAZN_ID;
/


--
-- TRG_AIUDR_KLS_DOG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_DOG
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.KLS_DOG
FOR EACH ROW
DECLARE
  v_old KLS_DOG%ROWTYPE;
  v_new KLS_DOG%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DOG_NUMBER := :OLD.DOG_NUMBER;
    v_old.SHORT_NUMBER := :OLD.SHORT_NUMBER;
    v_old.DOG_BEGIN_DATE := :OLD.DOG_BEGIN_DATE;
    v_old.DOG_END_DATE := :OLD.DOG_END_DATE;
    v_old.DOG_DATE := :OLD.DOG_DATE;
    v_old.DOG_YEAR := :OLD.DOG_YEAR;
    v_old.REP_KOD := :OLD.REP_KOD;
    v_old.PREDPR_ID := :OLD.PREDPR_ID;
    v_old.INSURE_ID := :OLD.INSURE_ID;
    v_old.VIDDOG_ID := :OLD.VIDDOG_ID;
    v_old.GROUPDOG_ID := :OLD.GROUPDOG_ID;
    v_old.GOSPROG_ID := :OLD.GOSPROG_ID;
    v_old.LUKDOG_ID := :OLD.LUKDOG_ID;
    v_old.USL_OPL_ID := :OLD.USL_OPL_ID;
    v_old.SALDO_01042002 := :OLD.SALDO_01042002;
    v_old.SALDO_01042002_PROD := :OLD.SALDO_01042002_PROD;
    v_old.MAINDOG_ID := :OLD.MAINDOG_ID;
    v_old.SALDO_01072002 := :OLD.SALDO_01072002;
    v_old.SALDO_01_07_2002 := :OLD.SALDO_01_07_2002;
    v_old.APPL_TAG := :OLD.APPL_TAG;
    v_old.SALDO_01122002 := :OLD.SALDO_01122002;
    v_old.IS_AGENT := :OLD.IS_AGENT;
    v_old.AGENT_ID := :OLD.AGENT_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
    DELETE FROM MASTER_SHADOW.KLS_DOG_SHADOW
     WHERE ID=v_old.ID;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DOG_NUMBER := :NEW.DOG_NUMBER;
    v_new.SHORT_NUMBER := :NEW.SHORT_NUMBER;
    v_new.DOG_BEGIN_DATE := :NEW.DOG_BEGIN_DATE;
    v_new.DOG_END_DATE := :NEW.DOG_END_DATE;
    v_new.DOG_DATE := :NEW.DOG_DATE;
    v_new.DOG_YEAR := :NEW.DOG_YEAR;
    v_new.REP_KOD := :NEW.REP_KOD;
    v_new.PREDPR_ID := :NEW.PREDPR_ID;
    v_new.INSURE_ID := :NEW.INSURE_ID;
    v_new.VIDDOG_ID := :NEW.VIDDOG_ID;
    v_new.GROUPDOG_ID := :NEW.GROUPDOG_ID;
    v_new.GOSPROG_ID := :NEW.GOSPROG_ID;
    v_new.LUKDOG_ID := :NEW.LUKDOG_ID;
    v_new.USL_OPL_ID := :NEW.USL_OPL_ID;
    v_new.SALDO_01042002 := :NEW.SALDO_01042002;
    v_new.SALDO_01042002_PROD := :NEW.SALDO_01042002_PROD;
    v_new.MAINDOG_ID := :NEW.MAINDOG_ID;
    v_new.SALDO_01072002 := :NEW.SALDO_01072002;
    v_new.SALDO_01_07_2002 := :NEW.SALDO_01_07_2002;
    v_new.APPL_TAG := :NEW.APPL_TAG;
    v_new.SALDO_01122002 := :NEW.SALDO_01122002;
    v_new.IS_AGENT := :NEW.IS_AGENT;
    v_new.AGENT_ID := :NEW.AGENT_ID;

    -- Обновление теневой таблицы
    UPDATE MASTER_SHADOW.KLS_DOG_SHADOW SET
      (ID,DOG_NUMBER,SHORT_NUMBER,DOG_BEGIN_DATE,DOG_END_DATE,DOG_DATE,DOG_YEAR,REP_KOD,PREDPR_ID,INSURE_ID,VIDDOG_ID,GROUPDOG_ID,GOSPROG_ID,LUKDOG_ID,USL_OPL_ID,SALDO_01042002,SALDO_01042002_PROD,MAINDOG_ID,SALDO_01072002,SALDO_01_07_2002,APPL_TAG,SALDO_01122002,IS_AGENT,AGENT_ID)=
      (SELECT v_new.ID,v_new.DOG_NUMBER,v_new.SHORT_NUMBER,v_new.DOG_BEGIN_DATE,v_new.DOG_END_DATE,v_new.DOG_DATE,v_new.DOG_YEAR,v_new.REP_KOD,v_new.PREDPR_ID,v_new.INSURE_ID,v_new.VIDDOG_ID,v_new.GROUPDOG_ID,v_new.GOSPROG_ID,v_new.LUKDOG_ID,v_new.USL_OPL_ID,v_new.SALDO_01042002,v_new.SALDO_01042002_PROD,v_new.MAINDOG_ID,v_new.SALDO_01072002,v_new.SALDO_01_07_2002,v_new.APPL_TAG,v_new.SALDO_01122002,v_new.IS_AGENT,v_new.AGENT_ID FROM dual)
      WHERE ID=v_old.ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.KLS_DOG_SHADOW
        (ID,DOG_NUMBER,SHORT_NUMBER,DOG_BEGIN_DATE,DOG_END_DATE,DOG_DATE,DOG_YEAR,REP_KOD,PREDPR_ID,INSURE_ID,VIDDOG_ID,GROUPDOG_ID,GOSPROG_ID,LUKDOG_ID,USL_OPL_ID,SALDO_01042002,SALDO_01042002_PROD,MAINDOG_ID,SALDO_01072002,SALDO_01_07_2002,APPL_TAG,SALDO_01122002,IS_AGENT,AGENT_ID)
        VALUES
        (v_new.ID,v_new.DOG_NUMBER,v_new.SHORT_NUMBER,v_new.DOG_BEGIN_DATE,v_new.DOG_END_DATE,v_new.DOG_DATE,v_new.DOG_YEAR,v_new.REP_KOD,v_new.PREDPR_ID,v_new.INSURE_ID,v_new.VIDDOG_ID,v_new.GROUPDOG_ID,v_new.GOSPROG_ID,v_new.LUKDOG_ID,v_new.USL_OPL_ID,v_new.SALDO_01042002,v_new.SALDO_01042002_PROD,v_new.MAINDOG_ID,v_new.SALDO_01072002,v_new.SALDO_01_07_2002,v_new.APPL_TAG,v_new.SALDO_01122002,v_new.IS_AGENT,v_new.AGENT_ID);
    END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_KLS_PLAN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_PLAN
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PLAN
FOR EACH ROW
DECLARE
  v_old KLS_PLAN%ROWTYPE;
  v_new KLS_PLAN%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_NAME := :OLD.PLAN_NAME;
    v_old.PLAN_KIND_ID := :OLD.PLAN_KIND_ID;
    v_old.BROTHER_ID := :OLD.BROTHER_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
    DELETE FROM MASTER_SHADOW.KLS_PLAN_SHADOW
     WHERE ID=v_old.ID;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_NAME := :NEW.PLAN_NAME;
    v_new.PLAN_KIND_ID := :NEW.PLAN_KIND_ID;
    v_new.BROTHER_ID := :NEW.BROTHER_ID;

    -- Обновление теневой таблицы
    UPDATE MASTER_SHADOW.KLS_PLAN_SHADOW SET
      (ID,PLAN_NAME,PLAN_KIND_ID,BROTHER_ID)=
      (SELECT v_new.ID,v_new.PLAN_NAME,v_new.PLAN_KIND_ID,v_new.BROTHER_ID FROM dual)
      WHERE ID=v_old.ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.KLS_PLAN_SHADOW
        (ID,PLAN_NAME,PLAN_KIND_ID,BROTHER_ID)
        VALUES
        (v_new.ID,v_new.PLAN_NAME,v_new.PLAN_KIND_ID,v_new.BROTHER_ID);
    END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_LOAD_FIL_ORG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_LOAD_FIL_ORG
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_ORG
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_ORG%ROWTYPE;
  v_new LOAD_FIL_ORG%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.TAG := :OLD.TAG;
    v_old.NAME := :OLD.NAME;
    v_old.ORG_KIND_ID := :OLD.ORG_KIND_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.TAG := :NEW.TAG;
    v_new.NAME := :NEW.NAME;
    v_new.ORG_KIND_ID := :NEW.ORG_KIND_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_LOAD_FIL_PERIODS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_LOAD_FIL_PERIODS
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_PERIODS
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_PERIODS%ROWTYPE;
  v_new LOAD_FIL_PERIODS%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.FILIAL_ID := :OLD.FILIAL_ID;
    v_old.DATE_REPORT := :OLD.DATE_REPORT;
    v_old.FILENAME := :OLD.FILENAME;
    v_old.DATE_LOAD := :OLD.DATE_LOAD;
    v_old.USER_LOAD := :OLD.USER_LOAD;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.FILIAL_ID := :NEW.FILIAL_ID;
    v_new.DATE_REPORT := :NEW.DATE_REPORT;
    v_new.FILENAME := :NEW.FILENAME;
    v_new.DATE_LOAD := :NEW.DATE_LOAD;
    v_new.USER_LOAD := :NEW.USER_LOAD;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_LOAD_FIL_REALIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_LOAD_FIL_REALIZ
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_REALIZ
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_REALIZ%ROWTYPE;
  v_new LOAD_FIL_REALIZ%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.FILIAL_ID := :OLD.FILIAL_ID;
    v_old.FIL_PERIOD_ID := :OLD.FIL_PERIOD_ID;
    v_old.FIL_ORG_ID := :OLD.FIL_ORG_ID;
    v_old.FIL_PROD_ID := :OLD.FIL_PROD_ID;
    v_old.FACT := :OLD.FACT;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.FILIAL_ID := :NEW.FILIAL_ID;
    v_new.FIL_PERIOD_ID := :NEW.FIL_PERIOD_ID;
    v_new.FIL_ORG_ID := :NEW.FIL_ORG_ID;
    v_new.FIL_PROD_ID := :NEW.FIL_PROD_ID;
    v_new.FACT := :NEW.FACT;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PAYMENTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PAYMENTS
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.PAYMENTS
FOR EACH ROW
DECLARE
  v_old PAYMENTS%ROWTYPE;
  v_new PAYMENTS%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.BANK_ID := :OLD.BANK_ID;
    v_old.RS := :OLD.RS;
    v_old.SUMMA := :OLD.SUMMA;
    v_old.NAZN_PLAT := :OLD.NAZN_PLAT;
    v_old.OURBANK_ID := :OLD.OURBANK_ID;
    v_old.NUM_PLAT := :OLD.NUM_PLAT;
    v_old.DATE_PLAT := :OLD.DATE_PLAT;
    v_old.PAYFORM_ID := :OLD.PAYFORM_ID;
    v_old.DATE_POST := :OLD.DATE_POST;
    v_old.DEST_ID := :OLD.DEST_ID;
    v_old.RS_ID := :OLD.RS_ID;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'PAYMENTS',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.BANK_ID := :NEW.BANK_ID;
    v_new.RS := :NEW.RS;
    v_new.SUMMA := :NEW.SUMMA;
    v_new.NAZN_PLAT := :NEW.NAZN_PLAT;
    v_new.OURBANK_ID := :NEW.OURBANK_ID;
    v_new.NUM_PLAT := :NEW.NUM_PLAT;
    v_new.DATE_PLAT := :NEW.DATE_PLAT;
    v_new.PAYFORM_ID := :NEW.PAYFORM_ID;
    v_new.DATE_POST := :NEW.DATE_POST;
    v_new.DEST_ID := :NEW.DEST_ID;
    v_new.RS_ID := :NEW.RS_ID;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PAYMENTS',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PAYMENTS',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'PAYMENTS',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOG_ID<>V_NEW.DOG_ID THEN
            WriteStr:=':OLD.DOG_ID=' || TO_CHAR(V_OLD.DOG_ID) || ' :NEW.DOG_ID=' || TO_CHAR(V_NEW.DOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BANK_ID<>V_NEW.BANK_ID THEN
            WriteStr:=':OLD.BANK_ID=' || TO_CHAR(V_OLD.BANK_ID) || ' :NEW.BANK_ID=' || TO_CHAR(V_NEW.BANK_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.RS<>V_NEW.RS THEN
            WriteStr:=':OLD.RS=' || (V_OLD.RS) || ' :NEW.RS=' || (V_NEW.RS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUMMA<>V_NEW.SUMMA THEN
            WriteStr:=':OLD.SUMMA=' || TO_CHAR(V_OLD.SUMMA) || ' :NEW.SUMMA=' || TO_CHAR(V_NEW.SUMMA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NAZN_PLAT<>V_NEW.NAZN_PLAT THEN
            WriteStr:=':OLD.NAZN_PLAT=' || (V_OLD.NAZN_PLAT) || ' :NEW.NAZN_PLAT=' || (V_NEW.NAZN_PLAT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.OURBANK_ID<>V_NEW.OURBANK_ID THEN
            WriteStr:=':OLD.OURBANK_ID=' || TO_CHAR(V_OLD.OURBANK_ID) || ' :NEW.OURBANK_ID=' || TO_CHAR(V_NEW.OURBANK_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_PLAT<>V_NEW.NUM_PLAT THEN
            WriteStr:=':OLD.NUM_PLAT=' || (V_OLD.NUM_PLAT) || ' :NEW.NUM_PLAT=' || (V_NEW.NUM_PLAT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_PLAT<>V_NEW.DATE_PLAT THEN
            WriteStr:=':OLD.DATE_PLAT=' || TO_CHAR(V_OLD.DATE_PLAT,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_PLAT=' || TO_CHAR(V_NEW.DATE_PLAT,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PAYFORM_ID<>V_NEW.PAYFORM_ID THEN
            WriteStr:=':OLD.PAYFORM_ID=' || TO_CHAR(V_OLD.PAYFORM_ID) || ' :NEW.PAYFORM_ID=' || TO_CHAR(V_NEW.PAYFORM_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_POST<>V_NEW.DATE_POST THEN
            WriteStr:=':OLD.DATE_POST=' || TO_CHAR(V_OLD.DATE_POST,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_POST=' || TO_CHAR(V_NEW.DATE_POST,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DEST_ID<>V_NEW.DEST_ID THEN
            WriteStr:=':OLD.DEST_ID=' || TO_CHAR(V_OLD.DEST_ID) || ' :NEW.DEST_ID=' || TO_CHAR(V_NEW.DEST_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.RS_ID<>V_NEW.RS_ID THEN
            WriteStr:=':OLD.RS_ID=' || TO_CHAR(V_OLD.RS_ID) || ' :NEW.RS_ID=' || TO_CHAR(V_NEW.RS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'PAYMENTS',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PAYMENTS_ON_BILLS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PAYMENTS_ON_BILLS
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.PAYMENTS_ON_BILLS
FOR EACH ROW
DECLARE
  v_old PAYMENTS_ON_BILLS%ROWTYPE;
  v_new PAYMENTS_ON_BILLS%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.NOM_DOK := :OLD.NOM_DOK;
    v_old.BILL_POS_ID := :OLD.BILL_POS_ID;
    v_old.PAYMENTS_ID := :OLD.PAYMENTS_ID;
    v_old.SUMMA := :OLD.SUMMA;
    v_old.DATE_REALIZ := :OLD.DATE_REALIZ;
    v_old.SUMMA_NDS := :OLD.SUMMA_NDS;
    v_old.SUMMA_AKCIZ := :OLD.SUMMA_AKCIZ;
    v_old.VES := :OLD.VES;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
        SELECT LogId,'PAYMENTS_ON_BILLS',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D',EMPTY_CLOB()
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

      SELECT WhatWasDone INTO cl_WhatWasDone
        FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
        WHERE ID = LogId
        FOR UPDATE;

      WritePos:=1;
      WriteStr:='NOM_DOK=' || TO_CHAR(V_OLD.NOM_DOK) || ' BILL_POS_ID=' || TO_CHAR(V_OLD.BILL_POS_ID) || ' PAYMENTS_ID=' || TO_CHAR(V_OLD.PAYMENTS_ID) || CHR(13);
      dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.NOM_DOK := :NEW.NOM_DOK;
    v_new.BILL_POS_ID := :NEW.BILL_POS_ID;
    v_new.PAYMENTS_ID := :NEW.PAYMENTS_ID;
    v_new.SUMMA := :NEW.SUMMA;
    v_new.DATE_REALIZ := :NEW.DATE_REALIZ;
    v_new.SUMMA_NDS := :NEW.SUMMA_NDS;
    v_new.SUMMA_AKCIZ := :NEW.SUMMA_AKCIZ;
    v_new.VES := :NEW.VES;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PAYMENTS_ON_BILLS',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PAYMENTS_ON_BILLS',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'PAYMENTS_ON_BILLS',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_DOK<>V_NEW.NOM_DOK THEN
            WriteStr:=':OLD.NOM_DOK=' || TO_CHAR(V_OLD.NOM_DOK) || ' :NEW.NOM_DOK=' || TO_CHAR(V_NEW.NOM_DOK) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BILL_POS_ID<>V_NEW.BILL_POS_ID THEN
            WriteStr:=':OLD.BILL_POS_ID=' || TO_CHAR(V_OLD.BILL_POS_ID) || ' :NEW.BILL_POS_ID=' || TO_CHAR(V_NEW.BILL_POS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PAYMENTS_ID<>V_NEW.PAYMENTS_ID THEN
            WriteStr:=':OLD.PAYMENTS_ID=' || TO_CHAR(V_OLD.PAYMENTS_ID) || ' :NEW.PAYMENTS_ID=' || TO_CHAR(V_NEW.PAYMENTS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUMMA<>V_NEW.SUMMA THEN
            WriteStr:=':OLD.SUMMA=' || TO_CHAR(V_OLD.SUMMA) || ' :NEW.SUMMA=' || TO_CHAR(V_NEW.SUMMA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_REALIZ<>V_NEW.DATE_REALIZ THEN
            WriteStr:=':OLD.DATE_REALIZ=' || TO_CHAR(V_OLD.DATE_REALIZ,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_REALIZ=' || TO_CHAR(V_NEW.DATE_REALIZ,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUMMA_NDS<>V_NEW.SUMMA_NDS THEN
            WriteStr:=':OLD.SUMMA_NDS=' || TO_CHAR(V_OLD.SUMMA_NDS) || ' :NEW.SUMMA_NDS=' || TO_CHAR(V_NEW.SUMMA_NDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUMMA_AKCIZ<>V_NEW.SUMMA_AKCIZ THEN
            WriteStr:=':OLD.SUMMA_AKCIZ=' || TO_CHAR(V_OLD.SUMMA_AKCIZ) || ' :NEW.SUMMA_AKCIZ=' || TO_CHAR(V_NEW.SUMMA_AKCIZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES<>V_NEW.VES THEN
            WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
          SELECT LogId,'PAYMENTS_ON_BILLS',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I',EMPTY_CLOB()
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

        SELECT WhatWasDone INTO cl_WhatWasDone
          FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
          WHERE ID = LogId
          FOR UPDATE;
        WritePos:=1;
        WriteStr:='NOM_DOK=' || TO_CHAR(V_NEW.NOM_DOK) || ' BILL_POS_ID=' || TO_CHAR(V_NEW.BILL_POS_ID) || ' PAYMENTS_ID=' || TO_CHAR(V_NEW.PAYMENTS_ID);
        dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PAYMENTS_TO_BILLS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PAYMENTS_TO_BILLS
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.PAYMENTS_TO_BILLS
FOR EACH ROW
DECLARE
  v_old PAYMENTS_TO_BILLS%ROWTYPE;
  v_new PAYMENTS_TO_BILLS%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.PAYMENTS_ID := :OLD.PAYMENTS_ID;
    v_old.NOM_DOK := :OLD.NOM_DOK;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'PAYMENTS_TO_BILLS',TO_CHAR(V_OLD.PAYMENTS_ID) || TO_CHAR(V_OLD.NOM_DOK),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.PAYMENTS_ID := :NEW.PAYMENTS_ID;
    v_new.NOM_DOK := :NEW.NOM_DOK;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.PAYMENTS_ID<>V_NEW.PAYMENTS_ID OR V_OLD.NOM_DOK<>V_NEW.NOM_DOK THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PAYMENTS_TO_BILLS',TO_CHAR(V_OLD.PAYMENTS_ID) || TO_CHAR(V_OLD.NOM_DOK),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PAYMENTS_TO_BILLS',TO_CHAR(V_NEW.PAYMENTS_ID) || TO_CHAR(V_NEW.NOM_DOK),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'PAYMENTS_TO_BILLS',TO_CHAR(V_NEW.PAYMENTS_ID) || TO_CHAR(V_NEW.NOM_DOK),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.PAYMENTS_ID<>V_NEW.PAYMENTS_ID THEN
            WriteStr:=':OLD.PAYMENTS_ID=' || TO_CHAR(V_OLD.PAYMENTS_ID) || ' :NEW.PAYMENTS_ID=' || TO_CHAR(V_NEW.PAYMENTS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_DOK<>V_NEW.NOM_DOK THEN
            WriteStr:=':OLD.NOM_DOK=' || TO_CHAR(V_OLD.NOM_DOK) || ' :NEW.NOM_DOK=' || TO_CHAR(V_NEW.NOM_DOK) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'PAYMENTS_TO_BILLS',TO_CHAR(V_NEW.PAYMENTS_ID) || TO_CHAR(V_NEW.NOM_DOK),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PLAN_PERIODS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PLAN_PERIODS
AFTER INSERT OR DELETE OR UPDATE OF ID, NUM_IZM_RESU, END_DATE, DATE_PLAN, BEGIN_DATE, PLAN_ID, NUM_IZM_POST
ON MASTER.PLAN_PERIODS
FOR EACH ROW
DECLARE
  v_old PLAN_PERIODS%ROWTYPE;
  v_new PLAN_PERIODS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_ID := :OLD.PLAN_ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.NUM_IZM_POST := :OLD.NUM_IZM_POST;
    v_old.NUM_IZM_RESU := :OLD.NUM_IZM_RESU;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
    DELETE FROM MASTER_SHADOW.PLAN_PERIODS_SHADOW
     WHERE ID=v_old.ID
       AND PLAN_ID=v_old.PLAN_ID;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_ID := :NEW.PLAN_ID;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.NUM_IZM_POST := :NEW.NUM_IZM_POST;
    v_new.NUM_IZM_RESU := :NEW.NUM_IZM_RESU;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;

    -- Обновление теневой таблицы
    UPDATE MASTER_SHADOW.PLAN_PERIODS_SHADOW SET
      (ID,PLAN_ID,DATE_PLAN,NUM_IZM_POST,NUM_IZM_RESU,BEGIN_DATE,END_DATE)=
      (SELECT v_new.ID,v_new.PLAN_ID,v_new.DATE_PLAN,v_new.NUM_IZM_POST,v_new.NUM_IZM_RESU,v_new.BEGIN_DATE,v_new.END_DATE FROM dual)
      WHERE ID=v_old.ID AND PLAN_ID=v_old.PLAN_ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.PLAN_PERIODS_SHADOW
        (ID,PLAN_ID,DATE_PLAN,NUM_IZM_POST,NUM_IZM_RESU,BEGIN_DATE,END_DATE)
        VALUES
        (v_new.ID,v_new.PLAN_ID,v_new.DATE_PLAN,v_new.NUM_IZM_POST,v_new.NUM_IZM_RESU,v_new.BEGIN_DATE,v_new.END_DATE);
    END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PLAN_POST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PLAN_POST
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_POST
FOR EACH ROW
DECLARE
  v_old PLAN_POST%ROWTYPE;
  v_new PLAN_POST%ROWTYPE;
  v_tmp NUMBER;
  v_num_izm NUMBER;
  v_per_id NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_CENA := :OLD.PLAN_CENA;
    v_old.PLAN_VES := :OLD.PLAN_VES;
    v_old.PLAN_SUM := :OLD.PLAN_SUM;
    v_old.DATE_CENA := :OLD.DATE_CENA;
    v_old.PLAN_ID := :OLD.PLAN_ID;
    v_old.PLAN_PER_ID := :OLD.PLAN_PER_ID;
    v_old.PLANSTRU_ID := :OLD.PLANSTRU_ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PAYFORM_ID := :OLD.PAYFORM_ID;
    v_old.CAT_CEN_ID := :OLD.CAT_CEN_ID;
    v_old.APPL_TAG := :OLD.APPL_TAG;
  END IF;
  
  IF DELETING() THEN
	v_per_id := :OLD.PLAN_PER_ID;
  ELSE	
	v_per_id := :NEW.PLAN_PER_ID;
  END IF;

  -- Определение номера текущего изменения плана
  BEGIN
    SELECT NUM_IZM_POST
      INTO v_num_izm
      FROM PLAN_PERIODS
      WHERE ID=v_per_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_ROW, 'Плановый период не открыт');
	  v_num_izm := 0;
  END;
  
  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
/*
    DELETE FROM MASTER_SHADOW.PLAN_POST_SHADOW
     WHERE ID=v_old.ID;
*/	 
    -- Запись в лог
    IF v_old.APPL_TAG='MASTER' THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'PLAN_POST',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_CENA := :NEW.PLAN_CENA;
    v_new.PLAN_VES := :NEW.PLAN_VES;
    v_new.PLAN_SUM := :NEW.PLAN_SUM;
    v_new.DATE_CENA := :NEW.DATE_CENA;
    v_new.PLAN_ID := :NEW.PLAN_ID;
    v_new.PLAN_PER_ID := :NEW.PLAN_PER_ID;
    v_new.PLANSTRU_ID := :NEW.PLANSTRU_ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PAYFORM_ID := :NEW.PAYFORM_ID;
    v_new.CAT_CEN_ID := :NEW.CAT_CEN_ID;
    v_new.APPL_TAG := :NEW.APPL_TAG;

    -- Обновление теневой таблицы
/*
    UPDATE MASTER_SHADOW.PLAN_POST_SHADOW SET
      (ID,PLAN_CENA,PLAN_VES,PLAN_SUM,PLAN_ID,PLAN_PER_ID,PLANSTRU_ID,DOG_ID,PROD_ID_NPR,PAYFORM_ID,DATE_CENA,CAT_CEN_ID,APPL_TAG)=
      (SELECT v_new.ID,v_new.PLAN_CENA,v_new.PLAN_VES,v_new.PLAN_SUM,v_new.PLAN_ID,v_new.PLAN_PER_ID,v_new.PLANSTRU_ID,v_new.DOG_ID,v_new.PROD_ID_NPR,v_new.PAYFORM_ID,v_new.DATE_CENA,v_new.CAT_CEN_ID,v_new.APPL_TAG FROM dual)
      WHERE ID=v_old.ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.PLAN_POST_SHADOW
        (ID,PLAN_CENA,PLAN_VES,PLAN_SUM,PLAN_ID,PLAN_PER_ID,PLANSTRU_ID,DOG_ID,PROD_ID_NPR,PAYFORM_ID,DATE_CENA,CAT_CEN_ID,APPL_TAG)
        VALUES
        (v_new.ID,v_new.PLAN_CENA,v_new.PLAN_VES,v_new.PLAN_SUM,v_new.PLAN_ID,v_new.PLAN_PER_ID,v_new.PLANSTRU_ID,v_new.DOG_ID,v_new.PROD_ID_NPR,v_new.PAYFORM_ID,v_new.DATE_CENA,v_new.CAT_CEN_ID,v_new.APPL_TAG);
    END IF;
*/
    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF v_old.APPL_TAG='MASTER' THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PLAN_POST',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF v_new.APPL_TAG='MASTER' THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'PLAN_POST',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF v_new.APPL_TAG='MASTER' THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'PLAN_POST',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.PLAN_CENA<>V_NEW.PLAN_CENA THEN
            WriteStr:=':OLD.PLAN_CENA=' || TO_CHAR(V_OLD.PLAN_CENA) || ' :NEW.PLAN_CENA=' || TO_CHAR(V_NEW.PLAN_CENA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLAN_VES<>V_NEW.PLAN_VES THEN
            WriteStr:=':OLD.PLAN_VES=' || TO_CHAR(V_OLD.PLAN_VES) || ' :NEW.PLAN_VES=' || TO_CHAR(V_NEW.PLAN_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLAN_ID<>V_NEW.PLAN_ID THEN
            WriteStr:=':OLD.PLAN_ID=' || TO_CHAR(V_OLD.PLAN_ID) || ' :NEW.PLAN_ID=' || TO_CHAR(V_NEW.PLAN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLAN_PER_ID<>V_NEW.PLAN_PER_ID THEN
            WriteStr:=':OLD.PLAN_PER_ID=' || TO_CHAR(V_OLD.PLAN_PER_ID) || ' :NEW.PLAN_PER_ID=' || TO_CHAR(V_NEW.PLAN_PER_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLANSTRU_ID<>V_NEW.PLANSTRU_ID THEN
            WriteStr:=':OLD.PLANSTRU_ID=' || TO_CHAR(V_OLD.PLANSTRU_ID) || ' :NEW.PLANSTRU_ID=' || TO_CHAR(V_NEW.PLANSTRU_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOG_ID<>V_NEW.DOG_ID THEN
            WriteStr:=':OLD.DOG_ID=' || TO_CHAR(V_OLD.DOG_ID) || ' :NEW.DOG_ID=' || TO_CHAR(V_NEW.DOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROD_ID_NPR<>V_NEW.PROD_ID_NPR THEN
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PAYFORM_ID<>V_NEW.PAYFORM_ID THEN
            WriteStr:=':OLD.PAYFORM_ID=' || TO_CHAR(V_OLD.PAYFORM_ID) || ' :NEW.PAYFORM_ID=' || TO_CHAR(V_NEW.PAYFORM_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_CENA<>V_NEW.DATE_CENA THEN
            WriteStr:=':OLD.DATE_CENA=' || TO_CHAR(V_OLD.DATE_CENA,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_CENA=' || TO_CHAR(V_NEW.DATE_CENA,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CAT_CEN_ID<>V_NEW.CAT_CEN_ID THEN
            WriteStr:=':OLD.CAT_CEN_ID=' || TO_CHAR(V_OLD.CAT_CEN_ID) || ' :NEW.CAT_CEN_ID=' || TO_CHAR(V_NEW.CAT_CEN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF v_new.APPL_TAG='MASTER' THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'PLAN_POST',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_PLAN_RESU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_PLAN_RESU
AFTER INSERT OR DELETE OR UPDATE OF ID, OSTAT_UTMSK, SOBSTV_ID, HRAN_UTMSK, PLAN_ID, PROD_ID_NPR, PLAN_UTMSK, REFINER_ID, PLAN_PER_ID
ON MASTER.PLAN_RESU
FOR EACH ROW
DECLARE
  v_old PLAN_RESU%ROWTYPE;
  v_new PLAN_RESU%ROWTYPE;
  v_tmp NUMBER;
  v_num_izm NUMBER;
  v_per_id NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_UTMSK := :OLD.PLAN_UTMSK;
    v_old.HRAN_UTMSK := :OLD.HRAN_UTMSK;
    v_old.OSTAT_UTMSK := :OLD.OSTAT_UTMSK;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PLAN_ID := :OLD.PLAN_ID;
    v_old.PLAN_PER_ID := :OLD.PLAN_PER_ID;
    v_old.SOBSTV_ID := :OLD.SOBSTV_ID;
    v_old.REFINER_ID := :OLD.REFINER_ID;
  END IF;

  IF DELETING() THEN
	v_per_id := :OLD.PLAN_PER_ID;
  ELSE
	v_per_id := :NEW.PLAN_PER_ID;
  END IF;

  -- Определение номера текущего изменения плана
  BEGIN
    SELECT NUM_IZM_RESU
      INTO v_num_izm
      FROM PLAN_PERIODS
      WHERE ID=v_per_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(FOR_SCRIPTS.SG$NO_ROW, 'Плановый период не открыт');
	  v_num_izm := 0;
  END;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
--    DELETE FROM PLAN_RESU_HIST WHERE ID=v_old.ID AND NUM_IZM=v_num_izm;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_UTMSK := :NEW.PLAN_UTMSK;
    v_new.HRAN_UTMSK := :NEW.HRAN_UTMSK;
    v_new.OSTAT_UTMSK := :NEW.OSTAT_UTMSK;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PLAN_ID := :NEW.PLAN_ID;
    v_new.PLAN_PER_ID := :NEW.PLAN_PER_ID;
    v_new.SOBSTV_ID := :NEW.SOBSTV_ID;
    v_new.REFINER_ID := :NEW.REFINER_ID;

    -- Обновление теневой таблицы
--    UPDATE PLAN_RESU_HIST SET
--      (ID,PLAN_UTMSK,HRAN_UTMSK,OSTAT_UTMSK,PROD_ID_NPR,PLAN_ID,PLAN_PER_ID,SOBSTV_ID,REFINER_ID)=
--      (SELECT v_new.ID,v_new.PLAN_UTMSK,v_new.HRAN_UTMSK,v_new.OSTAT_UTMSK,v_new.PROD_ID_NPR,v_new.PLAN_ID,v_new.PLAN_PER_ID,v_new.SOBSTV_ID,v_new.REFINER_ID FROM dual)
--      WHERE ID=v_old.ID AND NUM_IZM=v_num_izm;

--    IF SQL%NOTFOUND THEN
--      INSERT INTO PLAN_RESU_HIST
--        (ID,NUM_IZM,PLAN_UTMSK,HRAN_UTMSK,OSTAT_UTMSK,PROD_ID_NPR,PLAN_ID,PLAN_PER_ID,SOBSTV_ID,REFINER_ID)
--        VALUES
--        (v_new.ID,v_num_izm,v_new.PLAN_UTMSK,v_new.HRAN_UTMSK,v_new.OSTAT_UTMSK,v_new.PROD_ID_NPR,v_new.PLAN_ID,v_new.PLAN_PER_ID,v_new.SOBSTV_ID,v_new.REFINER_ID);
--    END IF;

    -- После обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
    END IF;

  END IF;
END;
/


--
-- TRG_AIUDR_SPECIF  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_SPECIF
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.SPECIF
FOR EACH ROW
DECLARE
  v_old SPECIF%ROWTYPE;
  v_new SPECIF%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.LOAD_ABBR := :OLD.LOAD_ABBR;
    v_old.STANOTP_ID := :OLD.STANOTP_ID;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.VETKA_ID := :OLD.VETKA_ID;
    v_old.POLUCH_ID := :OLD.POLUCH_ID;
    v_old.POTREB_ID := :OLD.POTREB_ID;
    v_old.PRIM := :OLD.PRIM;
    v_old.GR4 := :OLD.GR4;
    v_old.M1 := :OLD.M1;
    v_old.M2 := :OLD.M2;
    v_old.M3 := :OLD.M3;
    v_old.M4 := :OLD.M4;
    v_old.M5 := :OLD.M5;
    v_old.M6 := :OLD.M6;
    v_old.M7 := :OLD.M7;
    v_old.M8 := :OLD.M8;
    v_old.M9 := :OLD.M9;
    v_old.M10 := :OLD.M10;
    v_old.M11 := :OLD.M11;
    v_old.M12 := :OLD.M12;
    v_old.KV1 := :OLD.KV1;
    v_old.KV2 := :OLD.KV2;
    v_old.KV3 := :OLD.KV3;
    v_old.KV4 := :OLD.KV4;
    v_old.VES_ALL := :OLD.VES_ALL;
    v_old.APPL_TAG := :OLD.APPL_TAG;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Удаление из теневой таблицы
--    DELETE FROM MASTER_SHADOW.SPECIF_SHADOW
--     WHERE ID=v_old.ID;
    -- Запись в лог
    IF v_old.APPL_TAG='MASTER' THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
        SELECT LogId,'SPECIF',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.LOAD_ABBR := :NEW.LOAD_ABBR;
    v_new.STANOTP_ID := :NEW.STANOTP_ID;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.VETKA_ID := :NEW.VETKA_ID;
    v_new.POLUCH_ID := :NEW.POLUCH_ID;
    v_new.POTREB_ID := :NEW.POTREB_ID;
    v_new.PRIM := :NEW.PRIM;
    v_new.GR4 := :NEW.GR4;
    v_new.M1 := :NEW.M1;
    v_new.M2 := :NEW.M2;
    v_new.M3 := :NEW.M3;
    v_new.M4 := :NEW.M4;
    v_new.M5 := :NEW.M5;
    v_new.M6 := :NEW.M6;
    v_new.M7 := :NEW.M7;
    v_new.M8 := :NEW.M8;
    v_new.M9 := :NEW.M9;
    v_new.M10 := :NEW.M10;
    v_new.M11 := :NEW.M11;
    v_new.M12 := :NEW.M12;
    v_new.KV1 := :NEW.KV1;
    v_new.KV2 := :NEW.KV2;
    v_new.KV3 := :NEW.KV3;
    v_new.KV4 := :NEW.KV4;
    v_new.VES_ALL := :NEW.VES_ALL;
    v_new.APPL_TAG := :NEW.APPL_TAG;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;

    -- Обновление теневой таблицы
/*    UPDATE MASTER_SHADOW.SPECIF_SHADOW SET
      (ID,DOG_ID,PROD_ID_NPR,LOAD_ABBR,STANOTP_ID,STAN_ID,VETKA_ID,POLUCH_ID,POTREB_ID,PRIM,GR4,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,KV1,KV2,KV3,KV4,VES_ALL,APPL_TAG,BEGIN_DATE,END_DATE)=
      (SELECT v_new.ID,v_new.DOG_ID,v_new.PROD_ID_NPR,v_new.LOAD_ABBR,v_new.STANOTP_ID,v_new.STAN_ID,v_new.VETKA_ID,v_new.POLUCH_ID,v_new.POTREB_ID,v_new.PRIM,v_new.GR4,v_new.M1,v_new.M2,v_new.M3,v_new.M4,v_new.M5,v_new.M6,v_new.M7,v_new.M8,v_new.M9,v_new.M10,v_new.M11,v_new.M12,v_new.KV1,v_new.KV2,v_new.KV3,v_new.KV4,v_new.VES_ALL,v_new.APPL_TAG,v_new.BEGIN_DATE,v_new.END_DATE FROM dual)
      WHERE ID=v_old.ID;

    IF SQL%NOTFOUND THEN
      INSERT INTO MASTER_SHADOW.SPECIF_SHADOW
        (ID,DOG_ID,PROD_ID_NPR,LOAD_ABBR,STANOTP_ID,STAN_ID,VETKA_ID,POLUCH_ID,POTREB_ID,PRIM,GR4,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,KV1,KV2,KV3,KV4,VES_ALL,APPL_TAG,BEGIN_DATE,END_DATE)
        VALUES
        (v_new.ID,v_new.DOG_ID,v_new.PROD_ID_NPR,v_new.LOAD_ABBR,v_new.STANOTP_ID,v_new.STAN_ID,v_new.VETKA_ID,v_new.POLUCH_ID,v_new.POTREB_ID,v_new.PRIM,v_new.GR4,v_new.M1,v_new.M2,v_new.M3,v_new.M4,v_new.M5,v_new.M6,v_new.M7,v_new.M8,v_new.M9,v_new.M10,v_new.M11,v_new.M12,v_new.KV1,v_new.KV2,v_new.KV3,v_new.KV4,v_new.VES_ALL,v_new.APPL_TAG,v_new.BEGIN_DATE,v_new.END_DATE);
    END IF;
*/
    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF v_old.APPL_TAG='MASTER' THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'SPECIF',TO_CHAR(V_OLD.ID),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF v_new.APPL_TAG='MASTER' THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'SPECIF',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF v_new.APPL_TAG='MASTER' THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'SPECIF',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DOG_ID<>V_NEW.DOG_ID THEN
            WriteStr:=':OLD.DOG_ID=' || TO_CHAR(V_OLD.DOG_ID) || ' :NEW.DOG_ID=' || TO_CHAR(V_NEW.DOG_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROD_ID_NPR<>V_NEW.PROD_ID_NPR THEN
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.LOAD_ABBR<>V_NEW.LOAD_ABBR THEN
            WriteStr:=':OLD.LOAD_ABBR=' || (V_OLD.LOAD_ABBR) || ' :NEW.LOAD_ABBR=' || (V_NEW.LOAD_ABBR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.STANOTP_ID<>V_NEW.STANOTP_ID THEN
            WriteStr:=':OLD.STANOTP_ID=' || TO_CHAR(V_OLD.STANOTP_ID) || ' :NEW.STANOTP_ID=' || TO_CHAR(V_NEW.STANOTP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.STAN_ID<>V_NEW.STAN_ID THEN
            WriteStr:=':OLD.STAN_ID=' || TO_CHAR(V_OLD.STAN_ID) || ' :NEW.STAN_ID=' || TO_CHAR(V_NEW.STAN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VETKA_ID<>V_NEW.VETKA_ID THEN
            WriteStr:=':OLD.VETKA_ID=' || TO_CHAR(V_OLD.VETKA_ID) || ' :NEW.VETKA_ID=' || TO_CHAR(V_NEW.VETKA_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POLUCH_ID<>V_NEW.POLUCH_ID THEN
            WriteStr:=':OLD.POLUCH_ID=' || TO_CHAR(V_OLD.POLUCH_ID) || ' :NEW.POLUCH_ID=' || TO_CHAR(V_NEW.POLUCH_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.POTREB_ID<>V_NEW.POTREB_ID THEN
            WriteStr:=':OLD.POTREB_ID=' || TO_CHAR(V_OLD.POTREB_ID) || ' :NEW.POTREB_ID=' || TO_CHAR(V_NEW.POTREB_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PRIM<>V_NEW.PRIM THEN
            WriteStr:=':OLD.PRIM=' || (V_OLD.PRIM) || ' :NEW.PRIM=' || (V_NEW.PRIM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GR4<>V_NEW.GR4 THEN
            WriteStr:=':OLD.GR4=' || (V_OLD.GR4) || ' :NEW.GR4=' || (V_NEW.GR4) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M1<>V_NEW.M1 THEN
            WriteStr:=':OLD.M1=' || TO_CHAR(V_OLD.M1) || ' :NEW.M1=' || TO_CHAR(V_NEW.M1) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M2<>V_NEW.M2 THEN
            WriteStr:=':OLD.M2=' || TO_CHAR(V_OLD.M2) || ' :NEW.M2=' || TO_CHAR(V_NEW.M2) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M3<>V_NEW.M3 THEN
            WriteStr:=':OLD.M3=' || TO_CHAR(V_OLD.M3) || ' :NEW.M3=' || TO_CHAR(V_NEW.M3) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M4<>V_NEW.M4 THEN
            WriteStr:=':OLD.M4=' || TO_CHAR(V_OLD.M4) || ' :NEW.M4=' || TO_CHAR(V_NEW.M4) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M5<>V_NEW.M5 THEN
            WriteStr:=':OLD.M5=' || TO_CHAR(V_OLD.M5) || ' :NEW.M5=' || TO_CHAR(V_NEW.M5) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M6<>V_NEW.M6 THEN
            WriteStr:=':OLD.M6=' || TO_CHAR(V_OLD.M6) || ' :NEW.M6=' || TO_CHAR(V_NEW.M6) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M7<>V_NEW.M7 THEN
            WriteStr:=':OLD.M7=' || TO_CHAR(V_OLD.M7) || ' :NEW.M7=' || TO_CHAR(V_NEW.M7) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M8<>V_NEW.M8 THEN
            WriteStr:=':OLD.M8=' || TO_CHAR(V_OLD.M8) || ' :NEW.M8=' || TO_CHAR(V_NEW.M8) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M9<>V_NEW.M9 THEN
            WriteStr:=':OLD.M9=' || TO_CHAR(V_OLD.M9) || ' :NEW.M9=' || TO_CHAR(V_NEW.M9) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M10<>V_NEW.M10 THEN
            WriteStr:=':OLD.M10=' || TO_CHAR(V_OLD.M10) || ' :NEW.M10=' || TO_CHAR(V_NEW.M10) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M11<>V_NEW.M11 THEN
            WriteStr:=':OLD.M11=' || TO_CHAR(V_OLD.M11) || ' :NEW.M11=' || TO_CHAR(V_NEW.M11) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.M12<>V_NEW.M12 THEN
            WriteStr:=':OLD.M12=' || TO_CHAR(V_OLD.M12) || ' :NEW.M12=' || TO_CHAR(V_NEW.M12) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BEGIN_DATE<>V_NEW.BEGIN_DATE THEN
            WriteStr:=':OLD.BEGIN_DATE=' || TO_CHAR(V_OLD.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.BEGIN_DATE=' || TO_CHAR(V_NEW.BEGIN_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.END_DATE<>V_NEW.END_DATE THEN
            WriteStr:=':OLD.END_DATE=' || TO_CHAR(V_OLD.END_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.END_DATE=' || TO_CHAR(V_NEW.END_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF v_new.APPL_TAG='MASTER' THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
          SELECT LogId,'SPECIF',TO_CHAR(V_NEW.ID),osuser,terminal,MODULE,'I'
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
      END IF;
    END IF;

  END IF;
END;
/


--
-- TRG_BIR_AZC_GOOD_IN_WAY  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_GOOD_IN_WAY
BEFORE INSERT
ON MASTER.AZC_GOOD_IN_WAY
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_good_in_way.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_good_in_way;
/


--
-- TRG_BIR_AZC_OPERATION  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_OPERATION
BEFORE INSERT OR UPDATE
ON MASTER.AZC_OPERATION
FOR EACH ROW
BEGIN
  IF (:NEW.ID IS NULL) OR (:NEW.ID=0) THEN
    SELECT seq_azc_operation.NEXTVAL INTO :NEW.ID FROM DUAL;
  END iF;
  :NEW.DATE_INTO:=SYSDATE;
  IF :NEW.DENCITY>2 THEN
    :NEW.DENCITY:=0;
  END IF;
END trg_bir_azc_operation;
/


--
-- TRG_BIR_AZC_REALIZ_LIKARD  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIR_AZC_REALIZ_LIKARD
BEFORE INSERT
ON MASTER.AZC_REALIZ_LIKARD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
if :new.id is null or :new.id=0 then
   Select seq_azc_realiz_likard.NextVal into tmpVar from dual;
   :NEW.id := tmpVar;
end if;
END trg_bir_azc_realiz_likard;
/


--
-- TRG_BIUDR_GD_PLAN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_GD_PLAN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.GD_PLAN
FOR EACH ROW
DECLARE
  v_old GD_PLAN%ROWTYPE;
  v_new GD_PLAN%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.FROM_DATE := :OLD.FROM_DATE;
    v_old.TO_DATE := :OLD.TO_DATE;
    v_old.PLAN_CIST := :OLD.PLAN_CIST;
    v_old.PLAN_VES := :OLD.PLAN_VES;
    v_old.DATE_KORR := :OLD.DATE_KORR;
    v_old.KORR_CIST := :OLD.KORR_CIST;
    v_old.KORR_VES := :OLD.KORR_VES;
    v_old.MARSHRUT_CIST := :OLD.MARSHRUT_CIST;
    v_old.MARSHRUT_VES := :OLD.MARSHRUT_VES;
    v_old.GROTP_ID := :OLD.GROTP_ID;
    v_old.NAPR_MOS_ID := :OLD.NAPR_MOS_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.LOAD_TYPE_ID := :OLD.LOAD_TYPE_ID;
    v_old.VAGOWNER_ID := :OLD.VAGOWNER_ID;
    v_old.STANOTP_ID := :OLD.STANOTP_ID;
    v_old.TIP_PLAN := :OLD.TIP_PLAN;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.FROM_DATE := :NEW.FROM_DATE;
    v_new.TO_DATE := :NEW.TO_DATE;
    v_new.PLAN_CIST := :NEW.PLAN_CIST;
    v_new.PLAN_VES := :NEW.PLAN_VES;
    v_new.DATE_KORR := :NEW.DATE_KORR;
    v_new.KORR_CIST := :NEW.KORR_CIST;
    v_new.KORR_VES := :NEW.KORR_VES;
    v_new.MARSHRUT_CIST := :NEW.MARSHRUT_CIST;
    v_new.MARSHRUT_VES := :NEW.MARSHRUT_VES;
    v_new.GROTP_ID := :NEW.GROTP_ID;
    v_new.NAPR_MOS_ID := :NEW.NAPR_MOS_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.LOAD_TYPE_ID := :NEW.LOAD_TYPE_ID;
    v_new.VAGOWNER_ID := :NEW.VAGOWNER_ID;
    v_new.STANOTP_ID := :NEW.STANOTP_ID;
    v_new.TIP_PLAN := :NEW.TIP_PLAN;

--    IF v_old.APPL_TAG='MASTER' THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_GD_PLAN.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
--      NULL;
--    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.FROM_DATE := v_new.FROM_DATE;
    :NEW.TO_DATE := v_new.TO_DATE;
    :NEW.PLAN_CIST := v_new.PLAN_CIST;
    :NEW.PLAN_VES := v_new.PLAN_VES;
    :NEW.DATE_KORR := v_new.DATE_KORR;
    :NEW.KORR_CIST := v_new.KORR_CIST;
    :NEW.KORR_VES := v_new.KORR_VES;
    :NEW.MARSHRUT_CIST := v_new.MARSHRUT_CIST;
    :NEW.MARSHRUT_VES := v_new.MARSHRUT_VES;
    :NEW.GROTP_ID := v_new.GROTP_ID;
    :NEW.NAPR_MOS_ID := v_new.NAPR_MOS_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.LOAD_TYPE_ID := v_new.LOAD_TYPE_ID;
    :NEW.VAGOWNER_ID := v_new.VAGOWNER_ID;
    :NEW.STANOTP_ID := v_new.STANOTP_ID;
    :NEW.TIP_PLAN := v_new.TIP_PLAN;
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_DOG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_DOG
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_DOG FOR EACH ROW
DECLARE
  res NUMBER;
BEGIN

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_KLS_DOG.NEXTVAL INTO :new.ID FROM DUAL;
    END IF;

    -- MAINDOG_ID	
    -- Для Базовых договоров - ссылки на самих себя
    BEGIN
      SELECT DOG_ID INTO res FROM KLS_DOG_MAIN WHERE DOG_ID=:NEW.ID;
    EXCEPTION
      WHEN OTHERS THEN
        res:=NULL;
    END;	
	
    IF NVL(res,0)=0 THEN  	
      BEGIN
        -- Для договоров, на которые что-либо ссылается - это ID
        SELECT DISTINCT :NEW.ID INTO res FROM MASTER_SHADOW.KLS_DOG_SHADOW B WHERE (B.lukdog_id=:NEW.ID AND NVL(B.lukdog_id,0)<>0);
      EXCEPTION 
        WHEN NO_DATA_FOUND THEN
          -- Для договоров, которые ссылаются на другой договор - это LUKDOG_ID
          res:=:new.LUKDOG_ID;
      END;
	END IF;  
	
    IF NVL(res,0)=0 THEN  	
	  -- ссылка на соответствующий Базовый договор
	  BEGIN
        SELECT DOG_ID INTO res FROM KLS_DOG_MAIN WHERE IS_AGENT=:NEW.IS_AGENT 
		   AND TO_DATE('31.12.'||TO_CHAR(:NEW.DOG_YEAR),'dd.mm.yyyy') BETWEEN FROM_DATE AND TO_DATE;
      EXCEPTION
        WHEN OTHERS THEN
		  res:=NULL;
	  END;	  	 		
	END IF;

    IF res=0 THEN
	  res:=NULL;
	END IF;	
	:NEW.MAINDOG_ID:=res;
	
  END IF;
END;
/


--
-- TRG_BIUDR_KLS_PLAN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_PLAN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_PLAN
FOR EACH ROW
DECLARE
  v_old KLS_PLAN%ROWTYPE;
  v_new KLS_PLAN%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_NAME := :OLD.PLAN_NAME;
    v_old.PLAN_KIND_ID := :OLD.PLAN_KIND_ID;
    v_old.BROTHER_ID := :OLD.BROTHER_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_NAME := :NEW.PLAN_NAME;
    v_new.PLAN_KIND_ID := :NEW.PLAN_KIND_ID;
    v_new.BROTHER_ID := :NEW.BROTHER_ID;

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_PLAN.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

    -- Проверка новых значений

    -- Поиск в теневой таблице
    BEGIN
      SELECT NULL
      INTO v_tmp
      FROM MASTER_SHADOW.KLS_PLAN_SHADOW
      WHERE ID<>v_new.ID
        AND PLAN_NAME=v_new.PLAN_NAME
        AND PLAN_KIND_ID=v_new.PLAN_KIND_ID;
      RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Данная запись уже есть в таблице');
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN TOO_MANY_ROWS THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Данная запись уже есть в таблице');
    END;

    -- До обновления
    IF UPDATING() THEN
      NULL;
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, 'Нельзя менять PRIMARY KEY');
      END IF;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PLAN_NAME := v_new.PLAN_NAME;
    :NEW.PLAN_KIND_ID := v_new.PLAN_KIND_ID;
    :NEW.BROTHER_ID := v_new.BROTHER_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_LOAD_FIL_ORG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_LOAD_FIL_ORG
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_ORG
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_ORG%ROWTYPE;
  v_new LOAD_FIL_ORG%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.TAG := :OLD.TAG;
    v_old.NAME := :OLD.NAME;
    v_old.ORG_KIND_ID := :OLD.ORG_KIND_ID;
    v_old.IS_AUTO_LINK := :OLD.IS_AUTO_LINK;
    v_old.ORG_STRU_ID := :OLD.ORG_STRU_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.TAG := :NEW.TAG;
    v_new.NAME := :NEW.NAME;
    v_new.ORG_KIND_ID := :NEW.ORG_KIND_ID;
    v_new.IS_AUTO_LINK := :NEW.IS_AUTO_LINK;
    v_new.ORG_STRU_ID := :NEW.ORG_STRU_ID;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_LOAD_FIL_ORG.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.TAG := v_new.TAG;
    :NEW.NAME := v_new.NAME;
    :NEW.ORG_KIND_ID := v_new.ORG_KIND_ID;
    :NEW.IS_AUTO_LINK := v_new.IS_AUTO_LINK;
    :NEW.ORG_STRU_ID := v_new.ORG_STRU_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_LOAD_FIL_PERIODS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_LOAD_FIL_PERIODS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_PERIODS
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_PERIODS%ROWTYPE;
  v_new LOAD_FIL_PERIODS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.FILIAL_ID := :OLD.FILIAL_ID;
    v_old.DATE_REPORT := :OLD.DATE_REPORT;
    v_old.FILENAME := :OLD.FILENAME;
    v_old.DATE_LOAD := :OLD.DATE_LOAD;
    v_old.USER_LOAD := :OLD.USER_LOAD;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.FILIAL_ID := :NEW.FILIAL_ID;
    v_new.DATE_REPORT := :NEW.DATE_REPORT;
    v_new.FILENAME := :NEW.FILENAME;
    v_new.DATE_LOAD := :NEW.DATE_LOAD;
    v_new.USER_LOAD := :NEW.USER_LOAD;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_LOAD_FIL_PERIODS.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.FILIAL_ID := v_new.FILIAL_ID;
    :NEW.DATE_REPORT := v_new.DATE_REPORT;
    :NEW.FILENAME := v_new.FILENAME;
    :NEW.DATE_LOAD := v_new.DATE_LOAD;
    :NEW.USER_LOAD := v_new.USER_LOAD;
  END IF;
END;
/


--
-- TRG_BIUDR_LOAD_FIL_REALIZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_LOAD_FIL_REALIZ
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.LOAD_FIL_REALIZ
FOR EACH ROW
DECLARE
  v_old LOAD_FIL_REALIZ%ROWTYPE;
  v_new LOAD_FIL_REALIZ%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.FILIAL_ID := :OLD.FILIAL_ID;
    v_old.FIL_PERIOD_ID := :OLD.FIL_PERIOD_ID;
    v_old.FIL_ORG_ID := :OLD.FIL_ORG_ID;
    v_old.FIL_PROD_ID := :OLD.FIL_PROD_ID;
    v_old.FACT := :OLD.FACT;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.FILIAL_ID := :NEW.FILIAL_ID;
    v_new.FIL_PERIOD_ID := :NEW.FIL_PERIOD_ID;
    v_new.FIL_ORG_ID := :NEW.FIL_ORG_ID;
    v_new.FIL_PROD_ID := :NEW.FIL_PROD_ID;
    v_new.FACT := :NEW.FACT;

    IF 1=1 THEN
      -- Уникальный ID
      IF v_new.ID=0 OR v_new.ID IS NULL THEN
        SELECT SEQ_LOAD_FIL_REALIZ.NEXTVAL INTO v_new.ID FROM DUAL;
      END IF;
      -- Проверка новых значений
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.FILIAL_ID := v_new.FILIAL_ID;
    :NEW.FIL_PERIOD_ID := v_new.FIL_PERIOD_ID;
    :NEW.FIL_ORG_ID := v_new.FIL_ORG_ID;
    :NEW.FIL_PROD_ID := v_new.FIL_PROD_ID;
    :NEW.FACT := v_new.FACT;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_PERIODS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_PERIODS
BEFORE INSERT OR DELETE OR UPDATE OF ID, BEGIN_DATE, DATE_PLAN, END_DATE, PLAN_ID, NUM_IZM_POST, NUM_IZM_RESU
ON MASTER.PLAN_PERIODS
FOR EACH ROW
DECLARE
  v_old PLAN_PERIODS%ROWTYPE;
  v_new PLAN_PERIODS%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_ID := :OLD.PLAN_ID;
    v_old.DATE_PLAN := :OLD.DATE_PLAN;
    v_old.NUM_IZM_POST := :OLD.NUM_IZM_POST;
    v_old.NUM_IZM_RESU := :OLD.NUM_IZM_RESU;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_ID := :NEW.PLAN_ID;
    v_new.DATE_PLAN := :NEW.DATE_PLAN;
    v_new.NUM_IZM_POST := :NEW.NUM_IZM_POST;
    v_new.NUM_IZM_RESU := :NEW.NUM_IZM_RESU;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_PLAN_PERIODS.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

	For_Planpost.PLAN_PERIODS_ID := v_new.ID;

    -- Проверка новых значений
    IF UPDATING() THEN
      NULL;
      IF v_old.ID<>v_new.ID OR v_old.PLAN_ID<>v_new.PLAN_ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, 'Нельзя менять PRIMARY KEY');
      END IF;
    END IF;
    IF v_new.DATE_PLAN IS NULL THEN
      v_new.DATE_PLAN := TRUNC(SYSDATE,'MONTH');
	ELSE
      v_new.DATE_PLAN := TRUNC(v_new.DATE_PLAN,'MONTH');
	END IF;
	IF v_new.BEGIN_DATE IS NULL THEN
      v_new.BEGIN_DATE := v_new.DATE_PLAN;
	ELSE
      v_new.BEGIN_DATE := TRUNC(v_new.BEGIN_DATE);
	END IF;
	IF TRUNC(v_new.DATE_PLAN,'MONTH')<>TRUNC(v_new.BEGIN_DATE,'MONTH') THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Плановый период не соответствует плановому месяцу!');
	END IF;
    IF v_new.END_DATE IS NULL THEN
      v_new.END_DATE := TRUNC(ADD_MONTHS(v_new.BEGIN_DATE,1),'MONTH')-1;
    ELSE
      v_new.END_DATE := TRUNC(v_new.END_DATE);
    END IF;
	IF TRUNC(v_new.DATE_PLAN,'MONTH')<>TRUNC(v_new.END_DATE,'MONTH') THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Плановый период не соответствует плановому месяцу!');
	END IF;
	IF v_new.BEGIN_DATE>v_new.END_DATE THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Плановый период задан наоборот!');
	END IF;

    -- Поиск в теневой таблице
    BEGIN
      SELECT NULL
      INTO v_tmp
      FROM MASTER_SHADOW.PLAN_PERIODS_SHADOW
      WHERE ID<>v_new.ID
	    AND PLAN_ID=v_new.PLAN_ID
		AND DATE_PLAN=v_new.DATE_PLAN
        AND NOT (v_new.END_DATE < BEGIN_DATE OR END_DATE < v_new.BEGIN_DATE);
      RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Плановый период уже открыт');
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN TOO_MANY_ROWS THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$ROW_EXIST, 'Плановый период уже открыт');
    END;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PLAN_ID := v_new.PLAN_ID;
    :NEW.DATE_PLAN := v_new.DATE_PLAN;
    :NEW.NUM_IZM_POST := v_new.NUM_IZM_POST;
    :NEW.NUM_IZM_RESU := v_new.NUM_IZM_RESU;
    :NEW.BEGIN_DATE := v_new.BEGIN_DATE;
    :NEW.END_DATE := v_new.END_DATE;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_POST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_POST
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PLAN_POST
FOR EACH ROW
DECLARE
  v_old PLAN_POST%ROWTYPE;
  v_new PLAN_POST%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_CENA := :OLD.PLAN_CENA;
    v_old.PLAN_VES := :OLD.PLAN_VES;
    v_old.PLAN_SUM := :OLD.PLAN_SUM;
    v_old.DATE_CENA := :OLD.DATE_CENA;
    v_old.PLAN_ID := :OLD.PLAN_ID;
    v_old.PLAN_PER_ID := :OLD.PLAN_PER_ID;
    v_old.PLANSTRU_ID := :OLD.PLANSTRU_ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PAYFORM_ID := :OLD.PAYFORM_ID;
    v_old.CAT_CEN_ID := :OLD.CAT_CEN_ID;
    v_old.APPL_TAG := :OLD.APPL_TAG;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_CENA := :NEW.PLAN_CENA;
    v_new.PLAN_VES := :NEW.PLAN_VES;
    v_new.PLAN_SUM := :NEW.PLAN_SUM;
    v_new.DATE_CENA := :NEW.DATE_CENA;
    v_new.PLAN_ID := :NEW.PLAN_ID;
    v_new.PLAN_PER_ID := :NEW.PLAN_PER_ID;
    v_new.PLANSTRU_ID := :NEW.PLANSTRU_ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PAYFORM_ID := :NEW.PAYFORM_ID;
    v_new.CAT_CEN_ID := :NEW.CAT_CEN_ID;
    v_new.APPL_TAG := :NEW.APPL_TAG;

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_PLAN_POST.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

    IF v_old.APPL_TAG='MASTER' THEN
      -- Проверка новых значений
      v_new.PLAN_CENA := NVL(v_new.PLAN_CENA,0);
      v_new.PLAN_VES := NVL(v_new.PLAN_VES,0);
      v_new.PLAN_SUM := v_new.PLAN_VES*v_new.PLAN_CENA;
	  v_new.DATE_CENA := TRUNC(v_new.DATE_CENA);
	END IF;  

    -- До обновления
    IF UPDATING() THEN
      NULL;
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, 'Нельзя менять PRIMARY KEY');
      END IF;
      IF v_old.PLAN_ID<>v_new.PLAN_ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$FK_CHANGE, 'Нельзя менять план. Удалите запись и введите заново!');
      END IF;
      IF v_old.PLAN_PER_ID<>v_new.PLAN_PER_ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$FK_CHANGE, 'Нельзя менять плановый период. Удалите запись и введите заново!');
      END IF;
--      IF v_old.DOG_ID<>v_new.DOG_ID THEN
--        RAISE_APPLICATION_ERROR(For_Scripts.SG$FK_CHANGE, 'Нельзя менять договор. Удалите запись и введите заново!');
--      END IF;
--      IF v_old.PROD_ID_NPR<>v_new.PROD_ID_NPR THEN
--        RAISE_APPLICATION_ERROR(For_Scripts.SG$FK_CHANGE, 'Нельзя менять продукт. Удалите запись и введите заново!');
--      END IF;
--      IF v_old.PLANSTRU_ID<>v_new.PLANSTRU_ID THEN
--        RAISE_APPLICATION_ERROR(For_Scripts.SG$FK_CHANGE, 'Нельзя менять позицию плана. Удалите запись и введите заново!');
--        NULL;
--      END IF;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PLAN_CENA := v_new.PLAN_CENA;
    :NEW.PLAN_VES := v_new.PLAN_VES;
    :NEW.PLAN_SUM := v_new.PLAN_SUM;
    :NEW.DATE_CENA := v_new.DATE_CENA;
    :NEW.PLAN_ID := v_new.PLAN_ID;
    :NEW.PLAN_PER_ID := v_new.PLAN_PER_ID;
    :NEW.PLANSTRU_ID := v_new.PLANSTRU_ID;
    :NEW.DOG_ID := v_new.DOG_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.PAYFORM_ID := v_new.PAYFORM_ID;
    :NEW.CAT_CEN_ID := v_new.CAT_CEN_ID;
    :NEW.APPL_TAG := v_new.APPL_TAG;
  END IF;
END;
/


--
-- TRG_BIUDR_PLAN_RESU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_PLAN_RESU
BEFORE INSERT OR DELETE OR UPDATE OF ID, PLAN_ID, PLAN_UTMSK, OSTAT_UTMSK, PROD_ID_NPR, PLAN_PER_ID, SOBSTV_ID, REFINER_ID, HRAN_UTMSK
ON MASTER.PLAN_RESU
FOR EACH ROW
DECLARE
  v_old PLAN_RESU%ROWTYPE;
  v_new PLAN_RESU%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.PLAN_UTMSK := :OLD.PLAN_UTMSK;
    v_old.HRAN_UTMSK := :OLD.HRAN_UTMSK;
    v_old.OSTAT_UTMSK := :OLD.OSTAT_UTMSK;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.PLAN_ID := :OLD.PLAN_ID;
    v_old.PLAN_PER_ID := :OLD.PLAN_PER_ID;
    v_old.SOBSTV_ID := :OLD.SOBSTV_ID;
    v_old.REFINER_ID := :OLD.REFINER_ID;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.PLAN_UTMSK := :NEW.PLAN_UTMSK;
    v_new.HRAN_UTMSK := :NEW.HRAN_UTMSK;
    v_new.OSTAT_UTMSK := :NEW.OSTAT_UTMSK;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.PLAN_ID := :NEW.PLAN_ID;
    v_new.PLAN_PER_ID := :NEW.PLAN_PER_ID;
    v_new.SOBSTV_ID := :NEW.SOBSTV_ID;
    v_new.REFINER_ID := :NEW.REFINER_ID;

    -- Уникальный ID
    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_PLAN_RESU.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

    -- Проверка новых значений

    -- До обновления
    IF UPDATING() THEN
      NULL;
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(FOR_SCRIPTS.SG$PK_CHANGE, 'Нельзя менять PRIMARY KEY');
      END IF;
      IF v_old.PLAN_ID<>v_new.PLAN_ID THEN
        RAISE_APPLICATION_ERROR(FOR_SCRIPTS.SG$FK_CHANGE, 'Нельзя менять план. Удалите запись и введите заново!');
      END IF;
      IF v_old.PLAN_PER_ID<>v_new.PLAN_PER_ID THEN
        RAISE_APPLICATION_ERROR(FOR_SCRIPTS.SG$FK_CHANGE, 'Нельзя менять плановый период. Удалите запись и введите заново!');
      END IF;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.PLAN_UTMSK := v_new.PLAN_UTMSK;
    :NEW.HRAN_UTMSK := v_new.HRAN_UTMSK;
    :NEW.OSTAT_UTMSK := v_new.OSTAT_UTMSK;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.PLAN_ID := v_new.PLAN_ID;
    :NEW.PLAN_PER_ID := v_new.PLAN_PER_ID;
    :NEW.SOBSTV_ID := v_new.SOBSTV_ID;
    :NEW.REFINER_ID := v_new.REFINER_ID;
  END IF;
END;
/


--
-- TRG_BIUDR_SPECIF  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_SPECIF
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.SPECIF
FOR EACH ROW
DECLARE
  v_old SPECIF%ROWTYPE;
  v_new SPECIF%ROWTYPE;
  v_tmp NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.DOG_ID := :OLD.DOG_ID;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.LOAD_ABBR := :OLD.LOAD_ABBR;
    v_old.STANOTP_ID := :OLD.STANOTP_ID;
    v_old.STAN_ID := :OLD.STAN_ID;
    v_old.VETKA_ID := :OLD.VETKA_ID;
    v_old.POLUCH_ID := :OLD.POLUCH_ID;
    v_old.POTREB_ID := :OLD.POTREB_ID;
    v_old.PRIM := :OLD.PRIM;
    v_old.GR4 := :OLD.GR4;
    v_old.M1 := :OLD.M1;
    v_old.M2 := :OLD.M2;
    v_old.M3 := :OLD.M3;
    v_old.M4 := :OLD.M4;
    v_old.M5 := :OLD.M5;
    v_old.M6 := :OLD.M6;
    v_old.M7 := :OLD.M7;
    v_old.M8 := :OLD.M8;
    v_old.M9 := :OLD.M9;
    v_old.M10 := :OLD.M10;
    v_old.M11 := :OLD.M11;
    v_old.M12 := :OLD.M12;
    v_old.KV1 := :OLD.KV1;
    v_old.KV2 := :OLD.KV2;
    v_old.KV3 := :OLD.KV3;
    v_old.KV4 := :OLD.KV4;
    v_old.VES_ALL := :OLD.VES_ALL;
    v_old.APPL_TAG := :OLD.APPL_TAG;
    v_old.BEGIN_DATE := :OLD.BEGIN_DATE;
    v_old.END_DATE := :OLD.END_DATE;
  END IF;

  -- До удаления
  IF DELETING() THEN
    NULL;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.DOG_ID := :NEW.DOG_ID;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.LOAD_ABBR := :NEW.LOAD_ABBR;
    v_new.STANOTP_ID := :NEW.STANOTP_ID;
    v_new.STAN_ID := :NEW.STAN_ID;
    v_new.VETKA_ID := :NEW.VETKA_ID;
    v_new.POLUCH_ID := :NEW.POLUCH_ID;
    v_new.POTREB_ID := :NEW.POTREB_ID;
    v_new.PRIM := :NEW.PRIM;
    v_new.GR4 := :NEW.GR4;
    v_new.M1 := :NEW.M1;
    v_new.M2 := :NEW.M2;
    v_new.M3 := :NEW.M3;
    v_new.M4 := :NEW.M4;
    v_new.M5 := :NEW.M5;
    v_new.M6 := :NEW.M6;
    v_new.M7 := :NEW.M7;
    v_new.M8 := :NEW.M8;
    v_new.M9 := :NEW.M9;
    v_new.M10 := :NEW.M10;
    v_new.M11 := :NEW.M11;
    v_new.M12 := :NEW.M12;
    v_new.KV1 := :NEW.KV1;
    v_new.KV2 := :NEW.KV2;
    v_new.KV3 := :NEW.KV3;
    v_new.KV4 := :NEW.KV4;
    v_new.VES_ALL := :NEW.VES_ALL;
    v_new.APPL_TAG := :NEW.APPL_TAG;
    v_new.BEGIN_DATE := :NEW.BEGIN_DATE;
    v_new.END_DATE := :NEW.END_DATE;

    IF v_new.ID=0 OR v_new.ID IS NULL THEN
      SELECT SEQ_SPECIF.NEXTVAL INTO v_new.ID FROM DUAL;
    END IF;

    IF v_old.APPL_TAG='MASTER' THEN
      -- Проверка новых значений
	  v_new.KV1:=NVL(v_new.M1,0)+NVL(v_new.M2,0)+NVL(v_new.M3,0);
	  v_new.KV2:=NVL(v_new.M4,0)+NVL(v_new.M5,0)+NVL(v_new.M6,0);
	  v_new.KV3:=NVL(v_new.M7,0)+NVL(v_new.M8,0)+NVL(v_new.M9,0);
	  v_new.KV4:=NVL(v_new.M10,0)+NVL(v_new.M11,0)+NVL(v_new.M12,0);
	  v_new.VES_ALL:=NVL(v_new.KV1,0)+NVL(v_new.KV2,0)+NVL(v_new.KV3,0)+NVL(v_new.KV4,0);
      NULL;
    END IF;

    IF UPDATING() THEN
      NULL;
      -- Проверка на изменение PRIMARY KEY
      IF v_old.ID<>v_new.ID THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$PK_CHANGE, For_Scripts.SG$PK_CHANGE_TXT);
      END IF;

    END IF;

    -- До обновления
    IF UPDATING() THEN
      NULL;
    END IF;

    -- До добавления
    IF INSERTING() THEN
      NULL;
    END IF;

    -- Сохранение новых значений
    :NEW.ID := v_new.ID;
    :NEW.DOG_ID := v_new.DOG_ID;
    :NEW.PROD_ID_NPR := v_new.PROD_ID_NPR;
    :NEW.LOAD_ABBR := v_new.LOAD_ABBR;
    :NEW.STANOTP_ID := v_new.STANOTP_ID;
    :NEW.STAN_ID := v_new.STAN_ID;
    :NEW.VETKA_ID := v_new.VETKA_ID;
    :NEW.POLUCH_ID := v_new.POLUCH_ID;
    :NEW.POTREB_ID := v_new.POTREB_ID;
    :NEW.PRIM := v_new.PRIM;
    :NEW.GR4 := v_new.GR4;
    :NEW.M1 := v_new.M1;
    :NEW.M2 := v_new.M2;
    :NEW.M3 := v_new.M3;
    :NEW.M4 := v_new.M4;
    :NEW.M5 := v_new.M5;
    :NEW.M6 := v_new.M6;
    :NEW.M7 := v_new.M7;
    :NEW.M8 := v_new.M8;
    :NEW.M9 := v_new.M9;
    :NEW.M10 := v_new.M10;
    :NEW.M11 := v_new.M11;
    :NEW.M12 := v_new.M12;
    :NEW.KV1 := v_new.KV1;
    :NEW.KV2 := v_new.KV2;
    :NEW.KV3 := v_new.KV3;
    :NEW.KV4 := v_new.KV4;
    :NEW.VES_ALL := v_new.VES_ALL;
    :NEW.APPL_TAG := v_new.APPL_TAG;
    :NEW.BEGIN_DATE := v_new.BEGIN_DATE;
    :NEW.END_DATE := v_new.END_DATE;
  END IF;
END;
/


--
-- TRG_BIUDR_USL_DOG  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_USL_DOG
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.USL_DOG FOR EACH ROW
DECLARE
  vAGENT_ID NUMBER;
  vPREDPR_ID NUMBER;
  vNUM VARCHAR2(30);
BEGIN
  IF INSERTING() OR UPDATING() THEN
    -- Определяем - чей договор
    BEGIN
      SELECT AGENT_ID,PREDPR_ID,DOG_NUMBER INTO vAGENT_ID,vPREDPR_ID,vNum
	    FROM KLS_DOG WHERE ID=:NEW.DOG_ID;
    EXCEPTION
      WHEN OTHERS THEN
	    vAGENT_ID:=0;
		vPREDPR_ID:=0;
    END;	

--    IF (vAGENT_ID=8 or vAGENT_ID=4175) AND vPREDPR_ID<>8 AND vPREDPR_ID<>4175 AND :NEW.USL_NUMBER=1 AND :NEW.ID>=500000 THEN
--	  raise_application_error( FOR_SCRIPTS.SG$ERROR,  'У договора ЛУКОЙЛ-УНП '||vNum||' базовое условие должно иметь ID<500000!');
--	END IF;	
  END IF;
END;
/


--
-- TRG_CHECKARH_BILL_POS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_BILL_POS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.BILL_POS
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
  v_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Контроль
  IF DELETING() AND :OLD.DATE_REALIZ<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND :OLD.DATE_REALIZ<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND :NEW.DATE_REALIZ<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_PAYMENTS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_PAYMENTS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PAYMENTS
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='PAYMENTS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_PLAT;
    /*BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:OLD.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  ELSE
    doc_dat:=:NEW.DATE_PLAT;
    /*BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:NEW.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_PAYMENTS_ON_BILLS  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_PAYMENTS_ON_BILLS
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.PAYMENTS_ON_BILLS
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='PAYMENTS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_REALIZ;
    /*BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:OLD.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  ELSE
    doc_dat:=:NEW.DATE_REALIZ;
    /*BEGIN
      SELECT ZAKAZ.DATE_PLAN INTO doc_dat
	    FROM ZAKAZ WHERE ZAKAZ.ID=:NEW.ZAKAZ_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_PAYMENTS_BIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_PAYMENTS_BIR
BEFORE INSERT
ON MASTER.PAYMENTS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
   SELECT Seq_Payments.NEXTVAL INTO tmpVar FROM dual;
   IF :NEW.ID is null THEN
     :NEW.ID := tmpVar;
   END IF;
END ;
/


--
-- TRG_PAYMENTS_ON_BILLS_BIR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_PAYMENTS_ON_BILLS_BIR
BEFORE INSERT
ON MASTER.PAYMENTS_ON_BILLS
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;
   SELECT Seq_Payments.NEXTVAL INTO tmpVar FROM dual;
--   IF :NEW.ID is null THEN
     :NEW.ID := tmpVar;
--   END IF;
END ;
/


--
-- T11_BIUDR_ZAKAZ  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIUDR_ZAKAZ
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.ZAKAZ
FOR EACH ROW
DECLARE
  vID NUMBER;
  vPlatId NUMBER;
BEGIN

  IF UPDATING() THEN
    -- Проверяем
	IF :OLD.ID<>:NEW.ID THEN
	  raise_application_error( FOR_SCRIPTS.SG$PK_CHANGE,  FOR_SCRIPTS.SG$PK_CHANGE_TXT);
	END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
/*	IF :NEW.SPEED_VES<0 OR :NEW.SPEED_KOL<0 THEN
	  raise_application_error( FOR_SCRIPTS.SG$ERROR,  'Объем срочных перевозок не может быть меньше 0!');
	END IF;*/
	-- Временно
	IF :NEW.VES<0 THEN
	  :NEW.VES:=0;
	END IF;
	IF :NEW.KOL<0 THEN
	  :NEW.KOL:=0;
	END IF;
	--
	IF :NEW.VES<0 OR :NEW.KOL<0 THEN
	  raise_application_error( FOR_SCRIPTS.SG$ERROR,  'Объем по заявке не может быть меньше 0!');
	END IF;
/*	IF :NEW.SPEED_VES>:NEW.VES OR :NEW.SPEED_KOL>:NEW.KOL THEN
	  raise_application_error( FOR_SCRIPTS.SG$ERROR,  'Объем срочных перевозок превышает объем по заявке!');
	END IF;*/
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Корректировка плательщика
	BEGIN
	  SELECT PREDPR_ID INTO vPlatId
	    FROM KLS_DOG WHERE ID=:NEW.DOG_ID;
	  :NEW.PLAT_ID:=vPlatId;
	EXCEPTION
 	  WHEN OTHERS THEN
	    :NEW.DOG_ID:=NULL;
	END;

	IF :NEW.BEGIN_DATE IS NULL THEN
	  :NEW.BEGIN_DATE:=:NEW.DATE_PLAN;
	END IF;
  END IF;

END;
/


--
-- BILLS_PARUS  (Table) 
--
CREATE TABLE MASTER.BILLS_PARUS
(
  NOM_DOK          NUMBER(18)                   NOT NULL,
  PREF_SF          VARCHAR2(20 BYTE),
  NOM_SF           VARCHAR2(10 BYTE),
  NPO_SF           VARCHAR2(40 BYTE),
  PROD_ID_NPR      VARCHAR2(5 BYTE),
  DATE_VYP_SF      DATE,
  DATE_KVIT        DATE,
  DATE_BUXG        DATE,
  DATE_MOS         DATE,
  SUMMA_DOK        NUMBER(18,2)                 DEFAULT 0,
  SUMMA_PROD       NUMBER(18,2)                 DEFAULT 0,
  SUMMA_PROD_NDS   NUMBER(18,2)                 DEFAULT 0,
  SUMMA_AKCIZ      NUMBER(18,2)                 DEFAULT 0,
  SUMMA_GSM        NUMBER(18,2)                 DEFAULT 0,
  SUMMA_TARIF      NUMBER(18,2)                 DEFAULT 0,
  SUMMA_TARIF_NDS  NUMBER(18,2)                 DEFAULT 0,
  SUMMA_VOZN       NUMBER(18,2)                 DEFAULT 0,
  SUMMA_VOZN_NDS   NUMBER(18,2)                 DEFAULT 0,
  SUMMA_STRAH      NUMBER(18,2)                 DEFAULT 0,
  KOL_DN           NUMBER(5)                    DEFAULT 0,
  NOM_ZD           VARCHAR2(20 BYTE),
  BASE_NUMB        VARCHAR2(20 BYTE),
  NUM_DOG          VARCHAR2(20 BYTE),
  DOG_ID           NUMBER(10),
  USL_NUMBER       NUMBER(3)                    DEFAULT 1,
  SENDER           VARCHAR2(50 BYTE),
  PRIM             VARCHAR2(240 BYTE),
  NUM_KVIT         NUMBER(10),
  CONF_NUMB        VARCHAR2(20 BYTE),
  SVED_NUM         NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.BILLS_PARUS IS 'Счета-фактуры НПО, выставленные в ПАРУСЕ';



--
-- GD_RAZN_PATH  (Table) 
--
CREATE TABLE MASTER.GD_RAZN_PATH
(
  ID             NUMBER(10)                     NOT NULL,
  GD_RAZNPOS_ID  NUMBER(10),
  SORTBY         NUMBER(10),
  TIP_PATH_ID    NUMBER(10),
  STAN_ID        NUMBER(10),
  VETKA_ID       NUMBER(4),
  PREDPR_ID      NUMBER(6),
  STATES_ID      NUMBER(3)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.GD_RAZN_PATH IS 'Маршрут позиции месячной заявки';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.ID IS 'Маршрут';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.GD_RAZNPOS_ID IS 'Позиции заявки';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.SORTBY IS 'Порядок прохождения';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.TIP_PATH_ID IS 'Тип пункта маршрута';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.STAN_ID IS 'Станция';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.VETKA_ID IS 'Ветка';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.PREDPR_ID IS 'Организация';

COMMENT ON COLUMN MASTER.GD_RAZN_PATH.STATES_ID IS 'Страна';



--
-- MONTH  (Table) 
--
CREATE TABLE MASTER.MONTH
(
  NOM_ZD            VARCHAR2(16 BYTE)           NOT NULL,
  STANOTP_ID        NUMBER(10),
  NPR_SOBSTV_ID     NUMBER(6),
  STAN_ID           NUMBER(10),
  VETKA_ID          NUMBER(10),
  POLUCH_ID         NUMBER(6),
  TEX_PD_ID         NUMBER(10),
  NAZN_OTG_ID       NUMBER(2),
  LOAD_ABBR         VARCHAR2(3 BYTE),
  DOG_ID            NUMBER(5),
  USL_NUMBER        NUMBER(3),
  GOSPROG_ID        NUMBER(2),
  PROD_ID_NPR       VARCHAR2(5 BYTE),
  TONN_DECLARED     NUMBER(10,3),
  TONN_LOADED       NUMBER(10,3),
  CIST_DECLARED     NUMBER(4),
  CIST_LOADED       NUMBER(4),
  FLG_ALLOW_8_AXES  NUMBER(1),
  FLG_UPPER_SLIV    NUMBER(1),
  FLG_DOP_CIST      NUMBER(1),
  FLG_FORMA_2       NUMBER(10),
  FLG_OBOGR         NUMBER(1),
  DATE_PLAN         DATE,
  PRIM              VARCHAR2(100 BYTE),
  CENA              NUMBER(15,6),
  CENA_OTP          NUMBER(15,6),
  SUM_ZD            NUMBER(12,2),
  GR4               VARCHAR2(100 BYTE),
  K_TAR             VARCHAR2(10 BYTE),
  INPUT_DATE        DATE,
  UPDATE_DATE       DATE,
  TARIF1TONN        NUMBER(10,2)                DEFAULT 0,
  POTREB_ID         NUMBER(6),
  PLANSTRU_ID       NUMBER(20),
  NPODOG_ID         NUMBER(5),
  GROTP_ID          NUMBER(6)                   DEFAULT 0,
  DATE_CEN          DATE,
  GP_NAPR_ID        NUMBER(10),
  TONN_R            NUMBER(15,6)                DEFAULT 0,
  CIST_R            NUMBER(4)                   DEFAULT 0,
  TRANSPORT         VARCHAR2(20 BYTE),
  IS_EXP            NUMBER(1)                   DEFAULT 0,
  SUPPLIER_ID       NUMBER(6),
  APPL_TAG          VARCHAR2(6 BYTE),
  CENA_NPO          NUMBER(15,6)                DEFAULT 0,
  CENA_OTP_NPO      NUMBER(15,6)                DEFAULT 0,
  KOL_DN_NPO        NUMBER(3),
  TONN_RAZNAR       NUMBER(10,3),
  CIST_RAZNAR       NUMBER(10,3),
  ZAKAZ_ID          NUMBER(10),
  EXPED_ID          NUMBER(6),
  GU12_A_ID         NUMBER(10),
  ZAKAZ_HIST_ID     NUMBER(10),
  POKUP_DOG_ID      NUMBER(10),
  POKUP_USL_NUMBER  NUMBER(3),
  NAPR_POST_ID      NUMBER(10),
  CIST_FACT         NUMBER(5)                   DEFAULT 0,
  TONN_FACT         NUMBER(10,3)                DEFAULT 0,
  STAN_PER_ID       NUMBER(10),
  INCOTERM_ID       NUMBER(10),
  VZISK_ID          NUMBER(10),
  ZAKAZ_KOD_ISU     VARCHAR2(15 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.MONTH IS 'Заявки на отгрузку';

COMMENT ON COLUMN MASTER.MONTH.NOM_ZD IS 'Заявка';

COMMENT ON COLUMN MASTER.MONTH.STANOTP_ID IS 'Станция отправления';

COMMENT ON COLUMN MASTER.MONTH.NPR_SOBSTV_ID IS 'Собственник н/пр';

COMMENT ON COLUMN MASTER.MONTH.STAN_ID IS 'Станция назначения';

COMMENT ON COLUMN MASTER.MONTH.VETKA_ID IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.MONTH.POLUCH_ID IS 'Получатель';

COMMENT ON COLUMN MASTER.MONTH.TEX_PD_ID IS 'ТЕХ ПД';

COMMENT ON COLUMN MASTER.MONTH.NAZN_OTG_ID IS 'Назначение отгрузки';

COMMENT ON COLUMN MASTER.MONTH.LOAD_ABBR IS 'Вид транспортировки';

COMMENT ON COLUMN MASTER.MONTH.DOG_ID IS 'Договор';

COMMENT ON COLUMN MASTER.MONTH.USL_NUMBER IS 'Условие';

COMMENT ON COLUMN MASTER.MONTH.GOSPROG_ID IS 'Госпрограмма';

COMMENT ON COLUMN MASTER.MONTH.PROD_ID_NPR IS 'Нефтепродукт';

COMMENT ON COLUMN MASTER.MONTH.TONN_DECLARED IS 'Заявленно т.';

COMMENT ON COLUMN MASTER.MONTH.TONN_LOADED IS 'Отгружено т.';

COMMENT ON COLUMN MASTER.MONTH.CIST_DECLARED IS 'Заявлено цист.';

COMMENT ON COLUMN MASTER.MONTH.CIST_LOADED IS 'Отгружено цист.';

COMMENT ON COLUMN MASTER.MONTH.FLG_ALLOW_8_AXES IS '8-осные ?';

COMMENT ON COLUMN MASTER.MONTH.FLG_UPPER_SLIV IS 'Верхний слив ?';

COMMENT ON COLUMN MASTER.MONTH.FLG_DOP_CIST IS 'Цист.сверх плана?';

COMMENT ON COLUMN MASTER.MONTH.FLG_FORMA_2 IS 'Вид расчета тарифа';

COMMENT ON COLUMN MASTER.MONTH.FLG_OBOGR IS 'Обогрев цист.?';

COMMENT ON COLUMN MASTER.MONTH.DATE_PLAN IS 'Дата плана';

COMMENT ON COLUMN MASTER.MONTH.PRIM IS 'Примечание';

COMMENT ON COLUMN MASTER.MONTH.CENA IS 'Цена ЛУКОЙЛ без налогов';

COMMENT ON COLUMN MASTER.MONTH.CENA_OTP IS 'Отпускная цена ЛУКОЙЛ';

COMMENT ON COLUMN MASTER.MONTH.SUM_ZD IS 'Сумма по заданию';

COMMENT ON COLUMN MASTER.MONTH.GR4 IS 'Графа 4';

COMMENT ON COLUMN MASTER.MONTH.K_TAR IS 'Код искл. тарифа';

COMMENT ON COLUMN MASTER.MONTH.INPUT_DATE IS 'Дата ввода';

COMMENT ON COLUMN MASTER.MONTH.UPDATE_DATE IS 'Дата последнего обновления';

COMMENT ON COLUMN MASTER.MONTH.TARIF1TONN IS 'Тариф за 1 тонну';

COMMENT ON COLUMN MASTER.MONTH.POTREB_ID IS 'Потребитель';

COMMENT ON COLUMN MASTER.MONTH.PLANSTRU_ID IS 'Позиция плана';

COMMENT ON COLUMN MASTER.MONTH.NPODOG_ID IS 'Договор НПО-Клиент';

COMMENT ON COLUMN MASTER.MONTH.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.MONTH.DATE_CEN IS 'Дата цены ЛУКОЙЛ';

COMMENT ON COLUMN MASTER.MONTH.GP_NAPR_ID IS 'Получатель по госпрограмме';

COMMENT ON COLUMN MASTER.MONTH.TONN_R IS 'Тонн разнаряжено';

COMMENT ON COLUMN MASTER.MONTH.CIST_R IS 'Цист.разнаряжено';

COMMENT ON COLUMN MASTER.MONTH.TRANSPORT IS 'N транспорта';

COMMENT ON COLUMN MASTER.MONTH.IS_EXP IS '1-Экспорт, 0-по России';

COMMENT ON COLUMN MASTER.MONTH.SUPPLIER_ID IS 'Поставщик';

COMMENT ON COLUMN MASTER.MONTH.APPL_TAG IS 'Тэг приложения';

COMMENT ON COLUMN MASTER.MONTH.CENA_NPO IS 'Цена без налогов СНП';

COMMENT ON COLUMN MASTER.MONTH.CENA_OTP_NPO IS 'Отпускная цена СНП';

COMMENT ON COLUMN MASTER.MONTH.KOL_DN_NPO IS 'Кол-во дней отсрочки при продаже';

COMMENT ON COLUMN MASTER.MONTH.TONN_RAZNAR IS 'Тонн передано на место отгрузки';

COMMENT ON COLUMN MASTER.MONTH.CIST_RAZNAR IS 'Цистерн передано на место отгрузки';

COMMENT ON COLUMN MASTER.MONTH.ZAKAZ_ID IS 'Ссылка на заказ потребителя';

COMMENT ON COLUMN MASTER.MONTH.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.MONTH.GU12_A_ID IS 'Заявка на перевозку';

COMMENT ON COLUMN MASTER.MONTH.ZAKAZ_HIST_ID IS 'Ссылка на позицию заказа';

COMMENT ON COLUMN MASTER.MONTH.NAPR_POST_ID IS 'Направление поставки';

COMMENT ON COLUMN MASTER.MONTH.CIST_FACT IS 'Кол-во вагонов отгружено (для контроля на местах отгрузки)';

COMMENT ON COLUMN MASTER.MONTH.TONN_FACT IS 'Тонн отгружено (для контроля на местах отгрузки)';

COMMENT ON COLUMN MASTER.MONTH.STAN_PER_ID IS 'Станция перехода';

COMMENT ON COLUMN MASTER.MONTH.INCOTERM_ID IS 'Условия поставки';



--
-- BILLS_P_DATE_BUXG_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_DATE_BUXG_I ON MASTER.BILLS_PARUS
(DATE_BUXG)
TABLESPACE USERSINDX;


--
-- BILLS_P_DATE_KVIT_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_DATE_KVIT_I ON MASTER.BILLS_PARUS
(DATE_KVIT)
TABLESPACE USERSINDX;


--
-- BILLS_P_DATE_MOS_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_DATE_MOS_I ON MASTER.BILLS_PARUS
(DATE_MOS)
TABLESPACE USERSINDX;


--
-- BILLS_P_DATE_VYP_SF_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_DATE_VYP_SF_I ON MASTER.BILLS_PARUS
(DATE_VYP_SF)
TABLESPACE USERSINDX;


--
-- BILLS_P_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_DOG_FK_I ON MASTER.BILLS_PARUS
(DOG_ID)
TABLESPACE USERSINDX;


--
-- BILLS_P_NOM_SF_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_NOM_SF_I ON MASTER.BILLS_PARUS
(NOM_SF)
TABLESPACE USERSINDX;


--
-- BILLS_P_NOM_ZD_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_NOM_ZD_I ON MASTER.BILLS_PARUS
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- BILLS_P_NPO_SF_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_NPO_SF_I ON MASTER.BILLS_PARUS
(NPO_SF)
TABLESPACE USERSINDX;


--
-- BILLS_P_NUM_KVIT_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_NUM_KVIT_I ON MASTER.BILLS_PARUS
(NUM_KVIT)
TABLESPACE USERSINDX;


--
-- BILLS_P_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILLS_P_PK ON MASTER.BILLS_PARUS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_P_PREF_SF_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_PREF_SF_I ON MASTER.BILLS_PARUS
(PREF_SF)
TABLESPACE USERSINDX;


--
-- BILLS_P_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_PROD_FK_I ON MASTER.BILLS_PARUS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILLS_P_SUMMA_DOK_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_SUMMA_DOK_I ON MASTER.BILLS_PARUS
(SUMMA_DOK)
TABLESPACE USERSINDX;


--
-- BILLS_P_SVED_NUM_I  (Index) 
--
CREATE INDEX MASTER.BILLS_P_SVED_NUM_I ON MASTER.BILLS_PARUS
(SVED_NUM)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_GD_RAZNPOS_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RZ_PATH_GD_RAZNPOS_FK_I ON MASTER.GD_RAZN_PATH
(GD_RAZNPOS_ID)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.GD_RZ_PATH_PK ON MASTER.GD_RAZN_PATH
(ID)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RZ_PATH_PREDPR_FK_I ON MASTER.GD_RAZN_PATH
(PREDPR_ID)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RZ_PATH_STAN_FK_I ON MASTER.GD_RAZN_PATH
(STAN_ID)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_STATES_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RZ_PATH_STATES_FK_I ON MASTER.GD_RAZN_PATH
(STATES_ID)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_TIP_PATH_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RZ_PATH_TIP_PATH_FK_I ON MASTER.GD_RAZN_PATH
(TIP_PATH_ID)
TABLESPACE USERSINDX;


--
-- GD_RZ_PATH_VETKA_FK_I  (Index) 
--
CREATE INDEX MASTER.GD_RZ_PATH_VETKA_FK_I ON MASTER.GD_RAZN_PATH
(VETKA_ID)
TABLESPACE USERSINDX;


--
-- MONTH_DATE_PLAN_I  (Index) 
--
CREATE INDEX MASTER.MONTH_DATE_PLAN_I ON MASTER.MONTH
(DATE_PLAN)
TABLESPACE USERSINDX;


--
-- MONTH_FORMA_2_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_FORMA_2_FK_I ON MASTER.MONTH
(FLG_FORMA_2)
TABLESPACE USERSINDX;


--
-- MONTH_GOSPROG_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_GOSPROG_FK_I ON MASTER.MONTH
(GOSPROG_ID)
TABLESPACE USERSINDX;


--
-- MONTH_GP_NAPR_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_GP_NAPR_FK_I ON MASTER.MONTH
(GP_NAPR_ID)
TABLESPACE USERSINDX;


--
-- MONTH_GU12_I  (Index) 
--
CREATE INDEX MASTER.MONTH_GU12_I ON MASTER.MONTH
(GU12_A_ID, STAN_ID)
TABLESPACE USERSINDX;


--
-- MONTH_I_DOG_ID_PROD_ID_NPR_STA  (Index) 
--
CREATE INDEX MASTER.MONTH_I_DOG_ID_PROD_ID_NPR_STA ON MASTER.MONTH
(DOG_ID, PROD_ID_NPR, STAN_ID, PLANSTRU_ID, POLUCH_ID, 
NPODOG_ID, NOM_ZD, DATE_PLAN)
TABLESPACE USERSINDX;


--
-- MONTH_INPUT_DATE  (Index) 
--
CREATE INDEX MASTER.MONTH_INPUT_DATE ON MASTER.MONTH
(INPUT_DATE)
TABLESPACE USERSINDX;


--
-- MONTH_I_POLUCH_ID_NOM_ZD_DOG_I  (Index) 
--
CREATE INDEX MASTER.MONTH_I_POLUCH_ID_NOM_ZD_DOG_I ON MASTER.MONTH
(POLUCH_ID, NOM_ZD, DOG_ID, STAN_ID)
TABLESPACE USERSINDX;


--
-- MONTH_IS_EXP_I  (Index) 
--
CREATE INDEX MASTER.MONTH_IS_EXP_I ON MASTER.MONTH
(IS_EXP)
TABLESPACE USERSINDX;


--
-- MONTH_NAZN_OTG_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_NAZN_OTG_FK_I ON MASTER.MONTH
(NAZN_OTG_ID)
TABLESPACE USERSINDX;


--
-- MONTH_NPR_SOBSTV_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_NPR_SOBSTV_FK_I ON MASTER.MONTH
(NPR_SOBSTV_ID)
TABLESPACE USERSINDX;


--
-- MONTH_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.MONTH_PK ON MASTER.MONTH
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- MONTH_PLANSTRU_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_PLANSTRU_FK_I ON MASTER.MONTH
(PLANSTRU_ID)
TABLESPACE USERSINDX;


--
-- MONTH_POLUCH_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_POLUCH_FK_I ON MASTER.MONTH
(POLUCH_ID)
TABLESPACE USERSINDX;


--
-- MONTH_POTREB_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_POTREB_FK_I ON MASTER.MONTH
(POTREB_ID)
TABLESPACE USERSINDX;


--
-- MONTH_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_PROD_FK_I ON MASTER.MONTH
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- MONTH_STAN_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_STAN_FK_I ON MASTER.MONTH
(STAN_ID)
TABLESPACE USERSINDX;


--
-- MONTH_STANOTP_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_STANOTP_FK_I ON MASTER.MONTH
(STANOTP_ID)
TABLESPACE USERSINDX;


--
-- MONTH_SUPPLIER_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_SUPPLIER_FK_I ON MASTER.MONTH
(SUPPLIER_ID)
TABLESPACE USERSINDX;


--
-- MONTH_USL_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_USL_DOG_FK_I ON MASTER.MONTH
(DOG_ID, USL_NUMBER)
TABLESPACE USERSINDX;


--
-- MONTH_VETKA_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_VETKA_FK_I ON MASTER.MONTH
(VETKA_ID)
TABLESPACE USERSINDX;


--
-- MONTH_VID_OTGR_FK_I  (Index) 
--
CREATE INDEX MASTER.MONTH_VID_OTGR_FK_I ON MASTER.MONTH
(LOAD_ABBR)
TABLESPACE USERSINDX;


--
-- MONTH_ZAKAZ_ID_I  (Index) 
--
CREATE INDEX MASTER.MONTH_ZAKAZ_ID_I ON MASTER.MONTH
(ZAKAZ_ID)
TABLESPACE USERSINDX;


--
-- NPODOG_FK_I  (Index) 
--
CREATE INDEX MASTER.NPODOG_FK_I ON MASTER.MONTH
(NPODOG_ID)
TABLESPACE USERSINDX;


--
-- UPDATE_DATE  (Index) 
--
CREATE INDEX MASTER.UPDATE_DATE ON MASTER.MONTH
(UPDATE_DATE)
TABLESPACE USERSINDX;


--
-- FOR_NAKL  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_NAKL AS

/* НАКЛАДНЫЕ */

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pNAKL_ID NUMBER) RETURN NUMBER;

  -- Максимальный номер позиции в таблице TEMP_NAKL
  FUNCTION GetTempMaxNumPos RETURN NUMBER;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER);

  /* Очистить временную таблицу TEMP_NAKL */
  PROCEDURE EMPTY_TEMP_NAKL;

  /* Первоначальное заполнение временной таблицы TEMP_NAKL */
  PROCEDURE FILL_TEMP_NAKL (pNAKL_ID NUMBER, pSRC_REESTR_ID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER);

  /* Добавить запись в таблицу TEMP_NAKL */
  PROCEDURE ADD_TEMP_NAKL (pREESTR_ID NUMBER);

    /* Удалить запись из таблицы TEMP_NAKL */
  PROCEDURE DEL_TEMP_NAKL (pREESTR_ID NUMBER);

  /* Перенести позиции из TEMP_NAKL в REESTR */
  PROCEDURE SAVE_TEMP_NAKL (pNAKL_ID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNAKL_NUM NUMBER, pNAKL_DATE DATE, pFORMNAKL_ID NUMBER, pNOM_ZD VARCHAR2, pPROD_ID_NPR VARCHAR2,
	   pOPERNALIV_ID NUMBER, pIS_EXP NUMBER, pDOG_ID NUMBER, pSTAN_ID NUMBER, pK_TAR VARCHAR2, pNUM_KVIT VARCHAR2)
    RETURN NUMBER;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pNAKL_ID NUMBER, pNAKL_POS NUMBER);

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_NAKL_ID NUMBER) RETURN NUMBER;

/* Проверка вагона на наличие всех необходимых для печати накладной реквизитов */
FUNCTION CHECK_REESTR(pREESTR_ID NUMBER) RETURN NUMBER;

/* Ж/д наименование продукта с учетом Темп.вспышки */
FUNCTION GET_GD_NAME_NPR(pGD_NAME_NPR VARCHAR2, pT_VSP NUMBER) RETURN VARCHAR2;

/* Ж/д код продукта с учетом Темп.вспышки */
FUNCTION GET_GD_KOD_NPR(pPROD_GU12_ID VARCHAR2, pT_VSP NUMBER) RETURN VARCHAR2;

/* Аварийная карта (наименование) */
FUNCTION GET_AV_KART_NAME(pPROD_ID_NPR VARCHAR2, pPROD_AV_KART NUMBER, pT_VSP NUMBER) RETURN VARCHAR2;

/*Добавление шаблона экспортной накладной*/
FUNCTION AddShabExp(pCommit NUMBER,pId NUMBER,pFlg_dostup NUMBER,pDog_id NUMBER,pProd_id_npr VARCHAR2,
		 			pStan_id NUMBER,pPrim_dog VARCHAR2,
		 			pOsob1 VARCHAR2,pOsob2 VARCHAR2,pOsob3 VARCHAR2,pOsob4 VARCHAR2,pPol1 VARCHAR2,pPol2 VARCHAR2,
					pPol3 VARCHAR2,pPol4 VARCHAR2,pNeob1 VARCHAR2,pNeob2 VARCHAR2,pNeob3 VARCHAR2,pNeob4 VARCHAR2,
					pStan1 VARCHAR2,pStan2 VARCHAR2,pStan3 VARCHAR2,pStan4 VARCHAR2,pDorst1 VARCHAR2,pDorst2 VARCHAR2,
					pNm_gr1 VARCHAR2,pNm_gr2 VARCHAR2,pNm_gr3 VARCHAR2,pNm_gr4 VARCHAR2,pNm_gr5 VARCHAR2,pNm_gr6 VARCHAR2,
					pNm_gr7 VARCHAR2,pNm_gr8 VARCHAR2,pNm_gr9 VARCHAR2,pPlt_ot1 VARCHAR2,pPlt_ot2 VARCHAR2,pPlt_ot3 VARCHAR2,
					pPlt_ot4 VARCHAR2,pDocs1 VARCHAR2,pDocs2 VARCHAR2,pDocs3 VARCHAR2,pDocs4 VARCHAR2,pTam1 VARCHAR2,
					pTam2 VARCHAR2,pPos33 VARCHAR2,pPos34 VARCHAR2,pPos35 VARCHAR2,pPos36 VARCHAR2,pShtamp1 VARCHAR2,
					pShtamp2 VARCHAR2,pShtamp3 VARCHAR2,pShtamp4 VARCHAR2,pShtamp5 VARCHAR2,pGr1_txt_ex VARCHAR2,pGr2_txt_ex VARCHAR2,
					pMesto_pay VARCHAR2,pCnt_ved NUMBER,pTex_pd_id NUMBER) RETURN NUMBER; 


FUNCTION get_next_num RETURN NUMBER;

PROCEDURE DelShabExp(pCommit NUMBER,pId NUMBER);

END;

/

--
-- FOR_NAKL_VOZ  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_NAKL_VOZ AS

/* НАКЛАДНЫЕ */

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pNAKL_ID NUMBER) RETURN NUMBER;

  -- Максимальный номер позиции в таблице TEMP_NAKL
  FUNCTION GetTempMaxNumPos RETURN NUMBER;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER);

  /* Очистить временную таблицу TEMP_NAKL */
  PROCEDURE EMPTY_TEMP_NAKL;

  /* Первоначальное заполнение временной таблицы TEMP_NAKL */
  PROCEDURE FILL_TEMP_NAKL (pNAKL_ID NUMBER, pSRC_REESTR_ID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER);

  /* Добавить запись в таблицу TEMP_NAKL */
  PROCEDURE ADD_TEMP_NAKL (pREESTR_ID NUMBER);

    /* Удалить запись из таблицы TEMP_NAKL */
  PROCEDURE DEL_TEMP_NAKL (pREESTR_ID NUMBER);

  /* Перенести позиции из TEMP_NAKL в REESTR */
  PROCEDURE SAVE_TEMP_NAKL (pNAKL_ID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNAKL_NUM NUMBER, pNAKL_DATE DATE, pFORMNAKL_ID NUMBER,pSHABVOZ_ID NUMBER, pOPERNALIV_ID NUMBER, pPROD_ID_NPR VARCHAR2 DEFAULT NULL)
    RETURN NUMBER;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pNAKL_ID NUMBER, pNAKL_POS NUMBER);

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_NAKL_ID NUMBER) RETURN NUMBER;
/* Добавить/Изменить шаблон накладных на возврат*/
  FUNCTION AddShabVoz(pCommit NUMBER,pId NUMBER,pStanotp_id NUMBER,pTex_pd_id NUMBER,pGrotp_id NUMBER,
		  			 pStan_id NUMBER,pVetka_id NUMBER,pPoluch_id NUMBER,pFlg_forma_2 NUMBER,
		   			 pProd_id_npr VARCHAR2,pPrim VARCHAR2,pGr4 VARCHAR2,pK_tar VARCHAR2,pInput_date DATE,
					 pTransport VARCHAR2,pIs_exp NUMBER,pExped_id NUMBER,pGu12_a_id NUMBER,pVzisk_id NUMBER,
					 pGrotp_bank VARCHAR2,pGrotp_rs VARCHAR2,pTex_pd_bank VARCHAR2,pTtex_pd_rs VARCHAR2,
					 pShab_num NUMBER,pShab_date DATE) RETURN NUMBER;
  FUNCTION get_next_num RETURN NUMBER;					 
END;
/

--
-- FOR_RASPOR  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_RASPOR AS

  /* РАЗРЕШЕНИЕ на отгрузку */


  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА
     Возвращаемое занчение - ID документа */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNUM_NAR NUMBER, pDATE_NAR DATE,
	   pDATE_BEG DATE, pDATE_END DATE, pDOVER_ID NUMBER DEFAULT NULL)
    RETURN VARCHAR2;

  /* Заполнить временную таблицу TEMP_NAR_LINE */
  PROCEDURE FILL_TEMPNL (pNARIAD_ID NUMBER, pDATE_BEG DATE, pDATE_END DATE, pLOAD_TYPE_ID NUMBER);

  /* Перенести значения из TEMP_NAR_LINE в KLS_NAR_LINE */
  PROCEDURE SAVE_TEMPNL (pNARIAD_ID NUMBER);

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2);

  /* Определить дату начала действия распоряжения */
  FUNCTION GetDATE_BEG (pDATE DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN DATE;

  /* Определить дату окончания действия распоряжения */
  FUNCTION GetDATE_END (pDATE_BEG DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN DATE;
END;

/

--
-- FOR_REESTR  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Reestr AS

PROCEDURE Fill_Reestr_Param(DATE_PLAN# VARCHAR2,DATE_REE# VARCHAR2);

/* ДОБАВИТЬ/ИЗМЕНИТЬ РЕЕСТР */
FUNCTION AddReestr(pID NUMBER, pNUM_REE NUMBER, pDATE_REE DATE,
   pDATE_TO DATE, pDATE_PLAN DATE, pUSE_GRAFIK NUMBER,
   pGRAFIK_DATE_FROM DATE, pGRAFIK_DATE_TO DATE, pSTATUS NUMBER,
   pDOP_REE NUMBER) RETURN NUMBER;

/* График в виде строки */
FUNCTION GrafikToStr(pNOM_ZD VARCHAR2, pGRAFIK_TO DATE) RETURN VARCHAR2;

/* LOAD_ABBR из ГУ-12 */
FUNCTION GetLoadAbbr(pNOM_ZD VARCHAR2) RETURN VARCHAR2;

END;

/

--
-- FOR_UVED  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_UVED AS

/* НАКЛАДНЫЕ */

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pUVED_ID NUMBER) RETURN NUMBER;

  -- Максимальный номер позиции в таблице TEMP_UVED
  FUNCTION GetTempMaxNumPos RETURN NUMBER;
  
  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER);

  /* Очистить временную таблицу TEMP_UVED */
  PROCEDURE EMPTY_TEMP_UVED;

  /* Первоначальное заполнение временной таблицы TEMP_UVED */
  PROCEDURE FILL_TEMP_UVED (pUVED_ID NUMBER, pUVED_DATE DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER);

  /* Добавить запись в таблицу TEMP_UVED */
  PROCEDURE ADD_TEMP_UVED (pREESTR_ID NUMBER);
  
    /* Удалить запись из таблицы TEMP_UVED */
  PROCEDURE DEL_TEMP_UVED (pREESTR_ID NUMBER);
  
  /* Перенести позиции из TEMP_UVED в REESTR */
  PROCEDURE SAVE_TEMP_UVED (pUVED_ID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pUVED_NUM NUMBER, pUVED_DATE DATE, pLUKOMA_NUM NUMBER, pCHER_NUM NUMBER, pMPS_NUM NUMBER, pVETL_NUM NUMBER)
    RETURN NUMBER;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pUVED_ID NUMBER, pUVED_POS NUMBER);

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_UVED_ID NUMBER) RETURN NUMBER;

END;

/

--
-- FOR_NAKL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_NAKL
AS

/* НАКЛАДНЫЕ */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pNAKL_ID NUMBER) RETURN NUMBER AS
    MaxNum REESTR.NAKL_POS%TYPE;
    CurNum REESTR.NAKL_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR.NAKL_POS) as MAX_NUM
                 FROM REESTR
				WHERE NAKL_ID=pNAKL_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  -- Максимальный номер позиции в таблице TEMP_NAKL
  FUNCTION GetTempMaxNumPos RETURN NUMBER AS
    MaxNum TEMP_NAKL.NAKL_POS%TYPE;
    CurNum TEMP_NAKL.NAKL_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(NAKL_POS) as MAX_NUM
                 FROM TEMP_NAKL)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    UPDATE REESTR SET NAKL_ID=NULL, NAKL_POS=NULL WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR WHERE NAKL_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Накладную нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM NAKL WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Очистить временную таблицу TEMP_NAKL */
  PROCEDURE EMPTY_TEMP_NAKL AS
  BEGIN
    DELETE TEMP_NAKL;
  END;

  /* Первоначальное заполнение временной таблицы TEMP_NAKL */
  PROCEDURE FILL_TEMP_NAKL (pNAKL_ID NUMBER, pSRC_REESTR_ID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) AS
    vRow REESTR%ROWTYPE;
    vSved SVED%ROWTYPE;
  BEGIN
    EMPTY_TEMP_NAKL;

	IF NVL(pNAKL_ID,0)<>0 THEN
	  -- Если редактирование накладной
      INSERT INTO TEMP_NAKL (NAKL_POS, REESTR_ID, VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,VES_ALL,VES_CIST,VES_UPAK)
      SELECT
	    reestr.NAKL_POS,
  	    reestr.ID as REESTR_ID,
        KLS_VETKA_OTP.SHORT_NAME as VETKA_OTP_NAME,
	    ved_pod.POD_NUM,
	    sved.SVED_NUM,
        REESTR.NUM_CIST,
	    reestr.VES,
        SVED.DATE_OFORML,
        SVED.NOM_ZD,
        KLS_STAN.STAN_NAME,
	    KLS_PROD.ABBR_NPR as PROD_NAME,
        KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
	    poluch.SHORT_NAME as PLOUCH_NAME,
		sved.SVED_DATE,
		sved.PASP_NUM,
		KLS_VAG_STATUS.NAME as VAG_STATUS,
		reestr.VES_ALL,
		reestr.VES_CIST,
		reestr.UPAK_VES
      from reestr, sved, month, ved_pod_row, ved_pod, kls_stan, kls_vetka_otp, KLS_VAGOWNER, KLS_PROD, KLS_PREDPR poluch,kls_vag_status
      where reestr.sved_id=sved.id and sved.nom_zd=month.nom_zd(+)
        and reestr.ved_pod_row_id=ved_pod_row.id(+)
	    and ved_pod_row.ved_pod_id=ved_pod.id(+)
        and month.stan_id=kls_stan.id(+)
	    and month.poluch_id=poluch.id(+)
        and reestr.vetka_otp_id=kls_vetka_otp.id(+)
	    and sved.prod_id_npr=kls_prod.id_npr(+)
        and reestr.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		and reestr.VAG_STATUS_ID=kls_vag_status.ID(+)
        and reestr.nakl_id=pNAKL_ID
      ORDER BY
        reestr.NAKL_POS, reestr.ID;
	ELSE
	  -- Отбираем реквизиты вагона
	  BEGIN
  	    SELECT * INTO vRow FROM reestr
         WHERE ID=pSRC_REESTR_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      RETURN;
	  END;
	  -- Отбираем реквизиты сведения
	  BEGIN
  	    SELECT * INTO vSved FROM sved
         WHERE ID=vRow.SVED_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      RETURN;
  	  END;

	  -- Если добавление нового
      INSERT INTO TEMP_NAKL (NAKL_POS, REESTR_ID, VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,VES_ALL,VES_CIST,VES_UPAK)
      SELECT
 	    ROWNUM as NAKL_POS,
        REESTR_ID,
        VETKA_OTP_NAME,
        POD_NUM,
        SVED_NUM,
        NUM_CIST,
        VES,
        DATE_OFORML,
        NOM_ZD,
        STAN_NAME,
        PROD_NAME,
        VAGOWNER_NAME,
        PLOUCH_NAME,
		SVED_DATE,
		PASP_NUM,
		VAG_STATUS,
		VES_ALL,
		VES_CIST,
		UPAK_VES
      FROM
        (
        SELECT /*+ ordered */
	      reestr.ID as REESTR_ID,
          KLS_VETKA_OTP.SHORT_NAME as VETKA_OTP_NAME,
    	  ved_pod.POD_NUM,
	      sved.SVED_NUM,
          REESTR.NUM_CIST,
    	  reestr.VES,
          SVED.DATE_OFORML,
          SVED.NOM_ZD,
          KLS_STAN.STAN_NAME,
    	  KLS_PROD.ABBR_NPR as PROD_NAME,
          KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
    	  poluch.SHORT_NAME as PLOUCH_NAME,
		  sved.SVED_DATE,
		  sved.PASP_NUM,
		  KLS_VAG_STATUS.NAME as VAG_STATUS,
		  reestr.VES_ALL,
		  reestr.VES_CIST,
		  reestr.UPAK_VES
        from sved, reestr, month, ved_pod_row, ved_pod, kls_stan, kls_vetka_otp, KLS_VAGOWNER, KLS_PROD, KLS_PREDPR poluch,kls_vag_status
        where reestr.sved_id=sved.id and sved.nom_zd=month.nom_zd(+)
          and reestr.ved_pod_row_id=ved_pod_row.id(+)
    	  and ved_pod_row.ved_pod_id=ved_pod.id(+)
          and month.stan_id=kls_stan.id(+)
    	  and month.poluch_id=poluch.id(+)
          and reestr.vetka_otp_id=kls_vetka_otp.id(+)
    	  and sved.prod_id_npr=kls_prod.id_npr(+)
          and reestr.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  		  and reestr.VAG_STATUS_ID=kls_vag_status.ID(+)
          and sved.MESTO_ID=pMESTO_ID
          and sved.load_type_id=pLOAD_TYPE_ID
          and reestr.nar_line_id is not null -- Вагон заадресован
          and reestr.nakl_id is null -- не включен в накладную
          and reestr.vag_status_id=0 -- исправный
          and reestr.ves<>0 -- с весом
		  and sved.PASP_ID IS NOT NULL -- в сведении указан паспорт
          and sved.NOM_ZD=vSved.NOM_ZD -- тот же номер задания, что и в эталонном сведении
          and sved.PROD_ID_NPR=vSved.PROD_ID_NPR -- тот же продукт, что и в эталонном сведении
          and reestr.formnakl_id=vRow.FORMNAKL_ID -- тот же тип накладной, что и в эталонном вагоне
          and sved.SVED_DATE BETWEEN vSved.SVED_DATE-1 AND vSved.SVED_DATE+1
          and ((reestr.formnakl_id in (2,5) and reestr.id=pSRC_REESTR_ID) or
               (reestr.formnakl_id in (6,7)
        	    and NVL(reestr.vagowner_id,0)=
      	           (CASE
    		          WHEN pLOAD_TYPE_ID=1 AND (/*month.is_exp<>0 OR */reestr.formnakl_id<>7) AND vRow.VAGOWNER_ID=3 THEN 3
    		          ELSE NVL(reestr.vagowner_id,0)
    		        END)
        	    and NVL(reestr.vagowner_id,0)<>
      	           (CASE
    		          WHEN pLOAD_TYPE_ID=1 AND (/*month.is_exp<>0 OR */reestr.formnakl_id<>7) AND vRow.VAGOWNER_ID<>3 THEN 3
    		          ELSE -1
    		        END)
     	        )
    	      )
        ORDER BY
          NVL(ved_pod.POD_DATE,sved.DATE_OFORML),
          NVL(ved_pod_row.POD_POS,0)
        );
	END IF;
  END;

  /* Добавить запись в таблицу TEMP_NAKL */
  PROCEDURE ADD_TEMP_NAKL (pREESTR_ID NUMBER) AS
  BEGIN
    IF NVL(pREESTR_ID,0)<>0 THEN
      INSERT INTO TEMP_NAKL (NAKL_POS, REESTR_ID) VALUES (GetTempMaxNumPos, pREESTR_ID);

  	  UPDATE TEMP_NAKL
	  SET (VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,VES_ALL,VES_CIST,VES_UPAK)=
        (SELECT
          KLS_VETKA_OTP.SHORT_NAME as VETKA_OTP_NAME,
    	  ved_pod.POD_NUM,
	      sved.SVED_NUM,
          REESTR.NUM_CIST,
    	  reestr.VES,
          SVED.DATE_OFORML,
          SVED.NOM_ZD,
          KLS_STAN.STAN_NAME,
    	  KLS_PROD.ABBR_NPR as PROD_NAME,
          KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
    	  poluch.SHORT_NAME as PLOUCH_NAME,
		  sved.SVED_DATE,
		  sved.PASP_NUM,
		  KLS_VAG_STATUS.NAME as VAG_STATUS,
		  reestr.VES_ALL,
		  reestr.VES_CIST,
		  reestr.UPAK_VES
        from reestr, sved, month, ved_pod_row, ved_pod, kls_stan, kls_vetka_otp, KLS_VAGOWNER, KLS_PROD, KLS_PREDPR poluch,kls_vag_status
        where reestr.sved_id=sved.id and sved.nom_zd=month.nom_zd(+)
          and reestr.ved_pod_row_id=ved_pod_row.id(+)
    	  and ved_pod_row.ved_pod_id=ved_pod.id(+)
          and month.stan_id=kls_stan.id(+)
    	  and month.poluch_id=poluch.id(+)
          and reestr.vetka_otp_id=kls_vetka_otp.id(+)
    	  and sved.prod_id_npr=kls_prod.id_npr(+)
          and reestr.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		  and reestr.VAG_STATUS_ID=kls_vag_status.ID(+)
          and reestr.ID=pREESTR_ID)
	  WHERE REESTR_ID=pREESTR_ID
	    AND EXISTS (SELECT NULL FROM reestr WHERE reestr.ID=pREESTR_ID);
	END IF;
  END;

  /* Добавить запись в таблицу TEMP_NAKL */
  PROCEDURE DEL_TEMP_NAKL (pREESTR_ID NUMBER) AS
  BEGIN
	DELETE FROM TEMP_NAKL WHERE REESTR_ID=pREESTR_ID;
	COMMIT;
  END;


  /* Перенести позиции из TEMP_NAKL в REESTR */
  PROCEDURE SAVE_TEMP_NAKL (pNAKL_ID NUMBER) AS
    vTmp NUMBER;
  BEGIN
    IF NVL(pNAKL_ID,0)<>0 THEN
      UPDATE reestr SET NAKL_ID=NULL, NAKL_POS=NULL WHERE NAKL_ID=pNAKL_ID;
      FOR lcur IN (SELECT * FROM TEMP_NAKL)
	  LOOP
  	    AddRow(0,lcur.REESTR_ID,pNAKL_ID,lcur.NAKL_POS);
	  END LOOP;
	END IF;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNAKL_NUM NUMBER, pNAKL_DATE DATE, pFORMNAKL_ID NUMBER, pNOM_ZD VARCHAR2, pPROD_ID_NPR VARCHAR2,
	   pOPERNALIV_ID NUMBER, pIS_EXP NUMBER, pDOG_ID NUMBER, pSTAN_ID NUMBER, pK_TAR VARCHAR2, pNUM_KVIT VARCHAR2)
    RETURN NUMBER AS

	vID NAKL.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.nextval INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM NAKL
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Накладную нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE NAKL SET (NAKL_NUM, NAKL_DATE, MESTO_ID, LOAD_TYPE_ID, FORMNAKL_ID,NOM_ZD,PROD_ID_NPR,
	    IS_EXP, DOG_ID, STAN_ID, K_TAR, OPERNALIV_ID)=
	  (SELECT pNAKL_NUM, pNAKL_DATE, pMESTO_ID, pLOAD_TYPE_ID, pFORMNAKL_ID,pNOM_ZD,pPROD_ID_NPR,
	    pIS_EXP, pDOG_ID, pSTAN_ID, pK_TAR, pOPERNALIV_ID FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO NAKL (ID,NAKL_NUM, NAKL_DATE, MESTO_ID, LOAD_TYPE_ID, FORMNAKL_ID,NOM_ZD,PROD_ID_NPR,
	     IS_EXP, DOG_ID, STAN_ID, K_TAR, OPERNALIV_ID)
	  VALUES (vID, pNAKL_NUM, pNAKL_DATE, pMESTO_ID, pLOAD_TYPE_ID, pFORMNAKL_ID,pNOM_ZD,pPROD_ID_NPR,
	     pIS_EXP, pDOG_ID, pSTAN_ID, pK_TAR, pOPERNALIV_ID);
	END IF;

	-- Сохранение позиций из временной таблицы TEMP_NAKL
	SAVE_TEMP_NAKL(vID);

	-- Номер квитанции
	UPDATE REESTR SET NUM_KVIT=pNUM_KVIT WHERE ID=vID;
 
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pNAKL_ID NUMBER, pNAKL_POS NUMBER) AS
	vID REESTR.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vPos NUMBER;
  BEGIN
    vID:=pID;

	-- Проверка существования позиции
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM REESTR
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Позицию нельзя включить в накладную - вагон удален!');
	END;

	vPos:=NVL(pNAKL_POS,FOR_NAKL.GetMaxNumPos(pNAKL_ID));

	-- Обновляем позицию
	UPDATE REESTR SET NAKL_ID=pNAKL_ID, NAKL_POS=vPos WHERE ID=vID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_NAKL_ID NUMBER) RETURN NUMBER AS
	vRow REESTR%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из накладной
	BEGIN
	  SELECT * INTO vRow
	    FROM REESTR
	   WHERE ID=pREESTR_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Переносить нечего, такой записи в накладной нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM NAKL
	   WHERE ID=pNEW_NAKL_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Накладная в которую переносится отгрузка - удалена!');
	END;

    -- Переносим вагон из накладной в накладную
	AddRow(0,vRow.ID,pNEW_NAKL_ID,NULL);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;

/* Проверка вагона на наличие всех необходимых для печати накладной реквизитов */
FUNCTION CHECK_REESTR(pREESTR_ID NUMBER) RETURN NUMBER AS
BEGIN
 /*
*********************************************************************
* Процедура CheckKvit
* Назначение  - проверка окончания редактирования отгрузки
*********************************************************************
FUNCTION CheckKvit
PARAMETERS ViewMes,IsSved
PRIVATE Flag,stor_sele,m.num_pasp,m.num_rez,m.dins,m.num_otgr,m.kod_npr,m.tip,m.wes,;
        m.osc,m.vzliv,m.pl,m.kodpasp,m.gd_track,m.mesto,m.tip_otgr

  WAIT "Ждите.... Идет проверка!" WINDOW NOWAIT

  IF EMPTY(IsSved)
    IsSved=.F.
  ELSE
    IsSved=.T.
  ENDIF
  Flag=.T.
  m.num_pasp=num_pasp
  m.num_rez=num_rez
  m.dins=dins
  m.num_otgr=num_otgr
  m.kod_npr=kod_npr
  m.tip=tip
  m.wes=wes
  m.osc=osc
  m.vzliv=vzliv
  m.pl=pl
  m.kodpasp=ALLT(kodpasp)
  m.gd_track=gd_track
  m.mesto=mesto
  m.tip_otgr=tip_otgr

  stor_sele=SELECT()

  && Проверка наличия номера транспортного средства
  IF EMPTY(num_otgr)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание','Отсутствует N '+TSName('чего'))
    ENDIF
    SELECT (stor_sele)
    RETURN 'num_otgr'
  ENDIF

  IF _g_tipotgr=1
    IF !conrt_cist(num_otgr)
      IF ViewMes
        IF 1 = mes_dial(7,'Внимание','\rНедопустимый номер вагона '+;
          ALLT(m.num_otgr)+' !!!\rУточните номер!!!\r',2,;
          '\!Отказ', '\?Продолжить')
          RETURN 'num_otgr'
        ENDIF
      ENDIF
    ENDIF
  ENDIF

  && Проверка наличия накладной
  IF EMPTY(forma) OR !SEEK(forma,'FORMA')
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан тип накладной "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'forma'
  ENDIF

  && Проверка наличия пути отгрузки
  IF EMPTY(gd_track) OR !SEEK(gd_track,'TRACKS')
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан путь отгрузки "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'gd_track'
  ENDIF

  && Проверка времени и даты отгрузки
  IF EMPTY(np_data_o)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указана дата отгрузки "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'np_data_o'
  ENDIF

  && Правильность времени отгрузки
  IF EMPTY(np_timep)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указано время отгрузки "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'np_timep'
  ENDIF

  && Проверка заполнения паспорта и его соответствия справочнику
  IF EMPTY(num_pasp)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан N паспорта на н/п "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'num_pasp'
  ENDIF

  IF EMPTY(num_rez)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан N резервуара "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'num_rez'
  ENDIF

  IF EMPTY(dins)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указана дата паспорта на н/п "+TSName("у")+" "+ALLT(num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'dins'
  ENDIF

  SELECT zagpasp
  IF !SEEK(m.kodpasp,'ZAGPASP') AND ;
      (!EMPTY(m.num_pasp) OR !EMPTY(m.num_rez) OR !EMPTY(m.dins))
    && № паспорта есть, а ID в справочнике не найден
    m.kodpasp=loca_pasp(m.num_pasp,m.num_rez,m.dins,m.mesto,m.tip_otgr)
    IF ALLT(m.kodpasp)<>'нет пасп.'
      DO LogIt WITH m._g_id,evCheckDB,SYS(16),;
        'Восстановление kvit.kodpasp';
        IN logs.prg
      SELECT (stor_sele)
      REPLACE kodpasp WITH ALLT(m.kodpasp)
    ENDIF
  ENDIF
  SELECT zagpasp
  LOCATE FOR ALLT(zagpasp.num_pasp)=ALLT(m.num_pasp) ;
         AND ALLT(zagpasp.num_rez)=ALLT(m.num_rez) ;
         AND zagpasp.dins=m.dins ;
         AND ALLT(zagpasp.kodpasp)=ALLT(m.kodpasp)
  IF !FOUND() OR ALLT(m.kodpasp)='нет пасп.'
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"В справочнике не найден паспорт на н/п "+TSName("для")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'num_pasp'
  ENDIF

  IF zagpasp.kod_npr <> m.kod_npr
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Н/продукт "+TSName("в")+" "+ALLT(m.num_otgr)+" не соответствует н/продукту в паспорте")
    ENDIF
    SELECT (stor_sele)
    RETURN 'num_pasp'
  ENDIF

  SELECT (stor_sele)
  && Проверка принадлежности к дорогам СНГ
  IF m._g_tipotgr<>2 AND EMPTY(ncistdop)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указаны принадлежность к дорогам "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'numcistdop'
  ENDIF

  && Проверка собственника
  IF m._g_tipotgr<>2 AND EMPTY(tipv)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан собственник "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'tipv'
  ENDIF

  && Проверка типа вагона
  IF m._g_tipotgr<>2 AND EMPTY(tip) AND (rodv=6 or rodv=1)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан тип "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'tip'
  ENDIF

  && Проверка типа вагона
  IF m._g_tipotgr=1 AND (EMPTY(osc) OR EMPTY(wes))
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указана грузоподъемность "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'wes'
  ENDIF

  IF m._g_tipotgr<>2 AND (rodv=6 or rodv=1)

    IF !USED('cist_typ')
      USE (_g_pathdbf + 'cist_typ') ORDER TAG tip IN 0
    ENDIF

    SELECT cist_typ

    && Наличие типа цистерны в справочнике cist_typ
    Flag=SEEK(SUBSTR(m.tip,1,3),'cist_typ')
    IF !Flag
      IF ViewMes
      IF 1=mes_dial(5,'Внимание!','\rВозможно неверно указан тип '+m.tip+' '+TSName('у')+' '+ALLT(m.num_otgr)+'\rЧто делать?\r',;
        2,'\? Исправить','\! Продолжить')
        SELECT (stor_sele)
        RETURN 'tip'
      ENDIF
      ENDIF
    ENDIF

    && Соответствие типа цистерны данным указанным в CIST_TIP
    IF Flag
      IF cist_typ.gru<>m.wes OR cist_typ.koo<>m.osc
        IF ViewMes
*        IF 1=mes_dial(5,'Внимание!','\rВозможно неверно указана грузоподъемность '+TSName("у")+" "+ALLT(m.num_otgr)+'\rЧто делать?\r',;
*          2,'\? Исправить','\! Продолжить')
*          SELECT (stor_sele)
*          RETURN 'tip'
*        ENDIF
        ENDIF
      ENDIF
    ENDIF

    SELECT (stor_sele)
  ENDIF

  && Проверка взлива для случая замера МЕТР-ШТОКОМ
  IF NOT EMPTY(vzliv)

*    IF EMPTY(vzliv)
*      IF ViewMes
*        WAIT CLEAR
*        =mes_dial(7,'Внимание',"Не указан взлив "+TSName("у")+" "+ALLT(m.num_otgr))
*      ENDIF
*      SELECT (stor_sele)
*      RETURN 'vzliv'
*    ENDIF

    IF m._g_tipotgr<>2
      IF !USED('cist_vsl')
        USE (_g_pathdbf + 'cist_vsl') ORDER TAG cist_vsl IN 0
      ENDIF

      SELECT cist_vsl

      && Наличие взлива в справочнике cist_vsl
      Flag=SEEK(SUBSTR(m.tip,1,3)+STR(m.vzliv,3),'cist_vsl')
      IF !Flag
        IF ViewMes
          IF 1=mes_dial(5,'Внимание!','\rВозможно неверно указан взлив '+STR(m.vzliv,3)+' '+TSName("у")+" "+ALLT(m.num_otgr)+'\rЧто делать?\r',;
            2,'\? Исправить','\! Продолжить')
            SELECT (stor_sele)
            RETURN 'vzliv'
          ENDIF
        ENDIF
      ENDIF
    ENDIF

    SELECT (stor_sele)

    && Проверка фактической плотности
    IF EMPTY(xpl) AND !IsSved
      IF ViewMes
        WAIT CLEAR
        =mes_dial(7,'Внимание',"Не указан факт.уд.вес "+TSName("у")+" "+ALLT(m.num_otgr))
      ENDIF
      SELECT (stor_sele)
      RETURN 'xpl'
    ENDIF

  ENDIF

  SELECT (stor_sele)
  && Проверка веса
  IF (EMPTY(ves) OR EMPTY(fakt)) AND !IsSved
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан вес н/п "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'ves'
  ENDIF

*  IF EMPTY(vzliv) AND EMPTY(tara_all)
*    IF ViewMes
*      WAIT CLEAR
*      =mes_dial(7,'Внимание',"Не указан вес тары "+TSName("у")+" "+ALLT(m.num_otgr))
*    ENDIF
*    SELECT (stor_sele)
*    RETURN 'tara_all'
*  ENDIF

  IF defi_mass<>1 AND EMPTY(kol_all) AND !IsSved &&tracks.defi_mass=2
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не указан вес брутто "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'kol_all'
  ENDIF

  IF m._g_tipotgr=1 AND ves<30 AND !IsSved
    IF ViewMes
      IF 1=mes_dial(5,'Внимание!',"\rСлишком малый вес "+ALLT(STR(ves,12,3))+" "+TSName("у")+" "+ALLT(m.num_otgr)+"(возможно неверный взлив)"+"\rВы уверены, что все верно?\r",;
        2,'\? Исправить',"\! Продолжить")
        SELECT (stor_sele)
        RETURN 'ves'
      ENDIF
    ENDIF
  ENDIF

  && Проверка плательщика провозной платы
  IF m._g_tipotgr<>2 AND EMPTY(kod_tex_pd)
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не выбран плательщик тарифа "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'kod_tex_pd'
  ENDIF

  && Проверка наличия пломб
  IF m._g_tipotgr<>2 AND LEFT(kod_npr,3)<>'130' AND LEFT(kod_npr,3)<>'131' AND rodv=6 AND EMPTY(plomba1) AND !INLIST(forma,5,7) AND !IsSved
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не введена пломба 1 "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'plomba1'
  ENDIF

  IF m._g_tipotgr=1 AND LEFT(kod_npr,3)<>'130' AND LEFT(kod_npr,3)<>'131' AND rodv=6 AND EMPTY(plomba2) AND osc>4 AND !INLIST(forma,5,7) AND !IsSved
    IF ViewMes
      WAIT CLEAR
      =mes_dial(7,'Внимание',"Не введена пломба 2 "+TSName("у")+" "+ALLT(m.num_otgr))
    ENDIF
    SELECT (stor_sele)
    RETURN 'plomba2'
  ENDIF

  SELECT (stor_sele)
  WAIT CLEAR
*/
  RETURN 1;
END;


/* Ж/д наименование продукта с учетом Темп.вспышки */
FUNCTION GET_GD_NAME_NPR(pGD_NAME_NPR VARCHAR2, pT_VSP NUMBER) RETURN VARCHAR2 AS
BEGIN
/*
  IF TVsp_61
    s=STRTRAN(s,'НИЖЕ','ВЫШЕ')
  ELSE
    s=STRTRAN(s,'ВЫШЕ','НИЖЕ')
  ENDIF
*/
  RETURN pGD_NAME_NPR;
END;

/* Ж/д код продукта с учетом Темп.вспышки */
FUNCTION GET_GD_KOD_NPR(pPROD_GU12_ID VARCHAR2, pT_VSP NUMBER) RETURN VARCHAR2 AS
BEGIN
  /*
  IF TVsp_61 AND prod.kod_gr='214043'
    s='214039'
  ELSE
    IF NOT TVsp_61 AND prod.kod_gr='214039'
      s='214043'
    ELSE
      s=prod.kod_gr
    ENDIF
  ENDIF
*/
  RETURN pPROD_GU12_ID;
END;


/* Аварийная карта (наименование) */
FUNCTION GET_AV_KART_NAME(pPROD_ID_NPR VARCHAR2, pPROD_AV_KART NUMBER, pT_VSP NUMBER) RETURN VARCHAR2 AS
BEGIN
/*    IF prod.kod='90000'
    RETURN ''
  ENDIF
  IF !EMPTY(prod.av_kart)
    IF prod.av_kart>0 AND prod.kod_gr='10400' AND TVsp_61
      RETURN 'Ав.карта N 901'
    ELSE
      IF prod.av_kart<0
        RETURN ''
      ELSE
        RETURN 'Ав.карта N '+ALLT(STR(prod.av_kart))
      ENDIF
    ENDIF
  end if
*/
  RETURN 'Аварийная карта прилагается';
END;

/*Добавление шаблона экспортной накладной*/
FUNCTION AddShabExp(pCommit NUMBER,pId NUMBER,pFlg_dostup NUMBER,pDog_id NUMBER,pProd_id_npr VARCHAR2,
		 			pStan_id NUMBER,pPrim_dog VARCHAR2,
		 			pOsob1 VARCHAR2,pOsob2 VARCHAR2,pOsob3 VARCHAR2,pOsob4 VARCHAR2,pPol1 VARCHAR2,pPol2 VARCHAR2,
					pPol3 VARCHAR2,pPol4 VARCHAR2,pNeob1 VARCHAR2,pNeob2 VARCHAR2,pNeob3 VARCHAR2,pNeob4 VARCHAR2,
					pStan1 VARCHAR2,pStan2 VARCHAR2,pStan3 VARCHAR2,pStan4 VARCHAR2,pDorst1 VARCHAR2,pDorst2 VARCHAR2,
					pNm_gr1 VARCHAR2,pNm_gr2 VARCHAR2,pNm_gr3 VARCHAR2,pNm_gr4 VARCHAR2,pNm_gr5 VARCHAR2,pNm_gr6 VARCHAR2,
					pNm_gr7 VARCHAR2,pNm_gr8 VARCHAR2,pNm_gr9 VARCHAR2,pPlt_ot1 VARCHAR2,pPlt_ot2 VARCHAR2,pPlt_ot3 VARCHAR2,
					pPlt_ot4 VARCHAR2,pDocs1 VARCHAR2,pDocs2 VARCHAR2,pDocs3 VARCHAR2,pDocs4 VARCHAR2,pTam1 VARCHAR2,
					pTam2 VARCHAR2,pPos33 VARCHAR2,pPos34 VARCHAR2,pPos35 VARCHAR2,pPos36 VARCHAR2,pShtamp1 VARCHAR2,
					pShtamp2 VARCHAR2,pShtamp3 VARCHAR2,pShtamp4 VARCHAR2,pShtamp5 VARCHAR2,pGr1_txt_ex VARCHAR2,pGr2_txt_ex VARCHAR2,
					pMesto_pay VARCHAR2,pCnt_ved NUMBER,pTex_pd_id NUMBER) RETURN NUMBER 
AS
vID KLS_SHABEXP.ID%TYPE;
vTmp NUMBER;
vAdd NUMBER;
BEGIN
    -- ID
	IF pID=-1 OR pID IS NULL THEN
	  vADD:=1;
      SELECT SEQ_SHAB_EXP.nextval INTO vTmp FROM DUAL;
	  vID:=vTmp;	  
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ id
        INTO vTmp
	 	FROM kls_shabexp
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Шаблон нельзя отредактировать - он удален!');
		END IF;
	END;

	-- Обновляем 
	UPDATE KLS_SHABEXP SET (Flg_dostup,Dog_id,Prod_id_npr,Stan_id,Prim_dog,Osob1,Osob2,Osob3,Osob4,Pol1,Pol2,
					Pol3,Pol4,Neob1,Neob2,Neob3,Neob4,Stan1,Stan2,Stan3,Stan4,Dorst1,Dorst2,Nm_gr1,Nm_gr2,Nm_gr3,
					Nm_gr4,Nm_gr5,Nm_gr6,Nm_gr7,Nm_gr8,Nm_gr9,Plt_ot1,Plt_ot2,Plt_ot3,Plt_ot4,Docs1,Docs2,Docs3,
					Docs4,Tam1,Tam2,Pos33,Pos34,Pos35,Pos36,Shtamp1,Shtamp2,Shtamp3,Shtamp4,Shtamp5,Gr1_txt_ex,
					Gr2_txt_ex,Mesto_pay,Cnt_ved,Tex_pd_id)=
	  (SELECT pFlg_dostup,pDog_id,pProd_id_npr,pStan_id,pPrim_dog,pOsob1,pOsob2,pOsob3,pOsob4,pPol1,pPol2,
					pPol3,pPol4,pNeob1,pNeob2,pNeob3,pNeob4,pStan1,pStan2,pStan3,pStan4,pDorst1,pDorst2,pNm_gr1,
					pNm_gr2,pNm_gr3,pNm_gr4,pNm_gr5,pNm_gr6,pNm_gr7,pNm_gr8,pNm_gr9,pPlt_ot1,pPlt_ot2,pPlt_ot3,
					pPlt_ot4,pDocs1,pDocs2,pDocs3,pDocs4,pTam1,pTam2,pPos33,pPos34,pPos35,pPos36,pShtamp1,pShtamp2,
					pShtamp3,pShtamp4,pShtamp5,pGr1_txt_ex,pGr2_txt_ex,pMesto_pay,pCnt_ved,pTex_pd_id FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем 
      INSERT INTO KLS_SHABEXP (Id,Flg_dostup,Dog_id,Prod_id_npr,Stan_id,Prim_dog,Osob1,Osob2,Osob3,Osob4,Pol1,Pol2,
					Pol3,Pol4,Neob1,Neob2,Neob3,Neob4,Stan1,Stan2,Stan3,Stan4,Dorst1,Dorst2,Nm_gr1,Nm_gr2,Nm_gr3,
					Nm_gr4,Nm_gr5,Nm_gr6,Nm_gr7,Nm_gr8,Nm_gr9,Plt_ot1,Plt_ot2,Plt_ot3,Plt_ot4,Docs1,Docs2,Docs3,
					Docs4,Tam1,Tam2,Pos33,Pos34,Pos35,Pos36,Shtamp1,Shtamp2,Shtamp3,Shtamp4,Shtamp5,Gr1_txt_ex,
					Gr2_txt_ex,Mesto_pay,Cnt_ved,Tex_pd_id)
	  VALUES (vId,pFlg_dostup,pDog_id,pProd_id_npr,pStan_id,pPrim_dog,pOsob1,pOsob2,pOsob3,pOsob4,pPol1,pPol2,
					pPol3,pPol4,pNeob1,pNeob2,pNeob3,pNeob4,pStan1,pStan2,pStan3,pStan4,pDorst1,pDorst2,pNm_gr1,
					pNm_gr2,pNm_gr3,pNm_gr4,pNm_gr5,pNm_gr6,pNm_gr7,pNm_gr8,pNm_gr9,pPlt_ot1,pPlt_ot2,pPlt_ot3,
					pPlt_ot4,pDocs1,pDocs2,pDocs3,pDocs4,pTam1,pTam2,pPos33,pPos34,pPos35,pPos36,pShtamp1,pShtamp2,
					pShtamp3,pShtamp4,pShtamp5,pGr1_txt_ex,pGr2_txt_ex,pMesto_pay,pCnt_ved,pTex_pd_id);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
END;
						
FUNCTION get_next_num RETURN NUMBER
AS
res NUMBER;
BEGIN
	 select SEQ_SHABVOZ_NUM.nextval into res from dual;
	 return res;
END;

PROCEDURE DelShabExp(pCommit NUMBER,pId NUMBER)
AS
BEGIN
    UPDATE kls_shabexp SET flg_dostup=0 WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
END;

END;

/

--
-- FOR_NAKL_VOZ  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_NAKL_VOZ
AS

/* НАКЛАДНЫЕ */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pNAKL_ID NUMBER) RETURN NUMBER AS
    MaxNum REESTR_IN.NAKL_POS%TYPE;
    CurNum REESTR_IN.NAKL_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR_IN.NAKL_POS) as MAX_NUM
                 FROM REESTR_IN
				WHERE NAKL_ID=pNAKL_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  -- Максимальный номер позиции в таблице TEMP_NAKL
  FUNCTION GetTempMaxNumPos RETURN NUMBER AS
    MaxNum TEMP_NAKL.NAKL_POS%TYPE;
    CurNum TEMP_NAKL.NAKL_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(NAKL_POS) as MAX_NUM
                 FROM TEMP_NAKL)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    UPDATE REESTR_IN SET NAKL_ID=NULL, NAKL_POS=NULL WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR_IN WHERE NAKL_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Накладную нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM NAKL WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Очистить временную таблицу TEMP_NAKL */
  PROCEDURE EMPTY_TEMP_NAKL AS
  BEGIN
    DELETE TEMP_NAKL;
  END;

  /* Первоначальное заполнение временной таблицы TEMP_NAKL */
  PROCEDURE FILL_TEMP_NAKL (pNAKL_ID NUMBER, pSRC_REESTR_ID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) AS
    vRow REESTR_IN%ROWTYPE;
    vSved SVED_IN%ROWTYPE;
  BEGIN
    EMPTY_TEMP_NAKL;

	IF NVL(pNAKL_ID,0)<>0 THEN
	  -- Если редактирование накладной
      INSERT INTO TEMP_NAKL (NAKL_POS, REESTR_ID, SVED_NUM,  NUM_CIST, DATE_OFORML,
 	    VAGOWNER_NAME, SVED_DATE,VES_CIST)
      SELECT
	    reestr_in.NAKL_POS,
  	    reestr_in.ID as REESTR_ID,
	    sved_in.SVED_NUM,
        REESTR_in.NUM_CIST,
        SVED_IN.DATE_OFORML,
        KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
		sved_in.SVED_DATE,
		reestr_in.VES_CIST
      from reestr_in, sved_in, KLS_VAGOWNER
      where reestr_in.sved_in_id=sved_in.id 
        and reestr_in.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
        and reestr_in.nakl_id=pNAKL_ID
      ORDER BY
        reestr_in.NAKL_POS, reestr_in.ID;
	ELSE
	  -- Отбираем реквизиты вагона
	  BEGIN
  	    SELECT * INTO vRow FROM reestr_in
         WHERE ID=pSRC_REESTR_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      RETURN;
	  END;
	  -- Отбираем реквизиты сведения
	  BEGIN
  	    SELECT * INTO vSved FROM sved_in
         WHERE ID=vRow.SVED_IN_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      RETURN;
  	  END;

	  -- Если добавление нового
      INSERT INTO TEMP_NAKL (NAKL_POS, REESTR_ID, SVED_NUM,  NUM_CIST, DATE_OFORML,
 	    VAGOWNER_NAME, SVED_DATE,VES_CIST)
      SELECT
 	    ROWNUM as NAKL_POS,
        REESTR_ID,
        SVED_NUM,
        NUM_CIST,
        DATE_OFORML,
        VAGOWNER_NAME,
		SVED_DATE,
		VES_CIST
      FROM
        (
        SELECT /*+ ordered */
	      reestr_in.ID as REESTR_ID,
	      sved_in.SVED_NUM,
          REESTR_in.NUM_CIST,
          SVED_in.DATE_OFORML,
          KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
		  sved_in.SVED_DATE,
		  reestr_in.VES_CIST
        from reestr_in, sved_in, KLS_VAGOWNER
        where reestr_in.sved_in_id=sved_in.id  
          and reestr_in.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
          and sved_in.MESTO_ID=pMESTO_ID
          and sved_in.PROD_ID_NPR=vSved.PROD_ID_NPR -- тот же продукт, что и в эталонном сведении
          and reestr_in.nakl_id is null -- не включен в накладную
		  and reestr_in.plomba1||' '<>' ' -- если введена пломба 1
          and sved_in.SVED_DATE BETWEEN vSved.SVED_DATE-1 AND vSved.SVED_DATE+1
        ORDER BY
          sved_in.SVED_DATE,
          sved_in.SVED_NUM,
          reestr_in.SVED_POS
        );
	END IF;
  END;

  /* Добавить запись в таблицу TEMP_NAKL */
  PROCEDURE ADD_TEMP_NAKL (pREESTR_ID NUMBER) AS
  BEGIN
    IF NVL(pREESTR_ID,0)<>0 THEN
      INSERT INTO TEMP_NAKL (NAKL_POS, REESTR_ID) VALUES (GetTempMaxNumPos, pREESTR_ID);

  	  UPDATE TEMP_NAKL
	  SET (SVED_NUM,  NUM_CIST, DATE_OFORML,
 	    VAGOWNER_NAME,SVED_DATE,VES_CIST)=
        (SELECT
	      sved_in.SVED_NUM,
          REESTR_in.NUM_CIST,
          SVED_in.DATE_OFORML,
          KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
		  sved_in.SVED_DATE,
		  reestr_in.VES_CIST
        from reestr_in, sved_in, KLS_VAGOWNER
        where reestr_in.sved_in_id=sved_in.id 
          and reestr_in.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
          and reestr_in.ID=pREESTR_ID)
	  WHERE REESTR_ID=pREESTR_ID
	    AND EXISTS (SELECT NULL FROM reestr_in WHERE reestr_in.ID=pREESTR_ID);
	END IF;
  END;

  /* Добавить запись в таблицу TEMP_NAKL */
  PROCEDURE DEL_TEMP_NAKL (pREESTR_ID NUMBER) AS
  BEGIN
	DELETE FROM TEMP_NAKL WHERE REESTR_ID=pREESTR_ID;
	COMMIT;
  END;


  /* Перенести позиции из TEMP_NAKL в REESTR_IN */
  PROCEDURE SAVE_TEMP_NAKL (pNAKL_ID NUMBER) AS
    vTmp NUMBER;
  BEGIN
    IF NVL(pNAKL_ID,0)<>0 THEN
      UPDATE reestr_in SET NAKL_ID=NULL, NAKL_POS=NULL WHERE NAKL_ID=pNAKL_ID;
      FOR lcur IN (SELECT * FROM TEMP_NAKL)
	  LOOP
  	    AddRow(0,lcur.REESTR_ID,pNAKL_ID,lcur.NAKL_POS);
	  END LOOP;
	END IF;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNAKL_NUM NUMBER, pNAKL_DATE DATE, pFORMNAKL_ID NUMBER,pSHABVOZ_ID NUMBER, pOPERNALIV_ID NUMBER, pPROD_ID_NPR VARCHAR2 DEFAULT NULL)
    RETURN NUMBER AS

	vID NAKL.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.nextval INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM NAKL
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Накладную нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE NAKL SET (NAKL_NUM, NAKL_DATE, MESTO_ID, LOAD_TYPE_ID, FORMNAKL_ID,SHABVOZ_ID, OPERNALIV_ID, PROD_ID_NPR)=
	  (SELECT pNAKL_NUM, pNAKL_DATE, pMESTO_ID, pLOAD_TYPE_ID, pFORMNAKL_ID,pSHABVOZ_ID, pOPERNALIV_ID, pPROD_ID_NPR FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO NAKL (ID,NAKL_NUM, NAKL_DATE, MESTO_ID, LOAD_TYPE_ID, FORMNAKL_ID,SHABVOZ_ID, OPERNALIV_ID, PROD_ID_NPR)
	  VALUES (vID, pNAKL_NUM, pNAKL_DATE, pMESTO_ID, pLOAD_TYPE_ID, pFORMNAKL_ID,pSHABVOZ_ID, pOPERNALIV_ID, pPROD_ID_NPR);
	END IF;

	-- Сохранение позиций из временной таблицы TEMP_NAKL
	SAVE_TEMP_NAKL(vID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pNAKL_ID NUMBER, pNAKL_POS NUMBER) AS
	vID REESTR_in.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vPos NUMBER;
  BEGIN
    vID:=pID;

	-- Проверка существования позиции
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM REESTR_IN
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Позицию нельзя включить в накладную - вагон удален!');
	END;

	vPos:=NVL(pNAKL_POS,FOR_NAKL.GetMaxNumPos(pNAKL_ID));

	-- Обновляем позицию
	UPDATE REESTR_IN SET NAKL_ID=pNAKL_ID, NAKL_POS=vPos WHERE ID=vID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_NAKL_ID NUMBER) RETURN NUMBER AS
	vRow REESTR_IN%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из накладной
	BEGIN
	  SELECT * INTO vRow
	    FROM REESTR_IN
	   WHERE ID=pREESTR_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Переносить нечего, такой записи в накладной нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM NAKL
	   WHERE ID=pNEW_NAKL_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Накладная в которую переносится отгрузка - удалена!');
	END;

    -- Переносим вагон из накладной в накладную
	AddRow(0,vRow.ID,pNEW_NAKL_ID,NULL);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;

FUNCTION AddShabVoz(pCommit NUMBER,pId NUMBER,pStanotp_id NUMBER,pTex_pd_id NUMBER,pGrotp_id NUMBER,
		  			 pStan_id NUMBER,pVetka_id NUMBER,pPoluch_id NUMBER,pFlg_forma_2 NUMBER,
		   					 pProd_id_npr VARCHAR2,pPrim VARCHAR2,pGr4 VARCHAR2,pK_tar VARCHAR2,pInput_date DATE,
							 pTransport VARCHAR2,pIs_exp NUMBER,pExped_id NUMBER,pGu12_a_id NUMBER,pVzisk_id NUMBER,
							 pGrotp_bank VARCHAR2,pGrotp_rs VARCHAR2,pTex_pd_bank VARCHAR2,pTtex_pd_rs VARCHAR2,pShab_num NUMBER,
							 pShab_date DATE) RETURN NUMBER 
AS
vID KLS_SHABVOZ.ID%TYPE;
vTmp NUMBER;
vAdd NUMBER;
BEGIN
    -- ID
	IF pID||' '=' ' OR pID IS NULL THEN
	  vADD:=1;
      SELECT SEQ_SHAB_VOZ.nextval INTO vTmp FROM DUAL;
	  vID:=vTmp;	  
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ ID
        INTO vTmp
	 	FROM kls_shabvoz
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Шаблон нельзя отредактировать - он удален!');
		END IF;
	END;

	-- Обновляем 
	UPDATE KLS_SHABVOZ SET (id,stanotp_id,tex_pd_id,grotp_id,stan_id,vetka_id,poluch_id,flg_forma_2,
		   					 prod_id_npr,prim,gr4,k_tar,input_date,transport,is_exp,exped_id,gu12_a_id,
							 vzisk_id,grotp_bank,grotp_rs,tex_pd_bank,tex_pd_rs,shab_num,shab_date)=
	  (SELECT vId,pStanotp_id,pTex_pd_id,pGrotp_id,pStan_id,pVetka_id,pPoluch_id,pFlg_forma_2,pProd_id_npr,
	  		  pPrim,pGr4,pK_tar,pInput_date,pTransport,pIs_exp,pExped_id,pGu12_a_id,pVzisk_id,pGrotp_bank,pGrotp_rs,
			  pTex_pd_bank,pTtex_pd_rs,pShab_num,pShab_date FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем 
      INSERT INTO KLS_SHABVOZ (Id,stanotp_id,tex_pd_id,grotp_id,stan_id,vetka_id,poluch_id,flg_forma_2,
		   					 prod_id_npr,prim,gr4,k_tar,input_date,transport,is_exp,exped_id,gu12_a_id,
							 vzisk_id,grotp_bank,grotp_rs,tex_pd_bank,tex_pd_rs,shab_num,shab_date)
	  VALUES (vId,pStanotp_id,pTex_pd_id,pGrotp_id,pStan_id,pVetka_id,pPoluch_id,pFlg_forma_2,pProd_id_npr,
	  		  pPrim,pGr4,pK_tar,pInput_date,pTransport,pIs_exp,pExped_id,pGu12_a_id,pVzisk_id,pGrotp_bank,pGrotp_rs,
			  pTex_pd_bank,pTtex_pd_rs,pShab_num,pShab_date);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
END;
						
FUNCTION get_next_num RETURN NUMBER
AS
res NUMBER;
BEGIN
	 select SEQ_SHABVOZ_NUM.nextval into res from dual;
	 return res;
END;

END;
/

--
-- FOR_RASPOR  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_RASPOR AS

  /* РАЗРЕШЕНИЕ на отгрузку */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR WHERE NAR_LINE_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Позицию разрешения нельзя удалить - есть отгрузка!');
	END IF;

    DELETE FROM KLS_NAR_LINE WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM KLS_NAR_LINE WHERE NARIAD_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Разрешение нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM KLS_NARIAD WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Заполнить временную таблицу TEMP_NAR_LINE */
  PROCEDURE FILL_TEMPNL (pNARIAD_ID NUMBER, pDATE_BEG DATE, pDATE_END DATE, pLOAD_TYPE_ID NUMBER) AS
  BEGIN
    DELETE FROM TEMP_NAR_LINE;

	INSERT INTO TEMP_NAR_LINE (NOM_ZD,KOL,VES,FACT_KOL,FACT_VES,TONN_REE)
    SELECT /*+ RULE */
      NOM_ZD,
      SUM(KOL) as KOL,
      SUM(VES) as VES,
      SUM(FACT_KOL) as FACT_KOL,
      SUM(FACT_VES) as FACT_VES,
	  SUM(TONN_REE) as TONN_REE
    FROM
    (
	  SELECT
	    b.NOM_ZD,
   	    0 as KOL,
	    0 as VES,
	    0 as FACT_KOL,
	    0 as FACT_VES,
  	    SUM(b.TONN_REE) as TONN_REE
	  FROM MONTH_REESTR a, MONTH_REESTR_POS b
	  WHERE a.ID=b.MONTH_REESTR_ID
	    AND a.DATE_REE BETWEEN pDATE_BEG AND pDATE_END
	    AND b.PRIORITY>=0
	  GROUP BY b.NOM_ZD
	  UNION ALL
	  SELECT
	    b.NOM_ZD,
   	    SUM(b.KOL) as KOL,
	    SUM(b.VES) as VES,
	    SUM(b.FACT_KOL) as FACT_KOL,
	    SUM(b.FACT_VES) as FACT_VES,
	    0 as TONN_REE
       FROM KLS_NAR_LINE b, KLS_NARIAD a
	   WHERE a.ID=b.NARIAD_ID
	     AND b.NARIAD_ID=pNARIAD_ID
	   GROUP BY b.NOM_ZD
    )
    GROUP BY NOM_ZD;

	UPDATE TEMP_NAR_LINE a SET (MON_KOL,MON_VES,MON_FACT_KOL,MON_FACT_VES,STAN_NAME,PROD_NAME,POLUCH_NAME,NORMOTGR,LOAD_TYPE_ID)=
	(SELECT MONTH.CIST_RAZNAR, MONTH.TONN_RAZNAR, MONTH.CIST_FACT, MONTH.TONN_FACT, KLS_STAN.STAN_NAME,
            KLS_PROD.ABBR_NPR, KLS_PREDPR.SHORT_NAME, NVL(KLS_PROD.NORMOTGR,0),KLS_VID_OTGR.LOAD_TYPE_ID
	   FROM MONTH, KLS_STAN, KLS_PROD, KLS_PREDPR, KLS_VID_OTGR
	  WHERE MONTH.NOM_ZD=a.NOM_ZD
	    AND MONTH.STAN_ID=KLS_STAN.ID
		AND MONTH.PROD_ID_NPR=KLS_PROD.ID_NPR
		AND MONTH.POLUCH_ID=KLS_PREDPR.ID
		AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR)
	WHERE EXISTS
	(SELECT NULL FROM MONTH WHERE MONTH.NOM_ZD=a.NOM_ZD);
	
	DELETE FROM TEMP_NAR_LINE WHERE LOAD_TYPE_ID<>pLOAD_TYPE_ID;
  END;

  /* Перенести значения из TEMP_NAR_LINE в KLS_NAR_LINE */
  PROCEDURE SAVE_TEMPNL (pNARIAD_ID NUMBER) AS
  BEGIN
    IF NVL(pNARIAD_ID,0)<>0 THEN
	  FOR lcur IN (SELECT * FROM TEMP_NAR_LINE) LOOP
	    IF lcur.KOL>0 OR lcur.VES>0 THEN
		  -- Добавим позицию
          UPDATE KLS_NAR_LINE SET VES=lcur.VES, KOL=lcur.KOL
		  WHERE NARIAD_ID=pNARIAD_ID AND NOM_ZD=lcur.NOM_ZD;
          IF SQL%NOTFOUND THEN
		    INSERT INTO KLS_NAR_LINE (NARIAD_ID,NOM_ZD,KOL,VES)
			 VALUES (pNARIAD_ID,lcur.NOM_ZD,lcur.KOL,lcur.VES);
		  END IF;
		ELSE
		  -- Удалить позицию
		  BEGIN
            DELETE FROM  KLS_NAR_LINE WHERE NARIAD_ID=pNARIAD_ID AND NOM_ZD=lcur.NOM_ZD;
		  EXCEPTION
		    WHEN OTHERS THEN
              UPDATE KLS_NAR_LINE SET VES=0, KOL=0
		      WHERE NARIAD_ID=pNARIAD_ID AND NOM_ZD=lcur.NOM_ZD;
		  END;
		END IF;
	  END LOOP;
	END IF;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNUM_NAR NUMBER, pDATE_NAR DATE,
	   pDATE_BEG DATE, pDATE_END DATE, pDOVER_ID NUMBER DEFAULT NULL)
    RETURN VARCHAR2 AS

	vID KLS_NARIAD.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_NARIAD.nextval INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM KLS_NARIAD
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Разрешение на отгрузку нельзя отредактировать - оно удалено!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE KLS_NARIAD SET (NUM_NAR, DATE_NAR, DATE_BEG, DATE_END, MESTO_ID, LOAD_TYPE_ID,DOVER_ID)=
	  (SELECT pNUM_NAR, pDATE_NAR, pDATE_BEG, pDATE_END, pMESTO_ID, pLOAD_TYPE_ID, pDOVER_ID FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO KLS_NARIAD (ID,NUM_NAR, DATE_NAR, DATE_BEG, DATE_END, MESTO_ID, LOAD_TYPE_ID,DOVER_ID)
	  VALUES (vID, pNUM_NAR, pDATE_NAR, pDATE_BEG, pDATE_END, pMESTO_ID, pLOAD_TYPE_ID, pDOVER_ID);
	END IF;

	-- Сохранение показателей паспорта в сведении
	SAVE_TEMPNL(vID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Определить дату начала действия распоряжения */
  FUNCTION GetDATE_BEG (pDATE DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN DATE AS
	vRES DATE;
  BEGIN
    IF pLOAD_TYPE_ID<>1 THEN
	  RETURN TRUNC(pDATE,'MONTH');
	END IF;
    BEGIN
      SELECT
	    MAX(a.DATE_REE) INTO vRES
      FROM MONTH_REESTR a, MONTH_REESTR_POS b
	  WHERE a.ID=b.MONTH_REESTR_ID;
    EXCEPTION
	  WHEN OTHERS THEN
	    vRES:=pDATE;
	END;
	IF vRES IS NULL THEN
	  vRES:=pDATE;
	END IF;
    RETURN vRES;
  END;


  /* Определить дату окончания действия распоряжения */
  FUNCTION GetDATE_END (pDATE_BEG DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN DATE AS
    vS VARCHAR2(100);
	vDN NUMBER;
	vRES DATE;
  BEGIN
    BEGIN
      IF pLOAD_TYPE_ID=1 THEN
	    vS:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','RASPOR_AGE#1',FOR_INIT.GetCurrUser);
	  ELSE
	    vS:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','RASPOR_AGE#2',FOR_INIT.GetCurrUser);
	  END IF;
	  IF vS='END_MONTH' THEN
	    RETURN LAST_DAY(pDATE_BEG);
	  ELSE
	    vDN:=TO_NUMBER(vS);
	  END IF;
	EXCEPTION
	  WHEN OTHERS THEN
  	    vDN:=1;
	END;
	IF vDN<=0 THEN
	  vDN:=1;
	END IF;
    BEGIN
	  select max(value) into vRES
	  from (select value from kls_dates a where is_work=1 and value>=pDATE_BEG order by value) where rownum<=vDN;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRES:=pDATE_BEG+vDN-1;
	END;
    RETURN vRES;
  END;

END;

/

--
-- FOR_REESTR  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Reestr
AS

-- Заполнить параметры реестра
   PROCEDURE fill_reestr_param (
      date_plan#   VARCHAR2,
      date_ree#    VARCHAR2
   ) AS
   BEGIN
      DELETE FROM TEMP_REESTR_PARAMS
            WHERE terminal_name = For_Init.getcurrterm
              AND osuser_name = For_Init.getcurruser;

      INSERT INTO TEMP_REESTR_PARAMS
                  (date_plan,
                   datetime_report
                  )
           VALUES (TO_DATE (date_plan#, 'dd.mm.yyyy'),
                   TO_DATE (SUBSTR(date_ree#,1,16),'dd.mm.yyyy hh24:mi')
                  );

      COMMIT;
   END;


/* ДОБАВИТЬ/ИЗМЕНИТЬ РЕЕСТР */
FUNCTION AddReestr(pID NUMBER, pNUM_REE NUMBER, pDATE_REE DATE,
   pDATE_TO DATE, pDATE_PLAN DATE, pUSE_GRAFIK NUMBER,
   pGRAFIK_DATE_FROM DATE, pGRAFIK_DATE_TO DATE, pSTATUS NUMBER,
   pDOP_REE NUMBER) RETURN NUMBER AS

	vID NUMBER;
	vADD NUMBER;
  BEGIN
    -- ID
	IF NVL(pID,0)<=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Обновляем
	UPDATE MONTH_REESTR SET (NUM_REE, DATE_REE, DATE_TO, DATE_PLAN,
	  USE_GRAFIK, GRAFIK_DATE_FROM, GRAFIK_DATE_TO, STATUS, DOP_REE)=
	  (SELECT pNUM_REE, pDATE_REE, pDATE_TO, pDATE_PLAN,
	  pUSE_GRAFIK, pGRAFIK_DATE_FROM, pGRAFIK_DATE_TO, pSTATUS, pDOP_REE FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем заказ
      INSERT INTO MONTH_REESTR (ID, NUM_REE, DATE_REE, DATE_TO, DATE_PLAN,
	  USE_GRAFIK, GRAFIK_DATE_FROM, GRAFIK_DATE_TO, STATUS, DOP_REE)
	  VALUES (vID, pNUM_REE, pDATE_REE, pDATE_TO, pDATE_PLAN,
	  pUSE_GRAFIK, pGRAFIK_DATE_FROM, pGRAFIK_DATE_TO, pSTATUS, pDOP_REE);
	END IF;
	RETURN vID;
  END;

/* График в виде строки */
FUNCTION GrafikToStr(pNOM_ZD VARCHAR2, pGRAFIK_TO DATE) RETURN VARCHAR2 AS
    vGRAFIK VARCHAR2(2000);
	vPART VARCHAR2(2000);
	vPREV_DAY NUMBER(2);
	vPREV_MON NUMBER(2);
	vCUR_DAY NUMBER(2);
	vCUR_MON NUMBER(2);
	vLAST_DAY NUMBER(2);
	vLAST_MON NUMBER(2);
	vCUR_VAG NUMBER(5);
	vPREV_VAG NUMBER(5);
	vREPEAT NUMBER(1);
BEGIN
  vLAST_DAY:=0;
  vPREV_DAY:=0;
  vPREV_MON:=0;
  vPREV_VAG:=0;
  vGRAFIK:='';
  FOR lcur IN (SELECT gu12_br.DATE_R as DATE_LOAD, SUM(gu12_br.KOL_VAG) as KOL_VAG 
                   FROM gu12_a,gu12_b,gu12_br,month
                  WHERE month.nom_zd=pNOM_ZD
                    AND month.GU12_A_ID=gu12_a.id
                    AND gu12_a.id=gu12_b.id_a
                    AND gu12_b.STAN_ID=month.STAN_ID
                    AND gu12_b.id=gu12_br.id_b
                    AND gu12_br.date_r<=pGRAFIK_TO
			  	    AND gu12_b.ISCOR<>2
                  GROUP BY gu12_br.DATE_R
				  HAVING SUM(gu12_br.KOL_VAG)>0
                  ORDER BY gu12_br.DATE_R)
  LOOP
	vCUR_DAY:=TO_NUMBER(TO_CHAR(lcur.DATE_LOAD,'DD'));
	vCUR_MON:=TO_NUMBER(TO_CHAR(lcur.DATE_LOAD,'MM'));
	vCUR_VAG:=lcur.KOL_VAG;
	  
	IF vPREV_DAY>0 THEN
      -- Уже были
      IF vCUR_MON<>vPREV_MON OR vCUR_VAG<>vPREV_VAG THEN
         -- Изменился месяц или кол-во вагонов
		IF vREPEAT=1 THEN
		  vPART:='по '||vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
		ELSE   
		  vPART:=vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
		END IF;
		IF vGRAFIK||' '<>' ' THEN  
 		  vGRAFIK:=vGRAFIK||'; '||vPART;
		ELSE  
 		  vGRAFIK:=vPART;
		END IF;  
		vREPEAT:=0;
		vPART:=TRIM(TO_CHAR(vCUR_VAG))||'ц - '||TRIM(TO_CHAR(vCUR_DAY,'00'));
 	  ELSE
		vPART:=vPART||','||TRIM(TO_CHAR(vCUR_DAY,'00'));
		vREPEAT:=1;
	  END IF;
	ELSE
	  -- В первый раз
	  vPART:=TRIM(TO_CHAR(vCUR_VAG))||'ц - '||TRIM(TO_CHAR(vCUR_DAY,'00'));
	  vREPEAT:=0;
	END IF;
	vPREV_DAY:=vCUR_DAY;
	vPREV_MON:=vCUR_MON;
	vPREV_VAG:=vCUR_VAG;
  END LOOP;
  IF vPREV_DAY>0 THEN
    IF vREPEAT=1 THEN
	  vPART:='по '||vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
    ELSE   
	  vPART:=vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
	END IF;
	IF vGRAFIK||' '<>' ' THEN  
 	  vGRAFIK:=vGRAFIK||'; '||vPART;
	ELSE  
 	  vGRAFIK:=vPART;
	END IF;  
  END IF;

  RETURN vGRAFIK;	
END;


/* График в виде строки */
FUNCTION GetLoadAbbr(pNOM_ZD VARCHAR2) RETURN VARCHAR2 AS
    vRES VARCHAR2(30);
	vZPT VARCHAR2(10);
BEGIN
  vRES:='';
  vZPT:='';
  FOR lcur IN (SELECT DISTINCT
			        CASE 
                      WHEN gu12_b.PRINVAG_ID=207 THEN 'МПС'
				      WHEN NVL(C.ID,0)<>0 AND c.LOAD_ABBR||' ' <> ' ' THEN c.LOAD_ABBR
				      ELSE 'СОБ'
	  			    END as LOAD_ABBR   
                   FROM month,gu12_a,gu12_b,kls_gd_sobstvvag c
                  WHERE month.nom_zd=pNOM_ZD
                    AND month.GU12_A_ID=gu12_a.id
                    AND gu12_a.id=gu12_b.id_a
                    AND month.STAN_ID=gu12_b.STAN_ID
					AND month.LOAD_ABBR not in ('САМ','КНТ')
			  	    AND gu12_b.ISCOR<>2
					AND gu12_b.SOBSTVVAG_ID=C.ID(+)
				  UNION
                  SELECT DISTINCT LOAD_ABBR
                   FROM month
                  WHERE month.nom_zd=pNOM_ZD
                    AND month.LOAD_ABBR in ('САМ','КНТ'))
  LOOP
	vRES:=vRES||vZPT||lcur.LOAD_ABBR;
	vZPT:=', ';
  END LOOP;
  RETURN vRES;	
END;
  
END;

/

--
-- FOR_UVED  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_UVED
AS

/* НАКЛАДНЫЕ */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pUVED_ID NUMBER) RETURN NUMBER AS
    MaxNum REESTR.UVED_POS%TYPE;
    CurNum REESTR.UVED_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR.UVED_POS) as MAX_NUM
                 FROM REESTR
				WHERE UVED_ID=pUVED_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  -- Максимальный номер позиции в таблице TEMP_UVED
  FUNCTION GetTempMaxNumPos RETURN NUMBER AS
    MaxNum TEMP_UVED.UVED_POS%TYPE;
    CurNum TEMP_UVED.UVED_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(UVED_POS) as MAX_NUM
                 FROM TEMP_UVED)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;
  
  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    UPDATE REESTR SET UVED_ID=NULL, UVED_POS=NULL WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR WHERE UVED_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Накладную нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM UVED WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Очистить временную таблицу TEMP_UVED */
  PROCEDURE EMPTY_TEMP_UVED AS
  BEGIN
    DELETE TEMP_UVED;
  END;

  /* Первоначальное заполнение временной таблицы TEMP_UVED */
  PROCEDURE FILL_TEMP_UVED (pUVED_ID NUMBER, pUVED_DATE DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) AS
  BEGIN
    EMPTY_TEMP_UVED;
	
	IF NVL(pUVED_ID,0)<>0 THEN
	  -- Если редактирование накладной
      INSERT INTO TEMP_UVED (UVED_POS, REESTR_ID, VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,NAKL_NUM,VES_ALL,VES_CIST,VES_UPAK) 
      SELECT
	    reestr.UVED_POS,
  	    reestr.ID as REESTR_ID,
        KLS_VETKA_OTP.SHORT_NAME as VETKA_OTP_NAME,
	    ved_pod.POD_NUM,
	    sved.SVED_NUM,
        REESTR.NUM_CIST,
	    reestr.VES,
        SVED.DATE_OFORML,
        SVED.NOM_ZD,
        KLS_STAN.STAN_NAME,
	    KLS_PROD.ABBR_NPR as PROD_NAME,
        KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
	    poluch.SHORT_NAME as PLOUCH_NAME,
		sved.SVED_DATE,
		sved.PASP_NUM,
		KLS_VAG_STATUS.NAME as VAG_STATUS,
        nakl.NAKL_NUM,
		reestr.VES_ALL,
		reestr.VES_CIST,
		reestr.UPAK_VES
      from reestr, sved, month, ved_pod_row, ved_pod, kls_stan, kls_vetka_otp, KLS_VAGOWNER, KLS_PROD, KLS_PREDPR poluch,kls_vag_status,nakl
      where reestr.sved_id=sved.id and sved.nom_zd=month.nom_zd(+)
        and reestr.ved_pod_row_id=ved_pod_row.id(+) 
	    and ved_pod_row.ved_pod_id=ved_pod.id(+)
        and month.stan_id=kls_stan.id(+)
	    and month.poluch_id=poluch.id(+)
        and reestr.vetka_otp_id=kls_vetka_otp.id(+)
	    and sved.prod_id_npr=kls_prod.id_npr(+)
        and reestr.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		and reestr.VAG_STATUS_ID=kls_vag_status.ID(+)
		and reestr.NAKL_ID=nakl.ID(+)
        and reestr.UVED_id=pUVED_ID
      ORDER BY
        reestr.UVED_POS, reestr.ID;
	ELSE
	  -- Если добавление нового	    
      INSERT INTO TEMP_UVED (UVED_POS, REESTR_ID, VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,NAKL_NUM,VES_ALL,VES_CIST,VES_UPAK) 
      SELECT
 	    ROWNUM as UVED_POS,
        REESTR_ID,
        VETKA_OTP_NAME,
        POD_NUM,
        SVED_NUM,
        NUM_CIST,
        VES,
        DATE_OFORML,
        NOM_ZD,
        STAN_NAME,
        PROD_NAME,
        VAGOWNER_NAME,
        PLOUCH_NAME,
		SVED_DATE,
		PASP_NUM,
		VAG_STATUS,
		NAKL_NUM,
		VES_ALL,
		VES_CIST,
		UPAK_VES
      FROM
        (
        SELECT
	      reestr.ID as REESTR_ID,
          KLS_VETKA_OTP.SHORT_NAME as VETKA_OTP_NAME,
    	  ved_pod.POD_NUM,
	      sved.SVED_NUM,
          REESTR.NUM_CIST,
    	  reestr.VES,
          SVED.DATE_OFORML,
          SVED.NOM_ZD,
          KLS_STAN.STAN_NAME,
    	  KLS_PROD.ABBR_NPR as PROD_NAME,
          KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
    	  poluch.SHORT_NAME as PLOUCH_NAME,
		  sved.SVED_DATE,
		  sved.PASP_NUM,
		  KLS_VAG_STATUS.NAME as VAG_STATUS,
          nakl.NAKL_NUM,
		  reestr.VES_ALL,
		  reestr.VES_CIST,
		  reestr.UPAK_VES
        from reestr, sved, month, ved_pod_row, ved_pod, kls_stan, kls_vetka_otp, KLS_VAGOWNER, KLS_PROD, KLS_PREDPR poluch,kls_vag_status,nakl
        where reestr.sved_id=sved.id and sved.nom_zd=month.nom_zd(+)
          and reestr.ved_pod_row_id=ved_pod_row.id(+) 
    	  and ved_pod_row.ved_pod_id=ved_pod.id(+)
          and month.stan_id=kls_stan.id(+)
    	  and month.poluch_id=poluch.id(+)
          and reestr.vetka_otp_id=kls_vetka_otp.id(+)
    	  and sved.prod_id_npr=kls_prod.id_npr(+)
          and reestr.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  		  and reestr.VAG_STATUS_ID=kls_vag_status.ID(+)
  		  and reestr.NAKL_ID=nakl.ID(+)
          and sved.MESTO_ID=pMESTO_ID
          and sved.load_type_id=pLOAD_TYPE_ID
          and reestr.NAKL_id is not null -- вагоны из накладных
          and reestr.UVED_id is null -- не входят в уведомление
          and sved.SVED_DATE BETWEEN TRUNC(pUVED_DATE)-1 AND TRUNC(pUVED_DATE)+1 --за период
        ORDER BY
          NVL(ved_pod.POD_DATE,sved.DATE_OFORML),
          NVL(ved_pod_row.POD_POS,0)
        );
	END IF;		  
  END;

  /* Добавить запись в таблицу TEMP_UVED */
  PROCEDURE ADD_TEMP_UVED (pREESTR_ID NUMBER) AS
  BEGIN
    IF NVL(pREESTR_ID,0)<>0 THEN
      INSERT INTO TEMP_UVED (UVED_POS, REESTR_ID) VALUES (GetTempMaxNumPos, pREESTR_ID);

  	  UPDATE TEMP_UVED
	  SET (VETKA_OTP_NAME, POD_NUM, SVED_NUM,  NUM_CIST, VES, DATE_OFORML,
 	    NOM_ZD, STAN_NAME, PROD_NAME, VAGOWNER_NAME, POLUCH_NAME,SVED_DATE,PASP_NUM,VAG_STATUS,NAKL_NUM,VES_ALL,VES_CIST,VES_UPAK)=
        (SELECT
          KLS_VETKA_OTP.SHORT_NAME as VETKA_OTP_NAME,
    	  ved_pod.POD_NUM,
	      sved.SVED_NUM,
          REESTR.NUM_CIST,
    	  reestr.VES,
          SVED.DATE_OFORML,
          SVED.NOM_ZD,
          KLS_STAN.STAN_NAME,
    	  KLS_PROD.ABBR_NPR as PROD_NAME,
          KLS_VAGOWNER.DISPLAY_NAME as VAGOWNER_NAME,
    	  poluch.SHORT_NAME as PLOUCH_NAME,
		  sved.SVED_DATE,
		  sved.PASP_NUM,
		  KLS_VAG_STATUS.NAME as VAG_STATUS,
          nakl.NAKL_NUM,
		  reestr.VES_ALL,
		  reestr.VES_CIST,
		  reestr.UPAK_VES
        from reestr, sved, month, ved_pod_row, ved_pod, kls_stan, kls_vetka_otp, KLS_VAGOWNER, KLS_PROD, KLS_PREDPR poluch,kls_vag_status,nakl
        where reestr.sved_id=sved.id and sved.nom_zd=month.nom_zd(+)
          and reestr.ved_pod_row_id=ved_pod_row.id(+) 
    	  and ved_pod_row.ved_pod_id=ved_pod.id(+)
          and month.stan_id=kls_stan.id(+)
    	  and month.poluch_id=poluch.id(+)
          and reestr.vetka_otp_id=kls_vetka_otp.id(+)
    	  and sved.prod_id_npr=kls_prod.id_npr(+)
          and reestr.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
		  and reestr.VAG_STATUS_ID=kls_vag_status.ID(+)
		  and reestr.NAKL_ID=nakl.ID(+)
          and reestr.ID=pREESTR_ID)
	  WHERE REESTR_ID=pREESTR_ID
	    AND EXISTS (SELECT NULL FROM reestr WHERE reestr.ID=pREESTR_ID);
	END IF;		  
  END;

  /* Добавить запись в таблицу TEMP_UVED */
  PROCEDURE DEL_TEMP_UVED (pREESTR_ID NUMBER) AS
  BEGIN
	DELETE FROM TEMP_UVED WHERE REESTR_ID=pREESTR_ID;
	COMMIT;
  END;

  
  /* Перенести позиции из TEMP_UVED в REESTR */
  PROCEDURE SAVE_TEMP_UVED (pUVED_ID NUMBER) AS
    vTmp NUMBER;
  BEGIN
    IF NVL(pUVED_ID,0)<>0 THEN
      UPDATE reestr SET UVED_ID=NULL, UVED_POS=NULL WHERE UVED_ID=pUVED_ID;
      FOR lcur IN (SELECT * FROM TEMP_UVED)
	  LOOP
  	    AddRow(0,lcur.REESTR_ID,pUVED_ID,lcur.UVED_POS);
	  END LOOP;
	END IF;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pUVED_NUM NUMBER, pUVED_DATE DATE, pLUKOMA_NUM NUMBER, pCHER_NUM NUMBER, pMPS_NUM NUMBER, pVETL_NUM NUMBER)
    RETURN NUMBER AS

	vID UVED.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.nextval INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM UVED
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Накладную нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE UVED SET (UVED_NUM, UVED_DATE, MESTO_ID, LOAD_TYPE_ID, LUKOMA_NUM, MPS_NUM, CHER_NUM, VETL_NUM)=
	  (SELECT pUVED_NUM, pUVED_DATE, pMESTO_ID, pLOAD_TYPE_ID, pLUKOMA_NUM, pMPS_NUM, pCHER_NUM, pVETL_NUM FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO UVED (ID,UVED_NUM, UVED_DATE, MESTO_ID, LOAD_TYPE_ID, LUKOMA_NUM, MPS_NUM, CHER_NUM, VETL_NUM)
	  VALUES (vID, pUVED_NUM, pUVED_DATE, pMESTO_ID, pLOAD_TYPE_ID, pLUKOMA_NUM, pMPS_NUM, pCHER_NUM, pVETL_NUM);
	END IF;

	-- Сохранение позиций из временной таблицы TEMP_UVED
	SAVE_TEMP_UVED(vID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Добавить/Изменить позицию ДОКУМЕНТА */
  PROCEDURE AddRow(pCOMMIT NUMBER, pID NUMBER, pUVED_ID NUMBER, pUVED_POS NUMBER) AS
	vID REESTR.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vPos NUMBER;
  BEGIN
    vID:=pID;

	-- Проверка существования позиции
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM REESTR
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Позицию нельзя включить в накладную - вагон удален!');
	END;

	vPos:=NVL(pUVED_POS,FOR_UVED.GetMaxNumPos(pUVED_ID));

	-- Обновляем позицию
	UPDATE REESTR SET UVED_ID=pUVED_ID, UVED_POS=vPos WHERE ID=vID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  /* Скопировать позицию НАКЛАДНОЙ в другую НАКЛАДНУЮ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_UVED_ID NUMBER) RETURN NUMBER AS
	vRow REESTR%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из накладной
	BEGIN
	  SELECT * INTO vRow
	    FROM REESTR
	   WHERE ID=pREESTR_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Переносить нечего, такой записи в накладной нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM UVED
	   WHERE ID=pNEW_UVED_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Накладная в которую переносится отгрузка - удалена!');
	END;

    -- Переносим вагон из накладной в накладную
	AddRow(0,vRow.ID,pNEW_UVED_ID,NULL);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;

END;

/

--
-- P_LOAD_SF_R3_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_LOAD_SF_R3_TEST (vDATE DATE) IS
  vPrevDok NUMBER;
  vPrevProd VARCHAR2(5);
  vBillPosId NUMBER;
  vNomSf NUMBER;
  vNumAkt NUMBER;
BEGIN
vBillPosId:=1;

--Удаляем все товарные фактуры за сутки
DELETE FROM BILL_POS_TMP WHERE NOM_DOK IN (SELECT NOM_DOK FROM BILLS_TMP WHERE DATE_KVIT=vDATE 
   AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080'));
DELETE FROM BILLS_TMP WHERE DATE_KVIT=vDATE AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080');
   
--цикл по заголовкам
FOR REC3 IN (SELECT /*+ ORDERED */ DISTINCT 
	 	 		IB.NOM_SF AS ISU_NOM_SF
		 		,IB.DATE_VYP_SF
		 		,IB.ISU_KOD
		 		,IB.ISU_KOD_OLD
		 		,K.DATE_KVIT
				,FOR_INIT.GetCurrUser AS FIO_ISPOL
				,TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS KOL_DN
				,(CASE
				      WHEN D.ID=2519 THEN '?'
					  ELSE K.NOM_ZD
				  END) AS NOM_ZD
				,8 AS OWNER_ID
				,D.ID AS DOG_ID
				,M.USL_NUMBER
				,(CASE
				      WHEN D.ID=2519 THEN '10080'
					  ELSE P.ID_NPR
				  END) AS PROD_ID_NPR
				,K.DATE_KVIT AS DATE_MOS
				,D.IS_AGENT
				,(CASE
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 1 AND 5 THEN 1
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 6 AND 10 THEN 2
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 11 AND 15 THEN 3
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 16 AND 20 THEN 4
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 20 AND 25 THEN 5
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD'))>25 THEN 6
					   ELSE 0
				  END) as NUM_5_DAY
				,M.NAZN_OTG_ID
				,K.DATE_KVIT+TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS DATE_PLAT
				,1-NVL(IBP.IS_AKCIZ,0) AS NO_AKCIZ
				,K.DATE_KVIT AS DATE_BUXG
				,IB.STATUS
		 FROM KVIT_TMP K
			  ,MONTH M
   		 	  ,ISU_BILL_POS_ROW IR
		      ,ISU_BILLS IB
			  ,ISU_BILL_POS IBP
			  ,KLS_DOG D
			  ,USL_DOG U
			  ,KLS_PROD P
		 WHERE K.DATE_KVIT=vDATE
		   AND K.NOM_ZD=M.NOM_ZD
		   AND IR.KVIT_ID=K.ID
	 	   AND IB.ISU_KOD=IR.ISU_KOD
		   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
			   --AND SUBSTR(IB.ISU_KOD_DOG,1,10)=SUBSTR(D.ISU_KOD_DOG_TEST,1,10)
		   AND SUBSTR(IB.ISU_KOD_DOG,1,10)=SUBSTR(D.ISU_KOD_DOG,1,10)
			   --AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG_TEST
		   AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG
		   AND K.PROD_ID_NPR=P.ID_NPR
		   AND IB.STATUS IN (0,3)
		   --AND IB.LATENT<>'X'
			   )
LOOP
		-- Для корректирующего счета
		IF REC3.STATUS=3 THEN 
		   DELETE FROM DOP_KVIT_TMP DK WHERE DK.BILL_ID=REC3.ISU_KOD_OLD;  
		   INSERT INTO DOP_KVIT_TMP SELECT * FROM KVIT_TMP K WHERE K.BILL_ID=REC3.ISU_KOD_OLD;  
		END IF;

		--ищем старый NUM_AKT
		vNumAkt:=0;
		
		/*
		SELECT NVL(MAX(NUM_AKT),0) AS NUMAKT INTO vNumAkt FROM KVIT_NUMAKT KNA 
		WHERE KNA.NOM_DOK=REC3.ISU_KOD;
		
		IF rec3.PROD_ID_NPR='10080' AND vNumAkt=0 THEN
		  --определяем NUM_AKT
          vNumAkt:=for_documents.GET_NEXT_NUM(12,0,'',rec3.DATE_KVIT);
		  -- сохраняем NUM_AKT
          for_documents.SET_NUM(12,0,0,'',vNumAkt,rec3.DATE_KVIT);
		  -- заполняем таблицу соответствия
		  UPDATE KVIT_NUMAKT SET NUM_AKT=vNumAkt,DATE_AKT=rec3.DATE_KVIT
 		   WHERE NOM_DOK=REC3.ISU_KOD;
		  IF SQL%NOTFOUND THEN  
  		    INSERT INTO KVIT_NUMAKT (NUM_AKT,DATE_AKT,NOM_DOK)
			  VALUES (vNumAkt,rec3.DATE_KVIT,REC3.ISU_KOD);
		  END IF;	  
        end if;
		*/

		--ищем старый NOM_SF
		SELECT NVL(MAX(NOM_SF),0) AS NOMSF INTO vNomSF FROM KVIT_NOMSF KSF 
		WHERE KSF.KVIT_ID IN (SELECT ID FROM KVIT_TMP WHERE BILL_ID=REC3.ISU_KOD);
		
		--заполняем KVIT_TMP по текущему СФ 
		FOR REC1 IN (SELECT
        	 		    IBPR.ISU_KOD
        			   ,IBPR.KVIT_ID
        			   ,KT.DATE_KVIT
        			   ,KT.PROD_ID_NPR
        			   ,IBP.PRICE AS CENA
        			   ,IBP.PRICE_WITH_NDS AS CENA_OTP
        			   ,IBP.SUMMA_BN AS SUM_PROD
        			   ,IBP.SUMMA_AKCIZ AS SUM_AKCIZ
        			   ,IBP.SUMMA_NDS AS SUM_PROD_NDS
        			   ,IBP.TARIF_NDS
        			   ,IBP.TARIF_GUARD_NDS
        			   ,IBP.SUMMA_VOZN_BN AS SUM_VOZN11
        			   ,ROUND(IBP.SUMMA_VOZN_BN*0.18,2) AS SUM_VOZN11_NDS  
        			   ,IBP.SUMMA_RAZN_BN AS SUM_VOZN12
        			   ,ROUND(IBP.SUMMA_RAZN_BN*0.18,2) AS SUM_VOZN12_NDS
        			 FROM 
        		 	   ISU_BILL_POS_ROW IBPR
        			   ,ISU_BILL_POS IBP
        			   ,KVIT_TMP KT
        			 WHERE KT.DATE_KVIT=vDATE
        			   AND IBPR.KVIT_ID=KT.ID
        			   AND IBPR.ISU_KOD_POS=IBP.ISU_KOD_POS
        			   AND IBPR.ISU_KOD=REC3.ISU_KOD
        			 ORDER BY IBPR.ISU_KOD,KT.PROD_ID_NPR
					 ) 
        LOOP
 		
          /* PSV - определяем BILL_POS_ID */
          IF vPrevDok<>REC1.ISU_KOD THEN
            vBillPosId:=1;
          ELSE
            IF vPrevProd<>REC1.PROD_ID_NPR THEN
              vBillPosId:=vBillPosId+1;
        	END IF;
          END IF;	  
		  
		  --Для коректирующего счета
          UPDATE KVIT_TMP SET 
          		--BILL_ID=REC1.ISU_KOD
             	--,BILL_POS_ID=vBillPosId
             	CENA=0
             	,CENA_OTP=0
             	,SUM_PROD=0
             	,SUM_AKCIZ=0
             	,SUM_PROD_NDS=0
             	,TARIF_NDS=0
             	,TARIF_GUARD_NDS=0
             	,SUM_VOZN11=0
             	,SUM_VOZN11_NDS=0
             	,SUM_VOZN12=0
             	,SUM_VOZN12_NDS=0
     			,NUM_AKT=0
          WHERE KVIT_TMP.ID=REC1.KVIT_ID;	
		  
          -- Обновляем суммы в квите
          UPDATE KVIT_TMP SET 
        		BILL_ID=REC1.ISU_KOD
        		,BILL_POS_ID=vBillPosId
        		,CENA=REC1.CENA
        		,CENA_OTP=REC1.CENA_OTP
        		,SUM_PROD=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_PROD
				  END) 	    
        		,SUM_AKCIZ=0
        		,SUM_PROD_NDS=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_PROD_NDS
				  END)  
        		,TARIF_NDS=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.TARIF_NDS
				  END) 	    
        		,TARIF_GUARD_NDS=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.TARIF_GUARD_NDS
				  END) 	    
        		,SUM_VOZN11=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN11
				  END) 	    
        		,SUM_VOZN11_NDS=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN11_NDS
				  END) 	    
        		,SUM_VOZN12=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN12
				  END) 	    
        		,SUM_VOZN12_NDS=(CASE 
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN12_NDS
				  END) 	    
				,NUM_AKT=vNumAkt
        	WHERE KVIT_TMP.ID=REC1.KVIT_ID;	

          vPrevDok:=REC1.ISU_KOD;
          vPrevProd:=REC1.PROD_ID_NPR;
 
        END LOOP;			

		--суммы для счетов ЛУКОЙЛ 
		IF REC3.PROD_ID_NPR='10080' THEN
    		FOR REC1 IN (SELECT 
                            IBPR.ISU_KOD
                           ,MIN(IBPR.KVIT_ID) AS KVIT_ID 
                           ,MIN(KT.DATE_KVIT) AS DATE_KVIT 
                           ,KT.PROD_ID_NPR
                           ,MIN(IBP.PRICE) AS CENA
                           ,MIN(IBP.PRICE_WITH_NDS) AS CENA_OTP
                           ,MIN(IBP.SUMMA_BN) AS SUM_PROD
                           ,MIN(IBP.SUMMA_AKCIZ) AS SUM_AKCIZ
                           ,MIN(IBP.SUMMA_NDS) AS SUM_PROD_NDS
                           ,MIN(IBP.TARIF_NDS) AS TARIF_NDS 
                           ,MIN(IBP.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
                           ,MIN(IBP.SUMMA_VOZN_BN) AS SUM_VOZN11
                           ,MIN(ROUND(IBP.SUMMA_VOZN_BN*0.18,2)) AS SUM_VOZN11_NDS  
                           ,MIN(IBP.SUMMA_RAZN_BN) AS SUM_VOZN12
                           ,MIN(ROUND(IBP.SUMMA_RAZN_BN*0.18,2)) AS SUM_VOZN12_NDS
                         FROM 
                            ISU_BILL_POS_ROW IBPR
                           ,ISU_BILL_POS IBP
                           ,KVIT_TMP KT
                         WHERE KT.DATE_KVIT=vDATE
                           AND IBPR.KVIT_ID=KT.ID
                           AND IBPR.ISU_KOD_POS=IBP.ISU_KOD_POS
                           AND IBPR.ISU_KOD=REC3.ISU_KOD
                           GROUP BY IBPR.ISU_KOD,KT.PROD_ID_NPR
             			   ORDER BY IBPR.ISU_KOD,KT.PROD_ID_NPR
    			)
            LOOP

                 UPDATE KVIT_TMP SET 
                 		BILL_ID=REC1.ISU_KOD
                    	--,BILL_POS_ID=vBillPosId
                    	,CENA=REC1.CENA
                    	,CENA_OTP=REC1.CENA_OTP
                    	,SUM_PROD=REC1.SUM_PROD
                    	,SUM_AKCIZ=0
                    	,SUM_PROD_NDS=REC1.SUM_PROD_NDS
                    	,TARIF_NDS=REC1.TARIF_NDS
                    	,TARIF_GUARD_NDS=REC1.TARIF_GUARD_NDS
                    	,SUM_VOZN11=REC1.SUM_VOZN11
                    	,SUM_VOZN11_NDS=REC1.SUM_VOZN11_NDS
                    	,SUM_VOZN12=REC1.SUM_VOZN12
                    	,SUM_VOZN12_NDS=REC1.SUM_VOZN12_NDS
            			,NUM_AKT=vNomSF
                 WHERE KVIT_TMP.ID=REC1.KVIT_ID;	

    		END LOOP;
		END IF;			

		--протоколы и даты цен 
		FOR REC2 IN(SELECT DISTINCT
				 		   K.ID		   				 		   
						   --,IB.ISU_KOD
						   --,U.CAT_CEN_ID
						   --,P.ID_NPR
						   ,NPC.BEGIN_DATE
						   --,NVL(NPC.END_DATE,'31-dec-2999') AS END_DATE
						   --,K.DATE_KVIT
						   ,NPC.PROTOKOL_NUM AS PROTO_NUM
						   ,NPC.PROTOKOL_DATE AS PROTO_DATE
						   FROM ISU_BILLS IB
						   ,USL_DOG U
						   ,ISU_BILL_POS IBP
						   ,KLS_PROD P
						   ,NPR_PRICES NPC
						   ,ISU_BILL_POS_ROW IR
						   ,KVIT_TMP K
						   WHERE K.DATE_KVIT=vDATE
						   AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG
						   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
						   AND IB.ISU_KOD=REC3.ISU_KOD
						   AND IBP.MATERIAL_KSSS=P.KSSS_PROD_ID
						   AND NPC.CAT_CEN_ID=U.CAT_CEN_ID
						   AND NPC.PROD_ID_NPR=P.ID_NPR
						   AND NPC.IS_ORIGINAL=1	   
						   AND IB.ISU_KOD=IR.ISU_KOD
						   AND IR.KVIT_ID=K.ID
						   AND K.DATE_KVIT>=NPC.BEGIN_DATE
						   AND K.DATE_KVIT<=NVL(NPC.END_DATE,TO_DATE('31.12.2100','dd.mm.yyyy'))
						ORDER BY BEGIN_DATE   
					)
		LOOP
			
			UPDATE KVIT_TMP SET DATE_CENA=REC2.BEGIN_DATE,PROTO_NUM=REC2.PROTO_NUM,PROTO_DATE=REC2.PROTO_DATE WHERE ID=REC2.ID;
		
		END LOOP;
		
		
		--заполняем заголовок
		INSERT INTO BILLS_TMP (ISU_NOM_SF
			   		  ,NOM_SF /* PSV - номер нового счета =0 */
    		          ,DATE_VYP_SF
					  ,ISU_KOD
					  ,NOM_DOK
					  ,DATE_KVIT
					  ,FIO_ISPOL
					  ,KOL_DN
					  ,OLD_NOM_DOK
					  ,NOM_ZD
					  ,OWNER_ID
					  ,DOG_ID
					  ,USL_NUMBER
					  ,PROD_ID_NPR
					  ,DATE_MOS
					  ,IS_AGENT
					  ,NUM_5_DAY
					  ,NAZN_OTG_ID
					  ,DATE_PLAT
					  ,NO_AKCIZ
					  ,DATE_BUXG
					  )
          VALUES (REC3.ISU_NOM_SF
		  		 ,vNomSF
		         ,REC3.DATE_VYP_SF
				 ,REC3.ISU_KOD
				 ,TO_NUMBER(REC3.ISU_KOD)
				 ,REC3.DATE_KVIT
				 ,REC3.FIO_ISPOL
				 ,REC3.KOL_DN
				 ,REC3.ISU_KOD_OLD
				 ,REC3.NOM_ZD
				 ,REC3.OWNER_ID
				 ,REC3.DOG_ID
				 ,REC3.USL_NUMBER
				 ,REC3.PROD_ID_NPR
				 ,REC3.DATE_MOS
				 ,REC3.IS_AGENT
				 ,REC3.NUM_5_DAY
				 ,REC3.NAZN_OTG_ID
				 ,REC3.DATE_PLAT
				 ,REC3.NO_AKCIZ
				 ,REC3.DATE_BUXG
				 );
			 
     	-- суммы в заголовке
     	FOR REC4 IN (SELECT
     			 		   K.BILL_ID
					       ,MAX(K.PROTO_NUM) AS PROTO_NUM 
 					       ,MAX(K.PROTO_DATE) AS PROTO_DATE 
     					   ,SUM(SUM_PROD + SUM_PROD_NDS + TARIF + TARIF_NDS + TARIF_GUARD + TARIF_GUARD_NDS + SUM_VOZN11 + SUM_VOZN11_NDS + SUM_VOZN12 + SUM_VOZN12_NDS) AS SUMMA_DOK
     					   ,SUM(SUM_PROD_NDS + TARIF_NDS + TARIF_GUARD_NDS + SUM_VOZN11_NDS + SUM_VOZN12_NDS) AS NDS_DOK
     					   ,SUM(SUM_PROD + SUM_PROD_NDS) AS PROD_SUM
     					   ,SUM(SUM_PROD_NDS) AS PROD_NDS
     					   ,SUM(SUM_PROD + SUM_PROD_NDS) AS LUK_SUMMA_DOK
     					   ,SUM(SUM_PROD_NDS) AS LUK_NDS_DOK
     				  FROM KVIT_TMP K
     				  WHERE K.DATE_KVIT=vDATE
					  AND K.ID IN (SELECT KVIT_ID FROM ISU_BILL_POS_ROW WHERE ISU_KOD=REC3.ISU_KOD)
     				  GROUP BY K.BILL_ID
     				 )
     	LOOP
     
     	UPDATE BILLS_TMP SET SUMMA_DOK=REC4.SUMMA_DOK
     	                    ,NDS_DOK=REC4.NDS_DOK
     						,PROD_SUM=REC4.PROD_SUM
     						,PROD_NDS=REC4.PROD_NDS
     						,LUK_SUMMA_DOK=REC4.LUK_SUMMA_DOK
     						,LUK_NDS_DOK=REC4.LUK_NDS_DOK
							,PROTO_NUM=REC4.PROTO_NUM
							,PROTO_DATE=REC4.PROTO_DATE
     	                WHERE ISU_KOD=REC3.ISU_KOD;
     
     	END LOOP;
				 
	--позиции по текущему СФ 
	FOR REC5 IN (SELECT
                       BT.NOM_DOK
                       ,K.BILL_POS_ID
					   ,MAX(BT.DATE_KVIT) as DATE_REALIZ
                       ,SUM(K.VES) AS VES
                       ,MAX(K.CENA) AS CENA_BN
                       ,SUM(K.SUM_PROD) AS SUMMA_BN
                       ,SUM(K.SUM_AKCIZ) AS SUMMA_AKCIZ
                       ,SUM(K.SUM_PROD_NDS) AS SUMMA_NDS20
                       ,SUM(K.SUM_PROD + K.SUM_PROD_NDS) AS SUMMA
                       ,MAX(PR.ID_NPR) AS PROD_ID_NPR
                       ,MAX(BT.IS_AGENT) AS IS_AGENT
                       ,MAX(BT.NO_AKCIZ) AS NO_AKCIZ
                       ,SUM(K.TARIF) AS TARIF_BN
                       ,SUM(K.TARIF_NDS) AS TARIF_NDS
                       ,SUM(K.SUM_VOZN11) AS SUMMA_VOZN_BN
                       ,SUM(K.SUM_VOZN11_NDS) AS SUMMA_VOZN_NDS
                       ,SUM(K.SUM_VOZN12) AS SUMMA_RAZN_BN
                       ,SUM(K.SUM_VOZN12_NDS) AS SUMMA_RAZN_NDS
                       ,SUM(K.TARIF_GUARD) AS TARIF_GUARD_BN
                       ,SUM(K.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
					   ,MAX(K.PROTO_NUM) AS PROTO_NUM 
					   ,MAX(K.PROTO_DATE) AS PROTO_DATE 
                       FROM KVIT_TMP K,BILLS_TMP BT,KLS_PROD PR
                       WHERE K.DATE_KVIT=vDATE
                       AND K.PROD_ID_NPR=PR.ID_NPR
                       AND K.BILL_ID=BT.NOM_DOK
					   AND BT.NOM_DOK=REC3.ISU_KOD
                       GROUP BY BT.NOM_DOK,K.BILL_POS_ID
                       )
	LOOP
	--продукт
	INSERT INTO BILL_POS_TMP (
		   					  BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 ,NUM_AKT
							 )
					VALUES(
							 REC5.BILL_POS_ID
							 ,REC5.NOM_DOK
		   					 ,REC5.VES
							 ,REC5.CENA_BN
							 ,REC5.SUMMA_BN
							 ,REC5.SUMMA_AKCIZ
							 ,REC5.SUMMA_NDS20
							 ,REC5.SUMMA
							 ,REC5.PROD_ID_NPR
							 ,REC5.IS_AGENT
							 ,REC5.NO_AKCIZ
							 ,1
							 ,1
							 ,REC5.PROTO_NUM
							 ,REC5.PROTO_DATE
							 ,REC5.DATE_REALIZ
							 ,vNomSF
							 );	
	END LOOP;

	--УСЛУГИ
	FOR REC6 IN (SELECT
                       BT.NOM_DOK
					   ,MAX(BT.DATE_KVIT) as DATE_REALIZ
                       ,SUM(K.VES) AS VES
                       ,MAX(K.CENA) AS CENA_BN
                       ,SUM(K.SUM_PROD) AS SUMMA_BN
                       ,SUM(K.SUM_AKCIZ) AS SUMMA_AKCIZ
                       ,SUM(K.SUM_PROD_NDS) AS SUMMA_NDS20
                       ,SUM(K.SUM_PROD+K.SUM_PROD_NDS) AS SUMMA
                       ,MAX(PR.ID_NPR) AS PROD_ID_NPR
                       ,MAX(BT.IS_AGENT) AS IS_AGENT
                       ,MAX(BT.NO_AKCIZ) AS NO_AKCIZ
                       ,SUM(K.TARIF) AS TARIF_BN
                       ,SUM(K.TARIF_NDS) AS TARIF_NDS
                       ,SUM(K.SUM_VOZN11) AS SUMMA_VOZN_BN
                       ,SUM(K.SUM_VOZN11_NDS) AS SUMMA_VOZN_NDS
                       ,SUM(K.SUM_VOZN12) AS SUMMA_RAZN_BN
                       ,SUM(K.SUM_VOZN12_NDS) AS SUMMA_RAZN_NDS
                       ,SUM(K.TARIF_GUARD) AS TARIF_GUARD_BN
                       ,SUM(K.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
					   ,MAX(K.PROTO_NUM) AS PROTO_NUM 
					   ,MAX(K.PROTO_DATE) AS PROTO_DATE 
                       FROM KVIT_TMP K,BILLS_TMP BT,KLS_PROD PR
                       WHERE K.DATE_KVIT=vDATE
                       AND K.PROD_ID_NPR=PR.ID_NPR
                       AND K.BILL_ID=BT.NOM_DOK
					   AND BT.NOM_DOK=REC3.ISU_KOD
                       GROUP BY BT.NOM_DOK
                       )
	LOOP
	--тариф
	IF REC6.TARIF_BN<>0 THEN
	INSERT INTO BILL_POS_TMP (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  10
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.TARIF_BN
							 ,0
							 ,REC6.TARIF_NDS
							 ,REC6.TARIF_BN+REC6.TARIF_NDS
							 ,10010
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--вознаграждение
	IF REC6.SUMMA_VOZN_BN<>0 THEN
	INSERT INTO BILL_POS_TMP (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  11
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.SUMMA_VOZN_BN
							 ,0
							 ,REC6.SUMMA_VOZN_NDS
							 ,REC6.SUMMA_VOZN_BN+REC6.SUMMA_VOZN_NDS
							 ,10011
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--разница
	IF REC6.SUMMA_RAZN_BN<>0 THEN
	INSERT INTO BILL_POS_TMP (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  12
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.SUMMA_RAZN_BN
							 ,0
							 ,REC6.SUMMA_RAZN_NDS
							 ,REC6.SUMMA_RAZN_BN+REC6.SUMMA_RAZN_NDS
							 ,10012
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--охрана
	IF REC6.TARIF_GUARD_BN<>0 THEN
	INSERT INTO BILL_POS_TMP (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  13
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.TARIF_GUARD_BN
							 ,0
							 ,REC6.TARIF_GUARD_NDS
							 ,REC6.TARIF_GUARD_BN+REC6.TARIF_GUARD_NDS
							 ,10013
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	END LOOP;
				 
END LOOP;
COMMIT;

END P_LOAD_SF_R3_TEST;

/

--
-- RENEW_DOP_KVIT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Dop_Kvit (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN
return;

UPDATE load_buffer.DOP_KVIT SET np_timep='00:00' WHERE SUBSTR(np_timep,1,1)=' ' OR np_timep IS NULL;
UPDATE load_buffer.DOP_KVIT SET time_e='00:00' WHERE SUBSTR(time_e,1,1)=' ' OR time_e IS NULL;
UPDATE load_buffer.DOP_KVIT SET np_data_o=date_otgr WHERE np_data_o IS NULL;
UPDATE load_buffer.DOP_KVIT SET date_e=date_otgr WHERE date_e IS NULL;
UPDATE load_buffer.DOP_KVIT SET kod_perer=0 WHERE kod_perer IS NULL;
COMMIT;

UPDATE MASTER.DOP_KVIT a SET
  (FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
   VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
   NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
   VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
   VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
   BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,NUM_DOVER,NUM_NAR,PERER_ID,
   DATE_EDIT,JKCOMMIT,GROTP_ID,PERECH_TEXPD_NUM, PERECH_TEXPD_DATE,
   SUM_PROD, SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, cena_vozn,TARIF_GUARD,TARIF_GUARD_NDS,TARIF_ALT,
   CENA,CENA_OTP,NACENKA,SHIELDS,PODDONS,UPAK_ID,UPAK_VES,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,PERECH_GUARD_NUM,PERECH_GUARD_DATE)
 = (SELECT 0,k.mesto,k.nom_zd,k.kod_npr,k.plat_tarif,k.num_cist,k.date_otgr,
   k.ves,SIGN(k.ves)*ABS(k.ves_brutto),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
   LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
   k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
   k.VZLIV,k.TEMPER,k.XPL,0,k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
   k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,k.doveren,k.nariad,p_r.PREDPR_ID,
   TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),1,k.KOD_GROTP,k.NUM_PERECH,k.DAT_PERECH,
   k.D_41, k.SUM_AKCIZ, k.D_191, k.D_194, k.SUM_NALIV, k.NDC_NAL20, k.D_442, k.NDC_TR20, k.SUM_NACEN, k.cena_vozn,NVL(k.dop_tarif,0),NVL(k.ndc_doptar,0),NVL(k.tarif_alt,0),
   k.CENA,k.CENA_OTP,k.NACENKA,k.shields,k.poddons,u.ID,k.bag_ves,k.REESTR,k.PROTO_NUM,k.PROTO_DATE,IIF(k.NO_AKCIZ,1,0),
   k.n_per_ohr,k.d_per_ohr
          FROM load_buffer.DOP_KVIT k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.KLS_UPAK u
		  WHERE k.ID=a.ID AND k.N_PLAT=a.BILL_ID AND E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 AND p_r.FOX_KOD=k.KOD_PERER AND k.BAG_ID=u.BAG_ID(+))
  WHERE EXISTS (SELECT k.ID FROM load_buffer.DOP_KVIT k WHERE k.ID=a.ID AND k.N_PLAT=a.BILL_ID);


date_inc:=DATE_BEG;

INSERT INTO MASTER.DOP_KVIT
     (ID,FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
      VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
      NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
      VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
      VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
	  BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,NUM_DOVER,NUM_NAR,PERER_ID,
      DATE_EDIT,JKCOMMIT,GROTP_ID,PERECH_TEXPD_NUM, PERECH_TEXPD_DATE,
	  SUM_PROD, SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, cena_vozn,TARIF_GUARD,TARIF_GUARD_NDS,TARIF_ALT,
	  CENA,CENA_OTP,NACENKA,SHIELDS,PODDONS,UPAK_ID,UPAK_VES,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,PERECH_GUARD_NUM,PERECH_GUARD_DATE)
      (SELECT k.ID,0,k.mesto,k.nom_zd,k.kod_npr,k.plat_tarif,k.num_cist,k.date_otgr,
          k.ves,SIGN(k.ves)*ABS(k.ves_brutto),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
          LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
          k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
          k.VZLIV,k.TEMPER,k.XPL,0,k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
		  k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.kodpasp,k.doveren,k.nariad,p_r.PREDPR_ID,
          TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),1,k.KOD_GROTP,k.NUM_PERECH,k.DAT_PERECH,
		  k.D_41, k.SUM_AKCIZ, k.D_191, k.D_194, k.SUM_NALIV, k.NDC_NAL20, k.D_442, k.NDC_TR20, k.SUM_NACEN, k.cena_vozn,NVL(k.dop_tarif,0),NVL(k.ndc_doptar,0),NVL(k.tarif_alt,0),
		  k.CENA,k.CENA_OTP,k.NACENKA,k.shields,k.poddons,u.ID,k.bag_ves,k.reestr,k.PROTO_NUM,k.PROTO_DATE,IIF(k.NO_AKCIZ,1,0),
		  k.n_per_ohr,k.d_per_ohr
        FROM load_buffer.DOP_KVIT k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.KLS_UPAK u
        WHERE E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 AND p_r.FOX_KOD=k.KOD_PERER AND k.BAG_ID=u.BAG_ID(+) AND
  	       NOT EXISTS (SELECT a.ID FROM MASTER.DOP_KVIT a WHERE a.ID=k.ID AND a.BILL_ID=k.N_PLAT));

UPDATE DOP_KVIT SET BILL_POS_ID=1 WHERE  BILL_POS_ID IS NULL AND date_otgr BETWEEN date_beg AND date_end;
		   
DELETE FROM MASTER.DOP_KVIT A WHERE A.FLG_OPERDATA=0 AND
    NOT EXISTS (SELECT k.ID FROM load_buffer.DOP_KVIT k WHERE k.ID = A.ID AND  k.n_plat = A.BILL_ID) AND
    A.date_otgr BETWEEN date_beg AND date_end;


UPDATE DOP_KVIT SET ves_brutto=ves 
WHERE EXISTS (SELECT NULL FROM MONTH WHERE MONTH.nom_zd=DOP_KVIT.nom_zd AND MONTH.NAZN_OTG_ID<>4);

COMMIT;

END Renew_Dop_Kvit; 
/

--
-- RENEW_OSTAT_NPZ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.renew_ostat_npz (
   date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
   date_end   DATE := SYSDATE,
   param1     VARCHAR2 := '',
   param2     VARCHAR2 := '',
   param3     VARCHAR2 := ''
)
IS
   date_inc   DATE;
   new_db     DATE;
   new_de     DATE;
BEGIN
--- Определяем дату
   BEGIN
      SELECT DISTINCT a.dat_
                 INTO date_inc
                 FROM load_buffer.rs a;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         raise_application_error (-20999, 'Пустой LOAD_BUFFER.RS');
      WHEN TOO_MANY_ROWS
      THEN
         raise_application_error (-20999, 'В LOAD_BUFFER.RS больше 1 даты');
      WHEN OTHERS
      THEN
         raise_application_error (-20999, 'Ошибка в LOAD_BUFFER.RS');
   END;

   new_db := TRUNC (date_inc, 'MONTH');
   new_de := date_inc;

-- Удаляем
   DELETE FROM ostat_npz
         WHERE npz_date = date_inc;

--- Добавляем
   INSERT INTO MASTER.ostat_npz
               (npz_date, sobstv_id, id_prod_npr, ost, pasp, otgr, hran,komp)
      (SELECT a.dat_, DECODE (a.vlad, 76,3722,61, 4281, 88,4293, 42,4294, 35, 1, 17, 10, 1, 8, 0),
              p.kod, a.ost, a.pasp, a.otgr - a.otgr_nhr + a.prod + a.otgr_shr,
              a.otgr_nhr - a.otgr_shr,a.KOMP
         FROM load_buffer.rs a, v_prod_ok p
        WHERE p.kod_10 = a.kod_okp);

-- Обновляем мертвые остатки
   UPDATE MASTER.ostat_npz
      SET m_ost =
             NVL ((SELECT SUM (MASTER.iif_num (a.vol,
                                               '<',
                                               a.dead_vol,
                                               a.vol,
                                               a.dead_vol
                                              )
                              )
                     FROM MASTER.v_arc_rez a
                    WHERE a.prod_id_npr = ostat_npz.id_prod_npr
                      AND a.dateupload = date_inc + 1
                      AND a.ar_tov_id = 1),
                  0
                 )
    WHERE ostat_npz.npz_date = date_inc AND ostat_npz.sobstv_id = 8;

   COMMIT;

-- Обновляем заявлено
   UPDATE MASTER.ostat_npz
      SET request =
             NVL ((SELECT SUM (a.tonn_declared)
                     FROM MASTER.MONTH a
                    WHERE a.prod_id_npr = ostat_npz.id_prod_npr
                      AND a.input_date BETWEEN new_db AND new_de),
                  0
                 )
    WHERE ostat_npz.npz_date = date_inc AND ostat_npz.sobstv_id = 8;

   COMMIT;

-- обновляем суточное производство
   UPDATE MASTER.dayly_fact
      SET MASTER.dayly_fact.ostat_tek = NVL (
             (SELECT NVL (MASTER.ostat_npz.ost, 0)
                FROM MASTER.ostat_npz
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA),0),
          MASTER.dayly_fact.perepasp = nvl (
             (SELECT MASTER.ostat_npz.pasp
                FROM MASTER.ostat_npz
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA),0),
          MASTER.dayly_fact.otgr_nar = nvl (
             (SELECT MASTER.ostat_npz.otgr
                FROM MASTER.ostat_npz
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA),0),
          MASTER.dayly_fact.hran_tek = nvl (
             (SELECT MASTER.plan_refinery.hran + MASTER.ostat_npz.hran
                FROM MASTER.ostat_npz, MASTER.plan_refinery
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA
                 AND MASTER.plan_refinery.kod = MASTER.dayly_fact.kod_plan),0),
         MASTER.dayly_fact.polezostatki =nvl (
             (SELECT iif_num (MASTER.ostat_npz.ost,
                              '<',
                              MASTER.ostat_npz.m_ost,
                              0,
                              MASTER.ostat_npz.ost - MASTER.ostat_npz.m_ost
                             )
                FROM MASTER.ostat_npz
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA),0),
          MASTER.dayly_fact.vsegoza = nvl (
             (SELECT MASTER.ostat_npz.request
                FROM MASTER.ostat_npz
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA),0),
          MASTER.dayly_fact.komp =nvl (
             (SELECT MASTER.ostat_npz.komp
                FROM MASTER.ostat_npz
               WHERE MASTER.ostat_npz.id_prod_npr = MASTER.dayly_fact.prod
                 AND MASTER.ostat_npz.sobstv_id = MASTER.dayly_fact.sobstv
                 AND MASTER.ostat_npz.npz_date = MASTER.dayly_fact.DATA),0)
    WHERE MASTER.dayly_fact.DATA = new_de;

   COMMIT;
END renew_ostat_npz;

/

--
-- GET_CENA_BN  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_CENA_BN
 (pDOG_ID NUMBER,pEND_DATE DATE,pPROD_ID_NPR VARCHAR2)
RETURN NUMBER
AS
  vPRICE NUMBER;
BEGIN

  vPRICE:=0;
    
  -- Определяем цену без НДС из последнего счета по договору за этот период (по н/пр)
  FOR lcur IN (SELECT /*+ RULE */ bp.CENA_BN FROM BILL_POS bp, BILLS b
               WHERE b.NOM_DOK=bp.NOM_DOK
			     AND b.DOG_ID=pDOG_ID
			     AND b.DATE_KVIT<=pEND_DATE
				 AND bp.PROD_ID_NPR=pPROD_ID_NPR
			  ORDER BY b.DATE_KVIT DESC) LOOP
    vPRICE:=NVL(lcur.CENA_BN,0);
	EXIT;
  END LOOP;
  
  IF vPRICE=0 THEN
    -- Определяем цену без НДС из заявки по договору на этот месяц
    FOR lcur IN (SELECT CENA FROM MONTH a
                  WHERE a.DOG_ID=pDOG_ID
			        AND a.DATE_PLAN<=pEND_DATE
				    AND a.PROD_ID_NPR=pPROD_ID_NPR
				 ORDER BY a.INPUT_DATE DESC) LOOP
      vPRICE:=NVL(lcur.CENA,0);
  	  EXIT;
    END LOOP;
  END IF;	
  
  RETURN vPRICE;
END Get_CENA_BN;

/

--
-- GET_FIN_BY_DATE_DOG_SUM  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Fin_By_Date_Dog_Sum (
   Dog_id#         NUMBER,
   Date_graphik#   DATE,
   Planstru_id#    NUMBER DEFAULT NULL)
   RETURN NUMBER
AS
   Otgr#        NUMBER;
   Otgr1#       NUMBER;
   OPL#         NUMBER;
   Opl1#        NUMBER;
   Pros1#       NUMBER;
   Pros2#       NUMBER;

   CURSOR Temp
   IS
      SELECT   BILLS.Date_plat, BILLS.Nom_dok,
               NVL (SUM (BILL_POS.Summa), 0) AS Summa_dok,
               NVL (SUM (DECODE (SIGN (BILL_POS.Bill_pos_id - 10),
                                 -1, NVL (BILL_POS.Summa, 0),0)),0) AS Summa_prod
          FROM BILL_POS, BILLS
         WHERE BILLS.Nom_dok = BILL_POS.Nom_dok AND BILLS.Dog_id = Dog_id#
      GROUP BY bills.date_plat, BILLS.Nom_dok
        HAVING bills.date_plat <= Date_graphik#
      ORDER BY 1 DESC, 2 DESC;

   Dest         Temp%ROWTYPE;
   V_is_agent   NUMBER;
BEGIN
   /* PSV 30.06.2002 - по Поставке оплаты только на сумму продукта */
   BEGIN
      SELECT KLS_DOG.Is_agent
        INTO V_is_agent
        FROM KLS_DOG
       WHERE KLS_DOG.ID = Dog_id#;
   EXCEPTION
      WHEN OTHERS
      THEN
         V_is_agent := -1;
   END;

   IF Planstru_id# IS NOT NULL
   THEN
      SELECT NVL (SUM (REAL_OPL.D_41 + REAL_OPL.D_191 + REAL_OPL.Sum_akciz),0)
        INTO OPL#
        FROM REAL_OPL, BILLS, MONTH
       WHERE REAL_OPL.Nom_dok = BILLS.Nom_dok
         AND BILLS.Nom_zd = MONTH.Nom_zd
         AND MONTH.Planstru_id = Planstru_id#
         AND BILLS.Dog_id = Dog_id#
         AND REAL_OPL.Data_post < TRUNC (Date_graphik#, 'Mon');

      IF Planstru_id# <> 95
      THEN
         SELECT NVL (SUM (OPL.Summa), 0)
           INTO Opl1#
           FROM OPL
          WHERE Dog_id = Dog_id# AND Data_por < TRUNC (Date_graphik#, 'Mon');

         OPL# := Opl1# - OPL#;
      END IF;
   ELSE
      SELECT NVL (SUM (OPL.Summa), 0)
        INTO OPL#
        FROM OPL
       WHERE Dog_id = Dog_id# AND Data_por < TRUNC (Date_graphik#, 'Mon');
   END IF;

   IF V_is_agent = 2
   THEN
      IF Planstru_id# IS NOT NULL
      THEN
         SELECT NVL (SUM (BILLS.Prod_sum), 0)
           INTO Otgr#
           FROM BILLS, MONTH
          WHERE BILLS.Nom_zd = MONTH.Nom_zd
            AND MONTH.Planstru_id = Planstru_id#
            AND BILLS.Dog_id = Dog_id#
            AND BILLS.Date_plat <= Date_graphik# ;

         IF Planstru_id# <> 95
         THEN
            SELECT NVL (SUM (BILLS.Prod_sum), 0)
              INTO Otgr1#
              FROM BILLS
             WHERE Dog_id = Dog_id# AND Date_plat <= Date_graphik#;
            Otgr# := Otgr1# - Otgr#;
         END IF;
      ELSE
         SELECT NVL (SUM (BILLS.Prod_sum), 0)
           INTO Otgr#
           FROM BILLS
          WHERE Dog_id = Dog_id# AND Date_plat <= Date_graphik#;
      END IF;
   ELSE
      SELECT NVL (SUM (BILLS.Summa_dok), 0)
        INTO Otgr#
        FROM BILLS
       WHERE Dog_id = Dog_id# AND Date_plat <= Date_graphik#;
   END IF;

   Pros1# := Otgr# - OPL#;
   Pros2# := 0;

   OPEN Temp;

   LOOP
      IF Pros1# <= 0
      THEN
         EXIT;
      END IF;

      FETCH Temp
       INTO Dest;

      EXIT WHEN Temp%NOTFOUND;

      IF V_is_agent = 2
      THEN
         IF Dest.Summa_prod <= Pros1#
         THEN
            Pros2# := Pros2# + Dest.Summa_prod;
            Pros1# := Pros1# - Dest.Summa_prod;
         ELSE
            Pros2# := Pros2# + Pros1#;
            Pros1# := 0;
         END IF;
      ELSE
         IF Dest.Summa_dok <= Pros1#
         THEN
            Pros2# := Pros2# + Dest.Summa_prod;
            Pros1# := Pros1# - Dest.Summa_dok;
         ELSE
            Pros2# := Pros2# + Dest.Summa_prod * (Pros1# / Dest.Summa_dok);
            Pros1# := 0;
         END IF;
      END IF;
   END LOOP;
/*ADVICE(187): Presence of more than one exit point from a loop [503] */


   RETURN Pros2#;
END Get_Fin_By_Date_Dog_Sum;

/

--
-- GET_FIN_BY_DATE_DOG_SUM_OLD  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Fin_By_Date_Dog_Sum_old (
   Dog_id#         NUMBER
                         ,
   Date_graphik#   DATE
                       ,
   Planstru_id#    NUMBER DEFAULT NULL

)
   RETURN NUMBER
AS
   Otgr#        NUMBER;
   Otgr1#       NUMBER;
   Opl#         NUMBER;
   Opl1#        NUMBER;
   Pros1#       NUMBER;
   Pros2#       NUMBER;

   CURSOR Temp
   IS
      SELECT   Date_kvit + Kol_dn AS Date_plat, Bills.Nom_dok,
               NVL (SUM (Bill_pos.Summa), 0) AS Summa_dok,
               NVL (SUM (DECODE (SIGN (Bill_pos.Bill_pos_id - 10),
                                 -1, NVL (Bill_pos.Summa, 0),
                                 0
                                )
                        ),
                    0
                   ) AS Summa_prod
          FROM Bill_pos, Bills
         WHERE Bills.Nom_dok = Bill_pos.Nom_dok AND Bills.Dog_id = Dog_id#
      GROUP BY Date_kvit + Kol_dn, Bills.Nom_dok
        HAVING Date_kvit + Kol_dn <= Date_graphik#
      ORDER BY 1 DESC, 2 DESC;

   Dest         Temp%ROWTYPE;
   V_is_agent   NUMBER;
BEGIN
   /* PSV 30.06.2002 - по поставке оплаты только на сумму продукта */
   BEGIN
      SELECT Kls_dog.Is_agent
        INTO V_is_agent
        FROM Kls_dog
       WHERE Kls_dog.ID = Dog_id#;
   EXCEPTION
      WHEN OTHERS
      THEN
         V_is_agent := -1;
   END;

   IF Planstru_id# IS NOT NULL
   THEN
      SELECT NVL (SUM (Real_opl.D_41 + Real_opl.D_191 + Real_opl.Sum_akciz),
                  0)
        INTO Opl#
        FROM Real_opl, Bills, MONTH
       WHERE Real_opl.Nom_dok = Bills.Nom_dok
         AND Bills.Nom_zd = MONTH.Nom_zd
         AND MONTH.Planstru_id = Planstru_id#
         AND Bills.Dog_id = Dog_id#
         AND Real_opl.Data_post < TRUNC (Date_graphik#, 'Mon');

      IF Planstru_id# <> 95
      THEN
         SELECT NVL (SUM (Opl.Summa), 0)
           INTO Opl1#
           FROM Opl
          WHERE Dog_id = Dog_id# AND Data_por < TRUNC (Date_graphik#, 'Mon');

         Opl# := Opl1# - Opl#;
      END IF;
   ELSE
      SELECT NVL (SUM (Opl.Summa), 0)
        INTO Opl#
        FROM Opl
       WHERE Dog_id = Dog_id# AND Data_por < TRUNC (Date_graphik#, 'Mon');
   END IF;

   IF V_is_agent = 2
   THEN
      IF Planstru_id# IS NOT NULL
      THEN
         SELECT NVL (SUM (Bills.Prod_sum), 0)
           INTO Otgr#
           FROM Bills, MONTH
          WHERE Bills.Nom_zd = MONTH.Nom_zd
            AND MONTH.Planstru_id = Planstru_id#
            AND Bills.Dog_id = Dog_id#
            AND Bills.Date_kvit + Bills.Kol_dn <= Date_graphik#
/*ADVICE(117): Complex expression not fully parenthesized [404] */
                                                               ;

         IF Planstru_id# <> 95
         THEN
            SELECT NVL (SUM (Bills.Prod_sum), 0)
              INTO Otgr1#
              FROM Bills
             WHERE Dog_id = Dog_id# AND Date_kvit + Kol_dn <= Date_graphik#
/*ADVICE(126): Complex expression not fully parenthesized [404] */
                                                                           ;

            Otgr# := Otgr1# - Otgr#;
         END IF;
      ELSE
         SELECT NVL (SUM (Bills.Prod_sum), 0)
           INTO Otgr#
           FROM Bills
          WHERE Dog_id = Dog_id# AND Date_kvit + Kol_dn <= Date_graphik#
/*ADVICE(136): Complex expression not fully parenthesized [404] */
                                                                        ;
      END IF;
   ELSE
      SELECT NVL (SUM (Bills.Summa_dok), 0)
        INTO Otgr#
        FROM Bills
       WHERE Dog_id = Dog_id# AND Date_kvit + Kol_dn <= Date_graphik#
/*ADVICE(144): Complex expression not fully parenthesized [404] */
                                                                     ;
   END IF;

   Pros1# := Otgr# - Opl#;
   Pros2# := 0;

   OPEN Temp;

   LOOP
      IF Pros1# <= 0
      THEN
         EXIT;
/*ADVICE(157): IF THEN EXIT should be replaced by EXIT WHEN [401] */

      END IF;

      FETCH Temp
       INTO Dest;

      EXIT WHEN Temp%NOTFOUND;

      IF V_is_agent = 2
      THEN
         IF Dest.Summa_prod <= Pros1#
         THEN
            Pros2# := Pros2# + Dest.Summa_prod;
            Pros1# := Pros1# - Dest.Summa_prod;
         ELSE
            Pros2# := Pros2# + Pros1#;
            Pros1# := 0;
         END IF;
      ELSE
         IF Dest.Summa_dok <= Pros1#
         THEN
            Pros2# := Pros2# + Dest.Summa_prod;
            Pros1# := Pros1# - Dest.Summa_dok;
         ELSE
            Pros2# := Pros2# + Dest.Summa_prod * (Pros1# / Dest.Summa_dok);
            Pros1# := 0;
         END IF;
      END IF;
   END LOOP;
/*ADVICE(187): Presence of more than one exit point from a loop [503] */


   RETURN Pros2#;
END Get_Fin_By_Date_Dog_Sum_old;

/

--
-- GET_KOL_DN  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_KOL_DN
 (pDOG_ID NUMBER,pBEGIN_DATE DATE,pEND_DATE DATE,pPROD_ID_NPR VARCHAR2 DEFAULT NULL)
RETURN NUMBER
AS
  vKOL_DN NUMBER;
  vPROD_ID_NPR VARCHAR2(30);
BEGIN

  IF pPROD_ID_NPR||' '=' ' THEN
    vPROD_ID_NPR:='*';
  ELSE
    vPROD_ID_NPR:=pPROD_ID_NPR;	
  END IF;

  vKOL_DN:=0;
    
  -- Определяем отсрочку из последнего счета по договору за этот период (по н/пр)
  FOR lcur IN (SELECT /*+ RULE */ b.KOL_DN FROM BILL_POS bp, BILLS b
               WHERE b.NOM_DOK=bp.NOM_DOK
			     AND b.DOG_ID=pDOG_ID
			     AND b.DATE_KVIT<=pEND_DATE
				 AND bp.PROD_ID_NPR=DECODE(vPROD_ID_NPR,'*',bp.PROD_ID_NPR,vPROD_ID_NPR)
				 AND bP.PROD_ID_NPR>='10100' 
			  ORDER BY b.DATE_KVIT DESC) LOOP
    vKOL_DN:=lcur.KOL_DN;
	EXIT;
  END LOOP;
  
  IF vKOL_DN=0 THEN
    -- Определяем отсрочку из последнего счета по договору за этот период (по услугам)
    FOR lcur IN (SELECT /*+ RULE */ b.KOL_DN FROM BILL_POS bp, BILLS b
               WHERE b.NOM_DOK=bp.NOM_DOK
			     AND b.DOG_ID=pDOG_ID
			     AND b.DATE_KVIT<=pEND_DATE
				 AND bp.PROD_ID_NPR=DECODE(vPROD_ID_NPR,'*',bp.PROD_ID_NPR,vPROD_ID_NPR)
				 AND bP.PROD_ID_NPR<'10100'
			  ORDER BY b.DATE_KVIT DESC) LOOP
      vKOL_DN:=lcur.KOL_DN;
  	  EXIT;
    END LOOP;
  END IF;	

  IF vKOL_DN=0 THEN
    -- Определяем отсрочку из заявки
    FOR lcur IN (SELECT /*+ RULE */ b.KOL_DN FROM MONTH a,USL_DOG b
               WHERE a.DOG_ID=pDOG_ID
			     AND a.DOG_ID=b.DOG_ID
			     AND a.USL_NUMBER=b.USL_NUMBER
			     AND a.DATE_PLAN<=LAST_DAY(pEND_DATE)
			  ORDER BY a.INPUT_DATE DESC) LOOP
      vKOL_DN:=lcur.KOL_DN;
  	  EXIT;
    END LOOP;
  END IF;	
  
  RETURN vKOL_DN;
END Get_KOL_DN;

/

--
-- GET_PRICE_PROTOKOL  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Price_Protokol
 (nom_dok# NUMBER)
RETURN VARCHAR2
AS
  val# VARCHAR2(50);
  kod_npr# VARCHAR2(5);
  cat_cen# NUMBER;
  date_kvit# DATE;
  date_vyp_sf# DATE;
  date_cena# DATE;
  old_nom_sf# NUMBER;
  nom_sf# NUMBER;
  proto_num# VARCHAR2(15);
  proto_date# DATE;
--  propis# varchar2(4000);
BEGIN
  -- Реквизиты счета
  SELECT /*+ rule */ v_bills.PROD_ID_NPR,USL_DOG.CAT_CEN_ID,v_bills.DATE_KVIT,v_bills.DATE_VYP_SF,v_bills.NOM_SF,v_bills.OLD_NOM_SF,v_bills.PROTO_NUM,v_bills.PROTO_DATE 
    INTO kod_npr#,cat_cen#,date_kvit#,date_vyp_sf#,nom_sf#,old_nom_sf#,proto_num#,proto_date#  
	FROM v_bills,USL_DOG,BILLS
    WHERE BILLS.DOG_ID=USL_DOG.dog_id AND BILLS.USL_NUMBER=USL_DOG.USL_NUMBER AND v_bills.NOM_DOK=nom_dok# AND BILLS.nom_dok=v_bills.nom_dok;
 
  IF proto_num# IS NULL OR LTRIM(RTRIM(proto_num#))||' '=' ' THEN  
    -- Определяем дату
    IF old_nom_sf# IS NOT NULL AND old_nom_sf#<>nom_sf# THEN
      -- Если счет корректирует другой счет (но не минусовой) - по дате счета
      date_cena#:=date_vyp_sf#;
    ELSE
      -- Если счет оригинальный или минусовой - по дате квитанции
      date_cena#:=date_kvit#;
    END IF;		
	
    SELECT MAX(a.PROTOKOL_NUM || ' от ' || TO_CHAR(a.PROTOKOL_DATE,'dd.mm.yy') || 'г.') INTO val# FROM NPR_PRICES a
    WHERE 
     (a.begin_date=(SELECT MAX(begin_date) FROM NPR_PRICES b 
         WHERE b.cat_cen_id=cat_cen# AND b.prod_id_npr=kod_npr# AND b.begin_date<=date_cena# AND b.is_original=1)) AND
	  (a.cat_cen_id=cat_cen# AND a.prod_id_npr=kod_npr# AND a.begin_date<=date_cena# AND a.is_original=1);
  ELSE
    val#:=proto_num# || ' от ' || TO_CHAR(proto_date#,'dd.mm.yy') || 'г.';
  END IF;
  RETURN val#;
END Get_Price_Protokol;

/

--
-- GET_RAST_INT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Rast_Int
 (nom_zd# VARCHAR2)
RETURN VARCHAR2
AS
  rast# NUMBER;
  val# VARCHAR2(50);
BEGIN
  BEGIN
    SELECT KLS_STAN.rast INTO rast# FROM MONTH,KLS_STAN 
      WHERE MONTH.STAN_ID=KLS_STAN.ID AND MONTH.nom_zd=nom_zd#;
	rast#:=NVL(rast#,0);  
  EXCEPTION
	WHEN OTHERS THEN
	  rast#:=0;
  END;	  

  val#:='';	
  IF rast#<501 THEN
    val#:='(до 500 км)';
  ELSE		
    IF rast#<1001 THEN
      val#:='(от 501 до 1000 км)';
	ELSE  
      IF rast#<1501 THEN
        val#:='(от 1001 до 1500 км)';
	  ELSE  
        IF rast#<2001 THEN
          val#:='(от 1501 до 2000 км)';
        ELSE  
          IF rast#<2501 THEN
            val#:='(от 2001 до 2500 км)';
          ELSE  
            IF rast#<3001 THEN
              val#:='(от 2501 до 3000 км)';
			ELSE  
              IF rast#<3501 THEN
                val#:='(от 3001 до 3500 км)';
			  ELSE	
                IF rast#<4001 THEN
                  val#:='(от 3501 до 4000 км)';
				ELSE  
                  IF rast#<4501 THEN
                    val#:='(от 4001 до 4500 км)';
                  ELSE  
                    IF rast#<5001 THEN
                      val#:='(от 4501 до 5000 км)';
                    ELSE  
                      IF rast#<5501 THEN
                        val#:='(от 5001 до 5500 км)';
                      ELSE  
                        IF rast#<6001 THEN
                          val#:='(от 5501 до 6000 км)';
						ELSE  
                          IF rast#<6501 THEN
                            val#:='(от 6001 до 6500 км)';
						  ELSE	
                            IF rast#<7001 THEN
                              val#:='(от 6501 до 7000 км)';
							ELSE  
                              IF rast#<7501 THEN
                                val#:='(от 7001 до 7500 км)';
	  				  	  	  ELSE  
                                IF rast#<8001 THEN
                                  val#:='(от 7501 до 8000 км)';
							    ELSE  
                                  IF rast#<8501 THEN
                                    val#:='(от 8001 до 8500 км)';
							      ELSE  
                                    IF rast#<9001 THEN
                                      val#:='(от 8501 до 9000 км)';
							        ELSE  
                                      val#:='(более 9000 км)';
									END IF;
								  END IF;
								END IF;
							  END IF;
							END IF;
						  END IF;	  	  	  
  				        END IF;
					  END IF;
					END IF;
				  END IF;	  	
				END IF;  	
			  END IF;	  
			END IF;  
          END IF;  
		END IF;  
 	  END IF;  
	END IF;  
  END IF;  

  RETURN val#;
END Get_Rast_Int;

/

--
-- SF_F_GET_PROPISI_SFPROD  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.sf_f_get_propisi_sfprod
 (kod_prod# number, kod_tu# number)
return varchar2
as
  sum# number;
  val# varchar2(3);
--  propis# varchar2(4000);
begin
  select sum(summa) into sum# from v_bill_pos poz
   where nom_dok = kod_prod#;
  val#:='РУБ';
  return Upper(Substr(sfsys.get_propisi (sum#, val#),1,1)) || Substr(sfsys.get_propisi (sum#, val#),2,length(sfsys.get_propisi (sum#, val#))-1);
end sf_f_get_propisi_sfprod;

/

--
-- SF_F_GET_PROPISI_SFPRODNDS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.sf_f_get_propisi_sfprodNDS
 (kod_prod# number, kod_tu# number)
return varchar2
as
  sum# number;
  val# varchar2(3);
--  propis# varchar2(4000);
begin
  select sum(summa_nds20) into sum# from v_bill_pos poz
   where nom_dok = kod_prod#;
  val#:='РУБ';
  return Upper(Substr(sfsys.get_propisi (sum#, val#),1,1)) || Substr(sfsys.get_propisi (sum#, val#),2,length(sfsys.get_propisi (sum#, val#))-1);
end sf_f_get_propisi_sfprodNDS; 
/

--
-- SF_F_GET_PROPISI_SFPRODNONDS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.sf_f_get_propisi_sfprodNONDS
 (kod_prod# number, kod_tu# number)
return varchar2
as
  sum# number;
  val# varchar2(3);
--  propis# varchar2(4000);
begin
  select sum(summa) into sum# from v_bill_pos poz
   where nom_dok = kod_prod#;
  val#:='РУБ';
  return Upper(Substr(sfsys.get_propisi (sum#, val#),1,1)) || Substr(sfsys.get_propisi (sum#, val#),2,length(sfsys.get_propisi (sum#, val#))-1);
end sf_f_get_propisi_sfprodNONDS; 
/

--
-- V_AGENT_REPORT_2004  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AGENT_REPORT_2004
(DATE_AGENT, DOG_NUMBER, DOG_DATE, PREDPR_NAME, VES, 
 SUM_TARIF_AREND_BN, SUM_TARIF_AREND_NDS, SUM_TARIF_AREND, SUM_TARIF_BN, SUM_TARIF_NDS, 
 SUM_TARIF, SUM_VOZN_10001_BN, SUM_VOZN_10001_NDS, SUM_VOZN_10001, SUM_VOZN_BN, 
 SUM_VOZN_NDS, SUM_VOZN, SUM_USL_AREND_BN, SUM_USL_AREND_NDS, SUM_USL_AREND, 
 SUM_USL_BN, SUM_USL_NDS, SUM_USL, SUM_VOZN_GD_BN, SUM_VOZN_GD_NDS, 
 SUM_VOZN_GD, SUM_STRAH)
AS 
SELECT
  LAST_DAY(v_bills.DATE_VYP_SF) AS date_agent,
  kls_dog.DOG_NUMBER,
  kls_dog.dog_date,
  kls_predpr.PREDPR_NAME,
  SUM(v_bill_pos_flat.VES) AS ves,
  -- Тариф по транспортировке в аренд.вагонах
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' THEN v_bill_pos_flat.TARIF_BN+v_bill_pos_flat.TARIF_GUARD_BN
		 ELSE 0
	  END) AS sum_tarif_arend_bn,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' THEN v_bill_pos_flat.TARIF_NDS+v_bill_pos_flat.TARIF_GUARD_NDS
		 ELSE 0
	  END) AS sum_tarif_arend_nds,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' THEN v_bill_pos_flat.TARIF+v_bill_pos_flat.TARIF_GUARD
		 ELSE 0
	  END) AS sum_tarif_arend,
  -- Тариф
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' THEN 0
		 ELSE v_bill_pos_flat.TARIF_BN+v_bill_pos_flat.TARIF_GUARD_BN
	  END) AS sum_tarif_bn,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' THEN 0
		 ELSE v_bill_pos_flat.TARIF_NDS+v_bill_pos_flat.TARIF_GUARD_NDS
	  END) AS sum_tarif_nds,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' THEN 0
		 ELSE v_bill_pos_flat.TARIF+v_bill_pos_flat.TARIF_GUARD
	  END) AS sum_tarif,
  -- Вознаграждение по ИВР
  SUM(CASE
	     WHEN v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10001_bn,
  SUM(CASE
	     WHEN v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10001_NDS,
  SUM(CASE
	     WHEN v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10001,
  -- Вознаграждение
  SUM(CASE
	     WHEN NOT(usl_dog.vid_usl_id=7 AND kls_dog.DOG_NUMBER='0311176') AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_bn,
  SUM(CASE
	     WHEN NOT(usl_dog.vid_usl_id=7 AND kls_dog.DOG_NUMBER='0311176') AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_NDS,
  SUM(CASE
	     WHEN NOT(usl_dog.vid_usl_id=7 AND kls_dog.DOG_NUMBER='0311176') AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn,
  -- Услуги по организации транспортировки в аренд вагонах
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_usl_arend_bn,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_usl_arend_NDS,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)<>0 AND kls_dog.DOG_NUMBER='0311176' AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_usl_arend,
  -- Услуги по организации транспортировки в вагонах МПС
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)=0 AND kls_dog.DOG_NUMBER='0311176' AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_usl_bn,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)=0 AND kls_dog.DOG_NUMBER='0311176' AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_usl_NDS,
  SUM(CASE
	     WHEN usl_dog.vid_usl_id=7 AND NVL(v_bill_pos_flat.VOZN12_BN,0)=0 AND kls_dog.DOG_NUMBER='0311176' AND v_bills.IS_AGENT<>2 AND v_bills.PROD_ID_NPR<>'10001' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_usl,
  -- Услуги предоставлению вагонов
  SUM(CASE
	     WHEN v_bills.IS_AGENT=2 THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_gd_bn,
  SUM(CASE
	     WHEN v_bills.IS_AGENT=2 THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_gd_NDS,
  SUM(CASE
	     WHEN v_bills.IS_AGENT=2 THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_gd,
  SUM(v_bill_pos_flat.STRAH) AS sum_strah
 FROM v_bills_fin_snp v_bills,v_bill_pos_flat_fin_snp v_bill_pos_flat,kls_dog,kls_predpr,usl_dog,V_MASTER_REPORTS
 WHERE
   v_bills.DOG_ID=kls_dog.id and
   v_bills.NOM_DOK=v_bill_pos_flat.NOM_DOK and
   kls_dog.PREDPR_ID=kls_predpr.ID and
   v_bills.DATE_VYP_SF>=TO_DATE('01.01.2004','dd.mm.yyyy') and
   v_bill_pos_flat.DATE_REALIZ>=TO_DATE('01.01.2004','dd.mm.yyyy') and
   kls_dog.dog_number LIKE V_MASTER_REPORTS.DOG_NUMBER and
   v_bills.DATE_VYP_SF between begin_date AND end_date and
   NLS_UPPER(V_MASTER_REPORTS.REPORT_FILE)='OTCH_AGENT_2004.XLS'
   AND (v_bills.PROD_ID_NPR='10001' OR
        v_bills.PROD_ID_NPR>='10100')
   AND v_bills.DOG_ID=usl_dog.DOG_ID(+)
   AND v_bills.USL_NUMBER=usl_dog.USL_NUMBER(+)
   AND v_bills.IS_AGENT IN (1,2)
 GROUP BY
   LAST_DAY(v_bills.DATE_VYP_SF),
   kls_dog.DOG_NUMBER,
   kls_dog.dog_date,
   kls_predpr.PREDPR_NAME;


--
-- V_AGENT_REPORT_2005  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AGENT_REPORT_2005
(DATE_AGENT, DOG_NUMBER, DOG_DATE, PREDPR_NAME, VES, 
 SUM_TARIF_AREND_BN, SUM_TARIF_AREND_NDS, SUM_TARIF_AREND, SUM_TARIF_BN, SUM_TARIF_NDS, 
 SUM_TARIF, SUM_VOZN_10001_BN, SUM_VOZN_10001_NDS, SUM_VOZN_10001, SUM_VOZN_BN, 
 SUM_VOZN_NDS, SUM_VOZN, SUM_USL_AREND_BN, SUM_USL_AREND_NDS, SUM_USL_AREND, 
 SUM_USL_BN, SUM_USL_NDS, SUM_USL, SUM_VOZN_GD_BN, SUM_VOZN_GD_NDS, 
 SUM_VOZN_GD, SUM_STRAH, SUM_VOZN_10052_BN, SUM_VOZN_10052_NDS, SUM_VOZN_10052, 
 SUM_VOZN_10051_BN, SUM_VOZN_10051_NDS, SUM_VOZN_10051, SUM_VOZN_10050_BN, SUM_VOZN_10050_NDS, 
 SUM_VOZN_10050, SUM_VOZN_10060_BN, SUM_VOZN_10060_NDS, SUM_VOZN_10060, SUM_VOZN_10061_BN, 
 SUM_VOZN_10061_NDS, SUM_VOZN_10061, SUM_VOZN_10053_BN, SUM_VOZN_10053_NDS, SUM_VOZN_10053, 
 SUM_VOZN_10054_BN, SUM_VOZN_10054_NDS, SUM_VOZN_10054, SUM_VOZN_10007_BN, SUM_VOZN_10007_NDS, 
 SUM_VOZN_10007)
AS 
SELECT
  end_date AS date_agent,
  kls_dog.DOG_NUMBER,
  RusDate(kls_dog.dog_date) as dog_date,
  kls_predpr.PREDPR_NAME,
  SUM(v_bill_pos_flat.VES) AS ves,
  -- Тариф по транспортировке в аренд.вагонах
  0 AS sum_tarif_arend_bn,
  0 AS sum_tarif_arend_nds,
  0 AS sum_tarif_arend,
  -- Тариф
  SUM(v_bill_pos_flat.TARIF_BN+v_bill_pos_flat.TARIF_GUARD_BN) AS sum_tarif_bn,
  SUM(v_bill_pos_flat.TARIF_NDS+v_bill_pos_flat.TARIF_GUARD_NDS) AS sum_tarif_nds,
  SUM(v_bill_pos_flat.TARIF+v_bill_pos_flat.TARIF_GUARD) AS sum_tarif,
  -- Вознаграждение по ИВР
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10001_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10001_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10001,
  -- Вознаграждение
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR>='10100' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR>='10100' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR>='10100' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn,
  -- Услуги по организации транспортировки в аренд вагонах
  0 AS sum_usl_arend_bn,
  0 AS sum_usl_arend_NDS,
  0 AS sum_usl_arend,
  -- Услуги по организации транспортировки в вагонах МПС
  0 AS sum_usl_bn,
  0 AS sum_usl_NDS,
  0 AS sum_usl,
  -- Услуги предоставлению вагонов
  0 AS sum_vozn_gd_bn,
  0 AS sum_vozn_gd_NDS,
  0 AS sum_vozn_gd,
  SUM(v_bill_pos_flat.STRAH) AS sum_strah,
  -- Договорный сбор за перевозку в вагонах перевозчика
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10052' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10052_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10052' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10052_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10052' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10052,
  -- Договорный сбор за перевозку в арендованных вагонах
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10051' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10051_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10051' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10051_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10051' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10051,
  -- Cбор за изменение заявки
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10050' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10050_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10050' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10050_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10050' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10050,
  -- Штраф за невыполнение заявки 0,1 МРОТ
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10060' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10060_bn,
  'НДС не предусмотрен' AS sum_vozn_10060_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10060' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10060,
  -- Штраф за невыполнение заявки 0,1 МРОТ/3*2
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10061' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10061_bn,
  'НДС не предусмотрен' AS sum_vozn_10061_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10061' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10061,
  -- Cбор за изменение станции
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10053' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10053_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10053' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10053_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10053' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10053,
  -- Cбор за факс-обмен
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10054' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10054_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10054' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10054_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10054' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10054,
  -- Cбор за факс-обмен
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10007' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
		 ELSE 0
	  END) AS sum_vozn_10007_bn,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10007' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
		 ELSE 0
	  END) AS sum_vozn_10007_NDS,
  SUM(CASE
	     WHEN v_bills.PROD_ID_NPR='10007' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
		 ELSE 0
	  END) AS sum_vozn_10007
 FROM v_bills_fin_unp v_bills,v_bill_pos_flat_fin_unp v_bill_pos_flat,kls_dog,kls_predpr,usl_dog,V_MASTER_REPORTS,month,kls_vid_otgr
 WHERE
   v_bills.DOG_ID=kls_dog.id and
   v_bills.NOM_DOK=v_bill_pos_flat.NOM_DOK and
   kls_dog.PREDPR_ID=kls_predpr.ID and
--   v_bills.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy') and
--   v_bill_pos_flat.DATE_REALIZ>=TO_DATE('01.01.2005','dd.mm.yyyy') and
   kls_dog.dog_number LIKE V_MASTER_REPORTS.DOG_NUMBER and
   v_bills.DATE_VYP_SF between begin_date AND end_date and
   NLS_UPPER(V_MASTER_REPORTS.REPORT_FILE)='OTCH_AGENT_2005.XLS'
   AND (v_bills.PROD_ID_NPR IN ('10001','10007','10050','10051','10052','10053','10054','10060','10061') OR
        v_bills.PROD_ID_NPR>='10100')
   AND v_bills.DOG_ID=usl_dog.DOG_ID(+)
   AND v_bills.USL_NUMBER=usl_dog.USL_NUMBER(+)
   AND v_bills.IS_AGENT IN (2,4,5)
   AND v_bills.nom_zd=month.nom_zd(+)
   AND month.load_abbr=kls_vid_otgr.load_abbr(+)
   AND (kls_vid_otgr.LOAD_TYPE_ID in (1,6) or kls_vid_otgr.LOAD_TYPE_ID is null)
 GROUP BY
   end_date,
   kls_dog.DOG_NUMBER,
   kls_dog.dog_date,
   kls_predpr.PREDPR_NAME;


--
-- V_BILL_POS_FLAT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BILL_POS_FLAT
(NOM_DOK, IS_AGENT, DATE_REALIZ, VES, CENA_BN, 
 SUMMA_BN, SUMMA_AKCIZ, SUMMA_PROD_BN, SUMMA_PROD_NDS, CENA, 
 SUMMA_PROD, TARIF_BN, TARIF_NDS, TARIF, TARIF_GUARD_BN, 
 TARIF_GUARD_NDS, TARIF_GUARD, VOZN11_BN, VOZN11_NDS, VOZN11, 
 VOZN12_BN, VOZN12_NDS, VOZN12, STRAH, NACENKA)
AS 
SELECT "NOM_DOK","IS_AGENT","DATE_REALIZ","VES","CENA_BN","SUMMA_BN","SUMMA_AKCIZ","SUMMA_PROD_BN","SUMMA_PROD_NDS","CENA","SUMMA_PROD","TARIF_BN","TARIF_NDS","TARIF","TARIF_GUARD_BN","TARIF_GUARD_NDS","TARIF_GUARD","VOZN11_BN","VOZN11_NDS","VOZN11","VOZN12_BN","VOZN12_NDS","VOZN12","STRAH","NACENKA" FROM V_BILL_POS_FLAT_FIN_SNP
UNION ALL
SELECT "NOM_DOK","IS_AGENT","DATE_REALIZ","VES","CENA_BN","SUMMA_BN","SUMMA_AKCIZ","SUMMA_PROD_BN","SUMMA_PROD_NDS","CENA","SUMMA_PROD","TARIF_BN","TARIF_NDS","TARIF","TARIF_GUARD_BN","TARIF_GUARD_NDS","TARIF_GUARD","VOZN11_BN","VOZN11_NDS","VOZN11","VOZN12_BN","VOZN12_NDS","VOZN12","STRAH","NACENKA" FROM V_BILL_POS_FLAT_FIN_UNP
UNION ALL
SELECT "NOM_DOK","IS_AGENT","DATE_REALIZ","VES","CENA_BN","SUMMA_BN","SUMMA_AKCIZ","SUMMA_PROD_BN","SUMMA_PROD_NDS","CENA","SUMMA_PROD","TARIF_BN","TARIF_NDS","TARIF","TARIF_GUARD_BN","TARIF_GUARD_NDS","TARIF_GUARD","VOZN11_BN","VOZN11_NDS","VOZN11","VOZN12_BN","VOZN12_NDS","VOZN12","STRAH","NACENKA" FROM V_BILL_POS_FLAT_R3;


--
-- V_BITUM_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BITUM_UNP
(NZ_VX, SH_VLAD, DATA_VX, LK, SH_NPR, 
 K_N, NAME, LK_POL, N_POL, STAN, 
 U_STAN, VES, KOL, DOR, PRIM, 
 KOD_DOR, KOD_POL, PRIZ, ADRESS, CODE_D, 
 DATA_DOG, GR4, VID_Z, VES_A, CENA, 
 KOD_OBL, N_PLAT, KOD_10, CENA_BN, OKPO, 
 DATE_PLAN, PRIZN_EXP, KOD_TEX_PD, NDS, ID_1, 
 NAIM_PR)
AS 
select
m.nom_zd as nz_vx,
1 as sh_vlad,
m.input_date as data_vx,
d.predpr_id as lk,
0 as sh_npr,
SUBSTR(p.abbr_npr,1,10) as k_n,
plat.predpr_name as name,
m.poluch_id as lk_pol,
pol.predpr_name as n_pol,
s.stan_name as stan,
s.stan_name as u_stan,
m.tonn_declared as ves,
m.cist_declared as kol,
gd.short_name as dor,
m.prim,
lpad(s.stan_kod,6,'0') as kod_dor,
pol.GD_KOD as kod_pol,
decode(m.is_exp,1,4,2) as priz,
Get_addr(pol.region_p_id,pol.POSTINDEX_P,pol.CITY_P,pol.ADDRESS_P) as adress,
d.short_number as code_d,
d.dog_date as data_dog,
m.gr4,
vo.load_type_id as vid_z,
m.tonn_declared as ves_a,
nvl(m.cena_otp,0) as cena,
reg.KOD_STATISTIC as kod_obl,
plat.predpr_name as n_plat,
p.kod_10,
nvl(m.cena,0) as cena_bn,
pol.okpo as okpo,
m.date_plan,
m.is_exp as prizn_exp,
m.tex_pd_id as kod_tex_pd,
nvl(m.cena_otp,0)-nvl(m.cena,0) as nds,
p.id as id_1,
p.name_npr as naim_pr
from month m, kls_dog d, kls_vid_otgr vo, kls_prod p, kls_predpr plat, kls_predpr pol, kls_stan s, kls_gdor gd,
kls_region reg
where m.dog_id=d.id(+)
and m.load_abbr=vo.load_abbr(+)
and m.prod_id_npr=p.id_npr(+)
and d.predpr_id=plat.id(+)
and m.poluch_id=pol.id(+)
and m.stan_id=s.id(+)
and s.gdor_id=gd.id(+)
and pol.region_p_id=reg.id(+)
and date_plan>=to_date('01.04.2008','dd.mm.yyyy')
and (/*vo.load_type_id=2 OR*/ substr(m.prod_id_npr,1,3) in ('130','131','242'))
--and m.nom_zd='3020107134'
;


--
-- V_DEKADA_MOSK_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DEKADA_MOSK_PLAN
(VID_DOC, GR_PROD, PROD, PLAT, DATE_PLAN, 
 TONN_DECLARED, VES)
AS 
select
  'plan' as VID_DOC,                 
  oil_prod_grp.NAME_NPR AS GR_PROD,
  oil_prod.NAME_NPR as PROD,
  kls_predpr.PREDPR_NAME as PLAT,
  TO_CHAR(plan_per.date_plan,'YYYYMMDD') as date_plan,   -- Дата отгрузки (?)
--  max(oil_prod.nagr) as norm,
  sum(m1.tonn_declared) as tonn_declared,
  SUM(plan_post.plan_ves) as ves     -- Количество
 from
  plan_post plan_post
  join
  kls_prod oil_prod on plan_post.prod_id_npr=oil_prod.id_npr
  join
  kls_prod oil_prod_grp on oil_prod.id_group_npr=oil_prod_grp.id_npr
  join
  kls_dog dogovor on plan_post.dog_id=dogovor.id
  join 
  kls_predpr on dogovor.PREDPR_ID=kls_predpr.ID
  join
  kls_planstru plan_pos on plan_post.planstru_id=plan_pos.id
  join
  plan_periods plan_per on plan_post.plan_per_id=plan_per.id
  left join 
  (select PROD_ID_NPR,DATE_PLAN,dog_id,sum(tonn_declared) as tonn_declared from month group by PROD_ID_NPR,DATE_PLAN,dog_id) m1 on (m1.PROD_ID_NPR=plan_post.PROD_ID_NPR and m1.date_plan=plan_per.date_plan and m1.dog_id=plan_post.DOG_ID)
where plan_post.plan_id=2 -- московский план
  and plan_per.date_plan between FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_MOSK.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_MOSK.XLS')
  and plan_pos.kod_sgr<>21
  and dogovor.isu_kod_dog like 'A%' --убираем из плана поставки на собственные нужды
GROUP BY
  kls_predpr.PREDPR_NAME,
  TO_CHAR(plan_per.num_plan),
  TO_CHAR(plan_per.date_plan,'YYYYMMDD'),   -- Дата отгрузки (?)
  oil_prod_grp.NAME_NPR,
  oil_prod.NAME_NPR
HAVING SUM(plan_post.plan_ves)<>0
ORDER BY "GR_PROD","PROD","PLAT","DATE_PLAN" NULLS FIRST;


--
-- V_DEKADA_MOSK_RESULT_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DEKADA_MOSK_RESULT_PLAN
(GR_PROD, PROD, PLAT)
AS 
SELECT RES."GR_PROD",RES."PROD",RES."PLAT" FROM
(select
  oil_prod_grp.NAME_NPR AS GR_PROD,
  oil_prod.NAME_NPR AS PROD,
  kls_predpr.PREDPR_NAME AS PLAT	  	  
from
  plan_post plan_post
  join
  kls_prod oil_prod on plan_post.prod_id_npr=oil_prod.id_npr
  join
  kls_prod oil_prod_grp on oil_prod.id_group_npr=oil_prod_grp.id_npr
  join
  kls_dog dogovor on plan_post.dog_id=dogovor.id
  join 
  kls_predpr on dogovor.PREDPR_ID=kls_predpr.ID
  join
  kls_planstru plan_pos on plan_post.planstru_id=plan_pos.id
  join
  plan_periods plan_per on plan_post.plan_per_id=plan_per.id
where plan_post.plan_id=3 -- ОБР
  and plan_per.begin_date between FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_MOSK.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_MOSK.XLS')
  and plan_pos.kod_sgr<>21
  and dogovor.isu_kod_dog like 'A%' --убираем из плана поставки на собственные нужды
GROUP BY
  kls_predpr.PREDPR_NAME,
  oil_prod_grp.NAME_NPR,
  oil_prod.NAME_NPR
HAVING SUM(plan_post.plan_ves)<>0
UNION
select
  oil_prod_grp.NAME_NPR AS GR_PROD,
  oil_prod.NAME_NPR AS PROD,
  kls_predpr.PREDPR_NAME AS PLAT
 from
  plan_post plan_post
  join
  kls_prod oil_prod on plan_post.prod_id_npr=oil_prod.id_npr
  join
  kls_prod oil_prod_grp on oil_prod.id_group_npr=oil_prod_grp.id_npr
  join
  kls_dog dogovor on plan_post.dog_id=dogovor.id
  join 
  kls_predpr on dogovor.PREDPR_ID=kls_predpr.ID
  join
  kls_planstru plan_pos on plan_post.planstru_id=plan_pos.id
  join
  plan_periods plan_per on plan_post.plan_per_id=plan_per.id
  left join 
  (select PROD_ID_NPR,DATE_PLAN,dog_id,sum(tonn_declared) as tonn_declared from month group by PROD_ID_NPR,DATE_PLAN,dog_id) m1 on (m1.PROD_ID_NPR=plan_post.PROD_ID_NPR and m1.date_plan=plan_per.date_plan and m1.dog_id=plan_post.DOG_ID)
where plan_post.plan_id=2 -- московский план
  and plan_per.date_plan between FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_MOSK.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_MOSK.XLS')
  and plan_pos.kod_sgr<>21
  and dogovor.isu_kod_dog like 'A%' --убираем из плана поставки на собственные нужды
GROUP BY
  kls_predpr.PREDPR_NAME,
  oil_prod_grp.NAME_NPR,
  oil_prod.NAME_NPR
HAVING SUM(plan_post.plan_ves)<>0
) RES
ORDER BY RES.GR_PROD,RES.PROD,RES.PLAT NULLS FIRST;


--
-- V_FIN_LICSCHET  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_LICSCHET
(PREDPR_NAME, BEGIN_DATE, END_DATE, DOG_NUMBER, DOG_DATE, 
 PROD_NAME, IS_SALDO, NOM_DOK, NOM_SF, DATE_VYP_SF, 
 SUMMA_DOK, NUM_PLAT, DATE_PLAT, DATE_POST, SUMMA_PLAT, 
 DATE_ORDER)
AS 
SELECT 
  A.predpr_name, 
  A.begin_date, 
  A.end_date, 
  A.dog_number, 
  A.dog_date, 
  DECODE(A.IS_SALDO,1,'Сальдо на начало периода',A.PROD_NAME) AS PROD_NAME, 
  A.IS_SALDO, 
  DECODE(A.IS_SALDO,1,0,A.nom_dok) AS NOM_DOK, 
  DECODE(A.IS_SALDO,1,0,A.nom_sf) AS NOM_SF, 
  DECODE(A.IS_SALDO,1,a.begin_date-1,A.date_vyp_sf) AS date_vyp_sf, 
  SUM(A.summa_dok) AS summa_dok, 
  DECODE(A.IS_SALDO,1,'0',A.num_plat) AS num_plat, 
  DECODE(A.IS_SALDO,1,a.begin_date-1,A.date_plat) AS date_plat, 
  DECODE(A.IS_SALDO,1,a.begin_date-1,A.date_post) AS date_post, 
  SUM(A.summa_plat) AS summa_plat, 
  DECODE(A.IS_SALDO,1,A.begin_date-1,A.date_order) AS DATE_ORDER 
FROM 
( 
SELECT /*+ ORDERED */ 
  KLS_PREDPR.predpr_name, 
  r.begin_date, 
  r.end_date, 
  KLS_DOG.dog_number, 
  KLS_DOG.dog_date, 
  KLS_PROD.long_name_npr AS PROD_NAME, 
  b1.nom_dok, 
  b1.nom_sf, 
  b1.date_vyp_sf, 
  b1.luk_summa_dok AS summa_dok, 
  p1.num_plat, 
  p1.date_plat, 
  p1.date_post, 
  p1.summa_plat, 
  b1.date_kvit AS DATE_ORDER, 
  DECODE(SIGN(b1.date_kvit-r.begin_date),-1,1,0) AS IS_SALDO 
  FROM BILLS b1,KLS_DOG,KLS_PROD,KLS_PREDPR,v_master_reports r, 
  (SELECT 
     PAYMENTS_ON_BILLS.nom_dok, 
     PAYMENTS_ON_BILLS.payments_id, 
     PAYMENTS.num_plat, 
     PAYMENTS.date_plat, 
     PAYMENTS.date_post, 
     SUM(PAYMENTS_ON_BILLS.SUMMA) AS summa_plat 
     FROM PAYMENTS_ON_BILLS,PAYMENTS,v_master_reports r 
     WHERE NLS_UPPER(TRIM(r.report_file))='LIC_SCHET.XLS' AND 
       PAYMENTS_ON_BILLS.payments_id=PAYMENTS.id AND 
	   PAYMENTS.date_post<=r.end_date 
     GROUP BY 
       PAYMENTS_ON_BILLS.nom_dok, 
       PAYMENTS_ON_BILLS.payments_id, 
       PAYMENTS.num_plat, 
       PAYMENTS.date_plat, 
       PAYMENTS.date_post) p1 
  WHERE NLS_UPPER(TRIM(r.report_file))='LIC_SCHET.XLS' AND 
    b1.nom_dok=p1.nom_dok(+) AND 
	b1.dog_id=KLS_DOG.id AND 
	KLS_DOG.predpr_id=KLS_PREDPR.id AND 
	KLS_DOG.AGENT_ID in (8,4175) AND 
	b1.prod_id_npr=KLS_PROD.id_npr AND 
    b1.dog_id IN (SELECT id FROM KLS_DOG WHERE predpr_id=NVL(For_Temp.GET_AS_NUM('LC_PLAT','MASTER','LIC_SCHET.XLS'),0)) AND 
	b1.date_kvit>=TO_DATE('01.01.2005','dd.mm.yyyy') AND 
	b1.date_kvit<=r.end_date 
    AND KLS_PROD.ID_GROUP_NPR>=DECODE(r.GRP_ID_NPR,'*','00000',r.GRP_ID_NPR) 
    AND KLS_PROD.ID_GROUP_NPR<=DECODE(r.GRP_ID_NPR,'10100','99999','*','99999',r.GRP_ID_NPR) 
	AND b1.is_korr<>2 AND b1.to_korr<>-2 -- Без сторнированного и сторнирующего 
UNION ALL 
  SELECT * 
  FROM V_FIN_LICSCHET_UNUSEDPAY WHERE SUMMA_PLAT<>0 
) a 
GROUP BY 
  A.predpr_name, 
  A.begin_date, 
  A.end_date, 
  A.dog_number, 
  A.dog_date, 
  A.IS_SALDO, 
  DECODE(A.IS_SALDO,1,'Сальдо на начало периода',A.PROD_NAME), 
  DECODE(A.IS_SALDO,1,0,A.nom_dok), 
  DECODE(A.IS_SALDO,1,0,A.nom_sf), 
  DECODE(A.IS_SALDO,1,a.begin_date-1,A.date_vyp_sf), 
  DECODE(A.IS_SALDO,1,a.begin_date-1,A.date_plat), 
  DECODE(A.IS_SALDO,1,'0',A.num_plat), 
  DECODE(A.IS_SALDO,1,a.begin_date-1,A.date_post), 
  DECODE(A.IS_SALDO,1,A.begin_date-1,A.date_order);


--
-- V_FIN_REESTR_DEBKRED  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FIN_REESTR_DEBKRED
(ID, PREDPR_NAME, DOG_NUMBER, DOG_DATE, SUMMA_DOK, 
 PROSR, SUMMA_PAYED, SUMMA_KRED, SUMMA_TO_PAY_THIS_MONTH, SUMMA_PAYED_THIS_MONTH, 
 DATE_PROSR, DATE_REPORT)
AS 
SELECT
  kls_predpr.unp_id as id,
  kls_predpr.PREDPR_NAME,
  kls_dog.DOG_NUMBER,
  kls_dog.DOG_DATE,
  DECODE(V_FIN_REESTR_DEB.SUMMA_DOK,NULL,0,V_FIN_REESTR_DEB.SUMMA_DOK) AS SUMMA_DOK,
  DECODE(V_FIN_REESTR_DEB.PROSR,NULL,0,V_FIN_REESTR_DEB.PROSR) AS PROSR,
  DECODE(V_FIN_REESTR_DEB.SUMMA_PAYED,NULL,0,V_FIN_REESTR_DEB.SUMMA_PAYED) AS SUMMA_PAYED,
  DECODE(V_FIN_REESTR_KRED.SUMMA_KRED,NULL,0,V_FIN_REESTR_KRED.SUMMA_KRED) AS SUMMA_KRED,
  DECODE(V_FIN_REESTR_DEB.SUM_TO_PAY_THIS_MONTH,NULL,0,V_FIN_REESTR_DEB.SUM_TO_PAY_THIS_MONTH) AS SUMMA_TO_PAY_THIS_MONTH,
  DECODE(V_FIN_REESTR_KRED.SUM_PAYED_THIS_MONTH,NULL,0,V_FIN_REESTR_KRED.SUM_PAYED_THIS_MONTH) AS SUMMA_PAYED_THIS_MONTH,
  DECODE(V_FIN_REESTR_DEB.DATE_PROSR,NULL,TO_DATE('01.01.2050','dd.mm.yyyy'),V_FIN_REESTR_DEB.DATE_PROSR) AS DATE_PROSR,
  NVL(For_Temp.GET_AS_DATE('DATE_END','MASTER','REESTR_DEBKRED.XLS'),TRUNC(SYSDATE)) AS date_report
  FROM kls_predpr,kls_dog,V_FIN_REESTR_DEB,V_FIN_REESTR_KRED
  WHERE
    kls_predpr.ID=kls_dog.PREDPR_ID and
	kls_dog.id=V_FIN_REESTR_DEB.DOG_ID(+) and
	kls_dog.ID=V_FIN_REESTR_KRED.DOG_ID(+) and
	kls_dog.AGENT_ID in (8,4175) and
	(V_FIN_REESTR_DEB.SUMMA_DOK is not null or V_FIN_REESTR_KRED.SUMMA_KRED is not null)
ORDER BY
  kls_predpr.UNP_ID,
  kls_dog.DOG_NUMBER;


--
-- V_FINREPORT_9_FIPP_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_FACT
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_ID, PREDPR_NAME, 
 DOG_ID, DATE_BUXG, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   NVL(kls_dog.groupdog_id,6),
	   NVL(month.gosprog_id,0),
	   kls_predpr.ID,
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   v_bills_for_real_opl.date_buxg, 
	   v_bills_for_real_opl.DATE_KVIT+v_bills_for_real_opl.KOL_DN, 
	   r_o.summa_dok1
  FROM MASTER.real_opl r_o,
       v_bills_for_real_opl,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
        AND (v_bills_for_real_opl.dog_id = usl_dog.dog_id(+))
        AND (v_bills_for_real_opl.usl_number = usl_dog.usl_number(+))
        AND (v_bills_for_real_opl.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok(+))
		AND (r_o.close_date is null)
		AND NOT (kls_dog.id=668 AND (v_bills_for_real_opl.summa_dok=600 OR v_bills_for_real_opl.summa_dok=500))
       )
UNION ALL
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   1,
	   1,
	   kls_predpr.ID,
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   v_bills_for_real_opl.date_buxg, v_bills_for_real_opl.DATE_KVIT+v_bills_for_real_opl.KOL_DN, r_o.summa_dok1
  FROM MASTER.real_opl r_o,
       v_bills_for_real_opl,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
        AND (v_bills_for_real_opl.dog_id = usl_dog.dog_id(+))
        AND (v_bills_for_real_opl.usl_number = usl_dog.usl_number(+))
        AND (v_bills_for_real_opl.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok(+))
		AND (r_o.close_date is null)
		AND (kls_dog.id=668 AND (v_bills_for_real_opl.summa_dok=600 OR v_bills_for_real_opl.summa_dok=500))
       );


--
-- V_FINREPORT_9_FIPP_FACT_END  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_FACT_END
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_ID, PREDPR_NAME, 
 DOG_ID, DATE_BUXG, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT 
       payform_id,
	   groupdog_id,
	   0,
	   PREDPR_ID, 
	   PREDPR_NAME,
       dog_id,
	   date_buxg, DATE_TO_OPL, summa_dok
FROM v_finreport_9_fipp_fact
WHERE NOT (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6)  
UNION ALL
SELECT 
       payform_id,
	   1,
	   gosprog_id,
	   PREDPR_ID, 
	   PREDPR_NAME,
       dog_id,
	   date_buxg, DATE_TO_OPL, summa_dok
FROM v_finreport_9_fipp_fact
WHERE (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6);


--
-- V_FINREPORT_9_FIPP_FACTOPL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_FACTOPL
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATA_POST, SUMMA)
AS 
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   NVL(kls_dog.groupdog_id,6),
	   NVL(month.gosprog_id,0),
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   r_o.data_post, 
	   r_o.summa_dok1
  FROM MASTER.real_opl r_o,
       v_bills_for_real_opl,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
        AND (v_bills_for_real_opl.dog_id = usl_dog.dog_id(+))
        AND (v_bills_for_real_opl.usl_number = usl_dog.usl_number(+))
        AND (v_bills_for_real_opl.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok)
		AND NOT (r_o.close_date is null)
		AND NOT (kls_dog.id=668 AND (v_bills_for_real_opl.summa_dok=600 OR v_bills_for_real_opl.summa_dok=500))
       )
UNION ALL
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   1,
	   1,
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   r_o.data_post, 
	   r_o.summa_dok1
  FROM MASTER.real_opl r_o,
       v_bills_for_real_opl,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
        AND (v_bills_for_real_opl.dog_id = usl_dog.dog_id(+))
        AND (v_bills_for_real_opl.usl_number = usl_dog.usl_number(+))
        AND (v_bills_for_real_opl.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok)
		AND NOT (r_o.close_date is null)
		AND (kls_dog.id=668 AND (v_bills_for_real_opl.summa_dok=600 OR v_bills_for_real_opl.summa_dok=500))
       );


--
-- V_FINREPORT_9_FIPP_FACTOPL_END  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_FACTOPL_END
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATA_POST, SUMMA)
AS 
SELECT 
       payform_id,
	   groupdog_id,
	   0,
	   PREDPR_NAME,
       dog_id,
	   data_post, 
	   summa
FROM v_finreport_9_fipp_factOPL
WHERE NOT (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6)  
UNION ALL
SELECT 
       payform_id,
	   1,
	   gosprog_id,
	   PREDPR_NAME,
       dog_id,
	   data_post, 
	   summa
FROM v_finreport_9_fipp_factOPL
WHERE (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6);


--
-- V_FINREPORT_9_FIPP_FACTSF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_FACTSF
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATE_BUXG, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   NVL(kls_dog.groupdog_id,6),
	   NVL(month.gosprog_id,0),
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   v_bills_for_real_opl.date_buxg, 
	   v_bills_for_real_opl.DATE_KVIT+v_bills_for_real_opl.KOL_DN, 
	   r_o.summa_dok1
  FROM MASTER.real_opl r_o,
       v_bills_for_real_opl,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
        AND (v_bills_for_real_opl.dog_id = usl_dog.dog_id(+))
        AND (v_bills_for_real_opl.usl_number = usl_dog.usl_number(+))
        AND (v_bills_for_real_opl.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok)
		AND NOT (kls_dog.id=668 AND (v_bills_for_real_opl.summa_dok=600 OR v_bills_for_real_opl.summa_dok=500))
       )
UNION ALL
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   1,
	   1,
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   v_bills_for_real_opl.date_buxg, 
	   v_bills_for_real_opl.DATE_KVIT+v_bills_for_real_opl.KOL_DN, 
	   r_o.summa_dok1
  FROM MASTER.real_opl r_o,
       v_bills_for_real_opl,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills_for_real_opl.dog_id)
        AND (v_bills_for_real_opl.dog_id = usl_dog.dog_id(+))
        AND (v_bills_for_real_opl.usl_number = usl_dog.usl_number(+))
        AND (v_bills_for_real_opl.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (r_o.nom_dok=v_bills_for_real_opl.nom_dok)
		AND (kls_dog.id=668 AND (v_bills_for_real_opl.summa_dok=600 OR v_bills_for_real_opl.summa_dok=500))
       );


--
-- V_FINREPORT_9_FIPP_FACTSF_END  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_FACTSF_END
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATE_BUXG, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT 
       payform_id,
	   groupdog_id,
	   0,
	   PREDPR_NAME,
       dog_id,
	   date_buxg, DATE_TO_OPL, summa_dok
FROM v_finreport_9_fipp_factSF
WHERE NOT (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6)  
UNION ALL
SELECT 
       payform_id,
	   1,
	   gosprog_id,
	   PREDPR_NAME,
       dog_id,
	   date_buxg, DATE_TO_OPL, summa_dok
FROM v_finreport_9_fipp_factSF
WHERE (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6);


--
-- V_FINREPORT_9_FIPP_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_SF
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATE_KVIT, DATE_BUXG, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   NVL(kls_dog.groupdog_id,6),
	   NVL(month.gosprog_id,0),
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   v_bills.date_kvit,
	   v_bills.date_kvit, v_bills.DATE_KVIT+v_bills.KOL_DN, v_bills.summa_dok
  FROM v_bills,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills.dog_id)
        AND (v_bills.dog_id = usl_dog.dog_id(+))
        AND (v_bills.usl_number = usl_dog.usl_number(+))
        AND (v_bills.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND NOT (kls_dog.id=668 AND (v_bills.summa_dok=500 OR v_bills.summa_dok=600))
       )
UNION ALL
SELECT 
       NVL(DECODE(usl_dog.payform_id,0,10,usl_dog.payform_id),10),
	   1,
	   1,
	   kls_predpr.PREDPR_NAME,
       kls_dog.id,
	   v_bills.date_kvit,
	   v_bills.date_kvit, v_bills.DATE_KVIT+v_bills.KOL_DN, v_bills.summa_dok
  FROM v_bills,
       kls_dog,
       usl_dog,
       MONTH,
	   kls_predpr
 WHERE (    (kls_dog.id = v_bills.dog_id)
        AND (v_bills.dog_id = usl_dog.dog_id(+))
        AND (v_bills.usl_number = usl_dog.usl_number(+))
        AND (v_bills.nom_zd = MONTH.nom_zd(+))
		AND (kls_predpr.ID = kls_dog.PREDPR_ID)
		AND (kls_dog.id=668 AND (v_bills.summa_dok=500 OR v_bills.summa_dok=600))
       );


--
-- V_FINREPORT_9_FIPP_SF_END  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FINREPORT_9_FIPP_SF_END
(PAYFORM_ID, GROUPDOG_ID, GOSPROG_ID, PREDPR_NAME, DOG_ID, 
 DATE_BUXG, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT 
       payform_id,
	   groupdog_id,
	   0,
	   PREDPR_NAME,
       dog_id,
	   date_buxg, DATE_TO_OPL, summa_dok
FROM v_finreport_9_fipp_sf
WHERE NOT (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6)  
UNION ALL
SELECT 
       payform_id,
	   1,
	   gosprog_id,
	   PREDPR_NAME,
       dog_id,
	   date_buxg, DATE_TO_OPL, summa_dok
FROM v_finreport_9_fipp_sf
WHERE (gosprog_id=1 OR gosprog_id=2 OR gosprog_id=6);


--
-- V_GU_DEC_MON  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU_DEC_MON
(COLUMN_A, COLUMN_B, COLUMN_C, COLUMN_D, COLUMN_E, 
 COLUMN_F, COLUMN_G, COLUMN_H, COLUMN_I, COLUMN_J)
AS 
select 
COLUMN_A, 
COLUMN_B, 
COLUMN_C, 
COLUMN_D, 
sum(COLUMN_E) as COLUMN_E, 
sum(COLUMN_F) as COLUMN_F, 
sum(COLUMN_G) as COLUMN_G, 
sum(COLUMN_H) as COLUMN_H, 
sum(COLUMN_I) as COLUMN_I, 
sum(COLUMN_J) as COLUMN_J
from 
(

select 
-- Заказ на месяц (3, E) 
       Null                               as COLUMN_A,  -- Дата 
       0                                  as COLUMN_B,  -- Возможность отгрузки по эстакадам 
       T2.NAME_NPR                        as COLUMN_C,  -- Продукт 
       (case T1.LOAD_ABBR when 'САМ' 
		  then T3.PREDPR_NAME || ' (а/н)' 
	      else T3.PREDPR_NAME || ' (ж/д)' 
        end)                              as COLUMN_D, 
       T1.VES                                  as COLUMN_E,  -- Заказ на месяц, тн 
       0                        as COLUMN_F,  -- Отгрузка по графику, тн 
       0                                  as COLUMN_G,  -- Задание на сутки, тн 
       0                                  as COLUMN_H,  -- Отклонение от графика, тн 
       0                                  as COLUMN_I,  -- Факт за сутки, тн 
       0                                  as COLUMN_J,   -- Отклонение от задания на сутки, тн
       T1.input_number 
from V_MASTER_REPORTS V1, ZAKAZ T1 
join KLS_PROD T2 on (T1.PROD_ID_NPR = T2.ID_NPR) 
join KLS_PREDPR T3 on (T1.PLAT_ID = T3.ID) 
where (T1.DATE_PLAN between V1.BEGIN_DATE and Last_Day(V1.BEGIN_DATE)) and 
      (Nls_Upper(V1.REPORT_FILE) = 'GU_DEC.XLS') and 
      t1.is_agent=1 and
      t1.is_accept=1
union all
select 
-- Заказ на месяц (3, E) 
       Null                               as COLUMN_A,  -- Дата 
       0                                  as COLUMN_B,  -- Возможность отгрузки по эстакадам 
       T2.NAME_NPR                        as COLUMN_C,  -- Продукт 
       (case T1.LOAD_ABBR when 'САМ' 
		  then T3.PREDPR_NAME || ' (а/н)' 
	      else T3.PREDPR_NAME || ' (ж/д)' 
        end)                              as COLUMN_D, 
       T1.TONN_DECLARED                                  as COLUMN_E,  -- Заказ на месяц, тн 
       0                        as COLUMN_F,  -- Отгрузка по графику, тн 
       0                                  as COLUMN_G,  -- Задание на сутки, тн 
       0                                  as COLUMN_H,  -- Отклонение от графика, тн 
       0                                  as COLUMN_I,  -- Факт за сутки, тн 
       0                                  as COLUMN_J,   -- Отклонение от задания на сутки, тн
       T1.nom_zd 
from V_MASTER_REPORTS V1, MONTH T1 
join KLS_PROD T2 on (T1.PROD_ID_NPR = T2.ID_NPR) 
join KLS_DOG D on (T1.DOG_ID = D.ID) 
join KLS_PREDPR T3 on (D.PREDPR_ID = T3.ID) 
where (T1.DATE_PLAN between V1.BEGIN_DATE and Last_Day(V1.BEGIN_DATE)) and 
      (Nls_Upper(V1.REPORT_FILE) = 'GU_DEC.XLS') and 
      T1.is_exp=1
)      
group by 
COLUMN_A, COLUMN_B, COLUMN_C, COLUMN_D;


--
-- V_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MONTH
(NOM_ZD, DATE_PLAN, INPUT_DATE, PLAT_ID, PLAT_NAME, 
 DOG_ID, DOG_NUMBER, DOG_DATE, GROTP_ID, GROTP_NAME, 
 TEX_PD_ID, TEX_PD_NAME, LOAD_TYPE_ID, LOAD_TYPE_NAME, POLUCH_ID, 
 POLUCH_NAME, STAN_KOD, STAN_NAME, PROD_ID_NPR, NPR_SOBSTV_ID, 
 PLANSTRU_ID, PLANSTRU_NAME, NAZN_OTG_ID, NAZN_OTG_NAME, PAYFORM_ID, 
 PAYFORM_NAME, ZAYAV_VES, ZAYAV_SUM, CENA_OTP, ZAKAZ_ID)
AS 
SELECT
  MONTH.NOM_ZD,
  MONTH.DATE_PLAN,
  MONTH.INPUT_DATE,
  KLS_DOG.PREDPR_ID AS plat_id,
  plat.PREDPR_NAME AS plat_name,
  MONTH.DOG_ID,
  KLS_DOG.DOG_NUMBER,
  KLS_DOG.DOG_DATE,
  MONTH.GROTP_ID,
  grotp.PREDPR_NAME,
  MONTH.TEX_PD_ID,
  KLS_TEX_PD.TEX_PD_NAME,
  KLS_VID_OTGR.LOAD_TYPE_ID,
  KLS_LOAD_TYPE.TYPE_OTGR_NAME,
  MONTH.POLUCH_ID,
  poluch.PREDPR_NAME AS poluch_name,
  KLS_STAN.STAN_KOD,
  KLS_STAN.STAN_NAME,
  MONTH.PROD_ID_NPR,
  MONTH.npr_sobstv_id,
  MONTH.PLANSTRU_ID,
  KLS_PLANSTRU.NAME,
  MONTH.NAZN_OTG_ID,
  KLS_NAZN_OTG.NAZN_OTG_NAME,
  USL_DOG.PAYFORM_ID,
  KLS_PAYFORM.PAYFORM_NAME,
  MONTH.TONN_DECLARED AS ZAYAV_VES,
  MONTH.SUM_ZD AS ZAYAV_SUM,
  MONTH.CENA_OTP,
  MONTH.ZAKAZ_ID
FROM MONTH, KLS_DOG, USL_DOG, KLS_PREDPR PLAT, KLS_PREDPR POLUCH, KLS_PREDPR grotp,
     KLS_TEX_PD, KLS_STAN, KLS_PLANSTRU, KLS_NAZN_OTG, KLS_PAYFORM, KLS_VID_OTGR, KLS_LOAD_TYPE
WHERE
  MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  AND MONTH.DOG_ID=KLS_DOG.ID (+)
  AND plat.ID(+)=KLS_DOG.PREDPR_ID
  AND poluch.id(+)=MONTH.POLUCH_ID
  AND grotp.id(+) = MONTH.GROTP_ID
  AND MONTH.GROTP_ID=KLS_TEX_PD.GROTP_ID (+)
  AND MONTH.tex_pd_id=KLS_TEX_PD.ID (+)
  AND MONTH.STAN_ID=KLS_STAN.ID (+)
  AND MONTH.PLANSTRU_ID=KLS_PLANSTRU.ID(+)
  AND MONTH.NAZN_OTG_ID=KLS_NAZN_OTG.ID(+)
  AND USL_DOG.PAYFORM_ID=KLS_PAYFORM.ID (+)
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR (+)
  AND KLS_VID_OTGR.LOAD_TYPE_ID=KLS_LOAD_TYPE.ID (+);


--
-- V_MONTH_GD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MONTH_GD
(NOM_ZD, STANOTP_ID, GDOROTP_ID, STANOTP_NAME, NPR_SOBSTV_ID, 
 NPR_SOBSTV_NAME, STAN_ID, GDOR_ID, STAN_NAME, VETKA_ID, 
 VETKA_NAME, POLUCH_ID, POLUCH_NAME, POLUCH_ADDR, TEX_PD_ID, 
 NAZN_OTG_ID, IS_EXPORT, LOAD_ABBR, LOAD_NAME, DOG_ID, 
 USL_NUMBER, GOSPROG_ID, GROUP_NPR, ID_NPR, ABBR_NPR, 
 NAME_NPR, GDKOD_NPR, GDNAME_NPR, TONN_DECLARED, TONN_LOADED, 
 CIST_DECLARED, CIST_LOADED, FLG_ALLOW_8_AXES, FLG_UPPER_SLIV, FLG_DOP_CIST, 
 FLG_FORMA_2, FLG_OBOGR, DATE_PLAN, PRIM, GR4, 
 K_TAR, INPUT_DATE, UPDATE_DATE, TARIF1TONN, POTREB_ID, 
 POTREB_NAME, POTREB_ADDR, PLANSTRU_ID, NPODOG_ID, GROTP_ID, 
 GROTP_NAME)
AS 
SELECT
  MONTH.NOM_ZD,
  MONTH.STANOTP_ID,
  STANOTP.GDOR_ID AS GDOROTP_ID,
  DECODE(MONTH.STANOTP_ID,1,' ',RTrim(STANOTP.STAN_NAME) || ' ' || DECODE(STANOTP.GDOR_ID,0,' ','('||RTrim(gdorotp.SHORT_NAME)||' Ж/Д) ') || ' ' || RTrim(STANOTP.STAN_KOD)) AS STANOTP_NAME,
  MONTH.NPR_SOBSTV_ID,
  DECODE(MONTH.NPR_SOBSTV_ID,0,' ',SOBSTV.SHORT_NAME) AS NPR_SOBSTV_NAME,
  MONTH.STAN_ID,
  STAN.GDOR_ID,
  DECODE(MONTH.STAN_ID,1,' ',RTrim(STAN.STAN_NAME) || ' ' || DECODE(STAN.GDOR_ID,0,' ','('||RTrim(gdor.SHORT_NAME)||' Ж/Д) ') || ' ' || RTrim(STAN.STAN_KOD)) AS STAN_NAME,
  MONTH.VETKA_ID,
  KLS_VETKA.VETKA_NAME,
  MONTH.POLUCH_ID,
  RTrim(POLUCH.PREDPR_NAME) || DECODE(poluch.GD_KOD,NULL,' ',' Код:' || RTrim(poluch.GD_KOD)) || DECODE(poluch.OKPO,NULL,' ',' ОКПО:' || RTrim(poluch.OKPO)) AS POLUCH_NAME,
  Get_ADDR('',POLUCH.POSTINDEX_P,poluch.CITY_P,poluch.ADDRESS_P) AS POLUCH_ADDR,
  MONTH.TEX_PD_ID,
  MONTH.NAZN_OTG_ID,
  DECODE(MONTH.NAZN_OTG_ID,5,'ЭКСПОРТ',6,'ЭКСПОРТ','ПО РОССИИ') AS IS_EXPORT,
  MONTH.LOAD_ABBR,
  KLS_VID_OTGR.LOAD_NAME,
  MONTH.DOG_ID,
  MONTH.USL_NUMBER,
  MONTH.GOSPROG_ID,
  KLS_PROD.ID_GROUP_NPR,
  MONTH.PROD_ID_NPR,
  kls_prod.ABBR_NPR,
  KLS_PROD.NAME_NPR,
  KLS_PROD.GD_KOD_NPR,
  KLS_PROD.GD_NAME_NPR,
  MONTH.TONN_DECLARED,
  MONTH.TONN_LOADED,
  MONTH.CIST_DECLARED,
  MONTH.CIST_LOADED,
  MONTH.FLG_ALLOW_8_AXES,
  MONTH.FLG_UPPER_SLIV,
  MONTH.FLG_DOP_CIST,
  MONTH.FLG_FORMA_2,
  MONTH.FLG_OBOGR,
  MONTH.DATE_PLAN,
  MONTH.PRIM,
  MONTH.GR4,
  MONTH.K_TAR,
  MONTH.INPUT_DATE,
  MONTH.UPDATE_DATE,
  MONTH.TARIF1TONN,
  MONTH.POTREB_ID,
  RTrim(POTREB.PREDPR_NAME) || DECODE(potreb.GD_KOD,NULL,' ',' Код:' || RTrim(potreb.GD_KOD)) || DECODE(potreb.OKPO,NULL,' ',' ОКПО:' || RTrim(potreb.OKPO)) AS POTREB_NAME,
  Get_ADDR('',POTREB.POSTINDEX_P,potreb.CITY_P,potreb.ADDRESS_P) AS POTREB_ADDR,
  MONTH.PLANSTRU_ID,
  MONTH.NPODOG_ID,
  MONTH.GROTP_ID,
  RTrim(DECODE(KLS_TEX_PD.TEX_PD_NAME,NULL,DECODE(GROTP.PREDPR_NAME,'Н/Д',' ',GROTP.PREDPR_NAME),RTrim(KLS_TEX_PD.TEX_PD_NAME) || ' Код:' || TO_CHAR(KLS_TEX_PD.ID))) || DECODE(grotp.GD_KOD,NULL,' ','/' || RTrim(grotp.GD_KOD)) || DECODE(grotp.OKPO,NULL,' ',' ОКПО:' || RTrim(grotp.OKPO)) AS GROTP_NAME
FROM
  MONTH,KLS_PROD,KLS_PREDPR sobstv,KLS_TEX_PD,KLS_PREDPR grotp, KLS_STAN STANOTP, KLS_STAN STAN,
  KLS_GDOR GDOROTP, KLS_GDOR GDOR, KLS_PREDPR POLUCH, KLS_VID_OTGR, KLS_PREDPR potreb, KLS_VETKA
WHERE
  MONTH.PROD_ID_NPR=KLS_PROD.ID_NPR AND
  MONTH.NPR_SOBSTV_ID=sobstv.id AND
  MONTH.TEX_PD_ID=KLS_TEX_PD.id(+) AND MONTH.GROTP_ID=KLS_TEX_PD.GROTP_ID(+) AND
  MONTH.GROTP_ID=grotp.ID(+) AND
  MONTH.STANOTP_ID=STANOTP.ID AND
  MONTH.STAN_ID=STAN.ID AND
  STANOTP.GDOR_ID=GDOROTP.ID(+) AND
  STAN.GDOR_ID=GDOR.ID(+) AND
  MONTH.POLUCH_ID=poluch.ID(+) AND
  MONTH.POTREB_ID=potreb.ID(+) AND
  MONTH.VETKA_ID=KLS_VETKA.ID(+) AND
  MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR(+);


--
-- V_MONTH_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MONTH_SNP
(NOM_ZD, STANOTP_ID, NPR_SOBSTV_ID, STAN_ID, VETKA_ID, 
 POLUCH_ID, TEX_PD_ID, NAZN_OTG_ID, LOAD_ABBR, DOG_ID, 
 USL_NUMBER, GOSPROG_ID, PROD_ID_NPR, TONN_DECLARED, TONN_LOADED, 
 CIST_DECLARED, CIST_LOADED, FLG_ALLOW_8_AXES, FLG_UPPER_SLIV, FLG_DOP_CIST, 
 FLG_FORMA_2, FLG_OBOGR, DATE_PLAN, PRIM, CENA, 
 CENA_OTP, SUM_ZD, GR4, K_TAR, INPUT_DATE, 
 UPDATE_DATE, TARIF1TONN, POTREB_ID, PLANSTRU_ID, NPODOG_ID, 
 GROTP_ID)
AS 
SELECT 
  "NOM_ZD",
  "STANOTP_ID",
  "NPR_SOBSTV_ID",
  "STAN_ID",
  "VETKA_ID",
  "POLUCH_ID",
  "TEX_PD_ID",
  "NAZN_OTG_ID",
  "LOAD_ABBR",
  DECODE(NVL("DOG_ID",0),0,"DOG_ID","NPODOG_ID"),
  DECODE(NVL("DOG_ID",0),0,"USL_NUMBER",1),
  "GOSPROG_ID",
  "PROD_ID_NPR",
  "TONN_DECLARED",
  "TONN_LOADED",
  "CIST_DECLARED",
  "CIST_LOADED",
  "FLG_ALLOW_8_AXES",
  "FLG_UPPER_SLIV",
  "FLG_DOP_CIST",
  "FLG_FORMA_2",
  "FLG_OBOGR",
  "DATE_PLAN",
  "PRIM",
  "CENA",
  "CENA_OTP",
  "SUM_ZD",
  "GR4",
  "K_TAR",
  "INPUT_DATE",
  "UPDATE_DATE",
  "TARIF1TONN",
  "POTREB_ID",
  "PLANSTRU_ID",
  "NPODOG_ID",
  "GROTP_ID" 
  FROM month;


--
-- V_MREE_PLANBYDOG  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_PLANBYDOG
(DOG_ID, PROD_PLAN_ID, NAME_NPR, PLANMOSCOWDOG, PLANOURDOG)
AS 
SELECT
  v_mree_planpost.DOG_ID,  
  kls_prod_plan.ID AS prod_plan_id,
  kls_prod_plan.NAME_NPR,
  SUM(DECODE(v_mree_planpost.plan_id,
    2,v_mree_planpost.PLAN_VES,
	3,v_mree_planpost.PLAN_VES,0)) AS PlanMoscowDog,
  SUM(DECODE(v_mree_planpost.plan_id,
    2,v_mree_planpost.PLAN_VES,0)) AS PlanOurDog
  FROM v_mree_planpost,kls_prod_plan,kls_prod
  WHERE 
    v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
	kls_prod.PROD_PLAN_ID=kls_prod_plan.ID
  GROUP BY
    v_mree_planpost.DOG_ID,  
    kls_prod_plan.ID,
    kls_prod_plan.NAME_NPR;


--
-- V_MREE_PLANBYDOGDETAIL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_PLANBYDOGDETAIL
(DOG_ID, OTHER, PROD_PLAN_ID, NAME_NPR, FOR_ID, 
 FOR_NAME, PLANMOSCOWDOG, PLANOURDOG)
AS 
SELECT
  v_mree_planpost.DOG_ID,  
  v_mree_planpost.OTHER,
  kls_prod_plan.ID AS prod_plan_id,
  kls_prod_plan.NAME_NPR,
  v_mree_planpost.FOR_ID,
  v_mree_planpost.FOR_NAME,
  SUM(DECODE(v_mree_planpost.plan_id,
    2,v_mree_planpost.PLAN_VES,
	3,v_mree_planpost.PLAN_VES,0)) 
	AS PlanMoscowDog,
  SUM(DECODE(v_mree_planpost.plan_id,
    2,v_mree_planpost.PLAN_VES,0)) 
	AS PlanOurDog
  FROM v_mree_planpost,kls_prod_plan,kls_prod
  WHERE 
    v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
	kls_prod.PROD_PLAN_ID=kls_prod_plan.ID
  GROUP BY
    v_mree_planpost.DOG_ID,  
    v_mree_planpost.OTHER,
    kls_prod_plan.ID,
    kls_prod_plan.NAME_NPR,
    v_mree_planpost.FOR_ID,
    v_mree_planpost.FOR_NAME;


--
-- V_MREE_SNP_PLANBYDOGDETAIL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_SNP_PLANBYDOGDETAIL
(REFINERY_ID, REFINERY_NAME, DOG_ID, OTHER, PROD_PLAN_ID, 
 NAME_NPR, FOR_ID, FOR_NAME, PLANALLDOG, PLANFIRSTDOG)
AS 
SELECT
  a.REFINERY_ID,
  a.REFINERY_NAME,
  a.DOG_ID,
  a.OTHER,
  kls_prod_plan.ID AS prod_plan_id,
  kls_prod_plan.NAME_NPR,
  a.FOR_ID,
  a.FOR_NAME,
  SUM(a.PLAN_VES) as PlanAllDog,
  SUM(DECODE(a.plan_id,
    12,a.PLAN_VES,0)) AS PlanFirstDog
  FROM v_mree_snp_planpost a,kls_prod_plan,kls_prod
  WHERE
    a.ID_NPR=kls_prod.ID_NPR AND
 kls_prod.PROD_PLAN_ID=kls_prod_plan.ID
  GROUP BY
    a.REFINERY_ID,
    a.REFINERY_NAME,
    a.DOG_ID,
    a.OTHER,
    kls_prod_plan.ID,
    kls_prod_plan.NAME_NPR,
    a.FOR_ID,
    a.FOR_NAME;


--
-- V_NARIAD_PRINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NARIAD_PRINT
(ID, NUM_NAR, DATE_NAR, DATE_BEG, DATE_END, 
 NOM_ZD, KOL, VES, STAN_NAME, PROD_NAME, 
 POLUCH_NAME, NORMOTGR)
AS 
SELECT /*+ RULE */
  a.ID,a.NUM_NAR,a.DATE_NAR,a.DATE_BEG,a.DATE_END,
  b.NOM_ZD,b.KOL,b.VES,
  KLS_STAN.STAN_NAME, KLS_PROD.ABBR_NPR as PROD_NAME, KLS_PREDPR.SHORT_NAME as POLUCH_NAME, NVL(KLS_PROD.NORMOTGR,0) as NORMOTGR
FROM KLS_NARIAD a, KLS_NAR_LINE b, MONTH, KLS_STAN, KLS_PROD, KLS_PREDPR
WHERE a.MESTO_ID=NVL(FOR_TEMP.GET_AS_NUM('MESTO_ID','MASTER','MO_RASPOR.XLS'),0)
  AND a.LOAD_TYPE_ID=NVL(FOR_TEMP.GET_AS_NUM('LOAD_TYPE_ID','MASTER','MO_RASPOR.XLS'),0)
  AND a.ID=NVL(FOR_TEMP.GET_AS_NUM('NARIAD_ID','MASTER','MO_RASPOR.XLS'),0)
  AND a.ID=b.NARIAD_ID
  AND MONTH.NOM_ZD=b.NOM_ZD
  AND MONTH.STAN_ID=KLS_STAN.ID
  AND MONTH.PROD_ID_NPR=KLS_PROD.ID_NPR
  AND MONTH.POLUCH_ID=KLS_PREDPR.ID
ORDER BY b.NOM_ZD;


--
-- V_NARIAD_READY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NARIAD_READY
(KOD_PLAT, NAME_PLAT, KOD_PROD, NAME_PROD, NOM_ZD, 
 NARIAD, DOVEREN, MM, YY, DATE_END, 
 VES)
AS 
SELECT KLS_DOVER.PREDPR_ID AS KOD_PLAT,
       KLS_PREDPR.SHORT_NAME AS NAME_PLAT,    
       KLS_PROD.ID_KIND_NPR AS KOD_PROD,   
       KINDPROD.NAME_NPR AS NAME_PROD,   
	   KLS_NAR_LINE.NOM_ZD,   
	   TRIM_NUMNAR(KLS_NARIAD.NUM_NAR) AS NARIAD,   
	   TRIM_NUMNAR(KLS_DOVER.NUM_DOVER) AS DOVEREN,   
	   TO_CHAR(KLS_NARIAD.DATE_NAR,'MM') AS MM,   
	   TO_CHAR(KLS_NARIAD.DATE_NAR,'YYYY') AS YY,   
	   KLS_NARIAD.DATE_END,  
	   KLS_NAR_LINE.VES  
FROM KLS_NAR_LINE, KLS_NARIAD, KLS_DOVER, MONTH, KLS_PROD, KLS_PROD KINDPROD, KLS_PREDPR 
WHERE KLS_NAR_LINE.NARIAD_ID = KLS_NARIAD.ID   
  AND KLS_NARIAD.DOVER_ID = KLS_DOVER.ID  
  AND KLS_NAR_LINE.NOM_ZD = MONTH.NOM_ZD  
  AND MONTH.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KINDPROD.ID_NPR = KLS_PROD.ID_KIND_NPR
  AND KLS_DOVER.PREDPR_ID = KLS_PREDPR.ID;


--
-- V_ORDER_EXPORT_FAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ORDER_EXPORT_FAV
(SFACEACC, SAGENT, STARIF, SSHIPVIEW, SPAY_TYPE, 
 NOM_ZD, TONN_DECLARED, CIST_DECLARED, PRIM, DATE_PLAN, 
 INPUT_DATE, SAGNFIFO, PLANSTRU_ID, SSUBDIV, SJUR_PERS, 
 MODIF, MOD_MODIF, STAN_NAME, TAXGR_CODE, TAXGR_CODE_NEW, 
 REGION_NAME, REGION_ID, BASE_NUMB)
AS 
SELECT   /*+ ALL_ROWS */
            p.sfaceacc, p.sagent, p.starif, p.sshipview, p.spay_type,
            m.nom_zd, m.tonn_declared, m.cist_declared, m.prim, m.date_plan,
            m.input_date, TRIM (pr.gd_kod) || '/'
                          || TRIM (pr.okpo) AS sagnfifo, m.planstru_id,
            p.ssubdiv, p.sjur_pers, pn.modif, pn.mod_modif, s.stan_name,
            pn.taxgr_code, pn.taxgr_code_new, kls_region.region_name,
            s.region_id, kpd.base_numb
       FROM MONTH m,
            kls_dog d,
            v_parus_dog p,
            kls_predpr pr,
            kls_vid_otgr v,
            kls_planstru ps,
            kls_prod_nomenklator pn,
            kls_stan s,
            zakaz z,
            zakaz unp,
            kls_region,
            kls_dog_parus kpd
      WHERE pn.prod = m.prod_id_npr
        AND m.planstru_id = ps.ID
        AND d.ID = p.dog_id
        AND (unp.ID = m.zakaz_id AND unp.is_agent = 1)
        AND unp.link_id = z.ID
        AND z.dog_id = d.ID
        AND NOT (m.planstru_id = 178 OR m.planstru_id = 208)
        AND m.poluch_id = pr.ID
        AND m.stan_id = s.ID
        AND m.load_abbr = v.load_abbr
        AND z.is_agent = 2
        AND d.predpr_id <> 2641
        AND m.nazn_otg_id <> 2
        AND pn.is_actual <> 0
        AND (v.load_type_id = 1 OR v.load_type_id = 6)
        AND NOT EXISTS (
                        SELECT /*+ HASH_AJ */
                               month_id
                          FROM parus_fin
                         WHERE m.nom_zd = month_id
                               AND task = 'ConsumersOrders')
        AND m.input_date > TO_DATE ('01072007', 'ddmmyyyy')
        AND s.region_id = kls_region.ID
        AND kpd.dog_id=z.lukdog_id
   ORDER BY m.nom_zd;


--
-- V_OUT_PLAT_DBF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_OUT_PLAT_DBF
(NOM_SF, NOM_DOK, DATA_DOK, DATA_KVIT, SUMMA_DOK, 
 NOM_DOG, DATA_DOG, K_USL, KOD_PLAT, PRIM, 
 PRIZN_CEN, KATEG_PR, KOD_NFP, CENA_NFP, DATE_CEN, 
 VES, KOD_ZATAR, CEN_ZATAR, SUM_ZATAR, NACENKA, 
 SUM_NACEN, D_41, SUM_AKCIZ, D_191, D_67, 
 D_441, D_442, D_443, D_194, CPEC_PROD, 
 CPEC_TARIF, SUMMA_POR, TIP_OTGR, KOD_GROTP, KOD_POTR, 
 KOD_STAN, KOD_GD, FIO_ISPOL, M_VS, ERROR, 
 OLD_SF, OLD_NOM, OLD_DATA, DATA_BUXG, WRITE, 
 GR_DVZ, OGR_TAR, KOD_USL, KSOB_USL, SUM_NALIV, 
 NDC_NAL20, NDC_NAL03, NDC_VN20, NDC_VN03, NDC_TR20, 
 NDC_TR03, VID_OPL, KOL_DN, USL_PPZT, NDC_PPZT, 
 CN_PPZT, KOD_OTGR, VES_KOM, KOM_V, NDS_KOM, 
 NDF_KOM, CN_KOM, PATH, T_DATE, T_TIME, 
 VES_NAL, MESTO, M_KORR, G_KORR, G_KORR4, 
 K_VARPOST, VIDOG, DEN_SOD, NOM_ZD, NOM_ZV, 
 UN_CODE, MOSC_OUT, KOD_POST, KOD_SOB, SOB_GD, 
 TAX_SALE, PRICE_GET, SUM_PGET, NDS_PGET, GSM_PGET, 
 M_SS, Y_SS, PR_DIVIDE, NUM_SS, DATE_MOS, 
 NOM_R3, PROTO_NUM, PROTO_DATE, NO_AKCIZ, CENA_VOZN, 
 DOP_TARIF, NDC_DOPTAR)
AS 
SELECT /*+ RULE */ 
  NOM_SF, 
  BILLS.NOM_DOK, 
  DATE_VYP_SF as DATA_DOK, 
  BILLS.DATE_KVIT as DATA_KVIT, 
  MAX(BILLS.SUMMA_DOK) as SUMMA_DOK, 
  MAX(KLS_DOG.SHORT_NUMBER) as NOM_DOG, 
  MAX(KLS_DOG.DOG_DATE) as DATA_DOG, 
  MAX(NVL(USL_DOG.USL_NUMBER,1)) as K_USL, 
  MAX(KLS_DOG.PREDPR_ID) as KOD_PLAT, 
  MAX(NVL(BILLS.PRIM,' ')) as PRIM, 
  0 as PRIZN_CEN, 
  MAX(NVL(USL_DOG.CAT_CEN_ID,2)) as kateg_pr, 
  BILLS.PROD_ID_NPR as KOD_NFP, 
  MAX(CASE 
        WHEN BILLS.PROD_ID_NPR<'10100' AND BILLS.PROD_ID_NPR<>'10080' THEN CENA_BN 
	    WHEN BILLS.PROD_ID_NPR>='10100' AND BILL_POS_ID<10 THEN CENA_BN 
	    ELSE 0 
	  END) AS CENA_NFP, 
  TO_DATE(NULL) as DATE_CEN, 
  SUM(CASE 
        WHEN BILLS.PROD_ID_NPR<'10100' AND BILLS.PROD_ID_NPR<>'10080' THEN VES 
	    WHEN BILLS.PROD_ID_NPR>='10100' AND BILL_POS_ID<10 THEN VES 
	    ELSE 0 
	  END) AS VES, 
  ' ' as KOD_ZATAR, 
  0 as CEN_ZATAR, 
  0 as SUM_ZATAR, 
  MAX(NACENKA) as NACENKA, 
  SUM(DECODE(BILL_POS_ID,20,SUMMA,0)) AS SUM_NACEN, 
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_BN,0)) AS D_41, 
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_AKCIZ,0)) AS SUM_AKCIZ, 
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,SUMMA_NDS20,0)) AS D_191, 
  0 as D_67, 
  SUM(DECODE(BILL_POS_ID,10,SUMMA_BN,0)) AS D_441, 
  SUM(DECODE(BILL_POS_ID,12,SUMMA_BN,0)) AS D_442, 
  0 as D_443, 
  SUM(DECODE(BILL_POS_ID,10,SUMMA_NDS20,0)) AS D_194, 
  0 as cpec_prod, 
  0 as cpec_tarif, 
  MAX(BILLS.SUMMA_DOK) as SUMMA_POR, 
  MAX(NVL(KLS_VID_OTGR.LOAD_TYPE_ID,0)) as TIP_OTGR, 
  MAX(NVL(MONTH.GROTP_ID,8)) as kod_grotp, 
  MAX(NVL(MONTH.POLUCH_ID,KLS_DOG.PREDPR_ID)) as KOD_POTR, 
  MAX(NVL(KLS_STAN.STAN_KOD,0)) as KOD_STAN, 
  MAX(NVL(KLS_STAN.GDOR_ID,0)) as KOD_GD, 
  MAX(NVL(FIO_ISPOL,' ')) as FIO_ISPOL, 
  0 as m_vs, 
  0 as error, 
  MAX(NVL(OLD_NOM_SF,0)) as OLD_SF, 
  NVL(BILLS.OLD_NOM_DOK,0) as OLD_NOM, 
  TO_DATE(NULL) as OLD_DATA, 
  MAX(DATE_BUXG) as DATA_BUXG, 
  0 as WRITE, 
  ' ' as gr_dvz, 
  0 as ogr_tar, 
  MAX(DECODE(BILLS.IS_AGENT,1,1,8)) as kod_usl, 
  13 as KSOB_USL, 
  SUM(DECODE(BILL_POS_ID,11,SUMMA_BN,0)) AS sum_naliv, 
  SUM(DECODE(BILL_POS_ID,11,SUMMA_NDS20,0)) AS NDC_NAL20, 
  0 as ndc_nal03, 
  0 as ndc_vn20, 
  0 as ndc_vn03, 
  SUM(DECODE(BILL_POS_ID,12,SUMMA_NDS20,0)) AS NDC_TR20, 
  0 as ndc_tr03, 
  0 as vid_opl, 
  MAX(BILLS.KOL_DN) as KOL_DN, 
  0 as USL_PPZT, 
  0 as NDC_PPZT, 
  0 as CN_PPZT, 
  MAX(NVL(BILLS.NAZN_OTG_ID,0)) as KOD_OTGR, 
  0 as VES_KOM, 
  0 as KOM_V, 
  0 as NDS_KOM, 
  0 as NDF_KOM, 
  0 as CN_KOM, 
  ' ' as Path, 
  MAX(DATE_VYP_SF) as T_DATE, 
  '00:00:00' as T_TIME, 
  SUM(DECODE(SIGN(BILL_POS_ID-10),-1,VES,0)) AS VES_NAL, 
  0 as mesto, 
  0 as m_korr, 
  0 as g_korr, 
  0 as g_korr4, 
  13 as k_varpost, 
  MAX(kls_dog.VIDDOG_ID) as vidog, 
  0 as den_sod, 
  MAX(NVL(MONTH.NOM_ZD,' ')) as NOM_ZD, 
  ' ' as nom_zv, 
  TO_CHAR(BILLS.NOM_DOK) as un_code, 
  ' ' as MOSC_OUT, 
  0 as KOD_POST, 
  1 as KOD_SOB, 
  13 as SOB_GD, 
  0 as tax_sale, 
  0 as price_get, 
  0 as sum_pget, 
  0 as nds_pget, 
  0 as gsm_pget, 
  0 as m_ss, 
  0 as y_ss, 
  0 as pr_divide, 
  0 as num_ss, 
  MAX(DATE_MOS) as DATE_MOS, 
  NVL(BILLS.isu_kod,' ') as nom_r3, 
  MAX(NVL(BILLS.PROTO_NUM,' ')) as PROTO_NUM, 
  MAX(BILLS.PROTO_DATE) as PROTO_DATE, 
  MAX(BILLS.NO_AKCIZ) as NO_AKCIZ, 
  0 as CENA_VOZN, 
  SUM(DECODE(BILL_POS_ID,13,SUMMA_BN,0)) AS DOP_TARIF, 
  SUM(DECODE(BILL_POS_ID,13,SUMMA_NDS20,0)) AS NDC_DOPTAR 
FROM BILLS,BILL_POS,MONTH,KLS_DOG,KLS_STAN,USL_DOG,KLS_VID_OTGR 
WHERE BILLS.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy') 
  AND BILL_POS.NOM_DOK=BILLS.NOM_DOK 
  AND BILLS.DOG_ID=KLS_DOG.ID 
  AND BILLS.NOM_ZD=MONTH.NOM_ZD(+) 
  AND MONTH.STAN_ID=KLS_STAN.ID(+) 
  AND MONTH.DOG_ID=USL_DOG.DOG_ID(+) 
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER(+) 
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR(+) 
GROUP BY 
  NOM_SF, 
  BILLS.NOM_DOK, 
  NVL(BILLS.OLD_NOM_DOK,0), 
  DATE_VYP_SF, 
  BILLS.DATE_KVIT, 
  BILLS.PROD_ID_NPR, 
  NVL(BILLS.ISU_KOD,' ');


--
-- V_PLAN_POST_UNI  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PLAN_POST_UNI
(PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, PLANSTRU_ID, LEVEL_POS, 
 NAME, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, 
 KOD_GRP, KOD_PGR, PARENT_ID, DOG_ID, PAYFORM_ID, 
 PLAN_VES, PLAN_SUM)
AS 
SELECT "PLAN_ID","PLAN_PER_ID","PROD_ID_NPR","PLANSTRU_ID","LEVEL_POS","NAME","KOD_SGR","KOD_SPG","KOD_RZD","KOD_PRZ","KOD_GRP","KOD_PGR","PARENT_ID","DOG_ID","PAYFORM_ID","PLAN_VES","PLAN_SUM" FROM (
SELECT * FROM v_plan_post_1
UNION ALL
SELECT * FROM v_plan_post_2
UNION ALL
SELECT * FROM v_plan_post_3
UNION ALL
SELECT * FROM v_plan_post_4
UNION ALL
SELECT * FROM v_plan_post_5
UNION ALL
SELECT * FROM v_plan_post_6
)
ORDER BY PLAN_ID,PLAN_PER_ID,PROD_ID_NPR,LEVEL_POS,KOD_SGR,KOD_SPG,KOD_RZD,KOD_PRZ,KOD_GRP,KOD_PGR,DOG_ID,PAYFORM_ID;


--
-- V_RENEW_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RENEW_BILLS
(NOM_DOK, IS_AGENT, NOM_SF, NPO_SF, DATE_VYP_SF, 
 DATE_BUXG, DATE_KVIT, SUMMA_DOK, NDS_DOK, AKCIZ_DOK, 
 GSM_DOK, PRIM, FIO_ISPOL, KOL_DN, OLD_NOM_DOK, 
 NOM_ZD, OWNER_ID, DOG_ID, USL_NUMBER, PROD_ID_NPR, 
 PROD_SUM, PROD_NDS, PROD_AKCIZ, PROD_GSM, DATE_MOS, 
 OLD_NOM_SF, NUM_5_DAY, KORR_5_DAY, LUK_DOG_ID, LUK_USL_NUMBER, 
 LUK_KOL_DN, LUK_SUMMA_DOK, LUK_NDS_DOK, SNP_KOL_DN, SNP_DOG_ID, 
 SNP_USL_NUMBER, KOD_OTGR, PROTO_NUM, PROTO_DATE, NO_AKCIZ)
AS 
SELECT a.nom_dok,
	   KLS_DOG_MAIN.IS_AGENT AS IS_AGENT,
	   a.NOM_SF,
	   UPPER(k2n.NPO_SF) AS NPO_SF,
	   a.DATA_DOK AS DATE_VYP_SF,
	   a.DATA_BUXG AS DATE_BUXG,
	   a.DATA_KVIT AS DATE_KVIT,
	   a.SUMMA_DOK,
       a.d_194+a.ndc_nal20+a.ndc_tr20+d_191+NDC_DOPTAR AS NDS_DOK,
	   a.SUM_AKCIZ AS AKCIZ_DOK,
	   a.D_67 AS GSM_DOK,
	   a.PRIM,
	   a.FIO_ISPOL,
	   a.KOL_DN,
	   a.OLD_NOM AS OLD_NOM_DOK,
       a.NOM_ZD,
	   (CASE
		  WHEN NVL(MONTH.NPR_SOBSTV_ID,0)=0 AND A.DATA_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN 1
		  WHEN NVL(MONTH.NPR_SOBSTV_ID,0)=0 AND A.DATA_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy') THEN 8
		  ELSE NVL(MONTH.NPR_SOBSTV_ID,0)
		END) AS OWNER_ID,
	   NVL(KLS_DOG.ID,0) AS DOG_ID,
	   a.K_USL AS USL_NUMBER,
	   a.KOD_NFP AS PROD_ID_NPR,
	   a.d_41+a.d_191+a.SUM_AKCIZ+a.D_67 AS PROD_SUM,
	   a.d_191 AS PROD_NDS,
	   a.SUM_AKCIZ AS PROD_AKCIZ,
	   a.D_67 AS PROD_GSM,
	   NVL(a.DATE_MOS,a.DATA_KVIT) AS DATE_MOS,
	   old_bills.NOM_SF AS OLD_NOM_SF,
	   DECODE(TO_NUMBER(TO_CHAR(NVL(a.DATE_MOS,a.DATA_KVIT),'DD')),31,6,
         TRUNC((TO_NUMBER(TO_CHAR(NVL(a.DATE_MOS,a.DATA_KVIT),'DD'))-1)/5)+1) AS NUM_5_DAY,
	   DECODE(TO_NUMBER(TO_CHAR(a.DATA_KVIT,'DD')),31,6,
         TRUNC((TO_NUMBER(TO_CHAR(a.DATA_KVIT,'DD'))-1)/5)+1) AS KORR_5_DAY,
	   (CASE
	      WHEN A.DATA_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN
		    CASE
			  WHEN NVL(KLS_DOG.LUKDOG_ID,0)=0 THEN KLS_DOG.ID
			  ELSE KLS_DOG.LUKDOG_ID
			END
		  ELSE MAIN_DOG.ID
		END) AS LUK_DOG_ID,
	   (CASE
	      WHEN A.DATA_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN
		    CASE
			  WHEN NVL(KLS_DOG.LUKDOG_ID,0)=793 THEN 1
			  ELSE a.K_USL
			END
		  ELSE 1
		END) AS LUK_USL_NUMBER,
	   (CASE
	      WHEN A.DATA_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN a.KOL_DN
		  ELSE NULL
		END) AS LUK_KOL_DN,
	   (CASE
	      WHEN A.DATA_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN
		    CASE
              WHEN KLS_DOG.IS_AGENT IN (1,3) THEN a.SUMMA_DOK
			  ELSE a.d_41+a.d_191+a.SUM_AKCIZ+a.D_67
			END
		  ELSE a.d_41+a.d_191+a.SUM_AKCIZ+a.D_67
		END) AS LUK_SUMMA_DOK,
	   (CASE
	      WHEN A.DATA_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN
		    CASE
              WHEN KLS_DOG.IS_AGENT IN (1,3) THEN a.d_194+a.ndc_nal20+a.ndc_tr20+a.d_191
			  ELSE a.d_191
			END
		  ELSE a.d_191
		END) AS LUK_NDS_DOK,
       DECODE(NVL(MONTH.NPODOG_ID,0),0,a.KOL_DN,SNP_USL_OPL.KOL_DN) AS SNP_KOL_DN,
       DECODE(NVL(MONTH.NPODOG_ID,0),0,KLS_DOG.ID,MONTH.NPODOG_ID) AS SNP_DOG_ID,
       DECODE(NVL(MONTH.NPODOG_ID,0),0,a.K_USL,1) AS SNP_USL_NUMBER,
	   a.KOD_OTGR,
	   a.proto_num,
	   a.proto_date,
	   Iif(A.no_akciz,1,0)
     FROM load_buffer.out_plat A,
	      KLS_DOG,
		  KTU_2_NPO_SF k2n,
		  KLS_DOG SNP_DOG,
		  KLS_USL_OPL SNP_USL_OPL,
		  MONTH,
		  BILLS old_bills,
		  KLS_DOG_MAIN,
		  KLS_DOG MAIN_DOG
    WHERE /*A.nom_dok=BILLS.nom_dok
	  AND */A.NOM_DOG=KLS_DOG.SHORT_NUMBER
	  AND A.NOM_DOK=k2n.NOM_DOK(+)
	  AND A.old_nom=old_bills.nom_dok (+)
	  AND A.nom_zd=MONTH.nom_zd(+)
	  AND MONTH.NPODOG_ID=SNP_DOG.ID (+)
	  AND SNP_DOG.USL_OPL_ID=SNP_USL_OPL.ID (+)
      AND KLS_DOG.IS_AGENT=KLS_DOG_MAIN.IS_AGENT
      AND A.DATA_KVIT BETWEEN KLS_DOG_MAIN.FROM_DATE AND KLS_DOG_MAIN.TO_DATE
	  AND KLS_DOG_MAIN.DOG_ID=MAIN_DOG.ID(+)
--	  AND KLS_DOG_MAIN.IS_AGENT=4
;


--
-- V_R3_CHECK_BILLS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_R3_CHECK_BILLS
(IS_AGENT, NOM_DOK, OLD_NOM_DOK, NPO_NOM_SF, NPO_OLD_NOM_SF, 
 NPO_DATE_VYP_SF, NPO_DATE_KVIT, NPO_DOG_NUMBER, NPO_KOL_DN, NPO_NAME_NPR, 
 NPO_VES, NPO_CENA, NPO_PROD_BN, NPO_PROD_NDS, NPO_PROD, 
 NPO_TARIF_BN, NPO_TARIF_NDS, NPO_TARIF, NPO_VOZN_BN, NPO_VOZN_NDS, 
 NPO_VOZN, NPO_STRAH, NPO_SUMMA_DOK, R3_VBELN, R3_NOM_SF, 
 R3_DATE_VYP_SF, R3_NAME_NPR, R3_VES, R3_PROD_BN, R3_PROD_NDS, 
 R3_PROD, R3_TARIF_BN, R3_TARIF_NDS, R3_TARIF, R3_VOZN_BN, 
 R3_VOZN_NDS, R3_VOZN, R3_STRAH, R3_SUMMA_DOK)
AS 
SELECT
  NVL(KLS_VIDDOG.IS_AGENT,3) AS IS_AGENT,
  V_BILLS.NOM_DOK,
  V_BILLS.OLD_NOM_DOK,
  V_BILLS.ORIG_NOM_SF AS NPO_NOM_SF,
  V_BILLS.OLD_NOM_SF AS NPO_OLD_NOM_SF,
  V_BILLS.DATE_VYP_SF AS NPO_DATE_VYP_SF,
  V_BILLS.DATE_KVIT AS NPO_DATE_KVIT,
  KLS_DOG.DOG_NUMBER AS NPO_DOG_NUMBER,
  V_BILLS.KOL_DN AS NPO_KOL_DN,
  KLS_PROD.NAME_NPR AS NPO_NAME_NPR,
  V_BILL_POS_FLAT.VES AS NPO_VES,
  V_BILL_POS_FLAT.CENA_BN AS NPO_CENA,
  V_BILL_POS_FLAT.SUMMA_PROD_BN AS NPO_PROD_BN,
  V_BILL_POS_FLAT.SUMMA_PROD_NDS AS NPO_PROD_NDS,
  V_BILL_POS_FLAT.SUMMA_PROD AS NPO_PROD,
  V_BILL_POS_FLAT.TARIF_BN AS NPO_TARIF_BN,
  V_BILL_POS_FLAT.TARIF_NDS AS NPO_TARIF_NDS,
  V_BILL_POS_FLAT.TARIF AS NPO_TARIF,
  V_BILL_POS_FLAT.VOZN11_BN+V_BILL_POS_FLAT.VOZN12_BN AS NPO_VOZN_BN,
  V_BILL_POS_FLAT.VOZN11_NDS+V_BILL_POS_FLAT.VOZN12_NDS AS NPO_VOZN_NDS,
  V_BILL_POS_FLAT.VOZN11+V_BILL_POS_FLAT.VOZN12 AS NPO_VOZN,
  V_BILL_POS_FLAT.STRAH AS NPO_STRAH,
  V_BILLS.SUMMA_DOK AS NPO_SUMMA_DOK,
  R3_BILLS.VBELN AS R3_VBELN,
  R3_BILLS.NOM_R3 AS R3_NOM_SF,
  R3_BILLS.DATE_VYP_SF AS R3_DATE_VYP_SF,
  R3_MATERIALS.MAKTX AS R3_NAME_NPR,
  R3_BILLS.VES AS R3_VES,
  R3_BILLS.SUMMA_PROD-R3_BILLS.SUMMA_PROD_NDS AS R3_PROD_BN,
  R3_BILLS.SUMMA_PROD_NDS AS R3_PROD_NDS,
  R3_BILLS.SUMMA_PROD AS R3_PROD,
  R3_BILLS.SUMMA_TARIF-R3_BILLS.SUMMA_TARIF_NDS AS R3_TARIF_BN,
  R3_BILLS.SUMMA_TARIF_NDS AS R3_TARIF_NDS,
  R3_BILLS.SUMMA_TARIF AS R3_TARIF,
  R3_BILLS.SUMMA_VOZN-R3_BILLS.SUMMA_VOZN_NDS AS R3_VOZN_BN,
  R3_BILLS.SUMMA_VOZN_NDS AS R3_VOZN_NDS,
  R3_BILLS.SUMMA_VOZN AS R3_VOZN,
  R3_BILLS.SUMMA_STRAH AS R3_STRAH,
  R3_BILLS.SUMMA_DOK AS R3_SUMMA_DOK
FROM V_BILLS,V_BILL_POS_FLAT,R3_BILLS,KLS_DOG,KLS_PROD,R3_MATERIALS, KLS_DOG MAIN_DOG,KLS_VIDDOG
WHERE V_BILLS.NOM_DOK=V_BILL_POS_FLAT.NOM_DOK
AND V_BILLS.DOG_ID=KLS_DOG.ID
AND V_BILLS.PROD_ID_NPR=KLS_PROD.ID_NPR
AND V_BILLS.NOM_DOK=R3_BILLS.NOM_DOK(+)
AND R3_BILLS.VBAP_MATNR=R3_MATERIALS.VBAP_MATNR(+)
AND V_BILLS.DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy')
AND KLS_DOG.MAINDOG_ID=MAIN_DOG.ID(+)
AND MAIN_DOG.VIDDOG_ID=KLS_VIDDOG.ID(+);


--
-- V_UNP_GRAFIK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK
(PROD_NAME, BEGIN_DATE, END_DATE, PREDPR_NAME, DOG_NUMBER, 
 DOG_ID, KOL_DN, DATE_PLAT, SUMMA_PRED, SUMMA_PLAN, 
 SUMMA_FACT)
AS 
SELECT
  KLS_PROD.LONG_NAME_NPR as PROD_NAME,
  r.BEGIN_DATE,
  LAST_DAY(r.END_DATE) as END_DATE,
  KLS_PREDPR.SF_NAME as  PREDPR_NAME,
  a.DOG_NUMBER,
  a.DOG_ID,
  GET_KOL_DN(a.DOG_ID,r.BEGIN_DATE,r.END_DATE,r.PROD_ID_NPR) as KOL_DN,
  a.DATE_PLAT,
  a.SUMMA_PRED,
  a.SUMMA_PLAN,
  a.SUMMA_FACT
FROM
  (
    SELECT
	  KLS_DOG.PREDPR_ID,
	  KLS_DOG.DOG_NUMBER,
	  a.DOG_ID,
	  DATE_PLAT,
	  SUM(SUMMA_PRED) as SUMMA_PRED,
	  SUM(SUMMA_PLAN) as SUMMA_PLAN,
	  SUM(SUMMA_FACT) as SUMMA_FACT
	FROM
      (
       SELECT
         plan.DOG_ID,
         plan.DATE_PLAT as DATE_PLAT,
         0 as SUMMA_PRED,
         plan.SUMMA_PLAT as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PROSR plan
       --
       UNION ALL
       --
       SELECT
         sf.DOG_ID,
         sf.DATE_PRED as DATE_PLAT,
         sf.SUMMA_PRED as SUMMA_PRED,
         0 as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PRED_SF sf
	   --
       UNION ALL
       --
       SELECT
         plan.DOG_ID,
         plan.DATE_PLAT as DATE_PLAT,
         0 as SUMMA_PRED,
         plan.SUMMA_PLAT as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PLAN_PAY plan
       --
       UNION ALL
       --
       SELECT
         fact.DOG_ID,
         fact.DATE_PLAT as DATE_PLAT,
         0 as SUMMA_PRED,
         0 as SUMMA_PLAN,
         fact.SUMMA_PLAT as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_FACT_PAY fact
      ) a, KLS_DOG
	WHERE a.DOG_ID=KLS_DOG.ID
	  AND (kls_dog.AGENT_ID=8 or kls_dog.AGENT_ID=4175)
	GROUP BY
	  KLS_DOG.PREDPR_ID,
	  KLS_DOG.DOG_NUMBER,
	  a.DOG_ID,
	  DATE_PLAT
	) a,V_TEMP_UNP_GARFIK_PARAMS r,KLS_PROD,KLS_PREDPR
WHERE r.GRP_ID_NPR=KLS_PROD.ID_NPR(+)
  AND a.PREDPR_ID=KLS_PREDPR.ID
ORDER BY
  KLS_PREDPR.SF_NAME,
  a.DOG_NUMBER,
  a.DOG_ID,
  a.DATE_PLAT;


--
-- V_UNP_REP_PREDYAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_REP_PREDYAV
(DATE_VYP_SF, DATE_BUXG, NOM_SF, OLD_NOM_SF, DATE_KVIT, 
 PROD_ID_NPR, VES_BRUTTO, NUM_KVIT, SUM_PROD, SUM_PROD_NDS, 
 TARIF, TARIF_NDS, SUM_STRAH, TARIF_GUARD, TARIF_GUARD_NDS, 
 NAME_NPR, ID_GROUP_NPR, GROUP_NPR_NAME, POLUCH_ID, POLUCH_NAME, 
 STAN_ID, STAN_NAME, NAZN_OTG_ID, SOBSTV_ID, SOBSTV_NAME, 
 N_DOG, DOG_ID, LOAD_TYPE_ID, LOAD_TYPE_NAME, PLAT_ID, 
 PLAT_NAME, DATE_OTGR, CENA_BN, CENA, SUM_VOZN11, 
 SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, CAT_CEN_ID, USL_BEGIN_DATE, 
 USL_END_DATE, ID_KIND_NPR, SBOR, SHTRAF, KOL_DN, 
 DATE_PLAT, SUMMA_DOK, NDS_DOK, REGION_NAME)
AS 
SELECT /*+ RULE */
B.DATE_VYP_SF
,B.DATE_BUXG
,B.NOM_SF
,B.OLD_NOM_SF
,B.DATE_KVIT
,(CASE
      WHEN B.PROD_ID_NPR=10080 THEN BP.PROD_ID_NPR
   ELSE B.PROD_ID_NPR
  END) AS PROD_ID_NPR
,(CASE
     WHEN BP.BILL_POS_ID<10 THEN BP.VES
   ELSE 0
  END) AS VES_BRUTTO
,0 AS NUM_KVIT
,(CASE
     WHEN BP.BILL_POS_ID<10 THEN BP.SUMMA_BN
   ELSE 0
  END) AS SUM_PROD
,(CASE
     WHEN BP.BILL_POS_ID<10 THEN BP.SUMMA-BP.SUMMA_BN
   ELSE 0
  END) AS SUM_PROD_NDS
,(CASE
     WHEN BP.BILL_POS_ID=10 THEN BP.SUMMA_BN
   ELSE 0
  END) AS TARIF
,(CASE
     WHEN BP.BILL_POS_ID=10 THEN BP.SUMMA_NDS20
   ELSE 0
  END) AS TARIF_NDS
,(CASE
     WHEN BP.BILL_POS_ID=20 THEN BP.SUMMA_BN
   ELSE 0
  END) AS SUM_STRAH
,(CASE
     WHEN BP.BILL_POS_ID=13 THEN BP.SUMMA_BN
   ELSE 0
  END) AS TARIF_GUARD
,(CASE
     WHEN BP.BILL_POS_ID=13 THEN BP.SUMMA_NDS20
   ELSE 0
  END) AS TARIF_GUARD_NDS
--,0 AS SVED_NUM
,P1.NAME_NPR
,P1.ID_GROUP_NPR
,P2.NAME_NPR AS GROUP_NPR_NAME
,NVL(M.POTREB_ID,0) AS POLUCH_ID
,NVL(PR2.PREDPR_NAME,' ') AS POLUCH_NAME
,NVL(M.STAN_ID,0) AS STAN_ID
,NVL(S.STAN_NAME,' ') AS STAN_NAME
,M.NAZN_OTG_ID
,M.NPR_SOBSTV_ID AS SOBSTV_ID
,PR3.PREDPR_NAME AS SOBSTV_NAME
,D.SHORT_NUMBER AS N_DOG
,B.DOG_ID
,LT.ID AS LOAD_TYPE_ID
,LT.TYPE_OTGR_NAME AS LOAD_TYPE_NAME
--,0 AS OWN_VAG_ID
--,'' AS SOBVAG_NAME
,PR4.ID AS PLAT_ID
,PR4.PREDPR_NAME AS PLAT_NAME
--,0 AS SUM_VOZ
,B.DATE_KVIT AS DATE_OTGR
--,0 AS TARIF19
,BP.CENA_BN
,BP.CENA
,(CASE
     WHEN BP.BILL_POS_ID=11 AND P1.ID_KIND_NPR<>10050 AND P1.ID_KIND_NPR<>10060 THEN BP.SUMMA_BN
   ELSE 0
  END) AS SUM_VOZN11
,(CASE
     WHEN BP.BILL_POS_ID=11 AND P1.ID_KIND_NPR<>10050 AND P1.ID_KIND_NPR<>10060 THEN BP.SUMMA_NDS20
   ELSE 0
  END) AS SUM_VOZN11_NDS
,(CASE
     WHEN BP.BILL_POS_ID=12 THEN BP.SUMMA_BN
   ELSE 0
  END) AS SUM_VOZN12
,(CASE
     WHEN BP.BILL_POS_ID=12 THEN BP.SUMMA_NDS20
   ELSE 0
  END) AS SUM_VOZN12_NDS
,UD.CAT_CEN_ID
,UD.USL_BEGIN_DATE
,UD.USL_END_DATE
,P1.ID_KIND_NPR
,(CASE
     WHEN P1.ID_KIND_NPR=10050 THEN B.SUMMA_DOK
   ELSE 0
  END) AS SBOR
,(CASE
     WHEN P1.ID_KIND_NPR=10060 THEN B.SUMMA_DOK
   ELSE 0
  END) AS SHTRAF
,B.KOL_DN
,B.DATE_PLAT
,B.SUMMA_DOK
,B.NDS_DOK
,R.REGION_NAME
FROM BILLS B
,BILL_POS BP
,MONTH M
,KLS_PREDPR PR2 --получатель
,KLS_PREDPR PR3 --СОБСТВЕННИК ПРОД
,KLS_PREDPR PR4 --плательщик
,KLS_PROD P1
,KLS_PROD P2
,KLS_DOG D
,KLS_STAN S
,KLS_VID_OTGR VO
,KLS_LOAD_TYPE LT
,USL_DOG UD
,KLS_REGION R
WHERE
B.NOM_DOK=BP.NOM_DOK
AND B.NOM_ZD=M.NOM_ZD(+)
AND M.POTREB_ID=PR2.ID(+)
AND D.PREDPR_ID=PR4.ID(+)
AND (CASE WHEN B.PROD_ID_NPR=10080 THEN BP.PROD_ID_NPR
   ELSE B.PROD_ID_NPR
  END)=P1.ID_NPR
AND B.DOG_ID=D.ID(+)
AND P1.ID_GROUP_NPR=P2.ID_NPR
AND M.STAN_ID=S.ID(+)
AND M.NPR_SOBSTV_ID=PR3.ID(+)
AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
AND (CASE WHEN B.PROD_ID_NPR=10080 THEN 1
   ELSE NVL(VO.LOAD_TYPE_ID,0)
  END)=LT.ID
AND B.DOG_ID=UD.DOG_ID(+)
AND B.USL_NUMBER=UD.USL_NUMBER
AND S.REGION_ID=R.ID(+)
--and B.PROD_ID_NPR=10080
;


--
-- V_USER_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_USER_MONTH
(NOM_ZD, STANOTP_ID, NPR_SOBSTV_ID, STAN_ID, VETKA_ID, 
 POLUCH_ID, TEX_PD_ID, NAZN_OTG_ID, LOAD_ABBR, DOG_ID, 
 USL_NUMBER, GOSPROG_ID, PROD_ID_NPR, TONN_DECLARED, TONN_LOADED, 
 CIST_DECLARED, CIST_LOADED, FLG_ALLOW_8_AXES, FLG_UPPER_SLIV, FLG_DOP_CIST, 
 FLG_FORMA_2, FLG_OBOGR, DATE_PLAN, PRIM, CENA, 
 CENA_OTP, SUM_ZD, GR4, K_TAR, INPUT_DATE, 
 UPDATE_DATE, TARIF1TONN, POTREB_ID, PLANSTRU_ID, NPODOG_ID, 
 GROTP_ID, DATE_CEN, GP_NAPR_ID, TONN_R, CIST_R, 
 TRANSPORT, IS_EXP, SUPPLIER_ID, APPL_TAG, CENA_NPO, 
 CENA_OTP_NPO, KOL_DN_NPO, TONN_RAZNAR, CIST_RAZNAR, ZAKAZ_ID, 
 EXPED_ID, GU12_A_ID, ZAKAZ_HIST_ID, POKUP_DOG_ID, POKUP_USL_NUMBER, 
 NAPR_POST_ID, CIST_FACT, TONN_FACT, AFTER_2005, IS_AGENT)
AS 
SELECT MONTH.NOM_ZD, MONTH.STANOTP_ID, MONTH.NPR_SOBSTV_ID, MONTH.STAN_ID, MONTH.VETKA_ID,
 MONTH.POLUCH_ID, MONTH.TEX_PD_ID, MONTH.NAZN_OTG_ID, MONTH.LOAD_ABBR, MONTH.DOG_ID,
 MONTH.USL_NUMBER, MONTH.GOSPROG_ID, MONTH.PROD_ID_NPR, MONTH.TONN_DECLARED, MONTH.TONN_LOADED,
 MONTH.CIST_DECLARED, MONTH.CIST_LOADED, MONTH.FLG_ALLOW_8_AXES, MONTH.FLG_UPPER_SLIV, MONTH.FLG_DOP_CIST,
 MONTH.FLG_FORMA_2, MONTH.FLG_OBOGR, MONTH.DATE_PLAN, MONTH.PRIM, MONTH.CENA,
 MONTH.CENA_OTP, MONTH.SUM_ZD, MONTH.GR4, MONTH.K_TAR, MONTH.INPUT_DATE,
 MONTH.UPDATE_DATE, MONTH.TARIF1TONN, MONTH.POTREB_ID, MONTH.PLANSTRU_ID, MONTH.NPODOG_ID,
 MONTH.GROTP_ID, MONTH.DATE_CEN, MONTH.GP_NAPR_ID, MONTH.TONN_R, MONTH.CIST_R,
 MONTH.TRANSPORT, MONTH.IS_EXP, MONTH.SUPPLIER_ID, MONTH.APPL_TAG, MONTH.CENA_NPO,
 MONTH.CENA_OTP_NPO, MONTH.KOL_DN_NPO, MONTH.TONN_RAZNAR, MONTH.CIST_RAZNAR, MONTH.ZAKAZ_ID,
 MONTH.EXPED_ID, MONTH.GU12_A_ID, MONTH.ZAKAZ_HIST_ID, MONTH.POKUP_DOG_ID, MONTH.POKUP_USL_NUMBER,
 MONTH.NAPR_POST_ID, MONTH.CIST_FACT, MONTH.TONN_FACT,0 as AFTER_2005,KLS_DOG.IS_AGENT
FROM MONTH,KLS_DOG
WHERE MONTH.DOG_ID=KLS_DOG.ID
  AND DATE_PLAN<TO_DATE('01.01.2005','dd.mm.yyyy')
UNION ALL
SELECT MONTH.NOM_ZD, MONTH.STANOTP_ID, MONTH.NPR_SOBSTV_ID, MONTH.STAN_ID, MONTH.VETKA_ID,
 MONTH.POLUCH_ID, MONTH.TEX_PD_ID, MONTH.NAZN_OTG_ID, MONTH.LOAD_ABBR, MONTH.DOG_ID,
 MONTH.USL_NUMBER, MONTH.GOSPROG_ID, MONTH.PROD_ID_NPR, MONTH.TONN_DECLARED, MONTH.TONN_LOADED,
 MONTH.CIST_DECLARED, MONTH.CIST_LOADED, MONTH.FLG_ALLOW_8_AXES, MONTH.FLG_UPPER_SLIV, MONTH.FLG_DOP_CIST,
 MONTH.FLG_FORMA_2, MONTH.FLG_OBOGR, MONTH.DATE_PLAN, MONTH.PRIM, MONTH.CENA,
 MONTH.CENA_OTP, MONTH.SUM_ZD, MONTH.GR4, MONTH.K_TAR, MONTH.INPUT_DATE,
 MONTH.UPDATE_DATE, MONTH.TARIF1TONN, MONTH.POTREB_ID, MONTH.PLANSTRU_ID, MONTH.NPODOG_ID,
 MONTH.GROTP_ID, MONTH.DATE_CEN, MONTH.GP_NAPR_ID, MONTH.TONN_R, MONTH.CIST_R,
 MONTH.TRANSPORT, MONTH.IS_EXP, MONTH.SUPPLIER_ID, MONTH.APPL_TAG, MONTH.CENA_NPO,
 MONTH.CENA_OTP_NPO, MONTH.KOL_DN_NPO, MONTH.TONN_RAZNAR, MONTH.CIST_RAZNAR, MONTH.ZAKAZ_ID,
 MONTH.EXPED_ID, MONTH.GU12_A_ID, MONTH.ZAKAZ_HIST_ID, MONTH.POKUP_DOG_ID, MONTH.POKUP_USL_NUMBER,
 MONTH.NAPR_POST_ID, MONTH.CIST_FACT, MONTH.TONN_FACT,1 as AFTER_2005,KLS_DOG.IS_AGENT
FROM MONTH,KLS_DOG
WHERE MONTH.DOG_ID=KLS_DOG.ID
  AND DATE_PLAN>=TO_DATE('01.01.2005','dd.mm.yyyy')
  AND (FOR_INIT.AppUserUnp=1 OR KLS_DOG.PREDPR_ID=2641);


--
-- V_ZAKAZ_DECADS_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_DECADS_SNP
(DATE_, DECADE_, PREDPR_ID, PREDPR_NAME, PROD_ID_NPR, 
 NAME_NPR, GROUP_NAME, VES, NOM_ZD)
AS 
SELECT   month.input_date AS date_,
         DECODE
              (TRUNC (    (  EXTRACT (DAY FROM month.input_date
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     ),
               4, 3,
               TRUNC (    (  EXTRACT (DAY FROM month.input_date
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     )
              ) AS decade_,
         4175 as predpr_id, 
         'ООО "ЛУКОЙЛ-УНП"' AS predpr_name,
         month.prod_id_npr as prod_id_npr,
         kls_prod.name_npr,
         kls_prod_groups.group_name, 
         month.tonn_declared AS ves,
         month.nom_zd
    FROM v_master_reports r,
         kls_prod,
         (SELECT *
            FROM kls_prod_groups_desc a
           WHERE a.prod_type_grp_id = 1) gr_prod,
         kls_prod_groups,
         month,
         kls_dog
   WHERE NLS_UPPER(r.report_file)='ZAKAZ_DECADS.XLS'
     and month.dog_id=kls_dog.id and kls_dog.predpr_id=2641
     AND month.prod_id_npr = kls_prod.id_npr
     AND month.prod_id_npr = gr_prod.prod_id_npr
     AND gr_prod.prod_groups_id = kls_prod_groups.ID
     AND month.date_plan >= r.begin_date
     AND month.date_plan <= r.end_date
     and exists
     (select null from
         zakaz, 
         zakaz_hist
        where zakaz.ID = zakaz_hist.zakaz_id
          AND zakaz_hist.STATUS_ZAKAZ_ID=20
          AND zakaz_hist.nom_zd = MONTH.nom_zd
          AND zakaz.is_agent = 2
          AND zakaz.is_accept = 1    
          )
--GROUP BY month.input_date,
--         month.prod_ID_NPR,
--         kls_prod_groups.group_name,
--         kls_prod.name_npr
union all

SELECT  
-- план отгрузки по данным СНП
  zakaz.begin_date as date_,
  DECODE
              (TRUNC (    (  EXTRACT (DAY FROM zakaz.begin_date
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     ),
               4, 3,
               TRUNC (    (  EXTRACT (DAY FROM zakaz.begin_date
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     )
              ) AS decade_,
  kls_predpr.id as predpr_id,
  kls_predpr.PREDPR_NAME,
  zakaz.prod_id_npr,
  kls_prod.NAME_NPR,
  kls_prod_groups.GROUP_NAME,
  zakaz_hist.load_ves AS ves,
  zakaz.INPUT_NUMBER
FROM v_master_reports r,
     zakaz,
     zakaz_hist,
     kls_dog,
     kls_predpr,
     kls_prod,
     (SELECT *
     FROM kls_prod_groups_desc a
     WHERE a.prod_type_grp_id = 1) gr_prod,
     kls_prod_groups
WHERE NLS_UPPER(r.report_file)='ZAKAZ_DECADS.XLS'
     and zakaz.lukdog_id = kls_dog.ID
     AND zakaz.is_agent = 2
     AND zakaz.is_accept = 1
     and zakaz.PROD_ID_NPR = gr_prod.PROD_ID_NPR
     and gr_prod.PROD_GROUPS_ID =kls_prod_groups.ID
     and gr_prod.PROD_ID_NPR=kls_prod.ID_NPR
     AND kls_dog.agent_id = kls_predpr.ID
     AND zakaz.date_plan >=r.begin_date
     AND zakaz.date_plan <=r.end_date
     AND zakaz.ID = zakaz_hist.zakaz_id
     AND zakaz_hist.STATUS_ZAKAZ_ID=20
     and not exists
     (select null from MONTH
        where zakaz_hist.nom_zd = MONTH.nom_zd
      )
--GROUP BY zakaz.begin_date, 
--            kls_predpr.id,
--                kls_predpr.PREDPR_NAME,
--                    zakaz.prod_id_npr,
--                        kls_prod_groups.GROUP_NAME,
--                            kls_prod.NAME_NPR
;


--
-- V_ZAKAZ_DECADS_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_DECADS_UNP
(DATE_, PREDPR_ID, PREDPR_NAME, PROD_ID_NPR, NAME_NPR, 
 GROUP_NAME, VES, DECADE_)
AS 
Select 
-- График отгрузки по данным УНП
date_,
predpr_id,
predpr_name,
prod_id_npr, 
name_npr,
group_name,
sum(ves) as ves, 
decade_
from 
(
SELECT   gu12_br.date_r AS date_,
         4175 as predpr_id, 
         'ООО "ЛУКОЙЛ-УНП"' AS predpr_name,
         gu12_br.id_npr as prod_id_npr,
         kls_prod.name_npr,
         kls_prod_groups.group_name, 
         SUM (gu12_br.ves) AS ves,
         DECODE
              (TRUNC (    (  EXTRACT (DAY FROM gu12_br.date_r
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     ),
               4, 3,
               TRUNC (    (  EXTRACT (DAY FROM gu12_br.date_r
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     )
              ) AS decade_
    FROM v_master_reports r,
         kls_prod,
         (SELECT *
            FROM kls_prod_groups_desc a
           WHERE a.prod_type_grp_id = 1) gr_prod,
         kls_prod_groups,
         gu12_b,
         gu12_br
   WHERE NLS_UPPER(r.report_file)='ZAKAZ_DECADS.XLS'
     and gu12_b.plat_id=2641
     AND gu12_b.ID = gu12_br.id_b
     AND gu12_br.id_npr = kls_prod.id_npr
     AND gu12_br.id_npr = gr_prod.prod_id_npr
     AND gr_prod.prod_groups_id = kls_prod_groups.ID
     AND gu12_br.date_r >= r.begin_date
     AND gu12_br.date_r <= r.end_date
     and exists
     (select null from
         zakaz, 
         zakaz_hist,
         MONTH
        where zakaz.ID = zakaz_hist.zakaz_id
          AND zakaz_hist.STATUS_ZAKAZ_ID=20
          AND zakaz_hist.nom_zd = MONTH.nom_zd
          AND MONTH.stan_id = gu12_b.stan_id
          AND MONTH.gu12_a_id = gu12_b.id_a
    )
GROUP BY gu12_br.date_r,
         gu12_br.ID_NPR,
         kls_prod_groups.group_name,
         kls_prod.name_npr
--ORDER BY gu12_br.date_r, 
--         kls_prod_groups.group_name,
--         kls_prod.name_npr
union all
SELECT  zakaz.begin_date AS date_,
        kls_predpr.id as predpr_id, 
        kls_predpr.predpr_name AS predpr_name,
        zakaz.prod_id_npr,
        kls_prod.name_npr,
        kls_prod_groups.group_name, 
        SUM (zakaz.ves) AS ves,
         DECODE
              (TRUNC (    (  EXTRACT (DAY FROM zakaz.begin_date)
                           - 1
                          )
                        / 10
                      + 1
                     ),
               4, 3,
               TRUNC (    (  EXTRACT (DAY FROM zakaz.begin_date
                                     )
                           - 1
                          )
                        / 10
                      + 1
                     )
              ) AS decade_
    FROM v_master_reports r,
         zakaz,
         kls_dog,
         kls_prod,
         kls_predpr,
         (SELECT *
            FROM kls_prod_groups_desc a
           WHERE a.prod_type_grp_id = 1) gr_prod,
         kls_prod_groups
   WHERE NLS_UPPER(r.report_file)='ZAKAZ_DECADS.XLS'
     and zakaz.lukdog_id = kls_dog.ID
     AND zakaz.is_agent = 2
     AND zakaz.is_accept = 1
     AND kls_dog.agent_id = kls_predpr.ID
     and not exists
     (select null from 
         zakaz_hist,
         MONTH,
         gu12_b,
         gu12_br
        where zakaz.ID = zakaz_hist.zakaz_id
          AND zakaz_hist.STATUS_ZAKAZ_ID=20
          AND zakaz_hist.nom_zd = MONTH.nom_zd
          AND MONTH.stan_id = gu12_b.stan_id
          AND MONTH.gu12_a_id = gu12_b.id_a
          AND gu12_b.ID = gu12_br.id_b
      )
     AND zakaz.prod_id_npr = kls_prod.id_npr
     AND zakaz.prod_id_npr = gr_prod.prod_id_npr
     AND gr_prod.prod_groups_id = kls_prod_groups.ID
     AND zakaz.date_plan >=r.begin_date
     AND zakaz.date_plan <=r.end_date
GROUP BY kls_predpr.predpr_name,
         kls_predpr.id, 
         zakaz.begin_date,
         kls_prod_groups.group_name,
         kls_prod.name_npr,
         zakaz.prod_id_npr
)
GROUP BY predpr_name,
         predpr_id,
         decade_,
         date_,
         group_name,
         name_npr,
         prod_id_npr
ORDER BY predpr_name,
         date_,
         group_name,
         name_npr;


--
-- TRG_AIUDR_KLS_NAR_LINE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_KLS_NAR_LINE
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.KLS_NAR_LINE
FOR EACH ROW
BEGIN
  -- Обновляем факт отгрузки в заявке
  IF INSERTING() THEN
    UPDATE MONTH
	   SET CIST_FACT=NVL(CIST_FACT,0)+NVL(:NEW.FACT_KOL,0),
	       TONN_FACT=NVL(TONN_FACT,0)+NVL(:NEW.FACT_VES,0)
 	 WHERE NOM_ZD=:NEW.NOM_ZD;
  END IF;
  IF DELETING() THEN
    UPDATE MONTH
	   SET CIST_FACT=NVL(CIST_FACT,0)-NVL(:OLD.FACT_KOL,0),
	       TONN_FACT=NVL(TONN_FACT,0)-NVL(:OLD.FACT_VES,0)
	 WHERE NOM_ZD=:OLD.NOM_ZD;
  END IF;
  IF UPDATING('FACT_VES') OR UPDATING('FACT_KOL') THEN
    UPDATE MONTH
	   SET CIST_FACT=NVL(CIST_FACT,0)-NVL(:OLD.FACT_KOL,0)+NVL(:NEW.FACT_KOL,0),
	       TONN_FACT=NVL(TONN_FACT,0)-NVL(:OLD.FACT_VES,0)+NVL(:NEW.FACT_VES,0)
	 WHERE NOM_ZD=:NEW.NOM_ZD;
  END IF;


END;
/


--
-- TRG_CHECKARH_MONTH  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_MONTH
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER."MONTH"
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_PLAN;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:OLD.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	*/
  ELSE
    doc_dat:=:NEW.DATE_PLAN;
    /*BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:NEW.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- BILL_POS_PARUS  (Table) 
--
CREATE TABLE MASTER.BILL_POS_PARUS
(
  NOM_DOK            NUMBER(18)                 NOT NULL,
  PARUS_RN           NUMBER(18)                 NOT NULL,
  BILL_POS_PARUS_ID  NUMBER(10)                 DEFAULT 0                     NOT NULL,
  PREF_SF            VARCHAR2(20 BYTE),
  NOM_SF             VARCHAR2(10 BYTE),
  DATE_VYP_SF        DATE,
  DATE_OTGR          DATE,
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  VES                NUMBER(18,6)               DEFAULT 0,
  CENA_BN            NUMBER(18,6)               DEFAULT 0,
  CENA               NUMBER(18,6)               DEFAULT 0,
  SUMMA_BN           NUMBER(22,6)               DEFAULT 0,
  SUMMA_AKCIZ        NUMBER(22,6)               DEFAULT 0,
  SUMMA_NDS20        NUMBER(22,6)               DEFAULT 0,
  SUMMA_GSM25        NUMBER(22,6)               DEFAULT 0,
  SUMMA              NUMBER(22,6)               DEFAULT 0,
  FOOD_RN            NUMBER(18),
  FOOD_PRN           NUMBER(18),
  FOOD_CODE          VARCHAR2(20 BYTE),
  FOOD_TYPE          NUMBER(10),
  FOOD_NAME          VARCHAR2(240 BYTE),
  MES_UNIT           NUMBER(18),
  MES_UNIT_NAME      VARCHAR2(10 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;


--
-- DOP_KVIT  (Table) 
--
CREATE TABLE MASTER.DOP_KVIT
(
  ID                 NUMBER(16),
  FLG_OPERDATA       NUMBER(1),
  MESTO_ID           NUMBER(2),
  NOM_ZD             VARCHAR2(12 BYTE),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  TEX_PD_ID          NUMBER(10),
  NUM_CIST           VARCHAR2(10 BYTE),
  DATE_OTGR          DATE,
  VES                NUMBER(10,3),
  VES_BRUTTO         NUMBER(10,3),
  VES_ED             NUMBER(10,3),
  KOL_ED             NUMBER(6),
  TARIF              NUMBER(12,2),
  TARIF19            NUMBER(12,2),
  TARIF_ORIG         NUMBER(12,2),
  NUM_KVIT           NUMBER(10),
  DATE_KVIT          DATE,
  NUM_MILITARY       VARCHAR2(20 BYTE),
  FLG_DOP_CIST       NUMBER(1),
  FLG_VAG_KLIENT     NUMBER(1),
  VAGOWNER_ID        NUMBER(3),
  VAGONTYPE_ID       NUMBER(2),
  KALIBR_ID          VARCHAR2(5 BYTE),
  VES_CIST           NUMBER(10,3),
  DATE_VOZ           DATE,
  KVIT_VOZ           VARCHAR2(12 BYTE),
  SUM_VOZ            NUMBER(12,2),
  DATE_OTV           DATE,
  PLOMBA1            VARCHAR2(15 BYTE),
  PLOMBA2            VARCHAR2(15 BYTE),
  ROSINSPL1          VARCHAR2(6 BYTE),
  ROSINSPL2          VARCHAR2(6 BYTE),
  VZLIV              NUMBER(6),
  TEMPER             NUMBER(10,1),
  FAKT_PL            NUMBER(10,4),
  FORMNAKL_ID        NUMBER(2),
  SHABEXP_ID         NUMBER(2),
  GTD                VARCHAR2(23 BYTE),
  EXPED_ID           NUMBER(6),
  VETKA_OTP_ID       NUMBER(10),
  NUM_EXP_MAR        VARCHAR2(10 BYTE),
  BILL_ID            NUMBER(10)                 DEFAULT 0,
  SVED_ID            VARCHAR2(9 BYTE),
  DATE_OFORML        DATE,
  SVED_NUM           NUMBER(16)                 DEFAULT 0,
  PASP_ID            VARCHAR2(9 BYTE),
  NUM_NAR            VARCHAR2(15 BYTE),
  NUM_DOVER          VARCHAR2(15 BYTE),
  PERER_ID           NUMBER(6),
  DATE_EDIT          DATE,
  JKCOMMIT           NUMBER(1),
  GROTP_ID           NUMBER(6)                  DEFAULT 0,
  PERECH_TEXPD_DATE  DATE,
  PERECH_TEXPD_NUM   VARCHAR2(10 BYTE),
  SUM_PROD           NUMBER(15,2)               DEFAULT 0,
  SUM_AKCIZ          NUMBER(15,2)               DEFAULT 0,
  SUM_PROD_NDS       NUMBER(15,2)               DEFAULT 0,
  TARIF_NDS          NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_STRAH          NUMBER(15,2)               DEFAULT 0,
  CENA               NUMBER(10,2),
  CENA_OTP           NUMBER(10,2),
  DATE_CENA          DATE,
  CENA_VOZN          NUMBER(10,2)               DEFAULT 0,
  CAPACITY           VARCHAR2(10 BYTE),
  TARIF_GUARD        NUMBER(12,2),
  TARIF_GUARD_NDS    NUMBER(12,2),
  TARIF_ALT          NUMBER(12,2),
  NACENKA            NUMBER(10,2)               DEFAULT 0,
  PODDONS            NUMBER(5),
  SHIELDS            NUMBER(5),
  UPAK_ID            NUMBER(10),
  UPAK_VES           NUMBER(15,6),
  KOL_NET            NUMBER(19,5),
  UPAK_VES_ED        NUMBER(7,2),
  SHIELD_VES         NUMBER(7,2),
  PODDON_VES         NUMBER(7,2),
  PL                 NUMBER(10,4),
  NUM_AKT            NUMBER(10),
  BILL_POS_ID        NUMBER(10),
  PROTO_NUM          VARCHAR2(15 BYTE),
  PROTO_DATE         DATE,
  NO_AKCIZ           NUMBER(1),
  PERECH_GUARD_DATE  DATE,
  PERECH_GUARD_NUM   VARCHAR2(10 BYTE),
  TTN_ID             NUMBER(15),
  DATE_DOVER         DATE,
  FIO_DRIVER         VARCHAR2(30 BYTE),
  IS_LOADED          NUMBER(1),
  AXES               NUMBER(3),
  CTLV               NUMBER(6,4),
  DEFI_MASS_ID       NUMBER(2),
  VOLUME             NUMBER(10),
  VOLUME15           NUMBER(10),
  ZPU_TYPE1          NUMBER(5),
  ZPU_TYPE2          NUMBER(5),
  PL15               NUMBER(6,4),
  DATE_IN            DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.DOP_KVIT.ID IS 'Отгрузка';

COMMENT ON COLUMN MASTER.DOP_KVIT.FLG_OPERDATA IS '1- Признак оперативной отгрузки';

COMMENT ON COLUMN MASTER.DOP_KVIT.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.DOP_KVIT.NOM_ZD IS 'N задания';

COMMENT ON COLUMN MASTER.DOP_KVIT.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.DOP_KVIT.TEX_PD_ID IS 'ТЕХ ПД';

COMMENT ON COLUMN MASTER.DOP_KVIT.NUM_CIST IS 'Номер транспортного ср-ва';

COMMENT ON COLUMN MASTER.DOP_KVIT.DATE_OTGR IS 'Дата сведения';

COMMENT ON COLUMN MASTER.DOP_KVIT.VES IS 'Вес груза';

COMMENT ON COLUMN MASTER.DOP_KVIT.VES_BRUTTO IS 'Вес груза';

COMMENT ON COLUMN MASTER.DOP_KVIT.VES_ED IS 'Вес ед.груза';

COMMENT ON COLUMN MASTER.DOP_KVIT.KOL_ED IS 'Кол-во ед-ц';

COMMENT ON COLUMN MASTER.DOP_KVIT.TARIF IS 'Тариф';

COMMENT ON COLUMN MASTER.DOP_KVIT.TARIF19 IS 'Тариф по схеме 19 - для расчета вознаграждения';

COMMENT ON COLUMN MASTER.DOP_KVIT.TARIF_ORIG IS 'Оригинальный тариф из квитанции (без скидок и т.п.)';

COMMENT ON COLUMN MASTER.DOP_KVIT.NUM_KVIT IS 'N квитанции или накладной';

COMMENT ON COLUMN MASTER.DOP_KVIT.DATE_KVIT IS 'Дата квитанции или накладной';

COMMENT ON COLUMN MASTER.DOP_KVIT.NUM_MILITARY IS 'N транспорта';

COMMENT ON COLUMN MASTER.DOP_KVIT.FLG_DOP_CIST IS 'Признак доп поставки';

COMMENT ON COLUMN MASTER.DOP_KVIT.FLG_VAG_KLIENT IS 'Вагон клиента';

COMMENT ON COLUMN MASTER.DOP_KVIT.VAGOWNER_ID IS 'Собственник тр.ср-ва';

COMMENT ON COLUMN MASTER.DOP_KVIT.VAGONTYPE_ID IS 'Род вагона (ЦС,КР и т.п.)';

COMMENT ON COLUMN MASTER.DOP_KVIT.KALIBR_ID IS 'Тип вагона (номер)';

COMMENT ON COLUMN MASTER.DOP_KVIT.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.DOP_KVIT.DATE_VOZ IS 'Дата возврата';

COMMENT ON COLUMN MASTER.DOP_KVIT.KVIT_VOZ IS 'Квитанция на возврат';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_VOZ IS 'Сумма тарифа за возврат';

COMMENT ON COLUMN MASTER.DOP_KVIT.PLOMBA1 IS 'Пломба 1';

COMMENT ON COLUMN MASTER.DOP_KVIT.PLOMBA2 IS 'Пломба 2';

COMMENT ON COLUMN MASTER.DOP_KVIT.ROSINSPL1 IS 'Пломба Росинспектората 1';

COMMENT ON COLUMN MASTER.DOP_KVIT.ROSINSPL2 IS 'Пломба Росинспектората 2';

COMMENT ON COLUMN MASTER.DOP_KVIT.VZLIV IS 'Взлив или объем';

COMMENT ON COLUMN MASTER.DOP_KVIT.TEMPER IS 'Температура';

COMMENT ON COLUMN MASTER.DOP_KVIT.FAKT_PL IS 'Факт.плотность';

COMMENT ON COLUMN MASTER.DOP_KVIT.FORMNAKL_ID IS 'Форма накладной';

COMMENT ON COLUMN MASTER.DOP_KVIT.SHABEXP_ID IS 'Шаблон экспортной накладной';

COMMENT ON COLUMN MASTER.DOP_KVIT.GTD IS 'ГТД';

COMMENT ON COLUMN MASTER.DOP_KVIT.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.DOP_KVIT.VETKA_OTP_ID IS 'Ветка отправителя';

COMMENT ON COLUMN MASTER.DOP_KVIT.NUM_EXP_MAR IS 'N маршрутной отправки';

COMMENT ON COLUMN MASTER.DOP_KVIT.BILL_ID IS 'Счет-фактура';

COMMENT ON COLUMN MASTER.DOP_KVIT.SVED_ID IS 'Сведение';

COMMENT ON COLUMN MASTER.DOP_KVIT.DATE_OFORML IS 'Дата оформления';

COMMENT ON COLUMN MASTER.DOP_KVIT.SVED_NUM IS 'N сведения';

COMMENT ON COLUMN MASTER.DOP_KVIT.PASP_ID IS 'Паспорт';

COMMENT ON COLUMN MASTER.DOP_KVIT.NUM_NAR IS 'N наряда';

COMMENT ON COLUMN MASTER.DOP_KVIT.NUM_DOVER IS 'N доверенности';

COMMENT ON COLUMN MASTER.DOP_KVIT.PERER_ID IS 'Переработчик';

COMMENT ON COLUMN MASTER.DOP_KVIT.DATE_EDIT IS 'Дата редактирования';

COMMENT ON COLUMN MASTER.DOP_KVIT.JKCOMMIT IS 'Признак подтвержденного сведения';

COMMENT ON COLUMN MASTER.DOP_KVIT.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.DOP_KVIT.PERECH_TEXPD_DATE IS 'Дата перечня ТЕХ ПД';

COMMENT ON COLUMN MASTER.DOP_KVIT.PERECH_TEXPD_NUM IS 'N перечня ТЕХ ПД';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_PROD IS 'За продукт';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_PROD_NDS IS 'НДС на продукт';

COMMENT ON COLUMN MASTER.DOP_KVIT.TARIF_NDS IS 'НДС на тариф';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_VOZN11 IS 'Вознаграждение за тонну';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_VOZN11_NDS IS 'НДС на вознаграждение';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_VOZN12 IS 'Вознаграждение (19-20)';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_VOZN12_NDS IS 'НДС на вознаграждение';

COMMENT ON COLUMN MASTER.DOP_KVIT.SUM_STRAH IS 'Страховка';

COMMENT ON COLUMN MASTER.DOP_KVIT.CENA_VOZN IS 'Цена вознаграждения (руб./тн.)';

COMMENT ON COLUMN MASTER.DOP_KVIT.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.DOP_KVIT.TARIF_ALT IS 'Тариф по альтернативной схеме - оригинальный';

COMMENT ON COLUMN MASTER.DOP_KVIT.NACENKA IS 'Страховой тариф';

COMMENT ON COLUMN MASTER.DOP_KVIT.PODDONS IS 'Кол-во поддонов';

COMMENT ON COLUMN MASTER.DOP_KVIT.SHIELDS IS 'Кол-во щитов';

COMMENT ON COLUMN MASTER.DOP_KVIT.UPAK_ID IS 'Вид упаковки';

COMMENT ON COLUMN MASTER.DOP_KVIT.UPAK_VES IS 'Вес упаковки';

COMMENT ON COLUMN MASTER.DOP_KVIT.UPAK_VES_ED IS 'Вес (КГ) пустой упаковки 1 ед-цы товара';

COMMENT ON COLUMN MASTER.DOP_KVIT.SHIELD_VES IS 'Вес (КГ) 1 щита';

COMMENT ON COLUMN MASTER.DOP_KVIT.PODDON_VES IS 'Вес (КГ) 1 поддона';

COMMENT ON COLUMN MASTER.DOP_KVIT.PL IS 'Плотность из паспорта';

COMMENT ON COLUMN MASTER.DOP_KVIT.PROTO_NUM IS 'Протокол цен';

COMMENT ON COLUMN MASTER.DOP_KVIT.PROTO_DATE IS 'Дата протокола';

COMMENT ON COLUMN MASTER.DOP_KVIT.NO_AKCIZ IS 'Цена без акциза';

COMMENT ON COLUMN MASTER.DOP_KVIT.PERECH_GUARD_DATE IS 'Дата перечня ТЕХ ПД (охрана)';

COMMENT ON COLUMN MASTER.DOP_KVIT.PERECH_GUARD_NUM IS 'N перечня ТЕХ ПД (охрана)';

COMMENT ON COLUMN MASTER.DOP_KVIT.DATE_DOVER IS 'Дата доверенности';

COMMENT ON COLUMN MASTER.DOP_KVIT.FIO_DRIVER IS 'Водитель';



--
-- KVIT  (Table) 
--
CREATE TABLE MASTER.KVIT
(
  ID                 NUMBER(16)                 NOT NULL,
  FLG_OPERDATA       NUMBER(1)                  NOT NULL,
  MESTO_ID           NUMBER(2),
  NOM_ZD             VARCHAR2(12 BYTE),
  PROD_ID_NPR        VARCHAR2(5 BYTE),
  TEX_PD_ID          NUMBER(10),
  NUM_CIST           VARCHAR2(10 BYTE),
  DATE_OTGR          DATE,
  VES                NUMBER(10,3),
  VES_BRUTTO         NUMBER(10,3),
  VES_ED             NUMBER(10,3),
  KOL_ED             NUMBER(6),
  TARIF              NUMBER(12,2),
  TARIF19            NUMBER(12,2),
  TARIF_ORIG         NUMBER(12,2),
  NUM_KVIT           NUMBER(10),
  DATE_KVIT          DATE,
  NUM_MILITARY       VARCHAR2(20 BYTE),
  FLG_DOP_CIST       NUMBER(1),
  FLG_VAG_KLIENT     NUMBER(1),
  VAGOWNER_ID        NUMBER(3),
  VAGONTYPE_ID       NUMBER(2),
  KALIBR_ID          VARCHAR2(5 BYTE),
  VES_CIST           NUMBER(10,3),
  DATE_VOZ           DATE,
  KVIT_VOZ           VARCHAR2(12 BYTE),
  SUM_VOZ            NUMBER(12,2),
  DATE_OTV           DATE,
  PLOMBA1            VARCHAR2(15 BYTE),
  PLOMBA2            VARCHAR2(15 BYTE),
  ROSINSPL1          VARCHAR2(6 BYTE),
  ROSINSPL2          VARCHAR2(6 BYTE),
  VZLIV              NUMBER(6),
  TEMPER             NUMBER(10,1),
  FAKT_PL            NUMBER(10,4),
  FORMNAKL_ID        NUMBER(2),
  SHABEXP_ID         NUMBER(10),
  GTD                VARCHAR2(23 BYTE),
  EXPED_ID           NUMBER(6),
  VETKA_OTP_ID       NUMBER(10),
  NUM_EXP_MAR        VARCHAR2(10 BYTE),
  BILL_ID            NUMBER(10)                 DEFAULT 0,
  SVED_ID            VARCHAR2(9 BYTE),
  DATE_OFORML        DATE,
  SVED_NUM           NUMBER(16)                 DEFAULT 0,
  PASP_ID            VARCHAR2(9 BYTE),
  NUM_NAR            VARCHAR2(15 BYTE),
  NUM_DOVER          VARCHAR2(15 BYTE),
  PERER_ID           NUMBER(6),
  DATE_EDIT          DATE,
  JKCOMMIT           NUMBER(1),
  GROTP_ID           NUMBER(6)                  DEFAULT 0,
  PERECH_TEXPD_DATE  DATE,
  PERECH_TEXPD_NUM   VARCHAR2(10 BYTE),
  SUM_PROD           NUMBER(15,2)               DEFAULT 0,
  SUM_AKCIZ          NUMBER(15,2)               DEFAULT 0,
  SUM_PROD_NDS       NUMBER(15,2)               DEFAULT 0,
  TARIF_NDS          NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN11_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12         NUMBER(15,2)               DEFAULT 0,
  SUM_VOZN12_NDS     NUMBER(15,2)               DEFAULT 0,
  SUM_STRAH          NUMBER(15,2)               DEFAULT 0,
  CENA               NUMBER(10,2),
  CENA_OTP           NUMBER(10,2),
  DATE_CENA          DATE,
  CENA_VOZN          NUMBER(10,2)               DEFAULT 0,
  CAPACITY           VARCHAR2(10 BYTE),
  TARIF_GUARD        NUMBER(12,2)               DEFAULT 0,
  TARIF_GUARD_NDS    NUMBER(12,2)               DEFAULT 0,
  TARIF_ALT          NUMBER(12,2),
  NACENKA            NUMBER(10,2)               DEFAULT 0,
  PODDONS            NUMBER(5),
  SHIELDS            NUMBER(5),
  UPAK_ID            NUMBER(10),
  UPAK_VES           NUMBER(15,6),
  KOL_NET            NUMBER(19,5),
  UPAK_VES_ED        NUMBER(7,2),
  SHIELD_VES         NUMBER(7,2),
  PODDON_VES         NUMBER(7,2),
  PL                 NUMBER(10,4),
  NUM_AKT            NUMBER(10),
  BILL_POS_ID        NUMBER(10),
  PROTO_NUM          VARCHAR2(15 BYTE),
  PROTO_DATE         DATE,
  NO_AKCIZ           NUMBER(1),
  PERECH_GUARD_DATE  DATE,
  PERECH_GUARD_NUM   VARCHAR2(10 BYTE),
  TTN_ID             NUMBER(15),
  DATE_DOVER         DATE,
  FIO_DRIVER         VARCHAR2(30 BYTE),
  IS_LOADED          NUMBER(1)                  DEFAULT 0,
  AXES               NUMBER(3),
  CTLV               NUMBER(6,4),
  DEFI_MASS_ID       NUMBER(2),
  VOLUME             NUMBER(10),
  VOLUME15           NUMBER(10),
  ZPU_TYPE1          NUMBER(5),
  ZPU_TYPE2          NUMBER(5),
  PL15               NUMBER(6,4),
  DATE_IN            DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KVIT IS 'Отгрузки';

COMMENT ON COLUMN MASTER.KVIT.ID IS 'Отгрузка';

COMMENT ON COLUMN MASTER.KVIT.FLG_OPERDATA IS '1- Признак оперативной отгрузки';

COMMENT ON COLUMN MASTER.KVIT.MESTO_ID IS 'Место отгрузки';

COMMENT ON COLUMN MASTER.KVIT.NOM_ZD IS 'N задания';

COMMENT ON COLUMN MASTER.KVIT.PROD_ID_NPR IS 'Продукт';

COMMENT ON COLUMN MASTER.KVIT.TEX_PD_ID IS 'ТЕХ ПД';

COMMENT ON COLUMN MASTER.KVIT.NUM_CIST IS 'Номер транспортного ср-ва';

COMMENT ON COLUMN MASTER.KVIT.DATE_OTGR IS 'Дата сведения';

COMMENT ON COLUMN MASTER.KVIT.VES IS 'Вес груза';

COMMENT ON COLUMN MASTER.KVIT.VES_BRUTTO IS 'Вес груза';

COMMENT ON COLUMN MASTER.KVIT.VES_ED IS 'Вес ед.груза';

COMMENT ON COLUMN MASTER.KVIT.KOL_ED IS 'Кол-во ед-ц';

COMMENT ON COLUMN MASTER.KVIT.TARIF IS 'Тариф';

COMMENT ON COLUMN MASTER.KVIT.TARIF19 IS 'Тариф по схеме 19 - для расчета вознаграждения';

COMMENT ON COLUMN MASTER.KVIT.TARIF_ORIG IS 'Оригинальный тариф из квитанции (без скидок и т.п.)';

COMMENT ON COLUMN MASTER.KVIT.NUM_KVIT IS 'N квитанции или накладной';

COMMENT ON COLUMN MASTER.KVIT.DATE_KVIT IS 'Дата квитанции или накладной';

COMMENT ON COLUMN MASTER.KVIT.NUM_MILITARY IS 'N транспорта';

COMMENT ON COLUMN MASTER.KVIT.FLG_DOP_CIST IS 'Признак доп поставки';

COMMENT ON COLUMN MASTER.KVIT.FLG_VAG_KLIENT IS 'Вагон клиента';

COMMENT ON COLUMN MASTER.KVIT.VAGOWNER_ID IS 'Собственник тр.ср-ва';

COMMENT ON COLUMN MASTER.KVIT.VAGONTYPE_ID IS 'Род вагона (ЦС,КР и т.п.)';

COMMENT ON COLUMN MASTER.KVIT.KALIBR_ID IS 'Тип вагона (номер)';

COMMENT ON COLUMN MASTER.KVIT.VES_CIST IS 'Вес вагона';

COMMENT ON COLUMN MASTER.KVIT.DATE_VOZ IS 'Дата возврата';

COMMENT ON COLUMN MASTER.KVIT.KVIT_VOZ IS 'Квитанция на возврат';

COMMENT ON COLUMN MASTER.KVIT.SUM_VOZ IS 'Сумма тарифа за возврат';

COMMENT ON COLUMN MASTER.KVIT.PLOMBA1 IS 'Пломба 1';

COMMENT ON COLUMN MASTER.KVIT.PLOMBA2 IS 'Пломба 2';

COMMENT ON COLUMN MASTER.KVIT.ROSINSPL1 IS 'Пломба Росинспектората 1';

COMMENT ON COLUMN MASTER.KVIT.ROSINSPL2 IS 'Пломба Росинспектората 2';

COMMENT ON COLUMN MASTER.KVIT.VZLIV IS 'Взлив или объем';

COMMENT ON COLUMN MASTER.KVIT.TEMPER IS 'Температура';

COMMENT ON COLUMN MASTER.KVIT.FAKT_PL IS 'Факт.плотность';

COMMENT ON COLUMN MASTER.KVIT.FORMNAKL_ID IS 'Форма накладной';

COMMENT ON COLUMN MASTER.KVIT.SHABEXP_ID IS 'Шаблон экспортной накладной';

COMMENT ON COLUMN MASTER.KVIT.GTD IS 'ГТД';

COMMENT ON COLUMN MASTER.KVIT.EXPED_ID IS 'Экспедитор';

COMMENT ON COLUMN MASTER.KVIT.VETKA_OTP_ID IS 'Ветка отправителя';

COMMENT ON COLUMN MASTER.KVIT.NUM_EXP_MAR IS 'N маршрутной отправки';

COMMENT ON COLUMN MASTER.KVIT.BILL_ID IS 'Счет-фактура';

COMMENT ON COLUMN MASTER.KVIT.SVED_ID IS 'Сведение';

COMMENT ON COLUMN MASTER.KVIT.DATE_OFORML IS 'Дата оформления';

COMMENT ON COLUMN MASTER.KVIT.SVED_NUM IS 'N сведения';

COMMENT ON COLUMN MASTER.KVIT.PASP_ID IS 'Паспорт';

COMMENT ON COLUMN MASTER.KVIT.NUM_NAR IS 'N наряда';

COMMENT ON COLUMN MASTER.KVIT.NUM_DOVER IS 'N доверенности';

COMMENT ON COLUMN MASTER.KVIT.PERER_ID IS 'Переработчик';

COMMENT ON COLUMN MASTER.KVIT.DATE_EDIT IS 'Дата редактирования';

COMMENT ON COLUMN MASTER.KVIT.JKCOMMIT IS 'Признак подтвержденного сведения';

COMMENT ON COLUMN MASTER.KVIT.GROTP_ID IS 'Грузоотправитель';

COMMENT ON COLUMN MASTER.KVIT.PERECH_TEXPD_DATE IS 'Дата перечня ТЕХ ПД';

COMMENT ON COLUMN MASTER.KVIT.PERECH_TEXPD_NUM IS 'N перечня ТЕХ ПД';

COMMENT ON COLUMN MASTER.KVIT.SUM_PROD IS 'За продукт';

COMMENT ON COLUMN MASTER.KVIT.SUM_AKCIZ IS 'Акциз';

COMMENT ON COLUMN MASTER.KVIT.SUM_PROD_NDS IS 'НДС на продукт';

COMMENT ON COLUMN MASTER.KVIT.TARIF_NDS IS 'НДС на тариф';

COMMENT ON COLUMN MASTER.KVIT.SUM_VOZN11 IS 'Вознаграждение за тонну';

COMMENT ON COLUMN MASTER.KVIT.SUM_VOZN11_NDS IS 'НДС на вознаграждение';

COMMENT ON COLUMN MASTER.KVIT.SUM_VOZN12 IS 'Вознаграждение (19-20)';

COMMENT ON COLUMN MASTER.KVIT.SUM_VOZN12_NDS IS 'НДС на вознаграждение';

COMMENT ON COLUMN MASTER.KVIT.SUM_STRAH IS 'Страховка';

COMMENT ON COLUMN MASTER.KVIT.CENA IS 'Цена без НДС';

COMMENT ON COLUMN MASTER.KVIT.CENA_OTP IS 'Цена отпускная';

COMMENT ON COLUMN MASTER.KVIT.DATE_CENA IS 'Дата цены';

COMMENT ON COLUMN MASTER.KVIT.CENA_VOZN IS 'Цена вознаграждения (руб./тн.)';

COMMENT ON COLUMN MASTER.KVIT.CAPACITY IS 'Грузоподъемность';

COMMENT ON COLUMN MASTER.KVIT.TARIF_GUARD IS 'Плата за охрану';

COMMENT ON COLUMN MASTER.KVIT.TARIF_GUARD_NDS IS 'Плата за охрану (НДС)';

COMMENT ON COLUMN MASTER.KVIT.TARIF_ALT IS 'Тариф по альтернативной схеме - оригинальный';

COMMENT ON COLUMN MASTER.KVIT.NACENKA IS 'Страховой тариф';

COMMENT ON COLUMN MASTER.KVIT.PODDONS IS 'Кол-во поддонов';

COMMENT ON COLUMN MASTER.KVIT.SHIELDS IS 'Кол-во щитов';

COMMENT ON COLUMN MASTER.KVIT.UPAK_ID IS 'Вид упаковки';

COMMENT ON COLUMN MASTER.KVIT.UPAK_VES IS 'Вес упаковки';

COMMENT ON COLUMN MASTER.KVIT.KOL_NET IS 'Вес НЕТТО (для нефти)';

COMMENT ON COLUMN MASTER.KVIT.UPAK_VES_ED IS 'Вес (КГ) пустой упаковки 1 ед-цы товара';

COMMENT ON COLUMN MASTER.KVIT.SHIELD_VES IS 'Вес (КГ) 1 щита';

COMMENT ON COLUMN MASTER.KVIT.PODDON_VES IS 'Вес (КГ) 1 поддона';

COMMENT ON COLUMN MASTER.KVIT.PL IS 'Плотнтость из паспорта';

COMMENT ON COLUMN MASTER.KVIT.NUM_AKT IS '№ акта приема/передачи при продаже ЛУКОЙЛ''у';

COMMENT ON COLUMN MASTER.KVIT.BILL_POS_ID IS 'ID позиции СФ (продажа ЛУКОЙЛу)';

COMMENT ON COLUMN MASTER.KVIT.PROTO_NUM IS 'Протокол цен';

COMMENT ON COLUMN MASTER.KVIT.PROTO_DATE IS 'Дата протокола цена';

COMMENT ON COLUMN MASTER.KVIT.NO_AKCIZ IS 'Цена без акциза';

COMMENT ON COLUMN MASTER.KVIT.PERECH_GUARD_DATE IS 'Дата перечня ТЕХ ПД (охрана)';

COMMENT ON COLUMN MASTER.KVIT.PERECH_GUARD_NUM IS 'N перечня ТЕХ ПД (охрана)';

COMMENT ON COLUMN MASTER.KVIT.TTN_ID IS 'ID накладной';

COMMENT ON COLUMN MASTER.KVIT.DATE_DOVER IS 'Дата доверенности';

COMMENT ON COLUMN MASTER.KVIT.FIO_DRIVER IS 'Водитель';

COMMENT ON COLUMN MASTER.KVIT.IS_LOADED IS '0-Добавлен, но не загружен, 1-обновлен, но не загружен, 9-загружен в ИСУ Переработка';

COMMENT ON COLUMN MASTER.KVIT.AXES IS 'Кол-во осей';

COMMENT ON COLUMN MASTER.KVIT.CTLV IS 'Коэф.коррекции объема';

COMMENT ON COLUMN MASTER.KVIT.DEFI_MASS_ID IS 'Тип замера массы';

COMMENT ON COLUMN MASTER.KVIT.VOLUME IS 'Объем';

COMMENT ON COLUMN MASTER.KVIT.VOLUME15 IS 'Объем при 15';

COMMENT ON COLUMN MASTER.KVIT.ZPU_TYPE1 IS 'Тип пломбы 1';

COMMENT ON COLUMN MASTER.KVIT.ZPU_TYPE2 IS 'Тип пломбы 2';

COMMENT ON COLUMN MASTER.KVIT.PL15 IS 'Плотность при 15';

COMMENT ON COLUMN MASTER.KVIT.DATE_IN IS 'Дата получения грузополучателем';



--
-- BILL_POS_P_BILLS_P_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_BILLS_P_FK_I ON MASTER.BILL_POS_PARUS
(NOM_DOK)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_DATE_OTGR_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_DATE_OTGR_I ON MASTER.BILL_POS_PARUS
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_DATE_VYP_SF_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_DATE_VYP_SF_I ON MASTER.BILL_POS_PARUS
(DATE_VYP_SF)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_FOOD_TYPE_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_FOOD_TYPE_I ON MASTER.BILL_POS_PARUS
(FOOD_TYPE)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_NOM_SF_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_NOM_SF_I ON MASTER.BILL_POS_PARUS
(NOM_SF)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.BILL_POS_P_PK ON MASTER.BILL_POS_PARUS
(NOM_DOK, PARUS_RN, BILL_POS_PARUS_ID)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_PREF_SF_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_PREF_SF_I ON MASTER.BILL_POS_PARUS
(PREF_SF)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_PROD_ID_NPR_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_PROD_ID_NPR_I ON MASTER.BILL_POS_PARUS
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- BILL_POS_P_PROD_NOMEN_FK_I  (Index) 
--
CREATE INDEX MASTER.BILL_POS_P_PROD_NOMEN_FK_I ON MASTER.BILL_POS_PARUS
(FOOD_RN, FOOD_PRN)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_BILLS_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_BILLS_FK_I ON MASTER.DOP_KVIT
(BILL_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_DATE_KVIT_BILLS_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_DATE_KVIT_BILLS_I ON MASTER.DOP_KVIT
(DATE_KVIT, BILL_ID, ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_DATE_OFORML  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_DATE_OFORML ON MASTER.DOP_KVIT
(DATE_OFORML)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_DATE_OTGR  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_DATE_OTGR ON MASTER.DOP_KVIT
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_EXPED_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_EXPED_FK_I ON MASTER.DOP_KVIT
(EXPED_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_FLG_OPERDATA  (Index) 
--
CREATE BITMAP INDEX MASTER.DOP_KVIT_FLG_OPERDATA ON MASTER.DOP_KVIT
(FLG_OPERDATA)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_FORMNAKL_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_FORMNAKL_FK_I ON MASTER.DOP_KVIT
(FORMNAKL_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_GTD_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_GTD_FK_I ON MASTER.DOP_KVIT
(GTD)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_ID_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_ID_I ON MASTER.DOP_KVIT
(ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_KALIBR_FK_I ON MASTER.DOP_KVIT
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_MESTO_FK_I ON MASTER.DOP_KVIT
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_MONTH_FK_I ON MASTER.DOP_KVIT
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_NUM_CIST  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_NUM_CIST ON MASTER.DOP_KVIT
(NUM_CIST)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_PASP_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_PASP_FK_I ON MASTER.DOP_KVIT
(PASP_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_PERER_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_PERER_FK_I ON MASTER.DOP_KVIT
(PERER_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_PROD_FK_I ON MASTER.DOP_KVIT
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_SHABEXP_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_SHABEXP_FK_I ON MASTER.DOP_KVIT
(SHABEXP_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_SVED_ID  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_SVED_ID ON MASTER.DOP_KVIT
(SVED_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_SVED_NUM  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_SVED_NUM ON MASTER.DOP_KVIT
(SVED_NUM)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_TEX_PD_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_TEX_PD_FK_I ON MASTER.DOP_KVIT
(TEX_PD_ID, GROTP_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_UPAK_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_UPAK_FK_I ON MASTER.DOP_KVIT
(UPAK_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_VAGONTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_VAGONTYPE_FK_I ON MASTER.DOP_KVIT
(VAGONTYPE_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_VAGOWNER_FK_I ON MASTER.DOP_KVIT
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- DOP_KVIT_VETKA_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.DOP_KVIT_VETKA_OTP_FK_I ON MASTER.DOP_KVIT
(VETKA_OTP_ID)
TABLESPACE USERSINDX;


--
-- KVIT_BILLS_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_BILLS_FK_I ON MASTER.KVIT
(BILL_ID)
TABLESPACE USERSINDX;


--
-- KVIT_DATE_KVIT_BILLS_I  (Index) 
--
CREATE INDEX MASTER.KVIT_DATE_KVIT_BILLS_I ON MASTER.KVIT
(DATE_KVIT, BILL_ID, ID)
TABLESPACE USERSINDX;


--
-- KVIT_DATE_OFORML  (Index) 
--
CREATE INDEX MASTER.KVIT_DATE_OFORML ON MASTER.KVIT
(DATE_OFORML)
TABLESPACE USERSINDX;


--
-- KVIT_DATE_OTGR  (Index) 
--
CREATE INDEX MASTER.KVIT_DATE_OTGR ON MASTER.KVIT
(DATE_OTGR)
TABLESPACE USERSINDX;


--
-- KVIT_EXPED_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_EXPED_FK_I ON MASTER.KVIT
(EXPED_ID)
TABLESPACE USERSINDX;


--
-- KVIT_FLG_OPERDATA  (Index) 
--
CREATE BITMAP INDEX MASTER.KVIT_FLG_OPERDATA ON MASTER.KVIT
(FLG_OPERDATA)
TABLESPACE USERSINDX;


--
-- KVIT_FORMNAKL_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_FORMNAKL_FK_I ON MASTER.KVIT
(FORMNAKL_ID)
TABLESPACE USERSINDX;


--
-- KVIT_GTD_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_GTD_FK_I ON MASTER.KVIT
(GTD)
TABLESPACE USERSINDX;


--
-- KVIT_I_NOM_ZD_PROD_ID_NPR  (Index) 
--
CREATE INDEX MASTER.KVIT_I_NOM_ZD_PROD_ID_NPR ON MASTER.KVIT
(NOM_ZD, PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- KVIT_KALIBR_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_KALIBR_FK_I ON MASTER.KVIT
(KALIBR_ID)
TABLESPACE USERSINDX;


--
-- KVIT_MESTO_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_MESTO_FK_I ON MASTER.KVIT
(MESTO_ID)
TABLESPACE USERSINDX;


--
-- KVIT_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_MONTH_FK_I ON MASTER.KVIT
(NOM_ZD)
TABLESPACE USERSINDX;


--
-- KVIT_NOMZD_SVED_I  (Index) 
--
CREATE INDEX MASTER.KVIT_NOMZD_SVED_I ON MASTER.KVIT
(NOM_ZD, SVED_NUM)
TABLESPACE USERSINDX;


--
-- KVIT_NUM_AKT_I  (Index) 
--
CREATE INDEX MASTER.KVIT_NUM_AKT_I ON MASTER.KVIT
(NUM_AKT)
TABLESPACE USERSINDX;


--
-- KVIT_NUM_CIST_I  (Index) 
--
CREATE INDEX MASTER.KVIT_NUM_CIST_I ON MASTER.KVIT
(NUM_CIST, DATE_OFORML)
TABLESPACE USERSINDX;


--
-- KVIT_NUM_CISTKVIT_I  (Index) 
--
CREATE INDEX MASTER.KVIT_NUM_CISTKVIT_I ON MASTER.KVIT
(NUM_CIST, NUM_KVIT)
TABLESPACE USERSINDX;


--
-- KVIT_NUM_KVIT_I  (Index) 
--
CREATE INDEX MASTER.KVIT_NUM_KVIT_I ON MASTER.KVIT
(NUM_KVIT)
TABLESPACE USERS;


--
-- KVIT_PASP_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_PASP_FK_I ON MASTER.KVIT
(PASP_ID)
TABLESPACE USERSINDX;


--
-- KVIT_PERECH_TEXPD_I  (Index) 
--
CREATE INDEX MASTER.KVIT_PERECH_TEXPD_I ON MASTER.KVIT
(PERECH_TEXPD_DATE, PERECH_TEXPD_NUM)
TABLESPACE USERSINDX;


--
-- KVIT_PERER_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_PERER_FK_I ON MASTER.KVIT
(PERER_ID)
TABLESPACE USERSINDX;


--
-- KVIT_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KVIT_PK ON MASTER.KVIT
(ID, FLG_OPERDATA)
TABLESPACE USERSINDX;


--
-- KVIT_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_PROD_FK_I ON MASTER.KVIT
(PROD_ID_NPR)
TABLESPACE USERSINDX;


--
-- KVIT_SHABEXP_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_SHABEXP_FK_I ON MASTER.KVIT
(SHABEXP_ID)
TABLESPACE USERSINDX;


--
-- KVIT_SVED_ID  (Index) 
--
CREATE INDEX MASTER.KVIT_SVED_ID ON MASTER.KVIT
(SVED_ID)
TABLESPACE USERSINDX;


--
-- KVIT_SVED_NUM  (Index) 
--
CREATE INDEX MASTER.KVIT_SVED_NUM ON MASTER.KVIT
(SVED_NUM)
TABLESPACE USERSINDX;


--
-- KVIT_TEX_PD_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_TEX_PD_FK_I ON MASTER.KVIT
(TEX_PD_ID, GROTP_ID)
TABLESPACE USERSINDX;


--
-- KVIT_UPAK_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_UPAK_FK_I ON MASTER.KVIT
(UPAK_ID)
TABLESPACE USERSINDX;


--
-- KVIT_VAGONTYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_VAGONTYPE_FK_I ON MASTER.KVIT
(VAGONTYPE_ID)
TABLESPACE USERSINDX;


--
-- KVIT_VAGOWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_VAGOWNER_FK_I ON MASTER.KVIT
(VAGOWNER_ID)
TABLESPACE USERSINDX;


--
-- KVIT_VETKA_OTP_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT_VETKA_OTP_FK_I ON MASTER.KVIT
(VETKA_OTP_ID)
TABLESPACE USERSINDX;


--
-- FOR_CIST  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_CIST AS

/* СПРАВОЧНИК вагонов */

-- Определить наличие вагона в справочнике
FUNCTION CIST_EXIST (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1) RETURN NUMBER;

-- Вернуть последний продукт
FUNCTION GET_ID_NPR (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1) RETURN VARCHAR2;

-- Вернуть вид вагона
FUNCTION GET_VAGONTYPE (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1) RETURN NUMBER;

-- Проверить номер вагона
FUNCTION CHECK_NUM_CIST(pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Вернуть тип по роду вагона
FUNCTION GET_KALIBR_BY_VAGONTYPE (pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN VARCHAR2;

-- Вернуть тип
FUNCTION GET_KALIBR (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN VARCHAR2;

-- Вернуть принадлежность к дорогам СНГ
FUNCTION GET_NCISTDOP (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Вернуть вес вагона
FUNCTION GET_VES_CIST (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Вернуть владельца вагона
FUNCTION GET_VAGOWNER (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Вернуть грузоподъемность
FUNCTION GET_CAPACITY (pNUM_CIST VARCHAR2, pKALIBR_ID VARCHAR2 DEFAULT NULL, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN VARCHAR2;

FUNCTION GET_CAPACITY_BY_KALIBR (pKALIBR_ID VARCHAR2, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER) RETURN VARCHAR2;

-- Вернуть кол-во осей
FUNCTION GET_AXES (pNUM_CIST VARCHAR2, pKALIBR_ID VARCHAR2 DEFAULT NULL, pVES NUMBER DEFAULT 0, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Вернуть кол-во осей по типу вагона
FUNCTION GET_AXES_BY_KALIBR (pKALIBR_ID VARCHAR2, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER) RETURN NUMBER;

-- Вернуть кол-во осей по весу
FUNCTION GET_AXES_BY_VES (pVES NUMBER, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER) RETURN NUMBER;

-- Вренуть объем вагона по типу и взливу
FUNCTION GET_VOLUME (pKALIBR_ID VARCHAR2, pVZLIV NUMBER, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Вренуть предупреждения по вагону
FUNCTION GET_DENI_TXT(pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER;

-- Сохранить реквизит вагона в справочнике вагонов
PROCEDURE SET_CIST_PROPERTY(pCOMMIT NUMBER, pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER, pFIELD VARCHAR2, pVALUE VARCHAR2);

-- Добавить вагон в справочник вагонов
PROCEDURE ADD_CIST (pCOMMIT NUMBER, pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER, pKALIBR_ID VARCHAR2, pTIP1 VARCHAR2, pCAPACITY VARCHAR2,pWES1 VARCHAR2,
                    pNCISTDOP NUMBER, pAXES NUMBER, pVES_CIST NUMBER, pVAGOWNER_ID NUMBER, pPROD_ID_NPR VARCHAR2 DEFAULT NULL);

-- Информация о последнем грузе
FUNCTION LAST_PROD_ID_NPR (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2;
FUNCTION LAST_PROD_NAME (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2;
FUNCTION LAST_GRUZ (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2;
FUNCTION LAST_PROD_DATE (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2;

END;

/

--
-- FOR_DIAGRAM  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Diagram AS

  -- Очистка таблицы DIAGRAM для текущего пользователя
  PROCEDURE EMPTY_DIAGRAM;
  
  -- Отгрузка с УНП по месяцам
  PROCEDURE UNP_MON (DATE_BEG VARCHAR2, DATE_END VARCHAR2);

  -- Движение товара по месяцам за последние 4 года (по данным КО)
  PROCEDURE OPER_MON_KONS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2, TIP_OP VARCHAR2, IS_SUM NUMBER);

  -- Реализовано с НБ/АЗС по месяцам в тн за последние 4 года (по данным КО)
  PROCEDURE REALIZ_MON_TON (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2);
					    
  -- Реализовано с НБ/АЗС по месяцам в тыс.руб. за последние 4 года (по данным КО)
  PROCEDURE REALIZ_MON_SUM (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2);

 -- Реализовано с НБ/АЗС фасовки по месяцам в тыс.руб. за последние 4 года (по данным КО)
  PROCEDURE REALIZ_MON_SUM_FAS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2);

 -- Сведения о резервуарном парке УНП
  PROCEDURE UNP_REZ (Date# VARCHAR2, NPR_GROUP# VARCHAR2, PROD# VARCHAR2);
  
  -- Планирование объемов реализации АЗС (по данным КО)
  PROCEDURE PLAN_REALIZ_AZS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2);

  -- Планирование объемов реализации фасованной продукции АЗС (по данным КО)
  PROCEDURE PLAN_REALIZ_AZS_FAS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2);
  
END;

/

--
-- FOR_FILIAL  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Filial AS

-- Загрузить отчет из буфера
FUNCTION LOAD_FROM_BUF RETURN NUMBER;

-- Перенос данных в AZC_OPERATION
PROCEDURE MOVE_TO_AZC_OPER (PeriodId NUMBER);

-- Подготовка данных для отчета "План-факт поставок и реализации"
PROCEDURE PF_REALIZ(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, TIP_CALC NUMBER DEFAULT 0);

-- Последний остаток по подразделению
FUNCTION LAST_OST(pFILIAL_ID NUMBER,pFIL_PERIOD_ID NUMBER,pFIL_ORG_ID NUMBER,pREP_TYPE_ID NUMBER) RETURN NUMBER;

-- Подготовка данных для отчета "Суточная реализация с АЗС и Нефтебаз"
PROCEDURE FIL_SUT_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2,
  ADD_TRANZIT NUMBER DEFAULT 0,ONLY_FAS NUMBER DEFAULT 0, TIP_CALC NUMBER DEFAULT 0, 
  ONLY_MAIN NUMBER DEFAULT 0, FAS_IN_RUB NUMBER DEFAULT 0, pPROD_TYPE NUMBER DEFAULT 5);

-- Подготовка данных для отчета "Суточная реализация с АЗС и Нефтебаз"
PROCEDURE FIL_SUT_REAL_TRANSIT(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);
  
-- Подготовка данных для отчета "Реализация фасовки с АЗС и Нефтебаз"
PROCEDURE FIL_SUT_REAL_FAS(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);

-- Подготовка данных для отчета "План-факт реализации наливных с ЛУКОЙЛ-СНП"
PROCEDURE FIL_SUT_REAL_PF(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);
  
-- Подготовка данных для отчета "План-факт реализации фасовки с ЛУКОЙЛ-СНП"
PROCEDURE FIL_SUT_REAL_FAS_PF(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);

-- Подготовка данных для отчета "План реализации сводный"
PROCEDURE FIL_SVOD_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);

-- Подготовка данных для отчета "Реализация на собственные нужды"
PROCEDURE FIL_SOBS_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);
  
-- Подготовка данных для отчета "Продажа и запасы н/пр (статистика)"
PROCEDURE FIL_STAT_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2);

-- Остаток на утро в кг
FUNCTION GET_OST_BEGIN_MAS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;

-- Остаток на утро в лит
FUNCTION GET_OST_BEGIN_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;

-- Остаток на утро в руб.
FUNCTION GET_OST_BEGIN_SUM(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;

-- Остаток на вечер в кг
FUNCTION GET_OST_END_MAS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;

-- Остаток на вечер в лит
FUNCTION GET_OST_END_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;

-- Остаток на вечер в руб.
FUNCTION GET_OST_END_SUM(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER;

-- Универсальная функция расчета остатка  
FUNCTION GET_OST(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE, pUTRO NUMBER DEFAULT 0, pTIP_OST NUMBER DEFAULT 0) RETURN NUMBER;

-- Универсальная функция расчета остатка c учетом собственника   
FUNCTION GET_OST_SOBS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE DATE DEFAULT SYSDATE, pUTRO NUMBER DEFAULT 0, pTIP_OST NUMBER DEFAULT 0) RETURN NUMBER;

-- Перенос данных из ПАРУСА в AZC_OPERATION
PROCEDURE PARUS_TO_AZC_OPER (pDATE_BEG VARCHAR2, pDATE_END VARCHAR2, pFilial NUMBER DEFAULT NULL, pOrgStru NUMBER DEFAULT NULL, ADD_SOPUT NUMBER DEFAULT 0, IS_SOPUT NUMBER DEFAULT 0);

-- Подготовка данных для сообщения ПРН (в целом по НПО)
PROCEDURE SoobPRN_X6(DATE_BEG VARCHAR2, DATE_END VARCHAR2);  

-- Подготовка данных для сообщения ПРН (Головное НПО)
PROCEDURE SoobPRN_X7(DATE_BEG VARCHAR2, DATE_END VARCHAR2);  

-- Подготовка данных для сообщения ПРН (Архангельск)
PROCEDURE SoobPRN_X8(DATE_BEG VARCHAR2, DATE_END VARCHAR2);  

-- Подготовка данных для сообщения ФРН (в целом по НПО)
PROCEDURE SoobFRN_X6(DATE_BEG VARCHAR2, DATE_END VARCHAR2);  

-- Подготовка данных для сообщения ФРН (Головное НПО)
PROCEDURE SoobFRN_X7(DATE_BEG VARCHAR2, DATE_END VARCHAR2);  

-- Подготовка данных для сообщения ФРН (Архангельск)
PROCEDURE SoobFRN_X8(DATE_BEG VARCHAR2, DATE_END VARCHAR2);

       
END;

/

--
-- FOR_PARUS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Parus AS

TYPE CURSTYPE IS REF CURSOR;

  PROCEDURE RENEW_BILLS_PARUS(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_BILL_POS_PARUS(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_dog_PARUS;
  PROCEDURE UPDATE_SNAPSHOTS_REQV;
  FUNCTION GET_NUM_DOG(BASE_NUMB VARCHAR2) RETURN VARCHAR2;
  FUNCTION GET_DOG_ID(BASE_NUMB VARCHAR2) RETURN NUMBER;
  FUNCTION GET_NUM_SVED(PRIM VARCHAR2) RETURN NUMBER;
  FUNCTION GET_NUM_KVIT(PRIM VARCHAR2) RETURN NUMBER;
  
END;

/

--
-- FOR_PARUS_SNAPSHOTS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_PARUS_SNAPSHOTS AS

TYPE CURSTYPE IS REF CURSOR;

  PROCEDURE RENEW_SNAPSHOTS(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');

END;
/

--
-- FOR_PLANFACT  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Planfact AS

  -- Очистить таблицу PLAN_FACT
  PROCEDURE EmptyPlanFact;
  
  -- Заполнить план поставок
  PROCEDURE FillPlanPost (PlanId NUMBER, DateBeg VARCHAR2, DateEnd VARCHAR2, IsSNP NUMBER DEFAULT 0);
  
  -- Заполнить "Заявлено"
  PROCEDURE FillZayv (DateBeg VARCHAR2, DateEnd VARCHAR2, IsSNP NUMBER DEFAULT 0);

  -- Заполнить "Свободная емкость"
  PROCEDURE FillEmptyVol (TimeEnd VARCHAR2, DateEnd VARCHAR2);
    
  -- Заполнить факт по плану поставок
  PROCEDURE FillFactPost (DateBegPlan VARCHAR2, DateEndPlan VARCHAR2, TimeBeg VARCHAR2, DateBeg VARCHAR2, TimeEnd VARCHAR2, DateEnd VARCHAR2, IsSNP NUMBER DEFAULT 0);
  
  -- Заполнить план перевозок
  PROCEDURE FillPlanGD (DateBeg VARCHAR2, DateEnd VARCHAR2);
  
  -- Заполнить факт по плану перевозок
  PROCEDURE FillFactGD (TimeBeg VARCHAR2, DateBeg VARCHAR2, TimeEnd VARCHAR2, DateEnd VARCHAR2);

  -- Заполнение плана/факта по плану перевозок и поставки  
  PROCEDURE FillAll (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2);
	 
  -- Заполнение плана/факта по плану поставок для СНП  
  PROCEDURE FillSNP (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2);
	 
  -- Заполнение оперативной сводки  
  PROCEDURE FillOper (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2);

  -- Заполнение справки для видеоконференции  
  PROCEDURE FillConf (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2);
	 
END;

/

--
-- FOR_PODACHA  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_PODACHA AS

  /* ВЕДОМОСТИ ПОДАЧИ */

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pVED_ID NUMBER) RETURN NUMBER;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
  	 pPOD_NUM NUMBER, pPOD_DATE DATE, pTECH_TIME VARCHAR2, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, pEND_NALIV_TIME VARCHAR2,
     pVETKA_OTP_ID NUMBER) RETURN NUMBER;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER);

  /* Скопировать позицию из ДОКУМЕНТА в ДОКУМЕНТ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pROW_ID NUMBER, pNEW_TITLE_ID NUMBER) RETURN NUMBER;

  /* Проверка вагона на уникальность
     Возвращаемое значение - номер ведомости, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER;

  /* Добавить/Изменить позицию ДОКУМЕНТА
     Возвращаемое занчение - ID позиции документа */
  FUNCTION AddRow(pCOMMIT NUMBER, pID NUMBER, pVED_POD_ID NUMBER, pPOD_POS NUMBER,
    pNUM_CIST VARCHAR2, pNCISTDOP NUMBER, pAXES NUMBER, pCAPACITY VARCHAR2, pVES_CIST NUMBER,
	pVAGONTYPE_ID NUMBER, pKALIBR_ID VARCHAR2, pVAGOWNER_ID NUMBER,
	pVETKA_POD_ID NUMBER, pVETKA_NAPR_ID NUMBER, pVAG_STATUS_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pVZLIV NUMBER, pVOLUME NUMBER, pTEMPER NUMBER, 
	pZPU_TYPE1 NUMBER, pZPU_TYPE2 NUMBER, pPLOMBA1 VARCHAR2, pPLOMBA2 VARCHAR2, pROSINSPL1 VARCHAR2,
	pROSINSPL2 VARCHAR2, pBAD_NUM NUMBER, pRAZMET_FACT VARCHAR2) RETURN VARCHAR2;

  /* Скопировать позицию ВЕДОМОСТИ ОСМОТРА в ВЕДОМОСТЬ ПОДАЧИ
     Возвращаемое занчение - ID позиции документа */
  FUNCTION CopyVedOsmotrRow (pCOMMIT NUMBER, pVED_OSMOTR_ROW_ID NUMBER, pVED_POD_ID NUMBER) RETURN NUMBER;
END;

/

--
-- FOR_SVED  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_SVED AS

  /* СВЕДЕНИЯ об отгрузке */

  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pSVED_ID VARCHAR2) RETURN NUMBER;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER);

  /* Добавить/Изменить заголовок ДОКУМЕНТА
     Возвращаемое занчение - ID документа */
    FUNCTION AddTitle(pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pSVED_NUM NUMBER, pSVED_DATE DATE,
	   pPOD_DATE VARCHAR2, pTECH_TIME VARCHAR2, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, pEND_NALIV_TIME VARCHAR2, pDATE_OFORML DATE,
	   pDEFI_MASS_ID NUMBER, pPASP_ID VARCHAR2, pPROD_ID_NPR VARCHAR2, pPASP_NUM VARCHAR2, pREZ_NUM VARCHAR2, pPASP_DATE DATE,
	   pCENA NUMBER, pCENA_OTP NUMBER, pDATE_CENA DATE) RETURN VARCHAR2;

  /* Очистить временную таблицу TEMP_VALSVED */
  PROCEDURE EMPTY_TEMP_VALSVED;

  /* Заполнить временную таблицу TEMP_VALSVED */
  PROCEDURE FILL_TEMP_VALSVED (pMode NUMBER,pSVED_ID VARCHAR2, pPASP_ID VARCHAR2, pPROD_ID_NPR VARCHAR2);

  /* Перенести значения показателей паспорта из TEMP_VALSVED в KLS_VALSVED */
  PROCEDURE SAVE_TEMP_VALSVED (pSVED_ID VARCHAR2);

  /* Считать значение показателя из TEMP_VALSVED */
  FUNCTION GET_TEMP_VALSVED_AS_CHAR (pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN VARCHAR2;
  FUNCTION GET_TEMP_VALSVED_AS_NUM (pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN NUMBER;

  /* Добавить/Изменить позицию ДОКУМЕНТА
     Возвращаемое занчение - ID позиции документа */
  FUNCTION AddRow(pCOMMIT NUMBER, pID NUMBER, pSVED_ID VARCHAR2, pSVED_POS NUMBER,
    pNUM_CIST VARCHAR2, pNCISTDOP NUMBER, pAXES NUMBER, pCAPACITY VARCHAR2, pWES1 VARCHAR2, pVES_CIST NUMBER,
	pVAGONTYPE_ID NUMBER, pKALIBR_ID VARCHAR2, pTIP1 VARCHAR2, pVAGOWNER_ID NUMBER,
	pVETKA_POD_ID NUMBER, pVETKA_OTP_ID NUMBER, pVETKA_NAPR_ID NUMBER, pVAG_STATUS_ID NUMBER,
	pVZLIV NUMBER, pVOLUME NUMBER, pTEMPER NUMBER, pFAKT_PL NUMBER, pVES NUMBER, pKOL_NET NUMBER,
	pVES_ALL NUMBER, pVES_ED NUMBER, pKOL_ED NUMBER, pUPAK_ID NUMBER, pUPAK_VES NUMBER, pUPAK_VES_ED NUMBER,
	pPODDONS NUMBER, pPODDON_VES NUMBER, pSHIELDS NUMBER, pSHIELD_VES NUMBER,
	pZPU_TYPE1 NUMBER, pZPU_TYPE2 NUMBER, pPLOMBA1 VARCHAR2, pPLOMBA2 VARCHAR2, pROSINSPL1 VARCHAR2,
	pROSINSPL2 VARCHAR2, pFORMNAKL_ID NUMBER, pGOST_ID NUMBER, pVOLUME15 NUMBER, pCTLV NUMBER, pIS_AUTO NUMBER) RETURN VARCHAR2;

  /* Скопировать позицию ВЕДОМОСТИ ПОДАЧИ в СВЕДЕНИЕ
     Возвращаемое занчение - ID позиции документа */
  FUNCTION CopyVedPodRow (pCOMMIT NUMBER, pVED_POD_ROW_ID NUMBER, pSVED_ID VARCHAR2, pNAR_LINE_ID NUMBER) RETURN NUMBER;

  /* Скопировать позицию СВЕДЕНИЯ в СВЕДЕНИЕ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_SVED_ID VARCHAR2) RETURN NUMBER;

  /* Проставить ссылку на позицию разрешения на отгрузку */
  PROCEDURE SetNarLineID (pCOMMIT NUMBER, pSVED_ID VARCHAR2, pREESTR_ID NUMBER, pNAR_LINE_ID NUMBER);

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2);

  -- Получить значение показателя паспорта для сведения
  FUNCTION GET_PASP_VALUE_AS_NUM (pSVED_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN NUMBER;
  FUNCTION GET_PASP_VALUE_AS_CHAR (pSVED_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN VARCHAR2;

  -- Сохранить значение показателя паспорта для сведения
  PROCEDURE SET_PASP_VALUE (pSVED_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2, pQUAL VARCHAR2);

  -- Минимальный вес по заявке/разрешению, разрешенный к отгрузке
  FUNCTION GET_MIN_OSTAT_VES (pLOAD_TYPE_ID NUMBER, pID_GROUP_NPR VARCHAR2) RETURN NUMBER;

  /* Проверка вагона на уникальность
     Возвращаемое значение - номер сведения, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER;

END;

/

--
-- FOR_VES  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_VES AS

G_NEW_GOST CONSTANT DATE := TO_DATE('01.10.2005','dd.mm.yyyy');

/* Расчет факт.плотности по температуре и плотности при температуре <=-25 */
FUNCTION GET_FACT_PL_MOROZ(pTEMPER NUMBER, pPL NUMBER) RETURN NUMBER;

/* Расчет факт.плотности по температуре и плотности при 20'C по ГОСТ 3900-85 */
FUNCTION GET_FACT_PL_390085(pTEMPER NUMBER, pPL20 NUMBER) RETURN NUMBER;

/* Определение коэффициента коррекции объема по ASTM D 1250 */
FUNCTION GET_CTLV_ASTMD1250(pTEMPER NUMBER, pPL15 NUMBER, pPROD_ID_NPR VARCHAR2) RETURN NUMBER;

/* Процедура очистки стека (временная таблица TEMP_VES) */
PROCEDURE EMPTY_TEMP_VES;

/* Процедура сохранения параметра в стек (временная таблица TEMP_VES) */
PROCEDURE SET_PARAM (pTAG VARCHAR2, pVALUE VARCHAR2, pNORMA VARCHAR2 DEFAULT NULL);

/* Сохранение показателей паспорта из сведения в стек параметров для процедуры расчета веса */
PROCEDURE SET_PARAM_VALSVED (pSVED_ID VARCHAR2);

/* Функции считывания параметра из стека (временная таблица TEMP_VES) */
FUNCTION GET_PARAM_AS_CHAR (pTAG VARCHAR2) RETURN VARCHAR2;
FUNCTION GET_PARAM_AS_NUM (pTAG VARCHAR2) RETURN NUMBER;
FUNCTION GET_PARAM_NORMA (pTAG VARCHAR2) RETURN NUMBER;

/* Определение текущего ГОСТа */
FUNCTION GET_DEFAULT_GOST (pLOAD_TYPE_ID NUMBER, pDATE_CALC DATE, pPROD_ID_NPR VARCHAR2,
                           pTEMPER VARCHAR2, pPL15 NUMBER, pPL20 NUMBER, vSLIV NUMBER) RETURN NUMBER;

/* Расчет объема при 15'C по фактическому объему */
FUNCTION GET_VOLUME15_BY_VOLUME (pDATE_CALC DATE, vVOLUME NUMBER, vTEMPER NUMBER, vCTLV NUMBER, vSLIV NUMBER) RETURN NUMBER;

/* Расчет фактического объема по объему при 15'C */
FUNCTION GET_VOLUME_BY_VOLUME15 (pDATE_CALC DATE, vVOLUME15 NUMBER, vTEMPER NUMBER, vCTLV NUMBER) RETURN NUMBER;

/* Перерасчет весовых показателей */
FUNCTION CALC_VES(pDATE_CALC DATE, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER, pMESTO_ID NUMBER,
   pDEFI_MASS_ID NUMBER) RETURN NUMBER;

END;
/

--
-- FOR_ZAKAZ  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Zakaz AS

  -- Очистить временную таблицу
  PROCEDURE EmptyTemp(pIS_AGENT NUMBER);

  -- Добавить данные во временную таблицу
  PROCEDURE FillTemp(pIS_AGENT NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pZAKAZ_ID NUMBER DEFAULT NULL);

  -- Добавить номер разнарядки к списку
  FUNCTION CHANGE_NOM_ZD(pNOM_ZD_LIST VARCHAR2,pOLD_NOM_ZD VARCHAR2,pNEW_NOM_ZD VARCHAR2) RETURN VARCHAR2;

  -- Присвоить/снять NOM_ZD позиции "К отгрузке"
  PROCEDURE SetNOM_ZD(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pZAKAZ_HIST_ID NUMBER, pOLD_ZD VARCHAR2, pNEW_ZD VARCHAR2, pLOAD_VES NUMBER, pLOAD_KOL NUMBER, pFACT_VES NUMBER, pFACT_KOL NUMBER);

  -- Обновить факт исполнения разнарядки
  PROCEDURE FillFact (pCOMMIT NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pNOM_ZD VARCHAR2 DEFAULT NULL);

  -- Обновить факт исполнения разнарядки ФИНАНСЫ для реестра контроля СНП
  PROCEDURE FillFactThisMonth;
  
  /* ДОБАВИТЬ/ИЗМЕНИТЬ ЗАКАЗ */
 FUNCTION AddZakaz(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER, pIS_AGENT NUMBER, pDATE_PLAN DATE, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE,
	pIS_ACCEPT NUMBER, pFILIAL_ID NUMBER, pPLAT_ID NUMBER, pDOG_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pUSL_OPL_ID NUMBER, pLOAD_ABBR VARCHAR2, pSTAN_ID NUMBER,
	pVETKA_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPOTREB_NAME VARCHAR2,
	pNEFTEBASA VARCHAR2, pPAYFORM_ID NUMBER, pPLANSTRU_ID NUMBER, pPRICE_CLIENT NUMBER,
	pPRICE NUMBER, pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER,
	pPRIM VARCHAR2, pGR4 VARCHAR2, pZAKAZ_PREV_ID NUMBER,pGOSPROG_ID NUMBER,pGP_NAPR_ID NUMBER,
	pLUKDOG_ID NUMBER, pLINK_ID NUMBER, pLINK_HIST_ID NUMBER, pPERIOD_ID NUMBER DEFAULT 1, pTIP_CORP_ID NUMBER DEFAULT 1, pISU_ADD NUMBER DEFAULT 0) RETURN NUMBER;

  /* УДАЛИТЬ ЗАКАЗ */
  PROCEDURE DelZakaz(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER DEFAULT 0);

  /* ДОБАВИТЬ/ИЗМЕНИТЬ ПОЗИЦИЮ ЗАКАЗА */
  FUNCTION AddZakazHist(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER, pSORTBY NUMBER, pZAKAZ_ID NUMBER, pSTATUS_ZAKAZ_ID NUMBER, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pPROD_ID_NPR VARCHAR2,
	pOLD_STAN_ID NUMBER, pSTAN_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPRICE NUMBER, pVES NUMBER,
	pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER, pNOM_ZD VARCHAR2,
	pLOAD_VES NUMBER, pLOAD_KOL NUMBER, pFACT_VES NUMBER, pFACT_KOL NUMBER,
	pGU12_A_ID NUMBER,  pBEGIN_DATE DATE,pLINK_ID NUMBER, pLINK_HIST_ID NUMBER, pKOD_ISU VARCHAR2 DEFAULT '*', pISU_ADD NUMBER DEFAULT 0) RETURN NUMBER;

  /* УДАЛИТЬ ПОЗИЦИЮ ЗАКАЗА */
  PROCEDURE DelZakazHist(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER DEFAULT 0);

  /* Отказ */
  FUNCTION CancelZakaz(pCOMMIT NUMBER, pCANCEL_ID NUMBER, pIS_AUTO NUMBER, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE,
	pBEGIN_DATE DATE,
    pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER) RETURN NUMBER;

  /* Отказ+Добавить */
  FUNCTION CancelAddZakaz(pCOMMIT NUMBER, pCANCEL_ID NUMBER, pIS_AUTO NUMBER, pIS_AGENT NUMBER, pDATE_PLAN DATE, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE,
	pFILIAL_ID NUMBER, pPLAT_ID NUMBER, pDOG_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pUSL_OPL_ID NUMBER, pLOAD_ABBR VARCHAR2, pSTAN_ID NUMBER,
	pVETKA_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPOTREB_NAME VARCHAR2,
	pNEFTEBASA VARCHAR2, pPAYFORM_ID NUMBER, pPLANSTRU_ID NUMBER, pPRICE_CLIENT NUMBER,
	pPRICE NUMBER, pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER,
	pPRIM VARCHAR2, pGR4 VARCHAR2,pGOSPROG_ID NUMBER,pGP_NAPR_ID NUMBER,pLUKDOG_ID NUMBER) RETURN NUMBER;

  /* Переадресация */
  FUNCTION ReAddrZakaz(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pIS_AUTO NUMBER, pSTATUS_ZAKAZ_ID NUMBER, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE, pSTAN_ID NUMBER) RETURN NUMBER;

  /* Переадресация+Добавить */
  FUNCTION ReAddrAddZakaz(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pIS_AUTO NUMBER, pSTATUS_ZAKAZ_ID NUMBER,
    pIS_AGENT NUMBER, pDATE_PLAN DATE, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE,
	pFILIAL_ID NUMBER, pPLAT_ID NUMBER, pDOG_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pUSL_OPL_ID NUMBER, pLOAD_ABBR VARCHAR2, pSTAN_ID NUMBER,
	pVETKA_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPOTREB_NAME VARCHAR2,
	pNEFTEBASA VARCHAR2, pPAYFORM_ID NUMBER, pPLANSTRU_ID NUMBER, pPRICE_CLIENT NUMBER,
	pPRICE NUMBER, pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER,
	pPRIM VARCHAR2, pGR4 VARCHAR2,pGOSPROG_ID NUMBER,pGP_NAPR_ID NUMBER,pLUKDOG_ID NUMBER) RETURN NUMBER;

  /* К отгрузке */
  FUNCTION ToLoadZakaz(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pIS_AUTO NUMBER, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE, pPROD_ID_NPR VARCHAR2,
	pSTAN_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPRICE NUMBER,
	pNOM_ZD VARCHAR2, pLOAD_VES NUMBER, pLOAD_KOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER, pFACT_VES NUMBER, pFACT_KOL NUMBER,
	pGU12_A_ID NUMBER, pKOD_ISU VARCHAR2 DEFAULT '*') RETURN NUMBER;

  /* Подготовить график к заполнению */
  PROCEDURE FillGrafik(pZAKAZ_HIST_ID NUMBER);

  /* Очистить график */
  PROCEDURE EmptyGrafik;

  /* Добавить запись в график */
  PROCEDURE AddGrafik(pDATE_LOAD DATE, pTONN_LOAD NUMBER, pCIST_LOAD NUMBER);

  /* Удалить запись из графика */
  PROCEDURE DelGrafik(pDATE_LOAD DATE);

  /* Сохранить график */
  PROCEDURE SaveGrafik(pZAKAZ_HIST_ID NUMBER);

  -- Загрузка заказов потребителей из Паруса в Заказы потребителей в Master
  PROCEDURE LOAD_CONSORDS (DATE_BEG VARCHAR2,DATE_END VARCHAR2);

  -- Заполнить график из заказа на перевозку
  PROCEDURE FillGrafikFromGU (pPLAT_ID NUMBER, pPROD_GU12_ID VARCHAR2, pSTAN_ID NUMBER, pGU12_A_ID NUMBER);

  -- Максимальный номер позиции "К отгрузке"
  FUNCTION GetMaxNum(pZAKAZ_ID NUMBER) RETURN NUMBER;

  -- Проверка наличия заказа
  FUNCTION ZakazExist(pID IN OUT NUMBER, pIS_AUTO IN OUT NUMBER) RETURN BOOLEAN;

  -- Проверка наличия позиции заказа
  FUNCTION ZakazHistExist(pID IN OUT NUMBER, pIS_AUTO IN OUT NUMBER) RETURN BOOLEAN;

  /* ИНИЦИИРОВАТЬ ОБНОВЛЕНИЕ ЗАКАЗА */
  PROCEDURE RefreshZakazHist(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER DEFAULT 0);

  /* График в виде строки */
  FUNCTION GrafikToStr(pNOM_ZD VARCHAR2, pGRAFIK_TO DATE) RETURN VARCHAR2;

  /* Создать в заказе СНП позицию "К отгрузке", привязанную к уже имеющемуся непривязанному заказу УНП */
  PROCEDURE LinkSNPWithUNP(pSNP_ZAKAZ_ID NUMBER, pNOM_ZD VARCHAR2);

  PROCEDURE SetZakazLink(pID NUMBER,pLINK_ID NUMBER,pLINK_HIST_ID NUMBER);
  PROCEDURE SetZakazHistLink(pID NUMBER,pLINK_ID NUMBER,pLINK_HIST_ID NUMBER);
 
END; 
/

--
-- FOR_CIST  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_cist AS

/* СПРАВОЧНИК вагонов */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

-- Определить наличие вагона в справочнике
FUNCTION CIST_EXIST (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1) RETURN NUMBER AS
  vRes NUMBER(1);
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN  
  IF pLOAD_TYPE_ID IN (1,6) THEN
    -- Если отгрузка Ж/Д транспортом
	vRes:=0;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT 1 INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=0;
	  END;
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта;
	RETURN 0;
  END IF;
END;
  
-- Вернуть последний продукт
FUNCTION GET_ID_NPR (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1) RETURN VARCHAR2 AS
  vRes KLS_CIST.PROD_ID_NPR%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
  vCode NUMBER;
BEGIN
  IF pLOAD_TYPE_ID IN (1,6) THEN
    -- Если отгрузка Ж/Д транспортом
	vRes:='';
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT PROD_ID_NPR INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:='';
	  END;
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то продукт неопределен;
	RETURN '';
  END IF;
END;

-- Вернуть вид вагона
FUNCTION GET_VAGONTYPE (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1) RETURN NUMBER AS
  vRes KLS_CIST.VAGONTYPE_ID%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
  vCode NUMBER;
BEGIN
  IF pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка контейнерами, то возвращаем вид: КОНТЕЙНЕР
    RETURN 9;
  ELSIF pLOAD_TYPE_ID=1 THEN
    -- Если отгрузка Ж/Д транспортом
	vRes:=0;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT VAGONTYPE_ID INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	    vRes:=NVL(vRes,0);
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=0;
	  END;
	  IF vRes=0 THEN
	    -- Если вагон в справочнике не найден
        -- Определяем вид вагона по номеру
        vCode := FLOOR(vNum/10000000);
        CASE
	      WHEN vCode=7 THEN RETURN 6; -- Цистерна
  	      WHEN vCode=6 THEN RETURN 5; -- Полувагон
	      WHEN vCode=5 THEN RETURN 6; -- Цистерна
	      WHEN vCode=2 THEN RETURN 2; -- Крытый вагон
	      WHEN vCode>=50 THEN RETURN 9; -- Контейнер
	      ELSE RETURN 6; -- Цистерна (в иных случаях)
		END CASE;
	  END IF;
	END IF;
	IF vRes=0 THEN
	  -- По умолчанию: цистерна
	  vRes:=6;
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то вид неопределен;
	RETURN 0;
  END IF;
END;

-- Проверить номер вагона
FUNCTION CHECK_NUM_CIST(pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
  b VARCHAR2(8);
  b1 NUMBER(1);
  c NUMBER;
  d NUMBER;
BEGIN
  IF pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка контейнерами, то проверку не производим
    RETURN 1;
  ELSIF pLOAD_TYPE_ID=1 THEN
    -- Если отгрузка Ж/Д транспортом
    b:=SUBSTR(pNUM_CIST,1,8);
    c:=0;
    d:=0;
    FOR i IN 1..8 LOOP
	  BEGIN
	    b1:=TO_NUMBER(SUBSTR(b,9-i,1));
	  EXCEPTION
	    WHEN OTHERS THEN
		  b1:=0;
	  END;
      c:=b1*IIFN(MOD(i,2)=1,1,2);
      d:=d+FLOOR(c/10)+MOD(c,10);
    END LOOP;
    RETURN IIFN(MOD(d,10)=0,1,0);
  ELSE
    -- Если другие виды транспорта - то проверку не производить;
	RETURN 1;
  END IF;
END;

-- Вернуть тип вагона по роду вагона
FUNCTION GET_KALIBR_BY_VAGONTYPE (pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN VARCHAR2 AS
  vRes KLS_CIST.KALIBR_ID%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка контейнерами, то возвращаем тип: КНТ
    RETURN 'КНТ';
  ELSIF pLOAD_TYPE_ID=1 THEN
    -- Определяем тип вагона по виду вагона
    CASE
	  WHEN pVAGONTYPE_ID=1 THEN RETURN 'БУН'; -- Бункер
	  WHEN pVAGONTYPE_ID=2 THEN RETURN 'КР'; -- Крытый вагон
	  WHEN pVAGONTYPE_ID=5 THEN RETURN 'ПВ'; -- Полувагон
	  WHEN pVAGONTYPE_ID=9 THEN RETURN 'КНТ'; -- Контейнер
	  ELSE RETURN NULL;
    END CASE;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то тип неопределен;
	RETURN NULL;
  END IF;
END;

-- Вернуть тип вагона
FUNCTION GET_KALIBR (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN VARCHAR2 AS
  vRes KLS_CIST.KALIBR_ID%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка контейнерами, то возвращаем тип: КНТ
    RETURN 'КНТ';
  ELSIF pLOAD_TYPE_ID=1 THEN
    -- Если отгрузка Ж/Д транспортом
	vRes:=NULL;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT KALIBR_ID INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=NULL;
	  END;
	END IF;
    IF vRes||' '=' ' THEN
	  -- Если вагон в справочнике не найден
      -- Определяем тип вагона по виду вагона
	  vRes:=GET_KALIBR_BY_VAGONTYPE(pLOAD_TYPE_ID, pVAGONTYPE_ID);
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то тип неопределен;
	RETURN NULL;
  END IF;
END;

-- Вернуть принадлежность к дорогам СНГ
FUNCTION GET_NCISTDOP (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
BEGIN
  RETURN 20;
END;

-- Вернуть вес вагона
FUNCTION GET_VES_CIST (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
  vRes KLS_CIST.VES_CIST%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=1 OR pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка Ж/Д транспортом или контейнерами
	vRes:=0;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT VES_CIST INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	    vRes:=NVL(vRes,0);
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=0;
	  END;
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то вес=0
	RETURN 0;
  END IF;
END;

-- Вернуть владельца вагона
FUNCTION GET_VAGOWNER (pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
  vRes KLS_CIST.VAGOWNER_ID%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=1 OR pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка Ж/Д транспортом или контейнерами
	vRes:=NULL;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT VAGOWNER_ID INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	    vRes:=NVL(vRes,0);
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=0;
	  END;
      IF vRes=0 THEN
        -- Если вагон в справочнике не найден
        -- Определяем владельца по номеру вагона
	    IF vNum>=50000000 AND vNum<=59999999 THEN
		  RETURN NULL; -- Какой-то собственный вагон
		ELSE
		  RETURN 3; -- Вагон ОАО "РЖД" (МПС)
		END IF;
	  END IF;
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то владелец вагона неопределен
	RETURN NULL;
  END IF;
END;

-- Вернуть грузоподъемность
FUNCTION GET_CAPACITY (pNUM_CIST VARCHAR2, pKALIBR_ID VARCHAR2 DEFAULT NULL, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN VARCHAR2 AS
  vRes KLS_CIST.CAPACITY%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=1 OR pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка Ж/Д транспортом или контейнерами
	vRes:=NULL;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT CAPACITY INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=NULL;
	  END;
	END IF;
    IF vRes||' '=' ' THEN
	  -- Если вагон в справочнике не найден
      -- Определяем грузоподъемность по типу вагона
	  vRes:=GET_CAPACITY_BY_KALIBR(pKALIBR_ID,pLOAD_TYPE_ID,pVAGONTYPE_ID);
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то грузоподъемность не определяем;
	RETURN NULL;
  END IF;
END;

-- Вернуть грузоподъемность по типу вагона
FUNCTION GET_CAPACITY_BY_KALIBR (pKALIBR_ID VARCHAR2, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER) RETURN VARCHAR2 AS
  vTmp NUMBER;
BEGIN
  SELECT VAGON_MAX_VES INTO vTmp
    FROM KLS_KALIBR
   WHERE ID=pKALIBR_ID
     AND ROWNUM=1;
  RETURN TO_CHAR(NVL(vTmp,0));
EXCEPTION
  WHEN OTHERS THEN
    RETURN '';
END;

-- Вернуть кол-во осей
FUNCTION GET_AXES (pNUM_CIST VARCHAR2, pKALIBR_ID VARCHAR2 DEFAULT NULL, pVES NUMBER DEFAULT 0, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
  vRes KLS_CIST.AXES%TYPE;
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка контейнерами, то возвращаем осей: 0
    RETURN 0;
  ELSIF pLOAD_TYPE_ID=1 THEN
    -- Если отгрузка Ж/Д транспортом
    IF NVL(pVES,0)>0 THEN
	  -- Если есть вес
      -- Определяем кол-во осей по весу
	  RETURN GET_AXES_BY_VES(pVES,pLOAD_TYPE_ID,pVAGONTYPE_ID);
	END IF;
	vRes:=0;
	vNum:=0;
	-- Преобразуем номер вагона в число
	BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
	END;
	-- Ищем информацию в справочнике
	IF vNum<>0 THEN
	  BEGIN
	    SELECT AXES INTO vRes
	      FROM KLS_CIST
	     WHERE NUM_CIST=vNum
	       AND ROWNUM=1;
		vRes:=NVL(vRes,0);
	  EXCEPTION
	    WHEN OTHERS THEN
	      vRes:=0;
	  END;
	END IF;
    IF vRes=0 THEN
	  -- Если вагон в справочнике не найден
      -- Определяем кол-во осей по типу вагона
	  vRes:=GET_AXES_BY_KALIBR(pKALIBR_ID,pLOAD_TYPE_ID,pVAGONTYPE_ID);
	END IF;
    RETURN vRes;
  ELSE
    -- Если другие виды транспорта - то осей 2;
	RETURN 2;
  END IF;
END;

-- Вернуть кол-во осей по типу вагона
FUNCTION GET_AXES_BY_KALIBR (pKALIBR_ID VARCHAR2, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER) RETURN NUMBER AS
  vTmp NUMBER;
BEGIN
  SELECT VAGON_AXES INTO vTmp
    FROM KLS_KALIBR
   WHERE ID=pKALIBR_ID
     AND ROWNUM=1;
  RETURN NVL(vTmp,4);
EXCEPTION
  WHEN OTHERS THEN
    RETURN 4;
END;

-- Вернуть кол-во осей по весу
FUNCTION GET_AXES_BY_VES (pVES NUMBER, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER) RETURN NUMBER AS
BEGIN
  IF NVL(pVES,0)>100 THEN
    RETURN 8;
  ELSE
    RETURN 4;
  END IF;
END;

-- Вренуть объем вагона по типу и взливу
FUNCTION GET_VOLUME (pKALIBR_ID VARCHAR2, pVZLIV NUMBER, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
  vTmp NUMBER;
BEGIN
  SELECT VOLUME INTO vTmp
    FROM KLS_VAGON_VZLIV
   WHERE KALIBR_ID=pKALIBR_ID
     AND VZLIV=pVZLIV
	 AND ROWNUM=1;
  RETURN NVL(vTmp,0);
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;



-- Вренуть предупреждения по вагону
FUNCTION GET_DENI_TXT(pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER DEFAULT 1, pVAGONTYPE_ID NUMBER DEFAULT 6) RETURN NUMBER AS
BEGIN
/*   PRIVATE deni_txt
  deni_txt=IsDeni(m.num_otgr)
  IF deni_txt<>''
    =mes_dial(7,'Внимание','По цистерне '+ALLT(m.num_otgr)+;
      ' есть предупреждение:'+deni_txt,1)
  ENDIF

  SELECT deni_otg
  SCAN FOR num_cist=VAL(m_num_otgr) AND beg_deni<=DATE() AND (EMPTY(end_deni) OR end_deni>=DATE())
    deni_txt=deni_txt+'\r  '+DTOC(deni_otg.beg_deni)+': '+ALLT(deni_otg.prim)
  ENDSCAN

  */
  RETURN '';
END;


-- Сохранить реквизит вагона в справочнике вагонов
PROCEDURE SET_CIST_PROPERTY(pCOMMIT NUMBER, pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER, pFIELD VARCHAR2, pVALUE VARCHAR2) AS
  vNum KLS_CIST.NUM_CIST%TYPE;
  vRow KLS_CIST%ROWTYPE;
  vAdd BOOLEAN;
BEGIN
  IF pLOAD_TYPE_ID=1 OR pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка Ж/Д транспортом или контейнерами
    vNum:=0;
    -- Преобразуем номер вагона в число
    BEGIN
	  vNum:=TO_NUMBER(pNUM_CIST);
    EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
    END;
    IF vNum<>0 THEN
	BEGIN
	  vAdd:=FALSE;
	  -- Значения по умолчанию
	  vRow.NUM_CIST:=vNum;
	  vRow.VAGONTYPE_ID:=6;
	  vRow.NCISTDOP:=20;
	  vRow.AXES:=4;
      -- Обновляем вагон
	  IF pFIELD='VAGONTYPE_ID' THEN
		vRow.VAGONTYPE_ID:=TO_NUMBER(pVALUE);
	    UPDATE KLS_CIST SET VAGONTYPE_ID=vRow.VAGONTYPE_ID WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='KALIBR_ID' THEN
		vRow.KALIBR_ID:=pVALUE;
	    UPDATE KLS_CIST SET KALIBR_ID=vRow.KALIBR_ID WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='TIP1' THEN
		vRow.TIP1:=pVALUE;
	    UPDATE KLS_CIST SET TIP1=vRow.TIP1 WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='CAPACITY' THEN
		vRow.CAPACITY:=pVALUE;
	    UPDATE KLS_CIST SET CAPACITY=vRow.CAPACITY WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='WES1' THEN
		vRow.WES1:=pVALUE;
	    UPDATE KLS_CIST SET WES1=vRow.WES1 WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='NCISTDOP' THEN
		vRow.NCISTDOP:=TO_NUMBER(pVALUE);
	    UPDATE KLS_CIST SET NCISTDOP=vRow.NCISTDOP WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='AXES' THEN
		vRow.AXES:=TO_NUMBER(pVALUE);
	    UPDATE KLS_CIST SET AXES=vRow.AXES WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='VES_CIST' THEN
		vRow.VES_CIST:=TO_NUMBER(pVALUE);
	    UPDATE KLS_CIST SET VES_CIST=vRow.VES_CIST WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='VAGOWNER_ID' THEN
		vRow.VAGOWNER_ID:=TO_NUMBER(pVALUE);
	    UPDATE KLS_CIST SET VAGOWNER_ID=vRow.VAGOWNER_ID WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSIF	pFIELD='PROD_ID_NPR' THEN
		vRow.PROD_ID_NPR:=pVALUE;
	    UPDATE KLS_CIST SET PROD_ID_NPR=vRow.PROD_ID_NPR WHERE NUM_CIST=vRow.NUM_CIST;
		vAdd:=SQL%NOTFOUND;
	  ELSE
	    NULL;
	  END IF;
	  IF vAdd THEN
	    -- Добавляем вагон
        INSERT INTO KLS_CIST (NUM_CIST,NCISTDOP,AXES,CAPACITY,WES1,VES_CIST,
	      VAGONTYPE_ID,KALIBR_ID,TIP1,VAGOWNER_ID,PROD_ID_NPR)
	    VALUES (vRow.NUM_CIST,vRow.NCISTDOP,vRow.AXES,vRow.CAPACITY,vRow.WES1,vRow.VES_CIST,
	      vRow.VAGONTYPE_ID,vRow.KALIBR_ID,vRow.TIP1,vRow.VAGOWNER_ID,vRow.PROD_ID_NPR);
	  END IF;
    EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;
	END IF;
  ELSE
    -- Если другие виды транспорта - ничего не делаем;
	NULL;
  END IF;
  -- COMMIT
  IF pCOMMIT=1 THEN
	COMMIT;
  END IF;
END;


-- Добавить вагон в справочник вагонов
PROCEDURE ADD_CIST (pCOMMIT NUMBER, pNUM_CIST VARCHAR2, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER, pKALIBR_ID VARCHAR2, pTIP1 VARCHAR2, pCAPACITY VARCHAR2,pWES1 VARCHAR2,
                    pNCISTDOP NUMBER, pAXES NUMBER, pVES_CIST NUMBER, pVAGOWNER_ID NUMBER, pPROD_ID_NPR VARCHAR2 DEFAULT NULL) AS
  vNum KLS_CIST.NUM_CIST%TYPE;
BEGIN
  IF pLOAD_TYPE_ID=1 OR pLOAD_TYPE_ID=6 THEN
    -- Если отгрузка Ж/Д транспортом или контейнерами
    vNum:=0;
    -- Преобразуем номер вагона в число
    BEGIN
  	  vNum:=TO_NUMBER(pNUM_CIST);
    EXCEPTION
	  WHEN OTHERS THEN
	    vNum:=0;
    END;
    IF vNum<>0 THEN
      -- Обновляем вагон
      UPDATE KLS_CIST SET (NCISTDOP,AXES,CAPACITY,WES1,VES_CIST,
	    VAGONTYPE_ID,KALIBR_ID,TIP1,VAGOWNER_ID,PROD_ID_NPR)=
        (SELECT pNCISTDOP,pAXES,pCAPACITY,pWES1,pVES_CIST,
	      pVAGONTYPE_ID,pKALIBR_ID,pTIP1,pVAGOWNER_ID,pPROD_ID_NPR FROM dual)
	   WHERE NUM_CIST=vNum;

	  IF SQL%NOTFOUND THEN
	    -- Добавляем вагон
        INSERT INTO KLS_CIST (NUM_CIST,NCISTDOP,AXES,CAPACITY,WES1,VES_CIST,
	      VAGONTYPE_ID,KALIBR_ID,TIP1,VAGOWNER_ID,PROD_ID_NPR)
	    VALUES (pNUM_CIST,pNCISTDOP,pAXES,pCAPACITY,pWES1,pVES_CIST,
	      pVAGONTYPE_ID,pKALIBR_ID,pTIP1,pVAGOWNER_ID,pPROD_ID_NPR);
	  END IF;
    END IF;
  ELSE
    -- Если другие виды транспорта - ничего не делаем;
	NULL;
  END IF;
  -- COMMIT
  IF pCOMMIT=1 THEN
    COMMIT;
  END IF;
END;

-- Информация о последнем грузе
FUNCTION LAST_PROD_ID_NPR (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2
AS
  vRes KVIT.PROD_ID_NPR%TYPE;
BEGIN
  vRes:='';
    
  -- Определяем продукт из последней отгрузки
  FOR lcur IN (SELECT /*+ RULE */ k.PROD_ID_NPR FROM KVIT k
               WHERE k.NUM_CIST=pNUM_CIST
			     AND k.DATE_OFORML<pDATE
			  ORDER BY k.DATE_OFORML DESC) LOOP
    vRes:=lcur.PROD_ID_NPR;
	EXIT;
  END LOOP;
  
  
  RETURN vRes;
END;

-- Информация о последнем отгрузке
FUNCTION LAST_PROD_DATE (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2
AS
  vRes VARCHAR2(15);
BEGIN
  vRes:='';
    
  -- Определяем продукт из последней отгрузки
  FOR lcur IN (SELECT /*+ RULE */ k.DATE_OTGR FROM KVIT k
               WHERE k.NUM_CIST=pNUM_CIST
			     AND k.DATE_OFORML<pDATE
			  ORDER BY k.DATE_OFORML DESC) LOOP
    vRes:=TO_CHAR(lcur.DATE_OTGR,'dd.mm.yyyy');
	EXIT;
  END LOOP;
  
  
  RETURN vRes;
END;

FUNCTION LAST_PROD_NAME (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2
AS
  vRes KLS_PROD.ABBR_NPR%TYPE;
  vIdNpr KLS_PROD.ID_NPR%TYPE;
BEGIN
  vIdNpr:=LAST_PROD_ID_NPR(pDATE,pNUM_CIST,pMESTO_ID,pLOAD_TYPE_ID);
  SELECT KLS_PROD.ABBR_NPR INTO vRes
    FROM KLS_PROD WHERE ID_NPR=vIdNpr;
  RETURN vRes;	
EXCEPTION 
  WHEN OTHERS THEN
    RETURN '';
END;

FUNCTION LAST_GRUZ (pDATE DATE,pNUM_CIST VARCHAR2,pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN VARCHAR2
AS
  vRes KLS_PROD.ABBR_NPR%TYPE;
  vIdNpr KLS_PROD.ID_NPR%TYPE;
BEGIN
  vIdNpr:=LAST_PROD_ID_NPR(pDATE,pNUM_CIST,pMESTO_ID,pLOAD_TYPE_ID);
  SELECT KLS_PROD.ABBR_NPR INTO vRes
    FROM KLS_PROD WHERE ID_NPR=vIdNpr;
  RETURN vRes;	
EXCEPTION 
  WHEN OTHERS THEN
    RETURN '';
END;

END;

/

--
-- FOR_DIAGRAM  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Diagram AS

-- Очистка таблицы DIAGRAM для текущего пользователя
PROCEDURE EMPTY_DIAGRAM IS
BEGIN
  DELETE FROM DIAGRAM 
  WHERE TERMINAL_NAME = For_Init.GetCurrTerm
    AND OSUSER_NAME = For_Init.GetCurrUser;

  COMMIT;
END;

-- Отгрузка с УНП по месяцам
PROCEDURE UNP_MON (DATE_BEG VARCHAR2, DATE_END VARCHAR2) IS
BEGIN
  EMPTY_DIAGRAM;
     
  INSERT INTO DIAGRAM (COL_SORT,COL_X1_NAME,COL_X1_VALUE,COL_Y1_NAME,COL_Y1_VALUE,
       COL_Y2_NAME,COL_Y2_VALUE,COL_Y3_NAME,COL_Y3_VALUE,COL_Y4_NAME,COL_Y4_VALUE,TITLE)
  SELECT
    TO_CHAR(KVIT.DATE_OTGR,'yyyymm') AS COL_SORT,  
    'Период' AS COL_X1_NAME,
    TO_CHAR(KVIT.DATE_OTGR,'Month yyyy') AS COL_X1_VALUE,  
    'Мазут' AS COL_Y1_NAME,
    SUM(DECODE(SUBSTR(KVIT.PROD_ID_NPR,1,3),'115',KVIT.ves/1000,0)) AS COL_Y1_VALUE,
    'Дизельное топливо' AS COL_Y2_NAME,
    SUM(DECODE(SUBSTR(KVIT.PROD_ID_NPR,1,3),'104',KVIT.ves/1000,0)) AS COL_Y2_VALUE,
    'Бензин А-76 (АИ-80)' AS COL_Y3_NAME,
    SUM(DECODE(SUBSTR(KVIT.PROD_ID_NPR,1,4),'1030',KVIT.ves/1000,0)) AS COL_Y3_VALUE,
    'Бензин АИ-92' AS COL_Y4_NAME,
    SUM(DECODE(SUBSTR(KVIT.PROD_ID_NPR,1,4),'1031',KVIT.ves/1000,'1032',KVIT.ves/1000,0)) AS COL_Y4_VALUE,
	'с '||DATE_BEG||' по '||DATE_END
  FROM KVIT
  WHERE date_otgr BETWEEN TO_DATE(DATE_BEG,'dd.mm.yyyy') AND TO_DATE(DATE_END,'dd.mm.yyyy')
  GROUP BY
    TO_CHAR(KVIT.DATE_OTGR,'yyyymm'),  
    TO_CHAR(KVIT.DATE_OTGR,'Month yyyy');
	
  COMMIT;
  
  UPDATE V_DIAGRAM SET 
    COL_Y1_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y1_VALUE))),
    COL_Y2_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y2_VALUE))),
    COL_Y3_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y3_VALUE))),
    COL_Y4_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y4_VALUE)));
 	
  COMMIT;
  	  
END; 
   				   
-- Движение товара по месяцам за последние 4 года (по данным КО)
PROCEDURE OPER_MON_KONS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2, TIP_OP VARCHAR2, IS_SUM NUMBER) IS
  nFILIAL NUMBER;
  nORG_KIND_GRP NUMBER;
  nAZC NUMBER;
  cPROD_GR VARCHAR2(30);
  nPROD NUMBER;
  dDATE_BEG DATE;
  dDATE_END DATE;
  nTIP_OP NUMBER;
  nIS_SUM NUMBER;
  CNT_YEARS NUMBER;
  nYEAR_BEG NUMBER;
  cPRIM VARCHAR2(200);
  cTMP VARCHAR2(200);
  cZPT VARCHAR2(1);
  cur_month NUMBER;
  last_oper DATE;
BEGIN
  EMPTY_DIAGRAM;
  
  cnt_years:=7; -- за последние 7 лет
  BEGIN
    SELECT MAX(date_oper) INTO last_oper FROM OBOROT_KONS;
  EXCEPTION
    WHEN OTHERS THEN
	  last_oper:=TO_DATE(DATE_END,'dd.mm.yyyy');
  END;	  	
  cur_month:=TO_NUMBER(TO_CHAR(last_oper,'MM')); -- текущий месяц
  
  dDATE_END:=TRUNC(ADD_MONTHS(TO_DATE(date_end,'dd.mm.yyyy'),12),'yyyy')-1;
  dDATE_BEG:=ADD_MONTHS(dDATE_END,-cnt_years*12)+1;
  nYEAR_BEG:=TO_NUMBER(TO_CHAR(dDATE_BEG,'yyyy'));
  cPRIM:='';
  cZPT:='';
  
  
  IF FILIAL<>'*' AND FILIAL IS NOT NULL THEN
    nFILIAL:=TO_NUMBER(FILIAL);
	BEGIN
	  SELECT NAME INTO cTMP FROM ORG_STRUCTURE WHERE ID=nFILIAL;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Филиал: '||cTMP||' ';
	cZPT:=';';	  
  ELSE
    nFILIAL:=NULL;
	cPRIM:=cPRIM||cZPT||' Все филиалы ';	  
	cZPT:=';';	  
  END IF;

  IF ORG_KIND_GRP<>'*' AND ORG_KIND_GRP IS NOT NULL THEN
    nORG_KIND_GRP:=TO_NUMBER(ORG_KIND_GRP);
	BEGIN
	  SELECT MAX(GROUP_KIND_NAME) INTO cTMP FROM KLS_ORG_KIND WHERE GROUP_KIND_ID=nORG_KIND_GRP;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Тип объекта: '||cTMP||' ';
	cZPT:=';';	  
  ELSE
    nORG_KIND_GRP:=NULL;
	cPRIM:=cPRIM||cZPT||' Все типы объектов ';	  
	cZPT:=';';	  
  END IF;
  
  IF AZC<>'*' AND AZC IS NOT NULL THEN
    nAZC:=TO_NUMBER(AZC);
	BEGIN
	  SELECT NAME INTO cTMP FROM ORG_STRUCTURE WHERE ID=nAZC;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Подразделение: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    nAZC:=NULL;
	cPRIM:=cPRIM||cZPT||' Все подразделения ';	  
	cZPT:=';';	  
  END IF;

  IF TIP_OP<>'*' AND TIP_OP IS NOT NULL THEN
    nTIP_OP:=TO_NUMBER(TIP_OP);
  ELSE
    nTIP_OP:=NULL;
  END IF;

  nIS_SUM:=IS_SUM;
  
  IF PROD_GR<>'*' AND PROD_GR IS NOT NULL THEN
    cPROD_GR:=PROD_GR;
	BEGIN
	  SELECT MAX(NAME_GLOBAL_GR) INTO cTMP FROM KLS_PROD_GR_KONS WHERE ID_GLOBAL_GR=cPROD_GR;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Группа продуктов: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    cPROD_GR:=NULL;
  END IF;

  IF PROD<>'*' AND PROD IS NOT NULL THEN
    nPROD:=TO_NUMBER(PROD);
	BEGIN
	  SELECT GROUP_NAME INTO cTMP FROM KLS_PROD_GROUPS WHERE ID=nPROD;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Продукт: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    nPROD:=NULL;
  END IF;
  
  IF cPROD_GR IS NULL AND nPROD IS NULL THEN
	cPRIM:=cPRIM||cZPT||' Все продукты ';	  
	cZPT:=';';	  
  END IF;  

  IF nPROD=176 THEN
    -- Фасовка + сопутствующие

  INSERT INTO DIAGRAM (COL_SORT,COL_X1_NAME,COL_X1_VALUE,COL_Y1_NAME,COL_Y1_VALUE,
       COL_Y2_NAME,COL_Y2_VALUE,COL_Y3_NAME,COL_Y3_VALUE,COL_Y4_NAME,COL_Y4_VALUE,
       COL_Y5_NAME,COL_Y5_VALUE,COL_Y6_NAME,COL_Y6_VALUE,COL_Y7_NAME,COL_Y7_VALUE,TITLE, PRIM)
  SELECT
    month_num AS COL_SORT,  
    'Месяц' AS COL_X1_NAME,
    month_str AS COL_X1_VALUE,  
    TO_CHAR(nYEAR_BEG+0) ||' год' AS COL_Y1_NAME, -- 1 год
    SUM(DECODE(year_num,nYEAR_BEG+0,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y1_VALUE,
    TO_CHAR(nYEAR_BEG+1) ||' год' AS COL_Y2_NAME, -- 2 год
    SUM(DECODE(year_num,nYEAR_BEG+1,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y2_VALUE,
    TO_CHAR(nYEAR_BEG+2) ||' год' AS COL_Y3_NAME, -- 3 год
    SUM(DECODE(year_num,nYEAR_BEG+2,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y3_VALUE,
    TO_CHAR(nYEAR_BEG+3) ||' год' AS COL_Y4_NAME, -- 4 год
    SUM(DECODE(year_num,nYEAR_BEG+3,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y4_VALUE,
    TO_CHAR(nYEAR_BEG+4) ||' год' AS COL_Y5_NAME, -- 5 год
    SUM(DECODE(year_num,nYEAR_BEG+4,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y5_VALUE,
    TO_CHAR(nYEAR_BEG+5) ||' год' AS COL_Y6_NAME, -- 6 год
    SUM(DECODE(year_num,nYEAR_BEG+5,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y6_VALUE,
    TO_CHAR(nYEAR_BEG+6) ||' год' AS COL_Y7_NAME, -- 7 год
    SUM(DECODE(year_num,nYEAR_BEG+6,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y7_VALUE,
	' на '||DATE_END,
	cPRIM
  FROM 
  (
    -- ТТХ, фасовка, налив
    SELECT
      TO_NUMBER(TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYY')) AS Year_num,
      TO_CHAR(OBOROT_KONS.DATE_OPER,'MM') AS month_num,
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month') AS month_str,  
      SUM(OBOROT_KONS.KG/1000) AS Ves,
      SUM(DECODE(OBOROT_KONS.TIP_OP_ID,1,OBOROT_KONS.SUMMA_POKUP,2,OBOROT_KONS.SUMMA_REALIZ,
          3,OBOROT_KONS.SUMMA_REALIZ,4,OBOROT_KONS.SUMMA_POKUP,0)/1000) AS Summa
    FROM OBOROT_KONS, KLS_PROD_KONS,KLS_PROD_GR_KONS,ORG_STRUCTURE,KLS_ORG_KIND,
	     KLS_PROD_KONS_GROUPS_DESC grp
    WHERE OBOROT_KONS.TIP_OP_ID=nTIP_OP -- тип операции
	  AND OBOROT_KONS.TIP_REAL_ID<>2
	  AND OBOROT_KONS.VID_REAL_ID<>5
	  AND OBOROT_KONS.PROD_KONS_ID=KLS_PROD_KONS.ID
	  AND KLS_PROD_KONS.ID = grp.PROD_KONS_ID
	  AND KLS_PROD_KONS.GR_KONS_ID=KLS_PROD_GR_KONS.ID_GR
	  AND OBOROT_KONS.ORG_STRU_ID=ORG_STRUCTURE.ID
	  AND ORG_STRUCTURE.ORG_KIND_ID=KLS_ORG_KIND.ID
	  AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта	 
	  AND OBOROT_KONS.DATE_OPER>dDATE_BEG-1 
	  AND OBOROT_KONS.DATE_OPER<dDATE_END+1
	  AND (OBOROT_KONS.FILIAL_ID=NVL(nFILIAL,OBOROT_KONS.FILIAL_ID)) -- филиал 
	  AND (OBOROT_KONS.ORG_STRU_ID=NVL(nAZC,OBOROT_KONS.ORG_STRU_ID)) -- подразделение (АЗС)	 
	  AND (KLS_PROD_GR_KONS.ID_GLOBAL_GR=NVL(cPROD_GR,KLS_PROD_GR_KONS.ID_GLOBAL_GR)) -- группа продуктов
	  AND (CASE
	         WHEN nPROD=176 AND grp.PROD_GROUPS_ID=161 THEN nPROD -- ТТХ как фасовка
--	         WHEN nPROD=176 AND grp.PROD_GROUPS_ID=280 THEN nPROD -- Битум как фасовка
--	         WHEN nPROD=176 AND grp.PROD_GROUPS_ID=201 THEN nPROD -- Битум как фасовка
	         WHEN nPROD=176 AND grp.PROD_GROUPS_ID=279 THEN nPROD -- прочие как фасовка
	         WHEN nPROD=176 AND grp.PROD_GROUPS_ID=176 THEN nPROD -- фасовка
			 ELSE grp.PROD_GROUPS_ID
		   END)=NVL(nPROD,grp.PROD_GROUPS_ID) -- продукт
--	  AND (OBOROT_KONS.PROD_KONS_ID=NVL(cPROD,OBOROT_KONS.PROD_KONS_ID)) -- продукт
    GROUP BY 
      TO_NUMBER(TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYY')),
      TO_CHAR(OBOROT_KONS.DATE_OPER,'MM'),
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month')
    UNION ALL	    
	-- Сопутствующие товары+Битум
    select 
      TO_NUMBER(TO_CHAR(A.DOCDATE,'YYYY')) AS Year_num,
      TO_CHAR(a.DOCDATE,'MM') AS month_num,
      TO_CHAR(a.DOCDATE,'Month') AS month_str,  
      0 AS Ves,
      SUM(a.SUMMA/1000) AS Summa
    from vaneev.v_soputs_psv@ORACLE.WORLD A, PARUS_STORE_ORG_STRU_LINK B, V_ORG_STRUCTURE C, KLS_ORG_KIND
   WHERE A.docdate>dDATE_BEG-1 
     AND A.docdate<dDATE_END+1
     AND nTIP_OP=3
	 and nPROD=176
 	 and a.STORE_RN=B.STORE_RN
	 and b.ORG_STRU_ID=C.ID
     AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
	 AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
     AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- филиал 
	 AND (B.ORG_STRU_ID=NVL(nAZC,B.ORG_STRU_ID)) -- подразделение (АЗС)	 
   GROUP BY
     TO_NUMBER(TO_CHAR(A.DOCDATE,'YYYY')),
     TO_CHAR(a.DOCDATE,'MM'),
     TO_CHAR(a.DOCDATE,'Month')	  
  ) oborot 
  GROUP BY
    month_num,  
    month_str;  

  ELSE
    -- Без сопутствующих	 
  INSERT INTO DIAGRAM (COL_SORT,COL_X1_NAME,COL_X1_VALUE,COL_Y1_NAME,COL_Y1_VALUE,
       COL_Y2_NAME,COL_Y2_VALUE,COL_Y3_NAME,COL_Y3_VALUE,COL_Y4_NAME,COL_Y4_VALUE,
       COL_Y5_NAME,COL_Y5_VALUE,COL_Y6_NAME,COL_Y6_VALUE,COL_Y7_NAME,COL_Y7_VALUE,TITLE, PRIM)
  SELECT
    month_num AS COL_SORT,  
    'Месяц' AS COL_X1_NAME,
    month_str AS COL_X1_VALUE,  
    TO_CHAR(nYEAR_BEG+0) ||' год' AS COL_Y1_NAME, -- 1 год
    SUM(DECODE(year_num,nYEAR_BEG+0,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y1_VALUE,
    TO_CHAR(nYEAR_BEG+1) ||' год' AS COL_Y2_NAME, -- 2 год
    SUM(DECODE(year_num,nYEAR_BEG+1,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y2_VALUE,
    TO_CHAR(nYEAR_BEG+2) ||' год' AS COL_Y3_NAME, -- 3 год
    SUM(DECODE(year_num,nYEAR_BEG+2,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y3_VALUE,
    TO_CHAR(nYEAR_BEG+3) ||' год' AS COL_Y4_NAME, -- 4 год
    SUM(DECODE(year_num,nYEAR_BEG+3,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y4_VALUE,
    TO_CHAR(nYEAR_BEG+4) ||' год' AS COL_Y5_NAME, -- 5 год
    SUM(DECODE(year_num,nYEAR_BEG+4,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y5_VALUE,
    TO_CHAR(nYEAR_BEG+5) ||' год' AS COL_Y6_NAME, -- 6 год
    SUM(DECODE(year_num,nYEAR_BEG+5,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y6_VALUE,
    TO_CHAR(nYEAR_BEG+6) ||' год' AS COL_Y7_NAME, -- 7 год
    SUM(DECODE(year_num,nYEAR_BEG+6,DECODE(nIS_SUM,1,Summa,Ves),0)) AS COL_Y7_VALUE,
	' на '||DATE_END,
	cPRIM
  FROM 
  (
    -- ТТХ и фасовка
    SELECT
      TO_NUMBER(TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYY')) AS Year_num,
      TO_CHAR(OBOROT_KONS.DATE_OPER,'MM') AS month_num,
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month') AS month_str,  
      SUM(OBOROT_KONS.KG/1000) AS Ves,
      SUM(DECODE(OBOROT_KONS.TIP_OP_ID,1,OBOROT_KONS.SUMMA_POKUP,2,OBOROT_KONS.SUMMA_REALIZ,
          3,OBOROT_KONS.SUMMA_REALIZ,4,OBOROT_KONS.SUMMA_POKUP,0)/1000) AS Summa
    FROM OBOROT_KONS, KLS_PROD_KONS,KLS_PROD_GR_KONS,ORG_STRUCTURE,KLS_ORG_KIND,
	     KLS_PROD_KONS_GROUPS_DESC grp
    WHERE OBOROT_KONS.TIP_OP_ID=nTIP_OP -- тип операции
	  AND OBOROT_KONS.TIP_REAL_ID<>2
	  AND OBOROT_KONS.VID_REAL_ID<>5
	  AND OBOROT_KONS.PROD_KONS_ID=KLS_PROD_KONS.ID
	  AND KLS_PROD_KONS.ID = grp.PROD_KONS_ID
	  AND KLS_PROD_KONS.GR_KONS_ID=KLS_PROD_GR_KONS.ID_GR
	  AND OBOROT_KONS.ORG_STRU_ID=ORG_STRUCTURE.ID
	  AND ORG_STRUCTURE.ORG_KIND_ID=KLS_ORG_KIND.ID
	  AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта	 
	  AND OBOROT_KONS.DATE_OPER>dDATE_BEG-1 
	  AND OBOROT_KONS.DATE_OPER<dDATE_END+1
	  AND (OBOROT_KONS.FILIAL_ID=NVL(nFILIAL,OBOROT_KONS.FILIAL_ID)) -- филиал 
	  AND (OBOROT_KONS.ORG_STRU_ID=NVL(nAZC,OBOROT_KONS.ORG_STRU_ID)) -- подразделение (АЗС)	 
	  AND (KLS_PROD_GR_KONS.ID_GLOBAL_GR=NVL(cPROD_GR,KLS_PROD_GR_KONS.ID_GLOBAL_GR)) -- группа продуктов
	  AND grp.PROD_GROUPS_ID=NVL(nPROD,grp.PROD_GROUPS_ID) -- продукт
--	  AND (OBOROT_KONS.PROD_KONS_ID=NVL(cPROD,OBOROT_KONS.PROD_KONS_ID)) -- продукт
    GROUP BY 
      TO_NUMBER(TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYY')),
      TO_CHAR(OBOROT_KONS.DATE_OPER,'MM'),
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month')
  ) oborot 
  GROUP BY
    month_num,  
    month_str;  

  END IF;
  	
  COMMIT;
  
  UPDATE V_DIAGRAM SET 
    COL_Y1_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y1_VALUE))),
    COL_Y2_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y2_VALUE))),
    COL_Y3_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y3_VALUE))),
    COL_Y4_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y4_VALUE))),
    COL_Y5_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y5_VALUE))),
    COL_Y6_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y6_VALUE))),
    COL_Y7_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y7_VALUE)));

  -- Избавляемся от еще не наступивших месяцев	
  UPDATE V_DIAGRAM SET COL_Y7_NAME=NULL, COL_Y7_VALUE=NULL 
   WHERE col_sort>LPAD(TO_CHAR(cur_month),2,'0');	
 	
  COMMIT;
  
END;

-- Реализовано с НБ/АЗС по месяцам в тн за последние 4 года (по данным КО)
PROCEDURE REALIZ_MON_TON (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2) IS
BEGIN
  OPER_MON_KONS(DATE_BEG,DATE_END,FILIAL, ORG_KIND_GRP,AZC,PROD_GR,PROD,'3',0);
END;

-- Реализовано с НБ/АЗС по месяцам в тыс.руб. за последние 4 года (по данным КО)
PROCEDURE REALIZ_MON_SUM (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2) IS
BEGIN
  OPER_MON_KONS(DATE_BEG,DATE_END,FILIAL, ORG_KIND_GRP,AZC,PROD_GR,PROD,'3',1);
END;

-- Реализовано с НБ/АЗС фасовки по месяцам в тыс.руб. за последние 4 года (по данным КО)
PROCEDURE REALIZ_MON_SUM_FAS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2) IS
BEGIN
  OPER_MON_KONS(DATE_BEG,DATE_END,FILIAL, ORG_KIND_GRP,AZC,'*',176,'3',1);
END;

-- Сведения о резервуарном парке УНП
PROCEDURE UNP_REZ (Date# VARCHAR2, NPR_GROUP# VARCHAR2, PROD# VARCHAR2) IS
  LastDay VARCHAR2(30);
BEGIN
  EMPTY_DIAGRAM;
  
  BEGIN
    SELECT TO_CHAR(MAX(DATEUPLOAD),'dd.mm.yyyy hh24:mi:ss') INTO LastDay
	  FROM arc_rez 
	 WHERE arc_rez.DATEUPLOAD<=TO_DATE(DATE#,'dd.mm.yyyy hh24:mi:ss')
	   AND arc_rez.ORG_STRU_ID=1;
  EXCEPTION 
    WHEN OTHERS THEN
	  LastDay:=DATE#;
  END;	  

  INSERT INTO DIAGRAM (COL_SORT,COL_X1_NAME,COL_X1_VALUE,COL_Y1_NAME,COL_Y1_VALUE,
       COL_Y2_NAME,COL_Y2_VALUE,COL_Y3_NAME,COL_Y3_VALUE,COL_Y4_NAME,COL_Y4_VALUE,TITLE)
  SELECT
    A.REZ_NUM || A.NAME_NPR  AS COL_SORT,  
    'Нефтепродукт/резервуар' AS COL_X1_NAME,
    'Рез № ' || A.REZ_NUM || ' (' || A.NAME_NPR || ')' AS COL_X1_VALUE,  
    'Мертвые' AS COL_Y1_NAME,
    DECODE(SIGN(A.TOVAR-NVL(B.VES,0)),-1,A.DEAD+A.TOVAR-NVL(B.VES,0),A.DEAD) AS COL_Y1_VALUE,
    'Товар' AS COL_Y2_NAME,
    DECODE(SIGN(A.TOVAR-NVL(B.VES,0)),-1,0,A.TOVAR-NVL(B.VES,0)) AS COL_Y2_VALUE,
    'Компонент' AS COL_Y3_NAME,
    A.COMPONENT AS COL_Y3_VALUE,
    'Свободная емкость' AS COL_Y4_NAME,
    DECODE(SIGN(A.MAX_VOL-A.EMPTY-NVL(B.VES,0)),-1,A.MAX_VOL,A.EMPTY+NVL(B.VES,0)) AS COL_Y4_VALUE,
	'на  '||DATE#
  FROM
   ( /* Данные по резервуарам */	
    SELECT /*+ RULE */
      arc_rez.REZ_NUM, 
	  kls_prod.ID_NPR,
	  kls_prod.NAME_NPR,
  	  SUM(DECODE(SIGN(arc_rez.DEAD_VOL-arc_rez.VOL),1,arc_rez.VOL,arc_rez.DEAD_VOL)) as DEAD,
	  SUM(DECODE(arc_rez.AR_TOV_ID,1,DECODE(SIGN(arc_rez.VOL-arc_rez.DEAD_VOL),1,arc_rez.VOL-arc_rez.DEAD_VOL,0),0)) as TOVAR,
	  SUM(DECODE(arc_rez.AR_TOV_ID,1,0,DECODE(SIGN(arc_rez.VOL-arc_rez.DEAD_VOL),1,arc_rez.VOL-arc_rez.DEAD_VOL,0))) as COMPONENT,
	  SUM(DECODE(SIGN(arc_rez.MAX_VOL-arc_rez.VOL),1,arc_rez.MAX_VOL-arc_rez.VOL,0)) as EMPTY, 	  
	  SUM(arc_rez.MAX_VOL) as MAX_VOL 	  
    FROM arc_rez,kls_prod
    WHERE arc_rez.PROD_ID_NPR=kls_prod.ID_NPR
      and kls_prod.ID_GROUP_NPR=DECODE(LTRIM(RTRIM(NPR_GROUP#)),'*',kls_prod.ID_GROUP_NPR,NPR_GROUP#)
      and kls_prod.ID_NPR=DECODE(LTRIM(RTRIM(PROD#)),'*',kls_prod.ID_NPR,PROD#)
      and arc_rez.DATEUPLOAD=TO_DATE(LastDay,'dd.mm.yyyy hh24:mi:ss')
      and arc_rez.ORG_STRU_ID=1
    GROUP BY 	  
      arc_rez.REZ_NUM, 
	  kls_prod.ID_NPR,
	  kls_prod.NAME_NPR
   ) A,
   ( /* Отгрузка */ 
    SELECT /*+ RULE */
      kls_pasp.REZ_NUM, 
	  kls_prod.ID_NPR,
	  SUM(kvit.ves_brutto) as VES
    FROM kvit,kls_prod,kls_pasp
    WHERE kvit.PROD_ID_NPR=kls_prod.ID_NPR
      and kls_prod.ID_GROUP_NPR=DECODE(LTRIM(RTRIM(NPR_GROUP#)),'*',kls_prod.ID_GROUP_NPR,NPR_GROUP#)
      and kls_prod.ID_NPR=DECODE(LTRIM(RTRIM(PROD#)),'*',kls_prod.ID_NPR,PROD#)
      and kvit.DATE_OFORML>=TO_DATE(LastDay,'dd.mm.yyyy hh24:mi:ss')
      and kvit.DATE_OFORML<TO_DATE(DATE#,'dd.mm.yyyy hh24:mi:ss')
      and kvit.pasp_id=kls_pasp.id(+)
    GROUP BY 	  
      kls_pasp.REZ_NUM, 
      kls_prod.ID_NPR
   ) B
   WHERE A.REZ_NUM=B.REZ_NUM(+)
     AND A.ID_NPR=B.ID_NPR(+); 	
	
  COMMIT;
  
  UPDATE V_DIAGRAM SET 
    COL_Y1_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y1_VALUE))),
    COL_Y2_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y2_VALUE))),
    COL_Y3_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y3_VALUE))),
    COL_Y4_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y4_VALUE)));
 	
  COMMIT;
  
END;

-- Планирование объемов реализации АЗС (по данным КО)
PROCEDURE PLAN_REALIZ_AZS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2) IS
  nFILIAL NUMBER;
  nORG_KIND_GRP NUMBER;
  nAZC NUMBER;
  cPROD_GR VARCHAR2(30);
  nPROD NUMBER;
  dDATE_BEG DATE;
  dDATE_END DATE;
  dDATE_START DATE;
  cPRIM VARCHAR2(200);
  cTMP VARCHAR2(200);
  cZPT VARCHAR2(1);
  vCOL_Y2_VALUE VARCHAR2(50);
  vCOL_Y5_VALUE VARCHAR2(50);
  vCOL_Y8_VALUE VARCHAR2(50);
  vCOL_Y11_VALUE VARCHAR2(50);
  vCOL_Y14_VALUE VARCHAR2(50);
  vCOL_Y17_VALUE VARCHAR2(50);
  vCOL_Y3_VALUE VARCHAR2(50);
  vCOL_Y6_VALUE VARCHAR2(50);
  vCOL_Y9_VALUE VARCHAR2(50);
  vCOL_Y12_VALUE VARCHAR2(50);
  vCOL_Y15_VALUE VARCHAR2(50);
  vCOL_Y18_VALUE VARCHAR2(50);
  
  cur_month VARCHAR2(10);
  last_oper DATE;

  PrevMon VARCHAR2(50);
  PrevYear VARCHAR2(50);
BEGIN
  EMPTY_DIAGRAM;
  
  dDATE_END:=LAST_DAY(TO_DATE(date_end,'dd.mm.yyyy')); -- округляем даты
  dDATE_BEG:=TRUNC(TO_DATE(date_beg,'dd.mm.yyyy'),'MONTH'); -- округляем даты
  dDATE_START:=ADD_MONTHS(dDATE_BEG,-12); -- отбираем данные на 1 год ранее чем запрошено (для расчета %)

  BEGIN
    SELECT MAX(date_oper) INTO last_oper FROM OBOROT_KONS;
  EXCEPTION
    WHEN OTHERS THEN
	  last_oper:=TO_DATE(DATE_END,'dd.mm.yyyy');
  END;	  	
  cur_month:=TO_CHAR(last_oper,'YYYYMM'); -- текущий месяц

  cPRIM:='';
  cZPT:='';
  
  IF FILIAL<>'*' AND FILIAL IS NOT NULL THEN
    nFILIAL:=TO_NUMBER(FILIAL);
	BEGIN
	  SELECT NAME INTO cTMP FROM ORG_STRUCTURE WHERE ID=nFILIAL;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Филиал: '||cTMP||' ';
	cZPT:=';';	  
  ELSE
    nFILIAL:=NULL;
	cPRIM:=cPRIM||cZPT||' Все филиалы ';	  
	cZPT:=';';	  
  END IF;

  IF ORG_KIND_GRP<>'*' AND ORG_KIND_GRP IS NOT NULL THEN
    nORG_KIND_GRP:=TO_NUMBER(ORG_KIND_GRP);
	BEGIN
	  SELECT MAX(GROUP_KIND_NAME) INTO cTMP FROM KLS_ORG_KIND WHERE GROUP_KIND_ID=nORG_KIND_GRP;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Тип объекта: '||cTMP||' ';
	cZPT:=';';	  
  ELSE
    nORG_KIND_GRP:=NULL;
	cPRIM:=cPRIM||cZPT||' Все типы объектов ';	  
	cZPT:=';';	  
  END IF;
  
  IF AZC<>'*' AND AZC IS NOT NULL THEN
    nAZC:=TO_NUMBER(AZC);
	BEGIN
	  SELECT NAME INTO cTMP FROM ORG_STRUCTURE WHERE ID=nAZC;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Подразделение: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    nAZC:=NULL;
	cPRIM:=cPRIM||cZPT||' Все подразделения ';	  
	cZPT:=';';	  
  END IF;

  IF PROD_GR<>'*' AND PROD_GR IS NOT NULL THEN
    cPROD_GR:=PROD_GR;
	BEGIN
	  SELECT MAX(NAME_GLOBAL_GR) INTO cTMP FROM KLS_PROD_GR_KONS WHERE ID_GLOBAL_GR=cPROD_GR;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Группа продуктов: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    cPROD_GR:=NULL;
  END IF;

  IF PROD<>'*' AND PROD IS NOT NULL THEN
    nPROD:=TO_NUMBER(PROD);
	BEGIN
	  SELECT GROUP_NAME INTO cTMP FROM KLS_PROD_GROUPS WHERE ID=nPROD;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Продукт: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    nPROD:=NULL;
  END IF;
  
  IF cPROD_GR IS NULL AND nPROD IS NULL THEN
	cPRIM:=cPRIM||cZPT||' Все продукты ';	  
	cZPT:=';';	  
  END IF;  


  INSERT INTO DIAGRAM (COL_SORT,COL_X1_NAME,COL_X1_VALUE,COL_Y1_NAME,COL_Y1_VALUE,COL_Y2_NAME,COL_Y3_NAME,
       COL_Y4_NAME,COL_Y4_VALUE,COL_Y5_NAME,COL_Y6_NAME,COL_Y7_NAME,COL_Y7_VALUE,COL_Y8_NAME,COL_Y9_NAME,
	   COL_Y10_NAME,COL_Y10_VALUE,COL_Y11_NAME,COL_Y12_NAME,COL_Y13_NAME,COL_Y13_VALUE,COL_Y14_NAME,COL_Y15_NAME,
	   COL_Y16_NAME,COL_Y16_VALUE,COL_Y17_NAME,COL_Y18_NAME,TITLE,PRIM,VIEW_ROW)
  SELECT
    month_num AS COL_SORT,  
    'Месяц' AS COL_X1_NAME,
    month_str AS COL_X1_VALUE,  
    'АИ-98' AS COL_Y1_NAME, 
    SUM(ves98) AS COL_Y1_VALUE,
    '% к предыдущему месяцу' AS COL_Y2_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y3_NAME, 
    'АИ-95' AS COL_Y4_NAME, 
    SUM(ves95) AS COL_Y4_VALUE,
    '% к предыдущему месяцу' AS COL_Y5_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y6_NAME, 
    'АИ-92' AS COL_Y7_NAME, 
    SUM(ves92) AS COL_Y7_VALUE,
    '% к предыдущему месяцу' AS COL_Y8_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y9_NAME, 
    'АИ-80' AS COL_Y10_NAME, 
    SUM(ves80) AS COL_Y10_VALUE,
    '% к предыдущему месяцу' AS COL_Y11_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y12_NAME, 
    'ДТ' AS COL_Y13_NAME, 
    SUM(dt) AS COL_Y13_VALUE,
    '% к предыдущему месяцу' AS COL_Y14_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y15_NAME, 
    'ГАЗ' AS COL_Y16_NAME, 
    SUM(GAS) AS COL_Y16_VALUE,
    '% к предыдущему месяцу' AS COL_Y17_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y18_NAME, 
	' на '||DATE_END,
	cPRIM,
	VIEW_ROW
  FROM 
  (
    SELECT
	  (CASE WHEN OBOROT_KONS.DATE_OPER>dDATE_BEG-1 THEN 1 ELSE 0 END) as VIEW_ROW, 
      TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYYMM') AS month_num,
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month YY') AS month_str,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR='АИ-98' THEN OBOROT_KONS.KG/1000
			ELSE 0
		  END),0) AS Ves98,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR='АИ-95' THEN OBOROT_KONS.KG/1000
			ELSE 0
		  END),0) AS Ves95,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR='АИ-92' THEN OBOROT_KONS.KG/1000
			ELSE 0
		  END),0) AS Ves92,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR='АИ-80' THEN OBOROT_KONS.KG/1000
			ELSE 0
		  END),0) AS Ves80,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR='ДТ' THEN OBOROT_KONS.KG/1000
			ELSE 0
		  END),0) AS DT,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR='ГАЗ' THEN OBOROT_KONS.KG/1000
			ELSE 0
		  END),0) AS GAS
    FROM OBOROT_KONS, KLS_PROD_KONS,KLS_PROD_GR_KONS,ORG_STRUCTURE,KLS_ORG_KIND,
	     KLS_PROD_KONS_GROUPS_DESC grp9, KLS_PROD_GR2GR_DESC grp11, KLS_PROD_GROUPS grp 
    WHERE OBOROT_KONS.TIP_OP_ID=3
	  AND OBOROT_KONS.TIP_REAL_ID<>2 
	  AND OBOROT_KONS.VID_REAL_ID<>5
	  AND OBOROT_KONS.PROD_KONS_ID=KLS_PROD_KONS.ID
	  AND KLS_PROD_KONS.ID=grp9.PROD_KONS_ID
	  AND grp9.PROD_GROUPS_ID=grp11.PROD_GROUPS_ID_1
	  AND grp11.PROD_TYPE_GRP_ID_1=9
	  AND grp11.PROD_TYPE_GRP_ID_2=11
	  AND grp11.PROD_GROUPS_ID_2=grp.ID
	  AND KLS_PROD_KONS.GR_KONS_ID=KLS_PROD_GR_KONS.ID_GR
	  AND OBOROT_KONS.ORG_STRU_ID=ORG_STRUCTURE.ID
	  AND ORG_STRUCTURE.ORG_KIND_ID=KLS_ORG_KIND.ID
	  AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта	 
	  AND OBOROT_KONS.DATE_OPER>dDATE_START-1 
	  AND OBOROT_KONS.DATE_OPER<dDATE_END+1
	  AND (OBOROT_KONS.FILIAL_ID=NVL(nFILIAL,OBOROT_KONS.FILIAL_ID)) -- филиал 
	  AND (OBOROT_KONS.ORG_STRU_ID=NVL(nAZC,OBOROT_KONS.ORG_STRU_ID)) -- подразделение (АЗС)	 
	  AND (KLS_PROD_GR_KONS.ID_GLOBAL_GR=NVL(cPROD_GR,KLS_PROD_GR_KONS.ID_GLOBAL_GR)) -- группа продуктов
	  AND (grp9.PROD_GROUPS_ID=NVL(nPROD,grp9.PROD_GROUPS_ID)) -- продукт
    GROUP BY 
	  (CASE WHEN OBOROT_KONS.DATE_OPER>dDATE_BEG-1 THEN 1 ELSE 0 END), 
      TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYYMM'),
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month YY')  
  ) oborot 
  GROUP BY
    month_num,  
    month_str,
    VIEW_ROW;  
	

  -- Заполняем остальные поля  	
  FOR lcur IN (SELECT * FROM DIAGRAM 
                WHERE TERMINAL_NAME = For_Init.GetCurrTerm
                  AND OSUSER_NAME = For_Init.GetCurrUser AND VIEW_ROW=1) 
  LOOP
    -- Предыдущий месяц
	PrevMon := TO_CHAR(ADD_MONTHS(TO_DATE(lcur.COL_SORT,'yyyymm'),-1),'yyyymm');
    -- Предыдущий год
	PrevYear := TO_CHAR(ADD_MONTHS(TO_DATE(lcur.COL_SORT,'yyyymm'),-12),'yyyymm'); 
    -- Значение из предыдущего месяца
	BEGIN
  	  SELECT COL_Y1_VALUE,COL_Y4_VALUE,COL_Y7_VALUE,
	         COL_Y10_VALUE,COL_Y13_VALUE,COL_Y16_VALUE
        INTO vCOL_Y2_VALUE,vCOL_Y5_VALUE,vCOL_Y8_VALUE,
             vCOL_Y11_VALUE,vCOL_Y14_VALUE,vCOL_Y17_VALUE			 
	   FROM DIAGRAM 
	   WHERE TERMINAL_NAME = For_Init.GetCurrTerm
         AND OSUSER_NAME = For_Init.GetCurrUser
	     AND COL_SORT=PrevMon;
    EXCEPTION 
	  WHEN OTHERS THEN
	    vCOL_Y2_VALUE:='0';
		vCOL_Y5_VALUE:='0';
		vCOL_Y8_VALUE:='0';
		vCOL_Y11_VALUE:='0';
		vCOL_Y14_VALUE:='0';
		vCOL_Y17_VALUE:='0';
	END;
    -- Значение из предыдущего года
	BEGIN
  	  SELECT COL_Y1_VALUE,COL_Y4_VALUE,COL_Y7_VALUE,
	         COL_Y10_VALUE,COL_Y13_VALUE,COL_Y16_VALUE
        INTO vCOL_Y3_VALUE,vCOL_Y6_VALUE,vCOL_Y9_VALUE,
             vCOL_Y12_VALUE,vCOL_Y15_VALUE,vCOL_Y18_VALUE			 
	   FROM DIAGRAM 
	   WHERE TERMINAL_NAME = For_Init.GetCurrTerm
               AND OSUSER_NAME = For_Init.GetCurrUser
			   AND COL_SORT=PrevYear;
    EXCEPTION 
	  WHEN OTHERS THEN
	    vCOL_Y3_VALUE:='0';
		vCOL_Y6_VALUE:='0';
		vCOL_Y9_VALUE:='0';
		vCOL_Y12_VALUE:='0';
		vCOL_Y15_VALUE:='0';
		vCOL_Y18_VALUE:='0';
	END;
	vCOL_Y2_VALUE:=REPLACE(vCOL_Y2_VALUE,',','.');
	vCOL_Y3_VALUE:=REPLACE(vCOL_Y3_VALUE,',','.');
	vCOL_Y5_VALUE:=REPLACE(vCOL_Y5_VALUE,',','.');
	vCOL_Y6_VALUE:=REPLACE(vCOL_Y6_VALUE,',','.');
	vCOL_Y8_VALUE:=REPLACE(vCOL_Y8_VALUE,',','.');
	vCOL_Y9_VALUE:=REPLACE(vCOL_Y9_VALUE,',','.');
	vCOL_Y11_VALUE:=REPLACE(vCOL_Y11_VALUE,',','.');
	vCOL_Y12_VALUE:=REPLACE(vCOL_Y12_VALUE,',','.');
	vCOL_Y14_VALUE:=REPLACE(vCOL_Y14_VALUE,',','.');
	vCOL_Y15_VALUE:=REPLACE(vCOL_Y15_VALUE,',','.');
	vCOL_Y17_VALUE:=REPLACE(vCOL_Y17_VALUE,',','.');
	vCOL_Y18_VALUE:=REPLACE(vCOL_Y18_VALUE,',','.');
    UPDATE DIAGRAM SET 
	   COL_Y2_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y2_VALUE||'),0,RC[-1]/'||vCOL_Y2_VALUE||')*100,2)',
	   COL_Y5_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y5_VALUE||'),0,RC[-1]/'||vCOL_Y5_VALUE||')*100,2)',
	   COL_Y8_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y8_VALUE||'),0,RC[-1]/'||vCOL_Y8_VALUE||')*100,2)',
	   COL_Y11_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y11_VALUE||'),0,RC[-1]/'||vCOL_Y11_VALUE||')*100,2)',
	   COL_Y14_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y14_VALUE||'),0,RC[-1]/'||vCOL_Y14_VALUE||')*100,2)',
	   COL_Y17_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y17_VALUE||'),0,RC[-1]/'||vCOL_Y17_VALUE||')*100,2)',
	   COL_Y3_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y3_VALUE||'),0,RC[-2]/'||vCOL_Y3_VALUE||')*100,2)',
	   COL_Y6_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y6_VALUE||'),0,RC[-2]/'||vCOL_Y6_VALUE||')*100,2)',
	   COL_Y9_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y9_VALUE||'),0,RC[-2]/'||vCOL_Y9_VALUE||')*100,2)',
	   COL_Y12_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y12_VALUE||'),0,RC[-2]/'||vCOL_Y12_VALUE||')*100,2)',
	   COL_Y15_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y15_VALUE||'),0,RC[-2]/'||vCOL_Y15_VALUE||')*100,2)',
	   COL_Y18_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y18_VALUE||'),0,RC[-2]/'||vCOL_Y18_VALUE||')*100,2)'
    WHERE TERMINAL_NAME = For_Init.GetCurrTerm
      AND OSUSER_NAME = For_Init.GetCurrUser 
	  AND COL_SORT=lcur.COL_SORT;					        
  END LOOP;				  
	   
  COMMIT;
  
  -- Избавляемся от еще не наступивших месяцев	
  DELETE FROM V_DIAGRAM WHERE col_sort>cur_month OR VIEW_ROW=0;	

  -- Округляем
  UPDATE V_DIAGRAM SET 
    COL_Y1_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y1_VALUE))),
    COL_Y4_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y4_VALUE))),
    COL_Y7_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y7_VALUE))),
    COL_Y10_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y10_VALUE))),
    COL_Y13_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y13_VALUE))),
    COL_Y16_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y16_VALUE)));

  COMMIT;
  
END;

-- Планирование объемов реализации фасовки на АЗС (по данным КО)
PROCEDURE PLAN_REALIZ_AZS_FAS (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL VARCHAR2, ORG_KIND_GRP VARCHAR2, AZC VARCHAR2, PROD_GR VARCHAR2, PROD VARCHAR2) IS
  nFILIAL NUMBER;
  nORG_KIND_GRP NUMBER;
  nAZC NUMBER;
  cPROD_GR VARCHAR2(30);
  nPROD NUMBER;
  dDATE_BEG DATE;
  dDATE_END DATE;
  dDATE_START DATE;
  cPRIM VARCHAR2(200);
  cTMP VARCHAR2(200);
  cZPT VARCHAR2(1);
  vCOL_Y2_VALUE VARCHAR2(50);
  vCOL_Y5_VALUE VARCHAR2(50);
  vCOL_Y8_VALUE VARCHAR2(50);
  vCOL_Y11_VALUE VARCHAR2(50);
  vCOL_Y14_VALUE VARCHAR2(50);
  vCOL_Y17_VALUE VARCHAR2(50);
  vCOL_Y3_VALUE VARCHAR2(50);
  vCOL_Y6_VALUE VARCHAR2(50);
  vCOL_Y9_VALUE VARCHAR2(50);
  vCOL_Y12_VALUE VARCHAR2(50);
  vCOL_Y15_VALUE VARCHAR2(50);
  vCOL_Y18_VALUE VARCHAR2(50);
  
  cur_month VARCHAR2(10);
  last_oper DATE;

  PrevMon VARCHAR2(50);
  PrevYear VARCHAR2(50);
BEGIN
  EMPTY_DIAGRAM;
  
  dDATE_END:=LAST_DAY(TO_DATE(date_end,'dd.mm.yyyy')); -- округляем даты
  dDATE_BEG:=TRUNC(TO_DATE(date_beg,'dd.mm.yyyy'),'MONTH'); -- округляем даты
  dDATE_START:=ADD_MONTHS(dDATE_BEG,-12); -- отбираем данные на 1 год ранее чем запрошено (для расчета %)

  BEGIN
    SELECT MAX(date_oper) INTO last_oper FROM OBOROT_KONS;
  EXCEPTION
    WHEN OTHERS THEN
	  last_oper:=TO_DATE(DATE_END,'dd.mm.yyyy');
  END;	  	
  cur_month:=TO_CHAR(last_oper,'YYYYMM'); -- текущий месяц

  cPRIM:='';
  cZPT:='';
  
  IF FILIAL<>'*' AND FILIAL IS NOT NULL THEN
    nFILIAL:=TO_NUMBER(FILIAL);
	BEGIN
	  SELECT NAME INTO cTMP FROM ORG_STRUCTURE WHERE ID=nFILIAL;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Филиал: '||cTMP||' ';
	cZPT:=';';	  
  ELSE
    nFILIAL:=NULL;
	cPRIM:=cPRIM||cZPT||' Все филиалы ';	  
	cZPT:=';';	  
  END IF;

  IF ORG_KIND_GRP<>'*' AND ORG_KIND_GRP IS NOT NULL THEN
    nORG_KIND_GRP:=TO_NUMBER(ORG_KIND_GRP);
	BEGIN
	  SELECT MAX(GROUP_KIND_NAME) INTO cTMP FROM KLS_ORG_KIND WHERE GROUP_KIND_ID=nORG_KIND_GRP;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Тип объекта: '||cTMP||' ';
	cZPT:=';';	  
  ELSE
    nORG_KIND_GRP:=NULL;
	cPRIM:=cPRIM||cZPT||' Все типы объектов ';	  
	cZPT:=';';	  
  END IF;
  
  IF AZC<>'*' AND AZC IS NOT NULL THEN
    nAZC:=TO_NUMBER(AZC);
	BEGIN
	  SELECT NAME INTO cTMP FROM ORG_STRUCTURE WHERE ID=nAZC;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Подразделение: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    nAZC:=NULL;
	cPRIM:=cPRIM||cZPT||' Все подразделения ';	  
	cZPT:=';';	  
  END IF;

  IF PROD_GR<>'*' AND PROD_GR IS NOT NULL THEN
    cPROD_GR:=PROD_GR;
	BEGIN
	  SELECT MAX(NAME_GLOBAL_GR) INTO cTMP FROM KLS_PROD_GR_KONS WHERE ID_GLOBAL_GR=cPROD_GR;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Группа продуктов: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    cPROD_GR:=NULL;
  END IF;

  IF PROD<>'*' AND PROD IS NOT NULL THEN
    nPROD:=TO_NUMBER(PROD);
	BEGIN
	  SELECT GROUP_NAME INTO cTMP FROM KLS_PROD_GROUPS WHERE ID=nPROD;
	EXCEPTION
	  WHEN OTHERS THEN
	    cTMP:='';
	END;
	cPRIM:=cPRIM||cZPT||' Продукт: '||cTMP||' ';	  
	cZPT:=';';	  
  ELSE
    nPROD:=NULL;
  END IF;
  
  IF cPROD_GR IS NULL AND nPROD IS NULL THEN
	cPRIM:=cPRIM||cZPT||' Все продукты ';	  
	cZPT:=';';	  
  END IF;  


  INSERT INTO DIAGRAM (COL_SORT,COL_X1_NAME,COL_X1_VALUE,COL_Y1_NAME,COL_Y1_VALUE,COL_Y2_NAME,COL_Y3_NAME,
       TITLE,PRIM,VIEW_ROW)
  SELECT
    month_num AS COL_SORT,  
    'Месяц' AS COL_X1_NAME,
    month_str AS COL_X1_VALUE,  
    'ФАСОВКА,ТТХ,СОПУТСТВУЮЩИЕ' AS COL_Y1_NAME, 
    SUM(summa) AS COL_Y1_VALUE,
    '% к предыдущему месяцу' AS COL_Y2_NAME, 
    '% к аналогичному периоду прошлого года' AS COL_Y3_NAME, 
	' на '||DATE_END,
	cPRIM,
	VIEW_ROW
  FROM 
  (
    -- ТТХ и Фасовка
    SELECT
	  (CASE WHEN OBOROT_KONS.DATE_OPER>dDATE_BEG-1 THEN 1 ELSE 0 END) as VIEW_ROW, 
      TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYYMM') AS month_num,
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month YY') AS month_str,
      NVL(SUM(CASE
	        WHEN grp.GROUP_ABBR IN ('ФАС','ТТХ') THEN OBOROT_KONS.SUMMA_REALIZ/1000
			ELSE 0
		  END),0) AS summa
    FROM OBOROT_KONS, KLS_PROD_KONS,KLS_PROD_GR_KONS,ORG_STRUCTURE,KLS_ORG_KIND,
	     KLS_PROD_KONS_GROUPS_DESC grp9, KLS_PROD_GR2GR_DESC grp11, KLS_PROD_GROUPS grp 
    WHERE OBOROT_KONS.TIP_OP_ID=3
	  AND OBOROT_KONS.TIP_REAL_ID<>2 
	  AND OBOROT_KONS.VID_REAL_ID<>5
	  AND OBOROT_KONS.PROD_KONS_ID=KLS_PROD_KONS.ID
	  AND KLS_PROD_KONS.ID=grp9.PROD_KONS_ID
	  AND grp9.PROD_GROUPS_ID=grp11.PROD_GROUPS_ID_1
	  AND grp11.PROD_TYPE_GRP_ID_1=9
	  AND grp11.PROD_TYPE_GRP_ID_2=11
	  AND grp11.PROD_GROUPS_ID_2=grp.ID
	  AND KLS_PROD_KONS.GR_KONS_ID=KLS_PROD_GR_KONS.ID_GR
	  AND OBOROT_KONS.ORG_STRU_ID=ORG_STRUCTURE.ID
	  AND ORG_STRUCTURE.ORG_KIND_ID=KLS_ORG_KIND.ID
	  AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта	 
	  AND OBOROT_KONS.DATE_OPER>dDATE_START-1 
	  AND OBOROT_KONS.DATE_OPER<dDATE_END+1
	  AND (OBOROT_KONS.FILIAL_ID=NVL(nFILIAL,OBOROT_KONS.FILIAL_ID)) -- филиал 
	  AND (OBOROT_KONS.ORG_STRU_ID=NVL(nAZC,OBOROT_KONS.ORG_STRU_ID)) -- подразделение (АЗС)	 
--	  AND (KLS_PROD_GR_KONS.ID_GLOBAL_GR=NVL(cPROD_GR,KLS_PROD_GR_KONS.ID_GLOBAL_GR)) -- группа продуктов
	  AND (grp9.PROD_GROUPS_ID=NVL(nPROD,grp9.PROD_GROUPS_ID)) -- продукт
    GROUP BY 
	  (CASE WHEN OBOROT_KONS.DATE_OPER>dDATE_BEG-1 THEN 1 ELSE 0 END), 
      TO_CHAR(OBOROT_KONS.DATE_OPER,'YYYYMM'),
      TO_CHAR(OBOROT_KONS.DATE_OPER,'Month YY')
	UNION ALL 
	-- Сопутствующие товары+Битум   
    select 
	  (CASE WHEN A.DOCDATE>dDATE_BEG-1 THEN 1 ELSE 0 END) as VIEW_ROW, 
      TO_CHAR(A.DOCDATE,'YYYYMM') AS month_num,
      TO_CHAR(A.DOCDATE,'Month YY') AS month_str,
      SUM(a.SUMMA/1000) AS Summa
    from vaneev.v_soputs_psv@ORACLE.WORLD A, PARUS_STORE_ORG_STRU_LINK B, V_ORG_STRUCTURE C, KLS_ORG_KIND
   WHERE A.docdate>dDATE_START-1 
     AND A.docdate<dDATE_END+1
	 and (nPROD=176 OR nPROD IS NULL) 
 	 and a.STORE_RN=B.STORE_RN
	 and b.ORG_STRU_ID=C.ID
     AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
	 AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
     AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- филиал 
	 AND (B.ORG_STRU_ID=NVL(nAZC,B.ORG_STRU_ID)) -- подразделение (АЗС)	 
   GROUP BY
	  (CASE WHEN A.DOCDATE>dDATE_BEG-1 THEN 1 ELSE 0 END), 
      TO_CHAR(A.DOCDATE,'YYYYMM'),
      TO_CHAR(A.DOCDATE,'Month YY')
  ) oborot 
  GROUP BY
    month_num,  
    month_str,
    VIEW_ROW;  
	

  -- Заполняем остальные поля  	
  FOR lcur IN (SELECT * FROM DIAGRAM 
                WHERE TERMINAL_NAME = For_Init.GetCurrTerm
                  AND OSUSER_NAME = For_Init.GetCurrUser AND VIEW_ROW=1) 
  LOOP
    -- Предыдущий месяц
	PrevMon := TO_CHAR(ADD_MONTHS(TO_DATE(lcur.COL_SORT,'yyyymm'),-1),'yyyymm');
    -- Предыдущий год
	PrevYear := TO_CHAR(ADD_MONTHS(TO_DATE(lcur.COL_SORT,'yyyymm'),-12),'yyyymm'); 
    -- Значение из предыдущего месяца
	BEGIN
  	  SELECT COL_Y1_VALUE,COL_Y4_VALUE,COL_Y7_VALUE,
	         COL_Y10_VALUE,COL_Y13_VALUE,COL_Y16_VALUE
        INTO vCOL_Y2_VALUE,vCOL_Y5_VALUE,vCOL_Y8_VALUE,
             vCOL_Y11_VALUE,vCOL_Y14_VALUE,vCOL_Y17_VALUE			 
	   FROM DIAGRAM 
	   WHERE TERMINAL_NAME = For_Init.GetCurrTerm
         AND OSUSER_NAME = For_Init.GetCurrUser
	     AND COL_SORT=PrevMon;
    EXCEPTION 
	  WHEN OTHERS THEN
	    vCOL_Y2_VALUE:='0';
		vCOL_Y5_VALUE:='0';
		vCOL_Y8_VALUE:='0';
		vCOL_Y11_VALUE:='0';
		vCOL_Y14_VALUE:='0';
		vCOL_Y17_VALUE:='0';
	END;
    -- Значение из предыдущего года
	BEGIN
  	  SELECT COL_Y1_VALUE,COL_Y4_VALUE,COL_Y7_VALUE,
	         COL_Y10_VALUE,COL_Y13_VALUE,COL_Y16_VALUE
        INTO vCOL_Y3_VALUE,vCOL_Y6_VALUE,vCOL_Y9_VALUE,
             vCOL_Y12_VALUE,vCOL_Y15_VALUE,vCOL_Y18_VALUE			 
	   FROM DIAGRAM 
	   WHERE TERMINAL_NAME = For_Init.GetCurrTerm
               AND OSUSER_NAME = For_Init.GetCurrUser
			   AND COL_SORT=PrevYear;
    EXCEPTION 
	  WHEN OTHERS THEN
	    vCOL_Y3_VALUE:='0';
		vCOL_Y6_VALUE:='0';
		vCOL_Y9_VALUE:='0';
		vCOL_Y12_VALUE:='0';
		vCOL_Y15_VALUE:='0';
		vCOL_Y18_VALUE:='0';
	END;
	vCOL_Y2_VALUE:=REPLACE(vCOL_Y2_VALUE,',','.');
	vCOL_Y3_VALUE:=REPLACE(vCOL_Y3_VALUE,',','.');
	vCOL_Y5_VALUE:=REPLACE(vCOL_Y5_VALUE,',','.');
	vCOL_Y6_VALUE:=REPLACE(vCOL_Y6_VALUE,',','.');
	vCOL_Y8_VALUE:=REPLACE(vCOL_Y8_VALUE,',','.');
	vCOL_Y9_VALUE:=REPLACE(vCOL_Y9_VALUE,',','.');
	vCOL_Y11_VALUE:=REPLACE(vCOL_Y11_VALUE,',','.');
	vCOL_Y12_VALUE:=REPLACE(vCOL_Y12_VALUE,',','.');
	vCOL_Y14_VALUE:=REPLACE(vCOL_Y14_VALUE,',','.');
	vCOL_Y15_VALUE:=REPLACE(vCOL_Y15_VALUE,',','.');
	vCOL_Y17_VALUE:=REPLACE(vCOL_Y17_VALUE,',','.');
	vCOL_Y18_VALUE:=REPLACE(vCOL_Y18_VALUE,',','.');
    UPDATE DIAGRAM SET 
	   COL_Y2_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y2_VALUE||'),0,RC[-1]/'||vCOL_Y2_VALUE||')*100,2)',
	   COL_Y5_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y5_VALUE||'),0,RC[-1]/'||vCOL_Y5_VALUE||')*100,2)',
	   COL_Y3_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y3_VALUE||'),0,RC[-2]/'||vCOL_Y3_VALUE||')*100,2)',
	   COL_Y6_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y6_VALUE||'),0,RC[-2]/'||vCOL_Y6_VALUE||')*100,2)'/*,
	   COL_Y8_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y8_VALUE||'),0,RC[-1]/'||vCOL_Y8_VALUE||')*100,2)',
	   COL_Y11_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y11_VALUE||'),0,RC[-1]/'||vCOL_Y11_VALUE||')*100,2)',
	   COL_Y14_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y14_VALUE||'),0,RC[-1]/'||vCOL_Y14_VALUE||')*100,2)',
	   COL_Y17_VALUE='=ROUND(IF(ISERROR(RC[-1]/'||vCOL_Y17_VALUE||'),0,RC[-1]/'||vCOL_Y17_VALUE||')*100,2)',
	   COL_Y9_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y9_VALUE||'),0,RC[-2]/'||vCOL_Y9_VALUE||')*100,2)',
	   COL_Y12_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y12_VALUE||'),0,RC[-2]/'||vCOL_Y12_VALUE||')*100,2)',
	   COL_Y15_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y15_VALUE||'),0,RC[-2]/'||vCOL_Y15_VALUE||')*100,2)',
	   COL_Y18_VALUE='=ROUND(IF(ISERROR(RC[-2]/'||vCOL_Y18_VALUE||'),0,RC[-2]/'||vCOL_Y18_VALUE||')*100,2)'*/
    WHERE TERMINAL_NAME = For_Init.GetCurrTerm
      AND OSUSER_NAME = For_Init.GetCurrUser 
	  AND COL_SORT=lcur.COL_SORT;					        
  END LOOP;				  
	   
  COMMIT;
  
  -- Избавляемся от еще не наступивших месяцев	
  DELETE FROM V_DIAGRAM WHERE col_sort>cur_month OR VIEW_ROW=0;	

  -- Округляем
  UPDATE V_DIAGRAM SET 
    COL_Y1_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y1_VALUE))),
    COL_Y4_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y4_VALUE)))/*,
    COL_Y7_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y7_VALUE))),
    COL_Y10_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y10_VALUE))),
    COL_Y13_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y13_VALUE))),
    COL_Y16_VALUE=TO_CHAR(ROUND(TO_NUMBER(COL_Y16_VALUE)))*/;

  COMMIT;
  
END;

END; 
/

--
-- FOR_FILIAL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Filial AS

-- Загрузить отчет из буфера
FUNCTION LOAD_FROM_BUF RETURN NUMBER AS

 CURSOR tmp_cur IS
  SELECT FILIAL_ID, DATE_REPORT, FILENAME, DATE_LOAD, REP_TYPE_ID, TIP_ORG, NAME_ORG, PROD_TAG, PROD_NAME, 
       SUM(FACT) as FACT, SUM(FACT_SUM) as FACT_SUM
  FROM (   
    SELECT FILIAL_ID, DATE_REPORT, FILENAME, DATE_LOAD, REP_TYPE_ID, TIP_ORG, NAME_ORG, PROD_TAG, PROD_NAME, FACT, 0 as FACT_SUM 
    FROM LOAD_BUFFER.TMP_FIL_REALIZ
    WHERE TERMINAL_NAME=For_Init.GetCurrTerm AND OSUSER_NAME=For_Init.GetCurrUser
	  AND PROD_TAG NOT LIKE '%_RUB'
    union all
    SELECT FILIAL_ID, DATE_REPORT, FILENAME, DATE_LOAD, REP_TYPE_ID, TIP_ORG, NAME_ORG, SUBSTR(PROD_TAG,1,INSTR(PROD_TAG,'_RUB',-1)-1) as PROD_TAG, PROD_NAME, 0 as FACT, FACT as FACT_SUM 
    FROM LOAD_BUFFER.TMP_FIL_REALIZ
    WHERE TERMINAL_NAME=For_Init.GetCurrTerm AND OSUSER_NAME=For_Init.GetCurrUser
	  AND PROD_TAG LIKE '%_RUB'
  	   )
  GROUP BY FILIAL_ID, DATE_REPORT, FILENAME, DATE_LOAD, REP_TYPE_ID, TIP_ORG, NAME_ORG, PROD_TAG, PROD_NAME	  
  ORDER BY REP_TYPE_ID,FILIAL_ID,TIP_ORG,NAME_ORG,DATE_REPORT,PROD_TAG;

  IsFirst NUMBER(1);
  per_id NUMBER;
  org_id NUMBER;
  i NUMBER;
  prod_id NUMBER;
  reg_id NUMBER;
  vPROD_TAG VARCHAR2(200);
  vOPER_TAG VARCHAR2(200);
  oldORG_TAG VARCHAR2(200);
  vORG_TAG VARCHAR2(200);
  res NUMBER;
  DateNow DATE;
  vDATE_OPER DATE;
BEGIN
  IsFirst:=1;
  oldORG_TAG:='';
  DateNow:=SYSDATE;
  FOR lcur IN tmp_cur
  LOOP
    IF IsFirst=1 THEN
	  -- Поиск и обновление отчетного периода
	  UPDATE LOAD_FIL_PERIODS SET
	    (FILENAME, DATE_LOAD, USER_LOAD, STATUS)=
		(SELECT lcur.FILENAME,DateNow,For_Init.GetCurrUser,0 FROM dual)
      WHERE REP_TYPE_ID=lcur.REP_TYPE_ID
		AND FILIAL_ID=lcur.FILIAL_ID
		AND DATE_REPORT=TRUNC(lcur.DATE_REPORT,'MONTH');

	  IF SQL%NOTFOUND THEN
  	    INSERT INTO LOAD_FIL_PERIODS (FILIAL_ID, DATE_REPORT, FILENAME, DATE_LOAD, USER_LOAD, REP_TYPE_ID,STATUS)
 	  	  VALUES (lcur.FILIAL_ID,TRUNC(lcur.DATE_REPORT,'MONTH'),lcur.FILENAME,DateNow,For_Init.GetCurrUser, lcur.REP_TYPE_ID,0);
	  END IF;
	  COMMIT;

      SELECT id INTO per_id
	    FROM LOAD_FIL_PERIODS
	   WHERE REP_TYPE_ID=lcur.REP_TYPE_ID
		 AND FILIAL_ID=lcur.FILIAL_ID
		 AND DATE_REPORT=TRUNC(lcur.DATE_REPORT,'MONTH');

	  DELETE FROM LOAD_FIL_REALIZ
       WHERE REP_TYPE_ID=lcur.REP_TYPE_ID
         AND FILIAL_ID=lcur.FILIAL_ID
  		 AND FIL_PERIOD_ID=per_id;
	  COMMIT;
	END IF;
	IsFirst:=0;

	i:=INSTR(lcur.PROD_TAG,'_');
	IF i=0 THEN
	  vPROD_TAG:=NLS_UPPER(lcur.PROD_TAG);
	  vOPER_TAG:='';
	ELSE
	  vPROD_TAG:=SUBSTR(lcur.PROD_TAG,1,i-1);
	  vOPER_TAG:=SUBSTR(lcur.PROD_TAG,i+1,200);
	END IF;

  	-- Поиск и обновление продукта
    UPDATE LOAD_FIL_PROD SET NAME=lcur.PROD_NAME
        WHERE TAG=vPROD_TAG;

    IF SQL%NOTFOUND THEN
     INSERT INTO LOAD_FIL_PROD (TAG, NAME)
  	  VALUES (vPROD_TAG,lcur.PROD_NAME);
    END IF;
	COMMIT;

    SELECT id INTO prod_id
        FROM LOAD_FIL_PROD
       WHERE TAG=vPROD_TAG;

	-- Поиск и обновление подразделения
	vORG_TAG:=TO_CHAR(lcur.FILIAL_ID)||'_'||NLS_UPPER(lcur.NAME_ORG);
	IF oldORG_TAG||' '<>vORG_TAG||' ' THEN
	  oldORG_TAG:=vORG_TAG;

      UPDATE LOAD_FIL_ORG SET (NAME, ORG_KIND_ID)=
	    (SELECT lcur.NAME_ORG, DECODE(lcur.TIP_ORG,1,5,1) FROM dual)
        WHERE TAG=vORG_TAG AND FILIAL_ID=lcur.FILIAL_ID;

      IF SQL%NOTFOUND THEN
  	    INSERT INTO LOAD_FIL_ORG (TAG, FILIAL_ID, NAME, ORG_KIND_ID)
 	  	  VALUES (vORG_TAG,lcur.FILIAL_ID,lcur.NAME_ORG,DECODE(lcur.TIP_ORG,1,5,1));
      END IF;
	  COMMIT;

      SELECT id INTO org_id
        FROM LOAD_FIL_ORG
        WHERE TAG=vORG_TAG AND FILIAL_ID=lcur.FILIAL_ID;
	END IF;

	-- Добавить запись реализации
	IF vOPER_TAG='OST' THEN
	  vDATE_OPER:=lcur.DATE_REPORT+1;
	ELSE
	  vDATE_OPER:=lcur.DATE_REPORT;
	END IF;
  	INSERT INTO LOAD_FIL_REALIZ (FILIAL_ID, FIL_PERIOD_ID, FIL_ORG_ID, FIL_PROD_ID, TYPE_OPER_ID, FACT, FACT_SUM, REP_TYPE_ID, DATE_OPER)
  	  VALUES (lcur.FILIAL_ID,per_id,org_id,prod_id,DECODE(vOPER_TAG,'REAL',1,3),lcur.FACT,lcur.FACT_SUM,lcur.REP_TYPE_ID,vDATE_OPER);
--  	COMMIT;

  END LOOP;
  COMMIT;
  RETURN per_id;
END;


-- Перенос данных в AZC_OPERATION
PROCEDURE MOVE_TO_AZC_OPER (PeriodId NUMBER) IS
  FilialId NUMBER;
  FilialId_2 NUMBER;
  DateRep DATE;
  DateNow DATE;
  DateBeg DATE;
  DateEnd DATE;
BEGIN
  DateNow:=SYSDATE;

  -- Определяем филиал и отчетный период
  SELECT FILIAL_ID, DATE_REPORT INTO FilialId,DateRep FROM LOAD_FIL_PERIODS WHERE ID=PeriodId;
  DateRep:=TRUNC(DateRep,'MONTH');
  DateBeg:=DateRep;
  DateEnd:=LAST_DAY(DateBeg);
  
  FilialId_2:=0;
  IF FilialID=30 then
    FilialID_2:=59;
  END IF;	
  IF FilialID=31 then
    FilialID_2:=22;
  END IF;	

  -- Обновляем информацию по движению
  UPDATE AZC_OPERATION A SET
    (DENCITY, VOLUME, VES, NOTE, SOBSTV_ID, SUMMA, PRICE, PLACE_SEND_ID, DATE_INTO) =
	(SELECT 0, 0, SUM(FACT), 'ЗАГРУЗКА ИЗ ФИЛИАЛОВ',1,SUM(NVL(FACT_SUM,0)),0,1,DateNow
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D,V_ORG_STRUCTURE CC
	  WHERE B.FIL_ORG_ID=C.ID AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции 
		AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
		AND C.ORG_STRU_ID=CC.ID 
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND D.PROD_ID_NPR>='11900')) 
		) 
  WHERE A.DATE_OPER>DateBeg-1
	AND A.DATE_OPER<DateEnd+1 -- Период
	AND A.TYPE_OPER_ID<>3 -- Движение
	AND A.DISCOUNT=0
	AND A.PRICE=0
	AND EXISTS
	(SELECT NULL
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D,V_ORG_STRUCTURE CC
	  WHERE B.FIL_ORG_ID=C.ID AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции 
		AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
		AND C.ORG_STRU_ID=CC.ID 
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND D.PROD_ID_NPR>='11900')) 
		); 

  COMMIT;

  -- Обновляем информацию по остаткам
  UPDATE AZC_OPERATION A SET
    (DENCITY, VOLUME, VES, NOTE, SOBSTV_ID, SUMMA, PRICE, PLACE_SEND_ID, DATE_INTO) =
	(SELECT 0, 0, SUM(FACT), 'ЗАГРУЗКА ИЗ ФИЛИАЛОВ',1,SUM(NVL(FACT_SUM,0)),0,1,DateNow
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D,V_ORG_STRUCTURE CC
	  WHERE B.FIL_ORG_ID=C.ID AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции 
		AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
		AND C.ORG_STRU_ID=CC.ID 
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND D.PROD_ID_NPR>='11900')) 
		) 
  WHERE A.DATE_OPER>DateBeg
	AND A.DATE_OPER<DateEnd+2 -- Период со сдвигом на 1 день
	AND A.TYPE_OPER_ID=3 -- Остатки
	AND A.DISCOUNT=0
	AND A.PRICE=0
	AND EXISTS
	(SELECT NULL
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D,V_ORG_STRUCTURE CC
	  WHERE B.FIL_ORG_ID=C.ID AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции 
		AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
		AND C.ORG_STRU_ID=CC.ID 
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND D.PROD_ID_NPR>='11900')) 
		); 

  COMMIT;

  -- Добавляем информацию по движению
  INSERT INTO AZC_OPERATION
    (DATE_OPER, DENCITY, VOLUME, VES, NOTE, TYPE_OPER_ID, PROD_ID_NPR,
	 SOBSTV_ID, ORG_STRU_ID, SUMMA, PRICE, PLACE_SEND_ID, DATE_INTO)
	SELECT DATE_OPER,0,0,SUM(FACT),'ЗАГРУЗКА ИЗ ФИЛИАЛОВ',TYPE_OPER_ID,D.PROD_ID_NPR,
	   1,C.ORG_STRU_ID,SUM(NVL(FACT_SUM,0)),0,1,DateNow
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D,V_ORG_STRUCTURE CC
	  WHERE B.FIL_ORG_ID=C.ID AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.TYPE_OPER_ID<>3 -- Тип операции - Движение
		AND C.ORG_STRU_ID=CC.ID 
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND D.PROD_ID_NPR>='11900')) 
        AND NOT EXISTS
		(SELECT NULL
		   FROM AZC_OPERATION A
		  WHERE A.DATE_OPER>DateBeg-1
            AND A.DATE_OPER<DateEnd+1 -- Период
   	        AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		    AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
		    AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		    AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
	        AND A.DISCOUNT=0
         	AND A.PRICE=0
			)
	GROUP BY DATE_OPER,TYPE_OPER_ID,D.PROD_ID_NPR,C.ORG_STRU_ID
	HAVING SUM(FACT)<>0; 

  COMMIT;

  -- Добавляем информацию по остаткам
  INSERT INTO AZC_OPERATION
    (DATE_OPER, DENCITY, VOLUME, VES, NOTE, TYPE_OPER_ID, PROD_ID_NPR,
	 SOBSTV_ID, ORG_STRU_ID, SUMMA, PRICE, PLACE_SEND_ID, DATE_INTO)
	SELECT DATE_OPER,0,0,SUM(FACT),'ЗАГРУЗКА ИЗ ФИЛИАЛОВ',TYPE_OPER_ID,D.PROD_ID_NPR,
	   1,C.ORG_STRU_ID,SUM(NVL(FACT_SUM,0)),0,1,DateNow
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D,V_ORG_STRUCTURE CC
	  WHERE B.FIL_ORG_ID=C.ID AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.TYPE_OPER_ID=3 -- Тип операции - остатки
		AND C.ORG_STRU_ID=CC.ID 
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND D.PROD_ID_NPR>='11900')) 
        AND NOT EXISTS
		(SELECT NULL
		   FROM AZC_OPERATION A
		  WHERE A.DATE_OPER>DateBeg
            AND A.DATE_OPER<DateEnd+2 -- Период
   	        AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		    AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
		    AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		    AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
	        AND A.DISCOUNT=0
         	AND A.PRICE=0
			)
	GROUP BY DATE_OPER,TYPE_OPER_ID,D.PROD_ID_NPR,C.ORG_STRU_ID 
	HAVING SUM(FACT)<>0; 

  COMMIT;

  -- Удаление информации по движению
  DELETE FROM AZC_OPERATION A
  WHERE EXISTS 
    (SELECT NULL FROM V_ORG_STRUCTURE CC WHERE CC.ID=A.ORG_STRU_ID 
	    AND (CC.FILIAL_ID=FilialID OR CC.FILIAL_ID=FilialID_2) -- Филиал
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND A.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND A.PROD_ID_NPR>='11900'))
	)		  
    AND A.DATE_OPER>DateBeg-1
	AND A.DATE_OPER<DateEnd+1 -- Период
	AND A.TYPE_OPER_ID<>3 -- Тип операции: Движение
	AND NOT EXISTS
	(SELECT NULL
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D
	  WHERE B.FIL_ORG_ID=C.ID 
	    AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции 
		AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
     	AND FACT<>0 
		AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
        AND A.DISCOUNT=0
       	AND A.PRICE=0
		); 

  COMMIT;

  -- Удаление информации по остаткам
  DELETE FROM AZC_OPERATION A
  WHERE EXISTS 
    (SELECT NULL FROM V_ORG_STRUCTURE CC WHERE CC.ID=A.ORG_STRU_ID 
	    AND (CC.FILIAL_ID=FilialID OR CC.FILIAL_ID=FilialID_2) -- Филиал
		AND ((CC.LOAD_NALIV_FROM_XLS=1 AND A.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_XLS=1 AND A.PROD_ID_NPR>='11900'))
	)		  
    AND A.DATE_OPER>DateBeg
	AND A.DATE_OPER<DateEnd+2 -- Период со сдвигом на 1 день
	AND A.TYPE_OPER_ID=3 -- Тип операции: Остатки
	AND NOT EXISTS
	(SELECT NULL
	   FROM LOAD_FIL_REALIZ B, LOAD_FIL_ORG C, LOAD_FIL_PROD D
	  WHERE B.FIL_ORG_ID=C.ID 
	    AND B.FIL_PROD_ID=D.ID
	    AND B.FILIAL_ID=FilialID -- Филиал
	    AND B.FIL_PERIOD_ID=PeriodId -- Период
		AND B.REP_TYPE_ID=1
		AND B.DATE_OPER=A.DATE_OPER -- Отчетная дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции 
		AND D.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		AND C.ORG_STRU_ID=A.ORG_STRU_ID -- Подразделение
        AND A.DISCOUNT=0
      	AND A.PRICE=0
		); 

  COMMIT;

  -- Обновляем статус отчета
  UPDATE LOAD_FIL_PERIODS SET status=2 WHERE id=PeriodId;
  COMMIT;

END;

-- Подготовка данных для отчета "План-факт поставок и реализации"
-- TIP_CALC=0 - Рассчитывать ВСЕ
-- TIP_CALC=1 - Рассчитывать ПЛАН
-- TIP_CALC=2 - Рассчитывать ФАКТ (БЕЗ ОСТАТКОВ)
-- TIP_CALC=3 - Рассчитывать ФАКТ+ОСТАТКИ
-- TIP_CALC=4 - Рассчитывать ОСТАТКИ
-- TIP_CALC=5 - Рассчитывать ПЛАН+ФАКТ (БЕЗ ОСТАТКОВ)
-- ONLY_MAIN=0 - все филиалы 
-- ONLY_MAIN=1 -- только головное НПО (без Архангельска)
PROCEDURE PF_REALIZ(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, TIP_CALC NUMBER DEFAULT 0) AS
  dDATE_BEG DATE;
  dDATE_END DATE;
  dDATE_PLAN DATE;
  cnt1 NUMBER;
  Koef FLOAT;
  dMON_END DATE;
BEGIN

  dDATE_END:=TO_DATE(date_end,'dd.mm.yyyy');
  dDATE_BEG:=TO_DATE(date_beg,'dd.mm.yyyy');
  dDATE_PLAN:=TRUNC(dDATE_BEG,'MONTH');
  dMON_END:=LAST_DAY(dDATE_END);
  Koef:=(dDATE_END-dDATE_PLAN+1)/(dMON_END-dDATE_PLAN+1);

  -- Очистка таблицы PLAN_FACT
  DELETE FROM V_PLAN_FACT_REALIZ;
  COMMIT;

  -- Регионы реализации: 1 - Коми, 2 - Арханегльск, 3 - Прочие
  -- Направление реализации: 1 - АЗС, 2-Нефтебазы, 3-Транзит
 
  -- 1) План поставок с УНП (ТРАНЗИТ)
  IF TIP_CALC=0 OR TIP_CALC=1 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, PLAN_POST_VES, NORMA_POST_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      DECODE(D.REGION_ID,21,2,1) AS REGION_ID, -- Регион реализации
      DECODE(NVL(D.TIP_REAL_ID,0),1,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)) AS NAPR_ID, -- Направление реализации
      PROD_ID_NPR, -- Продукт
      SUM(PLAN_VES) AS PLAN_POST_VES, -- Вес в тоннах
	  SUM(PLAN_VES*Koef) AS NORMA_POST_VES -- Норма
    FROM PLAN_POST,V_KLS_PLANSTRU D,PLAN_PERIODS
    WHERE PLAN_POST.PLANSTRU_ID=D.ID
      AND PLAN_POST.PLAN_PER_ID=PLAN_PERIODS.ID
      AND PLAN_POST.PLAN_ID in (12,13) 
      AND D.SPF_NAME='ТРАНЗИТ'
      AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
      AND PLAN_PERIODS.DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
    GROUP BY
      DECODE(D.REGION_ID,21,2,1),
      DECODE(NVL(D.TIP_REAL_ID,0),1,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)),
      PROD_ID_NPR;
  END IF;
  COMMIT;

 
  -- 2) План поставок АЗС+Нефтебазы
  IF TIP_CALC=0 OR TIP_CALC=1 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
    (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, PLAN_POST_VES, NORMA_POST_VES)
    SELECT
    'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
    DECODE(A.ORG_STRU_ID,40,2,1) AS REGION_ID, -- Регион реализации
    DECODE(A.TIP_REAL_ID,2,3,DECODE(A.ORG_KIND_ID,5,1,12,1,2)) AS NAPR_ID, -- Направление реализации
    B.PROD_ID_NPR, -- Продукт
    SUM(A.VES) AS PLAN_REAL_VES, -- Вес в тоннах
    SUM(A.VES*Koef) AS NORMA_REAL_VES -- Норма
    FROM PLAN_REALIZ A, PARUS_NOMEN_PROD_LINK B 
    WHERE A.DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
      AND A.PARUS_RN IS NOT NULL
      AND A.PARUS_NOMEN=B.NOMEN_RN
	  AND A.ORG_STRU_ID<>40 -- Без Архангельска
    GROUP BY
    DECODE(A.ORG_STRU_ID,40,2,1),
    DECODE(A.TIP_REAL_ID,2,3,DECODE(A.ORG_KIND_ID,5,1,12,1,2)),
    B.PROD_ID_NPR;
  END IF;
  COMMIT;

  
  -- 3) Факт поставки
  IF TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_POST_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      DECODE(D.REGION_ID,21,2,1) AS REGION_ID, -- Регион реализации
      DECODE(KLS_DOG.PREDPR_ID,2641,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)) AS NAPR_ID, -- Направление реализации
      KVIT.PROD_ID_NPR, -- Продукт
      SUM(VES_BRUTTO) AS FACT_POST_VES -- Вес в тоннах
    FROM KVIT,MONTH,V_KLS_PLANSTRU D,ZAKAZ unp,ZAKAZ snp,KLS_DOG,KLS_DOG ORIG_DOG
    WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
      AND snp.PLANSTRU_ID=D.ID
      AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
      AND snp.DOG_ID=KLS_DOG.ID AND MONTH.DOG_ID=ORIG_DOG.ID AND ORIG_DOG.PREDPR_ID=2641   
      AND MONTH.DATE_PLAN>=dDATE_PLAN
      AND KVIT.DATE_OTGR BETWEEN dDATE_BEG AND dDATE_END
	  AND month.ZAKAZ_ID=unp.ID AND unp.LINK_ID=snp.ID
    GROUP BY
      DECODE(D.REGION_ID,21,2,1),
      DECODE(KLS_DOG.PREDPR_ID,2641,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)),
      KVIT.PROD_ID_NPR;
  END IF;
  COMMIT;

  -- 4) План реализации
  IF TIP_CALC=0 OR TIP_CALC=1 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, PLAN_REAL_VES,NORMA_REAL_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      DECODE(ORG_STRU_ID,40,2,1) AS REGION_ID, -- Регион реализации
      DECODE(TIP_REAL_ID,2,3,DECODE(ORG_KIND_ID,5,1,12,1,2)) AS NAPR_ID, -- Направление реализации
      PROD_ID_NPR, -- Продукт
      SUM(VES) AS PLAN_REAL_VES, -- Вес в тоннах
      SUM(VES*Koef) AS NORMA_REAL_VES -- Норма
    FROM PLAN_REALIZ A
    WHERE DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
      AND A.PARUS_RN IS NULL
    GROUP BY
      DECODE(ORG_STRU_ID,40,2,1),
      DECODE(TIP_REAL_ID,2,3,DECODE(ORG_KIND_ID,5,1,12,1,2)),
      PROD_ID_NPR;
  END IF;
  COMMIT;

  -- 5) Факт реализации (с АЗС и Нефтебаз)
  IF TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_REAL_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      DECODE(NVL(C.FILIAL_ID,0),40,2,50,2,1) AS REGION_ID, -- Регион реализации
      DECODE(C.ORG_KIND_ID,5,1,12,1,2) AS NAPR_ID, -- Направление реализации
      PROD_ID_NPR, -- Продукт
      SUM(VES/1000) AS FACT_REAL_VES -- Вес в тоннах
    FROM AZC_OPERATION,V_ORG_STRUCTURE C
    WHERE AZC_OPERATION.TYPE_OPER_ID=1
      AND AZC_OPERATION.ORG_STRU_ID=C.ID
  	  AND AZC_OPERATION.ORG_STRU_ID not in (44,9049)  -- Без Автоналива и Архэнерго
      AND DATE_OPER BETWEEN dDATE_BEG AND dDATE_END
      AND C.ORG_KIND_ID IN (1,5,11,12,13)
	  AND AZC_OPERATION.DISCOUNT<>815
    GROUP BY
      DECODE(NVL(C.FILIAL_ID,0),40,2,50,2,1),
      DECODE(C.ORG_KIND_ID,5,1,12,1,2),
      PROD_ID_NPR;

	 -- Добавить Автоналив
	IF FILIAL_ID<>'40' THEN 
      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_REAL_VES)
      SELECT
        'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
        1 AS REGION_ID, -- Регион реализации
        2 AS NAPR_ID, -- Направление реализации
        B.PROD_ID_NPR, -- Продукт
        SUM(A.NQUANTALT)/1000 AS FACT_REAL_VES -- Вес в тоннах
      FROM V_PARUS_TRANSINVCUST A,PARUS_NOMEN_PROD_LINK B,V_ORG_STRUCTURE C 
      WHERE A.sSTORE_CATALOG_NAME='Автоналив'
        AND A.NNOMEN=B.NOMEN_RN
        AND A.dDOCDATE>=dDATE_BEG
        AND A.dDOCDATE<=dDATE_END
	    AND C.ID=44 
      GROUP BY
        B.PROD_ID_NPR;
		
		null;
	
  	   -- Добавить Маслобазу (Дежневский нефтесклад) - НАЛИВНЫЕ МАСЛА
 /*     INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_REAL_VES)
      SELECT
        'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
        1 AS REGION_ID, -- Регион реализации
        2 AS NAPR_ID, -- Направление реализации
        B.ID_NPR as PROD_ID_NPR, -- Продукт
        SUM(A.NQUANTALT)/1000 AS FACT_REAL_VES -- Вес в тоннах
      FROM V_PARUS_TRANSINVCUST A,V_ORG_STRUCTURE C,KLS_PROD B 
      WHERE A.sSTORE_CATALOG_NAME='Маслобаза'
  	    AND A.sCATALOG_NAME='Маслобаза_налив'
        AND A.dDOCDATE>=dDATE_BEG
        AND A.dDOCDATE<=dDATE_END
	    AND B.ID_NPR='11900'
	    AND C.ID=2023 
      GROUP BY
        B.ID_NPR;

	   -- Добавить Маслобазу (Дежневский нефтесклад) - ФАСОВАННЫЕ МАСЛА
      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_REAL_VES)
      SELECT
        'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
        1 AS REGION_ID, -- Регион реализации
        2 AS NAPR_ID, -- Направление реализации
        B.ID_NPR as PROD_ID_NPR, -- Продукт
        SUM(A.NQUANTALT)/1000 AS FACT_REAL_VES -- Вес в тоннах
      FROM V_PARUS_TRANSINVCUST A,V_ORG_STRUCTURE C,KLS_PROD B 
      WHERE A.sSTORE_CATALOG_NAME='Маслобаза'
	    AND A.sCATALOG_NAME='Маслобаза_фас'
        AND A.dDOCDATE>=dDATE_BEG
        AND A.dDOCDATE<=dDATE_END
	    AND B.ID_NPR='80018'
	    AND C.ID=2023 
      GROUP BY
        B.ID_NPR;*/
    END IF;
  END IF;
  COMMIT;

  -- 6) План реализации (ТРАНЗИТ)
  IF TIP_CALC=0 OR TIP_CALC=1 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, PLAN_REAL_VES, NORMA_REAL_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      DECODE(D.REGION_ID,21,2,1) AS REGION_ID, -- Регион реализации
      DECODE(NVL(D.TIP_REAL_ID,0),1,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)) AS NAPR_ID, -- Направление реализации
      PROD_ID_NPR, -- Продукт
      SUM(PLAN_VES) AS PLAN_REAL_VES, -- Вес в тоннах
	  SUM(PLAN_VES*Koef) AS NORMA_REAL_VES -- Норма
    FROM PLAN_POST,V_KLS_PLANSTRU D,PLAN_PERIODS
    WHERE PLAN_POST.PLANSTRU_ID=D.ID
      AND PLAN_POST.PLAN_PER_ID=PLAN_PERIODS.ID
      AND PLAN_POST.PLAN_ID in (12,13) 
      AND D.SPF_NAME='ТРАНЗИТ'
      AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
      AND PLAN_PERIODS.DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
    GROUP BY
      DECODE(D.REGION_ID,21,2,1),
      DECODE(NVL(D.TIP_REAL_ID,0),1,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)),
      PROD_ID_NPR;
	
  END IF;
  COMMIT;
  
  -- 6) Факт реализации (ТРАНЗИТ)
  IF TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_REAL_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
--      DECODE(D.REGION_ID,21,2,1) AS REGION_ID, -- Регион реализации
      1 as REGION_ID,
      DECODE(KLS_DOG.PREDPR_ID,2641,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)) AS NAPR_ID, -- Направление реализации
      KVIT.PROD_ID_NPR, -- Продукт
      SUM(VES_BRUTTO) AS FACT_REAL_VES -- Вес в тоннах
    FROM KVIT,MONTH,V_KLS_PLANSTRU D,ZAKAZ unp,ZAKAZ snp,KLS_DOG,KLS_DOG ORIG_DOG
    WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
      AND snp.PLANSTRU_ID=D.ID
      AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
      AND snp.DOG_ID=KLS_DOG.ID AND MONTH.DOG_ID=ORIG_DOG.ID AND ORIG_DOG.PREDPR_ID=2641 AND KLS_DOG.PREDPR_ID<>2641  -- Транзит
--	  AND NVL(D.REGION_ID,0)<>21 -- Без Архангельска   
      AND MONTH.DATE_PLAN>=dDATE_PLAN
      AND KVIT.DATE_OTGR BETWEEN dDATE_BEG AND dDATE_END
	  AND month.ZAKAZ_ID=unp.ID AND unp.LINK_ID=snp.ID
    GROUP BY
--      DECODE(D.REGION_ID,21,2,1),
      DECODE(KLS_DOG.PREDPR_ID,2641,DECODE(D.ORG_KIND_ID,5,1,12,1,2),DECODE(D.REGION_ID,21,3,3)),
      KVIT.PROD_ID_NPR;
	
	-- Добавить Архангельский транзит  
/*    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, FACT_REAL_VES)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      2 AS REGION_ID, -- Регион реализации
      3 AS NAPR_ID, -- Направление реализации
      PROD_ID_NPR, -- Продукт
      SUM(VES/1000) AS FACT_REAL_VES -- Вес в тоннах
    FROM AZC_OPERATION,V_ORG_STRUCTURE C
    WHERE AZC_OPERATION.TYPE_OPER_ID=1
      AND AZC_OPERATION.ORG_STRU_ID=C.ID
  	  AND AZC_OPERATION.ORG_STRU_ID=9049  -- только Архэнерго
      AND DATE_OPER BETWEEN dDATE_BEG AND dDATE_END
	  AND AZC_OPERATION.DISCOUNT<>815
    GROUP BY
      PROD_ID_NPR;
*/	  
  END IF;
  COMMIT;

  IF TIP_CALC=0 OR TIP_CALC=3 OR TIP_CALC=4 THEN
  SELECT COUNT(*) INTO cnt1 FROM OSTAT_KONS WHERE DATE_OST=dDATE_BEG;
  IF cnt1>0 THEN
    -- 7) Остатки на начало периода (АЗС и Нефтебазы) по данныи консолидированной отчетности
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, BEGIN_OST)
    SELECT
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      DECODE(OSTAT_KONS.FILIAL_ID,40,2,1) AS REGION_ID, -- Регион реализации
      DECODE(ORG_STRUCTURE.ORG_KIND_ID,5,1,12,1,2) AS NAPR_ID, -- Направление реализации
      KLS_PROD.ID_NPR AS PROD_ID_NPR, -- Продукт
      SUM(KG/1000) AS BEGIN_OST -- Остаток в тоннах
    FROM OSTAT_KONS,KLS_PROD_KONS,ORG_STRUCTURE,KLS_PROD
    WHERE OSTAT_KONS.ORG_STRU_ID=ORG_STRUCTURE.ID
      AND OSTAT_KONS.PROD_KONS_ID=KLS_PROD_KONS.ID
      AND KLS_PROD_KONS.PROD_ID_NPR=KLS_PROD.ID_NPR
      AND OSTAT_KONS.DATE_OST=dDATE_BEG
      AND ORG_STRUCTURE.ORG_KIND_ID IN (1,5,11,12,13)
    GROUP BY
      DECODE(OSTAT_KONS.FILIAL_ID,40,2,1),
      DECODE(ORG_STRUCTURE.ORG_KIND_ID,5,1,12,1,2),
      KLS_PROD.ID_NPR;
  ELSE

    -- 7) Остатки на начало периода (АЗС и Нефтебазы) из по оперативным данным филиалов (AZC_OPERATION)
    FOR lcur IN (SELECT DISTINCT /* Выборка всех комбинаций Склад/продукт за последние 2-3 месяца - для ускорения */
                 C.FILIAL_ID, -- Филиал 
				 A.ORG_STRU_ID, -- Склад
				 A.PROD_ID_NPR, -- Продукт
                 DECODE(C.FILIAL_ID,40,2,1) AS REGION_ID, -- Регион реализации
                 DECODE(C.ORG_KIND_ID,5,1,12,1,2) AS NAPR_ID -- Направление реализации
               FROM AZC_OPERATION A, KLS_PROD B, v_org_structure C
			   WHERE A.DATE_OPER>=ADD_MONTHS(TRUNC(dDATE_BEG,'MONTH'),-2)
                 AND A.DATE_OPER<=dDATE_END
                 AND A.ORG_STRU_ID=C.ID
                 AND C.ORG_KIND_ID IN (1,5,11,12,13)
                 AND A.PROD_ID_NPR=B.ID_NPR
				) LOOP 
	
      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, BEGIN_OST)
      VALUES (
        'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
        lcur.REGION_ID, -- Регион реализации
        lcur.NAPR_ID, -- Направление реализации
        lcur.PROD_ID_NPR, -- Продукт
        GET_OST_BEGIN_MAS(lcur.ORG_STRU_ID,lcur.PROD_ID_NPR,dDATE_BEG)/1000
	  ); -- Остаток в тоннах
    COMMIT; 
    END LOOP;
  END IF;
  COMMIT;

  -- 8) Остатки на конец периода (АЗС и Нефтебазы) по оперативным данным филиалов (AZC_OPERATION)
  FOR lcur IN (SELECT DISTINCT /* Выборка всех комбинаций Склад/продукт за последние 2-3 месяца - для ускорения */
                 C.FILIAL_ID, -- Филиал 
				 A.ORG_STRU_ID, -- Склад
				 A.PROD_ID_NPR, -- Продукт
                 DECODE(C.FILIAL_ID,40,2,1) AS REGION_ID, -- Регион реализации
                 DECODE(C.ORG_KIND_ID,5,1,12,1,2) AS NAPR_ID -- Направление реализации
               FROM AZC_OPERATION A, KLS_PROD B, v_org_structure C
			   WHERE A.DATE_OPER>=ADD_MONTHS(TRUNC(dDATE_BEG,'MONTH'),-2)
                 AND A.DATE_OPER<=dDATE_END
                 AND A.ORG_STRU_ID=C.ID
                 AND C.ORG_KIND_ID IN (1,5,11,12,13)
                 AND A.PROD_ID_NPR=B.ID_NPR
				) LOOP 

    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,REGION_ORDER, NAPR_ORDER, PROD_ID_NPR, END_OST)
    VALUES (
      'ПЛАН-ФАКТ ПОСТАВКИ И РЕАЛИЗАЦИИ',
      lcur.REGION_ID, -- Регион реализации
      lcur.NAPR_ID, -- Направление реализации
      lcur.PROD_ID_NPR, -- Продукт
      GET_OST_END_MAS(lcur.ORG_STRU_ID,lcur.PROD_ID_NPR,dDATE_END)/1000
	  );
	COMMIT;   
  END LOOP;
  END IF; -- TIP_CALC
  COMMIT;
  

  -- Удаление ненужного
  -- ТТХ
  DELETE FROM V_PLAN_FACT_REALIZ
    WHERE PROD_ID_NPR='80020';
  COMMIT;

  -- Удаление ненужного
  IF FILIAL_ID='40' THEN
    DELETE FROM V_PLAN_FACT_REALIZ
      WHERE REGION_ORDER<>2;
    COMMIT;
  END IF;	
  IF FILIAL_ID='31' THEN
    DELETE FROM V_PLAN_FACT_REALIZ
      WHERE REGION_ORDER=2;
    COMMIT;
  END IF;	
  
  -- Проставить дополнительные поля
  UPDATE V_PLAN_FACT_REALIZ SET
	DATE_BEGIN=dDATE_BEG,
	DATE_END=dDATE_END,
	DATE_PLAN=dDATE_PLAN;

  COMMIT;

  -- Регионы реализации: 1 - Коми, 2 - Арханегльск, 3 - Прочие
  UPDATE V_PLAN_FACT_REALIZ SET REGION_NAME='КОМИ' WHERE REGION_ORDER=1;
  UPDATE V_PLAN_FACT_REALIZ SET REGION_NAME='АРХАНГЕЛЬСК' WHERE REGION_ORDER=2;
  UPDATE V_PLAN_FACT_REALIZ SET REGION_NAME='ПРОЧИЕ РЕГИОНЫ' WHERE REGION_ORDER=3;

  COMMIT;

  -- Направление реализации: 1 - АЗС, 2-Нефтебазы, 3-Транзит
  UPDATE V_PLAN_FACT_REALIZ SET NAPR_NAME='АЗС' WHERE NAPR_ORDER=1;
  UPDATE V_PLAN_FACT_REALIZ SET NAPR_NAME='НЕФТЕБАЗЫ' WHERE NAPR_ORDER=2;
  UPDATE V_PLAN_FACT_REALIZ SET NAPR_NAME='ТРАНЗИТ' WHERE NAPR_ORDER=3;

  COMMIT;

  -- Группы продуктов
  UPDATE V_PLAN_FACT_REALIZ A SET (GROUP_ORDER, GROUP_NAME)=
    (SELECT B.GROUP_ORDER, B.GROUP_NAME FROM KLS_PROD_GROUPS B, KLS_PROD_GROUPS_DESC C
	  WHERE C.PROD_GROUPS_ID=B.ID AND C.PROD_TYPE_GRP_ID=5 AND C.PROD_ID_NPR=A.PROD_ID_NPR)
  WHERE EXISTS
    (SELECT NULL FROM KLS_PROD_GROUPS B, KLS_PROD_GROUPS_DESC C
	  WHERE C.PROD_GROUPS_ID=B.ID AND C.PROD_TYPE_GRP_ID=5 AND C.PROD_ID_NPR=A.PROD_ID_NPR);

  COMMIT;

  -- Округление
  UPDATE V_PLAN_FACT_REALIZ SET
    BEGIN_OST=ROUND(BEGIN_OST),
	PLAN_POST_VES=ROUND(PLAN_POST_VES),
	NORMA_POST_VES=ROUND(NORMA_POST_VES),
	FACT_POST_VES=ROUND(FACT_POST_VES),
	RESURS=ROUND(RESURS),
	PLAN_REAL_VES=ROUND(PLAN_REAL_VES),
	NORMA_REAL_VES=ROUND(NORMA_REAL_VES),
	FACT_REAL_VES=ROUND(FACT_REAL_VES),
	END_OST=ROUND(END_OST);

  COMMIT;
END;

-- Последний остаток по подразделению
FUNCTION LAST_OST(pFILIAL_ID NUMBER,pFIL_PERIOD_ID NUMBER,pFIL_ORG_ID NUMBER,pREP_TYPE_ID NUMBER) RETURN NUMBER AS
 CURSOR tmp_cur IS
  SELECT FIL_PROD_ID,MAX(DATE_OPER) AS maxDATE
    FROM LOAD_FIL_REALIZ
   WHERE FILIAl_ID=pFILIAL_ID
     AND FIL_PERIOD_ID=pFIL_PERIOD_ID
	 AND FIL_ORG_ID=pFIL_ORG_ID
	 AND REP_TYPE_ID=pREP_TYPE_ID
	 AND TYPE_OPER_ID=3
	 AND FACT<>0
   GROUP BY FIL_PROD_ID
   ORDER BY FIL_PROD_ID;

  vDATE_OPER DATE;
  vSUM NUMBER;
  vFACT NUMBER;
BEGIN
  vSUM:=0;
  FOR lcur IN tmp_cur
  LOOP

    SELECT SUM(FACT) INTO vFACT
      FROM LOAD_FIL_REALIZ
     WHERE FILIAl_ID=pFILIAL_ID
       AND FIL_PERIOD_ID=pFIL_PERIOD_ID
	   AND FIL_ORG_ID=pFIL_ORG_ID
  	   AND REP_TYPE_ID=pREP_TYPE_ID
	   AND TYPE_OPER_ID=3
  	   AND FIL_PROD_ID=lcur.FIL_PROD_ID
	   AND DATE_OPER=lcur.maxDATE;

	vSUM:=vSUM+vFACT;
  END LOOP;
  RETURN vSUM;

EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;

-- Подготовка данных для отчета "Суточная реализация с АЗС и Нефтебаз"
-- ADD_TRANZIT=1 - Добавить транзит
-- ONLY_FAS=0 - Наливные + фасовка без ТТХ
-- ONLY_FAS=1 - Фасовка с ТТХ
-- ONLY_FAS=2 - Только наливные (сгруппированная дизелька) 
-- ONLY_FAS=3 - Фасовка с ТТХ сгруппированные в ФАСОВАННЫЕ МАСЛА
-- ONLY_FAS=4 - Наливные + Фасовка + ТТХ + Сопутствующие
-- TIP_CALC=0 - Рассчитывать ВСЕ
-- TIP_CALC=1 - Рассчитывать ПЛАН
-- TIP_CALC=2 - Рассчитывать ФАКТ (БЕЗ ОСТАТКОВ)
-- TIP_CALC=3 - Рассчитывать ФАКТ+ОСТАТКИ
-- TIP_CALC=4 - Рассчитывать ОСТАТКИ
-- TIP_CALC=5 - Рассчитывать ПЛАН+ФАКТ (БЕЗ ОСТАТКОВ)
-- ONLY_MAIN=0 - все филиалы 
-- ONLY_MAIN=1 -- только головное НПО (без Архангельска)
-- FAS_IN_RUB=0 - фасовка в тн
-- FAS_IN_RUB=1 - фасовка в рублях
PROCEDURE FIL_SUT_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2,
          ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2,
		  ADD_TRANZIT NUMBER DEFAULT 0, ONLY_FAS NUMBER DEFAULT 0, TIP_CALC NUMBER DEFAULT 0, 
		  ONLY_MAIN NUMBER DEFAULT 0, FAS_IN_RUB NUMBER DEFAULT 0, pPROD_TYPE NUMBER DEFAULT 5) AS
  nFILIAL NUMBER;
  cFILIAL_NAME VARCHAR2(200);
  nORG_STRU NUMBER;
  nORG_KIND_GRP NUMBER;
  cPROD_GR VARCHAR2(5);
  cPROD VARCHAR2(5);
  nAZC_PROD_GR NUMBER;
  nAZC_PROD NUMBER;
  dDATE_BEG DATE;
  dDATE_END DATE;
  dDATE_PLAN DATE;
  cnt1 NUMBER;
  Koef FLOAT;
  dMON_END DATE;
  vOSUSER VARCHAR2(50);
  vTERMINAL VARCHAR2(50);
BEGIN

  vTERMINAL := For_Init.GetCurrTerm;
  vOSUSER := For_Init.GetCurrUser;

  dDATE_END:=TO_DATE(date_end,'dd.mm.yyyy');
  dDATE_BEG:=TO_DATE(date_beg,'dd.mm.yyyy');
  dDATE_PLAN:=TRUNC(dDATE_BEG,'MONTH');
  dMON_END:=LAST_DAY(dDATE_END);
  Koef:=(dDATE_END-dDATE_PLAN+1)/(dMON_END-dDATE_PLAN+1);

  IF FILIAL_ID<>'*' AND FILIAL_ID IS NOT NULL THEN
    nFILIAL:=TO_NUMBER(FILIAL_ID);
  ELSE
    nFILIAL:=NULL;
  END IF;

  IF ORG_KIND_GRP<>'*' AND ORG_KIND_GRP IS NOT NULL THEN
    nORG_KIND_GRP:=TO_NUMBER(ORG_KIND_GRP);
  ELSE
    nORG_KIND_GRP:=NULL;
  END IF;

  IF ORG_STRU_ID<>'*' AND ORG_STRU_ID IS NOT NULL THEN
    nORG_STRU:=TO_NUMBER(ORG_STRU_ID);
    IF nORG_STRU=9049 THEN
      nORG_STRU:=28;
    END IF;	
  ELSE
    nORG_STRU:=NULL;
  END IF;
  
  IF PROD_GR_id<>'*' AND PROD_GR_id IS NOT NULL THEN
    cPROD_GR:=PROD_GR_id;
  ELSE
    cPROD_GR:=NULL;
  END IF;

  IF PROD_id<>'*' AND PROD_id IS NOT NULL THEN
    cPROD:=PROD_id;
  ELSE
    cPROD:=NULL;
  END IF;

  -- Очистка таблицы PLAN_FACT
  DELETE
    FROM PLAN_FACT_REALIZ
   WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
     AND TERMINAL_NAME = vTERMINAL
     AND OSUSER_NAME = vOSUSER;
  COMMIT;

  -- 4) План реализации
  IF TIP_CALC=0 OR TIP_CALC=1 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	   ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	   PROD_ID_NPR, PLAN_REAL_VES,NORMA_REAL_VES)
    SELECT
      'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
	  dDATE_BEG,
  	  dDATE_END,
	  dDATE_PLAN,
      C.FILIAL_ID, -- Филиал
      KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
      KLS_ORG_KIND.ID, -- Вид подразделения
      KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
      C.ID AS ORG_STRU_ORDER, -- Подразделение
      C.ID AS ORG_STRU_ID, -- Подразделение
      C.NAME AS ORG_STRU_NAME, -- Подразделение
      A.PROD_ID_NPR, -- Продукт
      SUM(NVL((CASE
	       WHEN KLS_PROD.FASOVKA=1 AND FAS_IN_RUB=1 THEN A.SUMMA
		   ELSE A.VES*1000
		 END),0)) AS PLAN_REAL_VES, -- План в кг (фасовка - в руб)
      SUM(NVL((CASE
	       WHEN KLS_PROD.FASOVKA=1 AND FAS_IN_RUB=1 THEN A.SUMMA
		   ELSE A.VES*1000
		 END)*Koef,0)) AS NORMA_REAL_VES -- Норма
    FROM PLAN_REALIZ A, KLS_PROD,
      V_ORG_STRUCTURE C,KLS_ORG_KIND
    WHERE A.DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
      AND A.SKLAD_ID=C.ID
	  AND A.SKLAD_ID NOT IN (28,9049)
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
      AND C.ORG_KIND_ID IN (1,5,11,12,13)
	  AND A.PROD_ID_NPR=KLS_PROD.ID_NPR
	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	  AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
      AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	  AND (A.SKLAD_ID=NVL(nORG_STRU,A.SKLAD_ID)) -- подразделение (АЗС)
	  AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- Филиал
      AND A.PARUS_RN IS NULL -- Без данных из Паруса
    GROUP BY
      C.FILIAL_ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      A.PROD_ID_NPR;
	
    COMMIT;
  END IF; -- TIP_CALC	
  
  -- 1) Факт реализации (с АЗС и Нефтебаз)
  IF TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3 OR TIP_CALC=5 THEN
    INSERT INTO PLAN_FACT_REALIZ
    (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	 ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
	 PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
    SELECT
    'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
	dDATE_BEG,
	dDATE_END,
	dDATE_PLAN,
    C.FILIAL_ID, -- Филиал
    KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
    KLS_ORG_KIND.ID, -- Вид подразделения
    KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
    C.ID AS ORG_STRU_ORDER, -- Подразделение
    C.ID AS ORG_STRU_ID, -- Подразделение
    C.NAME AS ORG_STRU_NAME, -- Подразделение
    AZC_OPERATION.PROD_ID_NPR, -- Продукт
    SUM(AZC_OPERATION.VES) AS ALL_VES, -- Отгружено за период
    ROUND(SUM(AZC_OPERATION.VES)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
    SUM(AZC_OPERATION.SUMMA) AS ALL_SUMMA, -- Отгружено за период
    ROUND(SUM(AZC_OPERATION.SUMMA)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
    FROM AZC_OPERATION,AZC_TYPE_OPERATION,KLS_PROD,
    V_ORG_STRUCTURE C,KLS_ORG_KIND
    WHERE AZC_OPERATION.TYPE_OPER_ID=AZC_TYPE_OPERATION.ID
    AND AZC_TYPE_OPERATION.ID=1
    AND AZC_OPERATION.DATE_OPER>=dDATE_BEG
    AND AZC_OPERATION.DATE_OPER<=dDATE_END
	AND AZC_OPERATION.ORG_STRU_ID not in (44,9049)  -- Без Автоналива  и Архэнерго
    AND AZC_OPERATION.ORG_STRU_ID=C.ID
    AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
    AND C.ORG_KIND_ID IN (1,5,11,12,13)
	AND AZC_OPERATION.PROD_ID_NPR=KLS_PROD.ID_NPR
	AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
    AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	AND (AZC_OPERATION.ORG_STRU_ID=NVL(nORG_STRU,AZC_OPERATION.ORG_STRU_ID)) -- подразделение (АЗС)
	AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- Филиал
	AND AZC_OPERATION.DISCOUNT<>815
    GROUP BY
      C.FILIAL_ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      AZC_OPERATION.PROD_ID_NPR;

    COMMIT;
  END IF; -- TIP_CALC	

  IF (TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3 OR TIP_CALC=5) AND
     (nFILIAL IS NULL OR nFILIAL=31) AND 
     (nORG_KIND_GRP IS NULL OR nORG_KIND_GRP=1) AND
	 (nORG_STRU IS NULL OR nORG_STRU=44) THEN

	 -- 2) Добавить Автоналив
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	   ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	   PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
    SELECT
      'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
  	  dDATE_BEG,
	  dDATE_END,
	  dDATE_PLAN,
      31 AS FILIAL_ID, -- Филиал
      KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
      KLS_ORG_KIND.ID, -- Вид подразделения
      KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
      C.ID AS ORG_STRU_ORDER, -- Подразделение
      C.ID AS ORG_STRU_ID, -- Подразделение
      C.NAME AS ORG_STRU_NAME, -- Подразделение
      B.PROD_ID_NPR as PROD_ID_NPR, -- Продукт
      SUM(A.NQUANTALT) AS ALL_VES, -- Отгружено за период
      ROUND(SUM(A.NQUANTALT)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
      SUM(A.NSUMMWITHNDS) AS ALL_SUMMA, -- Отгружено за период
      ROUND(SUM(A.NSUMMWITHNDS)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
    FROM V_PARUS_TRANSINVCUST A,PARUS_NOMEN_PROD_LINK B,ORG_STRUCTURE C,KLS_ORG_KIND,KLS_PROD 
    WHERE A.sSTORE_CATALOG_NAME='Автоналив'
      AND A.NNOMEN=B.NOMEN_RN
      AND A.dDOCDATE>=dDATE_BEG
      AND A.dDOCDATE<=dDATE_END
	  AND B.PROD_ID_NPR=KLS_PROD.ID_NPR
--	  AND B.IS_ACTUAL=1
	  AND C.ID=44 
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
  	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
 	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
      AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
    GROUP BY
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      B.PROD_ID_NPR;
    COMMIT;
  END IF;	

  IF (TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3) AND
     (nFILIAL IS NULL OR nFILIAL=31) AND 
     (nORG_KIND_GRP IS NULL OR nORG_KIND_GRP=1) AND
	 (nORG_STRU IS NULL OR nORG_STRU=2023) THEN
	
/*	 -- 3) Добавить Маслобазу (Дежневский нефтесклад) - НАЛИВНЫЕ МАСЛА
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	   ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	   PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
    SELECT
      'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
  	  dDATE_BEG,
	  dDATE_END,
	  dDATE_PLAN,
      31 AS FILIAL_ID, -- Филиал
      KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
      KLS_ORG_KIND.ID, -- Вид подразделения
      KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
      C.ID AS ORG_STRU_ORDER, -- Подразделение
      C.ID AS ORG_STRU_ID, -- Подразделение
      C.NAME AS ORG_STRU_NAME, -- Подразделение
      KLS_PROD.ID_NPR as PROD_ID_NPR, -- Продукт
      SUM(A.NQUANTALT) AS ALL_VES, -- Отгружено за период
      ROUND(SUM(A.NQUANTALT)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
      SUM(A.NSUMMWITHNDS) AS ALL_SUMMA, -- Отгружено за период
      ROUND(SUM(A.NSUMMWITHNDS)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
    FROM V_PARUS_TRANSINVCUST A,ORG_STRUCTURE C,KLS_ORG_KIND,KLS_PROD 
    WHERE A.sSTORE_CATALOG_NAME='Маслобаза'
	  AND A.sCATALOG_NAME='Маслобаза_налив'
      AND A.dDOCDATE>=dDATE_BEG
      AND A.dDOCDATE<=dDATE_END
	  AND KLS_PROD.ID_NPR='11900'
	  AND C.ID=2023 
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
  	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
 	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
      AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
    GROUP BY
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      KLS_PROD.ID_NPR;
    COMMIT;

	 -- 3) Добавить Маслобазу (Дежневский нефтесклад) - ФАСОВАННЫЕ МАСЛА
    INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	   ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	   PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
    SELECT
      'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
  	  dDATE_BEG,
	  dDATE_END,
	  dDATE_PLAN,
      31 AS FILIAL_ID, -- Филиал
      KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
      KLS_ORG_KIND.ID, -- Вид подразделения
      KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
      C.ID AS ORG_STRU_ORDER, -- Подразделение
      C.ID AS ORG_STRU_ID, -- Подразделение
      C.NAME AS ORG_STRU_NAME, -- Подразделение
      KLS_PROD.ID_NPR as PROD_ID_NPR, -- Продукт
      SUM(A.NQUANTALT) AS ALL_VES, -- Отгружено за период
      ROUND(SUM(A.NQUANTALT)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
      SUM(A.NSUMMWITHNDS) AS ALL_SUMMA, -- Отгружено за период
      ROUND(SUM(A.NSUMMWITHNDS)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
    FROM V_PARUS_TRANSINVCUST A,ORG_STRUCTURE C,KLS_ORG_KIND,KLS_PROD 
    WHERE A.sSTORE_CATALOG_NAME='Маслобаза'
	  AND A.sCATALOG_NAME='Маслобаза_фас'
      AND A.dDOCDATE>=dDATE_BEG
      AND A.dDOCDATE<=dDATE_END
	  AND KLS_PROD.ID_NPR='80018'
	  AND C.ID=2023 
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
  	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
 	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	  AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
    GROUP BY
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      KLS_PROD.ID_NPR;*/
    COMMIT;
  	   
  END IF;	 
  
  IF ADD_TRANZIT=1 OR nORG_STRU=28 THEN
    -- 4) Транзит
	IF (TIP_CALC=0 OR TIP_CALC=2 OR TIP_CALC=3) THEN

      -- Коми	  
      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	     ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	     PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
      SELECT
        'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	    dDATE_BEG,
  	    dDATE_END,
        dDATE_PLAN,
        31 AS FILIAL_ID, -- Филиал
        0 AS ORG_KIND_ORDER, -- Вид подразделения
        KLS_ORG_KIND.ID, -- Вид подразделения
        KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
        0 AS ORG_STRU_ORDER, -- Подразделение
        C.ID AS ORG_STRU_ID, -- Подразделение
        C.NAME AS ORG_STRU_NAME, -- Подразделение
        KVIT.PROD_ID_NPR, -- Продукт
        SUM(KVIT.VES_BRUTTO*1000) AS ALL_VES, -- Отгружено за период
        ROUND(SUM(KVIT.VES_BRUTTO*1000)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
	    SUM(KVIT.VES_BRUTTO*NVL(snp.PRICE,0)) as ALL_SUMMA,
        ROUND(SUM(KVIT.VES_BRUTTO*NVL(snp.PRICE,0))/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
      FROM KVIT,MONTH,V_KLS_PLANSTRU D,KLS_PROD,
        V_ORG_STRUCTURE C,KLS_ORG_KIND,ZAKAZ unp,ZAKAZ snp, KLS_DOG, KLS_DOG ORIG_DOG
      WHERE KVIT.NOM_ZD=MONTH.NOM_ZD AND MONTH.ZAKAZ_ID=unp.ID AND unp.LINK_ID=snp.ID
	    AND snp.DOG_ID=KLS_DOG.ID AND MONTH.DOG_ID=ORIG_DOG.ID AND ORIG_DOG.PREDPR_ID=2641 AND KLS_DOG.PREDPR_ID<>2641 -- Транзит
		AND NVL(D.REGION_ID,0)<>21 -- Без Архангельска  
		AND snp.POLUCH_ID<>3067 -- Без Котласа  
        AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR
        AND snp.PLANSTRU_ID=D.ID
        AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
        AND C.ID=28
	    AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
        AND MONTH.DATE_PLAN>=dDATE_PLAN
        AND KVIT.DATE_OTGR BETWEEN dDATE_BEG AND dDATE_END
	    AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	    AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
  	    AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
        AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	    AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
        AND (31=NVL(nFILIAL,31)) -- Только Ухта
      GROUP BY
        KLS_ORG_KIND.ID,
        KLS_ORG_KIND.NAME,
        C.ID,
        C.NAME,
        KVIT.PROD_ID_NPR;

      -- Архангельск	  
      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	     ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	     PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
      SELECT
        'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	    dDATE_BEG,
  	    dDATE_END,
        dDATE_PLAN,
        40 AS FILIAL_ID, -- Филиал
        0 AS ORG_KIND_ORDER, -- Вид подразделения
        KLS_ORG_KIND.ID, -- Вид подразделения
        KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
        0 AS ORG_STRU_ORDER, -- Подразделение
        C.ID AS ORG_STRU_ID, -- Подразделение
        C.NAME AS ORG_STRU_NAME, -- Подразделение
        KVIT.PROD_ID_NPR, -- Продукт
        SUM(KVIT.VES_BRUTTO*1000) AS ALL_VES, -- Отгружено за период
        ROUND(SUM(KVIT.VES_BRUTTO*1000)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
	    SUM(KVIT.VES_BRUTTO*NVL(snp.PRICE,0)) as ALL_SUMMA,
        ROUND(SUM(KVIT.VES_BRUTTO*NVL(snp.PRICE,0))/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
      FROM KVIT,MONTH,V_KLS_PLANSTRU D,KLS_PROD,
        V_ORG_STRUCTURE C,KLS_ORG_KIND,ZAKAZ unp,ZAKAZ snp, KLS_DOG, KLS_DOG ORIG_DOG
      WHERE KVIT.NOM_ZD=MONTH.NOM_ZD AND MONTH.ZAKAZ_ID=unp.ID AND unp.LINK_ID=snp.ID
	    AND snp.DOG_ID=KLS_DOG.ID AND MONTH.DOG_ID=ORIG_DOG.ID AND ORIG_DOG.PREDPR_ID=2641 AND KLS_DOG.PREDPR_ID<>2641 -- Транзит
		AND NVL(D.REGION_ID,0)=21 -- Архангельск  
		AND snp.POLUCH_ID<>3067 -- Без Котласа  
        AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR
        AND snp.PLANSTRU_ID=D.ID
        AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
        AND C.ID=28
	    AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
        AND MONTH.DATE_PLAN>=dDATE_PLAN
        AND KVIT.DATE_OTGR BETWEEN dDATE_BEG AND dDATE_END
	    AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	    AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
  	    AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
        AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	    AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
        AND (40=NVL(nFILIAL,40)) -- Только Архангельск
      GROUP BY
        KLS_ORG_KIND.ID,
        KLS_ORG_KIND.NAME,
        C.ID,
        C.NAME,
        KVIT.PROD_ID_NPR;

      -- Котлас	  
      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	     ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	     PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
      SELECT
        'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	    dDATE_BEG,
  	    dDATE_END,
        dDATE_PLAN,
        75 AS FILIAL_ID, -- Филиал
        0 AS ORG_KIND_ORDER, -- Вид подразделения
        KLS_ORG_KIND.ID, -- Вид подразделения
        KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
        0 AS ORG_STRU_ORDER, -- Подразделение
        C.ID AS ORG_STRU_ID, -- Подразделение
        C.NAME AS ORG_STRU_NAME, -- Подразделение
        KVIT.PROD_ID_NPR, -- Продукт
        SUM(KVIT.VES_BRUTTO*1000) AS ALL_VES, -- Отгружено за период
        ROUND(SUM(KVIT.VES_BRUTTO*1000)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
	    SUM(KVIT.VES_BRUTTO*NVL(snp.PRICE,0)) as ALL_SUMMA,
        ROUND(SUM(KVIT.VES_BRUTTO*NVL(snp.PRICE,0))/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
      FROM KVIT,MONTH,V_KLS_PLANSTRU D,KLS_PROD,
        V_ORG_STRUCTURE C,KLS_ORG_KIND,ZAKAZ unp,ZAKAZ snp, KLS_DOG, KLS_DOG ORIG_DOG
      WHERE KVIT.NOM_ZD=MONTH.NOM_ZD AND MONTH.ZAKAZ_ID=unp.ID AND unp.LINK_ID=snp.ID
	    AND snp.DOG_ID=KLS_DOG.ID AND MONTH.DOG_ID=ORIG_DOG.ID AND ORIG_DOG.PREDPR_ID=2641 AND KLS_DOG.PREDPR_ID<>2641 -- Транзит
		AND snp.POLUCH_ID=3067 -- Котлас  
        AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR
        AND snp.PLANSTRU_ID=D.ID
        AND D.ID<>97-- План по ЛУКОЙЛ-СНП без отгрузки на хранение
        AND C.ID=28
	    AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
        AND MONTH.DATE_PLAN>=dDATE_PLAN
        AND KVIT.DATE_OTGR BETWEEN dDATE_BEG AND dDATE_END
	    AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	    AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
  	    AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
        AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	    AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
        AND (75=NVL(nFILIAL,75)) -- Только Котлас
      GROUP BY
        KLS_ORG_KIND.ID,
        KLS_ORG_KIND.NAME,
        C.ID,
        C.NAME,
        KVIT.PROD_ID_NPR;
		
/*      INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	     ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	     PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
      SELECT
        'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	    dDATE_BEG,
  	    dDATE_END,
        dDATE_PLAN,
        31 AS FILIAL_ID, -- Филиал
        0 AS ORG_KIND_ORDER, -- Вид подразделения
        KLS_ORG_KIND.ID, -- Вид подразделения
        KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
        0 AS ORG_STRU_ORDER, -- Подразделение
        C.ID AS ORG_STRU_ID, -- Подразделение
        C.NAME AS ORG_STRU_NAME, -- Подразделение
        B.PROD as PROD_ID_NPR, -- Продукт
        SUM(A.NQUANTALT) AS ALL_VES, -- Отгружено за период
        ROUND(SUM(A.NQUANTALT)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
        SUM(A.NSUMMWITHNDS) AS ALL_SUMMA, -- Отгружено за период
        ROUND(SUM(A.NSUMMWITHNDS)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
      FROM V_PARUS_TRANSINVCUST A,KLS_PROD_NOMENKLATOR B,ORG_STRUCTURE C,KLS_ORG_KIND,KLS_PROD 
    WHERE A.sDOCTYPE='СВЕД' -- Транзит с УНП
	  AND TRIM(A.sAGENT_NAME)<>'ОАО "Архангельская генерирующая компания"' -- Без Архангельска
      AND A.NNOMMODIF=B.PARUS_RN
      AND A.dDOCDATE>=dDATE_BEG
      AND A.dDOCDATE<=dDATE_END
	  AND B.PROD=KLS_PROD.ID_NPR
	  AND B.IS_ACTUAL=1
	  AND C.ID=28 
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
  	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
 	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
      AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
      AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
      AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
      AND (31=NVL(nFILIAL,31)) -- Только Ухта
    GROUP BY
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      B.PROD;*/

		-- Архангельский транзит 
/*  INSERT INTO PLAN_FACT_REALIZ
        (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	     ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	     PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
      SELECT
        'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	    dDATE_BEG,
  	    dDATE_END,
        dDATE_PLAN,
        40 AS FILIAL_ID, -- Филиал
        0 AS ORG_KIND_ORDER, -- Вид подразделения
        KLS_ORG_KIND.ID, -- Вид подразделения
        KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
        0 AS ORG_STRU_ORDER, -- Подразделение
        C.ID AS ORG_STRU_ID, -- Подразделение
        C.NAME AS ORG_STRU_NAME, -- Подразделение
        B.PROD as PROD_ID_NPR, -- Продукт
        SUM(A.NQUANTALT) AS ALL_VES, -- Отгружено за период
        ROUND(SUM(A.NQUANTALT)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
        SUM(A.NSUMMWITHNDS) AS ALL_SUMMA, -- Отгружено за период
        ROUND(SUM(A.NSUMMWITHNDS)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
      FROM V_PARUS_TRANSINVCUST A,KLS_PROD_NOMENKLATOR B,ORG_STRUCTURE C,KLS_ORG_KIND,KLS_PROD 
    WHERE A.sDOCTYPE='СВЕД' -- Транзит с УНП
	  AND TRIM(A.sAGENT_NAME)='ОАО "Архангельская генерирующая компания"' -- Только Архангельск
      AND A.NNOMMODIF=B.PARUS_RN
      AND A.dDOCDATE>=dDATE_BEG
      AND A.dDOCDATE<=dDATE_END
	  AND B.PROD=KLS_PROD.ID_NPR
	  AND B.IS_ACTUAL=1
	  AND C.ID=28 
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
  	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
 	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
      AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
      AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
      AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
      AND (40=NVL(nFILIAL,40)) -- Только Ухта
    GROUP BY
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      B.PROD;
	*/  

  /*    INSERT INTO PLAN_FACT_REALIZ
    (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	 ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
	 PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
    SELECT
    'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
	dDATE_BEG,
	dDATE_END,
	dDATE_PLAN,
    40 as FILIAL_ID, -- Филиал
    0 AS ORG_KIND_ORDER, -- Вид подразделения
    KLS_ORG_KIND.ID, -- Вид подразделения
    KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
    0 AS ORG_STRU_ORDER, -- Подразделение
    C.ID AS ORG_STRU_ID, -- Подразделение
    C.NAME AS ORG_STRU_NAME, -- Подразделение
    AZC_OPERATION.PROD_ID_NPR, -- Продукт
    SUM(AZC_OPERATION.VES) AS ALL_VES, -- Отгружено за период
    ROUND(SUM(AZC_OPERATION.VES)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
    SUM(AZC_OPERATION.SUMMA) AS ALL_SUMMA, -- Отгружено за период
    ROUND(SUM(AZC_OPERATION.SUMMA)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
    FROM AZC_OPERATION,AZC_TYPE_OPERATION,KLS_PROD,
    V_ORG_STRUCTURE C,KLS_ORG_KIND
    WHERE AZC_OPERATION.TYPE_OPER_ID=AZC_TYPE_OPERATION.ID
    AND AZC_TYPE_OPERATION.ID=1
    AND AZC_OPERATION.DATE_OPER>=dDATE_BEG
    AND AZC_OPERATION.DATE_OPER<=dDATE_END
	AND AZC_OPERATION.ORG_STRU_ID=9049  -- Архэнерго
    AND C.ID=28
    AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
	AND AZC_OPERATION.PROD_ID_NPR=KLS_PROD.ID_NPR
	AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
    AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
	AND (40=NVL(nFILIAL,40)) -- Только Архангельск 
	AND AZC_OPERATION.DISCOUNT<>815
    GROUP BY
      KLS_ORG_KIND.ID,
      KLS_ORG_KIND.NAME,
      C.ID,
      C.NAME,
      AZC_OPERATION.PROD_ID_NPR;*/

	END IF; -- TIP_CALC  

	
    -- 4) План поставок по транзиту
	IF (TIP_CALC=0 OR TIP_CALC=1) THEN  


      INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	    ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
	    PROD_ID_NPR, PLAN_REAL_VES,NORMA_REAL_VES)
/*       SELECT
         'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	     dDATE_BEG,
         dDATE_END,
         dDATE_PLAN,
         DECODE(D.REGION_ID,21,40,31) AS FILIAL_ID, -- Филиал
         0 AS ORG_KIND_ORDER, -- Вид подразделения
         KLS_ORG_KIND.ID, -- Вид подразделения
         KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
         0 AS ORG_STRU_ORDER, -- Подразделение
         C.ID AS ORG_STRU_ID, -- Подразделение
         C.NAME AS ORG_STRU_NAME, -- Подразделение
         A.PROD_ID_NPR, -- Продукт
         SUM(A.PLAN_VES*1000) AS PLAN_REAL_VES, -- План в кг
         SUM(A.PLAN_VES*1000*Koef) AS NORMA_REAL_VES -- Норма
       FROM PLAN_POST A, PLAN_PERIODS B, KLS_PROD,
            V_ORG_STRUCTURE C,v_kls_planstru D,KLS_ORG_KIND  
       WHERE A.PLAN_PER_ID=B.ID
	     AND B.PLAN_ID IN (12,13)
	     AND B.DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
     	 AND C.ID=28
	     AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
		 AND A.PLANSTRU_ID=D.ID
         AND D.SPF_NAME='ТРАНЗИТ'
		 AND D.ID<>97 -- План по ЛУКОЙЛ-СНП без отгрузки на хранение
         AND A.PROD_ID_NPR=KLS_PROD.ID_NPR
	     AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	     AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	     AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
         AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
  	     AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
         AND (DECODE(D.REGION_ID,21,40,31)=nFILIAL OR nFILIAL IS NULL) -- Филиал
       GROUP BY
         DECODE(D.REGION_ID,21,40,31),
         KLS_ORG_KIND.ID,
         KLS_ORG_KIND.NAME,
         C.ID,
         C.NAME,
         A.PROD_ID_NPR;*/
       SELECT
         'СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)' AS TIP_ROW,
	     dDATE_BEG,
  	     dDATE_END,
	     dDATE_PLAN,
         CC.FILIAL_ID, -- Филиал
         0 AS ORG_KIND_ORDER, -- Вид подразделения
         KLS_ORG_KIND.ID, -- Вид подразделения
         KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
         0 AS ORG_STRU_ORDER, -- Подразделение
         C.ID AS ORG_STRU_ID, -- Подразделение
         C.NAME AS ORG_STRU_NAME, -- Подразделение
         A.PROD_ID_NPR, -- Продукт
         SUM(NVL((CASE
	       WHEN KLS_PROD.FASOVKA=1 AND FAS_IN_RUB=1 THEN A.SUMMA
		   ELSE A.VES*1000
		 END),0)) AS PLAN_REAL_VES, -- План в кг (фасовка - в руб)
         SUM(NVL((CASE
	       WHEN KLS_PROD.FASOVKA=1 AND FAS_IN_RUB=1 THEN A.SUMMA
		   ELSE A.VES*1000
		 END)*Koef,0)) AS NORMA_REAL_VES -- Норма
       FROM PLAN_REALIZ A, KLS_PROD,
         V_ORG_STRUCTURE C,KLS_ORG_KIND,V_ORG_STRUCTURE CC
       WHERE A.DATE_PLAN BETWEEN dDATE_PLAN AND dDATE_END
         AND DECODE(A.SKLAD_ID,9049,28,A.SKLAD_ID)=C.ID
         AND A.SKLAD_ID=CC.ID
		 AND A.SKLAD_ID IN (28,9049)
         AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
--         AND C.ORG_KIND_ID IN (1,5,11,12,13)
   	     AND A.PROD_ID_NPR=KLS_PROD.ID_NPR
	     AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	     AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	     AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
         AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	     AND (C.ID=NVL(nORG_STRU,C.ID)) -- подразделение (АЗС)
	     AND (CC.FILIAL_ID=NVL(nFILIAL,CC.FILIAL_ID)) -- Филиал
         AND A.PARUS_RN IS NULL -- Без данных из Паруса
       GROUP BY
         CC.FILIAL_ID,
         KLS_ORG_KIND.ID,
         KLS_ORG_KIND.ID,
         KLS_ORG_KIND.NAME,
         C.ID,
         C.NAME,
         A.PROD_ID_NPR;
		 
	END IF; -- TIP_CALC
    COMMIT;
  END IF;

  IF (TIP_CALC=0 OR TIP_CALC=3 OR TIP_CALC=4) THEN

    SELECT COUNT(*) INTO cnt1 FROM OSTAT_KONS WHERE DATE_OST=dDATE_END+1;
    IF cnt1>0 THEN
      -- 7) Остатки на конец периода (АЗС и Нефтебазы) по данным консолидированной отчетности
      INSERT INTO PLAN_FACT_REALIZ
      (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	   ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
  	   PROD_ID_NPR, END_OST)
      SELECT
      'СУТОЧНАЯ РЕАЛИЗАЦИЯ',
	  dDATE_BEG,
	  dDATE_END,
	  dDATE_PLAN,
      C.FILIAL_ID, -- Филиал
      KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
      KLS_ORG_KIND.ID, -- Вид подразделения
      KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
      C.ID AS ORG_STRU_ORDER, -- Подразделение
      C.ID AS ORG_STRU_ID, -- Подразделение
      C.NAME AS ORG_STRU_NAME, -- Подразделение
      KLS_PROD.ID_NPR AS PROD_ID_NPR, -- Продукт
      SUM(KG) AS END_OST -- Остаток в кг
      FROM OSTAT_KONS, KLS_PROD_KONS,V_ORG_STRUCTURE C,KLS_ORG_KIND,KLS_PROD
      WHERE DECODE(OSTAT_KONS.ORG_STRU_ID,2018,43,OSTAT_KONS.ORG_STRU_ID)=C.ID
      AND OSTAT_KONS.PROD_KONS_ID=KLS_PROD_KONS.ID
      AND KLS_PROD_KONS.PROD_ID_NPR=KLS_PROD.ID_NPR
      AND OSTAT_KONS.DATE_OST=dDATE_END+1
      AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
      AND C.ORG_KIND_ID IN (1,5,11,12,13)
  	  AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	  AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
	  AND (KLS_PROD.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,KLS_PROD.FASOVKA))
      AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	  AND (C.ORG_KIND_ID=NVL(nORG_STRU,C.ORG_KIND_ID)) -- подразделение (АЗС)
  	  AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- Филиал
      GROUP BY
      C.FILIAL_ID, -- Филиал
      KLS_ORG_KIND.ID, -- Вид подразделения
      KLS_ORG_KIND.NAME, -- Вид подразделения
      C.ID, -- Подразделение
      C.NAME, -- Подразделение
      KLS_PROD.ID_NPR; -- Продукт

  	  COMMIT;  

    ELSE

      -- 8) Остатки на конец периода (АЗС и Нефтебазы) по оперативным данным филиалов (AZC_OPERATION)
      FOR lcur IN (SELECT DISTINCT /* Выборка всех комбинаций Склад/продукт за последние 2-3 месяца - для ускорения */
                 C.FILIAL_ID, -- Филиал 
				 A.PROD_ID_NPR,
                 KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
                 KLS_ORG_KIND.ID as ORG_KIND_ID, -- Вид подразделения
                 KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
                 C.ID AS ORG_STRU_ORDER, -- Подразделение
                 C.ID AS ORG_STRU_ID, -- Подразделение
                 C.NAME AS ORG_STRU_NAME -- Подраздел				 
               FROM AZC_OPERATION A, KLS_PROD B, v_org_structure C, KLS_ORG_KIND
			   WHERE A.DATE_OPER>=ADD_MONTHS(TRUNC(dDATE_BEG,'MONTH'),-2)
                 AND A.DATE_OPER<=dDATE_END
                 AND A.ORG_STRU_ID=C.ID
                 AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
                 AND C.ORG_KIND_ID IN (1,5,11,12,13)
                 AND A.PROD_ID_NPR=B.ID_NPR
                 AND (B.ID_GROUP_NPR=NVL(cPROD_GR,B.ID_GROUP_NPR))
                 AND (B.ID_NPR=NVL(cPROD,B.ID_NPR))
 	             AND (B.FASOVKA=DECODE(ONLY_FAS,1,1,2,0,3,1,B.FASOVKA))
                 AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
                 AND (A.ORG_STRU_ID=NVL(nORG_STRU,A.ORG_STRU_ID)) -- подразделение (АЗС)
                 AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- Филиал
				) LOOP 
                      
        INSERT INTO PLAN_FACT_REALIZ
          (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
  	       ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
     	   PROD_ID_NPR, END_OST)
        VALUES (
          'СУТОЧНАЯ РЕАЛИЗАЦИЯ',
	      dDATE_BEG,
	      dDATE_END,
    	  dDATE_PLAN,
          lcur.FILIAL_ID, -- Филиал
          lcur.ORG_KIND_ORDER, -- Вид подразделения
          lcur.ORG_KIND_ID, -- Вид подразделения
          lcur.ORG_KIND_NAME, -- Вид подразделения
          lcur.ORG_STRU_ORDER, -- Подразделение
          lcur.ORG_STRU_ID, -- Подразделение
          lcur.ORG_STRU_NAME, -- Подразделение
          lcur.PROD_ID_NPR, -- Продукт
          GET_OST_END_MAS(lcur.ORG_STRU_ID,lcur.PROD_ID_NPR,dDATE_END) -- Остаток в тоннах на конец dDATE_END
         );
    	COMMIT; 
      END LOOP;
    END IF; -- cnt1>0
  END IF; -- TIP_CALC	  

  COMMIT;
  
  
  -- Фильтр по филиалу
/*  IF nFILIAL IS NOT NULL THEN
    DELETE
      FROM PLAN_FACT_REALIZ
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND (FILIAL_ID<>nFILIAL OR FILIAL_ID=0);
	COMMIT;
  END IF;*/

  -- Удаление ненужного
  -- Архангельск
  IF ONLY_MAIN=1 THEN
    DELETE
      FROM PLAN_FACT_REALIZ
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
       AND FILIAL_ID=40;
    COMMIT;
  END IF;	

  IF ONLY_FAS=0 THEN
    -- Удаление ТТХ
    DELETE
      FROM PLAN_FACT_REALIZ
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
       AND PROD_ID_NPR='80020';
    COMMIT;
  END IF;	

  IF ONLY_FAS<>4 THEN
    -- Удаление сопутствующих
    DELETE
      FROM PLAN_FACT_REALIZ
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
       AND PROD_ID_NPR in ('80019','10000');
    COMMIT;
  END IF;	
  
  IF ONLY_FAS=3 THEN
    -- Переводим все в фасованные масла
	INSERT INTO PLAN_FACT_REALIZ (TIP_ROW, DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, FILIAL_NAME, 
	  REGION_ORDER, REGION_NAME, NAPR_ORDER, NAPR_NAME, PROD_ID_NPR, PROD_ORDER, PROD_NAME, GROUP_ORDER, GROUP_NAME, 
  	  BEGIN_OST, PLAN_POST_VES, NORMA_POST_VES, FACT_POST_VES, RESURS, PLAN_REAL_VES, NORMA_REAL_VES, FACT_REAL_VES, 
	  END_OST, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME, AVG_SUT_REAL_VES, 
	  GROUP_FULL_NAME, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
	SELECT TIP_ROW, DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, FILIAL_NAME, 
	  REGION_ORDER, REGION_NAME, NAPR_ORDER, NAPR_NAME, '80018.', PROD_ORDER, PROD_NAME, GROUP_ORDER, GROUP_NAME, 
  	  BEGIN_OST, PLAN_POST_VES, NORMA_POST_VES, FACT_POST_VES, RESURS, PLAN_REAL_VES, NORMA_REAL_VES, FACT_REAL_VES, 
	  END_OST, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME, AVG_SUT_REAL_VES, 
	  GROUP_FULL_NAME, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA
	FROM PLAN_FACT_REALIZ
    WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
      AND TERMINAL_NAME = vTERMINAL
      AND OSUSER_NAME = vOSUSER
	  AND PROD_ID_NPR<>'80018.';
	
	DELETE FROM PLAN_FACT_REALIZ   
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND PROD_ID_NPR<>'80018.';
	   
	UPDATE PLAN_FACT_REALIZ SET PROD_ID_NPR='80018'   
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND PROD_ID_NPR='80018.';
  END IF;  

  IF ONLY_FAS=2 THEN
    -- Группируем дизельку
	INSERT INTO PLAN_FACT_REALIZ (TIP_ROW, DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, FILIAL_NAME, 
	  REGION_ORDER, REGION_NAME, NAPR_ORDER, NAPR_NAME, PROD_ID_NPR, PROD_ORDER, PROD_NAME, GROUP_ORDER, GROUP_NAME, 
  	  BEGIN_OST, PLAN_POST_VES, NORMA_POST_VES, FACT_POST_VES, RESURS, PLAN_REAL_VES, NORMA_REAL_VES, FACT_REAL_VES, 
	  END_OST, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME, AVG_SUT_REAL_VES, 
	  GROUP_FULL_NAME, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
	SELECT TIP_ROW, DATE_BEGIN, DATE_END, DATE_PLAN, FILIAL_ORDER, FILIAL_ID, FILIAL_NAME, 
	  REGION_ORDER, REGION_NAME, NAPR_ORDER, NAPR_NAME, '10400.', PROD_ORDER, PROD_NAME, GROUP_ORDER, GROUP_NAME, 
  	  BEGIN_OST, PLAN_POST_VES, NORMA_POST_VES, FACT_POST_VES, RESURS, PLAN_REAL_VES, NORMA_REAL_VES, FACT_REAL_VES, 
	  END_OST, ORG_KIND_ORDER, ORG_KIND_ID, ORG_KIND_NAME, ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME, AVG_SUT_REAL_VES, 
	  GROUP_FULL_NAME, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA
	FROM PLAN_FACT_REALIZ
    WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
      AND TERMINAL_NAME = vTERMINAL
      AND OSUSER_NAME = vOSUSER
	  AND PROD_ID_NPR<>'10400.'
	  AND (SUBSTR(PROD_ID_NPR,1,3)='104' OR PROD_ID_NPR='80015');
	
	DELETE FROM PLAN_FACT_REALIZ   
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND PROD_ID_NPR<>'10400.'
	  AND (SUBSTR(PROD_ID_NPR,1,3)='104' OR PROD_ID_NPR='80015');
	   
	UPDATE PLAN_FACT_REALIZ SET PROD_ID_NPR='10400'   
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND PROD_ID_NPR='10400.';
  END IF;  

  -- Группы продуктов
  UPDATE PLAN_FACT_REALIZ A SET (GROUP_ORDER, GROUP_NAME, GROUP_FULL_NAME)=
    (SELECT B.GROUP_ORDER, B.GROUP_ABBR,B.GROUP_NAME FROM KLS_PROD_GROUPS B, KLS_PROD_GROUPS_DESC C
	  WHERE C.PROD_GROUPS_ID=B.ID AND C.PROD_TYPE_GRP_ID=pPROD_TYPE AND C.PROD_ID_NPR=A.PROD_ID_NPR)
  WHERE EXISTS
    (SELECT NULL FROM KLS_PROD_GROUPS B, KLS_PROD_GROUPS_DESC C
	  WHERE C.PROD_GROUPS_ID=B.ID AND C.PROD_TYPE_GRP_ID=pPROD_TYPE AND C.PROD_ID_NPR=A.PROD_ID_NPR)
     AND (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
     AND TERMINAL_NAME = vTERMINAL
     AND OSUSER_NAME = vOSUSER;

  -- Филиалы
  UPDATE PLAN_FACT_REALIZ A SET (FILIAL_NAME,FILIAL_ORDER)=
    (SELECT B.FULL_NAME,B.PLAN_REAL FROM ORG_STRUCTURE B WHERE B.ID=A.FILIAL_ID)
  WHERE EXISTS
    (SELECT NULL FROM ORG_STRUCTURE B WHERE B.ID=A.FILIAL_ID)
     AND (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
     AND TERMINAL_NAME = vTERMINAL
     AND OSUSER_NAME = vOSUSER;

  COMMIT;

  -- Округление
  IF ONLY_FAS=0 OR ONLY_FAS=2 OR ONLY_FAS=4 THEN
    UPDATE PLAN_FACT_REALIZ SET
	  FACT_REAL_VES=ROUND(FACT_REAL_VES),
	  AVG_SUT_REAL_VES=ROUND(AVG_SUT_REAL_VES),
	  FACT_REAL_SUMMA=ROUND(FACT_REAL_SUMMA),
	  AVG_SUT_REAL_SUMMA=ROUND(AVG_SUT_REAL_SUMMA),
	  END_OST=ROUND(END_OST)
    WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
      AND TERMINAL_NAME = vTERMINAL
      AND OSUSER_NAME = vOSUSER;
  ELSE
    UPDATE PLAN_FACT_REALIZ SET
	  FACT_REAL_VES=ROUND(FACT_REAL_VES,3),
	  AVG_SUT_REAL_VES=ROUND(AVG_SUT_REAL_VES,3),
	  FACT_REAL_SUMMA=ROUND(FACT_REAL_SUMMA,3),
	  AVG_SUT_REAL_SUMMA=ROUND(AVG_SUT_REAL_SUMMA,3),
	  END_OST=ROUND(END_OST,3)
    WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
      AND TERMINAL_NAME = vTERMINAL
      AND OSUSER_NAME = vOSUSER;
  END IF;	  

  COMMIT;
END;

-- Подготовка данных для отчета "Суточная реализация с АЗС и Нефтебаз"
PROCEDURE FIL_SUT_REAL_TRANSIT (DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2,
          ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) AS
BEGIN
  FIL_SUT_REAL(DATE_BEG, DATE_END, FILIAL_ID,
          ORG_KIND_GRP, ORG_STRU_ID, PROD_GR_ID, PROD_ID,1,0,0,0,0);
END;

-- Подготовка данных для отчета "Реализация фасовки с АЗС и Нефтебаз"
PROCEDURE FIL_SUT_REAL_FAS(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) IS
BEGIN
  FIL_SUT_REAL(DATE_BEG,DATE_END,FILIAL_ID,ORG_KIND_GRP,ORG_STRU_ID,PROD_GR_ID,PROD_ID,0,1,0,0,0);
END;    

-- Подготовка данных для отчета "План-факт реализации наливных с ЛУКОЙЛ-СНП"
PROCEDURE FIL_SUT_REAL_PF(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) IS
BEGIN
  FIL_SUT_REAL(DATE_BEG,DATE_END,FILIAL_ID,ORG_KIND_GRP,ORG_STRU_ID,PROD_GR_ID,PROD_ID,0,2,0,0,1);
END;    

-- Подготовка данных для отчета "План-факт реализации фасованных с ЛУКОЙЛ-СНП"
PROCEDURE FIL_SUT_REAL_FAS_PF(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) IS
BEGIN
  FIL_SUT_REAL(DATE_BEG,DATE_END,FILIAL_ID,ORG_KIND_GRP,ORG_STRU_ID,PROD_GR_ID,PROD_ID,0,3,0,0,1);
END;    

-- Подготовка данных для отчета "План реализации сводный"
PROCEDURE FIL_SVOD_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) IS
  vOSUSER VARCHAR2(50);
  vTERMINAL VARCHAR2(50);
BEGIN
  FIL_SUT_REAL(DATE_BEG,DATE_END,FILIAL_ID,ORG_KIND_GRP,ORG_STRU_ID,PROD_GR_ID,PROD_ID,0,4,5,0,1,13);

  vTERMINAL := For_Init.GetCurrTerm;
  vOSUSER := For_Init.GetCurrUser;
    
  UPDATE PLAN_FACT_REALIZ SET AVG_SUT_REAL_VES=FACT_REAL_VES, AVG_SUT_REAL_SUMMA=FACT_REAL_SUMMA
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND PROD_ID_NPR in ('80019','10000');

  UPDATE PLAN_FACT_REALIZ SET AVG_SUT_REAL_VES=0, AVG_SUT_REAL_SUMMA=0
     WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
       AND TERMINAL_NAME = vTERMINAL
       AND OSUSER_NAME = vOSUSER
	   AND PROD_ID_NPR IN ('80017','80018','80020','80026');

   commit;	   
END;    

-- Подготовка данных для отчета "Реализация на собственные нужды"
PROCEDURE FIL_SOBS_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2, 
  ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) AS

  nFILIAL NUMBER;
  cFILIAL_NAME VARCHAR2(200);
  nORG_STRU NUMBER;
  nORG_KIND_GRP NUMBER;
  cPROD_GR VARCHAR2(5);
  cPROD VARCHAR2(5);
  nAZC_PROD_GR NUMBER;
  nAZC_PROD NUMBER;
  dDATE_BEG DATE;
  dDATE_END DATE;
  dDATE_PLAN DATE;
  cnt1 NUMBER;
  Koef FLOAT;
  dMON_END DATE;
  vOSUSER VARCHAR2(50);
  vTERMINAL VARCHAR2(50);
BEGIN

  vTERMINAL := For_Init.GetCurrTerm;
  vOSUSER := For_Init.GetCurrUser;

  dDATE_END:=TO_DATE(date_end,'dd.mm.yyyy');
  dDATE_BEG:=TO_DATE(date_beg,'dd.mm.yyyy');
  dDATE_PLAN:=TRUNC(dDATE_BEG,'MONTH');
  dMON_END:=LAST_DAY(dDATE_END);
  Koef:=(dDATE_END-dDATE_PLAN+1)/(dMON_END-dDATE_PLAN+1);

  IF FILIAL_ID<>'*' AND FILIAL_ID IS NOT NULL THEN
    nFILIAL:=TO_NUMBER(FILIAL_ID);
  ELSE
    nFILIAL:=NULL;
  END IF;

  IF ORG_KIND_GRP<>'*' AND ORG_KIND_GRP IS NOT NULL THEN
    nORG_KIND_GRP:=TO_NUMBER(ORG_KIND_GRP);
  ELSE
    nORG_KIND_GRP:=NULL;
  END IF;

  IF ORG_STRU_ID<>'*' AND ORG_STRU_ID IS NOT NULL THEN
    nORG_STRU:=TO_NUMBER(ORG_STRU_ID);
  ELSE
    nORG_STRU:=NULL;
  END IF;

  IF PROD_GR_id<>'*' AND PROD_GR_id IS NOT NULL THEN
    cPROD_GR:=PROD_GR_id;
  ELSE
    cPROD_GR:=NULL;
  END IF;

  IF PROD_id<>'*' AND PROD_id IS NOT NULL THEN
    cPROD:=PROD_id;
  ELSE
    cPROD:=NULL;
  END IF;

  -- Очистка таблицы PLAN_FACT
  DELETE
    FROM PLAN_FACT_REALIZ
   WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
     AND TERMINAL_NAME = vTERMINAL
     AND OSUSER_NAME = vOSUSER;
  COMMIT;

  -- 1) Факт реализации (с АЗС и Нефтебаз)
  INSERT INTO PLAN_FACT_REALIZ
    (TIP_ROW,DATE_BEGIN,DATE_END,DATE_PLAN,FILIAL_ID,ORG_KIND_ORDER,ORG_KIND_ID,ORG_KIND_NAME,
	 ORG_STRU_ORDER, ORG_STRU_ID, ORG_STRU_NAME,
	 PROD_ID_NPR, FACT_REAL_VES, AVG_SUT_REAL_VES, FACT_REAL_SUMMA, AVG_SUT_REAL_SUMMA)
  SELECT
    'СУТОЧНАЯ РЕАЛИЗАЦИЯ' AS TIP_ROW,
	dDATE_BEG,
	dDATE_END,
	dDATE_PLAN,
    C.FILIAL_ID, -- Филиал
    KLS_ORG_KIND.ID AS ORG_KIND_ORDER, -- Вид подразделения
    KLS_ORG_KIND.ID, -- Вид подразделения
    KLS_ORG_KIND.NAME AS ORG_KIND_NAME, -- Вид подразделения
    C.ID AS ORG_STRU_ORDER, -- Подразделение
    C.ID AS ORG_STRU_ID, -- Подразделение
    C.NAME AS ORG_STRU_NAME, -- Подразделение
    AZC_OPERATION.PROD_ID_NPR, -- Продукт
    SUM(AZC_OPERATION.VES) AS ALL_VES, -- Отгружено за период
    ROUND(SUM(AZC_OPERATION.VES)/(dDATE_END-dDATE_BEG+1),0) AS AVG_VES, -- Среднесуточная отгрузка
    SUM(AZC_OPERATION.SUMMA) AS ALL_SUMMA, -- Отгружено за период
    ROUND(SUM(AZC_OPERATION.SUMMA)/(dDATE_END-dDATE_BEG+1),0) AS AVG_SUMMA -- Среднесуточная отгрузка
  FROM AZC_OPERATION,AZC_TYPE_OPERATION,KLS_PROD,
    V_ORG_STRUCTURE C,KLS_ORG_KIND
  WHERE AZC_OPERATION.TYPE_OPER_ID=AZC_TYPE_OPERATION.ID
    AND AZC_TYPE_OPERATION.ID=1
    AND AZC_OPERATION.DATE_OPER>=dDATE_BEG
    AND AZC_OPERATION.DATE_OPER<=dDATE_END
	--AND AZC_OPERATION.ORG_STRU_ID <>2023  -- Без Дежневского нефтесклада
    AND AZC_OPERATION.ORG_STRU_ID=C.ID
    AND C.ORG_KIND_ID=KLS_ORG_KIND.ID
    AND C.ORG_KIND_ID IN (1,5,11,12,13)
	AND AZC_OPERATION.PROD_ID_NPR=KLS_PROD.ID_NPR
	AND (KLS_PROD.ID_GROUP_NPR=NVL(cPROD_GR,KLS_PROD.ID_GROUP_NPR))
	AND (KLS_PROD.ID_NPR=NVL(cPROD,KLS_PROD.ID_NPR))
    AND (KLS_ORG_KIND.GROUP_KIND_ID=NVL(nORG_KIND_GRP,KLS_ORG_KIND.GROUP_KIND_ID)) -- тип объекта
	AND (AZC_OPERATION.ORG_STRU_ID=NVL(nORG_STRU,AZC_OPERATION.ORG_STRU_ID)) -- подразделение (АЗС)
	AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID)) -- Филиал
	AND AZC_OPERATION.DISCOUNT=815
  GROUP BY
    C.FILIAL_ID,
    KLS_ORG_KIND.ID,
    KLS_ORG_KIND.ID,
    KLS_ORG_KIND.NAME,
    C.ID,
    C.NAME,
    AZC_OPERATION.PROD_ID_NPR;

  COMMIT;

  -- Группы продуктов
  UPDATE PLAN_FACT_REALIZ A SET (GROUP_ORDER, GROUP_NAME, GROUP_FULL_NAME)=
    (SELECT B.GROUP_ORDER, B.GROUP_ABBR,B.GROUP_NAME FROM KLS_PROD_GROUPS B, KLS_PROD_GROUPS_DESC C
	  WHERE C.PROD_GROUPS_ID=B.ID AND C.PROD_TYPE_GRP_ID=5 AND C.PROD_ID_NPR=A.PROD_ID_NPR)
  WHERE EXISTS
    (SELECT NULL FROM KLS_PROD_GROUPS B, KLS_PROD_GROUPS_DESC C
	  WHERE C.PROD_GROUPS_ID=B.ID AND C.PROD_TYPE_GRP_ID=5 AND C.PROD_ID_NPR=A.PROD_ID_NPR)
     AND (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
     AND TERMINAL_NAME = vTERMINAL
     AND OSUSER_NAME = vOSUSER;

  -- Филиалы
  UPDATE PLAN_FACT_REALIZ A SET (FILIAL_NAME,FILIAL_ORDER)=
    (SELECT B.FULL_NAME,B.PLAN_REAL FROM ORG_STRUCTURE B WHERE B.ID=A.FILIAL_ID)
  WHERE EXISTS
    (SELECT NULL FROM ORG_STRUCTURE B WHERE B.ID=A.FILIAL_ID)
     AND (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
     AND TERMINAL_NAME = vTERMINAL
     AND OSUSER_NAME = vOSUSER;

  COMMIT;

  -- Округление
  UPDATE PLAN_FACT_REALIZ SET
	  FACT_REAL_VES=ROUND(FACT_REAL_VES),
	  AVG_SUT_REAL_VES=ROUND(AVG_SUT_REAL_VES),
	  FACT_REAL_SUMMA=ROUND(FACT_REAL_SUMMA),
	  AVG_SUT_REAL_SUMMA=ROUND(AVG_SUT_REAL_SUMMA),
	  END_OST=ROUND(END_OST)
    WHERE (TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ' OR TIP_ROW='СУТОЧНАЯ РЕАЛИЗАЦИЯ (ТРАНЗИТ)')
      AND TERMINAL_NAME = vTERMINAL
      AND OSUSER_NAME = vOSUSER;

  COMMIT;
END;


-- Подготовка данных для отчета "Продажа и запасы н/пр (статистика)"
PROCEDURE FIL_STAT_REAL(DATE_BEG VARCHAR2, DATE_END VARCHAR2, FILIAL_ID VARCHAR2,
          ORG_KIND_GRP VARCHAR2, ORG_STRU_ID VARCHAR2, PROD_GR_ID VARCHAR2, PROD_ID VARCHAR2) AS
  nFILIAL NUMBER;
  cFILIAL_NAME VARCHAR2(200);
  nORG_STRU NUMBER;
  nORG_KIND_GRP NUMBER;
  cPROD_GR VARCHAR2(5);
  cPROD VARCHAR2(5);
  dDATE_BEG DATE;
  dDATE_END DATE;
  dDATE_PLAN DATE;
  cnt1 NUMBER;
  Koef FLOAT;
  dMON_END DATE;
BEGIN

  -- Из Паруса
  dDATE_END:=TO_DATE(date_end,'dd.mm.yyyy');
  dDATE_BEG:=TO_DATE(date_beg,'dd.mm.yyyy');
  dDATE_PLAN:=TRUNC(dDATE_BEG,'MONTH');
  dMON_END:=LAST_DAY(dDATE_END);
  Koef:=(dDATE_END-dDATE_PLAN+1)/(dMON_END-dDATE_PLAN+1);

  IF FILIAL_ID<>'*' AND FILIAL_ID IS NOT NULL THEN
    nFILIAL:=TO_NUMBER(FILIAL_ID);
  ELSE
    nFILIAL:=NULL;
  END IF;

  IF ORG_KIND_GRP<>'*' AND ORG_KIND_GRP IS NOT NULL THEN
    nORG_KIND_GRP:=TO_NUMBER(ORG_KIND_GRP);
  ELSE
    nORG_KIND_GRP:=NULL;
  END IF;

  IF ORG_STRU_ID<>'*' AND ORG_STRU_ID IS NOT NULL THEN
    nORG_STRU:=TO_NUMBER(ORG_STRU_ID);
  ELSE
    nORG_STRU:=NULL;
  END IF;

  IF PROD_GR_id<>'*' AND PROD_GR_id IS NOT NULL THEN
    cPROD_GR:=PROD_GR_id;
  ELSE
    cPROD_GR:=NULL;
  END IF;

  IF PROD_id<>'*' AND PROD_id IS NOT NULL THEN
    cPROD:=PROD_id;
  ELSE
    cPROD:=NULL;
  END IF;

  -- Очистка таблицы AZC_FROM_PARUS
/*  DELETE FROM V_AZC_FROM_PARUS;
  COMMIT;

  INSERT INTO AZC_FROM_PARUS
    (NNOMEN, SNOMEN, NSTORE, SSTORE, REALIZ_ALL, REALIZ_AVG,IS_AZC, OSTATOK)
   SELECT NNOMEN,NOMEN,NSTORE,STORE,REAL_ALL,REAL_SR,AZS,QUANT
     FROM parus.v_snp_stat_osv@oracle.world;

  COMMIT;*/

  -- Из AZC_OPERATION
  FIL_SUT_REAL(DATE_BEG, DATE_END, FILIAL_ID,
          ORG_KIND_GRP, ORG_STRU_ID, PROD_GR_ID, PROD_ID, 1);

END;

-- Остаток на утро в кг
FUNCTION GET_OST_BEGIN_MAS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
BEGIN
  RETURN GET_OST(pORG_STRU_ID,pPROD_ID_NPR,pDATE,0,0);
END;  

-- Остаток на утро в лит
FUNCTION GET_OST_BEGIN_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
BEGIN
  RETURN GET_OST(pORG_STRU_ID,pPROD_ID_NPR,pDATE,0,1);
END;  

-- Остаток на утро в руб.
FUNCTION GET_OST_BEGIN_SUM(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
BEGIN
  RETURN GET_OST(pORG_STRU_ID,pPROD_ID_NPR,pDATE,0,2);
END;  

-- Остаток на вечер в кг
FUNCTION GET_OST_END_MAS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
BEGIN
  RETURN GET_OST(pORG_STRU_ID,pPROD_ID_NPR,pDATE,1,0);
END;  

-- Остаток на вечер в лит
FUNCTION GET_OST_END_VOL(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
BEGIN
  RETURN GET_OST(pORG_STRU_ID,pPROD_ID_NPR,pDATE,1,1);
END;  

-- Остаток на вечер в руб.
FUNCTION GET_OST_END_SUM(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE) RETURN NUMBER IS
BEGIN
  RETURN GET_OST(pORG_STRU_ID,pPROD_ID_NPR,pDATE,1,2);
END;  

-- Универсальная функция расчета остатка  
FUNCTION GET_OST(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE DATE DEFAULT SYSDATE, pUTRO NUMBER DEFAULT 0, pTIP_OST NUMBER DEFAULT 0) RETURN NUMBER IS
  v_lastost DATE;
  v_lastoper DATE;
  v_ost_mas NUMBER;
  v_ost_vol NUMBER;
  v_ost_sum NUMBER;
  v_p_r_mas NUMBER;
  v_p_r_vol NUMBER;
  v_p_r_sum NUMBER;
  v_cnt NUMBER;
  dBEGIN_DATE DATE;
  dPREV_DATE DATE;
  dDATE_OPER DATE;
BEGIN

  -- pUTRO=0 - Остаток на утро
  -- pUTRO=1 - Остаток на вечер
  IF pUTRO=1 THEN
    dDATE_OPER:=TRUNC(pDATE)+1;
  ELSE
    dDATE_OPER:=TRUNC(pDATE);
  END IF;
  dBEGIN_DATE:=TRUNC(dDATE_OPER,'MONTH');		
  dPREV_DATE:=TRUNC(dDATE_OPER-10,'MONTH');		
  
  -- pTIP_OST=0 - КГ
  -- pTIP_OST=1 - Литры
  -- pTIP_OST=2 - Руб.

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;
  
  -- Попытаемся просто найти остаток по данному продукту на утро этого дня
  SELECT SUM(VES),SUM(VOLUME),SUM(SUMMA),COUNT(*) INTO v_ost_mas,v_ost_vol,v_ost_sum,v_cnt
    FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
   WHERE A.ORG_STRU_ID=pORG_STRU_ID
     AND A.PROD_ID_NPR=pPROD_ID_NPR
     AND A.TYPE_OPER_ID=B.ID
 	 AND B.KIND_OPER=0
	 AND A.DATE_OPER=dDATE_OPER;

  IF v_cnt>0 THEN
    IF pTIP_OST=0 THEN 
      RETURN NVL(v_ost_mas,0);
	ELSE
	  IF pTIP_OST=1 THEN  
        RETURN NVL(v_ost_vol,0);
	  ELSE	
        RETURN NVL(v_ost_sum,0);
	  END IF;
	END IF;  	
  END IF;
  	 
  -- Остаток на это день не найден - попытаемся его рассчитать	 

  -- Находим хотя бы одну операцию в этом месяце (по любому продукту)
 /* 	
  FOR lcur IN ( 
    SELECT DATE_OPER 
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER>=dBEGIN_DATE
	   AND A.DATE_OPER<dDATE_OPER
	   AND (B.KIND_OPER=1 OR B.KIND_OPER=2)) LOOP
	EXIT;
  END LOOP;*/	   
  
  v_lastoper:=dPREV_DATE;
  BEGIN
    SELECT /*+ RULE */ DISTINCT NULL INTO v_lastoper
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER>=dBEGIN_DATE
	   AND A.DATE_OPER<dDATE_OPER
	   AND (B.KIND_OPER=1 OR B.KIND_OPER=2);
    v_lastoper:=dBEGIN_DATE;	
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastoper:=dPREV_DATE;
  END;
  
  --  v_lastoper:=TRUNC(v_lastoper,'MONTH');
/*  IF v_lastoper<dBEGIN_DATE THEN
    v_lastoper:=dBEGIN_DATE;
  ELSE	
    v_lastoper:=TRUNC(v_lastoper,'MONTH');	
  END IF;*/

  -- Находим дату ввода последнего остатка по данному продукту
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
     WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER>=v_lastoper
	   AND A.DATE_OPER<=dDATE_OPER
	   AND B.KIND_OPER=0;
  EXCEPTION
    WHEN OTHERS THEN
      v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NOT NULL THEN
    SELECT SUM(VES),SUM(VOLUME),SUM(SUMMA) INTO v_ost_mas,v_ost_vol,v_ost_sum
      FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
  	WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  ELSE	 
    v_ost_mas:=0;
	v_ost_vol:=0;
	v_ost_sum:=0;
    v_lastost:=v_lastoper;
  END IF;

  -- Приход - Расход
  v_p_r_mas:=0;
  v_p_r_vol:=0;
  v_p_r_sum:=0;
  IF v_lastost<dDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VES,2,-A.VES,0)),
	       SUM(DECODE(B.KIND_OPER,1,A.VOLUME,2,-A.VOLUME,0)),
		   SUM(DECODE(B.KIND_OPER,1,A.SUMMA,2,-A.SUMMA,0)) 
	  INTO v_p_r_mas,v_p_r_vol,v_p_r_sum 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
  	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2) 
	     AND A.DATE_OPER>=v_lastost
	     AND A.DATE_OPER<dDATE_OPER;
  END IF;		 

  IF pTIP_OST=0 THEN 
    RETURN NVL(v_ost_mas,0)+NVL(v_p_r_mas,0);
  ELSE
	IF pTIP_OST=1 THEN  
      RETURN NVL(v_ost_vol,0)+NVL(v_p_r_vol,0);
	ELSE	
      RETURN NVL(v_ost_sum,0)+NVL(v_p_r_sum,0);
	END IF;
  END IF;  	
END;

-- Универсальная функция расчета остатка c учетом собственника   
FUNCTION GET_OST_SOBS(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pSOBSTV_ID NUMBER, pDATE DATE DEFAULT SYSDATE, pUTRO NUMBER DEFAULT 0, pTIP_OST NUMBER DEFAULT 0) RETURN NUMBER IS
  v_lastost DATE;
  v_lastoper DATE;
  v_ost_mas NUMBER;
  v_ost_vol NUMBER;
  v_ost_sum NUMBER;
  v_p_r_mas NUMBER;
  v_p_r_vol NUMBER;
  v_p_r_sum NUMBER;
  v_cnt NUMBER;
  dDATE_OPER DATE;
  dBEGIN_DATE DATE;
  dPREV_DATE DATE; 
BEGIN

  -- pUTRO=0 - Остаток на утро
  -- pUTRO=1 - Остаток на вечер
  IF pUTRO=1 THEN
    dDATE_OPER:=TRUNC(pDATE)+1;
  ELSE
    dDATE_OPER:=TRUNC(pDATE);
  END IF;		
  dBEGIN_DATE:=TRUNC(dDATE_OPER,'MONTH');		
  dPREV_DATE:=TRUNC(dDATE_OPER-10,'MONTH');		
  
  -- pTIP_OST=0 - КГ
  -- pTIP_OST=1 - Литры
  -- pTIP_OST=2 - Руб.

  IF NVL(pSOBSTV_ID,0)=0 THEN
    RETURN 0;
  END IF;	

  IF NVL(pORG_STRU_ID,0)=0 THEN
    RETURN 0;
  END IF;	

  IF NVL(pPROD_ID_NPR,'')||' '=' ' THEN
    RETURN 0;
  END IF;
  
  -- Попытаемся просто найти остаток по данному продукту на утро этого дня
  SELECT SUM(VES),SUM(VOLUME),SUM(SUMMA),COUNT(*) INTO v_ost_mas,v_ost_vol,v_ost_sum,v_cnt
    FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
   WHERE A.ORG_STRU_ID=pORG_STRU_ID
     AND A.PROD_ID_NPR=pPROD_ID_NPR
     AND A.SOBSTV_ID=pSOBSTV_ID
     AND A.TYPE_OPER_ID=B.ID
 	 AND B.KIND_OPER=0
	 AND A.DATE_OPER=dDATE_OPER;

  IF v_cnt>0 THEN
    IF pTIP_OST=0 THEN 
      RETURN NVL(v_ost_mas,0);
	ELSE
	  IF pTIP_OST=1 THEN  
        RETURN NVL(v_ost_vol,0);
	  ELSE	
        RETURN NVL(v_ost_sum,0);
	  END IF;
	END IF;  	
  END IF;
  	 
  -- Остаток на это день не найден - попытаемся его рассчитать	 

  -- Находим дату последней операции (по любому продукту)
  v_lastoper:=dPREV_DATE;
  BEGIN
    SELECT /*+ RULE */ DISTINCT NULL INTO v_lastoper
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER>=dBEGIN_DATE
	   AND A.DATE_OPER<dDATE_OPER
	   AND (B.KIND_OPER=1 OR B.KIND_OPER=2);
    v_lastoper:=dBEGIN_DATE;	
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastoper:=dPREV_DATE;
  END;
  
  -- Находим дату ввода последнего остатка по данному продукту
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastost
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
     WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
       AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER>=v_lastoper
	   AND A.DATE_OPER<=dDATE_OPER
	   AND B.KIND_OPER=0;
  EXCEPTION
    WHEN OTHERS THEN
      v_lastost:=NULL;
  END;

  -- Начальный остаток  
  IF v_lastost IS NOT NULL THEN
    SELECT SUM(VES),SUM(VOLUME),SUM(SUMMA) INTO v_ost_mas,v_ost_vol,v_ost_sum
      FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
  	WHERE A.ORG_STRU_ID=pORG_STRU_ID
	   AND A.PROD_ID_NPR=pPROD_ID_NPR
       AND A.SOBSTV_ID=pSOBSTV_ID
	   AND A.TYPE_OPER_ID=B.ID
	   AND B.KIND_OPER=0
	   AND A.DATE_OPER=v_lastost;
  ELSE	 
    v_ost_mas:=0;
	v_ost_vol:=0;
	v_ost_sum:=0;
    v_lastost:=v_lastoper;
  END IF;

  -- Приход - Расход
  v_p_r_mas:=0;
  v_p_r_vol:=0;
  v_p_r_sum:=0;
  IF v_lastost<dDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VES,2,-A.VES,0)),
	       SUM(DECODE(B.KIND_OPER,1,A.VOLUME,2,-A.VOLUME,0)),
		   SUM(DECODE(B.KIND_OPER,1,A.SUMMA,2,-A.SUMMA,0)) 
	  INTO v_p_r_mas,v_p_r_vol,v_p_r_sum 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
         AND A.SOBSTV_ID=pSOBSTV_ID
	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2) 
	     AND A.DATE_OPER>=v_lastost
	     AND A.DATE_OPER<dDATE_OPER;
  END IF;		 

  IF pTIP_OST=0 THEN 
    RETURN NVL(v_ost_mas,0)+NVL(v_p_r_mas,0);
  ELSE
	IF pTIP_OST=1 THEN  
      RETURN NVL(v_ost_vol,0)+NVL(v_p_r_vol,0);
	ELSE	
      RETURN NVL(v_ost_sum,0)+NVL(v_p_r_sum,0);
	END IF;
  END IF;  	
END;

-- Перенос данных из ПАРУСА в AZC_OPERATION
PROCEDURE PARUS_TO_AZC_OPER (pDATE_BEG VARCHAR2, pDATE_END VARCHAR2, pFilial NUMBER DEFAULT NULL, pOrgStru NUMBER DEFAULT NULL, ADD_SOPUT NUMBER DEFAULT 0, IS_SOPUT NUMBER DEFAULT 0) IS
  DateBeg DATE;
  DateEnd DATE;
  Filial_ID NUMBER;
  OrgStru_ID NUMBER;
  DateNow DATE;
  DisTop VARCHAR2(5);
BEGIN
  DateBeg:=TO_DATE(pDATE_BEG,'dd.mm.yyyy');
  DateEnd:=TO_DATE(pDATE_END,'dd.mm.yyyy');
  Filial_ID:=NVL(pFilial,0);
  OrgStru_ID:=NVL(pOrgStru,0);
  DateNow:=SYSDATE;
  
  
  DisTop:='10400';

  IF Filial_ID=37 AND DateBeg<TO_DATE('01.04.2004','dd.mm.yyyy') then
    -- Усть-Цильма - только с 1-го апреля 2004
    DateBeg:=TO_DATE('01.04.2004','dd.mm.yyyy');
  END IF;	
/*  IF Filial_ID=37  then
	DisTop:='10405';
  END IF;*/
  
  IF Filial_ID=32 AND DateBeg<TO_DATE('01.04.2004','dd.mm.yyyy') then
    -- Воркута - только с 1-го апреля 2004
    DateBeg:=TO_DATE('01.04.2004','dd.mm.yyyy');
  END IF;	
/*  IF Filial_ID=32 then
	DisTop:='10405';
  END IF;*/	

  IF Filial_ID=30 AND DateBeg<TO_DATE('01.01.2004','dd.mm.yyyy') then
    -- Сыктывкар - с 1-го января 2004
    DateBeg:=TO_DATE('01.01.2004','dd.mm.yyyy');
  END IF;	
/*  IF Filial_ID=30 then
	DisTop:='10405';
  END IF;*/	

  IF Filial_ID=38 AND DateBeg<TO_DATE('01.08.2006','dd.mm.yyyy') then
    -- Усинск - с 1-го августа 2006
    DateBeg:=TO_DATE('01.08.2006','dd.mm.yyyy');
  END IF;	
  
  -- Перенос во временную таблицу
  DELETE FROM V_AZS_REPORTS_TMP;
  COMMIT;

  IF IS_SOPUT=1 THEN
    -- Сопутствуюищие
    INSERT INTO AZS_REPORTS_TMP
      (TYPE_OPER_ID, DISCOUNT, ORG_STRU_ID, PROD_ID_NPR, OPER_DAY, PRICE, VOLUME, MASSA, SUMMA)
  	  SELECT A.TYPE_OPER_ID,A.DISCOUNT,C.ORG_STRU_ID,
	    '80019' as PROD_ID_NPR,
	    A.OPER_DAY,A.PRICE,SUM(A.VOLUME),SUM(A.MASSA),SUM(A.SUMMA)
        FROM parus.V_SNP_AZS_TO_MASTER_SOPUT_PSV@oracle.world A,
	         PARUS_STORE_ORG_STRU_LINK C, v_org_structure CC  
	    WHERE A.STORE_RN=C.STORE_RN 
	      AND C.ORG_STRU_ID=CC.ID
		  AND CC.NO_WORK=0 -- Работающие
		  AND CC.LOAD_FAS_FROM_PARUS=1 
	      AND CC.FILIAL_ID=DECODE(Filial_ID,0,CC.FILIAL_ID,Filial_ID) -- Филиал
		  AND C.ORG_STRU_ID=DECODE(OrgStru_ID,0,C.ORG_STRU_ID,OrgStru_ID) -- АЗС
		  AND A.OPER_DAY>=DateBeg
          AND A.OPER_DAY<=DateEnd -- Период
		  AND A.NOMEN_RN=6
	  GROUP BY A.TYPE_OPER_ID,A.DISCOUNT,C.ORG_STRU_ID,
	    A.OPER_DAY,A.PRICE
  	  HAVING SUM(A.SUMMA)<>0;
    -- Услуги
    INSERT INTO AZS_REPORTS_TMP
      (TYPE_OPER_ID, DISCOUNT, ORG_STRU_ID, PROD_ID_NPR, OPER_DAY, PRICE, VOLUME, MASSA, SUMMA)
  	  SELECT A.TYPE_OPER_ID,A.DISCOUNT,C.ORG_STRU_ID,
	    '10000' as PROD_ID_NPR,
	    A.OPER_DAY,A.PRICE,SUM(A.VOLUME),SUM(A.MASSA),SUM(A.SUMMA)
        FROM parus.V_SNP_AZS_TO_MASTER_SOPUT_PSV@oracle.world A,
	         PARUS_STORE_ORG_STRU_LINK C, v_org_structure CC  
	    WHERE A.STORE_RN=C.STORE_RN 
	      AND C.ORG_STRU_ID=CC.ID
		  AND CC.NO_WORK=0 -- Работающие
		  AND CC.LOAD_FAS_FROM_PARUS=1 
	      AND CC.FILIAL_ID=DECODE(Filial_ID,0,CC.FILIAL_ID,Filial_ID) -- Филиал
		  AND C.ORG_STRU_ID=DECODE(OrgStru_ID,0,C.ORG_STRU_ID,OrgStru_ID) -- АЗС
		  AND A.OPER_DAY>=DateBeg
          AND A.OPER_DAY<=DateEnd -- Период
		  AND A.NOMEN_RN=7
	  GROUP BY A.TYPE_OPER_ID,A.DISCOUNT,C.ORG_STRU_ID,
	    A.OPER_DAY,A.PRICE
  	  HAVING SUM(A.SUMMA)<>0;
  ELSE
    -- Основные
    INSERT INTO AZS_REPORTS_TMP
      (TYPE_OPER_ID, DISCOUNT, ORG_STRU_ID, PROD_ID_NPR, OPER_DAY, PRICE, VOLUME, MASSA, SUMMA)
	  SELECT TYPE_OPER_ID,DISCOUNT,ORG_STRU_ID,PROD_ID_NPR,
	    OPER_DAY,PRICE,volume,massa,summa
	  FROM
	  (	
	  SELECT A.TYPE_OPER_ID,A.DISCOUNT,C.ORG_STRU_ID,
	    DECODE(kls_prod.PROD_PLAN_ID,80018,'80018',80020,'80020',80026,'80026',DECODE(D.PROD_ID_NPR,'10400',DisTop,D.PROD_ID_NPR)) as PROD_ID_NPR,
	    A.OPER_DAY,A.PRICE,SUM(A.VOLUME) as volume,SUM(A.MASSA) as massa,SUM(A.SUMMA) as summa
        FROM parus.V_SNP_AZS_TO_MASTER_PSV@oracle.world A,
	         PARUS_NOMEN_PROD_LINK D, PARUS_STORE_ORG_STRU_LINK C, v_org_structure CC, kls_prod  
	    WHERE A.STORE_RN=C.STORE_RN 
	      AND C.ORG_STRU_ID=CC.ID
  	      AND CC.NO_WORK=0 -- Работающие
		  AND ((CC.LOAD_NALIV_FROM_PARUS=1 AND D.PROD_ID_NPR<'11900') OR 
		     (CC.LOAD_FAS_FROM_PARUS=1 AND D.PROD_ID_NPR>='11900'))
	      AND CC.FILIAL_ID=DECODE(Filial_ID,0,CC.FILIAL_ID,Filial_ID) -- Филиал
		  AND C.ORG_STRU_ID=DECODE(OrgStru_ID,0,C.ORG_STRU_ID,OrgStru_ID) -- АЗС
	      AND A.NOMEN_RN=D.NOMEN_RN
		  AND A.OPER_DAY>=DateBeg
          AND A.OPER_DAY<=DateEnd -- Период
		  AND d.prod_id_npr=kls_prod.id_npr
	  GROUP BY A.TYPE_OPER_ID,A.DISCOUNT,C.ORG_STRU_ID,
	    DECODE(kls_prod.PROD_PLAN_ID,80018,'80018',80020,'80020',80026,'80026',DECODE(D.PROD_ID_NPR,'10400',DisTop,D.PROD_ID_NPR)),
	    A.OPER_DAY,A.PRICE
	  )	
  	  WHERE MASSA<>0 OR (SUMMA<>0 AND PROD_ID_NPR in ('80018','80020','80026','80036'));
  END IF;	  
  COMMIT;

  -- Перебираем склады из закачаных сменных отчетов  
  FOR lcur IN (SELECT * FROM V_AZS_REPORTS_LAST) 
  LOOP
    DateEnd:=TO_DATE(pDATE_END,'dd.mm.yyyy');
	IF lcur.LAST_DAY<DateEnd THEN
	  DateEnd:=lcur.LAST_DAY;
	END IF;
  
    -- Обновляем информацию по движению
    UPDATE /*+ RULE */ AZC_OPERATION A SET
    (DENCITY, VOLUME, VES, NOTE, SUMMA) =
	(SELECT  (CASE
	     WHEN B.VOLUME<=0 OR B.MASSA<=0 THEN 0
	     WHEN B.MASSA/B.VOLUME>2 THEN 0
		 ELSE B.MASSA/B.VOLUME
	   END), B.VOLUME, 
	   (CASE
	      WHEN B.TYPE_OPER_ID=3 AND B.MASSA<0 THEN 0 
		  ELSE B.MASSA
		END), 'ЗАГРУЗКА ИЗ ПАРУСА',B.SUMMA
      FROM V_AZS_REPORTS_TMP B  
	  WHERE B.OPER_DAY=A.DATE_OPER -- Дата
		AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
		AND B.DISCOUNT=A.DISCOUNT -- Скидка
		AND B.PRICE=A.PRICE  -- Цена 
		AND B.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		AND B.ORG_STRU_ID=A.ORG_STRU_ID) -- Подразделение
    WHERE A.DATE_OPER>=DateBeg
      AND A.DATE_OPER<=DateEnd -- Период
  	  AND A.TYPE_OPER_ID IN (1,3,4,19)  -- Приход, реализация, остаток, расход
      AND A.ORG_STRU_ID=lcur.ORG_STRU_ID -- Склад
	  AND EXISTS
	  (SELECT NULL
        FROM V_AZS_REPORTS_TMP B  
	    WHERE B.OPER_DAY=A.DATE_OPER -- Дата
	  	  AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
 		  AND B.DISCOUNT=A.DISCOUNT -- Скидка
		  AND B.PRICE=A.PRICE  -- Цена 
		  AND B.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		  AND B.ORG_STRU_ID=A.ORG_STRU_ID); -- Подразделение

    -- Добавляем информацию по движению
    INSERT INTO AZC_OPERATION
      (DATE_OPER, DENCITY, VOLUME, VES, NOTE, TYPE_OPER_ID, PROD_ID_NPR,
	   SOBSTV_ID, ORG_STRU_ID, SUMMA, PRICE, PLACE_SEND_ID, DATE_INTO, DISCOUNT)
      SELECT /*+ RULE */ A.OPER_DAY,
	   (CASE
	     WHEN A.VOLUME<=0 OR A.MASSA<=0 THEN 0
	     WHEN A.MASSA/A.VOLUME>2 THEN 0
		 ELSE A.MASSA/A.VOLUME
	   END),A.VOLUME,
	   	   (CASE
	      WHEN A.TYPE_OPER_ID=3 AND A.MASSA<0 THEN 0 
		  ELSE A.MASSA
		END),'ЗАГРУЗКА ИЗ ПАРУСА',A.TYPE_OPER_ID,A.PROD_ID_NPR,
	   1,A.ORG_STRU_ID,A.SUMMA,A.PRICE,1,DateNow,A.DISCOUNT
        FROM V_AZS_REPORTS_TMP A  
	    WHERE A.OPER_DAY>=DateBeg
          AND A.OPER_DAY<=DateEnd -- Период
    	  AND A.TYPE_OPER_ID IN (1,3,4,19)  -- Приход, реализация, остаток, расход
		  AND A.ORG_STRU_ID=lcur.ORG_STRU_ID -- Склад
	      AND NOT EXISTS
         	(SELECT NULL
		     FROM AZC_OPERATION B
		    WHERE B.DATE_OPER=A.OPER_DAY -- Отчетная дата
		      AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
              AND B.DISCOUNT=A.DISCOUNT -- Скидка
			  AND B.PRICE = A.PRICE -- Цена
		      AND B.PROD_ID_NPR = A.PROD_ID_NPR  -- продукт
		      AND B.ORG_STRU_ID = A.ORG_STRU_ID); -- Подразделение

    IF IS_SOPUT=1 THEN
      -- Сопутствуюищие
      -- Удаление информации по движению
      DELETE FROM /*+ rule */ AZC_OPERATION A
      WHERE A.DATE_OPER>=DateBeg
        AND A.DATE_OPER<=DateEnd -- Период
		AND A.PROD_ID_NPR IN ('80019','10000')
        AND A.ORG_STRU_ID=lcur.ORG_STRU_ID -- АЗС
   	    AND A.TYPE_OPER_ID IN (1,3,4,19)  -- Приход, реализация, остаток, расход
	    AND EXISTS
	      (SELECT NULL FROM V_ORG_STRUCTURE CC WHERE CC.ID=A.ORG_STRU_ID 
		    AND ((CC.LOAD_NALIV_FROM_PARUS=1 AND A.PROD_ID_NPR<'11900') OR 
		         (CC.LOAD_FAS_FROM_PARUS=1 AND A.PROD_ID_NPR>='11900'))
   	       )		  
        AND NOT EXISTS
	     (SELECT NULL
           FROM V_AZS_REPORTS_TMP B  
	      WHERE B.OPER_DAY=A.DATE_OPER -- Дата
  	        AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
		    AND B.DISCOUNT=A.DISCOUNT -- Скидка
		    AND B.PRICE=A.PRICE  -- Цена 
		    AND B.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		    AND B.ORG_STRU_ID=A.ORG_STRU_ID); -- Подразделение
	  
    ELSE
      -- Основные	  
      -- Удаление информации по движению
      DELETE FROM /*+ rule */ AZC_OPERATION A
      WHERE A.DATE_OPER>=DateBeg
        AND A.DATE_OPER<=DateEnd -- Период
		AND A.PROD_ID_NPR not in ('80019','10000')
        AND A.ORG_STRU_ID=lcur.ORG_STRU_ID -- АЗС
   	    AND A.TYPE_OPER_ID IN (1,3,4,19)  -- Приход, реализация, остаток, расход
	    AND EXISTS
	      (SELECT NULL FROM V_ORG_STRUCTURE CC WHERE CC.ID=A.ORG_STRU_ID 
		    AND ((CC.LOAD_NALIV_FROM_PARUS=1 AND A.PROD_ID_NPR<'11900') OR 
		         (CC.LOAD_FAS_FROM_PARUS=1 AND A.PROD_ID_NPR>='11900'))
   	       )		  
        AND NOT EXISTS
	     (SELECT NULL
           FROM V_AZS_REPORTS_TMP B  
	      WHERE B.OPER_DAY=A.DATE_OPER -- Дата
  	        AND B.TYPE_OPER_ID=A.TYPE_OPER_ID -- Тип операции
		    AND B.DISCOUNT=A.DISCOUNT -- Скидка
		    AND B.PRICE=A.PRICE  -- Цена 
		    AND B.PROD_ID_NPR=A.PROD_ID_NPR  -- продукт
		    AND B.ORG_STRU_ID=A.ORG_STRU_ID); -- Подразделение
    END IF;	  
  END LOOP;

  COMMIT;
  
  IF ADD_SOPUT=0 THEN
    PARUS_TO_AZC_OPER (pDATE_BEG, pDATE_END, pFilial, pOrgStru, 1, 1);
  END IF;	
END;  


-- Подготовка данных для сообщения ПРН (в целом по НПО)
PROCEDURE SoobPRN_X6(DATE_BEG VARCHAR2, DATE_END VARCHAR2) as
BEGIN 
  PF_REALIZ(DATE_BEG, DATE_END,'*',1);
END;  

-- Подготовка данных для сообщения ПРН (Головное НПО)
PROCEDURE SoobPRN_X7(DATE_BEG VARCHAR2, DATE_END VARCHAR2) as
BEGIN 
  PF_REALIZ(DATE_BEG , DATE_END ,'31',1);
END;  

-- Подготовка данных для сообщения ПРН (Архангельск)
PROCEDURE SoobPRN_X8(DATE_BEG VARCHAR2, DATE_END VARCHAR2) as
BEGIN 
  PF_REALIZ(DATE_BEG , DATE_END , '40',1);
END;  

-- Подготовка данных для сообщения ФРН (в целом по НПО)
PROCEDURE SoobFRN_X6(DATE_BEG VARCHAR2, DATE_END VARCHAR2) as
BEGIN 
  PF_REALIZ(DATE_BEG , DATE_END , '*',5);
END;  

-- Подготовка данных для сообщения ФРН (Головное НПО)
PROCEDURE SoobFRN_X7(DATE_BEG VARCHAR2, DATE_END VARCHAR2) as
BEGIN 
  PF_REALIZ(DATE_BEG , DATE_END , '31',5);
END;  

-- Подготовка данных для сообщения ФРН (Архангельск)
PROCEDURE SoobFRN_X8(DATE_BEG VARCHAR2, DATE_END VARCHAR2) as
BEGIN 
  PF_REALIZ(DATE_BEG , DATE_END , '40',5);
END;  


END; 

/

--
-- FOR_PARUS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.for_parus
AS
   PROCEDURE renew_dog_parus
   IS
   BEGIN
      DELETE FROM kls_dog_parus p
            WHERE p.dog_id IS NULL;

      INSERT INTO kls_dog_parus
         (SELECT DISTINCT    TRIM (c.sdoc_pref)
                          || TRIM (c.sdoc_numb) AS base_numb,
                          for_parus.get_dog_id (   TRIM (c.sdoc_pref)
                                                || TRIM (c.sdoc_numb)
                                               ) AS dog_id,
                          1 AS is_auto_link, NULL AS name_plat,
                          1 AS is_actual
                     FROM parus.v_contracts@oracle.world c
                    WHERE TRIM (c.sdoc_pref) LIKE 'СНП-0%' and c.nstatus=1
/*               AND For_Parus.get_dog_id (   TRIM (c.sdoc_pref)
                                         || TRIM (c.sdoc_numb)
                                        ) IS NOT NULL*/
          MINUS
          SELECT DISTINCT p.base_numb, p.dog_id, 1 AS is_auto_link,
                          NULL AS name_plat, 1 AS is_actual
                     FROM kls_dog_parus p);
   END;

   PROCEDURE renew_bills_parus (
      date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
      date_end   DATE := SYSDATE,
      param1     VARCHAR2 := '',
      param2     VARCHAR2 := '',
      param3     VARCHAR2 := ''
   )
   IS
      v_cnt   NUMBER;
   BEGIN
      IF date_beg IS NULL
      THEN
         RETURN;
      END IF;

      IF date_end IS NULL
      THEN
         RETURN;
      END IF;

      SELECT COUNT (*)
        INTO v_cnt
        FROM load_buffer.parus_dicaccfo;

      IF v_cnt = 0
      THEN
         RETURN;
      END IF;

      -- Обновление связей договоров
      UPDATE /*+ RULE */kls_dog_parus
         SET (base_numb, dog_id) =
                (SELECT DISTINCT a.base_numb, d.ID
                            FROM v_dicaccfo_sf a, kls_dog d
                           WHERE a.base_numb = kls_dog_parus.base_numb
                             AND a.num_dog = d.short_number(+))
       WHERE (is_auto_link = 1 OR dog_id IS NULL)
         AND EXISTS (SELECT NULL
                       FROM v_dicaccfo_sf a
                      WHERE a.base_numb = kls_dog_parus.base_numb);

      -- Обновление счетов
      UPDATE /*+ RULE */bills_parus
         SET (pref_sf, nom_sf, npo_sf, date_vyp_sf, date_kvit, date_buxg,
              prim, kol_dn, nom_zd, base_numb, num_dog, dog_id, usl_number,
              sender, num_kvit, conf_numb, sved_num, summa_dok, summa_prod,
              summa_prod_nds, summa_akciz, summa_gsm, summa_tarif,
              summa_tarif_nds, summa_vozn, summa_vozn_nds, summa_strah) =
                (SELECT a.pref_sf, a.npo_sf,
                           LTRIM (RTRIM (a.pref_sf))
                        || '/'
                        || LTRIM (RTRIM (a.npo_sf)),
                        a.acc_date, a.conf_date, a.acc_date,
                        SUBSTR (a.prim, 1, 240), a.kol_dn, a.nom_zd,
                        a.base_numb, a.num_dog, d.ID, 1, a.sender, a.num_kvit,
                        a.conf_numb,
                        DECODE (SIGN (a.sved_num - 9999999999),
                                1, 0,
                                a.sved_num
                               ),
                        a.sum_total, 0, 0, 0, 0, 0, 0, 0, 0, 0
                   FROM v_dicaccfo_sf a, kls_dog d
                  WHERE a.nom_dok = bills_parus.nom_dok AND a.num_dog = d.short_number(+))
       WHERE bills_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (SELECT a.nom_dok
                       FROM v_dicaccfo_sf a
                      WHERE a.nom_dok = bills_parus.nom_dok);

      COMMIT;

      -- Добавление связей договоров
      INSERT INTO kls_dog_parus
                  (base_numb, dog_id)
         SELECT DISTINCT a.base_numb, d.ID
                    FROM v_dicaccfo_sf a, kls_dog d
                   WHERE NOT EXISTS (SELECT NULL
                                       FROM kls_dog_parus c
                                      WHERE a.base_numb = c.base_numb)
                     AND a.num_dog = d.short_number(+);

      COMMIT;

      -- Добавление счетов
      INSERT INTO bills_parus
                  (nom_dok, pref_sf, nom_sf, npo_sf, date_vyp_sf, date_kvit,
                   date_buxg, prim, kol_dn, nom_zd, base_numb, num_dog,
                   dog_id, usl_number, sender, num_kvit, conf_numb, sved_num,
                   summa_dok, summa_prod, summa_prod_nds, summa_akciz,
                   summa_gsm, summa_tarif, summa_tarif_nds, summa_vozn,
                   summa_vozn_nds, summa_strah)
         SELECT a.nom_dok, a.pref_sf, a.npo_sf,
                LTRIM (RTRIM (a.pref_sf)) || '/' || LTRIM (RTRIM (a.npo_sf)),
                a.acc_date, a.conf_date, a.acc_date, SUBSTR (a.prim, 1, 240),
                a.kol_dn, a.nom_zd, a.base_numb, a.num_dog, d.ID, 1, a.sender,
                a.num_kvit, a.conf_numb,
                DECODE (SIGN (a.sved_num - 9999999999), 1, 0, a.sved_num),
                a.sum_total, 0, 0, 0, 0, 0, 0, 0, 0, 0
           FROM v_dicaccfo_sf a, kls_dog d
          WHERE NOT EXISTS (SELECT nom_dok
                              FROM bills_parus c
                             WHERE a.nom_dok = c.nom_dok) AND a.num_dog = d.short_number(+);

      COMMIT;
      -- Обновление позиций счетов
      renew_bill_pos_parus (date_beg, date_end, param1);

      -- Обновление продукта
      UPDATE /*+ RULE */bills_parus
         SET (prod_id_npr) =
                (SELECT MIN (a.prod_id_npr)
                   FROM bill_pos_parus a
                  WHERE a.nom_dok = bills_parus.nom_dok
                    AND a.bill_pos_parus_id = 1)
       WHERE bills_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (
                SELECT a.nom_dok
                  FROM bill_pos_parus a
                 WHERE a.nom_dok = bills_parus.nom_dok
                   AND a.bill_pos_parus_id = 1);

      -- Обновление сумм за продукт
      UPDATE /*+ RULE */bills_parus
         SET (summa_prod, summa_prod_nds, summa_akciz, summa_gsm) =
                (SELECT SUM (a.summa), SUM (a.summa_nds20),
                        SUM (a.summa_akciz), SUM (a.summa_gsm25)
                   FROM bill_pos_parus a
                  WHERE a.nom_dok = bills_parus.nom_dok
                    AND a.bill_pos_parus_id = 1)
       WHERE bills_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (
                SELECT a.nom_dok
                  FROM bill_pos_parus a
                 WHERE a.nom_dok = bills_parus.nom_dok
                   AND a.bill_pos_parus_id = 1);

      -- Обновление сумм-тариф
      UPDATE /*+ RULE */bills_parus
         SET (summa_tarif, summa_tarif_nds) =
                (SELECT SUM (a.summa), SUM (a.summa_nds20)
                   FROM bill_pos_parus a
                  WHERE a.nom_dok = bills_parus.nom_dok
                    AND a.bill_pos_parus_id = 10)
       WHERE bills_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (
                SELECT a.nom_dok
                  FROM bill_pos_parus a
                 WHERE a.nom_dok = bills_parus.nom_dok
                   AND a.bill_pos_parus_id = 10);

      -- Обновление сумм-вознаграждение
      UPDATE /*+ RULE */bills_parus
         SET (summa_vozn, summa_vozn_nds) =
                (SELECT SUM (a.summa), SUM (a.summa_nds20)
                   FROM bill_pos_parus a
                  WHERE a.nom_dok = bills_parus.nom_dok
                    AND (a.bill_pos_parus_id = 11 OR a.bill_pos_parus_id = 12
                        ))
       WHERE bills_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (
                SELECT a.nom_dok
                  FROM bill_pos_parus a
                 WHERE a.nom_dok = bills_parus.nom_dok
                   AND (a.bill_pos_parus_id = 11 OR a.bill_pos_parus_id = 12
                       ));

      -- Обновление сумм-страховка
      UPDATE /*+ RULE */bills_parus
         SET (summa_strah) =
                (SELECT SUM (a.summa)
                   FROM bill_pos_parus a
                  WHERE a.nom_dok = bills_parus.nom_dok
                    AND a.bill_pos_parus_id = 20)
       WHERE bills_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (
                SELECT a.nom_dok
                  FROM bill_pos_parus a
                 WHERE a.nom_dok = bills_parus.nom_dok
                   AND a.bill_pos_parus_id = 20);

      COMMIT;

      -- Удаление счетов
      DELETE FROM bills_parus
            WHERE NOT EXISTS (SELECT nom_dok
                                FROM v_dicaccfo_sf a
                               WHERE a.nom_dok = bills_parus.nom_dok)
              AND bills_parus.date_vyp_sf BETWEEN date_beg AND date_end;

      COMMIT;
   END;

   PROCEDURE renew_bill_pos_parus (
      date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
      date_end   DATE := SYSDATE,
      param1     VARCHAR2 := '',
      param2     VARCHAR2 := '',
      param3     VARCHAR2 := ''
   )
   IS
      v_cnt   NUMBER;
   BEGIN
      IF date_beg IS NULL
      THEN
         RETURN;
      END IF;

      IF date_end IS NULL
      THEN
         RETURN;
      END IF;

      SELECT COUNT (*)
        INTO v_cnt
        FROM load_buffer.parus_diclacfo;

      IF v_cnt = 0
      THEN
         RETURN;
      END IF;

      -- Обновляем позиции счетов
      UPDATE bill_pos_parus
         SET (bill_pos_parus_id, prod_id_npr, date_otgr, ves, date_vyp_sf,
              cena_bn, cena, summa_bn, summa_akciz, summa_nds20, summa_gsm25,
              summa, food_rn, food_prn, food_code, food_type, food_name,
              mes_unit, mes_unit_name, pref_sf, nom_sf) =
                (SELECT a.bill_pos_parus_id, a.prod, a.conf_date, a.ves,
                        a.acc_date, a.cena_bn, a.cena, a.sum_bn, a.akciz,
                        a.sum_nds, a.gsm, a.sum_total, a.food_rn, a.food_prn,
                        a.food_code, a.food_type, a.food_name, a.mes_unit,
                        a.mes_unit_name, a.acc_pref_sf, a.acc_nom_sf
                   FROM v_diclacfo_pos a
                  WHERE a.nom_dok = bill_pos_parus.nom_dok
                    AND a.rn = bill_pos_parus.parus_rn)
       WHERE bill_pos_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND EXISTS (
                SELECT a.rn
                  FROM v_diclacfo_pos a
                 WHERE a.nom_dok = bill_pos_parus.nom_dok
                   AND a.rn = bill_pos_parus.parus_rn);

      COMMIT;

      -- Добавляем позиции счетов
      INSERT INTO bill_pos_parus
                  (nom_dok, parus_rn, bill_pos_parus_id, date_otgr, ves,
                   date_vyp_sf, cena_bn, cena, summa_bn, summa_akciz,
                   summa_nds20, summa_gsm25, summa, prod_id_npr, food_rn,
                   food_prn, food_code, food_type, food_name, mes_unit,
                   mes_unit_name, pref_sf, nom_sf)
         SELECT a.nom_dok, a.rn, a.bill_pos_parus_id, a.conf_date, a.ves,
                a.acc_date, a.cena_bn, a.cena, a.sum_bn, a.akciz, a.sum_nds,
                a.gsm, a.sum_total, a.prod, a.food_rn, a.food_prn,
                a.food_code, a.food_type, a.food_name, a.mes_unit,
                a.mes_unit_name, a.acc_pref_sf, a.acc_nom_sf
           FROM v_diclacfo_pos a
          WHERE NOT EXISTS (SELECT c.nom_dok
                              FROM bill_pos_parus c
                             WHERE a.nom_dok = c.nom_dok AND a.rn = c.parus_rn);

      COMMIT;

      -- Обновляем позиции счетов (недостающий продукт для услуг 11)
      UPDATE bill_pos_parus
         SET (prod_id_npr, date_otgr, ves, date_vyp_sf, cena_bn, cena,
              summa_bn, summa_akciz, summa_nds20, summa_gsm25, summa, food_rn,
              food_prn, food_code, food_type, food_name, mes_unit,
              mes_unit_name, pref_sf, nom_sf) =
                (SELECT '10003', a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                        0, a.food_rn, a.food_prn, a.food_code, a.food_type,
                        a.food_name, a.mes_unit, a.mes_unit_name,
                        a.acc_pref_sf, a.acc_nom_sf
                   FROM v_diclacfo_pos a
                  WHERE a.nom_dok = bill_pos_parus.nom_dok
                    AND a.bill_pos_parus_id = 11
                    AND NOT EXISTS (
                           SELECT nom_dok
                             FROM v_diclacfo_pos b
                            WHERE b.nom_dok = bill_pos_parus.nom_dok
                              AND b.bill_pos_parus_id = 1))
       WHERE bill_pos_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND bill_pos_parus.bill_pos_parus_id = 1
         AND EXISTS (
                SELECT a.nom_dok
                  FROM v_diclacfo_pos a
                 WHERE a.nom_dok = bill_pos_parus.nom_dok
                   AND a.bill_pos_parus_id = 11
                   AND NOT EXISTS (
                          SELECT nom_dok
                            FROM v_diclacfo_pos b
                           WHERE b.nom_dok = bill_pos_parus.nom_dok
                             AND b.bill_pos_parus_id = 1));

      COMMIT;

      -- Добавляем позиции счетов (недостающий продукт для услуг 11)
      INSERT INTO bill_pos_parus
                  (nom_dok, parus_rn, bill_pos_parus_id, date_otgr, ves,
                   date_vyp_sf, cena_bn, cena, summa_bn, summa_akciz,
                   summa_nds20, summa_gsm25, summa, prod_id_npr, food_rn,
                   food_prn, food_code, food_type, food_name, mes_unit,
                   mes_unit_name, pref_sf, nom_sf)
         SELECT a.nom_dok, 0, 1, a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                0, '10003', a.food_rn, a.food_prn, a.food_code, a.food_type,
                a.food_name, a.mes_unit, a.mes_unit_name, a.acc_pref_sf,
                a.acc_nom_sf
           FROM v_diclacfo_pos a
          WHERE a.bill_pos_parus_id = 11
            AND NOT EXISTS (
                       SELECT c.nom_dok
                         FROM bill_pos_parus c
                        WHERE c.nom_dok = a.nom_dok
                              AND c.bill_pos_parus_id = 1);

      COMMIT;

      -- Обновляем позиции счетов (недостающий продукт для услуг 12)
      UPDATE bill_pos_parus
         SET (prod_id_npr, date_otgr, ves, date_vyp_sf, cena_bn, cena,
              summa_bn, summa_akciz, summa_nds20, summa_gsm25, summa, food_rn,
              food_prn, food_code, food_type, food_name, mes_unit,
              mes_unit_name, pref_sf, nom_sf) =
                (SELECT '10003', a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                        0, a.food_rn, a.food_prn, a.food_code, a.food_type,
                        a.food_name, a.mes_unit, a.mes_unit_name,
                        a.acc_pref_sf, a.acc_nom_sf
                   FROM v_diclacfo_pos a
                  WHERE a.nom_dok = bill_pos_parus.nom_dok
                    AND a.bill_pos_parus_id = 12
                    AND NOT EXISTS (
                           SELECT nom_dok
                             FROM v_diclacfo_pos b
                            WHERE b.nom_dok = bill_pos_parus.nom_dok
                              AND b.bill_pos_parus_id = 1))
       WHERE bill_pos_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND bill_pos_parus.bill_pos_parus_id = 1
         AND EXISTS (
                SELECT a.nom_dok
                  FROM v_diclacfo_pos a
                 WHERE a.nom_dok = bill_pos_parus.nom_dok
                   AND a.bill_pos_parus_id = 12
                   AND NOT EXISTS (
                          SELECT nom_dok
                            FROM v_diclacfo_pos b
                           WHERE b.nom_dok = bill_pos_parus.nom_dok
                             AND b.bill_pos_parus_id = 1));

      COMMIT;

      -- Добавляем позиции счетов (недостающий продукт для услуг 12)
      INSERT INTO bill_pos_parus
                  (nom_dok, parus_rn, bill_pos_parus_id, date_otgr, ves,
                   date_vyp_sf, cena_bn, cena, summa_bn, summa_akciz,
                   summa_nds20, summa_gsm25, summa, prod_id_npr, food_rn,
                   food_prn, food_code, food_type, food_name, mes_unit,
                   mes_unit_name, pref_sf, nom_sf)
         SELECT a.nom_dok, 0, 1, a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                0, '10003', a.food_rn, a.food_prn, a.food_code, a.food_type,
                a.food_name, a.mes_unit, a.mes_unit_name, a.acc_pref_sf,
                a.acc_nom_sf
           FROM v_diclacfo_pos a
          WHERE a.bill_pos_parus_id = 12
            AND NOT EXISTS (
                       SELECT c.nom_dok
                         FROM bill_pos_parus c
                        WHERE c.nom_dok = a.nom_dok
                              AND c.bill_pos_parus_id = 1);

      COMMIT;

      -- Обновляем позиции счетов (недостающий продукт для тарифа)
      UPDATE bill_pos_parus
         SET (prod_id_npr, date_otgr, ves, date_vyp_sf, cena_bn, cena,
              summa_bn, summa_akciz, summa_nds20, summa_gsm25, summa, food_rn,
              food_prn, food_code, food_type, food_name, mes_unit,
              mes_unit_name, pref_sf, nom_sf) =
                (SELECT '10006', a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                        0, a.food_rn, a.food_prn, a.food_code, a.food_type,
                        a.food_name, a.mes_unit, a.mes_unit_name,
                        a.acc_pref_sf, a.acc_nom_sf
                   FROM v_diclacfo_pos a
                  WHERE a.nom_dok = bill_pos_parus.nom_dok
                    AND a.bill_pos_parus_id = 10
                    AND NOT EXISTS (
                           SELECT nom_dok
                             FROM v_diclacfo_pos b
                            WHERE b.nom_dok = bill_pos_parus.nom_dok
                              AND b.bill_pos_parus_id = 1))
       WHERE bill_pos_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND bill_pos_parus.bill_pos_parus_id = 1
         AND EXISTS (
                SELECT a.nom_dok
                  FROM v_diclacfo_pos a
                 WHERE a.nom_dok = bill_pos_parus.nom_dok
                   AND a.bill_pos_parus_id = 10
                   AND NOT EXISTS (
                          SELECT nom_dok
                            FROM v_diclacfo_pos b
                           WHERE b.nom_dok = bill_pos_parus.nom_dok
                             AND b.bill_pos_parus_id = 1));

      COMMIT;

      -- Добавляем позиции счетов (недостающий продукт для тарифа)
      INSERT INTO bill_pos_parus
                  (nom_dok, parus_rn, bill_pos_parus_id, date_otgr, ves,
                   date_vyp_sf, cena_bn, cena, summa_bn, summa_akciz,
                   summa_nds20, summa_gsm25, summa, prod_id_npr, food_rn,
                   food_prn, food_code, food_type, food_name, mes_unit,
                   mes_unit_name, pref_sf, nom_sf)
         SELECT a.nom_dok, 0, 1, a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                0, '10006', a.food_rn, a.food_prn, a.food_code, a.food_type,
                a.food_name, a.mes_unit, a.mes_unit_name, a.acc_pref_sf,
                a.acc_nom_sf
           FROM v_diclacfo_pos a
          WHERE a.bill_pos_parus_id = 10
            AND NOT EXISTS (
                       SELECT c.nom_dok
                         FROM bill_pos_parus c
                        WHERE c.nom_dok = a.nom_dok
                              AND c.bill_pos_parus_id = 1);

      COMMIT;

      -- Обновляем позиции счетов (недостающий продукт для страховки)
      UPDATE bill_pos_parus
         SET (prod_id_npr, date_otgr, ves, date_vyp_sf, cena_bn, cena,
              summa_bn, summa_akciz, summa_nds20, summa_gsm25, summa, food_rn,
              food_prn, food_code, food_type, food_name, mes_unit,
              mes_unit_name, pref_sf, nom_sf) =
                (SELECT '10001', a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                        0, a.food_rn, a.food_prn, a.food_code, a.food_type,
                        a.food_name, a.mes_unit, a.mes_unit_name,
                        a.acc_pref_sf, a.acc_nom_sf
                   FROM v_diclacfo_pos a
                  WHERE a.nom_dok = bill_pos_parus.nom_dok
                    AND a.bill_pos_parus_id = 20
                    AND NOT EXISTS (
                           SELECT nom_dok
                             FROM v_diclacfo_pos b
                            WHERE b.nom_dok = bill_pos_parus.nom_dok
                              AND b.bill_pos_parus_id = 1))
       WHERE bill_pos_parus.date_vyp_sf BETWEEN date_beg AND date_end
         AND bill_pos_parus.bill_pos_parus_id = 1
         AND EXISTS (
                SELECT a.nom_dok
                  FROM v_diclacfo_pos a
                 WHERE a.nom_dok = bill_pos_parus.nom_dok
                   AND a.bill_pos_parus_id = 20
                   AND NOT EXISTS (
                          SELECT nom_dok
                            FROM v_diclacfo_pos b
                           WHERE b.nom_dok = bill_pos_parus.nom_dok
                             AND b.bill_pos_parus_id = 1));

      COMMIT;

      -- Добавляем позиции счетов (недостающий продукт для услуг)
      INSERT INTO bill_pos_parus
                  (nom_dok, parus_rn, bill_pos_parus_id, date_otgr, ves,
                   date_vyp_sf, cena_bn, cena, summa_bn, summa_akciz,
                   summa_nds20, summa_gsm25, summa, prod_id_npr, food_rn,
                   food_prn, food_code, food_type, food_name, mes_unit,
                   mes_unit_name, pref_sf, nom_sf)
         SELECT a.nom_dok, 0, 1, a.conf_date, 0, a.acc_date, 0, 0, 0, 0, 0, 0,
                0, '10001', a.food_rn, a.food_prn, a.food_code, a.food_type,
                a.food_name, a.mes_unit, a.mes_unit_name, a.acc_pref_sf,
                a.acc_nom_sf
           FROM v_diclacfo_pos a
          WHERE a.bill_pos_parus_id = 20
            AND NOT EXISTS (
                       SELECT c.nom_dok
                         FROM bill_pos_parus c
                        WHERE c.nom_dok = a.nom_dok
                              AND c.bill_pos_parus_id = 1);

      COMMIT;

      -- Удаление позиций счетов
      DELETE FROM bill_pos_parus
            WHERE NOT EXISTS (SELECT prn
                                FROM v_diclacfo_pos a
                               WHERE a.nom_dok = bill_pos_parus.nom_dok)
              AND bill_pos_parus.date_vyp_sf BETWEEN date_beg AND date_end;

      COMMIT;
   END;

   PROCEDURE update_snapshots_reqv
   IS
   BEGIN
      UPDATE load_buffer.parus_dicaccfo a
         SET (a.num_kvit, a.sved_num, a.num_dog) =
                (SELECT get_num_kvit (a.prim), get_num_sved (a.conf_numb),
                        get_num_dog (a.base_numb)
                   FROM DUAL);

      COMMIT;

      INSERT INTO kls_prod_nomenklator
                  (modif, name_pr, name_group, parus_rn, parus_prn)
         SELECT food_code, food_name, food_name, food_rn, food_prn
           FROM (SELECT DISTINCT food_code AS food_code, food_name,
                                 NVL (food_rn, 0) AS food_rn,
                                 NVL (food_prn, 0) AS food_prn
                            FROM load_buffer.v_diclacfo) b
          WHERE NOT EXISTS (
                     SELECT *
                       FROM kls_prod_nomenklator a
                      WHERE a.parus_rn = b.food_rn
                            AND a.parus_prn = b.food_prn);

      UPDATE kls_prod_nomenklator
         SET prod = '10010'
       WHERE (prod IS NULL OR prod = '     ')
         AND (NLS_UPPER (modif) = 'Ж/Д ТАРИФ' OR NLS_UPPER (modif) =
                                                                    'ЖДУСЛУГА'
             );

      UPDATE kls_prod_nomenklator
         SET prod = '10092'
       WHERE (prod IS NULL OR prod = '     ')
         AND (   NLS_UPPER (modif) = 'ЗА ТРАНСПОРТИРОВКУ'
              OR NLS_UPPER (modif) = 'УСЛ. ПО ПРЕД.ЦИСТЕРН'
             );

      UPDATE kls_prod_nomenklator
         SET prod = '10020'
       WHERE (prod IS NULL OR prod = '     ')
         AND NLS_UPPER (modif) = 'СТРАХОВКА_ГР';

      UPDATE kls_prod_nomenklator
         SET prod = '10011'
       WHERE (prod IS NULL OR prod = '     ')
         AND NLS_UPPER (modif) = 'ВОЗНАГРАЖДЕНИЕ';

      COMMIT;
   END update_snapshots_reqv;

   FUNCTION str2num (ins VARCHAR2, l NUMBER)
      RETURN NUMBER
   IS
      v_tmp   NUMBER;
      s       VARCHAR (240);
   BEGIN
      s := SUBSTR (ins, l, 240);
      s :=
         TRANSLATE
            (s,
             'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnmЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё`~!@#$%^&*()_+-=|\:";<>?/.,[]{}№''',
             '                                                                                                                                                           '
            );
      s := LTRIM (RTRIM (s));
      v_tmp := INSTR (s, ' ');

      IF v_tmp > 0
      THEN
         RETURN TO_NUMBER (SUBSTR (s, 1, v_tmp - 1));
      ELSE
         RETURN TO_NUMBER (s);
      END IF;
   EXCEPTION
     WHEN OTHERS THEN
	  RETURN 0;  	  
   END str2num;

   FUNCTION get_num_kvit (prim VARCHAR2)
      RETURN NUMBER
   IS
-- Определение номера квитанции из комментария исходящего счета из ПАРУСА
      CURSOR tmp_cur
      IS
         SELECT   LENGTH (RTRIM (LTRIM (pref_name))) AS len1, pref_name
             FROM ktu_2_npo_pref_kvit
         ORDER BY len1 DESC;

      v_num_kvit     NUMBER;
      v_comment      VARCHAR2 (240);
      v_pref_name0   VARCHAR2 (240);
      v_pref_name1   VARCHAR2 (240);
      v_len0         NUMBER;
      v_len1         NUMBER;
   BEGIN
      v_num_kvit := 0;
      v_comment := UPPER (RTRIM (LTRIM (prim)));

      WHILE INSTR (v_comment, '  ') > 0
      LOOP
         v_comment := REPLACE (v_comment, '  ', ' ');
      END LOOP;

      -- Перебор префиксов
      FOR lcur IN tmp_cur
      LOOP
         v_pref_name0 := UPPER (RTRIM (LTRIM (lcur.pref_name)));
         v_len0 := LENGTH (v_pref_name0);

         IF SUBSTR (v_comment, 1, v_len0 + 1) = (v_pref_name0 || '.')
         THEN
            v_num_kvit := str2num (v_comment, v_len0 + 2);
            EXIT;
         END IF;

         IF SUBSTR (v_comment, 1, v_len0) = (v_pref_name0)
         THEN
            v_num_kvit := str2num (v_comment, v_len0 + 1);
            EXIT;
         END IF;

         v_pref_name1 := RTRIM (LTRIM (REPLACE (v_pref_name0, ' ', '.')));
         v_len1 := LENGTH (v_pref_name1);

         IF SUBSTR (v_comment, 1, v_len1 + 1) = (v_pref_name1 || '.')
         THEN
            v_num_kvit := str2num (v_comment, v_len1 + 2);
            EXIT;
         END IF;

         IF SUBSTR (v_comment, 1, v_len1) = (v_pref_name1)
         THEN
            v_num_kvit := str2num (v_comment, v_len1 + 1);
            EXIT;
         END IF;

         v_pref_name1 := RTRIM (LTRIM (REPLACE (v_pref_name0, ' ', '')));
         v_len1 := LENGTH (v_pref_name1);

         IF SUBSTR (v_comment, 1, v_len1 + 1) = (v_pref_name1 || '.')
         THEN
            v_num_kvit := str2num (v_comment, v_len1 + 2);
            EXIT;
         END IF;

         IF SUBSTR (v_comment, 1, v_len1) = (v_pref_name1)
         THEN
            v_num_kvit := str2num (v_comment, v_len1 + 1);
            EXIT;
         END IF;
      END LOOP;

      RETURN v_num_kvit;
   END;

   FUNCTION get_num_sved (prim VARCHAR2)
      RETURN NUMBER
   IS
-- Определение номера сведения из исходящего счета из ПАРУСА
      CURSOR tmp_cur
      IS
         SELECT   LENGTH (RTRIM (LTRIM (pref_name))) AS len1, pref_name
             FROM ktu_2_npo_pref_sved
         ORDER BY len1 DESC;

      v_np           NUMBER;
      v_comment      VARCHAR2 (240);
      v_pref_name0   VARCHAR2 (240);
      v_len0         NUMBER;
   BEGIN
      v_np := 0;
      v_comment := UPPER (RTRIM (LTRIM (prim)));

      -- Перебор префиксов
      FOR lcur IN tmp_cur
      LOOP
         v_pref_name0 := UPPER (RTRIM (LTRIM (lcur.pref_name)));
         v_len0 := LENGTH (v_pref_name0);

         IF SUBSTR (v_comment, 1, v_len0) = (v_pref_name0)
         THEN
            v_np := str2num (v_comment, v_len0 + 1);
            EXIT;
         END IF;
      END LOOP;

      RETURN v_np;
   END;

   FUNCTION get_num_dog (base_numb VARCHAR2)
      RETURN VARCHAR2
   IS
      v_tmp       VARCHAR2 (240);
      i1          NUMBER;
      i2          NUMBER;
      i3          NUMBER;
      v_ss        VARCHAR2 (240);
      v_luk_dog   VARCHAR2 (240);
      v_cnt       NUMBER;
      isfound     BOOLEAN;
   BEGIN
      v_tmp := UPPER (LTRIM (RTRIM (base_numb)));
      i1 := INSTR (v_tmp, '(', 1, 1);

      IF i1 > 0
      THEN
         v_tmp := LTRIM (RTRIM (SUBSTR (v_tmp, 1, i1 - 1)));
      END IF;

      IF v_tmp = 'СНП-020031209'
      THEN
         v_tmp := 'СНП-020021209';
      END IF;

      v_tmp := REPLACE (v_tmp, 'СНП ', 'СНП-');
      v_tmp := REPLACE (v_tmp, 'CНП ', 'СНП-');
      v_tmp := REPLACE (v_tmp, 'КМС', '');
      i1 := INSTR (v_tmp, '-', 1, 1);
      i2 := INSTR (v_tmp, '/', 1, 1);
      i3 := INSTR (v_tmp, '/', 1, 2);

      IF i3 > 0
      THEN
         v_ss := SUBSTR (v_tmp, i2 + 1, i3 - i2 - 1);

         IF v_ss = '80'
         THEN
            v_ss := '080';
         END IF;

         v_luk_dog := SUBSTR (v_tmp, i1 + 1, i2 - i1 - 1) || '/' || v_ss;
      ELSE
         v_luk_dog := SUBSTR (v_tmp, i1 + 1, 240);
      END IF;

      isfound := FALSE;

      SELECT COUNT (*)
        INTO v_cnt
        FROM kls_dog
       WHERE kls_dog.short_number = v_luk_dog;

      isfound := (v_cnt > 0);

      IF NOT isfound
      THEN
         IF SUBSTR (v_luk_dog, 7, 1) <> '/'
         THEN
            v_ss :=
                   SUBSTR (v_luk_dog, 1, 6) || '/'
                   || SUBSTR (v_luk_dog, 7, 3);

            SELECT COUNT (*)
              INTO v_cnt
              FROM kls_dog
             WHERE kls_dog.short_number = v_ss;

            isfound := (v_cnt > 0);

            IF NOT isfound
            THEN
               IF SUBSTR (v_luk_dog, 1, 5) = '02021'
               THEN
                  v_luk_dog := '020021' || SUBSTR (v_luk_dog, 6, 240);
                  v_ss :=
                        SUBSTR (v_luk_dog, 1, 6)
                     || '/'
                     || SUBSTR (v_luk_dog, 7, 4);

                  SELECT COUNT (*)
                    INTO v_cnt
                    FROM kls_dog
                   WHERE kls_dog.short_number = v_ss;

                  isfound := (v_cnt > 0);

                  IF NOT isfound
                  THEN
                     v_luk_dog := ' ';
                  ELSE
                     v_luk_dog := v_ss;
                  END IF;
               END IF;
            ELSE
               v_luk_dog := v_ss;
            END IF;
         END IF;
      END IF;

      IF isfound
      THEN
         RETURN v_luk_dog;
      ELSE
         RETURN NULL;
      END IF;
   END;

   FUNCTION get_dog_id (base_numb VARCHAR2)
      RETURN NUMBER
   IS
      v_luk_dog   VARCHAR2 (240);
      v_id        NUMBER;
   BEGIN
      v_luk_dog := get_num_dog (base_numb);

      IF v_luk_dog IS NOT NULL
      THEN
         SELECT ID
           INTO v_id
           FROM kls_dog
          WHERE kls_dog.short_number = v_luk_dog;

         RETURN v_id;
      ELSE
         RETURN NULL;
      END IF;
   END;
END;
/

--
-- FOR_PARUS_SNAPSHOTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_PARUS_SNAPSHOTS AS

PROCEDURE RENEW_SNAPSHOTS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  DELETE FROM LOAD_BUFFER.PARUS_DICACCFO;
  DELETE FROM LOAD_BUFFER.PARUS_DICLACFO;
  
  INSERT INTO LOAD_BUFFER.PARUS_DICACCFO (RN, PREF_SF, NPO_SF, ACC_DATE, BASE_NUMB, BASE_DATE, CONF_NUMB, CONF_DATE, SENDER, PRIM, SUM_WOUT, SUM_NDS, SUM_GSM, SUM_TOTAL, KOL_DN, NOM_ZD)
    SELECT RN, PREF_SF, NPO_SF, ACC_DATE, BASE_NUMB, BASE_DATE, CONF_NUMB, CONF_DATE, SENDER, PRIM, SUM_WOUT, SUM_NDS, SUM_GSM, SUM_TOTAL, KOL_DN, NOM_ZD 
	FROM VANEEV.V_DICACCFO_NEW@ORACLE.WORLD
    WHERE ACC_DATE>=DATE_BEG
      AND ACC_DATE<=DATE_END;

  INSERT INTO LOAD_BUFFER.PARUS_DICLACFO (RN, PRN, FOOD_RN, FOOD_PRN, FOOD_CODE, FOOD_TYPE, FOOD_NAME, AMOUNT, MES_UNIT, MES_UNIT_NAME, CENA_BN, SUM_BN, AKCIZ, GSM, SUM_WOUT, RATE_NDS, SUM_NDS, CENA, SUM_TOTAL)
    SELECT RN, PRN, FOOD_RN, FOOD_PRN, FOOD_CODE, FOOD_TYPE, FOOD_NAME, AMOUNT, MES_UNIT, MES_UNIT_NAME, CENA_BN, SUM_BN, AKCIZ, GSM, SUM_WOUT, RATE_NDS, SUM_NDS, CENA, SUM_TOTAL 
	FROM VANEEV.V_DICLACFO_NEW@ORACLE.WORLD
    WHERE ACC_DATE>=DATE_BEG
      AND ACC_DATE<=DATE_END;
	  
  FOR_PARUS.UPDATE_SNAPSHOTS_REQV;  	
  
  COMMIT;

END RENEW_SNAPSHOTS;
 
END;
/

--
-- FOR_PLANFACT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Planfact AS

  -- Очистить таблицу PLAN_FACT
  PROCEDURE EmptyPlanFact IS
  BEGIN
    DELETE FROM PLAN_FACT
    WHERE TERMINAL_NAME = For_Init.GetCurrTerm
      AND OSUSER_NAME = For_Init.GetCurrUser;
    COMMIT;	 
  END;
  
  -- Заполнить план поставок
  PROCEDURE FillPlanPost (PlanId NUMBER, DateBeg VARCHAR2, DateEnd VARCHAR2, IsSNP NUMBER DEFAULT 0) IS
    vDateBeg DATE;
	vDateEnd DATE;
	pDateEnd DATE;
	NumDay NUMBER;
	NumDay7 NUMBER;
	MaxDay NUMBER;
  BEGIN
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy');
	vDateBeg:=TRUNC(TO_DATE(DateBeg,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(TO_DATE(DateEnd,'dd.mm.yyyy')); -- Конец месяца
	NumDay:=TO_NUMBER(TO_CHAR(pDateEnd,'dd'));
	IF pDateEnd-7<vDateBeg THEN
	  NumDay7:=0;
	ELSE  
  	  NumDay7:=TO_NUMBER(TO_CHAR(pDateEnd-7,'dd'));
	end if;  
	MaxDay:=TO_NUMBER(TO_CHAR(vDateEnd,'dd'));
	
	-- Текущий план
    -- Перебор плановых периодов
    FOR lcur IN (SELECT A.ID,A.BEGIN_DATE,A.END_DATE,
	               (CASE
				      WHEN A.BEGIN_DATE>=vDateBeg+20 THEN 3
					  WHEN A.BEGIN_DATE>=vDateBeg+10 THEN 2
					  ELSE 1
					END) as NUM_DECADA
				  FROM PLAN_PERIODS A 
	             WHERE A.Plan_id=PlanID AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd) LOOP
	  -- Добавляем план за месяц во временную таблицу
      INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, 
	    DATE_PLAN, PLAN_MON_V, PLAN_NAR_V, PLAN_NAR_RASP, PLAN_NAR_RASP_7,NUM_DECADA) 
      SELECT
        (CASE
		   WHEN PlanId=14 THEN 'ПОСТ_АВТО'
		   ELSE 'ПОСТАВКА'
		 END) AS TIP_ROW,
        TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
        A.PROD_ID_NPR,
        TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
        A.PLANSTRU_ID,
        pDateEnd AS DATE_PLAN,
        SUM(A.PLAN_VES) AS PLAN_MON_V,
        SUM(A.PLAN_VES/MaxDay*NumDay) AS PLAN_NAR_V,
        SUM(CASE
		      WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			  ELSE A.PLAN_VES/MaxDay*NumDay
			END) AS PLAN_NAR_RASP,
        SUM(CASE
		      WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			  ELSE A.PLAN_VES/MaxDay*NumDay7
			END) AS PLAN_NAR_RASP_7,
		(CASE
 	       WHEN pDateEnd>=vDateBeg+20 THEN 3
		   WHEN pDateEnd>=vDateBeg+10 THEN 2
		   ELSE 1
		 END) as NUM_DECADA
      FROM PLAN_POST A, V_KLS_PLANSTRU C, KLS_DOG D 
      WHERE A.PLANSTRU_ID=C.ID
	    AND A.DOG_ID=D.ID
        AND A.PLAN_ID=PlanId
        AND A.PLAN_PER_ID=lcur.ID
		AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
		AND NVL(A.REFINERY_ID,8) in (8,4175)
		--AND a.prod_id_npr<>'90000'
		AND NOT(A.PLAN_PER_ID=145 AND A.PLANSTRU_ID=13 AND A.PLAN_ID=PlanId AND A.PROD_ID_NPR='10492')
      GROUP BY     
        TO_NUMBER(A.PROD_ID_NPR),
        A.PROD_ID_NPR,
        TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
        A.PLANSTRU_ID;

    END LOOP;

	
	IF PlanID=2 THEN

	  -- План подекадно
      FOR lcur IN (SELECT A.ID,A.BEGIN_DATE,A.END_DATE,
	               (CASE
				      WHEN A.BEGIN_DATE>=vDateBeg+20 THEN 3
					  WHEN A.BEGIN_DATE>=vDateBeg+10 THEN 2
					  ELSE 1
					END) as NUM_DECADA
				   FROM PLAN_PERIODS A 
	               WHERE A.Plan_id=7 AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd) LOOP
        INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, 
	      DATE_PLAN, PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3,NUM_DECADA) 
        SELECT
          'ПОСТАВКА' AS TIP_ROW,
          TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
          A.PLANSTRU_ID,
          pDateEnd AS DATE_PLAN,
	      SUM(CASE
	            WHEN lcur.NUM_DECADA=1 THEN A.PLAN_VES
			    ELSE 0
		      END) as PLAN_DECADA_1,
	      SUM(CASE
	            WHEN lcur.NUM_DECADA=2 THEN A.PLAN_VES
			    ELSE 0
		      END) as PLAN_DECADA_2,
	      SUM(CASE
	            WHEN lcur.NUM_DECADA=3 THEN A.PLAN_VES
			    ELSE 0
		      END) as PLAN_DECADA_3,
		(CASE
 	       WHEN pDateEnd>=vDateBeg+20 THEN 3
		   WHEN pDateEnd>=vDateBeg+10 THEN 2
		   ELSE 1
		 END) as NUM_DECADA
        FROM PLAN_POST A, V_KLS_PLANSTRU C, KLS_DOG D 
        WHERE A.PLANSTRU_ID=C.ID
	      AND A.DOG_ID=D.ID
          AND A.PLAN_ID=7
          AND A.PLAN_PER_ID=lcur.ID
		  AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
		  AND NVL(A.REFINERY_ID,8) in (8,4175)
		  --AND a.prod_id_npr<>'90000'
		  AND NOT(A.PLAN_PER_ID=145 AND A.PLANSTRU_ID=13 AND A.PLAN_ID=PlanId AND A.PROD_ID_NPR='10492')
        GROUP BY     
          TO_NUMBER(A.PROD_ID_NPR),
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
          A.PLANSTRU_ID;
      END LOOP;

	  -- Только ОБР
      FOR lcur IN (SELECT A.ID,A.BEGIN_DATE,A.END_DATE,
	               (CASE
				      WHEN A.BEGIN_DATE>=vDateBeg+20 THEN 3
					  WHEN A.BEGIN_DATE>=vDateBeg+10 THEN 2
					  ELSE 1
					END) as NUM_DECADA
					FROM PLAN_PERIODS A 
	               WHERE A.Plan_id=3 AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd) LOOP
  	    -- Добавляем план во временную таблицу
        INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, 
		    DATE_PLAN, OBR_MON_V, OBR_NAR_V, OBR_NAR_RASP, OBR_NAR_RASP_7,NUM_DECADA) 
        SELECT
          'ПОСТАВКА' AS TIP_ROW,
          TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
          A.PLANSTRU_ID,
          pDateEnd AS DATE_PLAN,
          SUM(A.PLAN_VES) AS OBR_MON_V,
          SUM(A.PLAN_VES/MaxDay*NumDay) AS OBR_NAR_V,
          SUM(CASE
		        WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			    ELSE A.PLAN_VES/MaxDay*NumDay
			  END) AS OBR_NAR_RASP,
          SUM(CASE
		        WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			    ELSE A.PLAN_VES/MaxDay*NumDay7
			  END) AS OBR_NAR_RASP_7,
		(CASE
 	       WHEN pDateEnd>=vDateBeg+20 THEN 3
		   WHEN pDateEnd>=vDateBeg+10 THEN 2
		   ELSE 1
		 END) as NUM_DECADA
        FROM PLAN_POST A, V_KLS_PLANSTRU C, KLS_DOG D 
        WHERE A.PLANSTRU_ID=C.ID
	      AND A.DOG_ID=D.ID
          AND A.PLAN_ID=3
          AND A.PLAN_PER_ID=lcur.ID
  		  AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
		  AND NVL(A.REFINERY_ID,8) in (8,4175)
	  	  --AND a.prod_id_npr<>'90000'
  		  AND NOT(A.PLAN_PER_ID=145 AND A.PLANSTRU_ID=13 AND A.PLAN_ID=PlanId AND A.PROD_ID_NPR='10492')
        GROUP BY     
          TO_NUMBER(A.PROD_ID_NPR),
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
          A.PLANSTRU_ID;
    
      END LOOP;
	END IF;


	IF PlanID=14 THEN
	  -- Только ОБР
      FOR lcur IN (SELECT A.ID,A.BEGIN_DATE,A.END_DATE,
	               (CASE
				      WHEN A.BEGIN_DATE>=vDateBeg+20 THEN 3
					  WHEN A.BEGIN_DATE>=vDateBeg+10 THEN 2
					  ELSE 1
					END) as NUM_DECADA
					FROM PLAN_PERIODS A 
	               WHERE A.Plan_id=15 AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd) LOOP
  	    -- Добавляем план во временную таблицу
        INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, 
		    DATE_PLAN, OBR_MON_V, OBR_NAR_V, OBR_NAR_RASP, OBR_NAR_RASP_7,NUM_DECADA) 
        SELECT
          'ПОСТ_АВТО' AS TIP_ROW,
          TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
          A.PLANSTRU_ID,
          pDateEnd AS DATE_PLAN,
          SUM(A.PLAN_VES) AS OBR_MON_V,
          SUM(A.PLAN_VES/MaxDay*NumDay) AS OBR_NAR_V,
          SUM(CASE
		        WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			    ELSE A.PLAN_VES/MaxDay*NumDay
			  END) AS OBR_NAR_RASP,
          SUM(CASE
		        WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			    ELSE A.PLAN_VES/MaxDay*NumDay7
			  END) AS OBR_NAR_RASP_7,
		(CASE
 	       WHEN pDateEnd>=vDateBeg+20 THEN 3
		   WHEN pDateEnd>=vDateBeg+10 THEN 2
		   ELSE 1
		 END) as NUM_DECADA
        FROM PLAN_POST A, V_KLS_PLANSTRU C, KLS_DOG D 
        WHERE A.PLANSTRU_ID=C.ID
	      AND A.DOG_ID=D.ID
          AND A.PLAN_ID=3
          AND A.PLAN_PER_ID=lcur.ID
  		  AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
		  AND NVL(A.REFINERY_ID,8) in (8,4175)
	  	  --AND a.prod_id_npr<>'90000'
  		  AND NOT(A.PLAN_PER_ID=145 AND A.PLANSTRU_ID=13 AND A.PLAN_ID=PlanId AND A.PROD_ID_NPR='10492')
        GROUP BY     
          TO_NUMBER(A.PROD_ID_NPR),
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
          A.PLANSTRU_ID;
    
      END LOOP;
	END IF;
	
	-- Только ОБР (СНП)
	IF PlanID=12 THEN
      -- Перебор плановых периодов 
      FOR lcur IN (SELECT A.ID FROM PLAN_PERIODS A 
	               WHERE A.Plan_id=13 AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd) LOOP
  	    -- Добавляем план во временную таблицу
        INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, 
		    DATE_PLAN, OBR_MON_V, OBR_NAR_V, OBR_NAR_RASP) 
        SELECT
          'ПОСТАВКА' AS TIP_ROW,
          TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
          A.PLANSTRU_ID,
          pDateEnd AS DATE_PLAN,
          SUM(A.PLAN_VES) AS OBR_MON_V,
          SUM(A.PLAN_VES/MaxDay*NumDay) AS OBR_NAR_V,
          SUM(CASE
		        WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			    ELSE A.PLAN_VES/MaxDay*NumDay
			  END) AS OBR_NAR_RASP
        FROM PLAN_POST A, V_KLS_PLANSTRU C, KLS_DOG D 
        WHERE A.PLANSTRU_ID=C.ID
	      AND A.DOG_ID=D.ID
          AND A.PLAN_ID=13
          AND A.PLAN_PER_ID=lcur.ID
  		  AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
		  AND NVL(A.REFINERY_ID,8) in (8,4175)
	  	  --AND a.prod_id_npr<>'90000'
        GROUP BY     
          TO_NUMBER(A.PROD_ID_NPR),
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
          A.PLANSTRU_ID;
    
      END LOOP;
	END IF;

	-- Только заявки на корректировку (УНП)
	IF PlanID=2 THEN
      -- Перебор плановых периодов 
      FOR lcur IN (SELECT A.ID,A.BEGIN_DATE,A.END_DATE,
	               (CASE
				      WHEN A.BEGIN_DATE>=vDateBeg+20 THEN 3
					  WHEN A.BEGIN_DATE>=vDateBeg+10 THEN 2
					  ELSE 1
					END) as NUM_DECADA
					FROM PLAN_PERIODS A 
	               WHERE A.Plan_id=6 AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd) LOOP
  	    -- Добавляем план во временную таблицу
        INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, 
		    DATE_PLAN, KORR_MON_V, KORR_NAR_V, KORR_NAR_RASP,NUM_DECADA) 
        SELECT
          'ПОСТАВКА' AS TIP_ROW,
          TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
          A.PLANSTRU_ID,
          pDateEnd AS DATE_PLAN,
          SUM(A.PLAN_VES) AS KORR_MON_V,
          SUM(A.PLAN_VES/MaxDay*NumDay) AS KORR_NAR_V,
          SUM(CASE
		        WHEN C.ID in (174,175,176,194,249,250,251,253,266) THEN 0
			    ELSE A.PLAN_VES/MaxDay*NumDay
			  END) AS KORR_NAR_RASP,
		(CASE
 	       WHEN pDateEnd>=vDateBeg+20 THEN 3
		   WHEN pDateEnd>=vDateBeg+10 THEN 2
		   ELSE 1
		 END) as NUM_DECADA
        FROM PLAN_POST A, V_KLS_PLANSTRU C, KLS_DOG D 
        WHERE A.PLANSTRU_ID=C.ID
	      AND A.DOG_ID=D.ID
          AND A.PLAN_ID=6
          AND A.PLAN_PER_ID=lcur.ID
  		  AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
		  AND NVL(A.REFINERY_ID,8) in (8,4175)
	  	  --AND a.prod_id_npr<>'90000'
        GROUP BY     
          TO_NUMBER(A.PROD_ID_NPR),
          A.PROD_ID_NPR,
          TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
          A.PLANSTRU_ID;
    
      END LOOP;
	END IF;

    COMMIT;
  END; 
  
  -- Заполнить "Заявлено"
  PROCEDURE FillZayv (DateBeg VARCHAR2, DateEnd VARCHAR2, IsSNP NUMBER DEFAULT 0) IS
    vDateBeg DATE;
	vDateEnd DATE;
  BEGIN
	vDateBeg:=TRUNC(TO_DATE(DateBeg,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(TO_DATE(DateEnd,'dd.mm.yyyy')); -- Конец месяца

    INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_ZAYV,ZAYV) 
    SELECT
      'ПОСТАВКА' AS TIP_ROW,
      TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
      A.PLANSTRU_ID,
      MAX(A.UPDATE_DATE) AS DATE_ZAYV, 
      SUM(A.TONN_DECLARED) AS ZAYV
    FROM MONTH A, V_KLS_PLANSTRU C 
    WHERE A.PLANSTRU_ID=C.ID
      AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd
	  AND A.NAZN_OTG_ID<>10
      AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
      --AND a.prod_id_npr<>'90000'
    GROUP BY     
      TO_NUMBER(A.PROD_ID_NPR),
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
      A.PLANSTRU_ID;

	COMMIT;  
  END;

  -- Заполнить "Заявлено"
  PROCEDURE FillZayvSNP (DateBeg VARCHAR2, DateEnd VARCHAR2) IS
    vDateBeg DATE;
	vDateEnd DATE;
  BEGIN
	vDateBeg:=TRUNC(TO_DATE(DateBeg,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(TO_DATE(DateEnd,'dd.mm.yyyy')); -- Конец месяца

    INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_ZAYV,ZAYV) 
    SELECT
      'ПОСТАВКА' AS TIP_ROW,
      TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
      C.ID,
      MAX(A.UPDATE_DATE) AS DATE_ZAYV, 
      SUM(A.TONN_DECLARED) AS ZAYV
    FROM MONTH A, V_KLS_PLANSTRU C, ZAKAZ unp, ZAKAZ snp  
    WHERE A.ZAKAZ_ID=unp.ID(+) AND unp.LINK_ID=snp.ID(+) 
	  AND NVL(snp.PLANSTRU_ID,A.PLANSTRU_ID)=C.ID     
      AND A.DATE_PLAN BETWEEN vDateBeg AND vDateEnd
	  AND A.NAZN_OTG_ID<>10
      AND C.IS_SNP=1
      --AND a.prod_id_npr<>'90000'
    GROUP BY     
      TO_NUMBER(A.PROD_ID_NPR),
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
      C.ID;

	COMMIT;  
  END;
    
  -- Заполнить "Свободная емкость"
  PROCEDURE FillEmptyVol (TimeEnd VARCHAR2, DateEnd VARCHAR2) IS
	pTimeEnd VARCHAR2(5);
	pDateEnd DATE;
  BEGIN
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 
	pTimeEnd:=SUBSTR(TimeEnd,1,5);

    INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, DATE_EMPTY_VOL, TIME_EMPTY_VOL, MAX_VOL,DEAD_VOL,VOL,EMPTY_VOL) 
    SELECT
      'СВ.ЕМКОСТЬ' AS TIP_ROW,
      TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
      A.PROD_ID_NPR,
      pDateEnd AS DATE_EMPTY_VOL,
      pTimeEnd AS TIME_EMPTY_VOL,
	  SUM(A.MAX_VOL) AS MAX_VOL,
	  SUM(A.DEAD_VOL) AS DEAD_VOL,
--      SUM(DECODE(SIGN(A.VOL-A.DEAD_VOL),1,A.VOL-A.DEAD_VOL,0)) AS VOL, 
      SUM(DECODE(A.AR_TOV_ID,1,DECODE(SIGN(A.VOL-A.DEAD_VOL),1,A.VOL-A.DEAD_VOL,0),0)) AS VOL, 
      SUM(DECODE(SIGN(A.MAX_VOL-A.VOL),1,A.MAX_VOL-A.VOL,0)) AS EMPTY_VOL 
    FROM ARC_REZ A
    WHERE A.DATEUPLOAD=TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')
--	  AND A.AR_TOV_ID=1
    GROUP BY     
      TO_NUMBER(A.PROD_ID_NPR),
      A.PROD_ID_NPR;

    COMMIT;
  END;

  -- Заполнить факт по плану поставок
  PROCEDURE FillFactPost (DateBegPlan VARCHAR2, DateEndPlan VARCHAR2, TimeBeg VARCHAR2, DateBeg VARCHAR2, TimeEnd VARCHAR2, DateEnd VARCHAR2, IsSNP NUMBER DEFAULT 0) IS
    vDateBegPlan DATE;
	vDateEndPlan DATE;
	pTimeBeg VARCHAR2(5);
	pTimeEnd VARCHAR2(5);
	pDateEnd DATE;
	pDateEnd7 VARCHAR2(10);
  BEGIN
	vDateBegPlan:=TRUNC(TO_DATE(DateBegPlan,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEndPlan:=LAST_DAY(TO_DATE(DateEndPlan,'dd.mm.yyyy')); -- Конец месяца
	pTimeBeg:=SUBSTR(TimeBeg,1,5); 
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 
	pTimeEnd:=SUBSTR(TimeEnd,1,5);

	IF pDateEnd-7<vDateBegPlan THEN
	  pDateEnd7:=TO_CHAR(vDateBegPlan,'dd.mm.yyyy');
	ELSE  
  	  pDateEnd7:=TO_CHAR(pDateEnd-7,'dd.mm.yyyy');
	end if;  

	-- Отгрузка всего
    INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_FACT, TIME_FACT, FACT_SUT_V, FACT_V, FACT_NAR_7,
  	   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3,DATE_PLAN) 
    SELECT
      'ПОСТАВКА' AS TIP_ROW,
      TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
      MONTH.PLANSTRU_ID,
      pDateEnd AS DATE_FACT,
      pTimeEnd AS TIME_FACT,
	  SUM(CASE
	        WHEN A.DATE_OFORML>=TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')-1 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_SUT_V,
      SUM(A.VES_BRUTTO) AS FACT_V,
	  SUM(CASE
	        WHEN A.DATE_OFORML<TO_DATE(pDateEnd7 || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi') THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_NAR_7,
	  SUM(CASE
	        WHEN TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))<=10 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_DECADA_1,
	  SUM(CASE
	        WHEN TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))>10 AND TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))<=20 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_DECADA_2,
	  SUM(CASE
	        WHEN TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))>20 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_DECADA_3,
      TO_DATE(DateEndPlan,'dd.mm.yyyy') AS DATE_PLAN	  
    FROM KVIT A, MONTH, V_KLS_PLANSTRU C 
    WHERE MONTH.PLANSTRU_ID=C.ID    
	  AND A.NOM_ZD=MONTH.NOM_ZD 
      AND MONTH.DATE_PLAN BETWEEN vDateBegPlan AND vDateEndPlan
	  AND MONTH.NAZN_OTG_ID<>10
      --AND a.prod_id_npr<>'90000'
      AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
--      AND A.DATE_OFORML>=TO_DATE(DateBeg || ' ' || pTimeBeg,'dd.mm.yyyy hh24:mi')
      AND A.DATE_OFORML <TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')
    GROUP BY     
      TO_NUMBER(A.PROD_ID_NPR),
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
      MONTH.PLANSTRU_ID,
	  (CASE
	        WHEN A.DATE_OTGR>=vDateBegPlan+20 THEN 3
	        WHEN A.DATE_OTGR>=vDateBegPlan+10 THEN 2
			ELSE 1
		  END);

    -- Отгрузка автотранспортом
    INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_FACT, TIME_FACT, FACT_SUT_V, FACT_V, FACT_NAR_7,
  	   FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3,DATE_PLAN) 
    SELECT
      'ПОСТ_АВТО' AS TIP_ROW,
      TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
      MONTH.PLANSTRU_ID,
      pDateEnd AS DATE_FACT,
      pTimeEnd AS TIME_FACT,
	  SUM(CASE
	        WHEN A.DATE_OFORML>=TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')-1 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_SUT_V,
      SUM(A.VES_BRUTTO) AS FACT_V,
	  SUM(CASE
	        WHEN A.DATE_OFORML<TO_DATE(pDateEnd7 || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi') THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_NAR_7,
	  SUM(CASE
	        WHEN TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))<=10 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_DECADA_1,
	  SUM(CASE
	        WHEN TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))>10 AND TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))<=20 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_DECADA_2,
	  SUM(CASE
	        WHEN TO_NUMBER(TO_CHAR(A.DATE_OTGR,'DD'))>20 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_DECADA_3,
      TO_DATE(DateEndPlan,'dd.mm.yyyy') AS DATE_PLAN	  
    FROM KVIT A, MONTH, V_KLS_PLANSTRU C, KLS_VID_OTGR 
    WHERE MONTH.PLANSTRU_ID=C.ID    
	  AND A.NOM_ZD=MONTH.NOM_ZD 
      AND MONTH.DATE_PLAN BETWEEN vDateBegPlan AND vDateEndPlan
	  AND MONTH.NAZN_OTG_ID<>10
      --AND a.prod_id_npr<>'90000'
      AND C.IS_SNP=DECODE(IsSNP,1,1,C.IS_SNP)
--      AND A.DATE_OFORML>=TO_DATE(DateBeg || ' ' || pTimeBeg,'dd.mm.yyyy hh24:mi')
      AND A.DATE_OFORML <TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')
	  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
	  AND KLS_VID_OTGR.LOAD_TYPE_ID=2
    GROUP BY     
      TO_NUMBER(A.PROD_ID_NPR),
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
      MONTH.PLANSTRU_ID,
	  (CASE
	        WHEN A.DATE_OTGR>=vDateBegPlan+20 THEN 3
	        WHEN A.DATE_OTGR>=vDateBegPlan+10 THEN 2
			ELSE 1
		  END);
  
    COMMIT;
  END;

  -- Заполнить факт по плану поставок
  PROCEDURE FillFactPostSNP (DateBegPlan VARCHAR2, DateEndPlan VARCHAR2, TimeBeg VARCHAR2, DateBeg VARCHAR2, TimeEnd VARCHAR2, DateEnd VARCHAR2) IS
    vDateBegPlan DATE;
	vDateEndPlan DATE;
	pTimeBeg VARCHAR2(5);
	pTimeEnd VARCHAR2(5);
	pDateEnd DATE;
  BEGIN
	vDateBegPlan:=TRUNC(TO_DATE(DateBegPlan,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEndPlan:=LAST_DAY(TO_DATE(DateEndPlan,'dd.mm.yyyy')); -- Конец месяца
	pTimeBeg:=SUBSTR(TimeBeg,1,5); 
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 
	pTimeEnd:=SUBSTR(TimeEnd,1,5);

    INSERT INTO PLAN_FACT (TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_FACT, TIME_FACT, FACT_SUT_V, FACT_V) 
    SELECT
      'ПОСТАВКА' AS TIP_ROW,
      TO_NUMBER(A.PROD_ID_NPR) AS PROD_ORDER,
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR) AS PLANSTRU_ORDER,
      C.ID as PLANSTRU_ID,
      pDateEnd AS DATE_FACT,
      pTimeEnd AS TIME_FACT,
	  SUM(CASE
	        WHEN A.DATE_OFORML>=TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')-1 THEN A.VES_BRUTTO
			ELSE 0
		  END) as FACT_SUT_V,
      SUM(A.VES_BRUTTO) AS FACT_V
    FROM KVIT A, MONTH, V_KLS_PLANSTRU C, ZAKAZ unp, ZAKAZ snp 
    WHERE MONTH.ZAKAZ_ID=unp.ID(+) AND unp.LINK_ID=snp.ID(+) 
	  AND NVL(snp.PLANSTRU_ID,MONTH.PLANSTRU_ID)=C.ID     
	  AND A.NOM_ZD=MONTH.NOM_ZD 
      AND MONTH.DATE_PLAN BETWEEN vDateBegPlan AND vDateEndPlan
	  AND MONTH.NAZN_OTG_ID<>10
      --AND a.prod_id_npr<>'90000'
      AND C.IS_SNP=1
      AND A.DATE_OFORML <TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')
    GROUP BY     
      TO_NUMBER(A.PROD_ID_NPR),
      A.PROD_ID_NPR,
      TO_CHAR(C.KOD_SGR*1000000000000000+C.KOD_SPG*1000000000000+C.KOD_RZD*1000000000+C.KOD_PRZ*1000000+C.KOD_GRP*1000+C.KOD_PGR),
      C.ID;
  
    COMMIT;
  END;
  
  -- Заполнить план перевозок
  PROCEDURE FillPlanGD (DateBeg VARCHAR2, DateEnd VARCHAR2) IS
    vDateBeg DATE;
	vDateEnd DATE;
	pDateEnd DATE;
  BEGIN
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 
	vDateBeg:=TRUNC(TO_DATE(DateBeg,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(TO_DATE(DateEnd,'dd.mm.yyyy')); -- Конец месяца

    -- План перевозок за месяц 	
    INSERT INTO PLAN_FACT (TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_PLAN, PLAN_MON_C, PLAN_MON_V, PLAN_MON_SOBS_C, PLAN_MON_SOBS_V) 
    SELECT
      'ПЕРЕВОЗКА' AS TIP_ROW,
      KLS_LOAD_TYPE.ID AS GROUP_ORDER,
      KLS_LOAD_TYPE.TYPE_OTGR_NAME AS GROUP_NAME,
      GU12_A.PROD_ID AS PROD_ORDER,
      TO_CHAR(GU12_A.PROD_ID) AS PROD_ID_NPR,
      DECODE(GU12_A.EXPED_ID,NULL,'1','2') AS PLANSTRU_ORDER,
      DECODE(GU12_A.EXPED_ID,NULL,1,2) AS PLANSTRU_ID,
      pDateEnd AS DATE_PLAN,
      SUM(DECODE(GU12_b.PRINVAG_ID,207,GU12_B.KOL_VAG,0)) AS PLAN_MON_C,
      SUM(DECODE(GU12_b.PRINVAG_ID,207,GU12_B.VES,0)) AS PLAN_MON_V,
      SUM(DECODE(GU12_b.PRINVAG_ID,207,0,GU12_B.KOL_VAG)) AS PLAN_MON_SOBS_C,
      SUM(DECODE(GU12_b.PRINVAG_ID,207,0,GU12_B.VES)) AS PLAN_MON_SOBS_V
    FROM GU12_A, GU12_B, KLS_LOAD_TYPE
    WHERE GU12_A.ID=GU12_B.ID_A 
	  AND KLS_LOAD_TYPE.ID=1
      AND TRUNC(GU12_A.FROM_DATE,'MM')=TRUNC(vDateEnd,'MM')
    GROUP BY     
      KLS_LOAD_TYPE.ID,
      KLS_LOAD_TYPE.TYPE_OTGR_NAME,
      GU12_A.PROD_ID,
      DECODE(GU12_A.EXPED_ID,NULL,'1','2'),
      DECODE(GU12_A.EXPED_ID,NULL,1,2);
	  
	COMMIT;
	
	-- План перевозок нарастающий  
    INSERT INTO PLAN_FACT (TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, 
        PLANSTRU_ORDER, PLANSTRU_ID, DATE_PLAN, PLAN_NAR_C, PLAN_NAR_V, PLAN_NAR_SOBS_C, PLAN_NAR_SOBS_V) 
    SELECT
      'ПЕРЕВОЗКА' AS TIP_ROW,
      KLS_LOAD_TYPE.ID AS GROUP_ORDER,
      KLS_LOAD_TYPE.TYPE_OTGR_NAME AS GROUP_NAME,
      GU12_A.PROD_ID AS PROD_ORDER,
      TO_CHAR(GU12_A.PROD_ID) AS PROD_ID_NPR,
      DECODE(GU12_A.EXPED_ID,NULL,'1','2') AS PLANSTRU_ORDER,
      DECODE(GU12_A.EXPED_ID,NULL,1,2) AS PLANSTRU_ID,
      pDateEnd AS DATE_PLAN,
      SUM(DECODE(GU12_B.PRINVAG_ID,207,GU12_BR.KOL_VAG,0)) AS PLAN_NAR_C,
      SUM(DECODE(GU12_B.PRINVAG_ID,207,GU12_BR.VES,0)) AS PLAN_NAR_V,
      SUM(DECODE(GU12_B.PRINVAG_ID,207,0,GU12_BR.KOL_VAG)) AS PLAN_NAR_SOBS_C,
      SUM(DECODE(GU12_B.PRINVAG_ID,207,0,GU12_BR.VES)) AS PLAN_NAR_SOBS_V
    FROM GU12_A, GU12_B, GU12_BR,KLS_LOAD_TYPE
    WHERE GU12_A.ID=GU12_B.ID_A AND GU12_B.ID=GU12_BR.ID_B 
	  AND KLS_LOAD_TYPE.ID=1
      AND TRUNC(GU12_A.FROM_DATE,'MM')=TRUNC(vDateEnd,'MM')
      AND GU12_BR.DATE_R<=pDateEnd
    GROUP BY     
      KLS_LOAD_TYPE.ID,
      KLS_LOAD_TYPE.TYPE_OTGR_NAME,
      GU12_A.PROD_ID,
      DECODE(GU12_A.EXPED_ID,NULL,'1','2'),
      DECODE(GU12_A.EXPED_ID,NULL,1,2);

	COMMIT;   
  END;
  
  -- Заполнить факт по плану перевозок
  PROCEDURE FillFactGD (TimeBeg VARCHAR2, DateBeg VARCHAR2, TimeEnd VARCHAR2, DateEnd VARCHAR2) IS
    vDateBeg DATE;
	vDateEnd DATE;
	pTimeBeg VARCHAR2(5);
	pTimeEnd VARCHAR2(5);
	pDateEnd DATE;
  BEGIN
	vDateBeg:=TRUNC(TO_DATE(DateBeg,'dd.mm.yyyy'),'MONTH'); -- Начало месяца
	vDateEnd:=LAST_DAY(TO_DATE(DateEnd,'dd.mm.yyyy')); -- Конец месяца
	pTimeBeg:=SUBSTR(TimeBeg,1,5); 
    pDateEnd:=TO_DATE(DateEnd,'dd.mm.yyyy'); 
	pTimeEnd:=SUBSTR(TimeEnd,1,5);
	
    INSERT INTO PLAN_FACT (TIP_ROW, GROUP_ORDER, GROUP_NAME, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ORDER, PLANSTRU_ID, DATE_FACT, TIME_FACT, FACT_C, FACT_V, FACT_SOBS_C, FACT_SOBS_V) 
    SELECT
      'ПЕРЕВОЗКА' AS TIP_ROW,
      KLS_LOAD_TYPE.ID AS GROUP_ORDER,
      KLS_LOAD_TYPE.TYPE_OTGR_NAME AS GROUP_NAME,
      TO_NUMBER(KLS_PROD.PROD_GU12_ID) AS PROD_ORDER,
      KLS_PROD.PROD_GU12_ID AS PROD_ID_NPR,
      TO_CHAR(MONTH.IS_EXP+1) AS PLANSTRU_ORDER,
      MONTH.IS_EXP+1 AS PLANSTRU_ID,
      pDateEnd AS DATE_FACT,
      pTimeEnd AS TIME_FACT,
      SUM(DECODE(A.VAGOWNER_ID,3,1,0)) AS FACT_C,
      SUM(DECODE(A.VAGOWNER_ID,3,A.VES_BRUTTO,0)) AS FACT_V,
      SUM(DECODE(A.VAGOWNER_ID,3,0,1)) AS FACT_SOBS_C,
      SUM(DECODE(A.VAGOWNER_ID,3,0,A.VES_BRUTTO)) AS FACT_SOBS_V
    FROM KVIT A, MONTH, KLS_VID_OTGR, KLS_LOAD_TYPE, KLS_PROD
    WHERE A.NOM_ZD=MONTH.NOM_ZD 
      AND A.PROD_ID_NPR=KLS_PROD.ID_NPR
      AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
      AND KLS_VID_OTGR.LOAD_TYPE_ID=KLS_LOAD_TYPE.ID 
      AND A.DATE_OFORML>=TO_DATE(DateBeg || ' ' || pTimeBeg,'dd.mm.yyyy hh24:mi')
      AND A.DATE_OFORML <TO_DATE(DateEnd || ' ' || pTimeEnd,'dd.mm.yyyy hh24:mi')
	  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,2,6)
    GROUP BY     
      KLS_LOAD_TYPE.ID,
      KLS_LOAD_TYPE.TYPE_OTGR_NAME,
      TO_NUMBER(KLS_PROD.PROD_GU12_ID),
      KLS_PROD.PROD_GU12_ID,
      TO_CHAR(MONTH.IS_EXP+1),
      MONTH.IS_EXP+1;

	COMMIT;
  END;

  -- Заполнение плана/факта по плану перевозок и поставки  
  PROCEDURE FillAll (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2) IS
	 i NUMBER;
  BEGIN
    EmptyPlanFact;
    i:=FOR_TEMP.SET_VARI('BEGIN_DATE',DateBegPlanPost,'MASTER','FOR_PLANFACT');
    i:=FOR_TEMP.SET_VARI('END_DATE',DateEndPlanPost,'MASTER','FOR_PLANFACT');

    FillPlanPost (PlanId,DateBegPlanPost,DateEndPlanPost);
    FillZayv (DateBegPlanPost,DateEndPlanPost);
    FillFactPost (DateBegPlanPost,DateEndPlanPost,TimeBegFactPost,DateBegFactPost,
	  TimeEndFactPost, DateEndFactPost);
    FillPlanGD (DateBegPlanGD,DateEndPlanGD);
    FillFactGD (TimeBegFactGD,DateBegFactGD,TimeEndFactGD,DateEndFactGD);
	FillEmptyVol ('00:00'/*TimeEndFactPost*/, DateEndFactPost);
	
	COMMIT;
  END;	 

  -- Заполнение плана/факта по плану поставки для СНП  
  PROCEDURE FillSNP (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2) IS
	 i NUMBER;
  BEGIN
    EmptyPlanFact;
    i:=FOR_TEMP.SET_VARI('BEGIN_DATE',DateBegPlanPost,'MASTER','FOR_PLANFACT');
    i:=FOR_TEMP.SET_VARI('END_DATE',DateEndPlanPost,'MASTER','FOR_PLANFACT');

    FillPlanPost (PlanId,DateBegPlanPost,DateEndPlanPost,1);
    FillZayv (DateBegPlanPost,DateEndPlanPost,1);
    FillFactPostSNP (DateBegPlanPost,DateEndPlanPost,TimeBegFactPost,DateBegFactPost,
	  TimeEndFactPost, DateEndFactPost);

	COMMIT;
  END;	 

  -- Заполнение оперативной сводки  
  PROCEDURE FillOper (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2) IS
	 i NUMBER;
  BEGIN
    EmptyPlanFact;
    i:=FOR_TEMP.SET_VARI('BEGIN_DATE',DateBegPlanPost,'MASTER','FOR_PLANFACT');
    i:=FOR_TEMP.SET_VARI('END_DATE',DateEndPlanPost,'MASTER','FOR_PLANFACT');
	
	FillPlanPost (PlanId,DateBegPlanPost,DateEndPlanPost);
	FillPlanPost (14,DateBegPlanPost,DateEndPlanPost);
    FillFactPost (DateBegPlanPost,DateEndPlanPost,TimeBegFactPost,DateBegFactPost,
	  TimeEndFactPost, DateEndFactPost);

    DELETE FROM V_PLAN_FACT
     WHERE PLANSTRU_ORDER>=91010000000000000 and PLANSTRU_ORDER<>91010095000000000 and (PLANSTRU_ORDER<91010040000000000 or PLANSTRU_ORDER>=91010080000000000) and planstru_id<>253;

	-- Данные для стр.2 "Выполнение плана по декадам"
    INSERT INTO PLAN_FACT (
	    TIP_ROW, PROD_ORDER, PROD_ID_NPR, PLANSTRU_ID, DATE_PLAN, 
		PLAN_MON_V, PLAN_NAR_V, PLAN_NAR_RASP, 
		OBR_MON_V, OBR_NAR_V, OBR_NAR_RASP,
		NUM_DECADA, 
		PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3,
		DATE_FACT, TIME_FACT, 
		FACT_SUT_V, FACT_V, 
     	FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3)
      SELECT
        'ПОДЕКАДНО' AS TIP_ROW,
        PROD_ORDER, PROD_ID_NPR, PLANSTRU_ID, DATE_PLAN, 
		PLAN_MON, PLAN_NAR, PLAN_NAR_RASP, 
		OBR_MON, OBR_NAR, OBR_NAR_RASP,
		NUM_DECADA, 
		PLAN_DECADA_1, PLAN_DECADA_2, PLAN_DECADA_3,
		DATE_FACT, TIME_FACT, 
		FACT_SUT, FACT, 
     	FACT_DECADA_1,FACT_DECADA_2,FACT_DECADA_3
      FROM V_PLAN_FACT
      WHERE TIP_ROW IN ('ПОСТАВКА'); 
	
    DELETE FROM V_PLAN_FACT
     WHERE PLANSTRU_ID IN (SELECT ID FROM KLS_PLANSTRU WHERE NAZN_OTG_ID=9);

    DELETE FROM V_PLAN_FACT
     WHERE TIP_ROW='ПОСТ_АВТО' AND PROD_ID_NPR NOT IN ('13007','13008','13009');
	
	COMMIT;
  END;	 

  -- Заполнение справки для видеоконференции  
  PROCEDURE FillConf (PlanId NUMBER, DateBegPlanPost VARCHAR2, DateEndPlanPost VARCHAR2,  
     TimeBegFactPost VARCHAR2, DateBegFactPost VARCHAR2, TimeEndFactPost VARCHAR2, DateEndFactPost VARCHAR2,
	 DateBegPlanGD VARCHAR2, DateEndPlanGD VARCHAR2,   
     TimeBegFactGD VARCHAR2, DateBegFactGD VARCHAR2, TimeEndFactGD VARCHAR2, DateEndFactGD VARCHAR2) IS
	 i NUMBER;
  BEGIN
    EmptyPlanFact;
    i:=FOR_TEMP.SET_VARI('BEGIN_DATE',DateBegPlanPost,'MASTER','FOR_PLANFACT');
    i:=FOR_TEMP.SET_VARI('END_DATE',DateEndPlanPost,'MASTER','FOR_PLANFACT');

    FillPlanPost (PlanId,DateBegPlanPost,DateEndPlanPost);
    FillFactPost (DateBegPlanPost,DateEndPlanPost,TimeBegFactPost,DateBegFactPost,
	  TimeEndFactPost, DateEndFactPost);
	
    DELETE FROM PLAN_FACT
     WHERE TERMINAL_NAME = For_Init.GetCurrTerm
       AND OSUSER_NAME = For_Init.GetCurrUser
	   AND PLANSTRU_ORDER>=91010080000000000;
	
	COMMIT;
  END;	 
  
END; 
/

--
-- FOR_PODACHA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_PODACHA AS

  /* ВЕДОМОСТИ ПОДАЧИ */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;


  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pVED_ID NUMBER) RETURN NUMBER AS
    MaxNum NUMBER;
    CurNum NUMBER;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(VED_POD_ROW.POD_POS) as MAX_NUM
                 FROM VED_POD_ROW
				WHERE VED_POD_ID=pVED_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций сведений 
	SELECT COUNT(*) INTO vCNT FROM REESTR WHERE VED_POD_ROW_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Позицию ведомости подачи нельзя удалить - есть позиции сведения!');
	END IF;

    DELETE FROM VED_POD_ROW WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM VED_POD_ROW WHERE VED_POD_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Ведомость подачи нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM VED_POD WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
  	 pPOD_NUM NUMBER, pPOD_DATE DATE, pTECH_TIME VARCHAR2, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, pEND_NALIV_TIME VARCHAR2,
     pVETKA_OTP_ID NUMBER) RETURN NUMBER AS

	vID NUMBER;
	vADD NUMBER;
	vTmp NUMBER;
	vTECH_TIME DATE;
	vGOTOV_TIME DATE;
	vBEG_NALIV_TIME DATE;
	vEND_NALIV_TIME DATE;
  BEGIN
    IF pTECH_TIME='' THEN
	  vTECH_TIME:=NULL;
	ELSE
	  vTECH_TIME:=TO_DATE(pTECH_TIME,'dd.mm.yyyy hh24:mi');
	END IF;  
    IF pGOTOV_TIME='' THEN
	  vGOTOV_TIME:=NULL;
	ELSE
	  vGOTOV_TIME:=TO_DATE(pGOTOV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pBEG_NALIV_TIME='' THEN
	  vBEG_NALIV_TIME:=NULL;
	ELSE
	  vBEG_NALIV_TIME:=TO_DATE(pBEG_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pEND_NALIV_TIME='' THEN
	  vEND_NALIV_TIME:=NULL;
	ELSE
	  vEND_NALIV_TIME:=TO_DATE(pEND_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 

    -- ID
	IF NVL(pID,0)<=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM VED_POD
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Ведомость подачи нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем ведомость
	UPDATE VED_POD SET (MESTO_ID, LOAD_TYPE_ID, VETKA_OTP_ID, POD_NUM, POD_DATE, TECH_TIME, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME)=
	  (SELECT pMESTO_ID, pLOAD_TYPE_ID, pVETKA_OTP_ID, pPOD_NUM, pPOD_DATE, pTECH_TIME, pGOTOV_TIME, pBEG_NALIV_TIME, pEND_NALIV_TIME FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем ведомость
      INSERT INTO VED_POD (ID,MESTO_ID, LOAD_TYPE_ID, VETKA_OTP_ID, POD_NUM, POD_DATE, TECH_TIME, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME)
	  VALUES (vID, pMESTO_ID, pLOAD_TYPE_ID, pVETKA_OTP_ID, pPOD_NUM, pPOD_DATE, pTECH_TIME, pGOTOV_TIME, pBEG_NALIV_TIME, pEND_NALIV_TIME);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Скопировать позицию из ДОКУМЕНТА в ДОКУМЕНТ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pROW_ID NUMBER, pNEW_TITLE_ID NUMBER) RETURN NUMBER AS
	vTitle VED_POD%ROWTYPE;
	vRow VED_POD_ROW%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из ведомости
	BEGIN
	  SELECT * INTO vRow
	    FROM VED_POD_ROW
	   WHERE ID=pROW_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Добавлять нечего, такой записи в ведомости нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT * INTO vTitle
	    FROM VED_POD
	   WHERE ID=pNEW_TITLE_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Ведомость подачи в которую переносится вагон - удалена!');
	END;

    -- Переносим вагон из ведомости в ведомость
	UPDATE VED_POD_ROW SET VED_POD_ID=pNEW_TITLE_ID WHERE ID=vRow.ID;
	-- Обновляем путь отгрузки у "связанной" позиции сведения
	UPDATE REESTR SET VETKA_OTP_ID=vTitle.VETKA_OTP_ID WHERE VED_POD_ROW_ID=vRow.ID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;

  /* Проверка вагона на уникальность
     Возвращаемое значение - номер ведомости, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER AS
  PRAGMA AUTONOMOUS_TRANSACTION;
    vRes NUMBER;
	vWorklen NUMBER;
  BEGIN
    IF pLOAD_TYPE_ID=1 THEN
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#1',FOR_INIT.GetCurrUser);
	ELSE
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#2',FOR_INIT.GetCurrUser);
	END IF;
    SELECT a.POD_NUM INTO vRes
	  FROM VED_POD_ROW b,VED_POD a
	 WHERE b.VED_POD_ID=a.ID
	   AND a.POD_DATE>=pDATE-2
	   AND b.NUM_CIST=pNUM_CIST
	   AND b.VAG_STATUS_ID IN (0,14)
	   AND b.ID<>pID
	   AND (TRUNC(a.POD_DATE)=TRUNC(pDATE) OR
	        ABS(hours_between(a.POD_DATE,pDATE))<vWorklen);
    ROLLBACK;
    RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  ROLLBACK;
	  RETURN NULL;
  END;


  /* Добавить/Изменить позицию ДОКУМЕНТА
     Возвращаемое занчение - ID позиции документа */
  FUNCTION AddRow(pCOMMIT NUMBER, pID NUMBER, pVED_POD_ID NUMBER, pPOD_POS NUMBER,
    pNUM_CIST VARCHAR2, pNCISTDOP NUMBER, pAXES NUMBER, pCAPACITY VARCHAR2, pVES_CIST NUMBER,
	pVAGONTYPE_ID NUMBER, pKALIBR_ID VARCHAR2, pVAGOWNER_ID NUMBER,
	pVETKA_POD_ID NUMBER, pVETKA_NAPR_ID NUMBER, pVAG_STATUS_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pVZLIV NUMBER, pVOLUME NUMBER, pTEMPER NUMBER, 
	pZPU_TYPE1 NUMBER, pZPU_TYPE2 NUMBER, pPLOMBA1 VARCHAR2, pPLOMBA2 VARCHAR2, pROSINSPL1 VARCHAR2,
	pROSINSPL2 VARCHAR2, pBAD_NUM NUMBER, pRAZMET_FACT VARCHAR2) RETURN VARCHAR2 AS

	vID VED_POD_ROW.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vLoadType VED_POD.LOAD_TYPE_ID%TYPE;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_ID.nextval INTO vTmp FROM DUAL;
	  vID:=vTmp;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования документа
	BEGIN
	  SELECT /*+ RULE */ LOAD_TYPE_ID
        INTO vLoadType
	 	FROM VED_POD
	   WHERE ID=pVED_POD_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Ведомость подачи удалена!');
	END;

	-- Проверка существования позиции
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM VED_POD_ROW
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Позицию нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем позицию
	UPDATE VED_POD_ROW SET (POD_POS,NUM_CIST,NCISTDOP,AXES,CAPACITY,VES_CIST,
	  VAGONTYPE_ID,KALIBR_ID,VAGOWNER_ID,VETKA_POD_ID,VETKA_NAPR_ID,VAG_STATUS_ID,PROD_ID_NPR,
	  VZLIV,VOLUME,TEMPER,ZPU_TYPE1,ZPU_TYPE2,PLOMBA1,PLOMBA2,ROSINSPL1,
	  ROSINSPL2,BAD_NUM,RAZMET_FACT)=
    (SELECT pPOD_POS,pNUM_CIST,pNCISTDOP,pAXES,pCAPACITY,pVES_CIST,
	  pVAGONTYPE_ID,pKALIBR_ID,pVAGOWNER_ID,pVETKA_POD_ID,pVETKA_NAPR_ID,pVAG_STATUS_ID,pPROD_ID_NPR,
	  pVZLIV,pVOLUME,pTEMPER,pZPU_TYPE1,pZPU_TYPE2,pPLOMBA1,pPLOMBA2,pROSINSPL1,
	  pROSINSPL2,pBAD_NUM,pRAZMET_FACT FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем позицию
      INSERT INTO VED_POD_ROW (ID,VED_POD_ID,POD_POS,NUM_CIST,NCISTDOP,AXES,CAPACITY,VES_CIST,
	  VAGONTYPE_ID,KALIBR_ID,VAGOWNER_ID,VETKA_POD_ID,VETKA_NAPR_ID,VAG_STATUS_ID,PROD_ID_NPR,
	  VZLIV,VOLUME,TEMPER,ZPU_TYPE1,ZPU_TYPE2,PLOMBA1,PLOMBA2,ROSINSPL1,
	  ROSINSPL2,BAD_NUM,RAZMET_FACT)
	  VALUES (vID,pVED_POD_ID,pPOD_POS,pNUM_CIST,pNCISTDOP,pAXES,pCAPACITY,pVES_CIST,
	  pVAGONTYPE_ID,pKALIBR_ID,pVAGOWNER_ID,pVETKA_POD_ID,pVETKA_NAPR_ID,pVAG_STATUS_ID,pPROD_ID_NPR,
	  pVZLIV,pVOLUME,pTEMPER,pZPU_TYPE1,pZPU_TYPE2,pPLOMBA1,pPLOMBA2,pROSINSPL1,
	  pROSINSPL2,pBAD_NUM,pRAZMET_FACT);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;
  
  /* Скопировать позицию ВЕДОМОСТИ ОСМОТРА в ВЕДОМОСТЬ ПОДАЧИ
     Возвращаемое занчение - ID позиции документа */
  FUNCTION CopyVedOsmotrRow (pCOMMIT NUMBER, pVED_OSMOTR_ROW_ID NUMBER, pVED_POD_ID NUMBER) RETURN NUMBER AS
    vID VED_POD_ROW.ID%TYPE;
	vTitle VED_OSMOTR%ROWTYPE;
	vRow VED_OSMOTR_ROW%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vID:=NULL;

    -- Проверить наличие вагона в ведомости подачи
	BEGIN
	  SELECT ID INTO vID
	    FROM VED_POD_ROW
	   WHERE VED_OSMOTR_ROW_ID=pVED_OSMOTR_ROW_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vID:=NULL;
	END;

	IF vID IS NOT NULL THEN
	  -- Вагон в ведомости подачи уже есть, ничего добавлять не надо
	  RETURN vID;
	END IF;

	-- Считываем запись из ведомости осмотра
	BEGIN
	  SELECT * INTO vRow
	    FROM VED_OSMOTR_ROW
	   WHERE ID=pVED_OSMOTR_ROW_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;
	BEGIN
	  SELECT * INTO vTitle
	    FROM VED_OSMOTR
	   WHERE ID=vRow.VED_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;

	IF vRow.ID IS NULL OR vTitle.ID IS NULL THEN
	  -- Добавлять нечего, такой записи в ведмости осмотра нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM VED_POD
	   WHERE ID=pVED_POD_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Ведомость подачи удалена!');
	END;

    -- Добавляем вагон

	IF vRow.VAGONTYPE_ID IS NULL THEN
	  vRow.VAGONTYPE_ID:=FOR_CIST.GET_VAGONTYPE(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID);
    END IF;
	IF vRow.KALIBR_ID IS NULL THEN
	  vRow.KALIBR_ID:=FOR_CIST.GET_KALIBR(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.NCISTDOP IS NULL THEN
	  vRow.NCISTDOP:=FOR_CIST.GET_NCISTDOP(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.VES_CIST IS NULL THEN
	  vRow.VES_CIST:=FOR_CIST.GET_VES_CIST(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.VAGOWNER_ID IS NULL THEN
	  vRow.VAGOWNER_ID:=FOR_CIST.GET_VAGOWNER(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.CAPACITY IS NULL THEN
	  vRow.CAPACITY:=FOR_CIST.GET_CAPACITY(vRow.NUM_CIST,vRow.KALIBR_ID,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.AXES IS NULL THEN
	  vRow.AXES:=FOR_CIST.GET_AXES(vRow.NUM_CIST,vRow.KALIBR_ID,0,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;

	vID:=AddRow(0,vID,pVED_POD_ID,FOR_PODACHA.GetMaxNumPos(pVED_POD_ID),
	    vRow.NUM_CIST,vRow.NCISTDOP,vRow.AXES,vRow.CAPACITY,vRow.VES_CIST,vRow.VAGONTYPE_ID,vRow.KALIBR_ID,
		vRow.VAGOWNER_ID,100,100,0,
		vRow.PROD_ID_NPR,NULL,0,NULL,
		FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE1',FOR_INIT.GetCurrUser),
		FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE2',FOR_INIT.GetCurrUser),
		NULL,NULL,NULL,NULL,0,vRow.RAZMET_PER);

    -- Проставляем ссылку на позицию ведомости подачи
	UPDATE VED_POD_ROW SET VED_OSMOTR_ROW_ID=pVED_OSMOTR_ROW_ID WHERE ID=vID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;
  
END;

/

--
-- FOR_SVED  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_SVED AS

  /* СВЕДЕНИЯ об отгрузке */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;


  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pSVED_ID VARCHAR2) RETURN NUMBER AS
    MaxNum REESTR.SVED_POS%TYPE;
    CurNum REESTR.SVED_POS%TYPE;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR.SVED_POS) as MAX_NUM
                 FROM REESTR
				WHERE SVED_ID=pSVED_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    DELETE FROM REESTR WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR WHERE SVED_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Сведение нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM SVED WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Очистить временную таблицу TEMP_VALSVED */
  PROCEDURE EMPTY_TEMP_VALSVED AS
  BEGIN
    DELETE TEMP_VALSVED;
  END;

  /* Заполнить временную таблицу TEMP_VALSVED в зависимости от структуры паспорта 
    pMode=1 - первоначальное заполнение 
	pMode=2 - смена паспорта
	pMode=3 - смена продукта 
  */
  PROCEDURE FILL_TEMP_VALSVED (pMode NUMBER,pSVED_ID VARCHAR2, pPASP_ID VARCHAR2, pPROD_ID_NPR VARCHAR2) AS
  BEGIN
    UPDATE TEMP_VALSVED SET F_DEL=1;

	IF pSVED_ID IS NOT NULL THEN
      -- Заполняем значениями из KLS_VALSVED
  	  FOR lcur IN (
        SELECT
  	      KLS_TABLPOK.SORTBY,
          KLS_TABLPOK.KODIF_ID,
          NLS_UPPER(KLS_KODIF.FIELD_SVED) as TAG,
          KLS_KODIF.NAME as NAME,
          sv.QUAL as VALUE,
          KLS_TABLPOK.NORMTU as NORMA,
          KLS_KODIF.FIELD_TYPE,
          KLS_KODIF.FIELD_LEN,
          KLS_KODIF.FIELD_DEC
        FROM KLS_TABLPOK, KLS_KODIF, (SELECT * FROM KLS_VALSVED WHERE SVED_ID=pSVED_ID) sv
        WHERE KLS_TABLPOK.PROD_ID_NPR=pPROD_ID_NPR
          AND KLS_TABLPOK.KODIF_ID=KLS_KODIF.ID
          AND KLS_KODIF.FIELD_SVED||' '<>' '
          AND NLS_UPPER(KLS_KODIF.FIELD_SVED) NOT IN ('PL15','PL20')
          AND KLS_TABLPOK.KODIF_ID=sv.KODIF_ID(+)
        ORDER BY
          SORTBY)
      LOOP
	    UPDATE TEMP_VALSVED SET (SORTBY, KODIF_ID, NAME, NORMA, FIELD_TYPE, FIELD_LEN, FIELD_DEC, F_DEL)=
  	      (SELECT lcur.SORTBY, lcur.KODIF_ID, lcur.NAME, lcur.NORMA, lcur.FIELD_TYPE, lcur.FIELD_LEN, lcur.FIELD_DEC, 0 FROM dual)
 	    WHERE TAG=lcur.TAG;
	    IF SQL%NOTFOUND THEN
	      INSERT INTO TEMP_VALSVED (SORTBY, KODIF_ID, TAG, NAME, VALUE, NORMA, FIELD_TYPE, FIELD_LEN, FIELD_DEC, F_DEL)
		    VALUES (lcur.SORTBY, lcur.KODIF_ID, lcur.TAG, lcur.NAME, lcur.VALUE, lcur.NORMA, lcur.FIELD_TYPE, lcur.FIELD_LEN, lcur.FIELD_DEC, 0);
	    END IF;
		IF pMode=1 THEN
		  -- Обновить значение показателя при первоначальном заполнении
  	      UPDATE TEMP_VALSVED SET VALUE=lcur.VALUE WHERE TAG=lcur.TAG;
		END IF;
	  END LOOP;
    END IF;
	
	IF pPASP_ID IS NOT NULL THEN
      -- Заполняем значениями из KLS_VALPASP
  	  FOR lcur IN (
        SELECT
    	  KLS_TABLPOK.SORTBY,
          KLS_TABLPOK.KODIF_ID,
          NLS_UPPER(KLS_KODIF.FIELD_SVED) as TAG,
          KLS_KODIF.NAME as NAME,
          sv.QUAL as VALUE,
          KLS_TABLPOK.NORMTU as NORMA,
          KLS_KODIF.FIELD_TYPE,
          KLS_KODIF.FIELD_LEN,
          KLS_KODIF.FIELD_DEC
        FROM KLS_TABLPOK, KLS_KODIF, (SELECT * FROM KLS_VALPASP WHERE PASP_ID=pPASP_ID) sv
        WHERE KLS_TABLPOK.PROD_ID_NPR=pPROD_ID_NPR
          AND KLS_TABLPOK.KODIF_ID=KLS_KODIF.ID
          AND KLS_KODIF.FIELD_SVED||' '<>' '
          AND NLS_UPPER(KLS_KODIF.FIELD_SVED) NOT IN ('PL15','PL20')
          AND KLS_TABLPOK.KODIF_ID=sv.KODIF_ID(+)
        ORDER BY
          SORTBY)
      LOOP
	    UPDATE TEMP_VALSVED SET (SORTBY, KODIF_ID, NAME, NORMA, FIELD_TYPE, FIELD_LEN, FIELD_DEC, F_DEL)=
  	      (SELECT lcur.SORTBY, lcur.KODIF_ID, lcur.NAME, lcur.NORMA, lcur.FIELD_TYPE, lcur.FIELD_LEN, lcur.FIELD_DEC, 0 FROM dual)
 	    WHERE TAG=lcur.TAG;
	    IF SQL%NOTFOUND THEN
	      INSERT INTO TEMP_VALSVED (SORTBY, KODIF_ID, TAG, NAME, VALUE, NORMA, FIELD_TYPE, FIELD_LEN, FIELD_DEC, F_DEL)
		    VALUES (lcur.SORTBY, lcur.KODIF_ID, lcur.TAG, lcur.NAME, lcur.VALUE, lcur.NORMA, lcur.FIELD_TYPE, lcur.FIELD_LEN, lcur.FIELD_DEC, 0);
	    END IF;
		IF pMode=2 THEN
		  -- Обновить значение показателя при смене паспорта
  	      UPDATE TEMP_VALSVED SET VALUE=lcur.VALUE WHERE TAG=lcur.TAG;
		END IF;
  	  END LOOP;
    END IF;

    -- Заполняем пустыми значениями по KLS_TABLPOK
	FOR lcur IN (
	  SELECT
  	    KLS_TABLPOK.SORTBY,
        KLS_TABLPOK.KODIF_ID,
        NLS_UPPER(KLS_KODIF.FIELD_SVED) as TAG,
        KLS_KODIF.NAME as NAME,
        '' as VALUE,
        KLS_TABLPOK.NORMTU as NORMA,
        KLS_KODIF.FIELD_TYPE,
        KLS_KODIF.FIELD_LEN,
        KLS_KODIF.FIELD_DEC
      FROM KLS_TABLPOK, KLS_KODIF
      WHERE KLS_TABLPOK.PROD_ID_NPR=pPROD_ID_NPR
        AND KLS_TABLPOK.KODIF_ID=KLS_KODIF.ID
        AND KLS_KODIF.FIELD_SVED||' '<>' '
        AND NLS_UPPER(KLS_KODIF.FIELD_SVED) NOT IN ('PL15','PL20')
      ORDER BY
        SORTBY)
    LOOP
	  UPDATE TEMP_VALSVED SET (SORTBY, KODIF_ID, NAME, NORMA, FIELD_TYPE, FIELD_LEN, FIELD_DEC, F_DEL)=
  	    (SELECT lcur.SORTBY, lcur.KODIF_ID, lcur.NAME, lcur.NORMA, lcur.FIELD_TYPE, lcur.FIELD_LEN, lcur.FIELD_DEC, 0 FROM dual)
 	  WHERE TAG=lcur.TAG;
	  IF SQL%NOTFOUND THEN
	    INSERT INTO TEMP_VALSVED (SORTBY, KODIF_ID, TAG, NAME, VALUE, NORMA, FIELD_TYPE, FIELD_LEN, FIELD_DEC, F_DEL)
		  VALUES (lcur.SORTBY, lcur.KODIF_ID, lcur.TAG, lcur.NAME, lcur.VALUE, lcur.NORMA, lcur.FIELD_TYPE, lcur.FIELD_LEN, lcur.FIELD_DEC, 0);
	  END IF;
	END LOOP;

	DELETE FROM TEMP_VALSVED WHERE F_DEL=1;
  END;

  /* Перенести значения показателей паспорта из TEMP_VALSVED в KLS_VALSVED */
  PROCEDURE SAVE_TEMP_VALSVED (pSVED_ID VARCHAR2) AS
  BEGIN
    IF pSVED_ID||' '<>' ' THEN
      DELETE FROM KLS_VALSVED WHERE SVED_ID=pSVED_ID;
      FOR lcur IN (SELECT * FROM TEMP_VALSVED)
	  LOOP
  	    INSERT INTO KLS_VALSVED (SVED_ID,KODIF_ID,QUAL)
		VALUES (pSVED_ID,lcur.KODIF_ID,lcur.VALUE);
	  END LOOP;
	END IF;
  END;

  /* Считать значение показателя из TEMP_VALSVED */
  FUNCTION GET_TEMP_VALSVED_AS_CHAR (pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN VARCHAR2 AS
    vRes TEMP_VALSVED.VALUE%TYPE;
  BEGIN
    vRes:='';
    IF NVL(pKODIF_ID,0)>0 THEN
	  -- Получаем значение по ID
      SELECT VALUE INTO vRes
 	  FROM TEMP_VALSVED
	  WHERE KODIF_ID=pKODIF_ID
	    AND ROWNUM=1;
	ELSIF pKODIF_TAG||' '<>' ' THEN
	  -- Получаем значение по ТЕГу
      SELECT a.VALUE INTO vRes
 	  FROM TEMP_VALSVED a, KLS_KODIF b
	  WHERE a.KODIF_ID=b.ID AND NLS_UPPER(b.FIELD_SVED)=NLS_UPPER(pKODIF_TAG)
	    AND ROWNUM=1;
	END IF;
	RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN NULL;
  END;

  FUNCTION GET_TEMP_VALSVED_AS_NUM (pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN NUMBER AS
  BEGIN
    RETURN ora_char_to_num(GET_TEMP_VALSVED_AS_CHAR(pKODIF_ID,pKODIF_TAG));
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN NULL;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pSVED_NUM NUMBER, pSVED_DATE DATE,
	   pPOD_DATE VARCHAR2, pTECH_TIME VARCHAR2, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, pEND_NALIV_TIME VARCHAR2, pDATE_OFORML DATE,
	   pDEFI_MASS_ID NUMBER, pPASP_ID VARCHAR2, pPROD_ID_NPR VARCHAR2, pPASP_NUM VARCHAR2, pREZ_NUM VARCHAR2, pPASP_DATE DATE,
	   pCENA NUMBER, pCENA_OTP NUMBER, pDATE_CENA DATE)
    RETURN VARCHAR2 AS

	vID SVED.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vPOD_DATE DATE;
	vTECH_TIME DATE;
	vGOTOV_TIME DATE;
	vBEG_NALIV_TIME DATE;
	vEND_NALIV_TIME DATE;
  BEGIN

    IF pPOD_DATE='' THEN
	  vPOD_DATE:=NULL;
	ELSE
	  vPOD_DATE:=TO_DATE(pPOD_DATE,'dd.mm.yyyy hh24:mi');
	END IF;  
    IF pTECH_TIME='' THEN
	  vTECH_TIME:=NULL;
	ELSE
	  vTECH_TIME:=TO_DATE(pTECH_TIME,'dd.mm.yyyy hh24:mi');
	END IF;  
    IF pGOTOV_TIME='' THEN
	  vGOTOV_TIME:=NULL;
	ELSE
	  vGOTOV_TIME:=TO_DATE(pGOTOV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pBEG_NALIV_TIME='' THEN
	  vBEG_NALIV_TIME:=NULL;
	ELSE
	  vBEG_NALIV_TIME:=TO_DATE(pBEG_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pEND_NALIV_TIME='' THEN
	  vEND_NALIV_TIME:=NULL;
	ELSE
	  vEND_NALIV_TIME:=TO_DATE(pEND_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 

    -- ID
	IF pID||' '=' ' OR pID IS NULL THEN
	  vADD:=1;
      SELECT SEQ_SVED.nextval INTO vTmp FROM DUAL;
	  vID:=SUBSTR(TO_CHAR(vTmp),1,9);
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM SVED
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Сведение нельзя отредактировать - оно удалено!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE SVED SET (SVED_NUM, SVED_DATE, MESTO_ID, LOAD_TYPE_ID,
	   POD_DATE, TECH_TIME, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML,
	   DEFI_MASS_ID, PASP_ID, PROD_ID_NPR, PASP_NUM, REZ_NUM, PASP_DATE,
	   CENA, CENA_OTP, DATE_CENA)=
	  (SELECT pSVED_NUM, pSVED_DATE, pMESTO_ID, pLOAD_TYPE_ID,
	   vPOD_DATE, vTECH_TIME, vGOTOV_TIME, vBEG_NALIV_TIME, vEND_NALIV_TIME, pDATE_OFORML,
	   pDEFI_MASS_ID, pPASP_ID, pPROD_ID_NPR, pPASP_NUM, pREZ_NUM, pPASP_DATE,
	   pCENA, pCENA_OTP, pDATE_CENA FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO SVED (ID,SVED_NUM, SVED_DATE, MESTO_ID, LOAD_TYPE_ID,
	   POD_DATE, TECH_TIME, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML,
	   DEFI_MASS_ID, PASP_ID, PROD_ID_NPR, PASP_NUM, REZ_NUM, PASP_DATE,
	   CENA, CENA_OTP, DATE_CENA)
	  VALUES (vID, pSVED_NUM, pSVED_DATE, pMESTO_ID, pLOAD_TYPE_ID,
	   vPOD_DATE, vTECH_TIME, vGOTOV_TIME, vBEG_NALIV_TIME, vEND_NALIV_TIME, pDATE_OFORML,
	   pDEFI_MASS_ID, pPASP_ID, pPROD_ID_NPR, pPASP_NUM, pREZ_NUM, pPASP_DATE,
	   pCENA, pCENA_OTP, pDATE_CENA);
	END IF;

	-- Сохранение показателей паспорта в сведении
	SAVE_TEMP_VALSVED(vID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  -- Получить значение показателя паспорта для сведения
  FUNCTION GET_PASP_VALUE_AS_CHAR (pSVED_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN VARCHAR2 AS
    vRes KLS_VALSVED.QUAL%TYPE;
  BEGIN
    vRes:='';
    IF NVL(pKODIF_ID,0)>0 THEN
	  -- Получаем значение по ID
      SELECT QUAL INTO vRes
 	  FROM KLS_VALSVED
	  WHERE SVED_ID=pSVED_ID AND KODIF_ID=pKODIF_ID
	    AND ROWNUM=1;
	ELSIF pKODIF_TAG||' '<>' ' THEN
	  -- Получаем значение по ТЕГу
      SELECT a.QUAL INTO vRes
 	  FROM KLS_VALSVED a, KLS_KODIF b
	  WHERE a.SVED_ID=pSVED_ID
	    AND a.KODIF_ID=b.ID AND NLS_UPPER(b.FIELD_SVED)=NLS_UPPER(pKODIF_TAG)
	    AND ROWNUM=1;
	END IF;
	RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN NULL;
  END;

  FUNCTION GET_PASP_VALUE_AS_NUM (pSVED_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2) RETURN NUMBER AS
  BEGIN
    RETURN ora_char_to_num(GET_PASP_VALUE_AS_CHAR(pSVED_ID,pKODIF_ID,pKODIF_TAG));
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN NULL;
  END;

  -- Сохранить значение показателя паспорта для сведения
  PROCEDURE SET_PASP_VALUE (pSVED_ID VARCHAR2, pKODIF_ID NUMBER, pKODIF_TAG VARCHAR2, pQUAL VARCHAR2) AS
  BEGIN
    IF NVL(pKODIF_ID,0)>0 THEN
	  -- Сохраняем значение по ID
	  UPDATE KLS_VALSVED SET QUAL=pQUAL
	  WHERE SVED_ID=pSVED_ID AND KODIF_ID=pKODIF_ID;

	  IF SQL%NOTFOUND THEN
	    INSERT INTO KLS_VALSVED (SVED_ID,KODIF_ID,QUAL)
		  VALUES (pSVED_ID,pKODIF_ID,pQUAL);
	  END IF;
	ELSIF pKODIF_TAG||' '<>' ' THEN
	  -- Сохраняем значение по ТЕГу
	  FOR lcur IN (SELECT ID FROM KLS_KODIF WHERE NLS_UPPER(FIELD_SVED)=NLS_UPPER(pKODIF_TAG))
	  LOOP
  	    UPDATE KLS_VALSVED SET QUAL=pQUAL
	    WHERE SVED_ID=pSVED_ID AND KODIF_ID=lcur.ID;

	    IF SQL%NOTFOUND THEN
	      INSERT INTO KLS_VALSVED (SVED_ID,KODIF_ID,QUAL)
		    VALUES (pSVED_ID,lcur.ID,pQUAL);
	    END IF;
		EXIT;
	  END LOOP;
	END IF;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN;
  END;

  /* Добавить/Изменить позицию ДОКУМЕНТА
     Возвращаемое занчение - ID позиции документа */
  FUNCTION AddRow(pCOMMIT NUMBER, pID NUMBER, pSVED_ID VARCHAR2, pSVED_POS NUMBER,
    pNUM_CIST VARCHAR2, pNCISTDOP NUMBER, pAXES NUMBER, pCAPACITY VARCHAR2, pWES1 VARCHAR2, pVES_CIST NUMBER,
	pVAGONTYPE_ID NUMBER, pKALIBR_ID VARCHAR2, pTIP1 VARCHAR2, pVAGOWNER_ID NUMBER,
	pVETKA_POD_ID NUMBER, pVETKA_OTP_ID NUMBER, pVETKA_NAPR_ID NUMBER, pVAG_STATUS_ID NUMBER,
	pVZLIV NUMBER, pVOLUME NUMBER, pTEMPER NUMBER, pFAKT_PL NUMBER, pVES NUMBER, pKOL_NET NUMBER,
	pVES_ALL NUMBER, pVES_ED NUMBER, pKOL_ED NUMBER, pUPAK_ID NUMBER, pUPAK_VES NUMBER, pUPAK_VES_ED NUMBER,
	pPODDONS NUMBER, pPODDON_VES NUMBER, pSHIELDS NUMBER, pSHIELD_VES NUMBER,
	pZPU_TYPE1 NUMBER, pZPU_TYPE2 NUMBER, pPLOMBA1 VARCHAR2, pPLOMBA2 VARCHAR2, pROSINSPL1 VARCHAR2,
	pROSINSPL2 VARCHAR2, pFORMNAKL_ID NUMBER, pGOST_ID NUMBER, pVOLUME15 NUMBER, pCTLV NUMBER, pIS_AUTO NUMBER) RETURN VARCHAR2 AS

	vID REESTR.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
	vLoadType SVED.LOAD_TYPE_ID%TYPE;
	vPROD_ID_NPR SVED.PROD_ID_NPR%TYPE;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_SVED.nextval INTO vTmp FROM DUAL;
	  vID:=vTmp;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования документа
	BEGIN
	  SELECT /*+ RULE */ LOAD_TYPE_ID,PROD_ID_NPR
        INTO vLoadType,vPROD_ID_NPR
	 	FROM SVED
	   WHERE ID=pSVED_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Сведение удалено!');
	END;

	-- Проверка существования позиции
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM REESTR
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Позицию нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Обновляем позицию
	UPDATE REESTR SET (SVED_POS,NUM_CIST,NCISTDOP,AXES,CAPACITY,WES1,VES_CIST,
	  VAGONTYPE_ID,KALIBR_ID,TIP1,VAGOWNER_ID,VETKA_POD_ID,VETKA_OTP_ID,VETKA_NAPR_ID,VAG_STATUS_ID,
	  VZLIV,VOLUME,TEMPER,FAKT_PL,VES,KOL_NET,VES_ALL,VES_ED,KOL_ED,UPAK_ID,UPAK_VES,UPAK_VES_ED,
	  PODDONS,PODDON_VES,SHIELDS,SHIELD_VES,ZPU_TYPE1,ZPU_TYPE2,PLOMBA1,PLOMBA2,ROSINSPL1,
	  ROSINSPL2,FORMNAKL_ID,GOST_ID,VOLUME15,CTLV,IS_AUTO)=
    (SELECT pSVED_POS,pNUM_CIST,pNCISTDOP,pAXES,pCAPACITY,pWES1,pVES_CIST,
	  pVAGONTYPE_ID,pKALIBR_ID,pTIP1,pVAGOWNER_ID,pVETKA_POD_ID,pVETKA_OTP_ID,pVETKA_NAPR_ID,pVAG_STATUS_ID,
	  pVZLIV,pVOLUME,pTEMPER,pFAKT_PL,pVES,pKOL_NET,pVES_ALL,pVES_ED,pKOL_ED,pUPAK_ID,pUPAK_VES,pUPAK_VES_ED,
	  pPODDONS,pPODDON_VES,pSHIELDS,pSHIELD_VES,pZPU_TYPE1,pZPU_TYPE2,pPLOMBA1,pPLOMBA2,pROSINSPL1,
	  pROSINSPL2,pFORMNAKL_ID,pGOST_ID,pVOLUME15,pCTLV,pIS_AUTO FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем позицию
      INSERT INTO REESTR (ID,SVED_ID,SVED_POS,NUM_CIST,NCISTDOP,AXES,CAPACITY,WES1,VES_CIST,
	  VAGONTYPE_ID,KALIBR_ID,TIP1,VAGOWNER_ID,VETKA_POD_ID,VETKA_OTP_ID,VETKA_NAPR_ID,VAG_STATUS_ID,
	  VZLIV,VOLUME,TEMPER,FAKT_PL,VES,KOL_NET,VES_ALL,VES_ED,KOL_ED,UPAK_ID,UPAK_VES,UPAK_VES_ED,
	  PODDONS,PODDON_VES,SHIELDS,SHIELD_VES,ZPU_TYPE1,ZPU_TYPE2,PLOMBA1,PLOMBA2,ROSINSPL1,
	  ROSINSPL2,FORMNAKL_ID,GOST_ID,VOLUME15,CTLV,IS_AUTO)
	  VALUES (vID,pSVED_ID,pSVED_POS,pNUM_CIST,pNCISTDOP,pAXES,pCAPACITY,pWES1,pVES_CIST,
	  pVAGONTYPE_ID,pKALIBR_ID,pTIP1,pVAGOWNER_ID,pVETKA_POD_ID,pVETKA_OTP_ID,pVETKA_NAPR_ID,pVAG_STATUS_ID,
	  pVZLIV,pVOLUME,pTEMPER,pFAKT_PL,pVES,pKOL_NET,pVES_ALL,pVES_ED,pKOL_ED,pUPAK_ID,pUPAK_VES,pUPAK_VES_ED,
	  pPODDONS,pPODDON_VES,pSHIELDS,pSHIELD_VES,pZPU_TYPE1,pZPU_TYPE2,pPLOMBA1,pPLOMBA2,pROSINSPL1,
	  pROSINSPL2,pFORMNAKL_ID,pGOST_ID,pVOLUME15,pCTLV,pIS_AUTO);
	END IF;

    -- Добавляем вагон в справочник вагонов - перенесено в триггер
--	FOR_CIST.ADD_CIST(0,pNUM_CIST,vLoadType,pVAGONTYPE_ID,pKALIBR_ID,pTIP1,pCAPACITY,pWES1,pNCISTDOP,pAXES,pVES_CIST,pVAGOWNER_ID,vPROD_ID_NPR);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Скопировать позицию ВЕДОМОСТИ ПОДАЧИ в СВЕДЕНИЕ
     Возвращаемое занчение - ID позиции документа */
  FUNCTION CopyVedPodRow (pCOMMIT NUMBER, pVED_POD_ROW_ID NUMBER, pSVED_ID VARCHAR2, pNAR_LINE_ID NUMBER) RETURN NUMBER AS
    vID REESTR.ID%TYPE;
	vTitle VED_POD%ROWTYPE;
	vRow VED_POD_ROW%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vID:=NULL;

    -- Проверить наличие вагона в сведении
	BEGIN
	  SELECT ID INTO vID
	    FROM REESTR
	   WHERE VED_POD_ROW_ID=pVED_POD_ROW_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vID:=NULL;
	END;

	IF vID IS NOT NULL THEN
	  -- Вагон в сведении уже есть, ничего добавлять не надо
	  RETURN vID;
	END IF;

	-- Считываем запись из ведомости подачи
	BEGIN
	  SELECT * INTO vRow
	    FROM VED_POD_ROW
	   WHERE ID=pVED_POD_ROW_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;
	BEGIN
	  SELECT * INTO vTitle
	    FROM VED_POD
	   WHERE ID=vRow.VED_POD_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;

	IF vRow.ID IS NULL OR vTitle.ID IS NULL THEN
	  -- Добавлять нечего, такой записи в ведмости подачи нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM SVED
	   WHERE ID=pSVED_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Сведение удалено!');
	END;

    -- Добавляем вагон

	IF vRow.VAGONTYPE_ID IS NULL THEN
	  vRow.VAGONTYPE_ID:=FOR_CIST.GET_VAGONTYPE(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID);
    END IF;
	IF vRow.KALIBR_ID IS NULL THEN
	  vRow.KALIBR_ID:=FOR_CIST.GET_KALIBR(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.NCISTDOP IS NULL THEN
	  vRow.NCISTDOP:=FOR_CIST.GET_NCISTDOP(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.VES_CIST IS NULL THEN
	  vRow.VES_CIST:=FOR_CIST.GET_VES_CIST(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.VAGOWNER_ID IS NULL THEN
	  vRow.VAGOWNER_ID:=FOR_CIST.GET_VAGOWNER(vRow.NUM_CIST,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.CAPACITY IS NULL THEN
	  vRow.CAPACITY:=FOR_CIST.GET_CAPACITY(vRow.NUM_CIST,vRow.KALIBR_ID,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;
	IF vRow.AXES IS NULL THEN
	  vRow.AXES:=FOR_CIST.GET_AXES(vRow.NUM_CIST,vRow.KALIBR_ID,0,vTitle.LOAD_TYPE_ID,vRow.VAGONTYPE_ID);
    END IF;

	vID:=AddRow(0,vID,pSVED_ID,FOR_SVED.GetMaxNumPos(pSVED_ID),
	    vRow.NUM_CIST,vRow.NCISTDOP,vRow.AXES,vRow.CAPACITY,NULL,vRow.VES_CIST,vRow.VAGONTYPE_ID,vRow.KALIBR_ID,
		NULL,vRow.VAGOWNER_ID,NVL(vRow.VETKA_POD_ID,100),vTitle.VETKA_OTP_ID,NVL(vRow.VETKA_NAPR_ID,100),NVL(vRow.VAG_STATUS_ID,0),
		NULL,0,NULL,NULL,0,0,0,0,0,NULL,0,0,
		0,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','PODDON_VES',FOR_INIT.GetCurrUser),
		0,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','SHIELD_VES',FOR_INIT.GetCurrUser),
		FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE1',FOR_INIT.GetCurrUser),
		FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE2',FOR_INIT.GetCurrUser),
		NULL,NULL,NULL,NULL,2,0,0,0,1);

    -- Проставляем ссылку на позицию ведомости подачи
	UPDATE REESTR SET VED_POD_ROW_ID=pVED_POD_ROW_ID WHERE ID=vID;

	-- Проставляем временные интервалы
	UPDATE SVED SET POD_DATE=vTitle.POD_DATE WHERE ID=pSVED_ID AND POD_DATE IS NULL;
	UPDATE SVED SET TECH_TIME=vTitle.TECH_TIME WHERE ID=pSVED_ID AND TECH_TIME IS NULL;
	UPDATE SVED SET GOTOV_TIME=vTitle.GOTOV_TIME WHERE ID=pSVED_ID AND GOTOV_TIME IS NULL;
	UPDATE SVED SET BEG_NALIV_TIME=vTitle.BEG_NALIV_TIME WHERE ID=pSVED_ID AND BEG_NALIV_TIME IS NULL;
	UPDATE SVED SET END_NALIV_TIME=vTitle.END_NALIV_TIME WHERE ID=pSVED_ID AND END_NALIV_TIME IS NULL;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	
    -- Проставляем ссылку на позицию разрешения
	SetNarLineID (0, pSVED_ID, vID, pNAR_LINE_ID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  -- Минимальный вес по заявке/разрешению, разрешенный к отгрузке
  FUNCTION GET_MIN_OSTAT_VES (pLOAD_TYPE_ID NUMBER, pID_GROUP_NPR VARCHAR2) RETURN NUMBER AS
  BEGIN
    IF pLOAD_TYPE_ID=1 AND pID_GROUP_NPR='13000' THEN
	  RETURN 30;
	END IF;
	IF pLOAD_TYPE_ID=1 AND pID_GROUP_NPR<>'13000' THEN
	  RETURN 40;
	END IF;
    IF pLOAD_TYPE_ID=6 THEN
	  RETURN 1;
	END IF;
    RETURN 5;
  END;

  /* Скопировать позицию СВЕДЕНИЯ в СВЕДЕНИЕ
     Возвращаемое занчение - ID позиции документа или NULL - если запись не найдена */
  FUNCTION MoveRow (pCOMMIT NUMBER, pREESTR_ID NUMBER, pNEW_SVED_ID VARCHAR2) RETURN NUMBER AS
	vRow REESTR%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vRow.ID:=NULL;

	-- Считываем запись из сведения
	BEGIN
	  SELECT * INTO vRow
	    FROM REESTR
	   WHERE ID=pREESTR_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRow.ID:=NULL;
	END;

	IF vRow.ID IS NULL THEN
	  -- Переносить нечего, такой записи в сведении нет
	  RETURN NULL;
	END IF;

	-- Проверка существования документа-назначения
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM SVED
	   WHERE ID=pNEW_SVED_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Сведение в которое переносится отгрузка - удалено!');
	END;

    -- Переносим вагон из сведения в сведение
	UPDATE REESTR SET SVED_ID=pNEW_SVED_ID, SVED_POS=FOR_SVED.GetMaxNumPos(pNEW_SVED_ID) WHERE ID=vRow.ID;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vRow.ID;
  END;

  /* Проставить ссылку на позицию разрешения на отгрузку */
  PROCEDURE SetNarLineID (pCOMMIT NUMBER, pSVED_ID VARCHAR2, pREESTR_ID NUMBER, pNAR_LINE_ID NUMBER) AS
    vCnt NUMBER;
	vNAR_LINE_ID NUMBER;
  BEGIN
    IF NVL(pNAR_LINE_ID,0)=0 THEN
	  vNAR_LINE_ID:=NULL;
	ELSE  
	  vNAR_LINE_ID:=pNAR_LINE_ID;
	END IF;  
    UPDATE REESTR SET NAR_LINE_ID=vNAR_LINE_ID WHERE ID=pREESTR_ID;
	-- Определяем кол-во заадресованных вагонов в сведении
	BEGIN
  	  SELECT COUNT(*) INTO vCnt
	    FROM REESTR
	   WHERE SVED_ID=pSVED_ID AND NAR_LINE_ID IS NOT NULL;
	EXCEPTION
	  WHEN OTHERS THEN
	    vCnt:=0;
	END;
	IF vCnt=0 THEN
	  -- В сведении не осталось ни одного вагона со ссылкой на разрешение диспетчера
	  -- Сбрасываем номер задания в сведении
	  UPDATE SVED SET NOM_ZD='' WHERE ID=pSVED_ID;
	END IF;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  /* Проверка вагона на уникальность
     Возвращаемое значение - номер сведения, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER AS
  PRAGMA AUTONOMOUS_TRANSACTION;
    vRes NUMBER;
	vWorklen NUMBER;
  BEGIN
    IF pLOAD_TYPE_ID=1 THEN
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#1',FOR_INIT.GetCurrUser);
	ELSE
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#2',FOR_INIT.GetCurrUser);
	END IF;
    SELECT /*+ RULE */ a.SVED_NUM INTO vRes
	  FROM REESTR b,SVED a
	 WHERE b.SVED_ID=a.ID
	   AND a.SVED_DATE>=pDATE-2
	   AND b.NUM_CIST=pNUM_CIST
	   AND b.VAG_STATUS_ID IN (0,14)
	   AND b.ID<>NVL(pID,0)
	   AND (TRUNC(a.DATE_OFORML)=TRUNC(pDATE) OR
	        ABS(hours_between(a.DATE_OFORML,pDATE))<vWorklen);
    ROLLBACK;
    RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  ROLLBACK;
	  RETURN NULL;
  END;

END;

/

--
-- FOR_VES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_VES
AS


/* Расчет факт.плотности по температуре и плотности при 20'C по ГОСТ 3900-85 */
FUNCTION GET_FACT_PL_390085(pTEMPER NUMBER, pPL20 NUMBER) RETURN NUMBER AS
  vO NUMBER;
  sg NUMBER;
  vTT NUMBER;
  vBASA NUMBER;
  vHVOST NUMBER;
  vKOEF NUMBER;
  vKOEF_NEXT NUMBER;
  vRes NUMBER;
BEGIN

  IF NVL(pPL20,0)<=0 THEN
    RETURN 0;
  END IF;

  IF pPL20=0.7142 AND pTEMPER=-5 THEN
    RETURN 0.7352;
  END IF;
  IF pPL20=0.6607 AND pTEMPER=-7 THEN
    RETURN 0.6852;
  END IF;
  IF pPL20=0.7605 AND pTEMPER=1 THEN
    RETURN 0.7752;
  END IF;
  IF pPL20=0.9480 AND pTEMPER=90 THEN
    RETURN 0.9049;
  END IF;
  IF pPL20=0.8220 AND pTEMPER=45 THEN
    RETURN 0.8049;
  END IF;


  --1. Определение базовой температуры - приведение к 0.5
  sg:=SIGN(pTEMPER);
  vTT:=FLOOR(2*ABS(pTEMPER)+0.5)/2*sg; -- базовая температура

  --2. Определение базовой плотности: Для KLS_GOST_390085.TEMPER=TT находим наибольшее
  -- значение плотности KLS_GOST_390085.PL20 для которого
  -- ABS(KLS_GOST_390085.KOEF-pPL20) минимально
  vBASA:=0; -- базовая плотность
  BEGIN
    SELECT MAX(PL20) INTO vBASA
	  FROM KLS_GOST_390085
	 WHERE TEMPER=vTT
   	   AND KOEF=pPL20+SIGN(KOEF-pPL20)*(SELECT MIN(ABS(KOEF-pPL20)) FROM KLS_GOST_390085 WHERE TEMPER=vTT);
	vBASA:=NVL(vBASA,0);
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;

  IF vBASA=0 THEN
    RETURN 0;
  END IF;

  -- 3. Находим значение значение коэффициента для базовых плотности и температуры
  vKOEF:=0;
  BEGIN
    SELECT KOEF INTO vKOEF
	  FROM KLS_GOST_390085
	 WHERE TEMPER=vTT
	   AND PL20=vBASA;
	vKOEF:=NVL(vKOEF,0);
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;
  IF vKOEF=0 THEN
    RETURN 0;
  END IF;

  -- 4. Интерполяция значения коэффициента по температуре

  -- остаток от приведения температуры к 0.5
  vHVOST := pTEMPER -  vTT;
  vO:=0;
  -- значение коэффициента для следующего значения температуры
  BEGIN
    SELECT KOEF INTO vKOEF_NEXT
	  FROM KLS_GOST_390085
	 WHERE TEMPER=vTT+0.5
	   AND PL20=vBASA;
    -- интерполяция коэффициента
    vO:=ROUND((vKOEF_NEXT-vKOEF) / 0.5 * vHVOST,4);
  EXCEPTION
    WHEN OTHERS THEN
	  vO:=0;
  END;

  --5. Рассчет фактической плотности
  vRes:=vBASA - vKOEF + pPL20 - vO;
  RETURN vRes;
END;

/* Расчет факт.плотности по температуре и плотности при температуре <=-25 */
FUNCTION GET_FACT_PL_MOROZ(pTEMPER NUMBER, pPL NUMBER) RETURN NUMBER AS
  s NUMBER;
  sg NUMBER;
  vTT NUMBER;
BEGIN
  IF NVL(pPL,0)<=0 THEN
    RETURN 0;
  END IF;

  -- Приведение температуры к шагу 0.5
  sg:=IIFN(pTEMPER<0,-1,1);
  vTT:=FLOOR(2*ABS(pTEMPER)+0.5)/2*sg; -- базовая температура

  BEGIN
    SELECT KOEF INTO s
	  FROM KLS_GOST_OLD
	 WHERE pPL BETWEEN pl1 and pl2
	   AND ROWNUM=1;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;

  s:=s * 10000 * (vTT-20);
  s:=ROUND(pPL * 10000 - s,0) / 10000;
  RETURN s;
END;

/* Определение коэффициента коррекции объема по ASTM D 1250 */
FUNCTION GET_CTLV_ASTMD1250(pTEMPER NUMBER, pPL15 NUMBER, pPROD_ID_NPR VARCHAR2) RETURN NUMBER AS
  sg NUMBER;
  vTT NUMBER;
  new_PL15 NUMBER;
  vKoef NUMBER;
BEGIN

  IF NVL(pPL15,0)<=0 THEN
    RETURN 0;
  END IF;

  IF NVL(pTEMPER,0)=15 THEN
    RETURN 1;
  END IF;

  -- Приведение температуры к шагу 0.5
  sg:=IIFN(pTEMPER<0,-1,1);
  vTT:=FLOOR(2*ABS(pTEMPER)+0.5)/2*sg; -- базовая температура

  -- Приведение плотности при 15'C к шагу 0.002
  new_PL15:=(FLOOR(pPL15*1000)+MOD(FLOOR(pPL15*1000),2))/1000;

  BEGIN
    IF pPROD_ID_NPR>='90000' THEN
      SELECT KOEF INTO vKoef
	    FROM KLS_GOST_8595_54A
	   WHERE TEMPER=vTT AND PL15=new_PL15;
    ELSE
      SELECT KOEF INTO vKoef
	    FROM KLS_GOST_8595_54B
	   WHERE TEMPER=vTT AND PL15=new_PL15;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
	  RETURN 0;
  END;

  RETURN NVL(vKoef,0);
END;

/* Процедура очистки стека (временная таблица TEMP_VES) */
PROCEDURE EMPTY_TEMP_VES AS
BEGIN
  DELETE TEMP_VES;
END;

/* Процедура сохранения параметра в стек (временная таблица TEMP_VES) */
PROCEDURE SET_PARAM (pTAG VARCHAR2, pVALUE VARCHAR2, pNORMA VARCHAR2 DEFAULT NULL) as
BEGIN
  IF pNORMA||' '<>' ' THEN
    UPDATE TEMP_VES SET VALUE=pVALUE, NORMA=pNORMA WHERE TAG=pTAG;
  ELSE
    UPDATE TEMP_VES SET VALUE=pVALUE WHERE TAG=pTAG;
  END IF;
  IF SQL%NOTFOUND THEN
    INSERT INTO TEMP_VES (TAG,VALUE,NORMA) VALUES (pTAG,pVALUE,pNORMA);
  END IF;
END;

/* Функции считывания параметра из стека (временная таблица TEMP_VES) */
FUNCTION GET_PARAM_AS_CHAR (pTAG VARCHAR2) RETURN VARCHAR2 AS
  vRes TEMP_VES.VALUE%TYPE;
BEGIN
  SELECT VALUE INTO vRes
    FROM TEMP_VES
   WHERE TAG=pTAG;
  RETURN vRes;
EXCEPTION
  WHEN OTHERS THEN
    RETURN '';
END;

FUNCTION GET_PARAM_AS_NUM (pTAG VARCHAR2) RETURN NUMBER AS
BEGIN
  RETURN ora_char_to_num(GET_PARAM_AS_CHAR(pTAG));
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;

FUNCTION GET_PARAM_NORMA (pTAG VARCHAR2) RETURN NUMBER AS
  vRes TEMP_VES.NORMA%TYPE;
  vNum NUMBER;
BEGIN
  BEGIN
    SELECT NORMA INTO vRes
      FROM TEMP_VES
     WHERE TAG=pTAG;
  EXCEPTION
    WHEN OTHERS THEN
      vRes:='';
  END;
  RETURN ora_char_to_num(vRes);
EXCEPTION
  WHEN OTHERS THEN
    RETURN 0;
END;

/* Сохранение показателей паспорта из сведения в стек параметров для процедуры расчета веса */
PROCEDURE SET_PARAM_VALSVED (pSVED_ID VARCHAR2) as
BEGIN
  FOR lcur IN (SELECT DISTINCT NLS_UPPER(KLS_KODIF.FIELD_SVED) as TAG, KLS_VALSVED.QUAL as VALUE, KLS_TABLPOK.NORMTU as NORMA
                 FROM KLS_VALSVED, SVED, KLS_TABLPOK, KLS_KODIF
                WHERE KLS_VALSVED.SVED_ID=pSVED_ID
                  AND KLS_VALSVED.SVED_ID=SVED.ID
                  AND KLS_VALSVED.KODIF_ID=KLS_KODIF.ID
                  AND SVED.PROD_ID_NPR=KLS_TABLPOK.PROD_ID_NPR
                  AND KLS_VALSVED.KODIF_ID=KLS_TABLPOK.KODIF_ID)
  LOOP
    SET_PARAM(lcur.TAG,lcur.VALUE,lcur.NORMA);
  END LOOP;
END;

/* Определение текущего ГОСТа */
FUNCTION GET_DEFAULT_GOST (pLOAD_TYPE_ID NUMBER, pDATE_CALC DATE, pPROD_ID_NPR VARCHAR2,
                           pTEMPER VARCHAR2, pPL15 NUMBER, pPL20 NUMBER, vSLIV NUMBER) RETURN NUMBER AS
  vGOST NUMBER;
BEGIN
  IF pDATE_CALC>=G_NEW_GOST THEN
    vGOST:=1; -- ГОСТ 8.595-2004
  ELSE
    vGOST:=0; -- ГОСТ 3900-85
  END IF;
--  IF vGOST=1 AND vSLIV=9 AND pPROD_ID_NPR<>'90002' THEN
--    -- слив НЕФТИ кроме усинской - ГОСТ 3900-85
--    vGOST:=0;
--  END IF;
  IF vGOST=1 AND vSLIV=9 AND pPROD_ID_NPR>='90000' AND (pPL15<0.83 OR pPL15>0.87 OR pTEMPER<-18 OR pTEMPER>150) THEN
    -- слив НЕФТИ, нет данных в таблицах - ГОСТ 3900-85
    vGOST:=0;
  END IF;
  IF vGOST=1 AND vSLIV<>9 AND pPROD_ID_NPR>='90000' AND (pPL15<0.83 OR pPL15>0.87 OR pTEMPER<-18 OR pTEMPER>150) THEN
    -- отгрузка НЕФТИ, нет данных в таблицах - ГОСТ 3900-85
    vGOST:=0;
  END IF;
  IF vGOST=1 AND pPROD_ID_NPR<'90000' AND (pPL15<0.654 OR pPL15>1.074 OR pTEMPER<-18 OR pTEMPER>150) THEN
    -- отгрузка НЕФТЕПРОДУКТОВ, нет данных в таблицах - ГОСТ 3900-85
    vGOST:=0;
  END IF;
  IF vGOST=0 AND (pPL20<0.5 OR pPL20>1.09 OR pTEMPER<-25 OR pTEMPER>125) THEN
    -- совсем старый ГОСТ
    vGOST:=-1; 
  END IF;
  RETURN vGost;
END;

/* Расчет объема при 15'C по фактическому объему */
FUNCTION GET_VOLUME15_BY_VOLUME (pDATE_CALC DATE, vVOLUME NUMBER, vTEMPER NUMBER, vCTLV NUMBER, vSLIV NUMBER) RETURN NUMBER AS
  vVOLUME15 NUMBER;
BEGIN
  IF pDATE_CALC>=TO_DATE('01.11.2005','dd.mm.yyyy') THEN
	vVOLUME15:=(vVOLUME*((1+(2*12.5/1000000+23/1000000)*(vTEMPER-20))*vCTLV));
  ELSE
	vVOLUME15:=(vVOLUME*((1+(2*11.3/1000000+23/1000000)*(vTEMPER-20))*vCTLV));
  END IF;
  IF vSLIV<>9 THEN
    -- для отгрузки нефти и нефтепродуктов
	vVOLUME15:=ROUND(vVOLUME15,0);
  ELSE
    -- для слива нефти
	vVOLUME15:=ROUND(vVOLUME15,4);
  END IF;		
  RETURN vVOLUME15;
END;

/* Расчет фактического объема по объему при 15'C */
FUNCTION GET_VOLUME_BY_VOLUME15 (pDATE_CALC DATE, vVOLUME15 NUMBER, vTEMPER NUMBER, vCTLV NUMBER) RETURN NUMBER AS
  vVOLUME NUMBER;
BEGIN
  IF vCTLV<>0 THEN
    IF pDATE_CALC>=TO_DATE('01.11.2005','dd.mm.yyyy') THEN
	  vVOLUME:=ROUND(vVOLUME15/((1+(2*12.5/1000000+23/1000000)*(vTEMPER-20))*vCTLV),0);
    ELSE
	  vVOLUME:=ROUND(vVOLUME15/((1+(2*11.3/1000000+23/1000000)*(vTEMPER-20))*vCTLV),0);
    END IF;
  ELSE
    vVOLUME:=0;
  END IF;
  RETURN vVOLUME;
END;

/* Расчет веса:
	pDATE_CALC - дата расчета
	pLOAD_TYPE_ID - тип транспортировки (ж/д, самовывоз и т.п.)
	pMESTO_ID - место отгрузки
	pDEFI_MASS_ID - метод замера массы (1 - метр/шток, 2 - весы)
	vFAS:
		0 - налив: расчет чистого веса груза по известным весам брутто, тары
		1 - фасовка: расчет чистого веса груза по известным весам брутто, тары, упаковки
		2 - фасовка: расчет веса упаковки по известным весам брутто, чистого веса груза, тары
		3 - фасовка: расчет веса тары по известным весам брутто, чистого веса груза, упаковки
		4 - фасовка: расчет веса брутто по известным весам тары, чистого веса груза, упаковки
	vKOL:
		0 - налив
		1 - вычисление веса 1 единицы груза по весу груза (для FAS<>0)
		2 - вычисление веса груза по значению веса 1 ед.груза (для FAS<>0 AND FAS<>2)
		3 - вычисление кол-ва ед-ц груза по весу 1 единицы
	vUPAK:
		0 - налив
		1 - вычисление веса упаковки 1 единицы груза по весу всей упаковки (для FAS<>0)
		2 - вычисление веса всей упаковки по значению веса упаковки 1 ед.груза (для FAS<>0 AND FAS<>2)
	vGOST - только для наливных грузов (FAS=0) - ГОСТ, по которому необходимо произвести расчет либо веса,
	       либо объема - ВНИМАНИЕ!!! Гост может измениться внутри процедуры расчета. Гост по которому
		   действительно был произведен расчет возвращается через временную таблицу TEMP_VES.
		   Первоначальное значение GOST можно определить вызвав FOR_VES.GET_GOST
	vSLIV - признак слива
		1 - отгрузка
		9 - слив нефти
 */
FUNCTION CALC_VES(pDATE_CALC DATE, pLOAD_TYPE_ID NUMBER, pVAGONTYPE_ID NUMBER, pMESTO_ID NUMBER,
   pDEFI_MASS_ID NUMBER) RETURN NUMBER AS
  vPROD_ID_NPR KLS_PROD.ID_NPR%TYPE;
  vPLAT_ID NUMBER;
  vKALIBR_ID KLS_KALIBR.ID%TYPE;
  vMG_VOD NUMBER;
  vP_VOD NUMBER;
  vMG_SOL NUMBER;
  vP_SOL NUMBER;
  vP_DIRT NUMBER;
  vPL15 NUMBER;
  vPL20 NUMBER;
  vTEMPER NUMBER;
  vCTLV NUMBER;
  vGOST NUMBER;
  vVOLUME NUMBER;
  vVOLUME15 NUMBER;
  vUPAK_VES NUMBER;
  vUPAK_VES_ED NUMBER;
  vKOL_ED NUMBER;
  vVES_ED NUMBER;
  vPODDONS NUMBER;
  vPODDON_VES NUMBER;
  vSHIELDS NUMBER;
  vSHIELD_VES NUMBER;
  vVES_ALL NUMBER;
  vVES_CIST NUMBER;
  vVES NUMBER;
  vKOL_NET NUMBER;
  vVZLIV NUMBER;
  vFACT_PL NUMBER;
  vVED_ED NUMBER;
  vFAS NUMBER;
  vKOL NUMBER;
  vUPAK NUMBER;
  vSLIV NUMBER;
BEGIN
  -- Входные параметры для расчета
  IF pDEFI_MASS_ID=1 THEN
    vFAS:=0;
	vKOL:=0;
	vUPAK:=0;
  ELSE
    IF pVAGONTYPE_ID IN (1,6) THEN
	  vFAS:=1;
	  vKOL:=0;
	  vUPAK:=0;
	ELSE
	  vFAS:=2;
	  vKOL:=1;
	  vUPAK:=1;
  	END IF;
  END IF;
  vPROD_ID_NPR:=GET_PARAM_AS_CHAR('PROD_ID_NPR'); --продукт
  vPLAT_ID:=GET_PARAM_AS_NUM('PLAT_ID'); --плательщик по договору (для ЛУКОЙЛ-СНП вычитаем воду)
  vKALIBR_ID:=GET_PARAM_AS_CHAR('KALIBR_ID'); -- тип вагона
  vMG_VOD:=GET_PARAM_AS_NUM('MG_VOD'); -- содержание воды мг/л
  vP_VOD:=GET_PARAM_AS_NUM('P_VOD'); -- содержание воды %
  IF vP_VOD<0 THEN 
    vP_VOD:=0;
  END IF;	
  vMG_SOL:=GET_PARAM_AS_NUM('MG_SOL'); -- содержание солей мг/дм3
  vP_SOL:=GET_PARAM_AS_NUM('P_SOL'); -- содержание солей %
  IF vP_SOL<0 THEN 
    vP_SOL:=0;
  END IF;	
  vP_DIRT:=GET_PARAM_AS_NUM('P_DIRT'); -- содержание мех.примеесй, %
  IF vP_DIRT<0 THEN 
    vP_DIRT:=0;
  END IF;	
  vPL15:=GET_PARAM_AS_NUM('PL15'); -- плотность при 15'C
  vPL20:=GET_PARAM_AS_NUM('PL20'); -- плотность при 20'C
  vTEMPER:=GET_PARAM_AS_NUM('TEMPER'); -- температура
  vCTLV:=0; -- коэффициент коррекции объема
  vVZLIV:=GET_PARAM_AS_NUM('VZLIV'); -- взлив
  vVOLUME:=GET_PARAM_AS_NUM('VOLUME'); -- объем по калибровочной таблице
  vVOLUME15:=0; -- объем при 15'C
  vFACT_PL:=0; -- факт.плотность по ГОСТ 3900-85
  vUPAK_VES:=GET_PARAM_AS_NUM('UPAK_VES'); -- вес упаковки, тн
  vUPAK_VES_ED:=GET_PARAM_AS_NUM('UPAK_VES_ED'); -- вес 1 ед-цы упаковки, кг
  vKOL_ED:=GET_PARAM_AS_NUM('KOL_ED'); -- кол-во ед-ц
  vVES_ED:=GET_PARAM_AS_NUM('VES_ED'); -- вес 1 ед-цы, тн
  vPODDONS:=GET_PARAM_AS_NUM('PODDONS'); -- кол-во поддонов
  vPODDON_VES:=GET_PARAM_AS_NUM('PODDON_VES'); -- вес 1 поддона, кг
  IF vPODDON_VES=0 THEN
    vPODDON_VES:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','PODDON_VES',FOR_INIT.GetCurrUser);
  END IF;
  vSHIELDS:=GET_PARAM_AS_NUM('SHIELDS'); -- кол-в щитов
  vSHIELD_VES:=GET_PARAM_AS_NUM('SHIELD_VES'); -- вес 1 щита,кг
  IF vSHIELD_VES=0 THEN
    vSHIELD_VES:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','SHIELD_VES',FOR_INIT.GetCurrUser);
  END IF;
  vVES_ALL:=GET_PARAM_AS_NUM('VES_ALL'); -- вес груза, упаковки, вагона
  vVES_CIST:=GET_PARAM_AS_NUM('VES_CIST'); -- вес вагона
  vVES:=GET_PARAM_AS_NUM('VES'); -- вес груза
  vKOL_NET:=0; -- вес НЕТТО нефти (без баласта)
  vSLIV:=NVL(GET_PARAM_AS_NUM('SLIV'),0); -- v
  vGOST:=GET_DEFAULT_GOST(pLOAD_TYPE_ID,pDATE_CALC,vPROD_ID_NPR,vTEMPER,vPL15,vPL20,vSLIV);

  -- Расчет % солей
  IF vP_SOL=0 AND vMG_SOL<>0 THEN
    IF vGOST=1 AND vPL15<>0 THEN
	  vP_SOL:=ROUND(vMG_SOL/vPL15/10000,4);
	END IF;
    IF vGOST<>1 AND vPL20<>0 THEN
	  vP_SOL:=ROUND(vMG_SOL/vPL20/10000,4);
	END IF;
  END IF;

  -- Расчет % воды
  IF vP_VOD=0 AND vMG_VOD<>0 THEN
    vP_VOD:=ROUND(vMG_VOD / 10000,4);
  END IF;

  -- Расчет плотностей и/или коэффициента объема
  vCTLV:=GET_CTLV_ASTMD1250(vTEMPER, vPL15, vPROD_ID_NPR);
  IF vGOST<>-1 THEN
    vFACT_PL:=GET_FACT_PL_390085(vTEMPER, vPL20);
  END IF;
  IF vFACT_PL=0 OR vGOST=-1 THEN
    vFACT_PL:=GET_FACT_PL_MOROZ(vTEMPER, vPL20);
	IF vGOST=0 THEN
  	  vGOST:=-1;
	END IF;
  END IF;

  -- расчет кол-ва ед-ц груза
  IF vKOL=3 AND vVES_ED<>0 THEN
    vKOL_ED:=FLOOR(vVES / vVES_ED);
  END IF;

  -- расчет веса груза (в ТН)
  IF vKOL=2 THEN
    vVES:=ROUND((vKOL_ED*vVES_ED)/1000,3);
  END IF;

  -- расчет веса упаковки (в ТН)
  IF pDEFI_MASS_ID=1 OR vFAS=0 THEN
	vUPAK_VES:=0;
  ELSE
    IF vUPAK=2 AND vFAS<>2 AND vKOL_ED<>0 AND vUPAK_VES_ED<>0 THEN
      vUPAK_VES:=ROUND((vKOL_ED*vUPAK_VES_ED+vSHIELDS*vSHIELD_VES+vPODDONS*vPODDON_VES)/1000,3);
	END IF;
  END IF;

  -- расчет веса
  IF pDEFI_MASS_ID=1 THEN
    -- ЗАМЕР МЕТР-ШТОКОМ
    -- Определяем фактический объем
    IF pLOAD_TYPE_ID=1 AND NVL(vVOLUME,0)=0 THEN
      vVOLUME:=FOR_CIST.GET_VOLUME(vKALIBR_ID, vVZLIV, pLOAD_TYPE_ID, pVAGONTYPE_ID);
    END IF;
    -- Определяем объем при 15'C по фактическому объему
    vVOLUME15:=GET_VOLUME15_BY_VOLUME(pDATE_CALC,vVOLUME,vTEMPER,vCTLV,vSLIV);
	-- Определяем вес
	IF vGOST=1 THEN
      vVES:=vPL15 * vVOLUME15;
	ELSE
      vVES:=vFACT_PL * vVOLUME;
	END IF;
	IF vSLIV=9 THEN
	  vVES:=ROUND(vVES,4)/1000;
	ELSE
	  vVES:=ROUND(vVES,0)/1000;
    END IF;	  
    vVES_ALL:=vVES+vVES_CIST+vUPAK_VES;
  ELSE
    -- Взвешивание: pDEFI_MASS_ID<>1
	IF vFAS=0 OR vFAS=1 THEN
	  -- Взвешивание наливных и фасованных продуктов: Расчет веса
	  vVES:=vVES_ALL-vVES_CIST-vUPAK_VES;
	ELSIF vFAS=2 THEN
	  -- Взвешивание фасованных продуктов: Расчет упаковки
	  vUPAK_VES:=vVES_ALL-vVES_CIST-vVES;
	ELSIF vFAS=3 THEN
	  -- Взвешивание фасованных продуктов: Расчет тары
	  vVES_CIST:=vVES_ALL-vVES-vUPAK_VES;
	ELSIF vFAS=4 THEN
	  -- Взвешивание фасованных продуктов: Расчет брутто
      vVES_ALL:=vVES+vVES_CIST+vUPAK_VES;
	END IF;
    -- расчет фактического объема и объема при 15'C
	IF vGOST=1 THEN
	  IF vPL15<>0 THEN
        -- Определяем объем при 15'C
        vVOLUME15:=ROUND(vVES/vPL15,0);
        -- Определяем фактический объем
        vVOLUME:=GET_VOLUME_BY_VOLUME15(pDATE_CALC,vVOLUME15,vTEMPER,vCTLV);
	  ELSIF vFACT_PL<>0 THEN
        -- Определяем фактический объем
        vVOLUME:=ROUND(vVES/vFACT_PL,0);
        -- Определяем объем при 15'C
        vVOLUME15:=GET_VOLUME15_BY_VOLUME(pDATE_CALC,vVOLUME,vTEMPER,vCTLV,vSLIV);
	  END IF;
	ELSE -- vGOST<>1
	  IF vFACT_PL<>0 THEN
        -- Определяем фактический объем
        vVOLUME:=ROUND(vVES/vFACT_PL,0);
        -- Определяем объем при 15'C
        vVOLUME15:=GET_VOLUME15_BY_VOLUME(pDATE_CALC,vVOLUME,vTEMPER,vCTLV,vSLIV);
	  ELSIF vPL15<>0 THEN
        -- Определяем объем при 15'C
        vVOLUME15:=ROUND(vVES/vPL15,0);
        -- Определяем фактический объем
        vVOLUME:=GET_VOLUME_BY_VOLUME15(pDATE_CALC,vVOLUME15,vTEMPER,vCTLV);
	  END IF;
    END IF;
  END IF;

  -- расчет кол-ва ед-ц груза
  IF vKOL=3 AND vVES_ED<>0 THEN
    vKOL_ED:=FLOOR(vVES / vVES_ED);
  END IF;

  -- расчет веса 1 единицы груза (в КГ)
  IF vKOL=1 AND vKOL_ED<>0 THEN
    vVES_ED:=ROUND(vVES * 1000 / vKOL_ED,2);
  END IF;

  -- расчет веса упаковки 1 единицы груза (в КГ)
  IF pDEFI_MASS_ID=1 OR vFAS=0 THEN
      vUPAK_VES_ED:=0;
  ELSE
    IF vUPAK=1 AND vKOL_ED<>0 AND vUPAK_VES<>0 THEN
      vUPAK_VES_ED:=ROUND((vUPAK_VES*1000-vSHIELDS*vSHIELD_VES-vPODDONS*vPODDON_VES)/vKOL_ED,2);
	END IF;
  END IF;

  -- расчет веса упаковки (в ТН)
  IF pDEFI_MASS_ID=1 OR vFAS=0 THEN
	vUPAK_VES:=0;
  ELSE
    IF vUPAK=2 AND vFAS<>2 AND vKOL_ED<>0 AND vUPAK_VES_ED<>0 THEN
      vUPAK_VES:=ROUND((vKOL_ED*vUPAK_VES_ED+vSHIELDS*vSHIELD_VES+vPODDONS*vPODDON_VES)/1000,3);
	END IF;
  END IF;

  -- расчет веса НЕТТО нефти
  IF vPROD_ID_NPR>='90000' THEN
    vKOL_NET:=(vVES*(1-vP_SOL/100-vP_DIRT/100-vP_VOD/100));
  ELSE
    vKOL_NET:=0;
  END IF;
  IF vSLIV=9 THEN
	vKOL_NET:=ROUND(vKOL_NET,7);
  ELSE
	vKOL_NET:=ROUND(vKOL_NET,3);
  END IF;	  

  IF vSLIV<>9 AND (pDEFI_MASS_ID=1 OR vFAS=0 OR vFAS=1) THEN
	-- Коррекция веса на воду (ж/д, СНП)
	IF pLOAD_TYPE_ID=1 AND vPLAT_ID=2641 THEN
	  IF vMG_VOD<>0 AND vMG_VOD>GET_PARAM_NORMA('MG_VOD') THEN
	    -- сожержание воды в мг/кг превышает норму
	    vVES:=vVES - ROUND(vVES * vMG_VOD / 1000000,3);
	  END IF;
	END IF;
  END IF;
  
  IF vVES<0 THEN
    vVES:=0;
  END IF;	

  -- Сохраняем результаты
  SET_PARAM('GOST',vGOST);
  SET_PARAM('P_VOD',ora_num_to_char(vP_VOD,'999.9999'));
  SET_PARAM('P_SOL',ora_num_to_char(vP_SOL,'999.9999'));
  SET_PARAM('FACT_PL',ora_num_to_char(vFACT_PL,'9.9999'));
  SET_PARAM('CTLV',ora_num_to_char(vCTLV,'9.9999'));
  SET_PARAM('VOLUME',ora_num_to_char(vVOLUME));
  SET_PARAM('VOLUME15',ora_num_to_char(vVOLUME15));
  SET_PARAM('UPAK_VES',ora_num_to_char(vUPAK_VES,'999.999'));
  SET_PARAM('UPAK_VES_ED',ora_num_to_char(vUPAK_VES_ED,'999.999'));
  SET_PARAM('KOL_ED',ora_num_to_char(vKOL_ED));
  SET_PARAM('VES_ED',ora_num_to_char(vVES_ED,'999.999'));
  SET_PARAM('PODDON_VES',ora_num_to_char(vPODDON_VES));
  SET_PARAM('SHIELD_VES',ora_num_to_char(vSHIELD_VES));
  SET_PARAM('VES_ALL',ora_num_to_char(vVES_ALL,'999.999'));
  SET_PARAM('VES_CIST',ora_num_to_char(vVES_CIST,'999.999'));
  SET_PARAM('VES',ora_num_to_char(vVES/*,'999.9999999'*/));
  SET_PARAM('KOL_NET',ora_num_to_char(vKOL_NET/*,'999.999'*/));
  COMMIT;
  RETURN vVES;
END;

END; 
/

--
-- FOR_ZAKAZ  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Zakaz AS

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  -- Очищаем временную таблицу
  PROCEDURE EmptyTemp(pIS_AGENT NUMBER) AS
  BEGIN
	DELETE FROM V_ZAKAZ_TEMP WHERE IS_AGENT=pIS_AGENT;
    COMMIT;
  END;

  -- Добавить данные во временную таблицу
  PROCEDURE FillTemp(pIS_AGENT NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pZAKAZ_ID NUMBER DEFAULT NULL) AS
	vCNT NUMBER;
  BEGIN
    /* Считываем запись из заявки */
	IF (pIS_AGENT<>9) THEN
  	  FOR vZAKAZ IN (SELECT DISTINCT
					   NVL(FILIAL_ID,-1) AS FILIAL_ID,
					   PROD_ID_NPR,
					   NVL(DOG_ID,-1) AS DOG_ID,
					   NVL(PLAT_ID,-1) AS PLAT_ID
					  FROM ZAKAZ
	                 WHERE (ID=pZAKAZ_ID OR NVL(pZAKAZ_ID,0)=0)
                       AND Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
				    )
      LOOP
        /* СНП */
       	IF pIS_AGENT=2 THEN

          /* ПЛАНЫ  */
    	  -- Найти запись
    	  SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
    	   WHERE IS_AGENT=pIS_AGENT
    	     AND KIND_VALUE=1
    		 AND FILIAL_ID=vZAKAZ.FILIAL_ID
    		 AND PROD_ID_NPR=vZAKAZ.PROD_ID_NPR;

    	  IF vCNT=0 THEN
    	    -- Добавим запись
            INSERT INTO ZAKAZ_TEMP
    	      (IS_AGENT,KIND_VALUE,FILIAL_ID,PROD_ID_NPR,
    		   PLAN_NB,PLAN_TRAN,PLAN_VNCORPTR,PLAN_OTHER)
            SELECT
    	      pIS_AGENT,1,vZAKAZ.FILIAL_ID,vZAKAZ.PROD_ID_NPR,
              SUM(NVL(plan_NB,0)) AS PLAN_NB,
              SUM(NVL(plan_TRAN,0)) AS PLAN_TRAN,
              SUM(NVL(plan_VNCORPTR,0)) AS PLAN_VNCORPTR,
              SUM(NVL(plan_OTHER,0)) AS PLAN_OTHER
            FROM
            (
            SELECT
              /* План поставок */
              PLAN_POST.Prod_id_npr,
              DECODE(NVL(TIP_REAL_ID,0),1,PLAN_POST.plan_ves,0) AS PLAN_NB,
              DECODE(NVL(TIP_REAL_ID,0),2,PLAN_POST.plan_ves,0) AS PLAN_TRAN,
              DECODE(NVL(TIP_REAL_ID,0),0,DECODE(spf_group_name,'ВНУТРИКОРПОРАТИВНЫЙ ТРАНЗИТ',PLAN_POST.plan_ves,0),0) AS PLAN_VNCORPTR,
              DECODE(NVL(TIP_REAL_ID,0),0,DECODE(spf_group_name,'ПРОЧЕЕ',PLAN_POST.plan_ves,0),0) AS PLAN_OTHER
            FROM PLAN_PERIODS,PLAN_POST,
            (
             SELECT * FROM v_Kls_planstru
              WHERE v_Kls_planstru.IS_SNP=1 /* План по ЛУКОЙЛ-СНП */
              AND v_Kls_planstru.IS_TO_HRAN=0 /* Без отгрузки на хранение */
              AND DECODE (v_Kls_planstru.Region_id, 21, 40, 31) = vZAKAZ.Filial_id
              AND v_Kls_planstru.Parent_id<>218
            ) PS
            WHERE PLAN_POST.Plan_per_id = PLAN_PERIODS.ID
              AND (
			       (PLAN_POST.Plan_id=1 AND pBEGIN_DATE<TO_DATE('01.01.2005','dd.mm.yyyy')) /* Рабочий план */
                OR (PLAN_POST.Plan_id IN (12,13) AND pBEGIN_DATE>=TO_DATE('01.01.2005','dd.mm.yyyy')) /* планы СНП*/
	              )
              AND PLAN_PERIODS.Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
              AND PLAN_POST.Planstru_id=PS.ID
            ) PP,
            (
            SELECT Link_id_Npr
               FROM v_prod_linked_grp_4
              WHERE fact_id_npr = vZAKAZ.prod_id_npr
            ) Prods
            WHERE Prods.Link_Id_npr =  PP.Prod_id_npr;
    	  END IF;

    	  /* ПРОДУКТ-ЗАЯВЛЕНО-ОТГРУЖЕНО */
    	  -- Найти запись
    	  SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
    	   WHERE IS_AGENT=pIS_AGENT
    	     AND KIND_VALUE=2
    		 AND FILIAL_ID=vZAKAZ.FILIAL_ID
    		 AND PROD_ID_NPR=vZAKAZ.PROD_ID_NPR
    		 AND DOG_ID=vZAKAZ.DOG_ID
    		 AND PLAT_ID=vZAKAZ.PLAT_ID;

    	  IF vCNT=0 THEN
    	    -- Добавим запись
            INSERT INTO ZAKAZ_TEMP
    	      (IS_AGENT,KIND_VALUE,FILIAL_ID,PROD_ID_NPR,DOG_ID,PLAT_ID,
    		   PROD_NAME,
    		   ZAYV_ALL_PROD,ZAYV_ACCEPT_PROD,ZAYV_FACT_PROD,
    		   ZAYV_ALL_DOG,ZAYV_ACCEPT_DOG,ZAYV_FACT_DOG,
    		   ZAYV_ALL_PLAT,ZAYV_ACCEPT_PLAT,ZAYV_FACT_PLAT)
            SELECT
    	      pIS_AGENT,2,vZAKAZ.FILIAL_ID,vZAKAZ.PROD_ID_NPR,vZAKAZ.DOG_ID,vZAKAZ.PLAT_ID,
              Prods.GROUP_NAME_NPR AS PROD_NAME,
              SUM(VES) AS ZAYV_ALL_PROD,
              SUM(DECODE(IS_ACCEPT,1,VES,0)) AS zayv_accept_prod,
              SUM(FACT_VES) AS ZAYV_FACT_PROD,
              SUM(DECODE(NVL(DOG_ID,0),vZAKAZ.DOG_ID,VES,0)) AS zayv_all_dog,
              SUM(DECODE(NVL(DOG_ID,0),vZAKAZ.DOG_ID,DECODE(IS_ACCEPT,1,VES,0),0)) AS zayv_accept_dog,
              SUM(DECODE(NVL(DOG_ID,0),vZAKAZ.DOG_ID,FACT_VES,0)) AS zayv_fact_dog,
              SUM(DECODE(NVL(PLAT_ID,0),vZAKAZ.PLAT_ID,VES,0)) AS zayv_all_plat,
              SUM(DECODE(NVL(PLAT_ID,0),vZAKAZ.PLAT_ID,DECODE(IS_ACCEPT,1,VES,0),0)) AS zayv_accept_plat,
              SUM(DECODE(NVL(PLAT_ID,0),vZAKAZ.PLAT_ID,FACT_VES,0)) AS zayv_fact_plat
            FROM ZAKAZ mon,
            (
            SELECT Link_id_Npr,GROUP_NAME_NPR
               FROM v_prod_linked_grp_4
              WHERE fact_id_npr = vZAKAZ.prod_id_npr
            ) Prods
            WHERE mon.is_agent=2
              AND mon.Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
              AND mon.filial_id=vZAKAZ.FILIAL_ID
              AND mon.PROD_ID_NPR=Prods.Link_Id_npr
            GROUP BY Prods.GROUP_NAME_NPR;
    	  END IF;

    	  /* ЗАДОЛЖЕННОСТЬ */
		  IF NVL(vZAKAZ.DOG_ID,0)<>0 THEN
      	    -- Найти запись
      	    SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
             WHERE IS_AGENT=pIS_AGENT
             AND KIND_VALUE=3
        	 AND DOG_ID=vZAKAZ.DOG_ID;

            IF vCNT=0 THEN
              -- Добавим запись
            /*  INSERT INTO ZAKAZ_TEMP
	           (IS_AGENT,KIND_VALUE,DOG_ID,SALDO)
              SELECT
	            pIS_AGENT,3,vZAKAZ.DOG_ID,
		        NVL(SUM(-NFACT_INGOOD_SUM+NFACT_OUTGOOD_SUM+NPLAN_OUTSERV_SUM+NFACT_OUTPAY_SUM-NFACT_INPAY_SUM),0) AS SALDO
              FROM parus.V_contracts@oracle.world f, KLS_DOG_PARUS
              WHERE KLS_DOG_PARUS.DOG_ID=vZAKAZ.dog_id
                AND TRIM (f.sdoc_pref) || TRIM (f.sdoc_numb)=KLS_DOG_PARUS.BASE_NUMB;*/
			  NULL;
	        END IF;
	      END IF;
        END IF;

        /* АГЕНТ, УНП */
	    IF pIS_AGENT=1 THEN

          /* ПЛАНЫ */
	      -- Найти запись
	      SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
	       WHERE IS_AGENT=pIS_AGENT
	         AND KIND_VALUE=1
		     AND FILIAL_ID=vZAKAZ.FILIAL_ID
			 AND PROD_ID_NPR=vZAKAZ.PROD_ID_NPR
		     AND DOG_ID=vZAKAZ.DOG_ID;

	      IF vCNT=0 THEN
	        -- Добавим запись
            INSERT INTO ZAKAZ_TEMP
	          (IS_AGENT,KIND_VALUE,FILIAL_ID,PROD_ID_NPR,DOG_ID,
		       PLAN_PROD,PLAN_DOG)
            SELECT
	          pIS_AGENT,1,vZAKAZ.FILIAL_ID,vZAKAZ.PROD_ID_NPR,vZAKAZ.DOG_ID,
              SUM(NVL(plan_PROD,0)) AS plan_PROD,
              SUM(NVL(plan_DOG,0)) AS plan_DOG
            FROM
            (
            SELECT /* */
              -- План поставок
              PLAN_POST.Prod_id_npr,
              PLAN_POST.plan_ves AS PLAN_PROD,
              DECODE(NVL(PLAN_POST.dog_id,0),vZAKAZ.DOG_ID,PLAN_POST.plan_ves,0) AS PLAN_DOG
            FROM PLAN_PERIODS,PLAN_POST,
            (
             SELECT * FROM v_Kls_planstru
              WHERE /*v_Kls_planstru.IS_SNP=0 -- НЕ СНП
              AND*/ v_Kls_planstru.IS_TO_HRAN=0 -- Без отгрузки на хранение
            ) PS
            WHERE PLAN_POST.Plan_per_id = PLAN_PERIODS.ID
              AND PLAN_POST.Plan_id IN (2,3)  -- Московский план + ОБР
              AND PLAN_PERIODS.Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
              AND PLAN_POST.Planstru_id=PS.ID
            ) PP,
            (
            SELECT Link_id_Npr
               FROM v_prod_linked_grp_4
              WHERE fact_id_npr = vZAKAZ.prod_id_npr
            ) Prods
            WHERE Prods.Link_Id_npr =  PP.Prod_id_npr;
	      END IF;

	      /* ПРОДУКТ-ЗАЯВЛЕНО-ОТГРУЖЕНО */
	      -- Найти запись
	      SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
	       WHERE IS_AGENT=pIS_AGENT
	         AND KIND_VALUE=2
		     AND FILIAL_ID=vZAKAZ.FILIAL_ID
		     AND PROD_ID_NPR=vZAKAZ.PROD_ID_NPR
		     AND DOG_ID=vZAKAZ.DOG_ID
		     AND PLAT_ID=vZAKAZ.PLAT_ID;

	      IF vCNT=0 THEN
	        -- Добавим запись
            INSERT INTO ZAKAZ_TEMP
	          (IS_AGENT,KIND_VALUE,FILIAL_ID,PROD_ID_NPR,DOG_ID,PLAT_ID,
		       PROD_NAME,
		       ZAYV_ALL_PROD,ZAYV_ACCEPT_PROD,ZAYV_FACT_PROD,
		       ZAYV_ALL_DOG,ZAYV_ACCEPT_DOG,ZAYV_FACT_DOG,
		       ZAYV_ALL_PLAT,ZAYV_ACCEPT_PLAT,ZAYV_FACT_PLAT)
            SELECT
	          pIS_AGENT,2,vZAKAZ.FILIAL_ID,vZAKAZ.PROD_ID_NPR,vZAKAZ.DOG_ID,vZAKAZ.PLAT_ID,
              Prods.GROUP_NAME_NPR AS PROD_NAME,
              SUM(VES) AS ZAYV_ALL_PROD,
              SUM(DECODE(IS_ACCEPT,1,VES,0)) AS zayv_accept_prod,
              SUM(FACT_VES) AS ZAYV_FACT_PROD,
              SUM(DECODE(NVL(DOG_ID,0),vZAKAZ.DOG_ID,VES,0)) AS zayv_all_dog,
              SUM(DECODE(NVL(DOG_ID,0),vZAKAZ.DOG_ID,DECODE(IS_ACCEPT,1,VES,0),0)) AS zayv_accept_dog,
              SUM(DECODE(NVL(DOG_ID,0),vZAKAZ.DOG_ID,FACT_VES,0)) AS zayv_fact_dog,
              SUM(DECODE(NVL(PLAT_ID,0),vZAKAZ.PLAT_ID,VES,0)) AS zayv_all_plat,
              SUM(DECODE(NVL(PLAT_ID,0),vZAKAZ.PLAT_ID,DECODE(IS_ACCEPT,1,VES,0),0)) AS zayv_accept_plat,
              SUM(DECODE(NVL(PLAT_ID,0),vZAKAZ.PLAT_ID,FACT_VES,0)) AS zayv_fact_plat
            FROM ZAKAZ mon,
            (
            SELECT Link_id_Npr,GROUP_NAME_NPR
               FROM v_prod_linked_grp_4
              WHERE fact_id_npr = vZAKAZ.prod_id_npr
            ) Prods
            WHERE /*mon.is_agent IN (1,2,3,4,5)
              AND */mon.Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
              AND mon.filial_id=vZAKAZ.FILIAL_ID
              AND mon.PROD_ID_NPR=Prods.Link_Id_npr
            GROUP BY Prods.GROUP_NAME_NPR;
	      END IF;
        END IF;
      END LOOP;
	END IF;

    /* ПАРУС */
	IF pIS_AGENT=9 THEN

  	  FOR vZAKAZ_PARUS IN (SELECT DISTINCT
	                    FILIAL_ID,PARUS_NOMEN_TAG,PARUS_DOGOVOR,PARUS_AGENT_TAG
					  FROM ZAKAZ_PARUS
	                 WHERE (PARUS_RN=pZAKAZ_ID OR NVL(pZAKAZ_ID,0)=0)
                       AND Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
				    )
      LOOP
  	    /* ПЛАНЫ */
	    -- Найти запись
	    SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
	     WHERE IS_AGENT=pIS_AGENT
	       AND KIND_VALUE=1
		   AND FILIAL_ID=vZAKAZ_PARUS.FILIAL_ID
		   AND PARUS_NOMEN_TAG=vZAKAZ_PARUS.PARUS_NOMEN_TAG;

	    IF vCNT=0 THEN
	      -- Добавим запись
          INSERT INTO ZAKAZ_TEMP
	        (IS_AGENT,KIND_VALUE,FILIAL_ID,PARUS_NOMEN_TAG,
		     PLAN_NB,PLAN_AZS,PLAN_TRAN,PLAN_VNCORPTR)
          SELECT
	        pIS_AGENT,1,vZAKAZ_PARUS.FILIAL_ID,vZAKAZ_PARUS.PARUS_NOMEN_TAG,
            SUM(NVL(plan_NB,0)) AS plan_NB,
            SUM(NVL(plan_AZS,0)) AS plan_AZS,
            SUM(NVL(plan_TRAN,0)) AS plan_TRAN,
            SUM(NVL(plan_VNCORPTR,0)) AS plan_VNCORPTR
          FROM
          (
          SELECT /* */
            -- План реализации
            PLAN_REALIZ.Prod_id_npr,
            DECODE(NVL(TIP_REAL_ID,0),1,DECODE(ORG_KIND_ID,1,PLAN_REALIZ.VES,0),0) AS PLAN_NB,
            DECODE(NVL(TIP_REAL_ID,0),1,DECODE(ORG_KIND_ID,5,PLAN_REALIZ.VES,0),0) AS PLAN_AZS,
            DECODE(NVL(TIP_REAL_ID,0),2,PLAN_REALIZ.ves,0) AS PLAN_TRAN,
            DECODE(NVL(TIP_REAL_ID,0),3,PLAN_REALIZ.ves,0) AS PLAN_VNCORPTR
          FROM PLAN_REALIZ
          WHERE PLAN_REALIZ.ORG_STRU_ID=vZAKAZ_PARUS.FILIAL_ID
		    AND PLAN_REALIZ.Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
          ) PR,
          (
          SELECT Link_id_Npr
             FROM v_prod_linked_grp_4,KLS_PROD_NOMENKLATOR
            WHERE KLS_PROD_NOMENKLATOR.is_actual=1
              AND fact_id_npr = KLS_PROD_NOMENKLATOR.prod
        	  AND KLS_PROD_NOMENKLATOR.MODIF=vZAKAZ_PARUS.PARUS_NOMEN_TAG
          ) Prods
          WHERE Prods.Link_Id_npr =  PR.Prod_id_npr;
        END IF;

	    /* ПРОДУКТ-ЗАЯВЛЕНО-ОТГРУЖЕНО */
	    -- Найти запись
	    SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
	     WHERE IS_AGENT=pIS_AGENT
	       AND KIND_VALUE=2
		   AND FILIAL_ID=vZAKAZ_PARUS.FILIAL_ID
		   AND PARUS_NOMEN_TAG=vZAKAZ_PARUS.PARUS_NOMEN_TAG
		   AND PARUS_DOGOVOR=vZAKAZ_PARUS.PARUS_DOGOVOR
		   AND PARUS_AGENT_TAG=vZAKAZ_PARUS.PARUS_AGENT_TAG;

	    IF vCNT=0 THEN
	      -- Добавим запись
          INSERT INTO ZAKAZ_TEMP
	        (IS_AGENT,KIND_VALUE,FILIAL_ID,PARUS_NOMEN_TAG,PARUS_DOGOVOR,PARUS_AGENT_TAG,
		     PROD_NAME,
		     ZAYV_ALL_PROD,ZAYV_ACCEPT_PROD,ZAYV_FACT_PROD,
		     ZAYV_ALL_DOG,ZAYV_ACCEPT_DOG,ZAYV_FACT_DOG,
		     ZAYV_ALL_PLAT,ZAYV_ACCEPT_PLAT,ZAYV_FACT_PLAT)
          SELECT
	        pIS_AGENT,2,vZAKAZ_PARUS.FILIAL_ID,vZAKAZ_PARUS.PARUS_NOMEN_TAG,vZAKAZ_PARUS.PARUS_DOGOVOR,vZAKAZ_PARUS.PARUS_AGENT_TAG,
            mon.PARUS_NOMEN_NAME AS PROD_NAME,
            SUM(VES) AS ZAYV_ALL_PROD,
            SUM(DECODE(IS_ACCEPT+IS_WORK,2,VES,0)) AS zayv_accept_prod,
            SUM(FACT_VES) AS ZAYV_FACT_PROD,
            SUM(DECODE(PARUS_DOGOVOR,vZAKAZ_PARUS.PARUS_DOGOVOR,VES,0)) AS zayv_all_dog,
            SUM(DECODE(PARUS_DOGOVOR,vZAKAZ_PARUS.PARUS_DOGOVOR,DECODE(IS_ACCEPT+IS_WORK,2,VES,0),0)) AS zayv_accept_dog,
            SUM(DECODE(PARUS_DOGOVOR,vZAKAZ_PARUS.PARUS_DOGOVOR,FACT_VES,0)) AS zayv_fact_dog,
            SUM(DECODE(PARUS_AGENT_TAG,vZAKAZ_PARUS.PARUS_AGENT_TAG,VES,0)) AS zayv_all_plat,
            SUM(DECODE(PARUS_AGENT_TAG,vZAKAZ_PARUS.PARUS_AGENT_TAG,DECODE(IS_ACCEPT+IS_WORK,2,VES,0),0)) AS zayv_accept_plat,
            SUM(DECODE(PARUS_AGENT_TAG,vZAKAZ_PARUS.PARUS_AGENT_TAG,FACT_VES,0)) AS zayv_fact_plat
          FROM ZAKAZ_PARUS mon
          WHERE mon.Date_plan BETWEEN TRUNC(pBEGIN_DATE,'MONTH') AND TRUNC(pEND_DATE,'MONTH')
            AND mon.filial_id=vZAKAZ_PARUS.FILIAL_ID
            AND mon.PARUS_NOMEN_TAG=vZAKAZ_PARUS.PARUS_NOMEN_TAG
          GROUP BY
            mon.PARUS_NOMEN_NAME;
	    END IF;

	    /* ЗАДОЛЖЕННОСТЬ */
		IF vZAKAZ_PARUS.PARUS_DOGOVOR||' '<>' ' THEN
	      -- Найти запись
	      SELECT COUNT(*) INTO vCNT FROM V_ZAKAZ_TEMP
	       WHERE IS_AGENT=pIS_AGENT
	         AND KIND_VALUE=3
		     AND PARUS_DOGOVOR=vZAKAZ_PARUS.PARUS_DOGOVOR;

	      IF vCNT=0 THEN
	        -- Добавим запись
         /*   INSERT INTO ZAKAZ_TEMP
	          (IS_AGENT,KIND_VALUE,PARUS_DOGOVOR,SALDO)
            SELECT
	          pIS_AGENT,3,vZAKAZ_PARUS.PARUS_DOGOVOR,
		      NVL(SUM(-NFACT_INGOOD_SUM+NFACT_OUTGOOD_SUM+NPLAN_OUTSERV_SUM+NFACT_OUTPAY_SUM-NFACT_INPAY_SUM),0) AS SALDO
            FROM parus.V_contracts@oracle.world f
            WHERE TRIM (f.sdoc_pref) || TRIM (f.sdoc_numb)=vZAKAZ_PARUS.PARUS_DOGOVOR;*/
			NULL;
	      END IF;
	  	END IF;
	  END LOOP;
    END IF;

    COMMIT;
  END;

  -- Добавить номер разнарядки к списку
  FUNCTION CHANGE_NOM_ZD(pNOM_ZD_LIST VARCHAR2,pOLD_NOM_ZD VARCHAR2,pNEW_NOM_ZD VARCHAR2) RETURN VARCHAR2 AS
    i NUMBER;
	s VARCHAR2(200);
  BEGIN
    IF pOLD_NOM_ZD||' '<>' ' THEN
      i:=INSTR(pNOM_ZD_LIST,pOLD_NOM_ZD);
	  IF i>0 THEN
	    -- В списке есть старый номер задания - заменим его на новый
		s:=TRIM(REPLACE(pNOM_ZD_LIST,pOLD_NOM_ZD,pNEW_NOM_ZD));
		s:=REPLACE(s,'; ;',';');
		s:=REPLACE(s,';;',';');
		IF s=';' THEN
		  s:='';
		END IF;
		IF SUBSTR(s,1,1)=';' THEN
		  s:=TRIM(SUBSTR(s,2,999));
		END IF;
		RETURN s;
	  END IF;
	END IF;
    IF pNEW_NOM_ZD||' '<>' ' AND LENGTH(pNOM_ZD_LIST||'; '||pNEW_NOM_ZD)<=150 THEN
      -- Добавим новый в конец списка
	  IF pNOM_ZD_LIST||' '<>' ' THEN
	    RETURN pNOM_ZD_LIST||'; '||pNEW_NOM_ZD;
	  ELSE
	    RETURN pNEW_NOM_ZD;
	  END IF;
	END IF;
    RETURN '';
  END;

  -- Присвоить/снять NOM_ZD позиции "К отгрузке"
  PROCEDURE SetNOM_ZD(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pZAKAZ_HIST_ID NUMBER, pOLD_ZD VARCHAR2, pNEW_ZD VARCHAR2, pLOAD_VES NUMBER, pLOAD_KOL NUMBER, pFACT_VES NUMBER, pFACT_KOL NUMBER) AS
  BEGIN
    IF NVL(pZAKAZ_HIST_ID,0)<>0 THEN
	  -- Есть ссылка на конкретную позицию заказа
	  FOR lcur IN (SELECT ID,LINK_HIST_ID,IS_AUTO_MONTH FROM ZAKAZ_HIST
	                WHERE ID=pZAKAZ_HIST_ID AND STATUS_ZAKAZ_ID=20)
	  LOOP
	    -- Обновляем позиции
	    IF lcur.IS_AUTO_MONTH=1 THEN
	      UPDATE ZAKAZ_HIST SET NOM_ZD=pNEW_ZD,LOAD_VES=pLOAD_VES,LOAD_KOL=pLOAD_KOL,FACT_VES=pFACT_VES,FACT_KOL=pFACT_KOL
	       WHERE ID IN (lcur.ID,lcur.LINK_HIST_ID);
		ELSE
   	      UPDATE ZAKAZ_HIST SET NOM_ZD=pNEW_ZD,FACT_VES=pFACT_VES,FACT_KOL=pFACT_KOL
	       WHERE ID IN (lcur.ID,lcur.LINK_HIST_ID);
	    END IF;
	    -- Удаляем автоматические позиции
        IF pNEW_ZD||' '=' ' AND lcur.IS_AUTO_MONTH=1 THEN
 	  	  BEGIN
		    DelZakazHist(0,lcur.ID);
		  EXCEPTION
		    WHEN OTHERS THEN
			  NULL;
		  END;
		END IF;
	  END LOOP;
	ELSE
      IF pOLD_ZD||' '<>' ' THEN
	    -- Убрать ссылку на со старой разнарядки
	    FOR lcur IN (SELECT ID,LINK_HIST_ID,IS_AUTO_MONTH FROM ZAKAZ_HIST WHERE ZAKAZ_ID=pZAKAZ_ID AND NOM_ZD=pOLD_ZD AND STATUS_ZAKAZ_ID=20)
	    LOOP
  	      -- Обновляем позиции
	      IF lcur.IS_AUTO_MONTH=1 THEN
  	        UPDATE ZAKAZ_HIST SET NOM_ZD=pNEW_ZD,LOAD_VES=pLOAD_VES,LOAD_KOL=pLOAD_KOL,FACT_VES=pFACT_VES,FACT_KOL=pFACT_KOL
	          WHERE ID IN (lcur.ID,lcur.LINK_HIST_ID);
		  ELSE
   	        UPDATE ZAKAZ_HIST SET NOM_ZD=pNEW_ZD,FACT_VES=pFACT_VES,FACT_KOL=pFACT_KOL
	          WHERE ID IN (lcur.ID,lcur.LINK_HIST_ID);
	      END IF;
		  -- Удаляем автоматические позиции
          IF pNEW_ZD||' '=' ' AND lcur.IS_AUTO_MONTH=1 THEN
 	  	    BEGIN
		      DelZakazHist(0,lcur.ID);
		    EXCEPTION
		      WHEN OTHERS THEN
			    NULL;
		    END;
		  END IF;
	  	END LOOP;
      END IF;
	END IF;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  -- Обновить факт исполнения разнарядки ФИНАНСЫ
  PROCEDURE FillFact (pCOMMIT NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pNOM_ZD VARCHAR2 DEFAULT NULL) AS
  BEGIN
    -- Обновить факт отгрузки
	UPDATE /*+ ORDERED INDEX(month) */ MONTH SET (TONN_LOADED,CIST_LOADED)=
	  (SELECT NVL(SUM(KVIT.ves_brutto),0),NVL(COUNT(*),0) FROM KVIT
	    WHERE KVIT.nom_zd=MONTH.nom_zd)
	WHERE DATE_PLAN BETWEEN pBEGIN_DATE AND pEND_DATE
	  AND (NOM_ZD=pNOM_ZD OR pNOM_ZD IS NULL);
     -- and (NOM_ZD='1212-36611' or NOM_ZD='1201-46582');
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  -- Обновить факт исполнения разнарядки ФИНАНСЫ для реестра контроля СНП
  PROCEDURE FillFactThisMonth  AS
  BEGIN
    -- Обновить факт отгрузки
	UPDATE /*+ ORDERED INDEX(month) */ MONTH SET (TONN_LOADED,CIST_LOADED)=
	  (SELECT NVL(SUM(KVIT.ves_brutto),0),NVL(COUNT(*),0) FROM KVIT
	    WHERE KVIT.nom_zd=MONTH.nom_zd)
	WHERE DATE_PLAN=TRUNC(SYSDATE,'Month');
    COMMIT;
  END;

  PROCEDURE SetZakazLink(pID NUMBER,pLINK_ID NUMBER,pLINK_HIST_ID NUMBER) AS
  BEGIN
    UPDATE ZAKAZ SET LINK_ID=pLINK_ID, LINK_HIST_ID=pLINK_HIST_ID WHERE ID=pID;
  END;

  PROCEDURE SetZakazHistLink(pID NUMBER,pLINK_ID NUMBER,pLINK_HIST_ID NUMBER) AS
  BEGIN
    UPDATE ZAKAZ_HIST SET LINK_ID=pLINK_ID, LINK_HIST_ID=pLINK_HIST_ID WHERE ID=pID;
  END;

  /* ДОБАВИТЬ/ИЗМЕНИТЬ ЗАКАЗ */
  FUNCTION AddZakaz(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER, pIS_AGENT NUMBER, pDATE_PLAN DATE, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE,
	pIS_ACCEPT NUMBER, pFILIAL_ID NUMBER, pPLAT_ID NUMBER, pDOG_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pUSL_OPL_ID NUMBER, pLOAD_ABBR VARCHAR2, pSTAN_ID NUMBER,
	pVETKA_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPOTREB_NAME VARCHAR2,
	pNEFTEBASA VARCHAR2, pPAYFORM_ID NUMBER, pPLANSTRU_ID NUMBER, pPRICE_CLIENT NUMBER,
	pPRICE NUMBER, pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER,
	pPRIM VARCHAR2, pGR4 VARCHAR2, pZAKAZ_PREV_ID NUMBER,pGOSPROG_ID NUMBER,pGP_NAPR_ID NUMBER,
	pLUKDOG_ID NUMBER, pLINK_ID NUMBER, pLINK_HIST_ID NUMBER, pPERIOD_ID NUMBER DEFAULT 1, pTIP_CORP_ID NUMBER DEFAULT 1, pISU_ADD NUMBER DEFAULT 0) RETURN NUMBER AS

	vID NUMBER;
	vHIST_ID NUMBER;
	vOWNER_ZAKAZ NUMBER;
	vOldOWNER_ZAKAZ NUMBER;
	vLINK_ID NUMBER;
	vLINK_HIST_ID NUMBER;
	vLINK_IS_AUTO NUMBER;
	vLINK_HIST_IS_AUTO NUMBER;
	vNUM_1 VARCHAR2(100);
	vNUM_2 VARCHAR2(100);

	vOldDOG_ID NUMBER;
	vOldLUKDOG_ID NUMBER;
	vOldIS_ACCEPT NUMBER;
	vOldCLIENT_NUMBER VARCHAR2(100);
	vOldCLIENT_DATE DATE;
	vOldINPUT_NUMBER VARCHAR2(100);
	vOldINPUT_DATE DATE;

	vNewDOG_ID NUMBER;
	vNewLUKDOG_ID NUMBER;
	vNewIS_ACCEPT NUMBER;
	vNewCLIENT_NUMBER VARCHAR2(100);
	vNewCLIENT_DATE DATE;
	vNewINPUT_NUMBER VARCHAR2(100);
	vNewINPUT_DATE DATE;

	vVES NUMBER;
	vKOL NUMBER;
	vSPEED_VES NUMBER;
	vSPEED_KOL NUMBER;
	vADD NUMBER;
	i NUMBER;
  BEGIN
	vLINK_ID:=pLINK_ID;
	IF NVL(vLINK_ID,0)<=0 THEN
	  vLINK_ID:=NULL;
	END IF;
	vLINK_HIST_ID:=pLINK_HIST_ID;
	IF NVL(vLINK_HIST_ID,0)<=0 THEN
	  vLINK_HIST_ID:=NULL;
	END IF;

    -- ID
	IF NVL(pID,0)<=0 THEN
	  vADD:=1;
      SELECT SEQ_MONTH_ALL.NEXTVAL INTO vID FROM DUAL;
	  IF pIS_AUTO=0 THEN
	    vLINK_ID:=NULL;
	    vLINK_HIST_ID:=NULL;
	  END IF;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;
    
    IF pISU_ADD=1 THEN
      vADD:=pISU_ADD;
    END IF;  

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ DOG_ID,LUKDOG_ID,IS_ACCEPT,CLIENT_NUMBER,CLIENT_DATE,INPUT_NUMBER,INPUT_DATE
        INTO vOldDOG_ID,vOldLUKDOG_ID,vOldIS_ACCEPT,vOldCLIENT_NUMBER,vOldCLIENT_DATE,vOldINPUT_NUMBER,vOldINPUT_DATE
	 	FROM ZAKAZ
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Заказ нельзя отредактировать - он удален!');
		END IF;
  	    vOldDOG_ID:=pDOG_ID;
        vOldLUKDOG_ID:=pLUKDOG_ID;
		vOldIS_ACCEPT:=pIS_ACCEPT;
		vOldCLIENT_NUMBER:=pCLIENT_NUMBER;
		vOldCLIENT_DATE:=pCLIENT_DATE;
		vOldINPUT_NUMBER:=pINPUT_NUMBER;
		vOldINPUT_DATE:=pINPUT_DATE;
	END;

	IF pDOG_ID=-1 THEN
	  -- Необходимо сохранить договор
  	  vNewDOG_ID:=vOldDOG_ID;
	ELSE
  	  vNewDOG_ID:=pDOG_ID;
	END IF;
	IF NVL(vNewDOG_ID,0)<=0 THEN
	  vNewDOG_ID:=NULL;
	END IF;
	IF NVL(vOldDOG_ID,0)<=0 THEN
	  vOldDOG_ID:=NULL;
	END IF;

	IF pLUKDOG_ID=-1 THEN
	  -- Необходимо сохранить договор
  	  vNewLUKDOG_ID:=vOldLUKDOG_ID;
	ELSE
  	  vNewLUKDOG_ID:=pLUKDOG_ID;
	END IF;
	IF NVL(vNewLUKDOG_ID,0)<=0 THEN
	  vNewLUKDOG_ID:=NULL;
	END IF;
	IF NVL(vOldLUKDOG_ID,0)<=0 THEN
	  vOldLUKDOG_ID:=NULL;
	END IF;

	IF pCLIENT_NUMBER='-1' THEN
	  -- Необходимо сохранить
	  vNewCLIENT_NUMBER:=vOldCLIENT_NUMBER;
  	  vNewCLIENT_DATE:=vOldCLIENT_DATE;
	ELSE
  	  vNewCLIENT_NUMBER:=pCLIENT_NUMBER;
  	  vNewCLIENT_DATE:=pCLIENT_DATE;
	END IF;

    IF vNewCLIENT_NUMBER||' '=' ' OR vNewCLIENT_NUMBER='-1' THEN
	  vNewCLIENT_NUMBER:='?';
	END IF;
  	vNewCLIENT_DATE:=NVL(vNewCLIENT_DATE,TRUNC(SYSDATE));

	IF pINPUT_NUMBER='-1' THEN
	  -- Необходимо сохранить
	  vNewINPUT_NUMBER:=vOldINPUT_NUMBER;
  	  vNewINPUT_DATE:=vOldINPUT_DATE;
	ELSE
  	  vNewINPUT_NUMBER:=pINPUT_NUMBER;
  	  vNewINPUT_DATE:=pINPUT_DATE;
	END IF;
	IF vNewINPUT_NUMBER||' '=' ' OR vNewINPUT_NUMBER='-1' THEN
	  vNewINPUT_NUMBER:='?';
	END IF;
  	vNewINPUT_DATE:=NVL(vNewINPUT_DATE,TRUNC(SYSDATE));

	IF pIS_ACCEPT=-1 THEN
	  -- Необходимо сохранить
  	  vNewIS_ACCEPT:=vOldIS_ACCEPT;
	ELSE
  	  vNewIS_ACCEPT:=pIS_ACCEPT;
	END IF;
	IF vNewIS_ACCEPT=-1 OR vNewIS_ACCEPT IS NULL THEN
	  vNewIS_ACCEPT:=0;
	END IF;
	IF vOldINPUT_NUMBER='?' AND vNewINPUT_NUMBER<>'?' AND pIS_AGENT=1 THEN
	  vNewIS_ACCEPT:=1;
	END IF;
	IF vOldINPUT_NUMBER<>'?' AND vNewINPUT_NUMBER='?' AND pIS_AGENT=1 THEN
	  vNewIS_ACCEPT:=0;
	END IF;

  	-- По умолчанию
	IF vAdd=1 AND pIS_AGENT=1 AND vNewINPUT_NUMBER<>'?' THEN
	  vNewIS_ACCEPT:=1;
	ELSE
	  vNewIS_ACCEPT:=vNewIS_ACCEPT;
	END IF;

	IF pIS_AGENT=1 THEN
	  -- Если это заказы УНП

      -- Определение старого владельца заказа (1-УНП, 2-СНП)
      vOldOWNER_ZAKAZ:=pIS_AGENT;
  	  IF vOldDOG_ID IS NOT NULL THEN
        BEGIN
          SELECT IS_AGENT INTO vOldOWNER_ZAKAZ
	        FROM KLS_DOG_MAIN
  	       WHERE pDATE_PLAN BETWEEN FROM_DATE AND TO_DATE
		     AND (DOG_ID=vOldDOG_ID OR HRAN_DOG_ID=vOldDOG_ID)
		     AND IS_AGENT=2;
   	    EXCEPTION
	      WHEN OTHERS THEN
		    vOldOWNER_ZAKAZ:=pIS_AGENT;
 	    END;
      END IF;

      -- Определение нового владельца заказа (1-УНП, 2-СНП)
      vOWNER_ZAKAZ:=pIS_AGENT;
  	  IF vNewDOG_ID IS NOT NULL THEN
        BEGIN
	      SELECT IS_AGENT INTO vOWNER_ZAKAZ
		    FROM KLS_DOG_MAIN
		   WHERE pDATE_PLAN BETWEEN FROM_DATE AND TO_DATE
		     AND (DOG_ID=vNewDOG_ID OR HRAN_DOG_ID=vNewDOG_ID)
		     AND IS_AGENT=2;
   	    EXCEPTION
	      WHEN OTHERS THEN
		    vOWNER_ZAKAZ:=pIS_AGENT;
 	    END;
	  END IF;

	  IF vOWNER_ZAKAZ<>vOldOWNER_ZAKAZ THEN
	    -- Изменился владелец договора (СНП <-> УНП)
        RaiseError('Нельзя менять договор - удалите заказ и создайте повторно с новым договором!');
	  END IF;
	END IF;

	-- Обновляем заказ
	UPDATE ZAKAZ SET (CLIENT_NUMBER, CLIENT_DATE,
	    INPUT_NUMBER, INPUT_DATE, BEGIN_DATE, IS_ACCEPT, FILIAL_ID, PLAT_ID,
		DOG_ID, PROD_ID_NPR, USL_OPL_ID, LOAD_ABBR, STAN_ID, VETKA_ID,
		POLUCH_ID, POTREB_ID, POTREB_NAME, NEFTEBASA, PAYFORM_ID, PLANSTRU_ID,
		PRICE_CLIENT, PRICE, VES, KOL, SPEED_VES, SPEED_KOL,
		PRIM, GR4, ZAKAZ_PREV_ID,GOSPROG_ID,GP_NAPR_ID,LUKDOG_ID,LINK_ID,LINK_HIST_ID, PERIOD_ID, TIP_CORP_ID)=
	  (SELECT vNewCLIENT_NUMBER, vNewCLIENT_DATE,
	    vNewINPUT_NUMBER, vNewINPUT_DATE, pBEGIN_DATE, vNewIS_ACCEPT, pFILIAL_ID, pPLAT_ID,
		vNewDOG_ID, pPROD_ID_NPR, pUSL_OPL_ID, pLOAD_ABBR, pSTAN_ID, pVETKA_ID,
		pPOLUCH_ID, pPOTREB_ID, pPOTREB_NAME, pNEFTEBASA, pPAYFORM_ID, pPLANSTRU_ID,
		pPRICE_CLIENT, pPRICE, pVES, pKOL, pSPEED_VES, pSPEED_KOL,
		pPRIM, pGR4, pZAKAZ_PREV_ID,pGOSPROG_ID,pGP_NAPR_ID,vNewLUKDOG_ID,vLINK_ID,vLINK_HIST_ID, pPERIOD_ID, pTIP_CORP_ID FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем заказ
      INSERT INTO ZAKAZ (ID, IS_AGENT, IS_AUTO, DATE_PLAN, CLIENT_NUMBER, CLIENT_DATE,
	    INPUT_NUMBER, INPUT_DATE, BEGIN_DATE, IS_ACCEPT, FILIAL_ID, PLAT_ID,
		DOG_ID, PROD_ID_NPR, USL_OPL_ID, LOAD_ABBR, STAN_ID, VETKA_ID,
		POLUCH_ID, POTREB_ID, POTREB_NAME, NEFTEBASA, PAYFORM_ID, PLANSTRU_ID,
		PRICE_CLIENT, PRICE, VES, KOL, SPEED_VES, SPEED_KOL,
		PRIM, GR4, ZAKAZ_PREV_ID,GOSPROG_ID,GP_NAPR_ID,LUKDOG_ID,LINK_ID,LINK_HIST_ID, PERIOD_ID, TIP_CORP_ID)
	  VALUES (vID, pIS_AGENT, pIS_AUTO, pDATE_PLAN, vNewCLIENT_NUMBER, vNewCLIENT_DATE,
	    vNewINPUT_NUMBER, vNewINPUT_DATE, pBEGIN_DATE, vNewIS_ACCEPT, pFILIAL_ID, pPLAT_ID,
		vNewDOG_ID, pPROD_ID_NPR, pUSL_OPL_ID, pLOAD_ABBR, pSTAN_ID, pVETKA_ID,
		pPOLUCH_ID, pPOTREB_ID, pPOTREB_NAME, pNEFTEBASA, pPAYFORM_ID, pPLANSTRU_ID,
		pPRICE_CLIENT, pPRICE, pVES, pKOL, pSPEED_VES, pSPEED_KOL,
		pPRIM, pGR4, pZAKAZ_PREV_ID,pGOSPROG_ID,pGP_NAPR_ID,vNewLUKDOG_ID,vLINK_ID,vLINK_HIST_ID, pPERIOD_ID, pTIP_CORP_ID);
	END IF;

    IF pIS_AUTO=0 THEN
	  -- Если добавление/обновление заказа - НЕ автоматическое

	  IF pIS_AGENT=2 THEN
        -- Если заказ добавляется/обновляется в Заказах СНП
	    -- Больше ничего не делаем
	    NULL;
	  END IF;

	  IF pIS_AGENT=1 THEN
  	    -- Если заказ добавляется/обновляется в Заказах УНП

        IF vOWNER_ZAKAZ=2 AND pDATE_PLAN>=TO_DATE('01.01.2005','dd.mm.yyyy') THEN
          
  	      vHIST_ID:=NULL;
          IF pDATE_PLAN<TO_DATE('01.04.2008','dd.mm.yyyy') THEN -- до интерфейса с ИСУ
  	        -- Если владелец заказов - СНП, то попробуем восстановить позицию заказа, для обеспечения
            -- корректных ссылок 

  		    -- Ищем позицию "К отгрузке"
		    BEGIN
		      SELECT LINK_HIST_ID INTO vHIST_ID
			    FROM ZAKAZ_HIST
			   WHERE LINK_ID=vID -- позиция СНП ссылается на редактируемый заказ
			     AND ID=vLINK_HIST_ID -- редактируемый заказ ссылается на позицию СНП
			     AND ZAKAZ_ID=vLINK_ID -- редактируемый заказ ссылается на позицию СНП
			     AND STATUS_ZAKAZ_ID=20;
		    EXCEPTION
		      WHEN OTHERS THEN
			    vLINK_HIST_ID:=NULL;
			    vHIST_ID:=NULL;
		    END;

		    IF vHIST_ID IS NOT NULL THEN
		      -- Проверяем
		      BEGIN
		        SELECT ID INTO vHIST_ID
			      FROM ZAKAZ_HIST
			     WHERE ID=vHIST_ID -- искомая позиция
			       AND ZAKAZ_ID=vID -- редактируемый заказ
			       AND STATUS_ZAKAZ_ID=20;
		      EXCEPTION
		        WHEN OTHERS THEN
			      vHIST_ID:=NULL;
		      END;
		    END IF;

		    IF vHIST_ID IS NULL THEN
		      -- Ищем первую позицию
		      FOR lcur IN (SELECT ID FROM ZAKAZ_HIST
			              WHERE ZAKAZ_ID=vID -- позиции редактируемого заказа
                            AND STATUS_ZAKAZ_ID=20
						 ORDER BY ID)
			  LOOP
			    vHIST_ID:=lcur.ID;
			    EXIT;
			  END LOOP;
		    END IF;

		    IF vHIST_ID IS NULL THEN
		      -- Позиций "К отгрузке" нет - добавляем
              vHIST_ID:=ToLoadZakaz(0,vID,pIS_AUTO,NULL,vNewINPUT_DATE,pBEGIN_DATE,pPROD_ID_NPR,
			                      pSTAN_ID,pPOLUCH_ID,pPOTREB_ID,pPRICE,NULL,pVES, pKOL, pSPEED_VES, pSPEED_KOL,0,0,
								  NULL);
			  IF NVL(vHIST_ID,0)<=0 THEN
			    vHIST_ID:=NULL;
			  END IF;
		    END IF;
          END IF;
          
	      -- Проверяем заказ СНП и его позицию
		  IF NOT ZakazExist(vLINK_ID,vLINK_IS_AUTO) THEN
	        -- Проверяем заказ СНП
		     vLINK_ID:=NULL;
	      END IF;

          IF vLINK_ID IS NULL OR
		    NOT ZakazHistExist(vLINK_HIST_ID,vLINK_HIST_IS_AUTO) THEN
	        -- Проверяем позцию заказа СНП
			vLINK_HIST_ID:=NULL;
		  END IF;

		  vNUM_1:=SUBSTR(vNewCLIENT_NUMBER,1,INSTR(vNewCLIENT_NUMBER,'/')-1);
		  vNUM_2:=SUBSTR(vNewCLIENT_NUMBER,INSTR(vNewCLIENT_NUMBER,'/')+1,999);
		  IF vLINK_ID IS NULL THEN
	        -- Если связанного заказа нет - Добавляем
			vLINK_ID:=AddZakaz(0,NULL,1,2,pDATE_PLAN,NULL,NULL,vNUM_1,vNewCLIENT_DATE,
			          pBEGIN_DATE,0,pFILIAL_ID,pPLAT_ID,NULL,pPROD_ID_NPR,pUSL_OPL_ID,pLOAD_ABBR,pSTAN_ID,
	                  pVETKA_ID,pPOLUCH_ID,pPOTREB_ID,pPOTREB_NAME,
	                  pNEFTEBASA,pPAYFORM_ID,pPLANSTRU_ID,NULL,NULL,pVES,pKOL,pSPEED_VES,pSPEED_KOL,
	                  pPRIM,pGR4,NULL,pGOSPROG_ID,pGP_NAPR_ID,vNewDOG_ID,NULL,NULL, pPERIOD_ID, pTIP_CORP_ID);
		  ELSE
		    -- Если связанный заказ есть - проверяем, был ли он добавлен автоматически
			IF vLINK_IS_AUTO=1 THEN
			  -- Если автоматически - обновляем
  			  -- vLINK_ID:=AddZakaz(COMMIT=0, ID=vLINK_ID, IS_AUTO=1,LINK_ID=NULL,LINK_HIST_ID=NULL,DOG_ID=-1,LUKDOG_ID=pDOG_ID);
			  NULL;
			ELSE
			  -- Если вручную - ничего не делаем
			  NULL;
			END IF;
		  END IF;
		  IF NVL(vLINK_ID,0)<=0 THEN
			vLINK_ID:=NULL;
		  END IF;

		  IF vLINK_HIST_ID IS NULL AND vLINK_ID IS NOT NULL THEN
	        -- Если связанной позиции заказа нет - Добавляем
			vLINK_HIST_ID:=AddZakazHist(0,NULL,1,0,vLINK_ID,20,vNUM_1,vNewCLIENT_DATE,
                           vNUM_2, vNewCLIENT_DATE, pPROD_ID_NPR, NULL, pSTAN_ID,
						   pPOLUCH_ID, pPOTREB_ID, pPRICE, 0, 0, pSPEED_VES, pSPEED_KOL,
						   NULL, pVES, pKOL, 0, 0, NULL, pBEGIN_DATE, vID, vHIST_ID);
		  ELSE
		    -- Если связанная позиция заказа есть - проверяем, был ли она добавлена автоматически
			IF vLINK_HIST_IS_AUTO=1 THEN
			  -- Если автоматически - обновляем
  			  -- vLINK_HIST_ID:=AddZakazHist(COMMIT=0, ID=vLINK_HIST_ID, IS_AUTO=1,LINK_ID=vID,LINK_HIST_ID=vHIST_ID);
			  NULL;
			ELSE
			  -- Если вручную - ничего не делаем
			  NULL;
		  	END IF;
		  END IF;
		  IF NVL(vLINK_HIST_ID,0)<=0 THEN
			vLINK_HIST_ID:=NULL;
		  END IF;

		  -- Проставляем связи в редактируемом заказе
		  SetZakazLink(vID,vLINK_ID,vLINK_HIST_ID);
		  SetZakazHistLink(vHIST_ID,vLINK_ID,vLINK_HIST_ID);
	    ELSE
	      -- Если владелец заказов - УНП
		  -- больше ничего не делаем
	  	  NULL;
	    END IF;
	  END IF;
	END IF;

	-- Обновляем номер в позициях "К отгрузке"
	FOR lcur IN (SELECT ID FROM ZAKAZ_HIST WHERE ZAKAZ_ID=vID AND STATUS_ZAKAZ_ID=20)
	LOOP
	  UPDATE ZAKAZ_HIST SET CLIENT_NUMBER=vNewINPUT_NUMBER WHERE ID=lcur.ID;
	  i:=GetMaxNum(vID);
	  UPDATE ZAKAZ_HIST SET INPUT_NUMBER=TO_CHAR(i+1)
	   WHERE ID=lcur.ID AND CLIENT_NUMBER<>'?' AND INPUT_NUMBER='?';
	END LOOP;

	-- Обновляем позицию "Первоначальная"
	vHIST_ID:=NULL;
	vVES:=pVES;
	vKOL:=pKOL;
	vSPEED_VES:=pSPEED_VES;
	vSPEED_KOL:=pSPEED_KOL;
	FOR lcur IN (SELECT ID,VES,KOL,SPEED_VES,SPEED_KOL FROM ZAKAZ_HIST WHERE ZAKAZ_ID=vID AND STATUS_ZAKAZ_ID=10)
	LOOP
	  vHIST_ID:=lcur.ID;
	  vVES:=lcur.VES;
	  vKOL:=lcur.KOL;
	  vSPEED_VES:=lcur.SPEED_VES;
	  vSPEED_KOL:=lcur.SPEED_KOL;
	END LOOP;
    vHIST_ID:=For_Zakaz.AddZakazHist(0,vHIST_ID,1,1,vID,10,vNewCLIENT_NUMBER,
	      vNewCLIENT_DATE, vNewINPUT_NUMBER, vNewINPUT_DATE, pPROD_ID_NPR,
		  NULL, pSTAN_ID, pPOLUCH_ID, pPOTREB_ID,pPRICE, vVES, vKOL,
		  vSPEED_VES, vSPEED_KOL, '',0,0,0,0,NULL,pBEGIN_DATE,NULL,NULL);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* УДАЛИТЬ ЗАКАЗ */
  PROCEDURE DelZakaz(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER DEFAULT 0) AS
    vLINK_ID NUMBER;
	vLINK_HIST_ID NUMBER;
	vIS_AUTO NUMBER;
	vIS_AGENT NUMBER;
	vLINK_IS_AUTO NUMBER;
	vLINK_HIST_IS_AUTO NUMBER;
    vDATE_PLAN DATE;
  BEGIN

	BEGIN
	  SELECT LINK_ID,LINK_HIST_ID,IS_AUTO,IS_AGENT,DATE_PLAN
	    INTO vLINK_ID,vLINK_HIST_ID,vIS_AUTO,vIS_AGENT,vDATE_PLAN
		FROM ZAKAZ
	   WHERE ID=pID;
	EXCEPTION
	  WHEN NO_DATA_FOUND THEN
	    RETURN;
	END;

    -- проверка на наличие позиций IS_AUTO=0
	FOR lcur IN (SELECT NULL FROM ZAKAZ_HIST WHERE ZAKAZ_ID=pID
	                AND IS_AUTO=0)
	LOOP
      -- Есть такие позиции
	  IF vIS_AGENT=1 THEN
	    RaiseError('Удалите позиции из истории заказа в заказах ЛУКОЙЛ-УНП!');
	  ELSE
	    RaiseError('Удалите позиции из истории заказа!');
	  END IF;
	END LOOP;

    -- проверка на наличие позиций NOM_ZD is not NULL
	FOR lcur IN (SELECT NULL FROM ZAKAZ_HIST WHERE ZAKAZ_ID=pID
	                AND NOM_ZD IS NOT NULL)
	LOOP
      -- Есть такие позиции
 	  RaiseError('В истории заказа есть позиция "К отгрузке", привязанная к заданию из Комплекса ФИНАНСЫ - удалите вначале эту позицию!');
	END LOOP;

	IF pIS_AUTO=0 THEN
	  -- Заказ удаляется вручную
	  IF vIS_AGENT=1 AND
	     ZakazExist(vLINK_ID,vLINK_IS_AUTO) AND
	     ZakazHistExist(vLINK_HIST_ID,vLINK_HIST_IS_AUTO) THEN
		-- Заказ СНП в заказах УНП
		IF vIS_AUTO=1 THEN
		  -- Удаляемый заказ создан автоматически
		  RaiseError('Заказ создан ЛУКОЙЛ-СНП и может быть удален только владельцем заказа!');
		ELSE
		  -- Удаляемый заказ создан НЕ автоматически
		  IF vLINK_HIST_IS_AUTO=0 AND vDATE_PLAN<TO_DATE('01.04.2008','dd.mm.yyyy') THEN
		    -- Связанный заказ добавлен НЕ автоматически
		    RaiseError('Оба связанных заказа созданы НЕ автоматически!');
		  END IF;
		END IF;
	  END IF;

  	  -- Удаляем автоматические позиций заказа
      FOR lcur IN (SELECT ID FROM ZAKAZ_HIST WHERE ZAKAZ_ID=pID)
	  LOOP
	    DelZakazHist(0,lcur.ID,pIS_AUTO);
 	  END LOOP;
	END IF;

    DELETE FROM ZAKAZ WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  END;

  -- Проверка наличия заказа
  FUNCTION ZakazExist(pID IN OUT NUMBER, pIS_AUTO IN OUT NUMBER) RETURN BOOLEAN AS
    vRes BOOLEAN;
  BEGIN
	pIS_AUTO:=1;
	vRes:=FALSE;
	IF pID IS NOT NULL THEN
	  -- Проверяем заказ
      BEGIN
        SELECT ID,IS_AUTO INTO pID,pIS_AUTO
 	      FROM ZAKAZ WHERE ID=pID;
		vRes:=TRUE;
	  EXCEPTION
		WHEN OTHERS THEN
		  pID:=NULL;
		  pIS_AUTO:=NULL;
		  vRes:=FALSE;
      END;
    END IF;
    RETURN vRes;
  END;

  -- Проверка наличия позиции заказа
  FUNCTION ZakazHistExist(pID IN OUT NUMBER, pIS_AUTO IN OUT NUMBER) RETURN BOOLEAN AS
    vRes BOOLEAN;
  BEGIN
	pIS_AUTO:=1;
	vRes:=FALSE;
	IF pID IS NOT NULL THEN
	  -- Проверяем заказ
      BEGIN
        SELECT ID,IS_AUTO INTO pID,pIS_AUTO
 	      FROM ZAKAZ_HIST WHERE ID=pID;
		vRes:=TRUE;
	  EXCEPTION
		WHEN OTHERS THEN
		  pID:=NULL;
		  pIS_AUTO:=NULL;
		  vRes:=FALSE;
      END;
    END IF;
    RETURN vRes;
  END;

  /* ИНИЦИИРОВАТЬ ОБНОВЛЕНИЕ ЗАКАЗА */
  PROCEDURE RefreshZakazHist(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER DEFAULT 0) AS
    v_zakaz_hist ZAKAZ_HIST%ROWTYPE;
	vID NUMBER;
  BEGIN
    
    -- Считываем заказ
	SELECT * INTO v_zakaz_hist
	  FROM ZAKAZ_HIST
	 WHERE ID=pID;
	 
    vID:=AddZakazHist(pCOMMIT, pID, pIS_AUTO, v_zakaz_hist.SORTBY, v_zakaz_hist.ZAKAZ_ID, 
	   v_zakaz_hist.STATUS_ZAKAZ_ID, v_zakaz_hist.CLIENT_NUMBER,
       v_zakaz_hist.CLIENT_DATE, v_zakaz_hist.INPUT_NUMBER, v_zakaz_hist.INPUT_DATE, 
	   v_zakaz_hist.PROD_ID_NPR, v_zakaz_hist.OLD_STAN_ID, v_zakaz_hist.STAN_ID, 
	   v_zakaz_hist.POLUCH_ID, v_zakaz_hist.POTREB_ID, v_zakaz_hist.PRICE, 
	   v_zakaz_hist.VES, v_zakaz_hist.KOL, v_zakaz_hist.SPEED_VES, v_zakaz_hist.SPEED_KOL,
	   v_zakaz_hist.NOM_ZD,	v_zakaz_hist.LOAD_VES, v_zakaz_hist.LOAD_KOL, 
	   v_zakaz_hist.FACT_VES, v_zakaz_hist.FACT_KOL, v_zakaz_hist.GU12_A_ID, 
	   v_zakaz_hist.BEGIN_DATE, v_zakaz_hist.LINK_ID, v_zakaz_hist.LINK_HIST_ID);
	   
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  RETURN;
  END;	
  
  
  /* ДОБАВИТЬ/ИЗМЕНИТЬ ПОЗИЦИЮ ЗАКАЗА */
  FUNCTION AddZakazHist(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER, pSORTBY NUMBER, pZAKAZ_ID NUMBER, pSTATUS_ZAKAZ_ID NUMBER, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pPROD_ID_NPR VARCHAR2,
	pOLD_STAN_ID NUMBER, pSTAN_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPRICE NUMBER, pVES NUMBER,
	pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER, pNOM_ZD VARCHAR2,
	pLOAD_VES NUMBER, pLOAD_KOL NUMBER, pFACT_VES NUMBER, pFACT_KOL NUMBER,
	pGU12_A_ID NUMBER,  pBEGIN_DATE DATE,pLINK_ID NUMBER, pLINK_HIST_ID NUMBER, pKOD_ISU VARCHAR2 DEFAULT '*', pISU_ADD NUMBER DEFAULT 0) RETURN NUMBER AS

	vID NUMBER;
	vSORTBY NUMBER;
	vLINK_ID NUMBER;
	vLINK_HIST_ID NUMBER;
    v_zakaz ZAKAZ%ROWTYPE;
	vLINK_IS_AUTO NUMBER;
	vLINK_HIST_IS_AUTO NUMBER;
	vOWNER_ZAKAZ NUMBER;
	vCLIENT_NUMBER VARCHAR2(100);
	vCLIENT_DATE DATE;
	vINPUT_NUMBER VARCHAR2(100);
	vINPUT_DATE DATE;
	vAdd NUMBER;
	vAGENT_ID NUMBER;
	DOG_IS_AGENT NUMBER;
	vIsReg BOOLEAN;
	vNOM_ZD MONTH.NOM_ZD%TYPE;
  BEGIN
	vLINK_ID:=pLINK_ID;
	IF NVL(vLINK_ID,0)<=0 THEN
	  vLINK_ID:=NULL;
	END IF;
	vLINK_HIST_ID:=pLINK_HIST_ID;
	IF NVL(vLINK_HIST_ID,0)<=0 THEN
	  vLINK_HIST_ID:=NULL;
	END IF;

    -- ID
	IF NVL(pID,0)<=0 THEN
      SELECT SEQ_MONTH_ALL.NEXTVAL INTO vID FROM DUAL;
	  vADD:=1;
	  IF pIS_AUTO=0 THEN
	    vLINK_ID:=NULL;
	    vLINK_HIST_ID:=NULL;
	  END IF;
	ELSE
	  vID:=pID;
	  vADD:=0;
	END IF;

    IF pISU_ADD=1 THEN
      vADD:=pISU_ADD;
    END IF;  

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ ID
        INTO v_zakaz.ID
	 	FROM ZAKAZ
	   WHERE ID=pZAKAZ_ID;
	EXCEPTION
	  WHEN OTHERS THEN
        RaiseError('Заказ удален!');
	END;
	BEGIN
	  SELECT /*+ RULE */ ID
        INTO vID
	 	FROM ZAKAZ_HIST
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Позицию заказа нельзя отредактировать - она удалена!');
		END IF;
	END;

	-- Определяем SORTBY
	IF NVL(pSORTBY,0)<=0 THEN
	  BEGIN
	    SELECT NVL(MAX(SORTBY),0) INTO vSORTBY FROM ZAKAZ_HIST WHERE ZAKAZ_ID=pZAKAZ_ID;
	  EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	      vSORTBY:=0;
	  END;
	  vSORTBY:=vSORTBY+1;
	ELSE
	  vSORTBY:=pSORTBY;
	END IF;

    -- Считываем заказ
	SELECT * INTO v_zakaz
	  FROM ZAKAZ
	 WHERE ID=pZAKAZ_ID;

	vINPUT_NUMBER:=pINPUT_NUMBER;
	IF pINPUT_NUMBER||' '=' ' THEN
	  IF pSTATUS_ZAKAZ_ID=20 THEN
	    vINPUT_NUMBER:=TO_CHAR(For_Zakaz.GetMaxNum(pZAKAZ_ID)+1);
	  ELSE
	    vINPUT_NUMBER:='?';
	  END IF;
	END IF;
  	vINPUT_DATE:=NVL(pINPUT_DATE,TRUNC(SYSDATE));
	
	vNOM_ZD:=pNOM_ZD;

	-- Проставляем ссылку на заказ УНП в разнарядке на отгрузку
	IF v_zakaz.IS_AGENT=1 AND pSTATUS_ZAKAZ_ID=20 AND vNOM_ZD||' '<>' ' THEN
	  BEGIN
	    UPDATE MONTH SET ZAKAZ_HIST_ID=vID WHERE NOM_ZD=vNOM_ZD;
	  EXCEPTION
	    WHEN OTHERS THEN
		  NULL;
	  END;
	END IF;

	-- Данные договора 
    BEGIN
	  SELECT IS_AGENT,AGENT_ID INTO DOG_IS_AGENT,vAGENT_ID
		  FROM KLS_DOG
		 WHERE ID=v_zakaz.LUKDOG_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vAGENT_ID:=NULL;
		DOG_IS_AGENT:=NULL;
	END;
		
	-- Обновляем позицию
	UPDATE ZAKAZ_HIST SET (SORTBY, CLIENT_NUMBER,
	      CLIENT_DATE, INPUT_NUMBER, INPUT_DATE, PROD_ID_NPR, OLD_STAN_ID, STAN_ID,
		  POLUCH_ID, POTREB_ID, PRICE, VES, KOL,SPEED_VES,SPEED_KOL,
		  NOM_ZD, LOAD_VES, LOAD_KOL, GU12_A_ID, BEGIN_DATE,
		  LINK_ID,LINK_HIST_ID)=
	    (SELECT vSORTBY, pCLIENT_NUMBER,
	      pCLIENT_DATE, vINPUT_NUMBER, vINPUT_DATE, pPROD_ID_NPR, DECODE(pOLD_STAN_ID,0,NULL,pOLD_STAN_ID), pSTAN_ID,
		  pPOLUCH_ID, pPOTREB_ID, pPRICE, pVES, pKOL,pSPEED_VES,pSPEED_KOL,
		  vNOM_ZD, pLOAD_VES, pLOAD_KOL, DECODE(pGU12_A_ID,0,NULL,pGU12_A_ID), pBEGIN_DATE,
		  vLINK_ID,vLINK_HIST_ID FROM dual)
	 WHERE ID=vID;
   
	IF v_zakaz.IS_AGENT=2 and pSTATUS_ZAKAZ_ID=20 AND DOG_IS_AGENT=8 AND vAGENT_ID<>8 AND vAGENT_ID<>4175 THEN
	  -- Заказы по поставкам с других НПЗ  
	  vNOM_ZD:=pCLIENT_NUMBER;
  	  UPDATE ZAKAZ_HIST SET (NOM_ZD, FACT_VES, FACT_KOL)=
	    (SELECT vNOM_ZD,NVL(pFACT_VES,0), NVL(pFACT_KOL,0) FROM dual)
  	   WHERE ID=vID;
	END IF;   
	 
	IF SQL%NOTFOUND THEN
  	  -- Добавляем позицию
      INSERT INTO ZAKAZ_HIST (ID, ZAKAZ_ID, SORTBY, STATUS_ZAKAZ_ID, CLIENT_NUMBER,
	      CLIENT_DATE, INPUT_NUMBER, INPUT_DATE, PROD_ID_NPR, OLD_STAN_ID, STAN_ID,
		  POLUCH_ID, POTREB_ID, PRICE, VES, KOL,SPEED_VES,SPEED_KOL,
		  NOM_ZD, LOAD_VES, LOAD_KOL, FACT_VES, FACT_KOL, GU12_A_ID,IS_AUTO, BEGIN_DATE,
		  LINK_ID,LINK_HIST_ID)
	  VALUES (vID,pZAKAZ_ID, vSORTBY, pSTATUS_ZAKAZ_ID, pCLIENT_NUMBER,
	      pCLIENT_DATE, vINPUT_NUMBER, vINPUT_DATE, pPROD_ID_NPR, pOLD_STAN_ID, pSTAN_ID,
		  pPOLUCH_ID, pPOTREB_ID, pPRICE, pVES, pKOL,pSPEED_VES,pSPEED_KOL,
		  vNOM_ZD, pLOAD_VES, pLOAD_KOL, pFACT_VES, pFACT_KOL, pGU12_A_ID, pIS_AUTO, pBEGIN_DATE,
		  vLINK_ID,vLINK_HIST_ID);
	END IF;

    IF pKOD_ISU<>'*' THEN
      UPDATE ZAKAZ_HIST SET KOD_ISU=pKOD_ISU WHERE ID=vID;
    END IF;    
    
    IF pIS_AUTO=0 AND pSTATUS_ZAKAZ_ID=20 THEN
	  -- Если добавление/обновление позиции "К отгрузке" - НЕ автоматическое

	  IF v_zakaz.IS_AGENT=2 AND v_zakaz.DATE_PLAN>=TO_DATE('01.01.2005','dd.mm.yyyy') AND v_zakaz.DATE_PLAN<TO_DATE('01.04.2008','dd.mm.yyyy') AND (vAGENT_ID=8 or vAGENT_ID=4175) THEN
        -- Если позиция добавляется/обновляется в Заказах СНП
        -- Проверяем заказ УНП и его позицию
		IF NOT ZakazExist(vLINK_ID,vLINK_IS_AUTO) THEN
	      -- Проверяем заказ УНП
		  vLINK_ID:=NULL;
		ELSE
		  IF vLINK_IS_AUTO=0 THEN
            RaiseError('Оба связанных заказа созданы НЕ автоматически!');
		  END IF;
	    END IF;

        IF vLINK_ID IS NULL THEN
		  IF NOT ZakazHistExist(vLINK_HIST_ID,vLINK_HIST_IS_AUTO) THEN
	        -- Проверяем позцию заказа СНП
		    vLINK_HIST_ID:=NULL;
		  ELSE
		    IF vLINK_HIST_IS_AUTO=0 THEN
              RaiseError('Оба связанных заказа созданы НЕ автоматически!');
		    END IF;
		  END IF;
		END IF;

     	vIsReg:=FALSE;
		IF vLINK_ID IS NULL THEN
		  vLINK_ID:=AddZakaz(0,vLINK_ID,1,1,v_zakaz.DATE_PLAN,pCLIENT_NUMBER||'/'||vINPUT_NUMBER,vINPUT_DATE,'?',NULL,
			          pBEGIN_DATE,-1,v_zakaz.FILIAL_ID,NULL,v_zakaz.LUKDOG_ID,pPROD_ID_NPR,v_zakaz.USL_OPL_ID,v_zakaz.LOAD_ABBR,v_zakaz.STAN_ID,
	                  v_zakaz.VETKA_ID,v_zakaz.POLUCH_ID,v_zakaz.POTREB_ID,v_zakaz.POTREB_NAME,
	                  v_zakaz.NEFTEBASA,v_zakaz.PAYFORM_ID,v_zakaz.PLANSTRU_ID,v_zakaz.PRICE,NULL,pLOAD_VES,pLOAD_KOL,pSPEED_VES,pSPEED_KOL,
	                  v_zakaz.PRIM,v_zakaz.GR4,NULL,v_zakaz.GOSPROG_ID,v_zakaz.GP_NAPR_ID,NULL,pZAKAZ_ID,vID);
		ELSE
		  UPDATE ZAKAZ
		   SET (CLIENT_NUMBER,CLIENT_DATE,VES,KOL,SPEED_VES,SPEED_KOL,PROD_ID_NPR,
		        LOAD_ABBR,STAN_ID,VETKA_ID,POLUCH_ID,POTREB_ID,PRIM,GR4)=
			   (SELECT pCLIENT_NUMBER||'/'||vINPUT_NUMBER,vINPUT_DATE,pLOAD_VES,pLOAD_KOL,pSPEED_VES,pSPEED_KOL,pPROD_ID_NPR,
			    v_zakaz.LOAD_ABBR,v_zakaz.STAN_ID,v_zakaz.VETKA_ID,v_zakaz.POLUCH_ID,v_zakaz.POTREB_ID,v_zakaz.PRIM,v_zakaz.GR4 FROM dual)
		  WHERE ID=vLINK_ID AND (INPUT_NUMBER IS NULL OR INPUT_NUMBER='?');
       	  vIsReg:=SQL%NOTFOUND;
		END IF;
		IF NVL(vLINK_ID,0)<=0 THEN
		  vLINK_ID:=NULL;
		ELSE
		  IF vLINK_HIST_ID IS NULL THEN
		    vLINK_HIST_ID:=AddZakazHist(0, vLINK_HIST_ID,1,0, vLINK_ID,20,'?',NULL,'?',NULL,
                 pPROD_ID_NPR,NULL,v_zakaz.STAN_ID,v_zakaz.POLUCH_ID,v_zakaz.POTREB_ID,
				 NULL, 0,0,pSPEED_VES,pSPEED_KOL, vNOM_ZD,
	            pLOAD_VES, pLOAD_KOL, pFACT_VES, pFACT_KOL,pGU12_A_ID,pBEGIN_DATE,pZAKAZ_ID,vID);
		  ELSE
		    IF NOT vIsReg THEN
		      -- Если заказ еще не зарегистрирован
		      UPDATE ZAKAZ_HIST
		        SET (LOAD_VES,LOAD_KOL,SPEED_VES,SPEED_KOL,PROD_ID_NPR,
		          STAN_ID,POLUCH_ID,POTREB_ID)=
			     (SELECT pLOAD_VES,pLOAD_KOL,pSPEED_VES,pSPEED_KOL,pPROD_ID_NPR,
			      v_zakaz.STAN_ID,v_zakaz.POLUCH_ID,v_zakaz.POTREB_ID FROM dual)
		      WHERE ID=vLINK_HIST_ID;
		      IF pGU12_A_ID IS NOT NULL THEN
		        UPDATE ZAKAZ_HIST SET GU12_A_ID=pGU12_A_ID WHERE ID=vLINK_HIST_ID;
		      END IF;
			END IF;
		  END IF;	  
		END IF;
	    IF NVL(vLINK_HIST_ID,0)<=0 THEN
		  vLINK_HIST_ID:=NULL;
		END IF;

		-- Проставляем связи в редактируемой позиции заказа
		SetZakazHistLink(vID,vLINK_ID,vLINK_HIST_ID);
	  END IF;

	  IF v_zakaz.IS_AGENT=1 AND v_zakaz.DATE_PLAN>=TO_DATE('01.01.2005','dd.mm.yyyy') THEN
  	    -- Если позиция добавляется/обновляется в Заказах УНП

        -- Определение владельца заказа (1-УНП, 2-СНП)
        vOWNER_ZAKAZ:=v_zakaz.IS_AGENT;
    	IF v_zakaz.DOG_ID IS NOT NULL THEN
          BEGIN
	        SELECT IS_AGENT INTO vOWNER_ZAKAZ
		      FROM KLS_DOG_MAIN
		     WHERE v_zakaz.DATE_PLAN BETWEEN FROM_DATE AND TO_DATE
		       AND (DOG_ID=v_zakaz.DOG_ID OR HRAN_DOG_ID=v_zakaz.DOG_ID)
		       AND IS_AGENT=2;
   	      EXCEPTION
	        WHEN OTHERS THEN
		      vOWNER_ZAKAZ:=v_zakaz.IS_AGENT;
 	      END;
	    END IF;

	    IF vOWNER_ZAKAZ=2 THEN
		  -- Владелец - СНП

          -- Проверяем заказ СНП и его позицию
		  IF NOT ZakazExist(vLINK_ID,vLINK_IS_AUTO) THEN
	        -- Проверяем заказ СНП
		     vLINK_ID:=NULL;
	      END IF;

          IF vLINK_ID IS NULL OR
		    NOT ZakazHistExist(vLINK_HIST_ID,vLINK_HIST_IS_AUTO) THEN
	        -- Проверяем позцию заказа СНП
		    vLINK_HIST_ID:=NULL;
		  END IF;

		  IF vLINK_ID IS NULL THEN
	        -- Если связанный заказ не указан - возьмем из шапки заказа
		    vLINK_ID:=v_zakaz.LINK_ID;
		  END IF;
  	      IF NVL(vLINK_ID,0)<=0 THEN
		    vLINK_ID:=NULL;
		  END IF;

		  IF vLINK_ID IS NOT NULL THEN
		    IF vLINK_HIST_ID IS NULL  THEN
	          -- Если связанной позиции заказа нет - Добавляем
			  BEGIN
			    SELECT CLIENT_NUMBER,CLIENT_DATE,INPUT_NUMBER,INPUT_DATE
			      INTO vCLIENT_NUMBER,vCLIENT_DATE,vINPUT_NUMBER,vINPUT_DATE
			      FROM ZAKAZ_HIST
			     WHERE ID=v_zakaz.LINK_HIST_ID;
			  EXCEPTION
			    WHEN OTHERS THEN
			      vCLIENT_NUMBER:=SUBSTR(vCLIENT_NUMBER,1,INSTR(vCLIENT_NUMBER,'/')-1);
				  vCLIENT_DATE:=v_zakaz.CLIENT_DATE;
				  vINPUT_NUMBER:=SUBSTR(vCLIENT_NUMBER,INSTR(vCLIENT_NUMBER,'/')+1,999);
				  vINPUT_DATE:=v_zakaz.CLIENT_DATE;
			  END;
		      vLINK_HIST_ID:=AddZakazHist(0, vLINK_HIST_ID,1,0, vLINK_ID,20,
			     vCLIENT_NUMBER,vCLIENT_DATE,vINPUT_NUMBER,vINPUT_DATE,
                 pPROD_ID_NPR,NULL,v_zakaz.STAN_ID,v_zakaz.POLUCH_ID,v_zakaz.POTREB_ID,
				 NULL, 0,0,0,0, vNOM_ZD,
	            0,0, pFACT_VES,pFACT_KOL,pGU12_A_ID,pBEGIN_DATE,pZAKAZ_ID,vID);
		    ELSE
		      -- Если связанная позиция заказа есть - проверяем, был ли она добавлена автоматически
		      IF vLINK_HIST_IS_AUTO=1 THEN
		        -- Если автоматически - обновляем
				NULL;
		      ELSE
			    -- Если вручную - ничего не делаем
		        NULL;
		      END IF;
			END IF;
		  END IF;
		END IF;
		IF NVL(vLINK_HIST_ID,0)<=0 THEN
		  vLINK_HIST_ID:=NULL;
		END IF;

		-- Проставляем связи в редактируемой позиции заказа
		SetZakazHistLink(vID,vLINK_ID,vLINK_HIST_ID);
	  END IF;
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  RETURN -1;
  END;

  /* УДАЛИТЬ ПОЗИЦИЮ ЗАКАЗА */
  PROCEDURE DelZakazHist(pCOMMIT NUMBER, pID NUMBER, pIS_AUTO NUMBER DEFAULT 0) AS
    vNOM_ZD VARCHAR2(50);
	vLINK_HIST_ID NUMBER;
	vIS_AUTO NUMBER;
	vZAKAZ_ID NUMBER;
	vIS_AGENT NUMBER;
	vLINK_HIST_IS_AUTO NUMBER;
	vLINK_IS_AUTO NUMBER;
	vLINK_ID NUMBER;
	vINPUT_NUMBER VARCHAR2(100);
	vLUKDOG_ID NUMBER;
	DOG_IS_AGENT NUMBER;
	vAGENT_ID NUMBER;
  BEGIN
    -- Считываем позицию заказа
	SELECT NOM_ZD,LINK_ID,LINK_HIST_ID,IS_AUTO,ZAKAZ_ID
	  INTO vNOM_ZD,vLINK_ID,vLINK_HIST_ID,vIS_AUTO,vZAKAZ_ID
	  FROM ZAKAZ_HIST
	 WHERE ID=pID;

    -- Считываем заказ
	SELECT IS_AGENT,LUKDOG_ID INTO vIS_AGENT,vLUKDOG_ID
	  FROM ZAKAZ
	 WHERE ID=vZAKAZ_ID;
	 
	-- Данные договора 
    BEGIN
	  SELECT IS_AGENT,AGENT_ID INTO DOG_IS_AGENT,vAGENT_ID
		  FROM KLS_DOG
		 WHERE ID=vLUKDOG_ID;
	EXCEPTION
	  WHEN OTHERS THEN
	    vAGENT_ID:=NULL;
		DOG_IS_AGENT:=NULL;
	END;

    -- Проверка
	IF pIS_AUTO=0 THEN
	  -- Удаление вручную
	  IF vNOM_ZD IS NOT NULL AND (vAGENT_ID=8 or vAGENT_ID=4175) THEN
        RaiseError('Позиция привязана к заданию из Комплекса ФИНАНСЫ!');
	  END IF;

	  IF vIS_AGENT=1 AND ZakazHistExist(vLINK_HIST_ID,vLINK_HIST_IS_AUTO) THEN
		IF vIS_AUTO=1 THEN
          RaiseError('Заказ создан ЛУКОЙЛ-СНП и может быть удален только владельцем заказа!');
		ELSE
		  IF vLINK_HIST_IS_AUTO=0 THEN
			RaiseError('Оба связанных заказа созданы НЕ автоматически!');
		  ELSE
	        -- Убираем связь
	        SetZakazHistLink(pID,NULL,NULL);
	        -- Удаляем связанную позицию
	        DelZakazHist(0,vLINK_HIST_ID,1);
		  END IF;
		END IF;
	  END IF;

	  IF vIS_AGENT=2 AND
	     ZakazExist(vLINK_ID,vLINK_IS_AUTO) AND
	     ZakazHistExist(vLINK_HIST_ID,vLINK_HIST_IS_AUTO) THEN
	    IF vIS_AUTO=1 THEN
          RaiseError('Заказ создан ЛУКОЙЛ-УНП и может быть удален только владельцем заказа!');
		ELSE
		  IF vLINK_HIST_IS_AUTO=0 THEN
			RaiseError('Оба связанных заказа созданы НЕ автоматически!');
		  ELSE
  	        -- Убираем связь
	        SetZakazHistLink(pID,NULL,NULL);
		    -- Удаляем связанную позицию
	        DelZakazHist(0,vLINK_HIST_ID,1);
		  END IF;
		  IF vLINK_IS_AUTO=0 THEN
			RaiseError('Оба связанных заказа созданы НЕ автоматически!');
		  ELSE
		    SELECT INPUT_NUMBER INTO vINPUT_NUMBER
			  FROM ZAKAZ WHERE ID=vLINK_ID;
			IF vINPUT_NUMBER||' '<>' ' AND vINPUT_NUMBER<>'?' THEN
		  	  RaiseError('Заказ ЛУКОЙЛ-СНП зарегистрирован в ЛУКОЙЛ-УНП! Для удаления - отмените регистрацию!');
			END IF;
  	        -- Убираем связь
	        SetZakazLink(pID,NULL,NULL);
		    -- Удаляем связанный заказ
	        DelZakaz(0,vLINK_ID,1);
		  END IF;
		END IF;
	  END IF;
	END IF;

    DELETE FROM ZAKAZ_HIST WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Отказ */
  FUNCTION CancelZakaz(pCOMMIT NUMBER, pCANCEL_ID NUMBER, pIS_AUTO NUMBER, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE,
	pBEGIN_DATE DATE,
    pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER) RETURN NUMBER AS
  v_zakaz ZAKAZ%ROWTYPE;
  BEGIN
    -- Считываем заказ
	SELECT * INTO v_zakaz
	  FROM ZAKAZ
	 WHERE ID=pCANCEL_ID;
	 -- Добавляем отказ
	 RETURN AddZakazHist(pCOMMIT,NULL,pIS_AUTO,NULL,pCANCEL_ID,50,pCLIENT_NUMBER,pCLIENT_DATE,
	      pINPUT_NUMBER,pINPUT_DATE,v_zakaz.PROD_ID_NPR,NULL,v_zakaz.STAN_ID,
		  v_zakaz.POLUCH_ID,v_zakaz.POTREB_ID,v_zakaz.PRICE,-pVes,-pKol,-pSPEED_VES,-pSPEED_KOL,
		  '',0,0,0,0,NULL,pBEGIN_DATE,NULL,NULL);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  RETURN -1;
  END;

  /* Отказ+Добавить */
  FUNCTION CancelAddZakaz(pCOMMIT NUMBER, pCANCEL_ID NUMBER, pIS_AUTO NUMBER, pIS_AGENT NUMBER, pDATE_PLAN DATE, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE,
	pFILIAL_ID NUMBER, pPLAT_ID NUMBER, pDOG_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pUSL_OPL_ID NUMBER, pLOAD_ABBR VARCHAR2, pSTAN_ID NUMBER,
	pVETKA_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPOTREB_NAME VARCHAR2,
	pNEFTEBASA VARCHAR2, pPAYFORM_ID NUMBER, pPLANSTRU_ID NUMBER, pPRICE_CLIENT NUMBER,
	pPRICE NUMBER, pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER,
	pPRIM VARCHAR2, pGR4 VARCHAR2,pGOSPROG_ID NUMBER,pGP_NAPR_ID NUMBER,pLUKDOG_ID NUMBER) RETURN NUMBER AS
  v_zakaz ZAKAZ%ROWTYPE;
  vID NUMBER;
  BEGIN
	-- Добавляем отказ;
    vID:=CancelZakaz(pCOMMIT, pCANCEL_ID,pIS_AUTO,pCLIENT_NUMBER,pCLIENT_DATE,pINPUT_NUMBER,pINPUT_DATE,
	                 pBEGIN_DATE,pVES,pKOL,pSPEED_VES,pSPEED_KOL);
	-- Формируем новый заказ
	IF vID<>-1 THEN
	  vID:=AddZakaz(pCOMMIT,NULL,pIS_AUTO,pIS_AGENT,pDATE_PLAN,
	     pCLIENT_NUMBER,pCLIENT_DATE,pINPUT_NUMBER,pINPUT_DATE,
		 pBEGIN_DATE,0,pFILIAL_ID,pPLAT_ID,pDOG_ID,
 	     pPROD_ID_NPR,pUSL_OPL_ID,pLOAD_ABBR,pSTAN_ID,
	     pVETKA_ID,pPOLUCH_ID, pPOTREB_ID, pPOTREB_NAME,
	     pNEFTEBASA,pPAYFORM_ID,pPLANSTRU_ID,pPRICE_CLIENT,
	     pPRICE, pVES, pKOL, pSPEED_VES, pSPEED_KOL,
	     pPRIM, pGR4, pCANCEL_ID,pGOSPROG_ID,pGP_NAPR_ID,pLUKDOG_ID,NULL,NULL);
    END IF;
	RETURN vID;
  END;

  /* Переадресация */
  FUNCTION ReAddrZakaz(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pIS_AUTO NUMBER, pSTATUS_ZAKAZ_ID NUMBER, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE, pSTAN_ID NUMBER) RETURN NUMBER AS
  v_zakaz ZAKAZ%ROWTYPE;
  BEGIN
    -- Считываем заказ
	SELECT * INTO v_zakaz
	  FROM ZAKAZ
	 WHERE ID=pZAKAZ_ID;
	 -- Добавляем переадресацию
	 RETURN AddZakazHist(pCOMMIT,NULL,pIS_AUTO,NULL,pZAKAZ_ID,pSTATUS_ZAKAZ_ID,pCLIENT_NUMBER,pCLIENT_DATE,
	      pINPUT_NUMBER,pINPUT_DATE,v_zakaz.PROD_ID_NPR,v_zakaz.STAN_ID,pSTAN_ID,
		  v_zakaz.POLUCH_ID, v_zakaz.POTREB_ID,0,0,0,0,0,
		  '',0,0,0,0,NULL,pBEGIN_DATE,NULL,NULL);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  RETURN -1;
  END;

  /* Переадресация+Добавить */
  FUNCTION ReAddrAddZakaz(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pIS_AUTO NUMBER, pSTATUS_ZAKAZ_ID NUMBER,
    pIS_AGENT NUMBER, pDATE_PLAN DATE, pCLIENT_NUMBER VARCHAR2,
    pCLIENT_DATE DATE, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE,
	pFILIAL_ID NUMBER, pPLAT_ID NUMBER, pDOG_ID NUMBER,
	pPROD_ID_NPR VARCHAR2, pUSL_OPL_ID NUMBER, pLOAD_ABBR VARCHAR2, pSTAN_ID NUMBER,
	pVETKA_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPOTREB_NAME VARCHAR2,
	pNEFTEBASA VARCHAR2, pPAYFORM_ID NUMBER, pPLANSTRU_ID NUMBER, pPRICE_CLIENT NUMBER,
	pPRICE NUMBER, pVES NUMBER, pKOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER,
	pPRIM VARCHAR2, pGR4 VARCHAR2,pGOSPROG_ID NUMBER,pGP_NAPR_ID NUMBER,pLUKDOG_ID NUMBER) RETURN NUMBER AS
  v_zakaz ZAKAZ%ROWTYPE;
  vID NUMBER;
  BEGIN
    BEGIN
      -- Считываем заказ
	  SELECT * INTO v_zakaz
	    FROM ZAKAZ
	   WHERE ID=pZAKAZ_ID;
	   -- Добавляем переадресацию
	   vID:=AddZakazHist(pCOMMIT,NULL,pIS_AUTO,NULL,pZAKAZ_ID,pSTATUS_ZAKAZ_ID,pCLIENT_NUMBER,pCLIENT_DATE,
	      pINPUT_NUMBER,pINPUT_DATE,v_zakaz.PROD_ID_NPR,v_zakaz.STAN_ID,pSTAN_ID,
		  v_zakaz.POLUCH_ID, v_zakaz.POTREB_ID,0,-pVes,-pKol,-pSpeed_ves,-pSpeed_kol,
		  '',0,0,0,0,NULL,pBEGIN_DATE,NULL,NULL);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
	    vID:=-1;
    END;
	-- Формируем новый заказ
	IF vID<>-1 THEN
	  vID:=AddZakaz(pCOMMIT, NULL,pIS_AUTO,pIS_AGENT,pDATE_PLAN,pCLIENT_NUMBER,
         pCLIENT_DATE,pINPUT_NUMBER,pINPUT_DATE,pBEGIN_DATE,
	     0,pFILIAL_ID,pPLAT_ID,pDOG_ID,
 	     pPROD_ID_NPR,pUSL_OPL_ID,pLOAD_ABBR,pSTAN_ID,
	     pVETKA_ID,pPOLUCH_ID, pPOTREB_ID, pPOTREB_NAME,
	     pNEFTEBASA,pPAYFORM_ID,pPLANSTRU_ID,pPRICE_CLIENT,
	     pPRICE, pVES, pKOL, pSPEED_VES, pSPEED_KOL,
	     pPRIM, pGR4, pZAKAZ_ID,pGOSPROG_ID,pGP_NAPR_ID,pLUKDOG_ID,NULL,NULL);
    END IF;
	RETURN vID;
  END;

  /* К отгрузке */
  FUNCTION ToLoadZakaz(pCOMMIT NUMBER, pZAKAZ_ID NUMBER, pIS_AUTO NUMBER, pINPUT_NUMBER VARCHAR2, pINPUT_DATE DATE, pBEGIN_DATE DATE, pPROD_ID_NPR VARCHAR2,
	pSTAN_ID NUMBER, pPOLUCH_ID NUMBER, pPOTREB_ID NUMBER, pPRICE NUMBER,
	pNOM_ZD VARCHAR2, pLOAD_VES NUMBER, pLOAD_KOL NUMBER, pSPEED_VES NUMBER, pSPEED_KOL NUMBER, pFACT_VES NUMBER, pFACT_KOL NUMBER,
	pGU12_A_ID NUMBER, pKOD_ISU VARCHAR2 DEFAULT '*') RETURN NUMBER AS
  v_zakaz ZAKAZ%ROWTYPE;
  vINPUT_NUMBER NUMBER;
  vID NUMBER;
  BEGIN
    -- Считываем заказ
	SELECT * INTO v_zakaz
	  FROM ZAKAZ
	 WHERE ID=pZAKAZ_ID;

    -- Добавляем "К отгрузке"
	RETURN AddZakazHist(pCOMMIT,NULL,pIS_AUTO,NULL,pZAKAZ_ID,20,v_zakaz.INPUT_NUMBER,v_zakaz.INPUT_DATE,
	      vINPUT_NUMBER,pINPUT_DATE,pPROD_ID_NPR,NULL,pSTAN_ID,
		  pPOLUCH_ID, pPOTREB_ID,pPRICE,0,0,pSPEED_VES, pSPEED_KOL,
		  pNOM_ZD,pLOAD_VES,pLOAD_KOL,pFACT_VES,pFACT_KOL,pGU12_A_ID,pBEGIN_DATE,NULL,NULL,pKOD_ISU);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  RETURN -1;
  END;

  /* Подготовить график к заполнению */
  PROCEDURE FillGrafik(pZAKAZ_HIST_ID NUMBER) AS
  BEGIN
    -- Очистить временный график
	EmptyGrafik;
	-- Заполнить временный график
    INSERT INTO V_ZAKAZ_GRAFIK_TEMP (DATE_LOAD, TONN_LOAD, CIST_LOAD)
 	 SELECT DATE_LOAD, TONN_LOAD, CIST_LOAD FROM ZAKAZ_GRAFIK
		 WHERE ZAKAZ_HIST_ID=pZAKAZ_HIST_ID;
	COMMIT;
  END;

  /* Добавить запись в график */
  PROCEDURE AddGrafik(pDATE_LOAD DATE, pTONN_LOAD NUMBER, pCIST_LOAD NUMBER) AS
    vDATE DATE;
  BEGIN
    SELECT DATE_LOAD INTO vDATE
	  FROM V_ZAKAZ_GRAFIK_TEMP
	 WHERE DATE_LOAD=pDATE_LOAD;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      INSERT INTO V_ZAKAZ_GRAFIK_TEMP (DATE_LOAD, TONN_LOAD, CIST_LOAD)
 	   SELECT pDATE_LOAD, pTONN_LOAD, pCIST_LOAD FROM dual;
	  COMMIT;
  END;

  /* Удалить запись из графика */
  PROCEDURE DelGrafik(pDATE_LOAD DATE) AS
  BEGIN
    DELETE FROM V_ZAKAZ_GRAFIK_TEMP WHERE DATE_LOAD=pDATE_LOAD;
	COMMIT;
  END;

  /* Сохранить график */
  PROCEDURE SaveGrafik(pZAKAZ_HIST_ID NUMBER) AS
    vGRAFIK VARCHAR2(500);
	vPREV_DAY NUMBER(2);
	vPREV_MON NUMBER(2);
	vCUR_DAY NUMBER(2);
	vCUR_MON NUMBER(2);
	vLAST_DAY NUMBER(2);
	vLAST_MON NUMBER(2);
  BEGIN
    -- Очищаем рабочий  график
	DELETE FROM ZAKAZ_GRAFIK WHERE ZAKAZ_HIST_ID=pZAKAZ_HIST_ID;
	-- Формируем строку для ZAKAZ_HIST
	vLAST_DAY:=0;
	vPREV_DAY:=0;
	vPREV_MON:=0;
	vGRAFIK:='';
	FOR lcur IN (SELECT DATE_LOAD,TONN_LOAD,CIST_LOAD
	               FROM V_ZAKAZ_GRAFIK_TEMP
--				  WHERE TONN_LOAD<>0 OR CIST_LOAD<>0
				  ORDER BY DATE_LOAD)
    LOOP
	  vCUR_DAY:=TO_NUMBER(TO_CHAR(lcur.DATE_LOAD,'DD'));
	  vCUR_MON:=TO_NUMBER(TO_CHAR(lcur.DATE_LOAD,'MM'));
	  IF vPREV_DAY>0 THEN
	    -- Уже были
	    IF vCUR_MON<>vPREV_MON OR vCUR_DAY>vPREV_DAY+1 THEN
		  -- Изменился месяц или разница больше 1 дня
		  IF vLAST_DAY<>vPREV_DAY THEN
		    -- Период больше 1 дня
		    vGRAFIK:=vGRAFIK||'-'||TRIM(TO_CHAR(vPREV_DAY,'00'))||'.'||TRIM(TO_CHAR(vPREV_MON,'00'))||', '||TRIM(TO_CHAR(vCUR_DAY,'00'));
		  ELSE
		    -- Период в 1 день
		    vGRAFIK:=vGRAFIK||'.'||TRIM(TO_CHAR(vPREV_MON,'00'))||', '||TRIM(TO_CHAR(vCUR_DAY,'00'));
		  END IF;
		  vLAST_DAY:=vCUR_DAY;
	    END IF;
	  ELSE
	    -- В первый раз
	    vGRAFIK:=TRIM(TO_CHAR(vCUR_DAY,'00'));
		vLAST_DAY:=vCUR_DAY;
	  END IF;
	  vPREV_DAY:=vCUR_DAY;
	  vPREV_MON:=vCUR_MON;
	  -- Заполняем рабочий график
	  INSERT INTO ZAKAZ_GRAFIK (ZAKAZ_HIST_ID, DATE_LOAD, TONN_LOAD, CIST_LOAD)
       VALUES (pZAKAZ_HIST_ID,lcur.DATE_LOAD,lcur.TONN_LOAD,lcur.CIST_LOAD);
	END LOOP;
	IF vPREV_DAY>0 THEN
	  IF vLAST_DAY<>vPREV_DAY THEN
	    -- Период больше 1 дня
		vGRAFIK:=vGRAFIK||'-'||TRIM(TO_CHAR(vPREV_DAY,'00'))||'.'||TRIM(TO_CHAR(vPREV_MON,'00'));
	  ELSE
	    -- Период в 1 день
	    vGRAFIK:=vGRAFIK||'.'||TRIM(TO_CHAR(vPREV_MON,'00'));
	  END IF;
    END IF;
	-- Записываем ZAKAZ_HIST.GRAFIK
	UPDATE ZAKAZ_HIST SET GRAFIK=SUBSTR(vGRAFIK,1,100) WHERE ID=pZAKAZ_HIST_ID;
	--
	COMMIT;
  END;

-- Загрузка заказов потребителей из Паруса в Заказы потребителей в Master
PROCEDURE LOAD_CONSORDS (DATE_BEG VARCHAR2,DATE_END VARCHAR2) AS
  pDATE_BEG VARCHAR2(200);
  pDATE_END VARCHAR2(200);
  dDateBeg DATE;
  dDateEnd DATE;

BEGIN
  IF DATE_BEG ||' '=' ' THEN
    pDATE_BEG:=TO_CHAR(SYSDATE,'dd.mm.yyyy');
  ELSE
    pDATE_BEG:=DATE_BEG;
  END IF;

  IF DATE_END ||' '=' ' THEN
    pDATE_END:=TO_CHAR(SYSDATE,'dd.mm.yyyy');
  ELSE
    pDATE_END:=DATE_END;
  END IF;

  dDateBeg:=TRUNC(TRUNC(TO_DATE(pDATE_BEG,'dd.mm.yyyy'),'MONTH')-1,'MONTH');
  dDateEnd:=LAST_DAY(LAST_DAY(TO_DATE(pDATE_END,'dd.mm.yyyy'))+1);

  UPDATE ZAKAZ_PARUS A SET
	(PARUS_PRN, IS_ACCEPT, IS_WORK, INPUT_NUMBER, INPUT_DATE, VES, DATE_PLAN, LOAD_ABBR,
	 USL_OPL_ID, FILIAL_ID, PRICE, POLUCH_NAME, PARUS_AGENT_RN,
	 PARUS_AGENT_TAG, PARUS_AGENT_NAME, PARUS_DOGOVOR, PARUS_NOMEN_RN, PARUS_NOMEN_TAG,
	 PARUS_NOMEN_NAME, PARUS_MODIF_RN, PARUS_MODIF_TAG, PARUS_MODIF_NAME,FACT_VES) =
    (SELECT B.nPRN,DECODE(B.nORD_STATE,1,1,0), DECODE(B.nBLOCKED,1,0,1), B.sINPUT_NUMBER, B.dINPUT_DATE,B.VES_TONN, B.dPLAN_DATE, B.LOAD_ABBR,
	   B.USL_OPL_ID,B.FILIAL_ID,B.PRICE_TONN,B.sAGENTNAME,B.nAGENT,
	   B.sAGENT,B.sAGENTNAME,B.sDOG_NUMB, B.NNOMEN, B.SNOMEN,
	   B.SNOMENNAME, B.NNOMMODIF, B.SNOMMODIF, B.SMODIFNAME,0
	 FROM V_PARUS_CONSORDS B
	 WHERE B.NRN=A.PARUS_RN
	   AND B.dPLAN_DATE>=dDateBeg
	   AND B.dPLAN_DATE<=dDateEnd)
  WHERE A.PARUS_RN IS NOT NULL
	AND A.DATE_PLAN>=dDateBeg
	AND A.DATE_PLAN<=dDateEnd
	AND EXISTS
    (SELECT NULL FROM V_PARUS_CONSORDS B
	  WHERE B.NRN=A.PARUS_RN
	    AND B.dPLAN_DATE>=dDateBeg
	    AND B.dPLAN_DATE<=dDateEnd);

  INSERT INTO ZAKAZ_PARUS
	(PARUS_RN, PARUS_PRN, IS_ACCEPT, IS_WORK, INPUT_NUMBER, INPUT_DATE, VES, DATE_PLAN, LOAD_ABBR,
	 USL_OPL_ID, FILIAL_ID, PRICE, POLUCH_NAME, PARUS_AGENT_RN,
	 PARUS_AGENT_TAG, PARUS_AGENT_NAME, PARUS_DOGOVOR, PARUS_NOMEN_RN, PARUS_NOMEN_TAG,
	 PARUS_NOMEN_NAME, PARUS_MODIF_RN, PARUS_MODIF_TAG, PARUS_MODIF_NAME,FACT_VES)
    (SELECT B.nRN, B.nPRN, DECODE(B.nORD_STATE,1,1,0), DECODE(B.nBLOCKED,1,0,1), B.sINPUT_NUMBER, B.dINPUT_DATE, B.VES_TONN, B.dPLAN_DATE, B.LOAD_ABBR,
	   B.USL_OPL_ID,B.FILIAL_ID,B.PRICE_TONN,B.sAGENTNAME,B.nAGENT,
	   B.sAGENT,B.sAGENTNAME,B.sDOG_NUMB, B.NNOMEN, B.SNOMEN,
	   B.SNOMENNAME, B.NNOMMODIF, B.SNOMMODIF, B.SMODIFNAME, 0
	 FROM V_PARUS_CONSORDS B
	 WHERE NOT EXISTS (SELECT NULL FROM ZAKAZ_PARUS A WHERE A.PARUS_RN=B.nRN)
	   AND B.dPLAN_DATE>=dDateBeg
	   AND B.dPLAN_DATE<=dDateEnd);

  DELETE FROM ZAKAZ_PARUS A
   WHERE NOT EXISTS
    (SELECT NULL FROM V_PARUS_CONSORDS B WHERE B.NRN=A.PARUS_RN
 	    AND B.dPLAN_DATE>=dDateBeg
	    AND B.dPLAN_DATE<=dDateEnd)
	 AND A.DATE_PLAN>=dDateBeg
	 AND A.DATE_PLAN<=dDateEnd
	 AND A.PARUS_RN IS NOT NULL
	 AND A.PARUS_RN<>1;

  -- Факт отгрузки	 
  FOR lcur IN (SELECT ORD_RN, ORD_NUMB, T_RN, AGENT_RN, AGENT_TAG, AGENT_NAME, DOG_NUMB, o.FILIAL_ID,
                 TRUNC(B.DOCDATE,'MONTH') as DATE_PLAN, NOMEN_RN, NOMEN_TAG, NOMEN_NAME, SUM(MASSA/1000) as FACT_VES
             	 FROM V_PARUS_CONSORD_FACT B, PARUS_STORE_ORG_STRU_LINK pl, V_ORG_STRUCTURE o
         	    WHERE B.DOCDATE>=dDateBeg
	              AND B.DOCDATE<=dDateEnd
				  AND B.STORE=pl.STORE_RN
				  AND pl.ORG_STRU_ID=o.ID
--				  AND b.dog_numb='СНП-066670004'
				GROUP BY ORD_RN, ORD_NUMB, T_RN, AGENT_RN, AGENT_TAG, AGENT_NAME, DOG_NUMB, o.FILIAL_ID,
                 TRUNC(B.DOCDATE,'MONTH'), NOMEN_RN, NOMEN_TAG, NOMEN_NAME
                ORDER BY ORD_RN, ORD_NUMB, T_RN, AGENT_RN, AGENT_TAG, AGENT_NAME, DOG_NUMB, o.FILIAL_ID,
                 TRUNC(B.DOCDATE,'MONTH'), NOMEN_RN, NOMEN_TAG, NOMEN_NAME ) LOOP  	 
    
	IF lcur.ORD_RN IS NOT NULL THEN
	  -- Если есть заказ 
      UPDATE ZAKAZ_PARUS A SET FACT_VES=NVL(FACT_VES,0)+lcur.FACT_VES
	   WHERE A.PARUS_PRN=lcur.ORD_RN
	     AND A.PARUS_NOMEN_RN=lcur.NOMEN_RN
	     AND ROWNUM=1;
	ELSE
	  -- Ищем подходящий
      UPDATE ZAKAZ_PARUS A SET FACT_VES=NVL(FACT_VES,0)+lcur.FACT_VES
	   WHERE A.PARUS_DOGOVOR=lcur.DOG_NUMB
	     AND A.PARUS_NOMEN_RN=lcur.NOMEN_RN
   	     AND A.DATE_PLAN=lcur.DATE_PLAN
		 AND A.FILIAL_ID=lcur.FILIAL_ID
	     AND A.PARUS_RN IS NOT NULL
	     AND A.PARUS_RN<>1
	     AND ROWNUM=1;
	END IF;	 
    IF SQL%NOTFOUND THEN
	     INSERT INTO ZAKAZ_PARUS (PARUS_RN, INPUT_NUMBER, INPUT_DATE, DATE_PLAN, IS_ACCEPT, FILIAL_ID, PARUS_AGENT_RN, PARUS_AGENT_TAG, PARUS_AGENT_NAME, PARUS_DOGOVOR, 
		 PARUS_NOMEN_RN, PARUS_NOMEN_TAG, PARUS_NOMEN_NAME, VES, FACT_VES, IS_WORK, PARUS_PRN)
		 VALUES (lcur.T_RN, NVL(lcur.ORD_NUMB,'?'), lcur.DATE_PLAN, lcur.DATE_PLAN, 0, lcur.FILIAL_ID, lcur.AGENT_RN, lcur.AGENT_TAG, lcur.AGENT_NAME, lcur.DOG_NUMB, 
		 lcur.NOMEN_RN, lcur.NOMEN_TAG, lcur.NOMEN_NAME, 0, lcur.FACT_VES, 1, 0);
	END IF;	 
  END LOOP;	   
  
  COMMIT;
  
END;

/* Очистить временный график */
PROCEDURE EmptyGrafik AS
BEGIN
  DELETE FROM V_ZAKAZ_GRAFIK_TEMP;
END;

-- Заполнить временный график из заказа на перевозку
PROCEDURE FillGrafikFromGU (pPLAT_ID NUMBER, pPROD_GU12_ID VARCHAR2, pSTAN_ID NUMBER, pGU12_A_ID NUMBER) AS
BEGIN
  -- Очистить временный график
  EmptyGrafik;
  -- Заполнить временный график
  INSERT INTO V_ZAKAZ_GRAFIK_TEMP (DATE_LOAD, TONN_LOAD, CIST_LOAD)
 	SELECT GU12_BR.DATE_R, SUM(GU12_BR.VES), SUM(GU12_BR.KOL_VAG)
	  FROM GU12_A,GU12_B,GU12_BR
	 WHERE GU12_A.ID=pGU12_A_ID
	   AND GU12_A.PROD_ID=TO_NUMBER(pPROD_GU12_ID)
	   AND GU12_A.ID=GU12_B.ID_A
	   AND GU12_B.KOL_VAG>0 -- Исключая корректировки
	   AND GU12_B.STAN_ID=pSTAN_ID
	   AND GU12_B.PLAT_ID=pPLAT_ID
	   AND GU12_B.ID=GU12_BR.ID_B
	 GROUP BY GU12_BR.DATE_R
	 ORDER BY GU12_BR.DATE_R;
  COMMIT;
END;

-- Максимальный номер позиции "К отгрузке"
FUNCTION GetMaxNum(pZAKAZ_ID NUMBER) RETURN NUMBER AS
  MaxNum NUMBER;
  CurNum NUMBER;
BEGIN
  MaxNum:=0;
  FOR lcur IN (SELECT ZAKAZ_HIST.INPUT_NUMBER
                 FROM ZAKAZ_HIST,ZAKAZ A, ZAKAZ B
				WHERE A.ID=pZAKAZ_ID
				  AND A.INPUT_NUMBER=B.INPUT_NUMBER
				  AND B.ID=ZAKAZ_HIST.ZAKAZ_ID
				  AND ZAKAZ_HIST.STATUS_ZAKAZ_ID=20)
  LOOP
    BEGIN
	  CurNum:=TO_NUMBER(lcur.INPUT_NUMBER);
	EXCEPTION
	  WHEN OTHERS THEN
	    CurNum:=0;
	END;
	IF CurNum>MaxNum THEN
	  MaxNum:=CurNum;
	END IF;
  END LOOP;
  RETURN MaxNum;
END;


/* График в виде строки */
FUNCTION GrafikToStr(pNOM_ZD VARCHAR2, pGRAFIK_TO DATE) RETURN VARCHAR2 AS
    vGRAFIK VARCHAR2(2000);
	vPART VARCHAR2(2000);
	vPREV_DAY NUMBER(2);
	vPREV_MON NUMBER(2);
	vCUR_DAY NUMBER(2);
	vCUR_MON NUMBER(2);
	vLAST_DAY NUMBER(2);
	vLAST_MON NUMBER(2);
	vCUR_VAG NUMBER(5);
	vPREV_VAG NUMBER(5);
	vREPEAT NUMBER(1);
BEGIN
  vLAST_DAY:=0;
  vPREV_DAY:=0;
  vPREV_MON:=0;
  vPREV_VAG:=0;
  vGRAFIK:='';
  FOR lcur IN (SELECT GU12_BR.DATE_R AS DATE_LOAD, SUM(GU12_BR.KOL_VAG) AS KOL_VAG 
                   FROM GU12_A,GU12_B,GU12_BR,MONTH
                  WHERE MONTH.nom_zd=pNOM_ZD
                    AND MONTH.GU12_A_ID=GU12_A.id
                    AND GU12_A.id=GU12_B.id_a
                    AND GU12_B.STAN_ID=MONTH.STAN_ID
                    AND GU12_B.id=GU12_BR.id_b
                    AND GU12_BR.date_r<=pGRAFIK_TO
			  	    AND GU12_B.ISCOR<>2
                  GROUP BY GU12_BR.DATE_R
				  HAVING SUM(GU12_BR.KOL_VAG)>0
                  ORDER BY GU12_BR.DATE_R)
  LOOP
	vCUR_DAY:=TO_NUMBER(TO_CHAR(lcur.DATE_LOAD,'DD'));
	vCUR_MON:=TO_NUMBER(TO_CHAR(lcur.DATE_LOAD,'MM'));
	vCUR_VAG:=lcur.KOL_VAG;
	  
	IF vPREV_DAY>0 THEN
      -- Уже были
      IF vCUR_MON<>vPREV_MON OR vCUR_VAG<>vPREV_VAG THEN
         -- Изменился месяц или кол-во вагонов
		IF vREPEAT=1 THEN
		  vPART:='по '||vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
		ELSE   
		  vPART:=vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
		END IF;
		IF vGRAFIK||' '<>' ' THEN  
 		  vGRAFIK:=vGRAFIK||'; '||vPART;
		ELSE  
 		  vGRAFIK:=vPART;
		END IF;  
		vREPEAT:=0;
		vPART:=TRIM(TO_CHAR(vCUR_VAG))||'ц - '||TRIM(TO_CHAR(vCUR_DAY,'00'));
 	  ELSE
		vPART:=vPART||','||TRIM(TO_CHAR(vCUR_DAY,'00'));
		vREPEAT:=1;
	  END IF;
	ELSE
	  -- В первый раз
	  vPART:=TRIM(TO_CHAR(vCUR_VAG))||'ц - '||TRIM(TO_CHAR(vCUR_DAY,'00'));
	  vREPEAT:=0;
	END IF;
	vPREV_DAY:=vCUR_DAY;
	vPREV_MON:=vCUR_MON;
	vPREV_VAG:=vCUR_VAG;
  END LOOP;
  IF vPREV_DAY>0 THEN
    IF vREPEAT=1 THEN
	  vPART:='по '||vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
    ELSE   
	  vPART:=vPART||'/'||TRIM(TO_CHAR(vPREV_MON,'00'));
	END IF;
	IF vGRAFIK||' '<>' ' THEN  
 	  vGRAFIK:=vGRAFIK||'; '||vPART;
	ELSE  
 	  vGRAFIK:=vPART;
	END IF;  
  END IF;

  RETURN vGRAFIK;	
END;

/* Создать в заказе СНП позицию "К отгрузке", привязанную к уже имеющемуся непривязанному заказу УНП */
PROCEDURE LinkSNPWithUNP(pSNP_ZAKAZ_ID NUMBER, pNOM_ZD VARCHAR2) AS
  vSNP ZAKAZ%ROWTYPE;
  vUNP ZAKAZ%ROWTYPE;
  vUNP_HIST ZAKAZ_HIST%ROWTYPE;
  vSNP_HIST_ID NUMBER;
BEGIN
   -- Ищем не привязанный заказ УНП
   BEGIN
     SELECT * INTO vUNP_HIST FROM ZAKAZ_HIST  WHERE NOM_ZD=pNOM_ZD AND LINK_ID IS NULL;
     SELECT * INTO vUNP FROM ZAKAZ  WHERE ID=vUNP_HIST.ZAKAZ_ID;
   EXCEPTION
     WHEN OTHERS THEN
	   RETURN;
   END;
   
   -- Ищем заказ СНП
   BEGIN
     SELECT * INTO vSNP FROM ZAKAZ  WHERE ID=pSNP_ZAKAZ_ID;
   EXCEPTION
     WHEN OTHERS THEN
	   RETURN;
   END;

   -- Формируем позицию "К отгрузке" в заказе СНП	   	 
   vSNP_HIST_ID:=ToLoadZakaz(1, pSNP_ZAKAZ_ID, 1, '', vSNP.INPUT_DATE, vSNP.BEGIN_DATE, vSNP.PROD_ID_NPR,
     	vSNP.STAN_ID, vSNP.POLUCH_ID, vSNP.POTREB_ID, vSNP.PRICE,
	    pNOM_ZD, 0, 0, 0, 0, 0, 0,	vUNP_HIST.GU12_A_ID);     
    
   -- Проставляем связи
  SetZakazLink(vUNP.ID,pSNP_ZAKAZ_ID,vSNP_HIST_ID);
  SetZakazHistLink(vUNP_HIST.ID,pSNP_ZAKAZ_ID,vSNP_HIST_ID);
  SetZakazHistLink(vSNP_HIST_ID,vUNP.ID,vUNP_HIST.ID);
END;


END; 
/

--
-- LINK_UNP_TO_SNP_AUTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.link_unp_to_snp_auto (pDatePlan DATE) as
  vIDSNP NUMBER;
  vIDSNPHist NUMBER;
  vIDUNP NUMBER;
  vIDUNPHist NUMBER;
  vIdOldSNPHist NUMBER;
begin

if pDatePlan<to_date('01.03.2009','dd.mm.yyyy') then
  return;
end if;  

-- Обновляем заказы
update zakaz zz 
set (link_id,link_hist_id)= 
(
select
snp.zakaz_id as link_id,
snp.zakaz_hist_id as link_hist_id
from 
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.lukdog_id=3447
order by b.zakaz_id,b.id) snp,
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.plat_id=10) unp,
zakaz link_snp
where 
unp.client_number=snp.client_number
and unp.link_id=link_snp.ID(+)
and (unp.link_id is null or link_snp.client_number='?')
and snp.link_id is null 
and UNP.zakaz_id=zz.id
--and unp.zakaz_id=3010090977
)
--
--select * from zakaz zz    
where exists
(
select null from zakaz zzz where zzz.date_plan=pDatePlan and zzz.is_agent=1 and zzz.is_accept=1
and zzz.id=zz.id 
)
and exists
(
select
null
from 
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.lukdog_id=3447
order by b.zakaz_id,b.id) snp,
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.plat_id=10) unp,
zakaz link_snp
where 
unp.client_number=snp.client_number
and UNP.zakaz_id=zz.id
and unp.link_id=link_snp.ID(+)
and (unp.link_id is null or link_snp.client_number='?')
and snp.link_id is null 
);


  




--Обновялем позиции 
update zakaz_hist zz 
set (link_id,link_hist_id)= 
(
select
snp.zakaz_id as link_id,
snp.zakaz_hist_id as link_hist_id
from 
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.lukdog_id=3447
order by b.zakaz_id,b.id) snp,
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.plat_id=10) unp,
zakaz link_snp
where 
unp.client_number=snp.client_number
and unp.link_id=link_snp.ID(+)
and (unp.link_id is null or link_snp.client_number='?')
and snp.link_id is null 
and UNP.zakaz_hist_id=zz.id
)
--
--select * from zakaz_hist zz    
where exists
(
select null from zakaz zzz where zzz.date_plan=pDatePlan and zzz.is_agent=1 and zzz.is_accept=1
and zzz.id=zz.zakaz_id 
)
and exists
(
select
null
from 
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.lukdog_id=3447
order by b.zakaz_id,b.id) snp,
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.plat_id=10) unp,
zakaz link_snp
where 
unp.client_number=snp.client_number
and UNP.zakaz_hist_id=zz.id
and unp.link_id=link_snp.ID(+)
and (unp.link_id is null or link_snp.client_number='?')
and snp.link_id is null 
);


-- восстанавливаем связи в заказах УНП
update zakaz_hist zz 
set (link_id,link_hist_id)= 
(
select
unp.link_id,
unp.link_hist_id
from  
(select a.id as zakaz_id,a.client_number,a.link_id,a.link_hist_id from zakaz a where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.plat_id=10 
--and a.id=3010090178
) unp
where  UNP.zakaz_id=zz.zakaz_id
)
--
--select * from zakaz_hist zz    
where exists
(
select null from zakaz zzz where zzz.date_plan=pDatePlan and zzz.is_agent=1 and zzz.is_accept=1
and zzz.id=zz.zakaz_id
--and zzz.id=3010090178 
)
and exists
(
select
null
from  
(select a.id as zakaz_id,a.client_number,a.link_id,a.link_hist_id from zakaz a where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.plat_id=10 
--and a.id=3010090178
) unp,
zakaz link_snp
where UNP.zakaz_id=zz.zakaz_id
and unp.link_id=link_snp.id
and link_snp.client_number<>'?'
)
and zz.link_id is null
and zz.status_zakaz_id=20; 


 
-- восстанавливаем связи в заказах СНП
update zakaz_hist zz 
set (link_id,link_hist_id)= 
(
select
unp.zakaz_id as link_id,
unp.zakaz_hist_id as link_hist_id
from  
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id,b.link_hist_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.lukdog_id=3447) snp,
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id, b.link_hist_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.plat_id=10) unp
where 
unp.link_hist_id=snp.zakaz_hist_id
and SNP.zakaz_hist_id=zz.id
)
--
--select * from zakaz_hist zz    
where exists
(
select null from zakaz zzz where zzz.date_plan=pDatePlan and zzz.is_agent=2 and zzz.is_accept=1
and zzz.id=zz.zakaz_id
and zzz.client_number<>'?' 
)
and exists
(
select
null
from  
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id,b.link_hist_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.lukdog_id=3447) snp,
(select b.zakaz_id,b.id as zakaz_hist_id,a.client_number,b.link_id, b.link_hist_id from zakaz a,zakaz_hist b where a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
and a.id=b.zakaz_id and b.status_zakaz_id=20
and a.plat_id=10) unp
where 
unp.link_hist_id=snp.zakaz_hist_id
and SNP.zakaz_hist_id=zz.id
)
and zz.link_hist_id is null;



FOR_ZAKAZ.FILLFACTTHISMONTH;
COMMIT;

end; 
/

--
-- LINK_UNP_TO_SNP_ZAKAZ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.link_unp_to_snp_zakaz (pDatePlan DATE, pIdUNPHist number, pNumSNP varchar2) as
  vIDSNP NUMBER;
  vIDSNPHist NUMBER;
  vIDUNP NUMBER;
  vIDUNPHist NUMBER;
  vIdOldSNPHist NUMBER;
begin
  begin
    select b.id,b.zakaz_id into vIdSNPHist,vIDSNP from zakaz a, zakaz_hist b
    where b.zakaz_id=a.id and a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
      and a.lukdog_id=3447
      and a.client_number=pNumSNP and B.STATUS_ZAKAZ_ID=20 and B.LINK_HIST_ID is null
      and rownum=1;
  exception
    when others then
      vIdSNPHist:=null;
      vIDSNP:=null;
  end;
          
  begin
    select b.id,b.zakaz_id into vIdUNPHist,vIDUNP from zakaz a, zakaz_hist b
    where b.zakaz_id=a.id and a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
      and a.plat_id=10 
      and b.id=pIDUNPHist and B.STATUS_ZAKAZ_ID=20; 
  exception
    when others then
      vIdUNPHist:=null;
      vIDUNP:=null;
  end;

  begin
    select b.id into vIdOldSNPHist from zakaz a, zakaz_hist b, zakaz_hist c
    where b.zakaz_id=a.id and a.date_plan=pDatePlan 
      and b.id=c.link_hist_id and c.id=vIdUNPHist
      and rownum=1;
  exception
    when others then
      vIdOldSNPHist:=null;
  end;
     
  if vIDUNPHist is null or vIDUNP is null or vIDSNPHist is null or vIDSNP is null then
    RAISE_APPLICATION_ERROR(22000,'Нет позиции!');
  end if; 

  update zakaz_hist set link_id=null,link_hist_id=null,nom_zd=null where id=vIdOldSNPHist;   
  FOR_ZAKAZ.SETZAKAZLINK(vidUNP,vidSNP, vIdSNPHist);
  FOR_ZAKAZ.SETZAKAZHISTLINK(vidUNPHist,vidSNP, vIdSNPHist);
  FOR_ZAKAZ.SETZAKAZHISTLINK(vidSNPHist,vidUNP, vIdUNPHist);
  FOR_ZAKAZ.FILLFACTTHISMONTH;
  COMMIT;
end; 
/

--
-- LINK_UNP_TO_SNP_ZAKAZ_2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.link_unp_to_snp_zakaz_2 (pDatePlan DATE, pIdUNPHist number, pNumSNP varchar2) as
  vIDSNP NUMBER;
  vIDSNPHist NUMBER;
  vIDUNP NUMBER;
  vIDUNPHist NUMBER;
  vIdOldSNPHist NUMBER;
  vStanId NUMBER;
  vProdId VARCHAR2(10);
begin

  begin
    select b.id,b.zakaz_id,a.stan_id,a.prod_id_npr into vIdUNPHist,vIDUNP,vStanId,vProdId from zakaz a, zakaz_hist b
    where b.zakaz_id=a.id and a.date_plan=pDatePlan and a.is_agent=1 and a.is_accept=1
      and a.plat_id=10 
      and b.id=pIDUNPHist and B.STATUS_ZAKAZ_ID=20; 
  exception
    when others then
      vStanId:=null;
      vIdUNPHist:=null;
      vIDUNP:=null;
      vProdId:='';
  end;


  begin
    select b.id,b.zakaz_id into vIdSNPHist,vIDSNP from zakaz a, zakaz_hist b
    where b.zakaz_id=a.id and a.date_plan=pDatePlan and a.is_agent=2 and a.is_accept=1
      and a.lukdog_id=3447 and a.stan_id=vStanId and a.prod_id_npr=vProdId
      and a.client_number=pNumSNP and B.STATUS_ZAKAZ_ID=20 and B.LINK_HIST_ID is null
      and rownum=1;
  exception
    when others then
      vIdSNPHist:=null;
      vIDSNP:=null;
  end;
          

  begin
    select b.id into vIdOldSNPHist from zakaz a, zakaz_hist b, zakaz_hist c
    where b.zakaz_id=a.id and a.date_plan=pDatePlan 
      and b.id=c.link_hist_id and c.id=vIdUNPHist
      and rownum=1;
  exception
    when others then
      vIdOldSNPHist:=null;
  end;
     
  if vIDUNPHist is null or vIDUNP is null or vIDSNPHist is null or vIDSNP is null then
    RAISE_APPLICATION_ERROR(-20001,'Нет позиции!');
  end if; 

  update zakaz_hist set link_id=null,link_hist_id=null,nom_zd=null where id=vIdOldSNPHist;   
  FOR_ZAKAZ.SETZAKAZLINK(vidUNP,vidSNP, vIdSNPHist);
  FOR_ZAKAZ.SETZAKAZHISTLINK(vidUNPHist,vidSNP, vIdSNPHist);
  FOR_ZAKAZ.SETZAKAZHISTLINK(vidSNPHist,vidUNP, vIdUNPHist);
  FOR_ZAKAZ.FILLFACTTHISMONTH;
  COMMIT;
end; 
/

--
-- P_GU12_ISPOLN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_GU12_ISPOLN IS
N_USER VARCHAR(20);
DAT1 DATE;
DAT2 DATE;
BEGIN
	 N_USER:=FOR_TEMP.GET_AS_CHAR('GU12_USER','MASTER','GU12');
	 DAT1:=FOR_TEMP.GET_AS_DATE('DBEG_ISP','MASTER','GU12');
	 DAT2:=FOR_TEMP.GET_AS_DATE('DEND_ISP','MASTER','GU12');

 	 DELETE FROM GU12_ISPOLN WHERE UPPER(USER_NAME)=UPPER(N_USER);

	  FOR rec1 IN (SELECT P.NAME AS PROD,TRIM(PV.ABBR) AS PRINVAG,B.STAN_ID AS STAN_ID,
	 	 	 			B.KOL_VAG AS PLAN_VAG,B.VES AS PLAN_VES,N_USER AS USER_NAME,
						DECODE(NVL(A.EXPED_ID,0),0,0,1) AS EXPORT,P.ID AS PROD_ID
	 	 	 			FROM GU12_A A,GU12_B B,KLS_PROD_GU12 P,KLS_GD_PRINVAG PV
						WHERE (A.FROM_DATE>=DAT1 AND A.FROM_DATE<=DAT2)
						AND A.PROD_ID=P.ID(+)
						AND A.ID=B.ID_A(+)
						AND B.PRINVAG_ID=PV.ID(+))
		LOOP

		INSERT INTO GU12_ISPOLN (PROD,PRINVAG,USER_NAME,FORDEL,STAN_ID,PLAN_VAG,PLAN_VES,EXPORT,PROD_ID)
		VALUES (rec1.PROD,rec1.PRINVAG,rec1.USER_NAME,1,rec1.STAN_ID,rec1.PLAN_VAG,rec1.PLAN_VES,rec1.EXPORT,rec1.PROD_ID);

		END LOOP;

	FOR rec2 IN (
			 	 SELECT
				 PGD.NAME AS PROD,
				 PGD.ID AS PROD_ID,
				 DECODE(OW.VAGOWN_TYP_ID,0,'П',1,'С',2,'А',3,'А','') AS PRINVAG,
				 M.STAN_ID AS STAN_ID,
				 1 AS FAKT_VAG,
				 K.VES_BRUTTO AS FAKT_VES,
				 N_USER AS USER_NAME,
				 M.IS_EXP AS EXPORT,
				 TRUNC(K.DATE_OFORML) AS DATE_O,
				 TO_NUMBER(TO_CHAR(K.DATE_OFORML,'HH24MI')) AS TIME_O
				 FROM KVIT K,MONTH M,KLS_VID_OTGR VO,KLS_PROD P,KLS_PROD_GU12 PGD,KLS_VAGOWNER OW
				 WHERE K.NOM_ZD=M.NOM_ZD
				 AND M.LOAD_ABBR=VO.LOAD_ABBR
				 AND K.PROD_ID_NPR=P.ID_NPR
				 AND K.VAGOWNER_ID=OW.ID
				 AND P.PROD_GU12_ID=PGD.ID
				 AND TRUNC(K.DATE_OFORML)>DAT1-2
				 AND TRUNC(K.DATE_OFORML)<DAT2+1
				 AND VO.LOAD_TYPE_ID=1
				 )

		LOOP

		INSERT INTO GU12_ISPOLN
		 (PROD,FORDEL,STAN_ID,FAKT_VAG,FAKT_VES,EXPORT,USER_NAME,PRINVAG,DATE_O,PROD_ID,TIME_O)
		VALUES
		 (rec2.PROD,2,rec2.STAN_ID,rec2.FAKT_VAG,rec2.FAKT_VES,rec2.EXPORT,
		 rec2.USER_NAME,rec2.PRINVAG,rec2.DATE_O,rec2.PROD_ID,rec2.TIME_O);

		END LOOP;

		UPDATE GU12_ISPOLN SET DATE_O=DATE_O+1 WHERE TIME_O>=1700 AND FORDEL=2 AND UPPER(USER_NAME)=UPPER(N_USER);
		DELETE FROM GU12_ISPOLN WHERE FORDEL=2 AND(DATE_O<DAT1 OR DATE_O>DAT2) AND UPPER(USER_NAME)=UPPER(N_USER);

		COMMIT;

	FOR rec3 IN(
SELECT
	  I.PROD_ID,
	  MAX(I.PROD) AS PROD,
	  I.EXPORT,
	  I.PRINVAG,
--	  I.STAN_ID,
	  S.STAN_NAME AS STAN,
	  SUM(NVL(I.PLAN_VAG,0)) AS PLAN_VAG,
	  SUM(NVL(I.PLAN_VES,0)) AS PLAN_VES,
	  SUM(NVL(I.FAKT_VAG,0)) AS FAKT_VAG,
	  SUM(NVL(I.FAKT_VES,0)) AS FAKT_VES,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),1,I.FAKT_VAG,0)) AS D01,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),2,I.FAKT_VAG,0)) AS D02,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),3,I.FAKT_VAG,0)) AS D03,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),4,I.FAKT_VAG,0)) AS D04,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),5,I.FAKT_VAG,0)) AS D05,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),6,I.FAKT_VAG,0)) AS D06,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),7,I.FAKT_VAG,0)) AS D07,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),8,I.FAKT_VAG,0)) AS D08,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),9,I.FAKT_VAG,0)) AS D09,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),10,I.FAKT_VAG,0)) AS D10,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),11,I.FAKT_VAG,0)) AS D11,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),12,I.FAKT_VAG,0)) AS D12,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),13,I.FAKT_VAG,0)) AS D13,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),14,I.FAKT_VAG,0)) AS D14,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),15,I.FAKT_VAG,0)) AS D15,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),16,I.FAKT_VAG,0)) AS D16,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),17,I.FAKT_VAG,0)) AS D17,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),18,I.FAKT_VAG,0)) AS D18,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),19,I.FAKT_VAG,0)) AS D19,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),20,I.FAKT_VAG,0)) AS D20,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),21,I.FAKT_VAG,0)) AS D21,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),22,I.FAKT_VAG,0)) AS D22,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),23,I.FAKT_VAG,0)) AS D23,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),24,I.FAKT_VAG,0)) AS D24,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),25,I.FAKT_VAG,0)) AS D25,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),26,I.FAKT_VAG,0)) AS D26,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),27,I.FAKT_VAG,0)) AS D27,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),28,I.FAKT_VAG,0)) AS D28,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),29,I.FAKT_VAG,0)) AS D29,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),30,I.FAKT_VAG,0)) AS D30,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),31,I.FAKT_VAG,0)) AS D31,
	  N_USER AS USER_NAME
FROM GU12_ISPOLN I,KLS_STAN S
WHERE
I.STAN_ID=S.ID
AND NOT PROD IS NULL
AND UPPER(USER_NAME)=UPPER(N_USER)
GROUP BY I.PROD_ID,I.EXPORT
--,I.STAN_ID
--,S.STAN_NAME,I.PRINVAG
,I.PRINVAG,S.STAN_NAME
	   	  )
 	LOOP

		INSERT INTO GU12_ISPOLN
		 (FORDEL,PROD,EXPORT,PRINVAG
		 --,STAN_ID
		 ,STAN,PROD_ID,
		 PLAN_VAG,PLAN_VES,FAKT_VAG,FAKT_VES,USER_NAME,
		 D01,D02,D03,D04,D05,D06,D07,D08,D09,
		 D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,
		 D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,
		 D30,D31)
		VALUES
		 (0,rec3.PROD,rec3.EXPORT,rec3.PRINVAG
		 --,rec3.STAN_ID
		 ,rec3.STAN,rec3.PROD_ID,
		 rec3.PLAN_VAG,rec3.PLAN_VES,rec3.FAKT_VAG,rec3.FAKT_VES,rec3.USER_NAME,
		 rec3.D01,rec3.D02,rec3.D03,rec3.D04,rec3.D05,rec3.D06,rec3.D07,rec3.D08,rec3.D09,
		 rec3.D10,rec3.D11,rec3.D12,rec3.D13,rec3.D14,rec3.D15,rec3.D16,rec3.D17,rec3.D18,rec3.D19,
		 rec3.D20,rec3.D21,rec3.D22,rec3.D23,rec3.D24,rec3.D25,rec3.D26,rec3.D27,rec3.D28,rec3.D29,
		 rec3.D30,rec3.D31);

	END LOOP;

		DELETE FROM GU12_ISPOLN WHERE FORDEL>0 AND UPPER(USER_NAME)=UPPER(N_USER);

		COMMIT;

END P_GU12_ISPOLN;

/

--
-- P_GU12_ISPOLN_1  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_GU12_ISPOLN_1 IS
N_USER VARCHAR(20);
DAT1 DATE;
DAT2 DATE;
BEGIN
	 N_USER:=FOR_TEMP.GET_AS_CHAR('GU12_USER','MASTER','GU12');
	 DAT1:=FOR_TEMP.GET_AS_DATE('DBEG_ISP','MASTER','GU12');
	 DAT2:=FOR_TEMP.GET_AS_DATE('DEND_ISP','MASTER','GU12');

 	 DELETE FROM GU12_ISPOLN WHERE UPPER(USER_NAME)=UPPER(N_USER);

	 FOR rec1 IN (SELECT P.NAME AS PROD,TRIM(PV.ABBR) AS PRINVAG,B.STAN_ID AS STAN_ID,
	 	 	 			B.KOL_VAG AS PLAN_VAG,B.VES AS PLAN_VES,N_USER AS USER_NAME,
						DECODE(NVL(A.EXPED_ID,0),0,0,1) AS EXPORT,P.ID AS PROD_ID
	 	 	 			FROM GU12_A A,GU12_B B,KLS_PROD_GU12 P,KLS_GD_PRINVAG PV
						WHERE (A.FROM_DATE>=DAT1 AND A.FROM_DATE<=DAT2)
						AND A.PROD_ID=P.ID(+)
						AND A.ID=B.ID_A(+)
						AND B.PRINVAG_ID=PV.ID(+))
		LOOP

		INSERT INTO GU12_ISPOLN (PROD,PRINVAG,USER_NAME,FORDEL,STAN_ID,PLAN_VAG,PLAN_VES,EXPORT,PROD_ID)
		VALUES (rec1.PROD,rec1.PRINVAG,rec1.USER_NAME,1,rec1.STAN_ID,rec1.PLAN_VAG,rec1.PLAN_VES,rec1.EXPORT,rec1.PROD_ID);

		END LOOP;

	FOR rec2 IN (
			 	 SELECT
				 PGD.NAME AS PROD,
				 PGD.ID AS PROD_ID,
				 DECODE(OW.VAGOWN_TYP_ID,0,'П',1,'С',2,'А',3,'А','') AS PRINVAG,
				 M.STAN_ID AS STAN_ID,
				 1 AS FAKT_VAG,
				 K.VES_BRUTTO AS FAKT_VES,
				 N_USER AS USER_NAME,
				 M.IS_EXP AS EXPORT,
				 TRUNC(K.DATE_OFORML) AS DATE_O,
				 TO_NUMBER(TO_CHAR(K.DATE_OFORML,'HH24MI')) AS TIME_O
				 FROM KVIT K,MONTH M,KLS_VID_OTGR VO,KLS_PROD P,KLS_PROD_GU12 PGD,KLS_VAGOWNER OW
				 WHERE K.NOM_ZD=M.NOM_ZD
				 AND M.LOAD_ABBR=VO.LOAD_ABBR
				 AND K.PROD_ID_NPR=P.ID_NPR
				 AND K.VAGOWNER_ID=OW.ID
				 AND P.PROD_GU12_ID=PGD.ID
				 AND TRUNC(K.DATE_OFORML)>DAT1-2
				 AND TRUNC(K.DATE_OFORML)<DAT2+1
				 AND VO.LOAD_TYPE_ID=1
				 )

		LOOP

		INSERT INTO GU12_ISPOLN
		 (PROD,FORDEL,STAN_ID,FAKT_VAG,FAKT_VES,EXPORT,USER_NAME,PRINVAG,DATE_O,PROD_ID,TIME_O)
		VALUES
		 (rec2.PROD,2,rec2.STAN_ID,rec2.FAKT_VAG,rec2.FAKT_VES,rec2.EXPORT,
		 rec2.USER_NAME,rec2.PRINVAG,rec2.DATE_O,rec2.PROD_ID,rec2.TIME_O);

		END LOOP;

		UPDATE GU12_ISPOLN SET DATE_O=DATE_O+1 WHERE TIME_O>=1700 AND FORDEL=2 AND UPPER(USER_NAME)=UPPER(N_USER);
		DELETE FROM GU12_ISPOLN WHERE FORDEL=2 AND(DATE_O<DAT1 OR DATE_O>DAT2) AND UPPER(USER_NAME)=UPPER(N_USER);

		COMMIT;

	FOR rec3 IN(
SELECT
	  I.PROD_ID,
	  MAX(I.PROD) AS PROD,
	  I.EXPORT,
	  I.PRINVAG,
--	  I.STAN_ID,
	  S.STAN_NAME AS STAN,
	  SUM(NVL(I.PLAN_VAG,0)) AS PLAN_VAG,
	  SUM(NVL(I.PLAN_VES,0)) AS PLAN_VES,
	  SUM(NVL(I.FAKT_VAG,0)) AS FAKT_VAG,
	  SUM(NVL(I.FAKT_VES,0)) AS FAKT_VES,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),1,I.FAKT_VAG,0)) AS D01,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),2,I.FAKT_VAG,0)) AS D02,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),3,I.FAKT_VAG,0)) AS D03,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),4,I.FAKT_VAG,0)) AS D04,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),5,I.FAKT_VAG,0)) AS D05,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),6,I.FAKT_VAG,0)) AS D06,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),7,I.FAKT_VAG,0)) AS D07,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),8,I.FAKT_VAG,0)) AS D08,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),9,I.FAKT_VAG,0)) AS D09,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),10,I.FAKT_VAG,0)) AS D10,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),11,I.FAKT_VAG,0)) AS D11,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),12,I.FAKT_VAG,0)) AS D12,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),13,I.FAKT_VAG,0)) AS D13,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),14,I.FAKT_VAG,0)) AS D14,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),15,I.FAKT_VAG,0)) AS D15,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),16,I.FAKT_VAG,0)) AS D16,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),17,I.FAKT_VAG,0)) AS D17,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),18,I.FAKT_VAG,0)) AS D18,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),19,I.FAKT_VAG,0)) AS D19,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),20,I.FAKT_VAG,0)) AS D20,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),21,I.FAKT_VAG,0)) AS D21,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),22,I.FAKT_VAG,0)) AS D22,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),23,I.FAKT_VAG,0)) AS D23,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),24,I.FAKT_VAG,0)) AS D24,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),25,I.FAKT_VAG,0)) AS D25,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),26,I.FAKT_VAG,0)) AS D26,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),27,I.FAKT_VAG,0)) AS D27,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),28,I.FAKT_VAG,0)) AS D28,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),29,I.FAKT_VAG,0)) AS D29,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),30,I.FAKT_VAG,0)) AS D30,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),31,I.FAKT_VAG,0)) AS D31,
	  N_USER AS USER_NAME
FROM GU12_ISPOLN I,KLS_STAN S
WHERE
I.STAN_ID=S.ID
AND NOT PROD IS NULL
AND UPPER(USER_NAME)=UPPER(N_USER)
GROUP BY I.PROD_ID,I.EXPORT
--,I.STAN_ID
--,S.STAN_NAME,I.PRINVAG
,I.PRINVAG,S.STAN_NAME
	   	  )
 	LOOP

		INSERT INTO GU12_ISPOLN
		 (FORDEL,PROD,EXPORT,PRINVAG
		 --,STAN_ID
		 ,STAN,PROD_ID,
		 PLAN_VAG,PLAN_VES,FAKT_VAG,FAKT_VES,USER_NAME,
		 D01,D02,D03,D04,D05,D06,D07,D08,D09,
		 D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,
		 D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,
		 D30,D31)
		VALUES
		 (0,rec3.PROD,rec3.EXPORT,rec3.PRINVAG
		 --,rec3.STAN_ID
		 ,rec3.STAN,rec3.PROD_ID,
		 rec3.PLAN_VAG,rec3.PLAN_VES,rec3.FAKT_VAG,rec3.FAKT_VES,rec3.USER_NAME,
		 rec3.D01,rec3.D02,rec3.D03,rec3.D04,rec3.D05,rec3.D06,rec3.D07,rec3.D08,rec3.D09,
		 rec3.D10,rec3.D11,rec3.D12,rec3.D13,rec3.D14,rec3.D15,rec3.D16,rec3.D17,rec3.D18,rec3.D19,
		 rec3.D20,rec3.D21,rec3.D22,rec3.D23,rec3.D24,rec3.D25,rec3.D26,rec3.D27,rec3.D28,rec3.D29,
		 rec3.D30,rec3.D31);

	END LOOP;

		DELETE FROM GU12_ISPOLN WHERE FORDEL>0 AND UPPER(USER_NAME)=UPPER(N_USER);

		COMMIT;

END P_GU12_ISPOLN_1;

/

--
-- P_GU12_ISPOLN_2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_GU12_ISPOLN_2 IS
N_USER VARCHAR(20);
DAT1 DATE;
DAT2 DATE;
BEGIN
	 N_USER:=FOR_TEMP.GET_AS_CHAR('GU12_USER','MASTER','GU12');
	 DAT1:=FOR_TEMP.GET_AS_DATE('DBEG_ISP','MASTER','GU12');
	 DAT2:=FOR_TEMP.GET_AS_DATE('DEND_ISP','MASTER','GU12');

 	 DELETE FROM GU12_ISPOLN WHERE UPPER(USER_NAME)=UPPER(N_USER);

	 FOR rec1 IN (SELECT P.NAME AS PROD,TRIM(PV.ABBR) AS PRINVAG,B.STAN_ID AS STAN_ID,
	 	 	 			BR.KOL_VAG AS PLAN_VAG,BR.VES AS PLAN_VES,N_USER AS USER_NAME,
						DECODE(NVL(A.EXPED_ID,0),0,0,1) AS EXPORT,P.ID AS PROD_ID
	 	 	 			FROM GU12_A A,GU12_B B,GU12_BR BR,KLS_PROD_GU12 P,KLS_GD_PRINVAG PV
						WHERE (BR.DATE_R>=DAT1 AND BR.DATE_R<=DAT2)
						AND A.PROD_ID=P.ID(+)
						AND A.ID=B.ID_A(+)
						AND B.PRINVAG_ID=PV.ID(+)
						AND BR.ID_B=B.ID)
		LOOP

		INSERT INTO GU12_ISPOLN (PROD,PRINVAG,USER_NAME,FORDEL,STAN_ID,PLAN_VAG,PLAN_VES,EXPORT,PROD_ID)
		VALUES (rec1.PROD,rec1.PRINVAG,rec1.USER_NAME,1,rec1.STAN_ID,rec1.PLAN_VAG,rec1.PLAN_VES,rec1.EXPORT,rec1.PROD_ID);

		END LOOP;

	FOR rec2 IN (
			 	 SELECT
				 PGD.NAME AS PROD,
				 PGD.ID AS PROD_ID,
				 DECODE(OW.VAGOWN_TYP_ID,0,'П',1,'С',2,'А',3,'А','') AS PRINVAG,
				 M.STAN_ID AS STAN_ID,
				 1 AS FAKT_VAG,
				 K.VES_BRUTTO AS FAKT_VES,
				 N_USER AS USER_NAME,
				 M.IS_EXP AS EXPORT,
				 TRUNC(K.DATE_OFORML) AS DATE_O,
				 TO_NUMBER(TO_CHAR(K.DATE_OFORML,'HH24MI')) AS TIME_O
				 FROM KVIT K,MONTH M,KLS_VID_OTGR VO,KLS_PROD P,KLS_PROD_GU12 PGD,KLS_VAGOWNER OW
				 WHERE K.NOM_ZD=M.NOM_ZD
				 AND M.LOAD_ABBR=VO.LOAD_ABBR
				 AND K.PROD_ID_NPR=P.ID_NPR
				 AND K.VAGOWNER_ID=OW.ID
				 AND P.PROD_GU12_ID=PGD.ID
				 AND TRUNC(K.DATE_OFORML)>DAT1-2
				 AND TRUNC(K.DATE_OFORML)<DAT2+1
				 AND VO.LOAD_TYPE_ID=1
				 )

		LOOP

		INSERT INTO GU12_ISPOLN
		 (PROD,FORDEL,STAN_ID,FAKT_VAG,FAKT_VES,EXPORT,USER_NAME,PRINVAG,DATE_O,PROD_ID,TIME_O)
		VALUES
		 (rec2.PROD,2,rec2.STAN_ID,rec2.FAKT_VAG,rec2.FAKT_VES,rec2.EXPORT,
		 rec2.USER_NAME,rec2.PRINVAG,rec2.DATE_O,rec2.PROD_ID,rec2.TIME_O);

		END LOOP;

		UPDATE GU12_ISPOLN SET DATE_O=DATE_O+1 WHERE TIME_O>=1700 AND FORDEL=2 AND UPPER(USER_NAME)=UPPER(N_USER);
		DELETE FROM GU12_ISPOLN WHERE FORDEL=2 AND(DATE_O<DAT1 OR DATE_O>DAT2) AND UPPER(USER_NAME)=UPPER(N_USER);

		COMMIT;

	FOR rec3 IN(
SELECT
	  I.PROD_ID,
	  MAX(I.PROD) AS PROD,
	  I.EXPORT,
	  I.PRINVAG,
--	  I.STAN_ID,
	  S.STAN_NAME AS STAN,
	  SUM(NVL(I.PLAN_VAG,0)) AS PLAN_VAG,
	  SUM(NVL(I.PLAN_VES,0)) AS PLAN_VES,
	  SUM(NVL(I.FAKT_VAG,0)) AS FAKT_VAG,
	  SUM(NVL(I.FAKT_VES,0)) AS FAKT_VES,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),1,I.FAKT_VAG,0)) AS D01,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),2,I.FAKT_VAG,0)) AS D02,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),3,I.FAKT_VAG,0)) AS D03,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),4,I.FAKT_VAG,0)) AS D04,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),5,I.FAKT_VAG,0)) AS D05,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),6,I.FAKT_VAG,0)) AS D06,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),7,I.FAKT_VAG,0)) AS D07,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),8,I.FAKT_VAG,0)) AS D08,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),9,I.FAKT_VAG,0)) AS D09,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),10,I.FAKT_VAG,0)) AS D10,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),11,I.FAKT_VAG,0)) AS D11,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),12,I.FAKT_VAG,0)) AS D12,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),13,I.FAKT_VAG,0)) AS D13,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),14,I.FAKT_VAG,0)) AS D14,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),15,I.FAKT_VAG,0)) AS D15,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),16,I.FAKT_VAG,0)) AS D16,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),17,I.FAKT_VAG,0)) AS D17,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),18,I.FAKT_VAG,0)) AS D18,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),19,I.FAKT_VAG,0)) AS D19,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),20,I.FAKT_VAG,0)) AS D20,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),21,I.FAKT_VAG,0)) AS D21,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),22,I.FAKT_VAG,0)) AS D22,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),23,I.FAKT_VAG,0)) AS D23,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),24,I.FAKT_VAG,0)) AS D24,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),25,I.FAKT_VAG,0)) AS D25,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),26,I.FAKT_VAG,0)) AS D26,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),27,I.FAKT_VAG,0)) AS D27,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),28,I.FAKT_VAG,0)) AS D28,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),29,I.FAKT_VAG,0)) AS D29,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),30,I.FAKT_VAG,0)) AS D30,
	  SUM(DECODE(TO_NUMBER(TO_CHAR(DATE_O,'DD')),31,I.FAKT_VAG,0)) AS D31,
	  N_USER AS USER_NAME
FROM GU12_ISPOLN I,KLS_STAN S
WHERE
I.STAN_ID=S.ID
AND NOT PROD IS NULL
AND UPPER(USER_NAME)=UPPER(N_USER)
GROUP BY I.PROD_ID,I.EXPORT
--,I.STAN_ID
--,S.STAN_NAME,I.PRINVAG
,I.PRINVAG,S.STAN_NAME
	   	  )
 	LOOP

		INSERT INTO GU12_ISPOLN
		 (FORDEL,PROD,EXPORT,PRINVAG
		 --,STAN_ID
		 ,STAN,PROD_ID,
		 PLAN_VAG,PLAN_VES,FAKT_VAG,FAKT_VES,USER_NAME,
		 D01,D02,D03,D04,D05,D06,D07,D08,D09,
		 D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,
		 D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,
		 D30,D31)
		VALUES
		 (0,rec3.PROD,rec3.EXPORT,rec3.PRINVAG
		 --,rec3.STAN_ID
		 ,rec3.STAN,rec3.PROD_ID,
		 rec3.PLAN_VAG,rec3.PLAN_VES,rec3.FAKT_VAG,rec3.FAKT_VES,rec3.USER_NAME,
		 rec3.D01,rec3.D02,rec3.D03,rec3.D04,rec3.D05,rec3.D06,rec3.D07,rec3.D08,rec3.D09,
		 rec3.D10,rec3.D11,rec3.D12,rec3.D13,rec3.D14,rec3.D15,rec3.D16,rec3.D17,rec3.D18,rec3.D19,
		 rec3.D20,rec3.D21,rec3.D22,rec3.D23,rec3.D24,rec3.D25,rec3.D26,rec3.D27,rec3.D28,rec3.D29,
		 rec3.D30,rec3.D31);

	END LOOP;

		DELETE FROM GU12_ISPOLN WHERE FORDEL>0 AND UPPER(USER_NAME)=UPPER(N_USER);

		COMMIT;

END P_GU12_ISPOLN_2;

/

--
-- P_LOAD_SF_R3  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_Load_Sf_R3 (vDATE DATE) IS
  vPrevDok NUMBER;
  vPrevProd VARCHAR2(5);
  vBillPosId NUMBER;
  vNomSf NUMBER;
  vNumAkt NUMBER;
BEGIN
vBillPosId:=1;

--Удаляем все товарные фактуры за сутки
DELETE FROM BILL_POS WHERE NOM_DOK IN (SELECT NOM_DOK FROM BILLS WHERE DATE_KVIT=vDATE 
   AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080'));
UPDATE KVIT SET BILL_ID=0 WHERE BILL_ID IN (SELECT NOM_DOK FROM BILLS WHERE DATE_KVIT=vDATE 
   AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080'));
DELETE FROM BILLS WHERE DATE_VYP_SF=vDATE AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080');
   
--цикл по заголовкам
FOR REC3 IN (SELECT /*+ ORDERED */ DISTINCT 
	 	 		IB.NOM_SF AS ISU_NOM_SF
		 		,IB.DATE_VYP_SF
		 		,IB.ISU_KOD
		 		,K.DATE_KVIT
				,For_Init.GetCurrUser AS FIO_ISPOL
				,TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS KOL_DN
				,IB.ISU_KOD_OLD
				,(CASE
				      WHEN D.ID=2519 THEN '?'
					  ELSE K.NOM_ZD
				  END) AS NOM_ZD
				,(CASE
                    WHEN k.date_otgr<TO_DATE('01.04.2008','dd.mm.yyyy') THEN 8
                    ELSE 4175
                  END) AS OWNER_ID
				,D.ID AS DOG_ID
				,M.USL_NUMBER
				,(CASE
				      WHEN D.ID=2519 THEN '10080'
					  ELSE P.ID_NPR
				  END) AS PROD_ID_NPR
				,K.DATE_KVIT AS DATE_MOS
				,D.IS_AGENT
				,(CASE
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 1 AND 5 THEN 1
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 6 AND 10 THEN 2
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 11 AND 15 THEN 3
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 16 AND 20 THEN 4
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 20 AND 25 THEN 5
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD'))>25 THEN 6
					   ELSE 0
				  END) AS NUM_5_DAY
				,M.NAZN_OTG_ID
				,K.DATE_KVIT+TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS DATE_PLAT
				,1-NVL(IBP.IS_AKCIZ,0) AS NO_AKCIZ
				,K.DATE_KVIT AS DATE_BUXG
				,NVL(IB.STATUS,0) AS STATUS
		 FROM KVIT K
			  ,MONTH M
   		 	  ,ISU_BILL_POS_ROW IR
		      ,ISU_BILLS IB
			  ,ISU_BILL_POS IBP
			  ,KLS_DOG D
			  ,USL_DOG U
			  ,KLS_PROD P
		 WHERE IB.DATE_KVIT=vDATE
		   AND K.NOM_ZD=M.NOM_ZD
		   AND IR.KVIT_ID=K.ID
	 	   AND IB.ISU_KOD=IR.ISU_KOD
		   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
		   AND SUBSTR(IB.ISU_KOD_DOG,1,10)=SUBSTR(D.ISU_KOD_DOG,1,10)
		   AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG
		   AND K.PROD_ID_NPR=P.ID_NPR
		   AND NVL(IB.STATUS,0) IN (0,3)
		   AND IB.LATENT||' '<>'X'
			   )
LOOP

		-- Для корректирующего счета
		IF REC3.STATUS=3 THEN 
		   DELETE FROM DOP_KVIT DK WHERE DK.BILL_ID=REC3.ISU_KOD_OLD;  
		   INSERT INTO DOP_KVIT SELECT * FROM KVIT K WHERE K.BILL_ID=REC3.ISU_KOD_OLD;  
		END IF;

		vNumAkt:=0;
		
		/*
		--ищем старый NUM_AKT
		SELECT NVL(MAX(NUM_AKT),0) AS NUMAKT INTO vNumAkt FROM KVIT_NUMAKT KNA 
		WHERE KNA.NOM_DOK=REC3.ISU_KOD;
		
		IF rec3.PROD_ID_NPR='10080' AND vNumAkt=0 THEN
		  --определяем NUM_AKT
          vNumAkt:=for_documents.GET_NEXT_NUM(12,0,'',rec3.DATE_KVIT);
		  -- сохраняем NUM_AKT
          for_documents.SET_NUM(12,0,0,'',vNumAkt,rec3.DATE_KVIT);
		  -- заполняем таблицу соответствия
		  UPDATE KVIT_NUMAKT SET NUM_AKT=vNumAkt,DATE_AKT=rec3.DATE_KVIT
 		   WHERE NOM_DOK=REC3.ISU_KOD;
		  IF SQL%NOTFOUND THEN  
  		    INSERT INTO KVIT_NUMAKT (NUM_AKT,DATE_AKT,NOM_DOK)
			  VALUES (vNumAkt,rec3.DATE_KVIT,REC3.ISU_KOD);
		  END IF;	  
        end if;
		*/

		--ищем старый NOM_SF
		SELECT NVL(MAX(NOM_SF),0) AS NOMSF INTO vNomSF FROM KVIT_NOMSF KSF 
		WHERE KSF.KVIT_ID IN (SELECT KVIT_ID FROM ISU_BILL_POS_ROW A WHERE A.ISU_KOD=REC3.ISU_KOD);

		IF rec3.PROD_ID_NPR='10080' AND vNumAkt=0 THEN
  		  vNumAkt:=vNomSF;
		END IF;  
		
		--заполняем KVIT для  
		   FOR REC1 IN (SELECT
        	 		    IBPR.ISU_KOD
        			   ,IBPR.KVIT_ID
        			   ,KT.DATE_KVIT
        			   ,KT.PROD_ID_NPR
        			   ,IBP.PRICE AS CENA
        			   ,IBP.PRICE_WITH_NDS AS CENA_OTP
        			   ,(IBP.SUMMA_BN-NVL(DK.SUM_PROD,0)) AS SUM_PROD
        			   ,0 AS SUM_AKCIZ
        			   ,(IBP.SUMMA_NDS-NVL(DK.SUM_PROD_NDS,0)) AS SUM_PROD_NDS
        			   ,(IBP.TARIF_NDS-NVL(DK.TARIF_NDS,0)) AS TARIF_NDS 
        			   ,(IBP.TARIF_GUARD_NDS-NVL(DK.TARIF_GUARD_NDS,0)) AS TARIF_GUARD_NDS 
        			   ,(IBP.SUMMA_VOZN_BN-NVL(DK.SUM_VOZN11,0)) AS SUM_VOZN11
        			   ,(ROUND(IBP.SUMMA_VOZN_BN*0.18,2)-NVL(DK.SUM_VOZN11_NDS,0)) AS SUM_VOZN11_NDS  
        			   ,(IBP.SUMMA_RAZN_BN-NVL(DK.SUM_VOZN12,0)) AS SUM_VOZN12
        			   ,(ROUND(IBP.SUMMA_RAZN_BN*0.18,2)-NVL(DK.SUM_VOZN12_NDS,0)) AS SUM_VOZN12_NDS
        			 FROM 
        		 	   ISU_BILL_POS_ROW IBPR
        			   ,ISU_BILL_POS IBP
        			   ,KVIT KT
					   ,DOP_KVIT DK
        			 WHERE KT.DATE_KVIT=vDATE
        			   AND IBPR.KVIT_ID=KT.ID
        			   AND IBPR.ISU_KOD_POS=IBP.ISU_KOD_POS
        			   AND IBPR.ISU_KOD=REC3.ISU_KOD
					   AND KT.ID=DK.ID(+)
        			 ORDER BY IBPR.ISU_KOD,KT.PROD_ID_NPR
					 ) 
           LOOP
 
           /* PSV - определяем BILL_POS_ID */
           IF vPrevDok<>REC1.ISU_KOD THEN
           	   vBillPosId:=1;
           ELSE
               IF vPrevProd<>REC1.PROD_ID_NPR THEN
               	  vBillPosId:=vBillPosId+1;
        	   END IF;
           END IF;	  

          UPDATE KVIT SET 
          		--BILL_ID=REC1.ISU_KOD
             	--,BILL_POS_ID=vBillPosId
             	CENA=0
             	,CENA_OTP=0
             	,SUM_PROD=0
             	,SUM_AKCIZ=0
             	,SUM_PROD_NDS=0
             	,TARIF_NDS=0
             	,TARIF_GUARD_NDS=0
             	,SUM_VOZN11=0
             	,SUM_VOZN11_NDS=0
             	,SUM_VOZN12=0
             	,SUM_VOZN12_NDS=0
     			,NUM_AKT=0
          WHERE KVIT.ID=REC1.KVIT_ID;	
		   
          -- Обновляем суммы в квите
          UPDATE KVIT SET
        		BILL_ID=REC1.ISU_KOD
        		,BILL_POS_ID=vBillPosId
        		,CENA=REC1.CENA
        		,CENA_OTP=REC1.CENA_OTP
        		,SUM_PROD=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_PROD
				  END)
        		,SUM_AKCIZ=0
        		,SUM_PROD_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_PROD_NDS
				  END)
        		,TARIF_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.TARIF_NDS
				  END)
        		,TARIF_GUARD_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.TARIF_GUARD_NDS
				  END)
        		,SUM_VOZN11=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN11
				  END)
        		,SUM_VOZN11_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN11_NDS
				  END)
        		,SUM_VOZN12=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN12
				  END)
        		,SUM_VOZN12_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN12_NDS
				  END)
				,NUM_AKT=vNumAkt
        	WHERE KVIT.ID=REC1.KVIT_ID;

          vPrevDok:=REC1.ISU_KOD;
          vPrevProd:=REC1.PROD_ID_NPR;
 
           END LOOP;			
		
		--суммы для счетов ЛУКОЙЛ 
		IF REC3.PROD_ID_NPR='10080' THEN
    		FOR REC1 IN (SELECT 
                            IBPR.ISU_KOD
                           ,MIN(IBPR.KVIT_ID) AS KVIT_ID 
                           ,MIN(KT.DATE_KVIT) AS DATE_KVIT 
                           ,KT.PROD_ID_NPR
                           ,MIN(IBP.PRICE) AS CENA
                           ,MIN(IBP.PRICE_WITH_NDS) AS CENA_OTP
                           ,MIN(IBP.SUMMA_BN-NVL(DK.SUM_PROD,0)) AS SUM_PROD
                           ,0 AS SUM_AKCIZ
                           ,MIN(IBP.SUMMA_NDS-NVL(DK.SUM_PROD_NDS,0)) AS SUM_PROD_NDS
                           ,MIN(IBP.TARIF_NDS-NVL(DK.TARIF_NDS,0)) AS TARIF_NDS 
                           ,MIN(IBP.TARIF_GUARD_NDS-NVL(DK.TARIF_GUARD_NDS,0)) AS TARIF_GUARD_NDS
                           ,MIN(IBP.SUMMA_VOZN_BN-NVL(DK.SUM_VOZN11,0)) AS SUM_VOZN11
                           ,MIN(ROUND(IBP.SUMMA_VOZN_BN*0.18,2)-NVL(DK.SUM_VOZN11_NDS,0)) AS SUM_VOZN11_NDS  
                           ,MIN(IBP.SUMMA_RAZN_BN-NVL(DK.SUM_VOZN12,0)) AS SUM_VOZN12
                           ,MIN(ROUND(IBP.SUMMA_RAZN_BN*0.18,2)-NVL(DK.SUM_VOZN12_NDS,0)) AS SUM_VOZN12_NDS
                         FROM 
                            ISU_BILL_POS_ROW IBPR
                           ,ISU_BILL_POS IBP
                           ,KVIT KT
						   ,DOP_KVIT DK
                         WHERE KT.DATE_KVIT=vDATE
                           AND IBPR.KVIT_ID=KT.ID
                           AND IBPR.ISU_KOD_POS=IBP.ISU_KOD_POS
                           AND IBPR.ISU_KOD=REC3.ISU_KOD
						   AND KT.ID=DK.ID(+)
                           GROUP BY IBPR.ISU_KOD,KT.PROD_ID_NPR
             			   ORDER BY IBPR.ISU_KOD,KT.PROD_ID_NPR
    			)
            LOOP

                 UPDATE KVIT SET 
                 		BILL_ID=REC1.ISU_KOD
                    	--,BILL_POS_ID=vBillPosId
                    	,CENA=REC1.CENA
                    	,CENA_OTP=REC1.CENA_OTP
                    	,SUM_PROD=REC1.SUM_PROD
                    	,SUM_AKCIZ=0
                    	,SUM_PROD_NDS=REC1.SUM_PROD_NDS
                    	,TARIF_NDS=REC1.TARIF_NDS
                    	,TARIF_GUARD_NDS=REC1.TARIF_GUARD_NDS
                    	,SUM_VOZN11=REC1.SUM_VOZN11
                    	,SUM_VOZN11_NDS=REC1.SUM_VOZN11_NDS
                    	,SUM_VOZN12=REC1.SUM_VOZN12
                    	,SUM_VOZN12_NDS=REC1.SUM_VOZN12_NDS
            			,NUM_AKT=vNumAkt
                 WHERE KVIT.ID=REC1.KVIT_ID;	

    		END LOOP;
		END IF;			

		--протоколы и даты цен 
		FOR REC2 IN(SELECT DISTINCT
				 		   K.ID		   				 		   
						   ,NPC.BEGIN_DATE
						   ,NPC.PROTOKOL_NUM AS PROTO_NUM
						   ,NPC.PROTOKOL_DATE AS PROTO_DATE
						   FROM ISU_BILLS IB
						   ,USL_DOG U
						   ,ISU_BILL_POS IBP
						   ,KLS_PROD P
						   ,NPR_PRICES NPC
						   ,ISU_BILL_POS_ROW IR
						   ,KVIT K
						   WHERE K.DATE_KVIT=vDATE
						   AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG
						   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
						   AND IB.ISU_KOD=REC3.ISU_KOD
						   AND IBP.MATERIAL_KSSS=P.KSSS_PROD_ID
						   AND NPC.CAT_CEN_ID=U.CAT_CEN_ID
						   AND NPC.PROD_ID_NPR=P.ID_NPR
						   AND NPC.IS_ORIGINAL=1	   
						   AND IB.ISU_KOD=IR.ISU_KOD
						   AND IR.KVIT_ID=K.ID
						   AND K.DATE_KVIT>=NPC.BEGIN_DATE
						   AND K.DATE_KVIT<=NVL(NPC.END_DATE,TO_DATE('31.12.2100','dd.mm.yyyy'))
						ORDER BY BEGIN_DATE   
					)
		LOOP
			
			UPDATE KVIT SET DATE_CENA=REC2.BEGIN_DATE,PROTO_NUM=REC2.PROTO_NUM,PROTO_DATE=REC2.PROTO_DATE WHERE ID=REC2.ID;
		
		END LOOP;
		
		
		--заполняем заголовок
		INSERT INTO BILLS (ISU_NOM_SF
			   		  ,NOM_SF /* PSV - номер нового счета =0 */
    		          ,DATE_VYP_SF
					  ,ISU_KOD
					  ,NOM_DOK
					  ,DATE_KVIT
					  ,FIO_ISPOL
					  ,KOL_DN
					  ,OLD_NOM_DOK
					  ,NOM_ZD
					  ,OWNER_ID
					  ,DOG_ID
					  ,USL_NUMBER
					  ,PROD_ID_NPR
					  ,DATE_MOS
					  ,IS_AGENT
					  ,NUM_5_DAY
					  ,KORR_5_DAY
					  ,NAZN_OTG_ID
					  ,DATE_PLAT
					  ,NO_AKCIZ
					  ,DATE_BUXG
					  )
          VALUES (REC3.ISU_NOM_SF
		  		 ,REC3.ISU_NOM_SF --,vNomSF с 01.01.2007 берем номер из r3
		         ,REC3.DATE_VYP_SF
				 ,REC3.ISU_KOD
				 ,TO_NUMBER(REC3.ISU_KOD)
				 ,REC3.DATE_KVIT
				 ,REC3.FIO_ISPOL
				 ,REC3.KOL_DN
				 ,REC3.ISU_KOD_OLD
				 ,REC3.NOM_ZD
				 ,REC3.OWNER_ID
				 ,REC3.DOG_ID
				 ,REC3.USL_NUMBER
				 ,REC3.PROD_ID_NPR
				 ,REC3.DATE_MOS
				 ,REC3.IS_AGENT
				 ,REC3.NUM_5_DAY
				 ,REC3.NUM_5_DAY
				 ,REC3.NAZN_OTG_ID
				 ,REC3.DATE_PLAT
				 ,REC3.NO_AKCIZ
				 ,REC3.DATE_BUXG
				 );
			 
     	-- суммы в заголовке
     	FOR REC4 IN (SELECT
     			 		   K.BILL_ID
					       ,MAX(K.PROTO_NUM) AS PROTO_NUM 
 					       ,MAX(K.PROTO_DATE) AS PROTO_DATE 
     					   ,SUM(SUM_PROD + SUM_PROD_NDS + TARIF + TARIF_NDS + TARIF_GUARD + TARIF_GUARD_NDS + SUM_VOZN11 + SUM_VOZN11_NDS + SUM_VOZN12 + SUM_VOZN12_NDS) AS SUMMA_DOK
     					   ,SUM(SUM_PROD_NDS + TARIF_NDS + TARIF_GUARD_NDS + SUM_VOZN11_NDS + SUM_VOZN12_NDS) AS NDS_DOK
     					   ,SUM(SUM_PROD + SUM_PROD_NDS) AS PROD_SUM
     					   ,SUM(SUM_PROD_NDS) AS PROD_NDS
     					   ,SUM(SUM_PROD + SUM_PROD_NDS) AS LUK_SUMMA_DOK
     					   ,SUM(SUM_PROD_NDS) AS LUK_NDS_DOK
     				  FROM KVIT K
     				  WHERE K.DATE_KVIT=vDATE
					  AND K.ID IN (SELECT KVIT_ID FROM ISU_BILL_POS_ROW WHERE ISU_KOD=REC3.ISU_KOD)
     				  GROUP BY K.BILL_ID
                      ORDER BY K.BILL_ID
     				 )
     	LOOP
     
     	UPDATE BILLS SET SUMMA_DOK=REC4.SUMMA_DOK
     	                    ,NDS_DOK=REC4.NDS_DOK
     						,PROD_SUM=REC4.PROD_SUM
     						,PROD_NDS=REC4.PROD_NDS
     						,LUK_SUMMA_DOK=REC4.LUK_SUMMA_DOK
     						,LUK_NDS_DOK=REC4.LUK_NDS_DOK
							,PROTO_NUM=REC4.PROTO_NUM
							,PROTO_DATE=REC4.PROTO_DATE
     	                WHERE ISU_KOD=REC3.ISU_KOD;
     
     	END LOOP;
				 
	--позиции по текущему СФ 
	FOR REC5 IN (SELECT
                       BT.NOM_DOK
                       ,K.BILL_POS_ID
					   ,MAX(BT.DATE_KVIT) AS DATE_REALIZ
                       ,SUM(K.VES) AS VES
                       ,MAX(K.CENA) AS CENA_BN
                       ,SUM(K.SUM_PROD) AS SUMMA_BN
                       ,SUM(K.SUM_AKCIZ) AS SUMMA_AKCIZ
                       ,SUM(K.SUM_PROD_NDS) AS SUMMA_NDS20
                       ,SUM(K.SUM_PROD + K.SUM_PROD_NDS) AS SUMMA
                       ,MAX(PR.ID_NPR) AS PROD_ID_NPR
                       ,MAX(BT.IS_AGENT) AS IS_AGENT
                       ,MAX(BT.NO_AKCIZ) AS NO_AKCIZ
                       ,SUM(K.TARIF) AS TARIF_BN
                       ,SUM(K.TARIF_NDS) AS TARIF_NDS
                       ,SUM(K.SUM_VOZN11) AS SUMMA_VOZN_BN
                       ,SUM(K.SUM_VOZN11_NDS) AS SUMMA_VOZN_NDS
                       ,SUM(K.SUM_VOZN12) AS SUMMA_RAZN_BN
                       ,SUM(K.SUM_VOZN12_NDS) AS SUMMA_RAZN_NDS
                       ,SUM(K.TARIF_GUARD) AS TARIF_GUARD_BN
                       ,SUM(K.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
					   ,MAX(K.PROTO_NUM) AS PROTO_NUM 
					   ,MAX(K.PROTO_DATE) AS PROTO_DATE 
                       FROM KVIT K,BILLS BT,KLS_PROD PR
                       WHERE K.DATE_KVIT=vDATE
                       AND K.PROD_ID_NPR=PR.ID_NPR
                       AND K.BILL_ID=BT.NOM_DOK
					   AND BT.NOM_DOK=REC3.ISU_KOD
                       GROUP BY BT.NOM_DOK,K.BILL_POS_ID
                       ORDER BY BT.NOM_DOK,K.BILL_POS_ID
                       )
	LOOP
	--продукт
	INSERT INTO BILL_POS (
		   					  BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 ,NUM_AKT
							 )
					VALUES(
							 REC5.BILL_POS_ID
							 ,REC5.NOM_DOK
		   					 ,REC5.VES
							 ,REC5.CENA_BN
							 ,REC5.SUMMA_BN
							 ,REC5.SUMMA_AKCIZ
							 ,REC5.SUMMA_NDS20
							 ,REC5.SUMMA
							 ,REC5.PROD_ID_NPR
							 ,REC5.IS_AGENT
							 ,REC5.NO_AKCIZ
							 ,1
							 ,1
							 ,REC5.PROTO_NUM
							 ,REC5.PROTO_DATE
							 ,REC5.DATE_REALIZ
							 ,vNumAkt
							 );	
	END LOOP;

	--УСЛУГИ
	FOR REC6 IN (SELECT
                       BT.NOM_DOK
					   ,MAX(BT.DATE_KVIT) AS DATE_REALIZ
                       ,SUM(K.VES) AS VES
                       ,MAX(K.CENA) AS CENA_BN
                       ,SUM(K.SUM_PROD) AS SUMMA_BN
                       ,SUM(K.SUM_AKCIZ) AS SUMMA_AKCIZ
                       ,SUM(K.SUM_PROD_NDS) AS SUMMA_NDS20
                       ,SUM(K.SUM_PROD+K.SUM_PROD_NDS) AS SUMMA
                       ,MAX(PR.ID_NPR) AS PROD_ID_NPR
                       ,MAX(BT.IS_AGENT) AS IS_AGENT
                       ,MAX(BT.NO_AKCIZ) AS NO_AKCIZ
                       ,SUM(K.TARIF) AS TARIF_BN
                       ,SUM(K.TARIF_NDS) AS TARIF_NDS
                       ,SUM(K.SUM_VOZN11) AS SUMMA_VOZN_BN
                       ,SUM(K.SUM_VOZN11_NDS) AS SUMMA_VOZN_NDS
                       ,SUM(K.SUM_VOZN12) AS SUMMA_RAZN_BN
                       ,SUM(K.SUM_VOZN12_NDS) AS SUMMA_RAZN_NDS
                       ,SUM(K.TARIF_GUARD) AS TARIF_GUARD_BN
                       ,SUM(K.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
					   ,MAX(K.PROTO_NUM) AS PROTO_NUM 
					   ,MAX(K.PROTO_DATE) AS PROTO_DATE 
                       FROM KVIT K,BILLS BT,KLS_PROD PR
                       WHERE K.DATE_KVIT=vDATE
                       AND K.PROD_ID_NPR=PR.ID_NPR
                       AND K.BILL_ID=BT.NOM_DOK
					   AND BT.NOM_DOK=REC3.ISU_KOD
                       GROUP BY BT.NOM_DOK
                       ORDER BY BT.NOM_DOK
                       )
	LOOP
	--тариф
	IF REC6.TARIF_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  10
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.TARIF_BN
							 ,0
							 ,REC6.TARIF_NDS
							 ,REC6.TARIF_BN+REC6.TARIF_NDS
							 ,10010
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--вознаграждение
	IF REC6.SUMMA_VOZN_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  11
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.SUMMA_VOZN_BN
							 ,0
							 ,REC6.SUMMA_VOZN_NDS
							 ,REC6.SUMMA_VOZN_BN+REC6.SUMMA_VOZN_NDS
							 ,10011
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--разница
	IF REC6.SUMMA_RAZN_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  12
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.SUMMA_RAZN_BN
							 ,0
							 ,REC6.SUMMA_RAZN_NDS
							 ,REC6.SUMMA_RAZN_BN+REC6.SUMMA_RAZN_NDS
							 ,10012
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--охрана
	IF REC6.TARIF_GUARD_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  13
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.TARIF_GUARD_BN
							 ,0
							 ,REC6.TARIF_GUARD_NDS
							 ,REC6.TARIF_GUARD_BN+REC6.TARIF_GUARD_NDS
							 ,10013
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	END LOOP;
				 
END LOOP;
COMMIT;

END P_Load_Sf_R3; 
/

--
-- P_LOAD_SF_R3_FILLNOMSF  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_LOAD_SF_R3_FILLNOMSF (vDATE DATE,vFIRSTNUM NUMBER) IS
SFNUM NUMBER;
BEGIN
	
	SFNUM:=vFIRSTNUM;
	 
	IF vFIRSTNUM>0 THEN
	  FOR LCUR IN (SELECT NOM_DOK,DOG_ID FROM BILLS K 
				          WHERE K.DATE_KVIT=vDATE
				          AND ISU_NOM_SF||' '<>' '
				          AND NOM_SF=0	
			       ) 
	   LOOP
		
				UPDATE BILLS SET NOM_SF=SFNUM WHERE NOM_DOK=LCUR.NOM_DOK;
    			
				--НОМЕР АКТА
				IF LCUR.DOG_ID=2519 THEN
				   UPDATE KVIT SET NUM_AKT=SFNUM WHERE BILL_ID=LCUR.NOM_DOK; 
				   UPDATE BILL_POS SET NUM_AKT=SFNUM WHERE NOM_DOK=LCUR.NOM_DOK AND BILL_POS_ID<10;
				END IF;
				    		
				SFNUM:=SFNUM+1;

	  END LOOP;		
	  
	  -- заполнение KVIT_NOMSF
	  DELETE FROM KVIT_NOMSF
	  WHERE KVIT_ID IN (SELECT ID FROM KVIT WHERE DATE_KVIT=vDATE);

	  INSERT INTO KVIT_NOMSF 
	  SELECT DISTINCT K.ID AS KVIT_ID,B.NOM_SF
      FROM KVIT K,BILLS B
      WHERE K.DATE_KVIT=vDATE
      AND K.BILL_ID=B.NOM_DOK
      AND K.BILL_ID<>0;
      	
	END IF;

	
	
	COMMIT;

END P_LOAD_SF_R3_FILLNOMSF;

/

--
-- P_LOAD_SF_R3_OLD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_LOAD_SF_R3_OLD (vDATE DATE) IS
  vPrevDok NUMBER;
  vPrevProd VARCHAR2(5);
  vBillPosId NUMBER;
  vNomSf NUMBER;
  vNumAkt NUMBER;
BEGIN
vBillPosId:=1;

--Удаляем все товарные фактуры за сутки
DELETE FROM BILL_POS WHERE NOM_DOK IN (SELECT NOM_DOK FROM BILLS WHERE DATE_KVIT=vDATE 
   AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080'));
UPDATE KVIT SET BILL_ID=0 WHERE BILL_ID IN (SELECT NOM_DOK FROM BILLS WHERE DATE_KVIT=vDATE 
   AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080'));
DELETE FROM BILLS WHERE DATE_KVIT=vDATE AND (PROD_ID_NPR>='10100' OR PROD_ID_NPR='10080');
   
--цикл по заголовкам
FOR REC3 IN (SELECT /*+ ORDERED */ DISTINCT 
	 	 		IB.NOM_SF AS ISU_NOM_SF
		 		,IB.DATE_VYP_SF
		 		,IB.ISU_KOD
		 		,K.DATE_KVIT
				,FOR_INIT.GetCurrUser AS FIO_ISPOL
				,TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS KOL_DN
				,IB.ISU_KOD_OLD
				,(CASE
				      WHEN D.ID=2519 THEN '?'
					  ELSE K.NOM_ZD
				  END) AS NOM_ZD
				,8 AS OWNER_ID
				,D.ID AS DOG_ID
				,M.USL_NUMBER
				,(CASE
				      WHEN D.ID=2519 THEN '10080'
					  ELSE P.ID_NPR
				  END) AS PROD_ID_NPR
				,K.DATE_KVIT AS DATE_MOS
				,D.IS_AGENT
				,(CASE
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 1 AND 5 THEN 1
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 6 AND 10 THEN 2
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 11 AND 15 THEN 3
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 16 AND 20 THEN 4
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD')) BETWEEN 20 AND 25 THEN 5
				  	   WHEN TO_NUMBER(TO_CHAR(K.DATE_KVIT,'DD'))>25 THEN 6
					   ELSE 0
				  END) as NUM_5_DAY
				,M.NAZN_OTG_ID
				,K.DATE_KVIT+TO_NUMBER(SUBSTR(IB.USL_PLAT,3)) AS DATE_PLAT
				,1-NVL(IBP.IS_AKCIZ,0) AS NO_AKCIZ
				,K.DATE_KVIT AS DATE_BUXG
				,NVL(IB.STATUS,0) AS STATUS
		 FROM KVIT K
			  ,MONTH M
   		 	  ,ISU_BILL_POS_ROW IR
		      ,ISU_BILLS IB
			  ,ISU_BILL_POS IBP
			  ,KLS_DOG D
			  ,USL_DOG U
			  ,KLS_PROD P
		 WHERE IB.DATE_KVIT=vDATE
		   AND K.NOM_ZD=M.NOM_ZD
		   AND IR.KVIT_ID=K.ID
	 	   AND IB.ISU_KOD=IR.ISU_KOD
		   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
		   AND SUBSTR(IB.ISU_KOD_DOG,1,10)=SUBSTR(D.ISU_KOD_DOG,1,10)
		   AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG
		   AND K.PROD_ID_NPR=P.ID_NPR
		   AND NVL(IB.STATUS,0) IN (0,3)
		   AND IB.LATENT||' '<>'X'
			   )
LOOP

		-- Для корректирующего счета
		IF REC3.STATUS=3 THEN 
		   DELETE FROM DOP_KVIT DK WHERE DK.BILL_ID=REC3.ISU_KOD_OLD;  
		   INSERT INTO DOP_KVIT SELECT * FROM KVIT K WHERE K.BILL_ID=REC3.ISU_KOD_OLD;  
		END IF;

		vNumAkt:=0;
		
		/*
		--ищем старый NUM_AKT
		SELECT NVL(MAX(NUM_AKT),0) AS NUMAKT INTO vNumAkt FROM KVIT_NUMAKT KNA 
		WHERE KNA.NOM_DOK=REC3.ISU_KOD;
		
		IF rec3.PROD_ID_NPR='10080' AND vNumAkt=0 THEN
		  --определяем NUM_AKT
          vNumAkt:=for_documents.GET_NEXT_NUM(12,0,'',rec3.DATE_KVIT);
		  -- сохраняем NUM_AKT
          for_documents.SET_NUM(12,0,0,'',vNumAkt,rec3.DATE_KVIT);
		  -- заполняем таблицу соответствия
		  UPDATE KVIT_NUMAKT SET NUM_AKT=vNumAkt,DATE_AKT=rec3.DATE_KVIT
 		   WHERE NOM_DOK=REC3.ISU_KOD;
		  IF SQL%NOTFOUND THEN  
  		    INSERT INTO KVIT_NUMAKT (NUM_AKT,DATE_AKT,NOM_DOK)
			  VALUES (vNumAkt,rec3.DATE_KVIT,REC3.ISU_KOD);
		  END IF;	  
        end if;
		*/

		--ищем старый NOM_SF
		SELECT NVL(MAX(NOM_SF),0) AS NOMSF INTO vNomSF FROM KVIT_NOMSF KSF 
		WHERE KSF.KVIT_ID IN (SELECT KVIT_ID FROM ISU_BILL_POS_ROW A WHERE A.ISU_KOD=REC3.ISU_KOD);

		IF rec3.PROD_ID_NPR='10080' AND vNumAkt=0 THEN
  		  vNumAkt:=vNomSF;
		END IF;  
		
		--заполняем KVIT для  
		   FOR REC1 IN (SELECT
        	 		    IBPR.ISU_KOD
        			   ,IBPR.KVIT_ID
        			   ,KT.DATE_KVIT
        			   ,KT.PROD_ID_NPR
        			   ,IBP.PRICE AS CENA
        			   ,IBP.PRICE_WITH_NDS AS CENA_OTP
        			   ,(IBP.SUMMA_BN-NVL(DK.SUM_PROD,0)) AS SUM_PROD
        			   ,0 AS SUM_AKCIZ
        			   ,(IBP.SUMMA_NDS-NVL(DK.SUM_PROD_NDS,0)) AS SUM_PROD_NDS
        			   ,(IBP.TARIF_NDS-NVL(DK.TARIF_NDS,0)) AS TARIF_NDS 
        			   ,(IBP.TARIF_GUARD_NDS-NVL(DK.TARIF_GUARD_NDS,0)) AS TARIF_GUARD_NDS 
        			   ,(IBP.SUMMA_VOZN_BN-NVL(DK.SUM_VOZN11,0)) AS SUM_VOZN11
        			   ,(ROUND(IBP.SUMMA_VOZN_BN*0.18,2)-NVL(DK.SUM_VOZN11_NDS,0)) AS SUM_VOZN11_NDS  
        			   ,(IBP.SUMMA_RAZN_BN-NVL(DK.SUM_VOZN12,0)) AS SUM_VOZN12
        			   ,(ROUND(IBP.SUMMA_RAZN_BN*0.18,2)-NVL(DK.SUM_VOZN12_NDS,0)) AS SUM_VOZN12_NDS
        			 FROM 
        		 	   ISU_BILL_POS_ROW IBPR
        			   ,ISU_BILL_POS IBP
        			   ,KVIT KT
					   ,DOP_KVIT DK
        			 WHERE KT.DATE_KVIT=vDATE
        			   AND IBPR.KVIT_ID=KT.ID
        			   AND IBPR.ISU_KOD_POS=IBP.ISU_KOD_POS
        			   AND IBPR.ISU_KOD=REC3.ISU_KOD
					   AND KT.ID=DK.ID(+)
        			 ORDER BY IBPR.ISU_KOD,KT.PROD_ID_NPR
					 ) 
           LOOP
 
           /* PSV - определяем BILL_POS_ID */
           IF vPrevDok<>REC1.ISU_KOD THEN
           	   vBillPosId:=1;
           ELSE
               IF vPrevProd<>REC1.PROD_ID_NPR THEN
               	  vBillPosId:=vBillPosId+1;
        	   END IF;
           END IF;	  

          UPDATE KVIT SET 
          		--BILL_ID=REC1.ISU_KOD
             	--,BILL_POS_ID=vBillPosId
             	CENA=0
             	,CENA_OTP=0
             	,SUM_PROD=0
             	,SUM_AKCIZ=0
             	,SUM_PROD_NDS=0
             	,TARIF_NDS=0
             	,TARIF_GUARD_NDS=0
             	,SUM_VOZN11=0
             	,SUM_VOZN11_NDS=0
             	,SUM_VOZN12=0
             	,SUM_VOZN12_NDS=0
     			,NUM_AKT=0
          WHERE KVIT.ID=REC1.KVIT_ID;	
		   
          -- Обновляем суммы в квите
          UPDATE KVIT SET
        		BILL_ID=REC1.ISU_KOD
        		,BILL_POS_ID=vBillPosId
        		,CENA=REC1.CENA
        		,CENA_OTP=REC1.CENA_OTP
        		,SUM_PROD=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_PROD
				  END)
        		,SUM_AKCIZ=0
        		,SUM_PROD_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_PROD_NDS
				  END)
        		,TARIF_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.TARIF_NDS
				  END)
        		,TARIF_GUARD_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.TARIF_GUARD_NDS
				  END)
        		,SUM_VOZN11=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN11
				  END)
        		,SUM_VOZN11_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN11_NDS
				  END)
        		,SUM_VOZN12=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN12
				  END)
        		,SUM_VOZN12_NDS=(CASE
					   WHEN REC3.PROD_ID_NPR='10080' THEN 0
					   ELSE REC1.SUM_VOZN12_NDS
				  END)
				,NUM_AKT=vNumAkt
        	WHERE KVIT.ID=REC1.KVIT_ID;

          vPrevDok:=REC1.ISU_KOD;
          vPrevProd:=REC1.PROD_ID_NPR;
 
           END LOOP;			
		
		--суммы для счетов ЛУКОЙЛ 
		IF REC3.PROD_ID_NPR='10080' THEN
    		FOR REC1 IN (SELECT 
                            IBPR.ISU_KOD
                           ,MIN(IBPR.KVIT_ID) AS KVIT_ID 
                           ,MIN(KT.DATE_KVIT) AS DATE_KVIT 
                           ,KT.PROD_ID_NPR
                           ,MIN(IBP.PRICE) AS CENA
                           ,MIN(IBP.PRICE_WITH_NDS) AS CENA_OTP
                           ,MIN(IBP.SUMMA_BN-NVL(DK.SUM_PROD,0)) AS SUM_PROD
                           ,0 AS SUM_AKCIZ
                           ,MIN(IBP.SUMMA_NDS-NVL(DK.SUM_PROD_NDS,0)) AS SUM_PROD_NDS
                           ,MIN(IBP.TARIF_NDS-NVL(DK.TARIF_NDS,0)) AS TARIF_NDS 
                           ,MIN(IBP.TARIF_GUARD_NDS-NVL(DK.TARIF_GUARD_NDS,0)) AS TARIF_GUARD_NDS
                           ,MIN(IBP.SUMMA_VOZN_BN-NVL(DK.SUM_VOZN11,0)) AS SUM_VOZN11
                           ,MIN(ROUND(IBP.SUMMA_VOZN_BN*0.18,2)-NVL(DK.SUM_VOZN11_NDS,0)) AS SUM_VOZN11_NDS  
                           ,MIN(IBP.SUMMA_RAZN_BN-NVL(DK.SUM_VOZN12,0)) AS SUM_VOZN12
                           ,MIN(ROUND(IBP.SUMMA_RAZN_BN*0.18,2)-NVL(DK.SUM_VOZN12_NDS,0)) AS SUM_VOZN12_NDS
                         FROM 
                            ISU_BILL_POS_ROW IBPR
                           ,ISU_BILL_POS IBP
                           ,KVIT KT
						   ,DOP_KVIT DK
                         WHERE KT.DATE_KVIT=vDATE
                           AND IBPR.KVIT_ID=KT.ID
                           AND IBPR.ISU_KOD_POS=IBP.ISU_KOD_POS
                           AND IBPR.ISU_KOD=REC3.ISU_KOD
						   AND KT.ID=DK.ID(+)
                           GROUP BY IBPR.ISU_KOD,KT.PROD_ID_NPR
             			   ORDER BY IBPR.ISU_KOD,KT.PROD_ID_NPR
    			)
            LOOP

                 UPDATE KVIT SET 
                 		BILL_ID=REC1.ISU_KOD
                    	--,BILL_POS_ID=vBillPosId
                    	,CENA=REC1.CENA
                    	,CENA_OTP=REC1.CENA_OTP
                    	,SUM_PROD=REC1.SUM_PROD
                    	,SUM_AKCIZ=0
                    	,SUM_PROD_NDS=REC1.SUM_PROD_NDS
                    	,TARIF_NDS=REC1.TARIF_NDS
                    	,TARIF_GUARD_NDS=REC1.TARIF_GUARD_NDS
                    	,SUM_VOZN11=REC1.SUM_VOZN11
                    	,SUM_VOZN11_NDS=REC1.SUM_VOZN11_NDS
                    	,SUM_VOZN12=REC1.SUM_VOZN12
                    	,SUM_VOZN12_NDS=REC1.SUM_VOZN12_NDS
            			,NUM_AKT=vNumAkt
                 WHERE KVIT.ID=REC1.KVIT_ID;	

    		END LOOP;
		END IF;			

		--протоколы и даты цен 
		FOR REC2 IN(SELECT DISTINCT
				 		   K.ID		   				 		   
						   ,NPC.BEGIN_DATE
						   ,NPC.PROTOKOL_NUM AS PROTO_NUM
						   ,NPC.PROTOKOL_DATE AS PROTO_DATE
						   FROM ISU_BILLS IB
						   ,USL_DOG U
						   ,ISU_BILL_POS IBP
						   ,KLS_PROD P
						   ,NPR_PRICES NPC
						   ,ISU_BILL_POS_ROW IR
						   ,KVIT K
						   WHERE K.DATE_KVIT=vDATE
						   AND IB.ISU_KOD_DOG=U.ISU_KOD_DOG
						   AND IB.ISU_KOD=SUBSTR(IBP.ISU_KOD_POS,1,10)
						   AND IB.ISU_KOD=REC3.ISU_KOD
						   AND IBP.MATERIAL_KSSS=P.KSSS_PROD_ID
						   AND NPC.CAT_CEN_ID=U.CAT_CEN_ID
						   AND NPC.PROD_ID_NPR=P.ID_NPR
						   AND NPC.IS_ORIGINAL=1	   
						   AND IB.ISU_KOD=IR.ISU_KOD
						   AND IR.KVIT_ID=K.ID
						   AND K.DATE_KVIT>=NPC.BEGIN_DATE
						   AND K.DATE_KVIT<=NVL(NPC.END_DATE,TO_DATE('31.12.2100','dd.mm.yyyy'))
						ORDER BY BEGIN_DATE   
					)
		LOOP
			
			UPDATE KVIT SET DATE_CENA=REC2.BEGIN_DATE,PROTO_NUM=REC2.PROTO_NUM,PROTO_DATE=REC2.PROTO_DATE WHERE ID=REC2.ID;
		
		END LOOP;
		
		
		--заполняем заголовок
		INSERT INTO BILLS (ISU_NOM_SF
			   		  ,NOM_SF /* PSV - номер нового счета =0 */
    		          ,DATE_VYP_SF
					  ,ISU_KOD
					  ,NOM_DOK
					  ,DATE_KVIT
					  ,FIO_ISPOL
					  ,KOL_DN
					  ,OLD_NOM_DOK
					  ,NOM_ZD
					  ,OWNER_ID
					  ,DOG_ID
					  ,USL_NUMBER
					  ,PROD_ID_NPR
					  ,DATE_MOS
					  ,IS_AGENT
					  ,NUM_5_DAY
					  ,KORR_5_DAY
					  ,NAZN_OTG_ID
					  ,DATE_PLAT
					  ,NO_AKCIZ
					  ,DATE_BUXG
					  )
          VALUES (REC3.ISU_NOM_SF
		  		 ,vNomSF -- до 01.01.2007 берем номер из MASTER
		         ,REC3.DATE_VYP_SF
				 ,REC3.ISU_KOD
				 ,TO_NUMBER(REC3.ISU_KOD)
				 ,REC3.DATE_KVIT
				 ,REC3.FIO_ISPOL
				 ,REC3.KOL_DN
				 ,REC3.ISU_KOD_OLD
				 ,REC3.NOM_ZD
				 ,REC3.OWNER_ID
				 ,REC3.DOG_ID
				 ,REC3.USL_NUMBER
				 ,REC3.PROD_ID_NPR
				 ,REC3.DATE_MOS
				 ,REC3.IS_AGENT
				 ,REC3.NUM_5_DAY
				 ,REC3.NUM_5_DAY
				 ,REC3.NAZN_OTG_ID
				 ,REC3.DATE_PLAT
				 ,REC3.NO_AKCIZ
				 ,REC3.DATE_BUXG
				 );
			 
     	-- суммы в заголовке
     	FOR REC4 IN (SELECT
     			 		   K.BILL_ID
					       ,MAX(K.PROTO_NUM) AS PROTO_NUM 
 					       ,MAX(K.PROTO_DATE) AS PROTO_DATE 
     					   ,SUM(SUM_PROD + SUM_PROD_NDS + TARIF + TARIF_NDS + TARIF_GUARD + TARIF_GUARD_NDS + SUM_VOZN11 + SUM_VOZN11_NDS + SUM_VOZN12 + SUM_VOZN12_NDS) AS SUMMA_DOK
     					   ,SUM(SUM_PROD_NDS + TARIF_NDS + TARIF_GUARD_NDS + SUM_VOZN11_NDS + SUM_VOZN12_NDS) AS NDS_DOK
     					   ,SUM(SUM_PROD + SUM_PROD_NDS) AS PROD_SUM
     					   ,SUM(SUM_PROD_NDS) AS PROD_NDS
     					   ,SUM(SUM_PROD + SUM_PROD_NDS) AS LUK_SUMMA_DOK
     					   ,SUM(SUM_PROD_NDS) AS LUK_NDS_DOK
     				  FROM KVIT K
     				  WHERE K.DATE_KVIT=vDATE
					  AND K.ID IN (SELECT KVIT_ID FROM ISU_BILL_POS_ROW WHERE ISU_KOD=REC3.ISU_KOD)
     				  GROUP BY K.BILL_ID
     				 )
     	LOOP
     
     	UPDATE BILLS SET SUMMA_DOK=REC4.SUMMA_DOK
     	                    ,NDS_DOK=REC4.NDS_DOK
     						,PROD_SUM=REC4.PROD_SUM
     						,PROD_NDS=REC4.PROD_NDS
     						,LUK_SUMMA_DOK=REC4.LUK_SUMMA_DOK
     						,LUK_NDS_DOK=REC4.LUK_NDS_DOK
							,PROTO_NUM=REC4.PROTO_NUM
							,PROTO_DATE=REC4.PROTO_DATE
     	                WHERE ISU_KOD=REC3.ISU_KOD;
     
     	END LOOP;
				 
	--позиции по текущему СФ 
	FOR REC5 IN (SELECT
                       BT.NOM_DOK
                       ,K.BILL_POS_ID
					   ,MAX(BT.DATE_KVIT) as DATE_REALIZ
                       ,SUM(K.VES) AS VES
                       ,MAX(K.CENA) AS CENA_BN
                       ,SUM(K.SUM_PROD) AS SUMMA_BN
                       ,SUM(K.SUM_AKCIZ) AS SUMMA_AKCIZ
                       ,SUM(K.SUM_PROD_NDS) AS SUMMA_NDS20
                       ,SUM(K.SUM_PROD + K.SUM_PROD_NDS) AS SUMMA
                       ,MAX(PR.ID_NPR) AS PROD_ID_NPR
                       ,MAX(BT.IS_AGENT) AS IS_AGENT
                       ,MAX(BT.NO_AKCIZ) AS NO_AKCIZ
                       ,SUM(K.TARIF) AS TARIF_BN
                       ,SUM(K.TARIF_NDS) AS TARIF_NDS
                       ,SUM(K.SUM_VOZN11) AS SUMMA_VOZN_BN
                       ,SUM(K.SUM_VOZN11_NDS) AS SUMMA_VOZN_NDS
                       ,SUM(K.SUM_VOZN12) AS SUMMA_RAZN_BN
                       ,SUM(K.SUM_VOZN12_NDS) AS SUMMA_RAZN_NDS
                       ,SUM(K.TARIF_GUARD) AS TARIF_GUARD_BN
                       ,SUM(K.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
					   ,MAX(K.PROTO_NUM) AS PROTO_NUM 
					   ,MAX(K.PROTO_DATE) AS PROTO_DATE 
                       FROM KVIT K,BILLS BT,KLS_PROD PR
                       WHERE K.DATE_KVIT=vDATE
                       AND K.PROD_ID_NPR=PR.ID_NPR
                       AND K.BILL_ID=BT.NOM_DOK
					   AND BT.NOM_DOK=REC3.ISU_KOD
                       GROUP BY BT.NOM_DOK,K.BILL_POS_ID
                       )
	LOOP
	--продукт
	INSERT INTO BILL_POS (
		   					  BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 ,NUM_AKT
							 )
					VALUES(
							 REC5.BILL_POS_ID
							 ,REC5.NOM_DOK
		   					 ,REC5.VES
							 ,REC5.CENA_BN
							 ,REC5.SUMMA_BN
							 ,REC5.SUMMA_AKCIZ
							 ,REC5.SUMMA_NDS20
							 ,REC5.SUMMA
							 ,REC5.PROD_ID_NPR
							 ,REC5.IS_AGENT
							 ,REC5.NO_AKCIZ
							 ,1
							 ,1
							 ,REC5.PROTO_NUM
							 ,REC5.PROTO_DATE
							 ,REC5.DATE_REALIZ
							 ,vNumAkt
							 );	
	END LOOP;

	--УСЛУГИ
	FOR REC6 IN (SELECT
                       BT.NOM_DOK
					   ,MAX(BT.DATE_KVIT) as DATE_REALIZ
                       ,SUM(K.VES) AS VES
                       ,MAX(K.CENA) AS CENA_BN
                       ,SUM(K.SUM_PROD) AS SUMMA_BN
                       ,SUM(K.SUM_AKCIZ) AS SUMMA_AKCIZ
                       ,SUM(K.SUM_PROD_NDS) AS SUMMA_NDS20
                       ,SUM(K.SUM_PROD+K.SUM_PROD_NDS) AS SUMMA
                       ,MAX(PR.ID_NPR) AS PROD_ID_NPR
                       ,MAX(BT.IS_AGENT) AS IS_AGENT
                       ,MAX(BT.NO_AKCIZ) AS NO_AKCIZ
                       ,SUM(K.TARIF) AS TARIF_BN
                       ,SUM(K.TARIF_NDS) AS TARIF_NDS
                       ,SUM(K.SUM_VOZN11) AS SUMMA_VOZN_BN
                       ,SUM(K.SUM_VOZN11_NDS) AS SUMMA_VOZN_NDS
                       ,SUM(K.SUM_VOZN12) AS SUMMA_RAZN_BN
                       ,SUM(K.SUM_VOZN12_NDS) AS SUMMA_RAZN_NDS
                       ,SUM(K.TARIF_GUARD) AS TARIF_GUARD_BN
                       ,SUM(K.TARIF_GUARD_NDS) AS TARIF_GUARD_NDS
					   ,MAX(K.PROTO_NUM) AS PROTO_NUM 
					   ,MAX(K.PROTO_DATE) AS PROTO_DATE 
                       FROM KVIT K,BILLS BT,KLS_PROD PR
                       WHERE K.DATE_KVIT=vDATE
                       AND K.PROD_ID_NPR=PR.ID_NPR
                       AND K.BILL_ID=BT.NOM_DOK
					   AND BT.NOM_DOK=REC3.ISU_KOD
                       GROUP BY BT.NOM_DOK
                       )
	LOOP
	--тариф
	IF REC6.TARIF_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  10
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.TARIF_BN
							 ,0
							 ,REC6.TARIF_NDS
							 ,REC6.TARIF_BN+REC6.TARIF_NDS
							 ,10010
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--вознаграждение
	IF REC6.SUMMA_VOZN_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  11
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.SUMMA_VOZN_BN
							 ,0
							 ,REC6.SUMMA_VOZN_NDS
							 ,REC6.SUMMA_VOZN_BN+REC6.SUMMA_VOZN_NDS
							 ,10011
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--разница
	IF REC6.SUMMA_RAZN_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  12
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.SUMMA_RAZN_BN
							 ,0
							 ,REC6.SUMMA_RAZN_NDS
							 ,REC6.SUMMA_RAZN_BN+REC6.SUMMA_RAZN_NDS
							 ,10012
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	--охрана
	IF REC6.TARIF_GUARD_BN<>0 THEN
	INSERT INTO BILL_POS (
		   					 BILL_POS_ID
							 ,NOM_DOK
		   					 ,VES
							 ,CENA_BN
							 ,SUMMA_BN
							 ,SUMMA_AKCIZ
							 ,SUMMA_NDS20
							 ,SUMMA
							 ,PROD_ID_NPR
							 ,IS_AGENT
							 ,NO_AKCIZ
							 ,OWNERSHIP_ID
							 ,IS_LUK
							 ,PROTO_NUM
							 ,PROTO_DATE
							 ,DATE_REALIZ
							 )
					VALUES(
							  13
							 ,REC6.NOM_DOK
		   					 ,0
							 ,0
							 ,REC6.TARIF_GUARD_BN
							 ,0
							 ,REC6.TARIF_GUARD_NDS
							 ,REC6.TARIF_GUARD_BN+REC6.TARIF_GUARD_NDS
							 ,10013
							 ,REC6.IS_AGENT
							 ,REC6.NO_AKCIZ
							 ,13
							 ,0
							 ,REC6.PROTO_NUM
							 ,REC6.PROTO_DATE
							 ,REC6.DATE_REALIZ
							 );
	END IF;
	END LOOP;
				 
END LOOP;
COMMIT;
END P_LOAD_SF_R3_OLD;

/

--
-- RENEW_MONTH  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Month (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  v_dat DATE;
BEGIN

  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

  UPDATE MASTER.MONTH M_M
    SET (prod_id_npr,tex_pd_id,poluch_id,vetka_id,gosprog_id,nazn_otg_id,tonn_declared,tonn_loaded,
		 cist_declared,cist_loaded,FLG_ALLOW_8_AXES,flg_upper_sliv,flg_dop_cist,flg_forma_2,flg_obogr,
		 load_abbr,date_plan,prim,cena,cena_otp,sum_zd,gr4,k_tar,
		 dog_id,usl_number,stan_id,stanotp_id,npr_sobstv_id,input_date,update_date,tarif1tonn,potreb_id,
		 npodog_id,grotp_id,date_cen,GP_NAPR_ID, TONN_R, CIST_R, TRANSPORT, IS_EXP, SUPPLIER_ID, CENA_OTP_NPO,kol_dn_npo,
		 TONN_RAZNAR,CIST_RAZNAR,ZAKAZ_ID,ZAKAZ_HIST_ID,EXPED_ID,GU12_A_ID,POKUP_DOG_ID,POKUP_USL_NUMBER,
		 STAN_PER_ID,INCOTERM_ID,VZISK_ID/*,ZAKAZ_KOD_ISU*/
		 )
	 = (
SELECT L_M.kod_npr,L_M.kod_tex_pd,L_M.kod_poluch,L_M.kvet,L_M.program,
	           L_M.kod_otgr,NVL(L_M.tonn,0),NVL(L_M.otgr,0),
			   ROUND(NVL(L_M.tonn,0)/L_M.NORMOTGR),
			   NVL(L_M.otgr_cist,0),L_M.osn_8,
			   L_M.sliv_v,Iif(L_M.dop_cist,1,0),DECODE(L_M.forma_2,0,DECODE(L_M.vzisk_id,1,3,2,4,0),L_M.forma_2),
			   L_M.obogr,L_M.otgrr,
			   L_M.date_plan,L_M.prim,L_M.cena,L_M.cena_otp,L_M.sum_zd,L_M.gr4,
			   L_M.k_tar,D.ID, L_M.k_usl, L_M.STAN_ID, s_o.ID, S_S.PREDPR_ID, L_M.vvoddat, 
			   L_M.kordat,L_M.tarif1tonn,L_M.kod_potreb, d2.ID, L_M.kod_grotp, L_M.DATE_CEN,
			   L_M.gp_napr, L_M.tonn_r, L_M.k_cistr, L_M.transp, DECODE(L_M.prizn_mps,3,1,0),S_P.PREDPR_ID, L_M.SCENA_OTP, L_M.SKOL_DN,
			   NVL(L_M.TONN_R,0),NVL(L_M.k_cistr,0), ZAKAZ_ID, l_m.ZAKAZ_HIST, L_M.EXPED_ID, NVL(etran.ID,etran_exp.ID),
			   POKUP_DOG.ID,L_M.K_USL_POK,S_P.STAN_ID,i.ID,l_m.VZISK_ID/*,l_m.kod_isu - обновляется из ZAKAZ */
          FROM 
		    (SELECT MONTH.*, P.PROD_GU12_ID, DECODE(NVL(P.NORMOTGR,0),0,55,P.NORMOTGR) as NORMOTGR,KLS_TEX_PD.PLATTARIF_ID,S.ID AS STAN_ID,
			    E.PREDPR_ID as EXPED_ID
			      FROM load_buffer.MONTH,KLS_PROD P,KLS_TEX_PD,KLS_STAN S,
 		          	(SELECT * FROM PREDPR_ROLE WHERE KLS_ROLE_ID=3) E
				  WHERE MONTH.kod_npr=P.ID_NPR
		            AND MONTH.KOD_TEX_PD=KLS_TEX_PD.ID(+)
 	                AND MONTH.KOD_GROTPR=KLS_TEX_PD.GROTP_ID(+)
					AND MONTH.KST = S.STAN_KOD  
               	    AND MONTH.exped = E.KOD_MOSCOW(+)
				  ) L_M, 
			(SELECT * FROM STAN_ROLE WHERE KLS_ROLE_ID=2) S_P, KLS_INCOTERM i, 				   	  
		    KLS_DOG D, KLS_DOG D2, KLS_STAN S_O, KLS_DOG POKUP_DOG, 
		    (SELECT * FROM PREDPR_ROLE WHERE KLS_ROLE_ID=1) S_S, 
			(SELECT * FROM PREDPR_ROLE WHERE KLS_ROLE_ID=1) S_P, 
			(SELECT trim(a.nom_z) as nom_z, TO_CHAR(a.prod_id) as PROD_GU12_ID, 
			     TRUNC(a.from_date,'MONTH') as date_plan, MAX(a.id) as id,
				 b.STAN_ID,a.PLATTAR_ID 
			   FROM gu12_a a, gu12_b b 
			  where a.id=b.id_a AND trim(a.nom_z) is not null AND a.PLATTAR_ID is not null
			  GROUP BY trim(a.nom_z), TO_CHAR(a.prod_id), 
			     TRUNC(a.from_date,'MONTH'),
				 b.STAN_ID,a.PLATTAR_ID) etran,
			(SELECT trim(a.nom_z) as nom_z, TO_CHAR(a.prod_id) as PROD_GU12_ID, 
			     TRUNC(a.from_date,'MONTH') as date_plan, MAX(a.id) as id,
				 b.STAN_ID,DECODE(a.EXPED_ID,1219,3490,a.EXPED_ID) as EXPED_ID 
			   FROM gu12_a a, gu12_b b 
			  where a.id=b.id_a AND trim(a.nom_z) is not null AND a.EXPED_ID is not null
			  GROUP BY trim(a.nom_z), TO_CHAR(a.prod_id), 
			     TRUNC(a.from_date,'MONTH'),
				 b.STAN_ID,DECODE(a.EXPED_ID,1219,3490,a.EXPED_ID)) etran_exp
		 WHERE L_M.nom_zd=M_M.nom_zd 
		   AND L_M.N_DOG2 = D2.SHORT_NUMBER(+) 
		   AND L_M.N_DOG = D.SHORT_NUMBER 
		   AND L_M.N_DOG_POK = POKUP_DOG.SHORT_NUMBER(+) 
		   AND L_M.KST_O = S_O.STAN_KOD
		   AND L_M.KOD_SOBS = S_S.FOX_KOD(+)
		   AND L_M.KOD_POST = S_P.FOX_KOD(+)
		   AND L_M.date_plan=etran.date_plan(+)
		   AND L_M.PROD_GU12_ID=etran.PROD_GU12_ID(+)
		   AND L_M.nom_etran=etran.nom_z(+)
		   AND L_M.STAN_ID=etran.STAN_ID(+)
		   AND L_M.PLATTARIF_ID=etran.PLATTAR_ID(+)
		   AND L_M.date_plan=etran_exp.date_plan(+)
		   AND L_M.PROD_GU12_ID=etran_exp.PROD_GU12_ID(+)
		   AND L_M.nom_etran=etran_exp.nom_z(+)
		   AND L_M.STAN_ID=etran_exp.STAN_ID(+)
		   AND L_M.EXPED_ID=etran_exp.EXPED_ID(+)
		   AND L_M.STAN_PER=S_P.STAN_KOD(+) 
		   AND L_M.INCOTERM=i.TAG(+)				 
		   )
    WHERE EXISTS (SELECT NULL
          FROM load_buffer.MONTH L_M
		 WHERE L_M.nom_zd=M_M.nom_zd)
      AND M_M.update_date BETWEEN date_beg AND date_end
	  AND m_m.DATE_PLAN>v_dat;	 
      --and (m_m.NOM_ZD='1212-36611' or m_M.NOM_ZD='1201-46582');


  INSERT INTO MASTER.MONTH
        (nom_zd,prod_id_npr,tex_pd_id,poluch_id,vetka_id,gosprog_id,nazn_otg_id,tonn_declared,tonn_loaded,
		 cist_declared,cist_loaded,FLG_ALLOW_8_AXES,flg_upper_sliv,flg_dop_cist,flg_forma_2,flg_obogr,
		 load_abbr,date_plan,prim,cena,cena_otp,sum_zd,gr4,k_tar,
		 dog_id,usl_number,stan_id,stanotp_id,npr_sobstv_id,input_date,update_date,tarif1tonn,potreb_id,
		 npodog_id,grotp_id,date_cen,GP_NAPR_ID, TONN_R, CIST_R, TRANSPORT, IS_EXP, SUPPLIER_ID, CENA_OTP_NPO, KOL_DN_NPO,
		 TONN_RAZNAR,CIST_RAZNAR,ZAKAZ_ID,ZAKAZ_HIST_ID,EXPED_ID,GU12_A_ID,POKUP_DOG_ID,POKUP_USL_NUMBER,
		 STAN_PER_ID,INCOTERM_ID,VZISK_ID,ZAKAZ_KOD_ISU)
	 (SELECT L_M.nom_zd, L_M.kod_npr,L_M.kod_tex_pd,L_M.kod_poluch,L_M.kvet,L_M.program,
	           L_M.kod_otgr,NVL(L_M.tonn,0),NVL(L_M.otgr,0),
			   ROUND(NVL(L_M.tonn,0)/L_M.NORMOTGR),
			   NVL(L_M.otgr_cist,0),L_M.osn_8,
			   L_M.sliv_v,Iif(L_M.dop_cist,1,0),DECODE(L_M.forma_2,0,DECODE(L_M.vzisk_id,1,3,2,4,0),L_M.forma_2),L_M.obogr,L_M.otgrr,
			   L_M.date_plan,L_M.prim,L_M.cena,L_M.cena_otp,L_M.sum_zd,L_M.gr4,
			   L_M.k_tar,D.ID, L_M.k_usl, L_M.STAN_ID, s_o.ID, S_S.PREDPR_ID, L_M.vvoddat, 
			   L_M.kordat,L_M.tarif1tonn,L_M.kod_potreb, d2.ID, L_M.kod_grotp, L_M.DATE_CEN,
			   L_M.gp_napr, L_M.tonn_r, L_M.k_cistr, L_M.transp, DECODE(L_M.prizn_mps,3,1,0),S_P.PREDPR_ID,L_M.SCENA_OTP,L_M.SKOL_DN,
			   NVL(L_M.TONN_R,0),NVL(L_M.k_cistr,0), ZAKAZ_ID, l_m.ZAKAZ_HIST, L_M.EXPED_ID, NVL(etran.ID,etran_exp.ID),
			   POKUP_DOG.ID,L_M.K_USL_POK,S_P.STAN_ID,i.ID,l_m.VZISK_ID,l_m.kod_isu
          FROM 
		    (SELECT MONTH.*, P.PROD_GU12_ID, DECODE(NVL(P.NORMOTGR,0),0,55,P.NORMOTGR) as NORMOTGR,KLS_TEX_PD.PLATTARIF_ID,S.ID AS STAN_ID,
			    E.PREDPR_ID as EXPED_ID
			      FROM load_buffer.MONTH,KLS_PROD P,KLS_TEX_PD,KLS_STAN S,
 		          	(SELECT * FROM PREDPR_ROLE WHERE KLS_ROLE_ID=3) E				   
				  WHERE MONTH.kod_npr=P.ID_NPR
		            AND MONTH.KOD_TEX_PD=KLS_TEX_PD.ID(+)
 	                AND MONTH.KOD_GROTPR=KLS_TEX_PD.GROTP_ID(+)
					AND MONTH.KST = S.STAN_KOD  
               	    AND MONTH.exped = E.KOD_MOSCOW(+)
				  ) L_M, 
			(SELECT * FROM STAN_ROLE WHERE KLS_ROLE_ID=2) S_P, KLS_INCOTERM i, 				   	  
			KLS_DOG D, KLS_DOG D2, KLS_STAN S_O, KLS_DOG POKUP_DOG, 
		    (SELECT * FROM PREDPR_ROLE WHERE KLS_ROLE_ID=1) S_S, 
			(SELECT * FROM PREDPR_ROLE WHERE KLS_ROLE_ID=1) S_P, 
			(SELECT trim(a.nom_z) as nom_z, TO_CHAR(a.prod_id) as PROD_GU12_ID, 
			     TRUNC(a.from_date,'MONTH') as date_plan, MAX(a.id) as id,
				 b.STAN_ID,a.PLATTAR_ID 
			   FROM gu12_a a, gu12_b b 
			  where a.id=b.id_a AND trim(a.nom_z) is not null AND a.PLATTAR_ID is not null
			  GROUP BY trim(a.nom_z), TO_CHAR(a.prod_id), 
			     TRUNC(a.from_date,'MONTH'),
				 b.STAN_ID,a.PLATTAR_ID) etran,
			(SELECT trim(a.nom_z) as nom_z, TO_CHAR(a.prod_id) as PROD_GU12_ID, 
			     TRUNC(a.from_date,'MONTH') as date_plan, MAX(a.id) as id,
				 b.STAN_ID,DECODE(a.EXPED_ID,1219,3490,a.EXPED_ID) as EXPED_ID 
			   FROM gu12_a a, gu12_b b 
			  where a.id=b.id_a AND trim(a.nom_z) is not null AND a.EXPED_ID is not null
			  GROUP BY trim(a.nom_z), TO_CHAR(a.prod_id), 
			     TRUNC(a.from_date,'MONTH'),
				 b.STAN_ID,DECODE(a.EXPED_ID,1219,3490,a.EXPED_ID)) etran_exp
		 WHERE L_M.N_DOG2 = D2.SHORT_NUMBER(+) 
		   AND L_M.N_DOG = D.SHORT_NUMBER 
		   AND L_M.N_DOG_POK = POKUP_DOG.SHORT_NUMBER(+) 
		   AND L_M.KST_O = S_O.STAN_KOD 
		   AND L_M.KOD_SOBS = S_S.FOX_KOD(+)
		   AND L_M.KOD_POST = S_P.FOX_KOD(+)
		   AND L_M.date_plan=etran.date_plan(+)
		   AND L_M.PROD_GU12_ID=etran.PROD_GU12_ID(+)
		   AND L_M.nom_etran=etran.nom_z(+)
		   AND L_M.STAN_ID=etran.STAN_ID(+)
		   AND L_M.PLATTARIF_ID=etran.PLATTAR_ID(+)
		   AND L_M.date_plan=etran_exp.date_plan(+)
		   AND L_M.PROD_GU12_ID=etran_exp.PROD_GU12_ID(+)
		   AND L_M.nom_etran=etran_exp.nom_z(+)
		   AND L_M.STAN_ID=etran_exp.STAN_ID(+)
		   AND L_M.EXPED_ID=etran_exp.EXPED_ID(+)				 
		   AND L_M.STAN_PER=S_P.STAN_KOD(+) 
		   AND L_M.INCOTERM=i.TAG(+)				 
		   AND NOT EXISTS (SELECT M_M.nom_zd FROM MASTER.MONTH M_M WHERE M_M.nom_zd=L_M.nom_zd));

  UPDATE MASTER.MONTH
    SET PLANSTRU_ID
	 = (SELECT DISTINCT g_r.ID
          FROM load_buffer.MONTH_FOR_RENEW M, LOAD_BUFFER.GR_REAL G_R
		 WHERE MASTER.MONTH.nom_zd=m.nom_zd AND
			   M.KOD_POS=G_R.KOD_POS AND
			   M.KOD_SGR=G_R.KOD_SGR AND
			   M.KOD_SPG=G_R.KOD_SPG AND
			   M.KOD_RZD=G_R.KOD_RZD AND
               M.KOD_PRZ=G_R.KOD_PRZ AND
			   M.KOD_GRP=G_R.KOD_GRP AND
			   M.KOD_PGR=G_R.KOD_PGR)
    WHERE EXISTS (SELECT M.nom_zd
	                FROM load_buffer.MONTH_FOR_RENEW M, LOAD_BUFFER.GR_REAL G_R
              	   WHERE MASTER.MONTH.nom_zd=M.nom_zd AND
		   			   M.KOD_POS=G_R.KOD_POS AND
  					   M.KOD_SGR=G_R.KOD_SGR AND
			   		   M.KOD_SPG=G_R.KOD_SPG AND
			   		   M.KOD_RZD=G_R.KOD_RZD AND
               		   M.KOD_PRZ=G_R.KOD_PRZ AND
			   		   M.KOD_GRP=G_R.KOD_GRP AND
			   		   M.KOD_PGR=G_R.KOD_PGR)
      AND update_date BETWEEN date_beg AND date_end
	  AND DATE_PLAN>v_dat;
      --and (NOM_ZD='1212-36611' or NOM_ZD='1201-46582');

  DELETE FROM MASTER.MONTH M_M WHERE NOT EXISTS (SELECT L_M.NOM_ZD FROM load_buffer.month_FOR_RENEW L_M WHERE L_M.NOM_ZD = M_M.NOM_ZD) 
    AND M_M.update_date BETWEEN date_beg AND date_end
	  AND m_m.DATE_PLAN>v_dat	 ;

  FOR_ZAKAZ.FillFact(0,date_beg,date_end);
  	
  COMMIT;

END Renew_Month; 
/

--
-- RENEW_MOVEPROD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.renew_moveprod (
   date_beg   DATE := TRUNC (SYSDATE, 'MONTH'),
   date_end   DATE := SYSDATE,
   param1     VARCHAR2 := '',
   param2     VARCHAR2 := '',
   param3     VARCHAR2 := ''
)
IS
BEGIN
-- Удаляем
   DELETE FROM moveprod
   WHERE month=date_beg;

   COMMIT;

--- Добавляем производство
   INSERT INTO MASTER.moveprod
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re)
      (SELECT /*+ FIRST_ROWS */
              date_beg, 1, 1, dayly_fact.prod, dayly_fact.proizv, date_beg,
              '', '', '', '', 1, '', '', dayly_fact.kod, 0
         FROM dayly_fact
        WHERE dayly_fact.DATA = TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY'))
          AND dayly_fact.sobstv = 8
          AND dayly_fact.proizv > 0.0001);

   COMMIT;

--- Добавляем отгрузку по счетам(включая экспорт)
   INSERT INTO MASTER.moveprod
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re, date_oforml)
      (SELECT /*+ rule */ /* FIRST_ROWS INDEX (b BILLS_PK) */
              date_beg, 3, 2, kv.prod_id_npr, kv.ves, date_beg, '', b.nom_dok,
              d.predpr_id, b.date_kvit, DECODE (m.nazn_otg_id, 5, 4, 1),
              kv.num_kvit, kv.num_cist, kv.ID, 0, kv.date_oforml
         FROM bills b,
              (SELECT nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_oforml
                 FROM kvit
                WHERE prod_id_npr <> '90000'
               UNION ALL
               SELECT nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_oforml
                 FROM dop_kvit
                WHERE prod_id_npr <> '90000') kv,
              MONTH m,
              kls_dog d
        WHERE b.nom_dok = kv.bill_id
          AND kv.nom_zd = m.nom_zd
          AND b.dog_id = d.ID
          AND m.nazn_otg_id <> 9
          AND m.nazn_otg_id <> 10
          AND m.nazn_otg_id <> 8
          AND ABS (kv.ves) > 0.0001
          AND b.date_vyp_sf BETWEEN date_beg AND TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY')));

   COMMIT;

--- Добавляем отгрузку экспорт
   INSERT INTO MASTER.moveprod
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re, date_oforml)
      (SELECT date_beg, 3, 3, kv.prod_id_npr, kv.ves, date_beg, '', '',
              d.predpr_id, kv.date_kvit, 4, kv.num_kvit, kv.num_cist, kv.ID,
              0, kv.date_oforml
         FROM (SELECT nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_kvit, date_oforml
                 FROM kvit
                WHERE prod_id_npr <> '90000') kv,
              MONTH m,
              kls_dog d
        WHERE kv.nom_zd = m.nom_zd
          AND m.dog_id = d.ID
          AND m.nazn_otg_id = 5
          AND ABS (kv.ves) > 0.0001
          AND (kv.bill_id IS NULL OR kv.bill_id = 0)
          AND kv.date_kvit BETWEEN date_beg AND TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY')));

   COMMIT;

--- Добавляем отгрузку на собственные нужды
   INSERT INTO MASTER.moveprod
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re, date_oforml)
      (SELECT date_beg, 3, 4, kv.prod_id_npr, kv.ves, date_beg, '', '',
              d.predpr_id, kv.date_kvit, 5, kv.num_kvit, kv.num_cist, kv.ID,
              0, kv.date_oforml
         FROM (SELECT nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_kvit, date_oforml
                 FROM kvit
                WHERE prod_id_npr <> '90000') kv,
              MONTH m,
              kls_dog d
        WHERE kv.nom_zd = m.nom_zd
          AND m.dog_id = d.ID
          AND m.nazn_otg_id <> 5
          AND m.nazn_otg_id <> 8
          AND m.poluch_id = 8
          AND ABS (kv.ves) > 0.0001
          AND (kv.bill_id IS NULL OR kv.bill_id = 0)
          AND kv.date_kvit BETWEEN date_beg AND TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY')));

   COMMIT;

--- Добавляем отгрузку на хранение
   INSERT INTO MASTER.moveprod
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re, date_oforml)
      (SELECT date_beg, 2, 5, kv.prod_id_npr, kv.ves, date_beg, '', '',
              d.predpr_id, kv.date_kvit, 10, kv.num_kvit, kv.num_cist, kv.ID,
              0, kv.date_oforml
         FROM (SELECT nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_kvit, date_oforml
                 FROM kvit
                WHERE prod_id_npr <> '90000') kv,
              MONTH m,
              kls_dog d
        WHERE kv.nom_zd = m.nom_zd
          AND m.dog_id = d.ID
          AND m.nazn_otg_id = 8
          AND ABS (kv.ves) > 0.0001
          AND (kv.bill_id IS NULL OR kv.bill_id = 0)
          AND kv.date_kvit BETWEEN date_beg AND TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY')));

   COMMIT;

--- Добавляем отгрузку с хранения
   INSERT INTO MASTER.moveprod
               (MONTH, oper, kind, prod_id_npr, quan, period, buyinvc,
                idinvoice, idclient, selldate, suboper, num_kvit, num_cist,
                ID, is_re, date_oforml)
      (SELECT /*+ FIRST_ROWS INDEX (b BILLS_PK) */
              date_beg, 9, 6, kv.prod_id_npr, kv.ves, date_beg, '', b.nom_dok,
              d.predpr_id, b.date_kvit, 9, kv.num_kvit, kv.num_cist, kv.ID, 0,
              kv.date_oforml
         FROM bills b,
              (SELECT /*+ PARALLEL (kvit 2) */
                      nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_oforml
                 FROM kvit
                WHERE prod_id_npr <> '90000'
               UNION ALL
               SELECT nom_zd, prod_id_npr, ves, num_kvit, num_cist, bill_id,
                      ID, date_oforml
                 FROM dop_kvit
                WHERE prod_id_npr <> '90000') kv,
              MONTH m,
              kls_dog d
        WHERE b.nom_dok = kv.bill_id
          AND kv.nom_zd = m.nom_zd
          AND b.dog_id = d.ID
          AND m.nazn_otg_id = 9
          AND ABS (kv.ves) > 0.0001
          AND b.date_vyp_sf BETWEEN date_beg AND TO_DATE(TO_CHAR(date_end,'DD.MM.YYYY')));

   COMMIT;
END renew_moveprod; 
/

--
-- RENEW_REESTR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Reestr (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

UPDATE load_buffer.REESTR SET np_timep='00:00' WHERE SUBSTR(np_timep,1,1)=' ' OR np_timep IS NULL;
UPDATE load_buffer.REESTR SET time_e='00:00' WHERE SUBSTR(time_e,1,1)=' ' OR time_e IS NULL;
UPDATE load_buffer.REESTR SET np_data_o=date_otgr WHERE np_data_o IS NULL;
UPDATE load_buffer.REESTR SET date_e=date_otgr WHERE date_e IS NULL;
UPDATE load_buffer.REESTR SET kod_perer=0 WHERE kod_perer IS NULL;

--- Обновляем REESTR
UPDATE MASTER.KVIT SET
  (MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
   VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
   NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
   VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
   VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
   BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
   DATE_EDIT,JKCOMMIT,GROTP_ID,DATE_CENA,CENA,CENA_OTP,CAPACITY,SHIELDS,PODDONS,
   UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,
   AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,ZPU_TYPE1,ZPU_TYPE2,NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
 = (SELECT NVL(k.mesto,0),k.nom_zd,k.kod_npr,k.kod_tex_pd,k.num_cist,k.date_otgr,
   k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
   LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
   k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
   k.VZLIV,k.TEMPER,k.XPL,NVL(k.forma,0),k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
   k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
   TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),Iif(k.JKCOMMIT,1,0),k.KOD_GROTP,
   k.date_cen,k.cena,k.cena_otp,k.wes,k.shields,k.poddons,
   u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,
   k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,k.ZPU_TYPE1,k.ZPU_TYPE2,k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
          FROM load_buffer.reestr k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
		  WHERE k.kvit_id=MASTER.KVIT.ID AND E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 
		    AND p_r.FOX_KOD=k.KOD_PERER AND k.nom_zd=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+))
    WHERE MASTER.KVIT.FLG_OPERDATA=1 AND EXISTS (SELECT load_buffer.reestr.ID FROM load_buffer.reestr WHERE load_buffer.reestr.kvit_id=MASTER.KVIT.ID);

--COMMIT;

--- Добавляем в REESTR
INSERT /*+ APPEND*/ INTO MASTER.KVIT
     (ID,FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
      VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
      NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
      VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
      VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
	  BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
      DATE_EDIT,JKCOMMIT,GROTP_ID,DATE_CENA,CENA,CENA_OTP,CAPACITY,SHIELDS,PODDONS,
	  UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,
      AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,ZPU_TYPE1,ZPU_TYPE2,NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
      (SELECT k.kvit_id,1,NVL(k.mesto,0),k.nom_zd,k.kod_npr,k.kod_tex_pd,k.num_cist,k.date_otgr,
          k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
          LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
          k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
          k.VZLIV,k.TEMPER,k.XPL,NVL(k.forma,0),k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
		  k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
          TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),Iif(k.JKCOMMIT,1,0),k.KOD_GROTP,
		  k.date_cen,k.cena,k.cena_otp,k.wes,k.shields,k.poddons,
          u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,
          k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,k.ZPU_TYPE1,k.ZPU_TYPE2,k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
        FROM load_buffer.reestr k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
        WHERE E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 AND p_r.FOX_KOD=k.KOD_PERER 
		  AND k.nom_zd=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+) 
		  AND NOT EXISTS (SELECT A.ID FROM MASTER.KVIT A WHERE A.ID=k.kvit_id));

--     COMMIT;

--- Удаляем записи из REESTR
DELETE FROM MASTER.KVIT A WHERE A.FLG_OPERDATA=1 AND
  (NOT EXISTS (SELECT r.ID FROM load_buffer.reestr r WHERE r.kvit_id = A.ID) OR
   EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.ID=A.ID) OR
   EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.SVED_NUM=A.SVED_NUM AND k.NOM_ZD=A.NOM_ZD));

 COMMIT;

--UPDATE KVIT SET ves_brutto=ves 
--WHERE EXISTS (SELECT NULL FROM MONTH WHERE MONTH.nom_zd=KVIT.nom_zd AND MONTH.NAZN_OTG_ID<>4);

--COMMIT;

END Renew_Reestr;
/

--
-- RENEW_REESTR_IN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Reestr_in (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  vTmp NUMBER;
BEGIN

return;

update load_buffer.sv2_oil set gotov=0 where gotov=24;
update load_buffer.sv2_oil set n_nal=0 where n_nal=24;
update load_buffer.sv2_oil set k_nal=0 where k_nal=24;
 

-- Добавляем вагоны в справочник вагонов
INSERT /*+ APPEND*/ INTO MASTER.KLS_CIST
  (NUM_CIST, VAGONTYPE_ID)
  (SELECT DISTINCT k.n_cis,6
   FROM load_buffer.sv2_oil k 
   WHERE NOT EXISTS (SELECT NULL FROM MASTER.KLS_CIST A WHERE A.NUM_CIST=k.n_cis));

--- Обновляем SVED_IN
UPDATE MASTER.SVED_IN a SET
  (SVED_NUM, SVED_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML, 
   PROD_ID_NPR, MESTO_ID, PASP_NUM, REZ_NUM, PASP_DATE, PL, PL15, P_VOD, P_DIRT, MG_SOL, P_SOL)=
  (SELECT MAX(SVED_NUM) as SVED_NUM, MAX(SVED_DATE) as SVED_DATE,  
     MAX(GOTOV_TIME) as GOTOV_TIME, MAX(BEG_NALIV_TIME) as BEG_NALIV_TIME, 
	 MAX(END_NALIV_TIME) as END_NALIV_TIME, MAX(DATE_OFORML) as DATE_OFORML, 
     MAX(PROD_ID_NPR) as PROD_ID_NPR, MAX(MESTO_ID) as MESTO_ID, 
	 MAX(PASP_NUM) as PASP_NUM, MAX(REZ_NUM) as REZ_NUM, 
	 MAX(PASP_DATE) as PASP_DATE, MAX(DECODE(NVL(CTL,0),0,PL,0)) as PL, MAX(DECODE(NVL(CTL,0),0,0,PL)) as PL15, 
	 MAX(P_VOD) as P_VOD, MAX(P_DIRT) as P_DIRT, 
	 MAX(MG_SOL) as MG_SOL, MAX(P_SOL) as P_SOL
   FROM (	 
     SELECT 
       SUBSTR((CASE WHEN data<TO_DATE('01.01.2006','dd.mm.yyyy') THEN 'o' ELSE 'oo' END)||TO_CHAR(k.id_n),1,9) as ID, k.CTL,
	   np as SVED_NUM, data as SVED_DATE, k.ves_cis as VES,  
	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(gotov),'09')||':'||TO_CHAR(MOD(gotov*100,100),'09'),'dd.mm.yyyy hh24:mi') as GOTOV_TIME,
	   (CASE
	     WHEN n_nal<gotov THEN
     	   TO_DATE(TO_CHAR(data+1,'dd.mm.yyyy ') || TO_CHAR(FLOOR(n_nal),'09')||':'||TO_CHAR(MOD(n_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
		 ELSE  
     	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(n_nal),'09')||':'||TO_CHAR(MOD(n_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
	    END) as BEG_NALIV_TIME,	   
	   (CASE
	     WHEN k_nal<gotov THEN
     	   TO_DATE(TO_CHAR(data+1,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
		 ELSE  
     	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
	    END) as END_NALIV_TIME,	   
	   (CASE
	     WHEN k_nal<gotov THEN
     	   TO_DATE(TO_CHAR(data+1,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
		 ELSE  
     	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
	    END) as DATE_OFORML,
   	   p.ID_NPR as PROD_ID_NPR,1 as MESTO_ID, k.NETTO_OIL as VES_NETTO,
	   k.N_PAS as PASP_NUM, '' as REZ_NUM, k.data as PASP_DATE, k.U_VES as PL, k.P_VOD, k.M_PRIM as P_DIRT,
	   k.CLOR as MG_SOL, k.PROCENT_CL as P_SOL
     FROM load_buffer.sv2_oil k, kls_prod p 
     WHERE k.sh_npr=p.unp_id
   ) sv
   WHERE sv.ID=a.ID
   GROUP BY ID 
  )
WHERE EXISTS
  ( SELECT NULL 
     FROM load_buffer.sv2_oil k, kls_prod p 
     WHERE k.sh_npr=p.unp_id AND SUBSTR((CASE WHEN data<TO_DATE('01.01.2006','dd.mm.yyyy') THEN 'o' ELSE 'oo' END)||TO_CHAR(k.id_n),1,9)=a.ID 
  );

--- Добавляем в SVED_IN
INSERT INTO MASTER.SVED_IN
  (ID, SVED_NUM, SVED_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML, 
   PROD_ID_NPR, MESTO_ID, PASP_NUM, REZ_NUM, PASP_DATE, PL, PL15, P_VOD, P_DIRT, MG_SOL, P_SOL)
  (SELECT ID, MAX(SVED_NUM) as SVED_NUM, MAX(SVED_DATE) as SVED_DATE,  
     MAX(GOTOV_TIME) as GOTOV_TIME, MAX(BEG_NALIV_TIME) as BEG_NALIV_TIME, 
	 MAX(END_NALIV_TIME) as END_NALIV_TIME, MAX(DATE_OFORML) as DATE_OFORML, 
     MAX(PROD_ID_NPR) as PROD_ID_NPR, MAX(MESTO_ID) as MESTO_ID, 
	 MAX(PASP_NUM) as PASP_NUM, MAX(REZ_NUM) as REZ_NUM, 
	 MAX(PASP_DATE) as PASP_DATE, MAX(DECODE(NVL(CTL,0),0,PL,0)) as PL, MAX(DECODE(NVL(CTL,0),0,0,PL)) as PL15, 
	 MAX(P_VOD) as P_VOD, MAX(P_DIRT) as P_DIRT, 
	 MAX(MG_SOL) as MG_SOL, MAX(P_SOL) as P_SOL
   FROM (	 
     SELECT 
       SUBSTR((CASE WHEN data<TO_DATE('01.01.2006','dd.mm.yyyy') THEN 'o' ELSE 'oo' END)||TO_CHAR(k.id_n),1,9) as ID,k.CTL,
	   np as SVED_NUM, data as SVED_DATE, k.ves_cis as VES,  
	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(gotov),'09')||':'||TO_CHAR(MOD(gotov*100,100),'09'),'dd.mm.yyyy hh24:mi') as GOTOV_TIME,
	   (CASE
	     WHEN n_nal<gotov THEN
     	   TO_DATE(TO_CHAR(data+1,'dd.mm.yyyy ') || TO_CHAR(FLOOR(n_nal),'09')||':'||TO_CHAR(MOD(n_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
		 ELSE  
     	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(n_nal),'09')||':'||TO_CHAR(MOD(n_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
	    END) as BEG_NALIV_TIME,	   
	   (CASE
	     WHEN k_nal<gotov THEN
     	   TO_DATE(TO_CHAR(data+1,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
		 ELSE  
     	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
	    END) as END_NALIV_TIME,	   
	   (CASE
	     WHEN k_nal<gotov THEN
     	   TO_DATE(TO_CHAR(data+1,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
		 ELSE  
     	   TO_DATE(TO_CHAR(data,'dd.mm.yyyy ') || TO_CHAR(FLOOR(k_nal),'09')||':'||TO_CHAR(MOD(k_nal*100,100),'09'),'dd.mm.yyyy hh24:mi')
	    END) as DATE_OFORML,
   	   p.ID_NPR as PROD_ID_NPR,1 as MESTO_ID, k.NETTO_OIL as VES_NETTO,
	   k.N_PAS as PASP_NUM, '' as REZ_NUM, k.data as PASP_DATE, k.U_VES as PL, k.P_VOD, k.M_PRIM as P_DIRT,
	   k.CLOR as MG_SOL, k.PROCENT_CL as P_SOL
     FROM load_buffer.sv2_oil k, kls_prod p 
     WHERE k.sh_npr=p.unp_id
   ) sv
   WHERE NOT EXISTS (SELECT NULL FROM MASTER.SVED_IN A WHERE A.ID=sv.ID)
   GROUP BY ID 
  );

--- Обновляем REESTR
UPDATE MASTER.REESTR_IN SET
  (SVED_IN_ID, DATE_OTGR, NUM_CIST,  
   KALIBR_ID, VES_CIST, CAPACITY, VZLIV, TEMPER, FAKT_PL, VES, VES_NETTO, VOLUME, VOLUME15, CTLV, GOST_ID)
= (SELECT 
     SUBSTR((CASE WHEN data<TO_DATE('01.01.2006','dd.mm.yyyy') THEN 'o' ELSE 'oo' END)||TO_CHAR(k.id_n),1,9),k.DATA,k.n_cis, 
     k.tip_cis, FOR_CIST.GET_VES_CIST(k.n_cis), FOR_CIST.GET_CAPACITY(k.n_cis),  
     k.v_vzl, k.t_pa, k.pogr, k.ves_cis/1000, k.netto_oil/1000,
	 k.OBM20, k.OBM15, k.CTL, DECODE(NVL(k.CTL,0),0,0,1)
    FROM load_buffer.sv2_oil k, kls_prod p 
    WHERE k.sh_npr=p.unp_id AND k.id_n*100000+k.id_c=MASTER.REESTR_IN.ID)
WHERE EXISTS 
  (SELECT NULL 
    FROM load_buffer.sv2_oil k, kls_prod p 
    WHERE k.sh_npr=p.unp_id AND k.id_n*100000+k.id_c=MASTER.REESTR_IN.ID);

--- Добавляем в REESTR_IN
INSERT INTO MASTER.REESTR_IN
  (ID, SVED_IN_ID, MESTO_ID, TEX_PD_ID, GROTP_ID, STAN_OTP_ID, FORMNAKL_ID, DATE_OTGR, NUM_CIST, VAGONTYPE_ID, 
   KALIBR_ID, VES_CIST, VAGOWNER_ID, CAPACITY, VZLIV, TEMPER, FAKT_PL, VES, VES_NETTO, STAN_VOZ_ID,
   VOLUME, VOLUME15, CTLV,GOST_ID)
  (SELECT 
     k.id_n*100000+k.id_c as ID, SUBSTR((CASE WHEN data<TO_DATE('01.01.2006','dd.mm.yyyy') THEN 'o' ELSE 'oo' END)||TO_CHAR(k.id_n),1,9),1,
	 DECODE(p.ID_NPR,'90002',7242958,NULL),
	 DECODE(p.ID_NPR,'90002',3826,NULL),
	 DECODE(p.ID_NPR,'90002',2290,NULL),6,k.DATA,k.n_cis,6, 
     k.tip_cis, FOR_CIST.GET_VES_CIST(k.n_cis), NVL(FOR_CIST.GET_VAGOWNER(k.n_cis),DECODE(p.ID_NPR,'90002',33,NULL)), FOR_CIST.GET_CAPACITY(k.n_cis),  
     k.v_vzl, k.t_pa, k.pogr, k.ves_cis/1000, k.netto_oil/1000,
	 DECODE(p.ID_NPR,'90002',2290,NULL), k.OBM20, k.OBM15, k.CTL, DECODE(NVL(k.CTL,0),0,0,1)
   FROM load_buffer.sv2_oil k, kls_prod p 
   WHERE k.sh_npr=p.unp_id AND NOT EXISTS (SELECT NULL FROM MASTER.REESTR_IN A WHERE A.ID=k.id_n*100000+k.id_c)
   )
   ORDER BY id;

  FOR lcur IN (SELECT ID,SVED_IN_ID, SVED_POS FROM reestr_in WHERE sved_pos is null ORDER BY id FOR UPDATE)
  LOOP
    vTmp:=FOR_SVED_IN.GetMaxNumPos(lcur.SVED_IN_ID);
    UPDATE reestr_in SET SVED_POS=vTmp WHERE ID=lcur.ID;
  END LOOP;	  

 COMMIT;

END Renew_Reestr_in;
/

--
-- RENEW_REESTR_KVIT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Reestr_kvit (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  cnt1 NUMBER;
BEGIN

UPDATE load_buffer.REESTR_KVIT SET np_timep='00:00' WHERE SUBSTR(np_timep,1,1)=' ' OR np_timep IS NULL;
UPDATE load_buffer.REESTR_KVIT SET time_e='00:00' WHERE SUBSTR(time_e,1,1)=' ' OR time_e IS NULL;
UPDATE load_buffer.REESTR_KVIT SET np_data_o=date_otgr WHERE np_data_o IS NULL;
UPDATE load_buffer.REESTR_KVIT SET date_e=date_otgr WHERE date_e IS NULL;
UPDATE load_buffer.REESTR_KVIT SET kod_perer=0 WHERE kod_perer IS NULL;

--- Обновляем REESTR
UPDATE MASTER.KVIT SET
  (MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
   VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
   NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
   VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
   VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
   BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
   DATE_EDIT,JKCOMMIT,GROTP_ID,DATE_CENA,CENA,CENA_OTP,CAPACITY,SHIELDS,PODDONS,
   UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,
   AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,ZPU_TYPE1,ZPU_TYPE2,NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
 = (SELECT NVL(k.mesto,0),k.nom_zd,k.kod_npr,k.kod_tex_pd,k.num_cist,k.date_otgr,
   k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
   LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
   k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
   k.VZLIV,k.TEMPER,k.XPL,NVL(k.forma,0),k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
   k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
   TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),Iif(k.JKCOMMIT,1,0),k.KOD_GROTP,
   k.date_cen,k.cena,k.cena_otp,k.wes,k.shields,k.poddons,
   u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,
   k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,k.ZPU_TYPE1,k.ZPU_TYPE2,k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
          FROM load_buffer.reestr_kvit k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
		  WHERE k.kvit_id=MASTER.KVIT.ID AND E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 
		    AND p_r.FOX_KOD=k.KOD_PERER AND k.nom_zd=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+))
    WHERE MASTER.KVIT.FLG_OPERDATA=1 AND EXISTS (SELECT load_buffer.reestr_kvit.ID FROM load_buffer.reestr_kvit WHERE load_buffer.reestr_kvit.kvit_id=MASTER.KVIT.ID);

--- Добавляем в REESTR
INSERT  INTO MASTER.KVIT
     (ID,FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
      VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
      NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
      VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
      VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
	  BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
      DATE_EDIT,JKCOMMIT,GROTP_ID,DATE_CENA,CENA,CENA_OTP,CAPACITY,SHIELDS,PODDONS,
	  UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,
      AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,ZPU_TYPE1,ZPU_TYPE2,NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
      (SELECT k.kvit_id,1,NVL(k.mesto,0),k.nom_zd,k.kod_npr,k.kod_tex_pd,k.num_cist,k.date_otgr,
          k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
          LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
          k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
          k.VZLIV,k.TEMPER,k.XPL,NVL(k.forma,0),k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
		  k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
          TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),Iif(k.JKCOMMIT,1,0),k.KOD_GROTP,
		  k.date_cen,k.cena,k.cena_otp,k.wes,k.shields,k.poddons,
		  u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,
          k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,k.ZPU_TYPE1,k.ZPU_TYPE2,k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
        FROM load_buffer.reestr_kvit k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
        WHERE E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 AND p_r.FOX_KOD=k.KOD_PERER 
		  AND k.nom_zd=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+) 
		  AND NOT EXISTS (SELECT A.ID FROM MASTER.KVIT A WHERE A.ID=k.kvit_id)
          AND NOT EXISTS (SELECT A.ID FROM MASTER.KVIT A WHERE A.FLG_OPERDATA=0 AND k.MESTO=A.MESTO_ID AND k.NP=A.SVED_NUM AND k.NOM_ZD=A.NOM_ZD));

--- Удаляем записи из REESTR (только в том случае, если в буфере есть записи)
begin
  select count(*) into cnt1 from load_buffer.reestr_kvit k;
exception
  when others then
    cnt1:=0;
end;  
if cnt1>0 then
  DELETE FROM MASTER.KVIT A WHERE A.FLG_OPERDATA=1 AND
   (NOT EXISTS (SELECT r.ID FROM load_buffer.reestr_kvit r WHERE r.kvit_id = A.ID) OR
   EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.ID=A.ID) OR
   EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.SVED_NUM=A.SVED_NUM AND k.NOM_ZD=A.NOM_ZD));
end if;
--COMMIT;

END Renew_Reestr_kvit; 
/

--
-- RENEW_REESTR_MESTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Reestr_Mesto (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  vMesto NUMBER;
  vType NUMBER;
BEGIN

UPDATE load_buffer.REESTR SET np_timep='00:00' WHERE SUBSTR(np_timep,1,1)=' ' OR np_timep IS NULL;
UPDATE load_buffer.REESTR SET time_e='00:00' WHERE SUBSTR(time_e,1,1)=' ' OR time_e IS NULL;
UPDATE load_buffer.REESTR SET np_data_o=date_otgr WHERE np_data_o IS NULL;
UPDATE load_buffer.REESTR SET date_e=date_otgr WHERE date_e IS NULL;
UPDATE load_buffer.REESTR SET kod_perer=0 WHERE kod_perer IS NULL;


IF param1 || ' ' =' ' THEN --- место не указано
  RETURN;
ELSE
  vMesto:=TO_NUMBER(param1);
END IF;

IF param2 || ' ' =' ' THEN --- тип оперативки
  vType:=0;
ELSE
  vType:=TO_NUMBER(param2);
END IF;

--- Обновляем REESTR
UPDATE MASTER.KVIT SET
    (MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
     VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
     NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
     VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
     VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
     BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
	 DATE_EDIT,JKCOMMIT,GROTP_ID,DATE_CENA,CENA,CENA_OTP,CAPACITY,SHIELDS,PODDONS,
	 UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,
     AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,ZPU_TYPE1,ZPU_TYPE2,NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
   = (SELECT NVL(k.mesto,0),k.nom_zd,k.kod_npr,k.kod_tex_pd,k.num_cist,k.date_otgr,
     k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
     LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
     k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
     k.VZLIV,k.TEMPER,k.XPL,NVL(k.forma,0),k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
     k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
     TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),Iif(k.JKCOMMIT,1,0),k.KOD_GROTP,
	 k.date_cen,k.cena,k.cena_otp,k.wes,k.shields,k.poddons,
	 u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,
     k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,k.ZPU_TYPE1,k.ZPU_TYPE2,k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
          FROM load_buffer.reestr k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
		  WHERE k.KVIT_id=MASTER.KVIT.ID AND E.kod=K.EXPED AND k.mesto=vMesto AND p_r.KLS_ROLE_ID=2 
		    AND p_r.FOX_KOD=k.KOD_PERER AND k.NOM_ZD=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+))
 WHERE MASTER.KVIT.FLG_OPERDATA=1 AND MASTER.KVIT.MESTO_ID=vMesto AND
    EXISTS (SELECT C.ID FROM load_buffer.reestr C WHERE C.kvit_id=MASTER.KVIT.ID AND C.Mesto=vMesto);

--- Добавляем в REESTR
INSERT  INTO MASTER.KVIT
     (ID,FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
      VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
      NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
      VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
      VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
	  BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
	  DATE_EDIT,JKCOMMIT,GROTP_ID,DATE_CENA,CENA,CENA_OTP,CAPACITY,SHIELDS,PODDONS,
	  UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,
       AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,ZPU_TYPE1,ZPU_TYPE2,NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
      (SELECT k.kvit_id,1,NVL(k.mesto,0),k.nom_zd,k.kod_npr,k.kod_tex_pd,k.num_cist,k.date_otgr,
          k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
          LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
          k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
          k.VZLIV,k.TEMPER,k.XPL,NVL(k.forma,0),k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
  		  k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
          TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),Iif(k.JKCOMMIT,1,0),k.KOD_GROTP,
		  k.date_cen,k.cena,k.cena_otp,k.wes,k.shields,k.poddons,
		  u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,
          k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,k.ZPU_TYPE1,k.ZPU_TYPE2,k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
        FROM load_buffer.reestr k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
        WHERE E.kod=K.EXPED AND k.Mesto=vMesto AND p_r.KLS_ROLE_ID=2 
		  AND p_r.FOX_KOD=k.KOD_PERER AND k.nom_zd=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+)
  	      AND NOT EXISTS (SELECT A.ID FROM MASTER.KVIT A WHERE A.ID=k.kvit_id AND A.MESTO_ID=vMesto));
--COMMIT;

--- Удаляем записи из REESTR
IF vType=0 THEN  --- Если полная оперативка
  DELETE FROM MASTER.KVIT A WHERE A.FLG_OPERDATA=1 AND A.MESTO_ID=vMesto AND
    (NOT EXISTS (SELECT r.ID FROM load_buffer.reestr r WHERE r.kvit_id = A.ID) OR
     EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.ID=A.ID) OR
     EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.num_cist=A.num_cist AND k.date_otgr=A.date_otgr AND k.SVED_NUM=A.SVED_NUM AND k.NOM_ZD=A.NOM_ZD));
ELSE  --- Если краткая оперативка
  DELETE FROM MASTER.KVIT A WHERE A.FLG_OPERDATA=1 AND A.MESTO_ID=vMesto AND
    (EXISTS (SELECT r.ID FROM load_buffer.reestr r WHERE r.date_remov IS NOT NULL AND r.kvit_id=A.ID) OR
     EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.ID=A.ID) OR
     EXISTS (SELECT k.ID FROM MASTER.KVIT k WHERE k.FLG_OPERDATA=0 AND k.MESTO_ID=A.MESTO_ID AND k.num_cist=A.num_cist AND k.date_otgr=A.date_otgr AND k.SVED_NUM=A.SVED_NUM AND k.NOM_ZD=A.NOM_ZD));
END IF;
COMMIT;

--UPDATE KVIT SET ves_brutto=ves 
--WHERE EXISTS (SELECT NULL FROM MONTH WHERE MONTH.nom_zd=KVIT.nom_zd AND MONTH.NAZN_OTG_ID<>4);
--COMMIT;

END Renew_Reestr_Mesto;
/

--
-- RENEW_SVED_REESTR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_SVED_REESTR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

UPDATE load_buffer.SVED_REESTR SET timep='00:00' WHERE substr(timep,1,1)=' ' or timep is NULL  OR TIMEP='24:00';
UPDATE load_buffer.SVED_REESTR SET data_o=DATA WHERE data_o is NULL;
UPDATE load_buffer.SVED_REESTR SET N_NAL='00:00' WHERE substr(N_NAL,1,1)=' ' or N_NAL is NULL OR n_nal='24:00' OR substr(N_NAL,1,1)='1';
UPDATE load_buffer.SVED_REESTR SET N_NALD=DATA WHERE N_NALD is NULL;
UPDATE load_buffer.SVED_REESTR SET K_NAL='00:00' WHERE substr(K_NAL,1,1)=' ' or K_NAL is NULL OR K_NAL='24:00';
UPDATE load_buffer.SVED_REESTR SET K_NALD=DATA WHERE K_NALD is NULL;
UPDATE load_buffer.SVED_REESTR SET GOTOV='00:00' WHERE substr(GOTOV,1,1)=' ' or GOTOV is NULL OR GOTOV='24:00';
UPDATE load_buffer.SVED_REESTR SET GOTOVD=DATA WHERE GOTOVD is NULL;

UPDATE master.SVED SET
  (SVED_NUM,SVED_DATE,SVED_VES,SVED_CNT,
   GOTOV_TIME,
   BEG_NALIV_TIME,
   END_NALIV_TIME,
   DATE_OFORML,
   PASP_ID,PROD_ID_NPR,MESTO_ID,NARIAD_ID) =
  (SELECT S.NP,S.DATA,S.VES,S.KOL,
    TO_DATE(TO_CHAR(S.GOTOVD,'dd.mm.yyyy ') || SUBSTR(S.GOTOV,1,5),'dd.mm.yyyy hh24:mi'),
    TO_DATE(TO_CHAR(S.N_NALD,'dd.mm.yyyy ') || SUBSTR(S.N_NAL,1,5),'dd.mm.yyyy hh24:mi'),
    TO_DATE(TO_CHAR(S.K_NALD,'dd.mm.yyyy ') || SUBSTR(S.K_NAL,1,5),'dd.mm.yyyy hh24:mi'),
    TO_DATE(TO_CHAR(S.DATA_O,'dd.mm.yyyy ') || SUBSTR(S.TIMEP,1,5),'dd.mm.yyyy hh24:mi'),
	S.KODPASP,S.KOD_NPR,S.MESTO,S.NARIAD_ID FROM load_buffer.SVED_REESTR S WHERE S.SVED_ID=master.SVED.id)
  WHERE MASTER.SVED.FLG_OPERDATA=1 AND MASTER.SVED.FROM_DBF=1 AND 
    exists (SELECT A.SVED_ID FROM load_buffer.SVED_REESTR A where A.SVED_ID=master.SVED.id);

INSERT INTO master.SVED
     (ID,FLG_OPERDATA,FROM_DBF,SVED_NUM,SVED_DATE,SVED_VES,SVED_CNT,
      GOTOV_TIME,
      BEG_NALIV_TIME,
      END_NALIV_TIME,
      DATE_OFORML,
      PASP_ID,PROD_ID_NPR,MESTO_ID,NARIAD_ID)
     (SELECT S.SVED_ID,1,1,S.NP,S.DATA,S.VES,S.KOL,
      TO_DATE(TO_CHAR(S.GOTOVD,'dd.mm.yyyy ') || SUBSTR(S.GOTOV,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.N_NALD,'dd.mm.yyyy ') || SUBSTR(S.N_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.K_NALD,'dd.mm.yyyy ') || SUBSTR(S.K_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.DATA_O,'dd.mm.yyyy ') || SUBSTR(S.TIMEP,1,5),'dd.mm.yyyy hh24:mi'),
      S.KODPASP,S.KOD_NPR,S.MESTO,S.NARIAD_ID FROM load_buffer.SVED_REESTR S
	WHERE not exists (SELECT A.id FROM master.SVED A WHERE A.id=S.SVED_ID AND A.FLG_OPERDATA=1));

--- Удаляем записи из SVED_REESTR
DELETE FROM master.SVED A WHERE A.FLG_OPERDATA=1 AND A.FROM_DBF=1 AND
     (NOT EXISTS (SELECT S.SVED_ID from load_buffer.SVED_REESTR S WHERE S.SVED_ID = A.id) OR
      EXISTS (SELECT k.ID from master.SVED k WHERE k.FLG_OPERDATA=0 AND k.ID=A.ID));

COMMIT;

RENEW_KLS_VALSVED_REESTR(DATE_BEG,DATE_END,param1,param2,param3);

UPDATE master.SVED SET
  (DATE_EDIT) =
  (SELECT MAX(K.DATE_EDIT) FROM master.KVIT K WHERE K.SVED_ID=master.SVED.id AND K.FLG_OPERDATA=master.SVED.FLG_OPERDATA)
 WHERE master.SVED.flg_operdata=1 AND from_dbf=1 and exists (SELECT master.KVIT.SVED_ID FROM master.KVIT where master.KVIT.SVED_ID=master.SVED.id AND master.KVIT.FLG_OPERDATA=master.SVED.FLG_OPERDATA);
COMMIT;

END RENEW_SVED_REESTR;

/

--
-- RENEW_SVED_REESTR_MESTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_SVED_REESTR_MESTO (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  vMesto NUMBER;
  vType NUMBER;
BEGIN

IF param1 || ' ' =' ' THEN --- место не указано
  RETURN;
ELSE
  vMesto:=TO_NUMBER(param1);
END IF;

IF param2 || ' ' =' ' THEN --- тип оперативки
  vType:=0;
ELSE
  vType:=TO_NUMBER(param2);
END IF;

UPDATE load_buffer.SVED_REESTR SET timep='00:00' WHERE substr(timep,1,1)=' ' or timep is NULL  OR TIMEP='24:00';
UPDATE load_buffer.SVED_REESTR SET data_o=DATA WHERE data_o is NULL;
UPDATE load_buffer.SVED_REESTR SET N_NAL='00:00' WHERE substr(N_NAL,1,1)=' ' or N_NAL is NULL OR n_nal='24:00' OR substr(N_NAL,1,1)='1';
UPDATE load_buffer.SVED_REESTR SET N_NALD=DATA WHERE N_NALD is NULL;
UPDATE load_buffer.SVED_REESTR SET K_NAL='00:00' WHERE substr(K_NAL,1,1)=' ' or K_NAL is NULL OR K_NAL='24:00';
UPDATE load_buffer.SVED_REESTR SET K_NALD=DATA WHERE K_NALD is NULL;
UPDATE load_buffer.SVED_REESTR SET GOTOV='00:00' WHERE substr(GOTOV,1,1)=' ' or GOTOV is NULL OR GOTOV='24:00';
UPDATE load_buffer.SVED_REESTR SET GOTOVD=DATA WHERE GOTOVD is NULL;

UPDATE master.SVED SET
  (SVED_NUM,SVED_DATE,SVED_VES,SVED_CNT,
   GOTOV_TIME,
   BEG_NALIV_TIME,
   END_NALIV_TIME,
   DATE_OFORML,
   PASP_ID,PROD_ID_NPR,MESTO_ID,NARIAD_ID) =
   (SELECT S.NP,S.DATA,S.VES,S.KOL,
      TO_DATE(TO_CHAR(S.GOTOVD,'dd.mm.yyyy ') || SUBSTR(S.GOTOV,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.N_NALD,'dd.mm.yyyy ') || SUBSTR(S.N_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.K_NALD,'dd.mm.yyyy ') || SUBSTR(S.K_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.DATA_O,'dd.mm.yyyy ') || SUBSTR(S.TIMEP,1,5),'dd.mm.yyyy hh24:mi'),
	  S.KODPASP,S.KOD_NPR,S.MESTO,S.NARIAD_ID
    FROM load_buffer.SVED_REESTR S WHERE S.SVED_ID=master.SVED.id AND S.MESTO=vMesto)
  WHERE MASTER.SVED.FLG_OPERDATA=1 AND MASTER.SVED.FROM_DBF=1 AND MASTER.SVED.MESTO_ID=vMesto AND
        exists (SELECT A.SVED_ID FROM load_buffer.SVED_REESTR A
		        WHERE A.SVED_ID=master.SVED.id AND A.MESTO=vMesto);

INSERT INTO master.SVED
     (ID,FLG_OPERDATA,FROM_DBF,SVED_NUM,SVED_DATE,SVED_VES,SVED_CNT,
      GOTOV_TIME,
      BEG_NALIV_TIME,
      END_NALIV_TIME,
      DATE_OFORML,
      PASP_ID,PROD_ID_NPR,MESTO_ID,NARIAD_ID)
     (SELECT S.SVED_ID,1,1,S.NP,S.DATA,S.VES,S.KOL,
      TO_DATE(TO_CHAR(S.GOTOVD,'dd.mm.yyyy ') || SUBSTR(S.GOTOV,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.N_NALD,'dd.mm.yyyy ') || SUBSTR(S.N_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.K_NALD,'dd.mm.yyyy ') || SUBSTR(S.K_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.DATA_O,'dd.mm.yyyy ') || SUBSTR(S.TIMEP,1,5),'dd.mm.yyyy hh24:mi'),
      S.KODPASP,S.KOD_NPR,S.MESTO,S.NARIAD_ID FROM load_buffer.SVED_REESTR S
	WHERE S.MESTO=vMesto AND
	      not exists (SELECT A.id FROM master.SVED A WHERE A.id=S.SVED_ID AND A.MESTO_ID=vMesto AND A.FLG_OPERDATA=1));

--- Удаляем записи из SVED_REESTR
IF vType=0 THEN  --- Если полная оперативка
  DELETE FROM master.SVED A WHERE A.FLG_OPERDATA=1 AND A.FROM_DBF=1 AND A.Mesto_id=vMesto AND
     (NOT EXISTS (SELECT S.SVED_ID from load_buffer.SVED_REESTR S WHERE S.SVED_ID = A.id) OR
      EXISTS (SELECT k.ID from master.SVED k WHERE k.FLG_OPERDATA=0 AND k.ID=A.ID));
ELSE  --- Если краткая оперативка
  DELETE FROM master.SVED A WHERE A.FLG_OPERDATA=1 AND A.FROM_DBF=1 AND A.Mesto_id=vMesto AND
     (EXISTS (SELECT k.ID from master.SVED k WHERE k.FLG_OPERDATA=0 AND k.ID=A.ID));
END IF;
COMMIT;

RENEW_KLS_VALSVED_REESTR_MESTO(DATE_BEG,DATE_END,param1,param2,param3);

UPDATE master.SVED SET
  (DATE_EDIT) =
  (SELECT MAX(K.DATE_EDIT) FROM master.KVIT K WHERE K.SVED_ID=master.SVED.id AND K.FLG_OPERDATA=master.SVED.FLG_OPERDATA AND K.Mesto_id=MASTER.SVED.MESTO_ID)
 WHERE master.SVED.flg_operdata=1 AND master.SVED.FROM_DBF=1 AND MASTER.SVED.MESTO_ID=vMesto
   AND exists (SELECT null FROM master.KVIT where master.KVIT.SVED_ID=master.SVED.id AND master.KVIT.FLG_OPERDATA=master.SVED.FLG_OPERDATA AND master.KVIT.Mesto_id=MASTER.SVED.MESTO_ID);
COMMIT;

END RENEW_SVED_REESTR_MESTO;

/

--
-- RENEW_VOZVRAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_vozvrat (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
BEGIN

UPDATE load_buffer.VOZVRAT SET time_e='00:00' WHERE SUBSTR(time_e,1,1)=' ' OR time_e IS NULL;
UPDATE load_buffer.VOZVRAT SET date_e=date_nakl WHERE date_e IS NULL;

UPDATE /*+ RULE */ MASTER.VOZVRAT A SET
  (DATE_KVIT, NUM_NAKL, DATE_NAKL, DATE_VOZ, TIME_VOZ, DATE_RASK, TARIF, SUMMA, NUM_AKT, NUM_PERECH, DAT_PERECH, VOZVRAT, FLG_KVIT, 
   OLD_KVIT, SF_POROJN, DAT_POROJN, SOBST, PRSTBETW1, PRSTBETT1, PRSTBETW2, PRSTBETT2, PRSTBETSF, STAN_ID, PRST_N_AKT, 
   PRST_S_AKT, PRIM, DATE_OTP, TIME_OTP, OTSTOI, DATE_REP, DATE_EDIT, KVIT_ID)
 = (SELECT k.DATE_KVIT, v.NUM_NAKL, v.DATE_NAKL, v.DATE_VOZ, v.TIME_VOZ, v.DATE_RASK, v.TARIF, v.SUMMA, v.NUM_AKT, v.NUM_PERECH, 
           v.DAT_PERECH, v.VOZVRAT, v.FLG_KVIT, v.OLD_KVIT, v.SF_POROJN, v.DAT_POROJN, v.SOBST, v.PRSTBETW1, v.PRSTBETT1, 
		   v.PRSTBETW2, v.PRSTBETT2, v.PRSTBETSF, s.ID, v.PRST_N_AKT, v.PRST_S_AKT, v.PROD_NAME, v.DATE_OTP, v.TIME_OTP, 
		   v.OTSTOI, v.DATE_REP, TO_DATE(TO_CHAR(v.DATE_E,'dd.mm.yyyy ') || SUBSTR(v.TIME_E,1,5),'dd.mm.yyyy hh24:mi'),k.ID
      FROM load_buffer.VOZVRAT v, (select * from master.KVIT where date_kvit>=to_date('01.11.2007','dd.mm.yyyy')) k, master.KLS_STAN s 
		  WHERE v.NUM_CIST=a.NUM_CIST
		    AND v.NUM_KVIT=a.NUM_KVIT
			AND v.NUM_CIST=k.NUM_CIST(+)
		    AND v.NUM_KVIT=k.NUM_KVIT(+)
			AND v.KST=s.STAN_KOD(+))
  WHERE EXISTS 
   (SELECT NULL
      FROM load_buffer.VOZVRAT v 
		  WHERE v.NUM_CIST=a.NUM_CIST
		    AND v.NUM_KVIT=a.NUM_KVIT)
AND a.DATE_EDIT>=DATE_BEG 
AND a.DATE_EDIT<DATE_END+1;

INSERT INTO MASTER.VOZVRAT
   (NUM_CIST,NUM_KVIT,DATE_KVIT,NUM_NAKL, DATE_NAKL, DATE_VOZ, TIME_VOZ, DATE_RASK, TARIF, SUMMA, NUM_AKT, NUM_PERECH, 
    DAT_PERECH, VOZVRAT, FLG_KVIT, OLD_KVIT, SF_POROJN, DAT_POROJN, SOBST, PRSTBETW1, PRSTBETT1, PRSTBETW2, PRSTBETT2, 
	PRSTBETSF, STAN_ID, PRST_N_AKT, PRST_S_AKT, PRIM, DATE_OTP, TIME_OTP, OTSTOI, DATE_REP, DATE_EDIT, KVIT_ID)
 (SELECT /*+ ORDERED */ v.NUM_CIST,v.NUM_KVIT,k.DATE_KVIT, v.NUM_NAKL, v.DATE_NAKL, v.DATE_VOZ, v.TIME_VOZ, v.DATE_RASK, 
          v.TARIF, v.SUMMA, v.NUM_AKT, v.NUM_PERECH, v.DAT_PERECH, v.VOZVRAT, v.FLG_KVIT, v.OLD_KVIT, v.SF_POROJN, 
		  v.DAT_POROJN, v.SOBST, v.PRSTBETW1, v.PRSTBETT1, v.PRSTBETW2, v.PRSTBETT2, v.PRSTBETSF, s.ID, v.PRST_N_AKT, 
		  v.PRST_S_AKT, v.PROD_NAME, v.DATE_OTP, v.TIME_OTP, v.OTSTOI, v.DATE_REP,
		  TO_DATE(TO_CHAR(v.DATE_E,'dd.mm.yyyy ') || SUBSTR(v.TIME_E,1,5),'dd.mm.yyyy hh24:mi'),k.ID
    FROM load_buffer.VOZVRAT v, (select * from master.KVIT where date_kvit>=to_date('01.11.2007','dd.mm.yyyy')) k, master.KLS_STAN s 
   WHERE v.KST=s.STAN_KOD(+)
 	 AND v.NUM_CIST=k.NUM_CIST(+)
	 AND v.NUM_KVIT=k.NUM_KVIT(+)
	 AND v.NUM_CIST IS NOT NULL AND v.NUM_CIST<>'0'
     AND NOT EXISTS (SELECT NULL FROM MASTER.VOZVRAT A 
                      WHERE A.NUM_CIST=v.NUM_CIST
					    AND A.NUM_KVIT=v.NUM_KVIT));
						
/*DELETE FROM MASTER.VOZVRAT A WHERE 
    NOT EXISTS (SELECT NULL FROM load_buffer.VOZVRAT k WHERE k.NUM_CIST=A.NUM_CIST AND k.NUM_KVIT=A.NUM_KVIT) AND
    AND a.DATE_EDIT>=DATE_BEG 
    AND a.DATE_EDIT<DATE_END+1;*/

COMMIT;

END Renew_vozvrat; 
/

--
-- TEST1  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.TEST1 IS
  v_tmp1 NUMBER;
BEGIN
  v_tmp1:=for_filial.GET_OST_BEGIN('2001','10314',TO_DATE('05.02.2004','dd.mm.yyyy')); 
END TEST1;

/

--
-- XX101_ZKERP_EXEC_PENDINGACTION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Xx101_Zkerp_Exec_Pendingaction IS
  vFLG_DOP_CIST NUMBER;
  vBILL_POS_ID NUMBER;
  vMinDate DATE;
  vMaxDate DATE;
  vNomZd VARCHAR2(16);
  vID NUMBER;
  vSvedID VARCHAR2(9);
  vPaspID VARCHAR2(9);
  v_dat DATE;
  vTexPdID NUMBER;
  vExpedID NUMBER;
  vGrotpID NUMBER;
BEGIN
     
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
      FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

  vMinDate:=TO_DATE('31.12.2049','dd.mm.yyyy');
  vMaxDate:=TO_DATE('31.12.1899','dd.mm.yyyy');
  -- Перебор поставок
  FOR lcur IN (
   SELECT * FROM XX101_ZKERP_TO_KVIT B
--------------------------------------------------------------------------------      
-- Сергей Антонов 06.10.2008     
-- xx101_zkerp_data z,
-- WHERE propagatestatus IS NULL  AND (date_otgr>=TO_DATE('01.04.2008','dd.mm.yyyy') or actioncode=2)     
------------------------------------------------------------------------------      
              ORDER BY filename,TO_NUMBER(filerownum)
              )
               
               
  LOOP
    IF lcur.date_otgr<vMinDate THEN
      vMinDate:=lcur.date_otgr;
    END IF;
    IF lcur.date_otgr>vMaxDate THEN
      vMaxDate:=lcur.date_otgr;
    END IF;
      
    -- признак внепланового вагона
--    IF lcur.DATE_OTGR>=to_date('01.01.2008','dd.mm.yyyy') then
      -- проставляем признак внеплановых вагонов (с 01.01.2008)
--      vFLG_DOP_CIST:=0;
--      BEGIN
--        select 1 into vFLG_DOP_CIST from kvit_vneplan
--         where kvit_vneplan.NUM_KVIT=lcur.NUM_KVIT
--           and kvit_vneplan.NOM_Z=lcur.NOM_ETRAN
--           and kvit_vneplan.IS_VNEPLAN=1
--      exception
--        when others then
--          vFLG_DOP_CIST:=0;
--      end;       
--    else
      vFLG_DOP_CIST:=lcur.FLG_DOP_CIST;
--    end if;    
    
    -- значения по умолчанию
    vBILL_POS_ID:=1; 

    -- определяем наличие поставки
    vID:=lcur.id;
    BEGIN
      SELECT id INTO vID FROM KVIT WHERE id=lcur.id;
    EXCEPTION 
      WHEN OTHERS THEN
        vID:=0;
    END;        

    -- определяем наличие сведения
    vSvedID:=trim(lcur.sved_id);
    BEGIN
      SELECT id INTO vSvedID FROM SVED WHERE id=trim(lcur.sved_id);
    EXCEPTION 
      WHEN OTHERS THEN
        vSvedID:='';
    END;        

    -- добавляем паспорт
    vPaspID:=trim(lcur.pasp_id);

    IF vPaspID||' '<>' ' THEN
      UPDATE KLS_PASP SET
      (pasp_num,
       rez_num,
       pasp_date,
       prod_id_npr,
       mesto_id,
       date_vir,
       pasp_typ
      )=
      (SELECT 
       lcur.pasp_num,
       '?',
       lcur.date_otgr,
       lcur.prod_id_npr,
       lcur.mesto_id,
       lcur.date_otgr,
       1
       FROM dual
      ) 
      WHERE id=trim(vPaspID);  

      IF SQL%NOTFOUND THEN
        INSERT INTO KLS_PASP  
        (ID,
         pasp_num,
         rez_num,
         pasp_date,
         prod_id_npr,
         mesto_id,
         date_vir,
         pasp_typ
        )
        VALUES 
        (lcur.pasp_id,
         lcur.pasp_num,
         '?',
         lcur.date_otgr,
         lcur.prod_id_npr,
         lcur.mesto_id,
         lcur.date_otgr,
         1
        ); 
        
        vPaspID:=trim(lcur.pasp_id);
      END IF;
    END IF;
      
    -- определяем реквизиты из разнарядки
    vNomZD:=trim(lcur.nom_zd);
    BEGIN
      SELECT nom_zd,tex_pd_id,exped_id,grotp_id INTO vNomZD,vTexPdID,vExpedID,vGrotpID FROM MONTH WHERE nom_zd=trim(lcur.nom_zd);
    EXCEPTION 
      WHEN OTHERS THEN
        vNomZD:='';
    END;        
    
    ----------------------------
    -- ОБРАБОТКА
    ----------------------------
    IF lcur.actioncode=2 THEN
      -- удаление поставки
      DELETE FROM KVIT A WHERE id=vID;

--------------------------------------------------------------------------------      
-- Сергей Антонов 06.10.2008       
      -- флаг обработки  
--      UPDATE XX101_ZKERP_DATA A SET A.PROPAGATESTATUS=1 WHERE a.filename=lcur.filename AND a.filerownum=lcur.filerownum;
--      COMMIT;
--------------------------------------------------------------------------------      
     ELSE
      -- добавление/изменение сведения
      IF trim(lcur.sved_id)||' '<>' ' THEN
        UPDATE SVED SET 
          (FLG_OPERDATA,
           SVED_NUM,
           SVED_DATE,
           DATE_OFORML,
           PASP_ID,
           PROD_ID_NPR,
           MESTO_ID,
           DATE_EDIT
          )= 
          (SELECT
           0,
           lcur.sved_num,
           lcur.date_otgr,
           lcur.date_oforml,
           lcur.pasp_id,
           lcur.prod_id_npr,
           lcur.MESTO_ID,
           lcur.date_oforml
           FROM dual) 
        WHERE id=trim(vSvedID);
      
        IF SQL%NOTFOUND THEN
          -- добавляем сведение
          INSERT INTO SVED  
          (ID,
           FLG_OPERDATA,
           SVED_NUM,
           SVED_DATE,
           DATE_OFORML,
           PASP_ID,
           PROD_ID_NPR,
           MESTO_ID,
           DATE_EDIT
          )
          VALUES 
          (lcur.sved_ID,         
           0,
           lcur.sved_num,
           lcur.date_otgr,
           lcur.date_oforml,
           lcur.pasp_id,
           lcur.prod_id_npr,
           lcur.MESTO_ID,
           lcur.date_oforml
          ); 
       
          vSvedID:=trim(lcur.sved_id);
        END IF; --добавление сведения        
      END IF;
      
      -- добавление/изменение поставки
      UPDATE KVIT SET 
        (FLG_OPERDATA,
         MESTO_ID,
         nom_zd,
         prod_id_npr,
         tex_pd_id,
         num_cist,
         date_otgr,
         ves,
         ves_brutto,
         ves_ed,
         kol_ed,
         tarif,
         tarif_orig,
         num_kvit,
         date_kvit,
         flg_dop_cist,
         flg_vag_klient,
         vagowner_id,
         vagontype_id,
         kalibr_id,
         ves_cist,
         plomba1,
         plomba2,
         vzliv,
         temper,
         fakt_pl,
         shabexp_id,
         exped_id,
         vetka_otp_id,
         sved_id,
         date_oforml,
         sved_num,
         pasp_id,
         num_dover,
         perer_id,
         date_edit,
         JKCOMMIT,
         grotp_id,
         capacity,
         poddons,
         bill_pos_id,
         ttn_id,
         date_dover,
         fio_driver,
         axes,
         defi_mass_id,
         volume
        )= 
        (SELECT
         0,
         lcur.MESTO_ID,
         lcur.nom_zd,
         lcur.prod_id_npr,
         vTexPdID,
         lcur.num_cist,
         lcur.date_otgr,
         lcur.ves,
         lcur.ves_brutto,
         lcur.ves_ed,
         lcur.kol_ed,
         lcur.tarif,
         lcur.tarif,
         Ora_Val(lcur.num_kvit),
         lcur.date_kvit,
         vflg_dop_cist,
         0,
         lcur.vagowner_id,
         lcur.vagontype_id,
         lcur.kalibr_id,
         lcur.ves_cist,
         lcur.plomba1,
         lcur.plomba2,
         lcur.vzliv,
         lcur.temper,
         lcur.fakt_pl,
         lcur.shabexp_id,
         vExpedID,
         lcur.vetka_otp_id,
         lcur.sved_id,
         lcur.date_oforml,
         lcur.sved_num,
         lcur.pasp_id,
         lcur.num_dover,
         8,
         lcur.date_oforml,
         1,
         vGrotpID,
         lcur.capacity,
         lcur.poddons,
         vBill_pos_id,
         lcur.ttn_id,
         lcur.date_dover,
         lcur.fio_driver,
         lcur.axes,
         1,
         lcur.volume
         FROM dual) 
      WHERE id=vID;
      
      IF SQL%NOTFOUND THEN
        -- добавляем поставку
        INSERT INTO KVIT  
        (ID,
         FLG_OPERDATA,
         MESTO_ID,
         nom_zd,
         prod_id_npr,
         tex_pd_id,
         num_cist,
         date_otgr,
         ves,
         ves_brutto,
         ves_ed,
         kol_ed,
         tarif,
         tarif_orig,
         num_kvit,
         date_kvit,
         flg_dop_cist,
         flg_vag_klient,
         vagowner_id,
         vagontype_id,
         kalibr_id,
         ves_cist,
         plomba1,
         plomba2,
         vzliv,
         temper,
         fakt_pl,
         shabexp_id,
         exped_id,
         vetka_otp_id,
         sved_id,
         date_oforml,
         sved_num,
         pasp_id,
         num_dover,
         perer_id,
         date_edit,
         JKCOMMIT,
         grotp_id,
         capacity,
         poddons,
         bill_pos_id,
         ttn_id,
         date_dover,
         fio_driver,
         axes,
         defi_mass_id,
         volume
        )
        VALUES 
        (lcur.ID,         
         0,
         lcur.MESTO_ID,
         lcur.nom_zd,
         lcur.prod_id_npr,
         vTexPdID,
         lcur.num_cist,
         lcur.date_otgr,
         lcur.ves,
         lcur.ves_brutto,
         lcur.ves_ed,
         lcur.kol_ed,
         lcur.tarif,
         lcur.tarif,
         Ora_Val(lcur.num_kvit),
         lcur.date_kvit,
         vflg_dop_cist,
         0,
         lcur.vagowner_id,
         lcur.vagontype_id,
         lcur.kalibr_id,
         lcur.ves_cist,
         lcur.plomba1,
         lcur.plomba2,
         lcur.vzliv,
         lcur.temper,
         lcur.fakt_pl,
         lcur.shabexp_id,
         vExpedID,
         lcur.vetka_otp_id,
         lcur.sved_id,
         lcur.date_oforml,
         lcur.sved_num,
         lcur.pasp_id,
         lcur.num_dover,
         8,
         lcur.date_oforml,
         1,
         vGrotpID,
         lcur.capacity,
         lcur.poddons,
         vBill_pos_id,
         lcur.ttn_id,
         lcur.date_dover,
         lcur.fio_driver,
         lcur.axes,
         1,
         lcur.volume
        ); 
        
        vID:=lcur.id;
      END IF; --добавление поставки        
   
--------------------------------------------------------------------------------      
-- Сергей Антонов 06.10.2008        
--      UPDATE XX101_ZKERP_DATA A SET A.PROPAGATESTATUS=1 WHERE a.filename=lcur.filename AND a.filerownum=lcur.filerownum;
--      COMMIT;   
--------------------------------------------------------------------------------      
    END IF; -- добавление/изменение/удаление  
--------------------------------------------------------------------------------      
-- Сергей Антонов 06.10.2008 

    -- флаг обработки
    UPDATE XX101_ZKERP_DATA A SET A.PROPAGATESTATUS=1 WHERE a.filename=lcur.filename AND a.filerownum=lcur.filerownum;
    UPDATE XX101_ZKERP_DATA A SET A.PROPAGATESTATUS=0 WHERE a.waybillid=lcur.waybillid AND 
                                                            a.waybillrowid=lcur.waybillrowid and 
                                                            a.propagatestatus IS NULL;
    COMMIT;                                                                 
--------------------------------------------------------------------------------          
  END LOOP;
  
  -- пересчитать факт
  For_Zakaz.FillFact(0,TRUNC(vMinDate,'MONTH'),LAST_DAY(vMaxDate));
  for_zakaz.FillFactThisMonth;
  
  UPDATE SVED SET (SVED_VES, SVED_CNT)=
    (SELECT SUM(ves_brutto),COUNT(*) FROM KVIT WHERE KVIT.sved_id=SVED.id GROUP BY KVIT.sved_id)
  WHERE EXISTS (SELECT NULL FROM KVIT WHERE KVIT.sved_id=SVED.id)
    AND sved_date BETWEEN vMinDate AND vMaxDate;
      
  COMMIT;                                

END Xx101_Zkerp_Exec_Pendingaction; 
/

--
-- XX101_ZVZAV_EXEC_PENDINGACTION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Xx101_Zvzav_Exec_Pendingaction IS
  vVetkaId NUMBER;
  vGu12AId NUMBER;
  v_dat DATE;
  vSORTBY NUMBER;
  vLoadKol NUMBER;
  vLoadVes NUMBER;
  vKoeffVes NUMBER;
  vLinkId NUMBER;
  vLinkHistId NUMBER;
  vID NUMBER;
  vHistID NUMBER;
  vNomZD VARCHAR2(16);
  vAddLinkHistId NUMBER;
  vGu12BId NUMBER;
  vMinDate DATE;
  vMaxDate DATE;
BEGIN

  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
      FROM ARH_DATE WHERE ARH_DATE.TABLENAME='MONTH';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

  vMinDate:=TO_DATE('31.12.2049','dd.mm.yyyy');
  vMaxDate:=TO_DATE('31.12.1899','dd.mm.yyyy');

  -- Перебор заявок
  FOR lcur_zav IN (SELECT * FROM (SELECT * FROM XX101_ZVZAV_TO_MONTH B
               WHERE propagatestatus IS NULL AND /* doc302_id in (3020106488) and OR  doc301_id = '3010046762'
               and */(date_plan>=TO_DATE('01.04.2008','dd.mm.yyyy') or actioncode=3)
               ORDER BY filename,TO_NUMBER(filerownum))
               --where rownum<50
               )
  LOOP
    IF lcur_zav.date_plan<vMinDate THEN
      vMinDate:=lcur_zav.date_plan;
    END IF;
    IF lcur_zav.date_plan>vMaxDate THEN
      vMaxDate:=lcur_zav.date_plan;
    END IF;

    -- обновляем справочники
    vVetkaId:=0;
    IF lcur_zav.vetka_name||' '<>' ' THEN
      -- Ветки получателя
      UPDATE KLS_VETKA SET vetka_name=lcur_zav.vetka_name WHERE vetka_name=lcur_zav.vetka_name;
      IF SQL%NOTFOUND THEN
        INSERT INTO KLS_VETKA(ID,VETKA_NAME)  
        (SELECT SEQ_KLS_VETKA.NEXTVAL,lcur_zav.vetka_NAME FROM dual);
      END IF;
      BEGIN
        SELECT id INTO vVetkaid FROM KLS_VETKA WHERE lcur_zav.vetka_name=KLS_VETKA.VETKA_NAME;
      EXCEPTION
        WHEN OTHERS THEN
          vVetkaId:=1;
      END; 
    ELSE
      vVetkaId:=1;     
    END IF;
    -- выводим коэффициент для килограммов (10,07,2008 Романов Ю.И.)
    -- При операциях с Month делим на него.
    vKoeffVes:=1;
    IF (trim(lcur_zav.measureunit)='т') or (trim(lcur_zav.measureunit)='Т') or (trim(lcur_zav.measureunit)='t') or (trim(lcur_zav.measureunit)='T') THEN
     vKoeffVes:=1;
    else
     vKoeffVes:=1000;
    end if;  
    -- ищем (и добавляем при необходимости) план перевозок
    vGu12AId:=0;
    vGu12BId:=0;
    IF lcur_zav.NOM_ETRAN||' '<>' ' THEN
      -- ищем заголовок плана
      BEGIN
        IF lcur_zav.is_exp=0 THEN
          -- внутренний рынок
          SELECT a.id INTO vGu12AId 
            FROM GU12_A a 
		   WHERE trim(a.nom_z) IS NOT NULL
             AND trim(a.nom_z)=SUBSTR(lcur_zav.NOM_ETRAN,1,10) 
             AND (NVL(a.PLATTAR_ID,0)>0 AND a.plattar_id=lcur_zav.plattarif_id)
             AND TO_CHAR(a.prod_id)=lcur_zav.prod_gu12_id
             AND TRUNC(a.from_date,'MONTH')=lcur_zav.date_plan
             AND ROWNUM=1;
        ELSE
          -- экспорт    
          SELECT a.id INTO vGu12AId 
            FROM GU12_A a 
		   WHERE trim(a.nom_z) IS NOT NULL
             AND trim(a.nom_z)=SUBSTR(lcur_zav.NOM_ETRAN,1,10) 
             AND DECODE(a.EXPED_ID,1219,3490,a.EXPED_ID)=lcur_zav.exped_id
             AND TO_CHAR(a.prod_id)=lcur_zav.prod_gu12_id
             AND TRUNC(a.from_date,'MONTH')=lcur_zav.date_plan
             AND ROWNUM=1;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN       
          vGu12AId:=0;
      END;
      
      IF vGu12AId=0 THEN
        -- план перевозок не найден - добавляем
        INSERT INTO GU12_A 
        (
         id,
         nom_z,
         from_date,
         TO_DATE,
         reg_date,
         dogovor,
         stanotpr_id,
         grotp_id,
         exped_id,
         gr_gruz_id,
         vidsoob_id,
         podach_id,
         sogl,
         plattar_id,
         prod_id,
         priznotpr_id,
         vladput_id,
         rodvag_id
        ) VALUES
        (
         0,
         SUBSTR(lcur_zav.NOM_ETRAN,1,10),
         lcur_zav.date_plan,
         LAST_DAY(lcur_zav.date_plan),
         lcur_zav.date_plan,
         (CASE
           WHEN lcur_zav.is_exp=0 THEN TO_CHAR(lcur_zav.tex_pd_id)
           ELSE ''
          END),
         lcur_zav.stanotp_id,
         4175,
         (CASE
           WHEN lcur_zav.is_exp=0 THEN NULL
           WHEN lcur_zav.exped_id=3490 THEN 1219
           ELSE lcur_zav.exped_id
          END),
         lcur_zav.gr_gruz_id,
         (CASE
           WHEN lcur_zav.is_exp=0 THEN 1
           ELSE 2
          END),
         6,
         1,
         lcur_zav.plattarif_id,
         lcur_zav.prod_gu12_id,
         1,
         1111,
         lcur_zav.rodvag_id         
        ); 
        
        BEGIN
          IF lcur_zav.is_exp=0 THEN
            -- внутренний рынок
            SELECT a.id INTO vGu12AId 
              FROM GU12_A a 
		     WHERE trim(a.nom_z) IS NOT NULL
               AND trim(a.nom_z)=SUBSTR(lcur_zav.NOM_ETRAN,1,10) 
               AND (NVL(a.PLATTAR_ID,0)>0 AND a.plattar_id=lcur_zav.plattarif_id)
               AND TO_CHAR(a.prod_id)=lcur_zav.prod_gu12_id
               AND TRUNC(a.from_date,'MONTH')=lcur_zav.date_plan
               AND ROWNUM=1;
          ELSE
            -- экспорт    
            SELECT a.id INTO vGu12AId 
              FROM GU12_A a 
		     WHERE trim(a.nom_z) IS NOT NULL
               AND trim(a.nom_z)=SUBSTR(lcur_zav.NOM_ETRAN,1,10) 
               AND DECODE(a.EXPED_ID,1219,3490,a.EXPED_ID)=lcur_zav.exped_id
               AND TO_CHAR(a.prod_id)=lcur_zav.prod_gu12_id
               AND TRUNC(a.from_date,'MONTH')=lcur_zav.date_plan
               AND ROWNUM=1;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN       
            vGu12AId:=0;
        END;
      END IF;  -- добавление плана
    
      IF vGu12AId>0 THEN
        -- ищем рейс
        BEGIN
          SELECT b.id INTO vGu12BId 
            FROM GU12_B b 
		   WHERE b.id_a=vGu12AId
             AND b.STAN_ID=lcur_zav.stan_id
             AND b.iscor in (0,1)
             AND ROWNUM=1;
        EXCEPTION
          WHEN OTHERS THEN       
            vGu12BId:=0;
        END;
      
        IF vGu12BId=0 THEN
          -- рейс не найден - добавляем
          INSERT INTO GU12_B 
          (
           id,
           id_a,
           stan_id,
           vidotpr_id,
           plat_id,
           iscor
          ) VALUES
          (
           0,
           vGu12AId,
           lcur_zav.stan_id,
           1,
           lcur_zav.plat_id,
           0         
          ); 

          BEGIN
            SELECT b.id INTO vGu12BId 
              FROM GU12_B b 
	  	     WHERE b.id_a=vGu12AId
               AND b.STAN_ID=lcur_zav.stan_id
               AND b.iscor in (0,1)
               AND ROWNUM=1;
          EXCEPTION
            WHEN OTHERS THEN       
              vGu12BId:=0;
          END;
        END IF; -- добавение рейса  
      END IF; -- vGu12BId
      
    END IF; -- план перевозок      
    
    -- определяем наличие заказа УНП
    vID:=lcur_zav.doc301_id;
    BEGIN
      SELECT id INTO vID FROM ZAKAZ WHERE id=lcur_zav.doc301_id;
    EXCEPTION 
      WHEN OTHERS THEN
        vID:=0;
    END;        

    -- определяем наличие позиции заказа УНП
    vHistID:=lcur_zav.doc302_id;
    BEGIN
      SELECT id INTO vHistID FROM ZAKAZ_HIST WHERE id=lcur_zav.doc302_id AND zakaz_id=vID;
    EXCEPTION 
      WHEN OTHERS THEN
        vHistID:=0;
    END;        

    -- определяем наличие разнарядки
    vNomZD:=lcur_zav.doc302_id;
    BEGIN
      SELECT nom_zd INTO vNomZD FROM MONTH WHERE nom_zd=trim(lcur_zav.doc302_id);
    EXCEPTION 
      WHEN OTHERS THEN
        vNomZD:='';
    END;        

    -- определяем наличие связанной позиции заказа СНП
    vLinkId:=NULL;
    vLinkHistId:=NULL;
    IF (lcur_zav.date_plan<to_date('01.03.2009','dd.mm.yyyy') and lcur_zav.plat_id=2641) or (lcur_zav.date_plan>=to_date('01.03.2009','dd.mm.yyyy') and lcur_zav.plat_id=10) THEN -- только для СНП
      IF vID>0 THEN
        -- если заказ УНП уже существует, то сначала поищем связь в нем
        BEGIN
          SELECT link_id,link_hist_id INTO vLinkId,vLinkHistId
            FROM ZAKAZ WHERE id=vID;
          SELECT zakaz_id,id INTO vLinkId,vLinkHistId
            FROM ZAKAZ_HIST WHERE zakaz_id=vLinkId AND id=vLinkHistId;
        EXCEPTION
          WHEN OTHERS THEN
            vLinkId:=NULL;
            vLinkHistId:=NULL;
        END;
      END IF;
    
      IF vLinkID IS NULL THEN
        -- теперь поищем заказ СНП, пришедший из ИСУ  
        BEGIN  
          SELECT zakaz_id,id INTO vLinkId,vLinkHistId
            FROM ZAKAZ_HIST WHERE zakaz_id=lcur_zav.link_id AND id=lcur_zav.link_hist_id;
        EXCEPTION
          WHEN OTHERS THEN
            vLinkId:=NULL;
            vLinkHistId:=NULL;
        END;  
      END IF;
      
      --IF vLinkHistId IS NOT NULL then
         -- берем реквизиты из заказа СНП
         -- ?????? пока не надо
     -- END IF;   
    END IF;

    ----------------------------
    -- ОБРАБОТКА
    ----------------------------
    IF lcur_zav.actioncode=3 THEN
      
      -- удаление разнарядки 
      DELETE FROM MONTH A WHERE nom_zd=vNomZD;
      
      -- уменьшаем объем заказа и удаляем позицию заказа
      BEGIN
        SELECT NVL(load_kol,0), NVL(load_ves,0) INTO vLoadKol,vLoadVes
        FROM ZAKAZ_HIST WHERE zakaz_id=vID AND id=vHistID;

        --снимаем вес с заказа
        UPDATE ZAKAZ A SET KOL=NVL(KOL,0)-vLoadKol, VES=NVL(VES,0)-vLoadVes WHERE id=vID;
        COMMIT;   

        --удаляем позицию
        BEGIN
          For_Zakaz.DelZakazHist(0, vHistID, 0);
        EXCEPTION
          WHEN OTHERS THEN  
            DELETE FROM ZAKAZ_HIST A WHERE zakaz_id=vID AND id=vHistID;
        END;    
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;      

      -- флаг обработки  
      UPDATE XX101_ZVZAV_DATA A SET A.PROPAGATESTATUS=1 WHERE a.filename=lcur_zav.filename AND a.filerownum=lcur_zav.filerownum;
      COMMIT;   

      --удаляем заказ
      BEGIN
        UPDATE ZAKAZ SET is_accept=0 WHERE id=vID;
        For_Zakaz.DelZakaz(0, vID, 0);
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;  
      END;    
         
    ELSE  
      
      -- обновялем заказ УНП
      UPDATE ZAKAZ SET 
        (date_plan,
         client_number,
         client_date,
         begin_date,
         plat_id,
         dog_id,
         prod_id_npr,
         usl_opl_id,
         load_abbr,
         stan_id,
         vetka_id,
         poluch_id,
         potreb_id,
         planstru_id,
         prim,
         gr4
        )= 
        (SELECT
           lcur_zav.date_plan,
           lcur_zav.input_num,
           lcur_zav.input_date,
           lcur_zav.begin_date,
           lcur_zav.plat_id,
           lcur_zav.dog_id,
           lcur_zav.prod_id_npr,
           lcur_zav.usl_opl_id,
           lcur_zav.load_abbr,
           lcur_zav.stan_id,
           vVetkaId,
           lcur_zav.poluch_id,
           lcur_zav.potreb_id,
           lcur_zav.planstru_id,
           lcur_zav.prim,
           lcur_zav.gr4
         FROM dual)  
      WHERE ID=vID;

      IF SQL%NOTFOUND THEN
        -- добавляем заказ УНП
        vID:=For_Zakaz.AddZakaz(0, lcur_zav.doc301_id, 0, 1, lcur_zav.DATE_PLAN , lcur_zav.INPUT_NUM ,
             lcur_zav.INPUT_DATE, lcur_zav.doc301_id, lcur_zav.INPUT_DATE, lcur_zav.BEGIN_DATE ,
	         1, 31, lcur_zav.PLAT_ID, lcur_zav.DOG_ID, lcur_zav.PROD_ID_NPR, lcur_zav.USL_OPL_ID, 
             lcur_zav.LOAD_ABBR, lcur_zav.STAN_ID,  vVetkaID, lcur_zav.POLUCH_ID, lcur_zav.POTREB_ID, '',
	         '', 10, lcur_zav.PLANSTRU_ID, 0, 0, 0, 0, 0, 0,
	         lcur_zav.PRIM, lcur_zav.GR4, NULL,NULL,NULL,NULL, vLinkId, vLinkHistId, 1, 1, 1);

        -- повторно проверяем наличие связанной позиции заказа СНП (могла добавиться)
        vLinkId:=NULL;
        vLinkHistId:=NULL;
        BEGIN
          SELECT link_id,link_hist_id INTO vLinkId,vLinkHistId
          FROM ZAKAZ WHERE id=vID;

          SELECT zakaz_id,id INTO vLinkId,vLinkHistId
          FROM ZAKAZ_HIST WHERE zakaz_id=vLinkId AND id=vLinkHistId;
        EXCEPTION
          WHEN OTHERS THEN
            vLinkId:=NULL;
            vLinkHistId:=NULL;
        END;  

        -- Проставляем связи в редактируемом заказе
  	    For_Zakaz.SetZakazLink(vID,vLINKID,vLINKHISTID);

      END IF; --добавление заказа УНП  

      -- определяем объем позиции заказа до изменения
      BEGIN
        SELECT NVL(load_kol,0), NVL(load_ves,0) INTO vLoadKol,vLoadVes
        FROM ZAKAZ_HIST WHERE zakaz_id=vID AND id=vHistID;
      EXCEPTION
        WHEN OTHERS THEN
          vLoadKol:=0;
          vLoadVes:=0;
      END;      
      
      -- обновляем позицию заказа УНП
      UPDATE ZAKAZ_HIST SET 
        (client_number,
         client_date,
         prod_id_npr,
         stan_id,
         poluch_id,
         load_ves,
         load_kol,
         nom_zd,
         begin_date,
         potreb_id,
         kod_isu
        )= 
        (SELECT
           lcur_zav.input_num,
           lcur_zav.input_date,
           lcur_zav.prod_id_npr,
           lcur_zav.stan_id,
           lcur_zav.poluch_id,
           lcur_zav.ves,
           lcur_zav.kol,
           lcur_zav.doc302_id,
           lcur_zav.begin_date,
           lcur_zav.potreb_id,
           lcur_zav.doc301_id
         FROM dual)  
      WHERE zakaz_ID=vID AND id=vHistID;

      IF SQL%NOTFOUND THEN
        -- проверяем, что связанная позиция заказа СНП не ссылается на какую-либо позицию заказа УНП
        BEGIN
          SELECT a.id INTO vAddLinkHistId FROM ZAKAZ_HIST a, ZAKAZ_HIST b WHERE a.id=vLINKHISTID AND a.link_hist_id=b.id AND b.id<>lcur_zav.doc302_id;
          vAddLinkHistId:=NULL;
        EXCEPTION
          WHEN OTHERS THEN
            vAddLinkHistId:=vLINKHISTID;
        END;       
        
        -- добавляем позицию заказа УНП
        vHistId:=For_Zakaz.AddZakazHist(0, lcur_zav.doc302_id, 0, 0, vID, 20, lcur_zav.input_num,
             lcur_zav.input_date, '', lcur_zav.input_date, lcur_zav.prod_id_npr,
	         NULL, lcur_zav.STAN_ID, lcur_zav.POLUCH_ID, lcur_zav.POTREB_ID, 0, 0,
	         0, 0, 0, lcur_zav.doc302_id, lcur_zav.ves, lcur_zav.kol, 0, 0,
	         vGu12AID, lcur_zav.BEGIN_DATE, vLINKID, vAddLinkHistId, lcur_zav.doc301_id, 1);

        -- повторно проверяем наличие связанной позиции заказа СНП (могла добавиться)
        vAddLinkHistId:=NULL;
        BEGIN
          SELECT link_hist_id INTO vAddLinkHistId
          FROM ZAKAZ_HIST WHERE id=vHistID;

          SELECT id INTO vAddLinkHistId
          FROM ZAKAZ_HIST WHERE zakaz_id=vLinkId AND id=vAddLinkHistId;
        EXCEPTION
          WHEN OTHERS THEN
            vAddLinkHistId:=NULL;
        END;  
             
  	    For_Zakaz.SetZakazHistLink(vAddLinkHistId,vID,vHISTID);
  	    For_Zakaz.SetZakazHistLink(vHISTID,vLINKID,vAddLinkHistId);
      END IF; --добавление позиции заказа УНП  

      -- обновляем разнарядку
     /* UPDATE MONTH SET 
        (stanotp_id,
         stan_id,
         vetka_id,
         poluch_id,
         tex_pd_id,
         nazn_otg_id,
         load_abbr,
         dog_id,
         usl_number,
         prod_id_npr,
         tonn_declared,
         cist_declared,
         date_plan,
         prim,
         cena,
         cena_otp,
         sum_zd,
         gr4,
         input_date,
         update_date,
         potreb_id,
         planstru_id,
         tonn_r,
         cist_r,
         transport,
         is_exp,
         tonn_raznar,
         cist_raznar,
         zakaz_id,
         exped_id,
         gu12_a_id,
         zakaz_hist_id,
         zakaz_kod_isu
        )= 
        (SELECT
         lcur_zav.stanotp_id,
         lcur_zav.stan_id,
         vVetkaId,
         lcur_zav.poluch_id,
         lcur_zav.tex_pd_id,
         lcur_zav.nazn_otg_id,
         lcur_zav.load_abbr,
         lcur_zav.dog_id,
         lcur_zav.usl_number,
         lcur_zav.prod_id_npr,
         lcur_zav.ves/vKoeffVes,
         lcur_zav.kol,
         lcur_zav.date_plan,
         lcur_zav.prim,
         lcur_zav.cena,
         lcur_zav.cena_otp,
         lcur_zav.sum_zd,
         lcur_zav.gr4,
         lcur_zav.begin_date,
         lcur_zav.update_date,
         lcur_zav.potreb_id,
         lcur_zav.planstru_id,
         lcur_zav.ves/vKoeffVes,
         lcur_zav.kol,
         lcur_zav.transport,
         lcur_zav.is_exp,
         lcur_zav.ves/vKoeffVes,
         lcur_zav.kol,
         vID,
         lcur_zav.exped_id,
         vGu12AId,
         vHistID,
         lcur_zav.doc301_id
         FROM dual) 
      WHERE nom_zd=vNomZD;*/
      
      IF SQL%NOTFOUND THEN
        -- добавляем разнарядку УНП
        INSERT INTO MONTH  
        (nom_zd,
         stanotp_id,
         npr_sobstv_id,
         --stan_id,
         --vetka_id,
         --poluch_id,
         tex_pd_id,
         nazn_otg_id,
         load_abbr,
         dog_id,
         usl_number,
         prod_id_npr,
         tonn_declared,
         cist_declared,
         date_plan,
         prim,
         cena,
         cena_otp,
         sum_zd,
         --gr4,
         input_date,
         update_date,
         --potreb_id,
         --planstru_id,
         grotp_id,
         tonn_r,
         cist_r,
         transport,
         is_exp,
         supplier_id,
         tonn_raznar,
         cist_raznar,
         --zakaz_id,
         exped_id,
         gu12_a_id--,
         --zakaz_hist_id,
         --zakaz_kod_isu
        )
        VALUES 
        (lcur_zav.doc302_id,
         lcur_zav.stanotp_id,
         4175,
         --lcur_zav.stan_id,
         --vVetkaId,
         --lcur_zav.poluch_id,
         lcur_zav.tex_pd_id,
         lcur_zav.nazn_otg_id,
         lcur_zav.load_abbr,
         lcur_zav.dog_id,
         lcur_zav.usl_number,
         lcur_zav.prod_id_npr,
         lcur_zav.ves/vKoeffVes,
         lcur_zav.kol,
         lcur_zav.date_plan,
         lcur_zav.prim,
         lcur_zav.cena,
         lcur_zav.cena_otp,
         lcur_zav.sum_zd,
         --lcur_zav.gr4,
         lcur_zav.begin_date,
         lcur_zav.update_date,
         --lcur_zav.potreb_id,
         --lcur_zav.planstru_id,
         4175,
         lcur_zav.ves/vKoeffVes,
         lcur_zav.kol,
         lcur_zav.transport,
         lcur_zav.is_exp,
         4175,
         lcur_zav.ves/vKoeffVes,
         lcur_zav.kol,
         --vID,
         lcur_zav.exped_id,
         vGu12AId--,
         --vHistID,
         --lcur_zav.doc301_id
        ); 
        
        vNomzd:=lcur_zav.doc302_id;
      END IF; --добавление заказа УНП        
      
      update month set
        stan_id= null,
        vetka_id= null,
        poluch_id= null,
        prim= null,
        gr4= null,
        potreb_id= null,
        planstru_id= null,
        zakaz_id= null
        where date_plan >='1-may-2018';
--        where date_plan >='01.05.2018';
        
        
       -- обновляем объем заказа
      UPDATE ZAKAZ A SET KOL=NVL(KOL,0)-vLoadKol+lcur_zav.kol, VES=NVL(VES,0)-vLoadVes+lcur_zav.ves/vKoeffVes WHERE id=vID;
      -- флаг обработки  
      UPDATE XX101_ZVZAV_DATA A SET A.PROPAGATESTATUS=1 WHERE a.filename=lcur_zav.filename AND a.filerownum=lcur_zav.filerownum;
      COMMIT;   
    END IF; -- acctioncode
  END LOOP;               
                  
-- пересчитать факт
For_Zakaz.FillFact(0,TRUNC(vMinDate,'MONTH'),LAST_DAY(vMaxDate));  
for_zakaz.FillFactThisMonth;

COMMIT;                                
END Xx101_Zvzav_Exec_Pendingaction;

/

--
-- GET_CONTRACT_PARUS  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_CONTRACT_PARUS(ps_doc varchar2, ps_param varchar2, pd_date date)
return  
--Desc:возвращает сответствующий номер договора из Парус
--14.07.2006 VZhukow
varchar2
is
ls_result varchar2(50);
ls_result_sf varchar2 (60);
ln_rn number;
function get_rn_gcp (pn_rn number) return varchar2
as
lsl_result varchar2(60);
begin
begin
select trim(pref_numb)||'-'||trim(reg_numb)||'*'||TO_CHAR(acc_date,'DD.mm.YYYY') into
lsl_result
from docinpt@oracle.world d_i, doclinks@oracle.world d_l,
docoutpt@oracle.world d_o,DICACCFO@oracle.world D_AC
where
d_l.in_doc = d_i.rn
and d_l.out_doc = d_o.rn
and d_i.document = pn_rn
and d_i.unitcode = 'GoodsTransInvoicesToConsumers'
and d_o.unitcode = 'AccountFactOutput'
AND D_O.DOCUMENT = D_AC.RN;
exception when others then
lsl_result:= '-9999*-9999';
end;
return (lsl_result);
end;



begin
ls_result_sf:='-9999';
If ps_param = 'AUTO' then
begin
select distinct
rn,substr(accnumb,1,decode(instr(ACCNUMB,'('),0,length(accnumb),instr(ACCNUMB,'('))-1)
into 
ln_rn,ls_result
from transinvcust@Oracle.world A1
where
trim(A1.PREF)||'-'||trim(A1.NUMB) = ps_doc;
exception when others then
ls_result:= '-9999+-9999';
end;
If ls_result<>'-9999+-9999' then
ls_result_sf:=get_rn_gcp (ln_rn);
end if;
If ls_result_sf<>'-9999' then
ls_result:= ls_result||'+'||ls_result_sf;
end if;
end if;
If ps_param = 'GD' then
begin
select distinct substr(accnumb,1,decode(instr(ACCNUMB,'('),0,length(accnumb),instr(ACCNUMB,'('))-1)  
into 
ls_result
from parus_fin y,transinvcust@oracle.world a2, kvit y2
where
y.kvit_id = y2.id
and y.rn = a2.rn
and y2.num_kvit = to_number(ps_doc)
and y2.date_kvit = pd_date;
exception when others then 
ls_result:='-9999+-9999';
end;
If ls_result<>'-9999+-9999' then
ls_result_sf:=get_rn_gcp (ln_rn);
end if;
If ls_result_sf<>'-9999' then
ls_result:= ls_result||'+'||ls_result_sf;
end if;
end if; 
return(trim(ls_Result));
end; 
/

--
-- GET_CONTRACT_PARUS_VZ  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_CONTRACT_PARUS_VZ(ps_doc varchar2, ps_param varchar2, pd_date date)
return  
--Desc:возвращает сответствующий номер договора из Парус
--14.07.2006 VZhukow
--Для 604 отчета
--функция быда переделана из GET_CONTRACT_PARUS
--так как была проблема
varchar2
is
ls_result varchar2(50);
ls_result_sf varchar2 (60);
ln_rn number;
function get_rn_gcp (pn_rn number) return varchar2
as
lsl_result varchar2(60);
begin
begin
--select trim(pref_numb)||'-'||trim(reg_numb)||'*'||TO_CHAR(acc_date,'DD.mm.YYYY') into
select trim(reg_numb)||'*'||TO_CHAR(acc_date,'YYYYmmDD') into
lsl_result
from docinpt@oracle.world d_i, doclinks@oracle.world d_l,
docoutpt@oracle.world d_o,DICACCFO@oracle.world D_AC
where
d_l.in_doc = d_i.rn
and d_l.out_doc = d_o.rn
and d_i.document = pn_rn
and d_i.unitcode = 'GoodsTransInvoicesToConsumers'
and d_o.unitcode = 'AccountFactOutput'
AND D_O.DOCUMENT = D_AC.RN;
exception when others then
lsl_result:= '-9999*-9999';
end;
return (lsl_result);
end;



begin
ls_result_sf:='-9999';
ls_result :='-3333';
If ps_param = 'AUTO_CONT' then
begin
select distinct
substr(accnumb,1,decode(instr(ACCNUMB,'('),0,length(accnumb),instr(ACCNUMB,'('))-1)
into 
ls_result
from transinvcust@Oracle.world A1
where
trim(A1.PREF)||'-'||trim(A1.NUMB) = ps_doc
and rownum = 1;
exception when others then
ls_result:= '-9999';
end;
end if;

If ps_param = 'AUTO_ACC' then
begin
select distinct rn into ln_rn
from transinvcust@Oracle.world A1
where
trim(A1.PREF)||'-'||trim(A1.NUMB) = ps_doc
and rownum = 1;
exception when others then
ls_result:= '-9999';
end;
If ls_result<> '-9999' then
ls_result:=get_rn_gcp (ln_rn);
end if;
end if;

If ps_param = 'GD_CONT' then
begin
select distinct substr(accnumb,1,decode(instr(ACCNUMB,'('),0,length(accnumb),instr(ACCNUMB,'('))-1)  
into 
ls_result
from parus_fin y,transinvcust@oracle.world a2, kvit y2
where
y.kvit_id = y2.id
and y.rn = a2.rn
and y2.num_kvit = to_number(ps_doc)
and y2.date_kvit = pd_date
and rownum = 1;
exception when others then 
ls_result:='-9999';
end;
end if;

if ps_param = 'GD_ACC' then
begin
select distinct a2.rn into  ln_rn
from parus_fin y,transinvcust@oracle.world a2, kvit y2
where
y.kvit_id = y2.id
and y.rn = a2.rn
and y2.num_kvit = to_number(ps_doc)
and y2.date_kvit = pd_date
and rownum = 1;
exception when others then 
ls_result:='-9999';
end;
If ls_result<>'-9999' then
ls_result:=get_rn_gcp (ln_rn);
end if;
end if;
return(trim(NVL(ls_Result,'-9999')));
end; 
/

--
-- GET_DOVER_NUM  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Dover_Num
 (nom_dok# NUMBER)
RETURN VARCHAR2
AS
  val# VARCHAR2(50);
--  propis# varchar2(4000);
BEGIN
  SELECT MAX(KVIT.NUM_DOVER) INTO val# FROM KVIT
    WHERE KVIT.BILL_ID=nom_dok#;

  RETURN val#;
END Get_Dover_Num;

/

--
-- GET_NAKL_NUM  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Nakl_Num
 (nom_dok# NUMBER)
RETURN VARCHAR2
AS
  val# VARCHAR2(50);
--  propis# varchar2(4000);
BEGIN
  SELECT MAX(KVIT.NUM_KVIT) INTO val# FROM KVIT
    WHERE KVIT.BILL_ID=nom_dok#;

  RETURN val#;
END Get_Nakl_Num;

/

--
-- GET_NEWKVIT  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_NEWKVIT 
(OLDDATE# DATE, CIST# VARCHAR2)
RETURN NUMBER AS
NEWKVIT NUMBER;
BEGIN
	 NEWKVIT:=0;
	 
	 SELECT NUM_KVIT INTO NEWKVIT
	 FROM
	  		(SELECT NUM_KVIT
	   		FROM KVIT
	   		WHERE NUM_CIST=CIST# 
	   		AND DATE_KVIT>OLDDATE#
	   		ORDER BY DATE_KVIT)
	 WHERE ROWNUM=1;
	 
	 RETURN NEWKVIT;
END GET_NEWKVIT;

/

--
-- GET_TARIF_CIST  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.GET_TARIF_CIST (MNUM_KVIT NUMBER,MVES NUMBER,FIELD_NAME VARCHAR2) RETURN NUMBER IS
SUM_CHISLO NUMBER;
SUM_VES NUMBER;
OTVET NUMBER;
BEGIN
  OTVET:=0;
   SELECT SUM(VES) INTO SUM_VES FROM KVIT WHERE NUM_KVIT=MNUM_KVIT;
   IF FIELD_NAME='TARIF' THEN
      SELECT TARIF INTO SUM_CHISLO FROM KVIT WHERE NUM_KVIT=MNUM_KVIT AND TARIF<>0;    
      OTVET:=ROUND(MVES*(SUM_CHISLO/SUM_VES),2);
   END IF;
   IF FIELD_NAME='DOPTARIF' THEN
      SELECT kvit.TARIF19-kvit.TARIF INTO SUM_CHISLO FROM KVIT WHERE NUM_KVIT=MNUM_KVIT AND TARIF19<>0;    
      OTVET:=ROUND(MVES*(SUM_CHISLO/SUM_VES),2);
   END IF;
   IF FIELD_NAME='TARIF_NDS' THEN
      SELECT TARIF_NDS INTO SUM_CHISLO FROM KVIT WHERE NUM_KVIT=MNUM_KVIT AND TARIF_NDS<>0;    
      OTVET:=ROUND(MVES*(SUM_CHISLO/SUM_VES),2);
   END IF;
   IF FIELD_NAME='TARIF_GUARD' THEN
      SELECT TARIF_GUARD INTO SUM_CHISLO FROM KVIT WHERE NUM_KVIT=MNUM_KVIT AND TARIF_GUARD<>0;    
      OTVET:=ROUND(MVES*(SUM_CHISLO/SUM_VES),2);
   END IF;
   IF FIELD_NAME='TARIF_GUARD_NDS' THEN
      SELECT TARIF_GUARD_NDS INTO SUM_CHISLO FROM KVIT WHERE NUM_KVIT=MNUM_KVIT AND TARIF_GUARD_NDS<>0;    
      OTVET:=ROUND(MVES*(SUM_CHISLO/SUM_VES),2);
   END IF;
   RETURN OTVET;
END GET_TARIF_CIST;

/

--
-- LAJA  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.LAJA
("ПРОДУКТ", "ПЛАТЕЛЬЩИКДОГ", "ПЛАТЕЛЬЩИК", "ВЕС", "СУММА", 
 DATE_KVIT)
AS 
SELECT 
  prod_group.name_npr AS Продукт,
  kls_predpr.PREDPR_NAME AS ПлательщикДог, 
  RTRIM(LTRIM(DECODE(STUPID_PLAT(kls_dog.predpr_id),'ничего',kls_groupdog.groupdog_name,STUPID_PLAT(kls_dog.predpr_id)))) AS Плательщик, 
  k.ves/1000 AS Вес,
  p.summa/1000 AS Сумма,
  bills.date_buxg AS date_kvit
 FROM 
   bills, kls_dog, kls_prod, 
   kls_prod prod_group,kls_predpr, 
   kls_groupdog, (SELECT kvit.bill_id,SUM(kvit.ves) AS ves FROM kvit GROUP BY bill_id) k,
   (SELECT bill_pos.NOM_DOK,SUM(bill_pos.SUMMA) AS summa FROM bill_pos WHERE bill_pos_id<10 GROUP BY nom_dok) p
 WHERE 
     (kls_prod.id_npr = bills.prod_id_npr)
 AND (bills.dog_id = kls_dog.id)
 AND (kls_prod.id_group_npr = prod_group.id_npr)
 AND (kls_groupdog.id = kls_dog.groupdog_id)
 AND (kls_predpr.ID=kls_dog.PREDPR_ID)
 AND bills.date_kvit>=TO_DATE('01.01.01','dd.mm.rr')
 AND (k.bill_id = bills.nom_dok)
 AND (p.nom_dok = bills.nom_dok);


--
-- V_AGENT_REPORT_TARIF_2006  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AGENT_REPORT_TARIF_2006
(NOM_DOK, TARIF_BN, TARIF_NDS, TARIF, TARIF_GUARD_BN, 
 TARIF_GUARD_NDS, TARIF_GUARD)
AS 
SELECT /*+ RULE */
  BILLS.NOM_DOK,
  SUM(NVL(KVIT.TARIF,0)) as TARIF_BN,
  SUM(NVL(KVIT.TARIF_NDS,0)) AS TARIF_NDS,
  SUM(NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)) AS TARIF,
  SUM(NVL(KVIT.TARIF_GUARD,0)) AS TARIF_GUARD_BN,
  SUM(NVL(KVIT.TARIF_GUARD_NDS,0)) AS TARIF_GUARD_NDS,
  SUM(NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)) AS TARIF_GUARD
FROM 
  BILLS, KVIT, 
  (SELECT distinct nom_perech,dat_perech 
     FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='OTCH_AGENT_2006.XLS') r,REESTR_RAIL_RGD_SF 
    WHERE DATE_SCH BETWEEN r.BEGIN_DATE AND r.END_DATE -- По дате счета РЖД
      AND r21=95) rail_sf  
WHERE BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PERECH_TEXPD_DATE=rail_sf.dat_perech
  AND KVIT.PERECH_TEXPD_NUM=rail_sf.nom_perech
GROUP BY
  NOM_DOK;


--
-- V_AGENT_REPORT_2006  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AGENT_REPORT_2006
(DATE_AGENT, DOG_NUMBER, DOG_DATE, PREDPR_NAME, VES, 
 SUM_TARIF_AREND_BN, SUM_TARIF_AREND_NDS, SUM_TARIF_AREND, SUM_TARIF_BN, SUM_TARIF_NDS, 
 SUM_TARIF, SUM_VOZN_10001_BN, SUM_VOZN_10001_NDS, SUM_VOZN_10001, SUM_VOZN_BN, 
 SUM_VOZN_NDS, SUM_VOZN, SUM_USL_AREND_BN, SUM_USL_AREND_NDS, SUM_USL_AREND, 
 SUM_USL_BN, SUM_USL_NDS, SUM_USL, SUM_VOZN_GD_BN, SUM_VOZN_GD_NDS, 
 SUM_VOZN_GD, SUM_STRAH, SUM_VOZN_10052_BN, SUM_VOZN_10052_NDS, SUM_VOZN_10052, 
 SUM_VOZN_10051_BN, SUM_VOZN_10051_NDS, SUM_VOZN_10051, SUM_VOZN_10050_BN, SUM_VOZN_10050_NDS, 
 SUM_VOZN_10050, SUM_VOZN_10060_BN, SUM_VOZN_10060_NDS, SUM_VOZN_10060, SUM_VOZN_10061_BN, 
 SUM_VOZN_10061_NDS, SUM_VOZN_10061, SUM_VOZN_10053_BN, SUM_VOZN_10053_NDS, SUM_VOZN_10053, 
 SUM_VOZN_10054_BN, SUM_VOZN_10054_NDS, SUM_VOZN_10054, SUM_VOZN_10007_BN, SUM_VOZN_10007_NDS, 
 SUM_VOZN_10007, SUM_VOZN_10056_BN, SUM_VOZN_10056_NDS, SUM_VOZN_10056, SUM_VOZN_10057_BN, 
 SUM_VOZN_10057_NDS, SUM_VOZN_10057)
AS 
SELECT
  date_agent,
  DOG_NUMBER,
  dog_date,
  PREDPR_NAME,
  SUM(VES) AS ves,
  -- Тариф по транспортировке в аренд.вагонах
  SUM(sum_tarif_arend_bn),
  SUM(sum_tarif_arend_nds),
  SUM(sum_tarif_arend),
  -- Тариф
  SUM(sum_tarif_bn),
  SUM(sum_tarif_nds),
  SUM(sum_tarif),
  -- Вознаграждение по ИВР
  SUM(sum_vozn_10001_bn),
  SUM(sum_vozn_10001_NDS),
  SUM(sum_vozn_10001),
  -- Вознаграждение
  SUM(sum_vozn_bn),
  SUM(sum_vozn_NDS),
  SUM(sum_vozn),
  -- Услуги по организации транспортировки в аренд вагонах
  SUM(sum_usl_arend_bn),
  SUM(sum_usl_arend_NDS),
  SUM(sum_usl_arend),
  -- Услуги по организации транспортировки в вагонах МПС
  SUM(sum_usl_bn),
  SUM(sum_usl_NDS),
  SUM(sum_usl),
  -- Услуги предоставлению вагонов
  SUM(sum_vozn_gd_bn),
  SUM(sum_vozn_gd_NDS),
  SUM(sum_vozn_gd),
  SUM(sum_strah),
  -- Договорный сбор за перевозку в вагонах перевозчика
  SUM(sum_vozn_10052_bn),
  SUM(sum_vozn_10052_NDS),
  SUM(sum_vozn_10052),
  -- Договорный сбор за перевозку в арендованных вагонах
  SUM(sum_vozn_10051_bn),
  SUM(sum_vozn_10051_NDS),
  SUM(sum_vozn_10051),
  -- Cбор за изменение заявки
  SUM(sum_vozn_10050_bn),
  SUM(sum_vozn_10050_NDS),
  SUM(sum_vozn_10050),
  -- Штраф за невыполнение заявки 0,1 МРОТ
  SUM(sum_vozn_10060_bn),
  'НДС не предусмотрен' as sum_vozn_10060_NDS,
  SUM(sum_vozn_10060),
  -- Штраф за невыполнение заявки 0,1 МРОТ/3*2
  SUM(sum_vozn_10061_bn),
  'НДС не предусмотрен' AS sum_vozn_10061_NDS,
  SUM(sum_vozn_10061),
  -- Cбор за изменение станции
  SUM(sum_vozn_10053_bn),
  SUM(sum_vozn_10053_NDS),
  SUM(sum_vozn_10053),
  -- Cбор за факс-обмен
  SUM(sum_vozn_10054_bn),
  SUM(sum_vozn_10054_NDS),
  SUM(sum_vozn_10054),
  -- Услуги по подаче телеграм
  SUM(sum_vozn_10007_bn),
  SUM(sum_vozn_10007_NDS),
  SUM(sum_vozn_10007),
  -- Отстой цистерн Покупателя на путях общего пользования составил 
  SUM(sum_vozn_10056_bn),
  SUM(sum_vozn_10056_NDS),
  SUM(sum_vozn_10056),
  -- Подготовка цистерн Покупателя под налив средствами Сосногорского вагонного депо составила 
  SUM(sum_vozn_10057_bn),
  SUM(sum_vozn_10057_NDS),
  SUM(sum_vozn_10057)
FROM
(
SELECT
  end_date AS date_agent,
  kls_dog.DOG_NUMBER,
  RusDate(kls_dog.dog_date) as dog_date,
  kls_predpr.PREDPR_NAME,
  SUM(v_bill_pos_flat.VES) AS ves,
  -- Тариф по транспортировке в аренд.вагонах
  0 AS sum_tarif_arend_bn,
  0 AS sum_tarif_arend_nds,
  0 AS sum_tarif_arend,
  -- Тариф
  0 AS sum_tarif_bn,
  0 AS sum_tarif_nds,
  0 AS sum_tarif,
  -- Вознаграждение по ИВР
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10001_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10001_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10001' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10001,
  -- Вознаграждение
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR>='10100' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR>='10100' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR>='10100' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn,
  -- Услуги по организации транспортировки в аренд вагонах
  0 AS sum_usl_arend_bn,
  0 AS sum_usl_arend_NDS,
  0 AS sum_usl_arend,
  -- Услуги по организации транспортировки в вагонах МПС
  0 AS sum_usl_bn,
  0 AS sum_usl_NDS,
  0 AS sum_usl,
  -- Услуги предоставлению вагонов
  0 AS sum_vozn_gd_bn,
  0 AS sum_vozn_gd_NDS,
  0 AS sum_vozn_gd,
  SUM(v_bill_pos_flat.STRAH) AS sum_strah,
  -- Договорный сбор за перевозку в вагонах перевозчика
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10052' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10052_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10052' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10052_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10052' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10052,
  -- Договорный сбор за перевозку в арендованных вагонах
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10051' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10051_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10051' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10051_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10051' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10051,
  -- Cбор за изменение заявки
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10050' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10050_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10050' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10050_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10050' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10050,
  -- Штраф за невыполнение заявки 0,1 МРОТ
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10060' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10060_bn,
  'НДС не предусмотрен' AS sum_vozn_10060_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10060' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10060,
  -- Штраф за невыполнение заявки 0,1 МРОТ/3*2
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10061' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10061_bn,
  'НДС не предусмотрен' AS sum_vozn_10061_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10061' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10061,
  -- Cбор за изменение станции
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10053' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10053_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10053' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10053_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10053' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10053,
  -- Cбор за факс-обмен
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10054' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10054_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10054' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10054_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10054' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10054,
  -- Услуги по подаче телеграм
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10007' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10007_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10007' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10007_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10007' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10007,
  -- Отстой цистерн Покупателя на путях общего пользования составил 
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10056' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10056_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10056' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10056_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10056' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10056,
  -- Подготовка цистерн Покупателя под налив средствами Сосногорского вагонного депо составила 
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10057' THEN v_bill_pos_flat.VOZN11_BN+v_bill_pos_flat.VOZN12_BN
   ELSE 0
   END) AS sum_vozn_10057_bn,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10057' THEN v_bill_pos_flat.VOZN11_NDS+v_bill_pos_flat.VOZN12_NDS
   ELSE 0
   END) AS sum_vozn_10057_NDS,
  SUM(CASE
      WHEN v_bills.PROD_ID_NPR='10057' THEN v_bill_pos_flat.VOZN11+v_bill_pos_flat.VOZN12
   ELSE 0
   END) AS sum_vozn_10057
 FROM v_bills_fin_unp v_bills,v_bill_pos_flat_fin_unp v_bill_pos_flat,kls_dog,kls_predpr,usl_dog,V_MASTER_REPORTS,month,kls_vid_otgr
 WHERE
   v_bills.DOG_ID=kls_dog.id and
   v_bills.NOM_DOK=v_bill_pos_flat.NOM_DOK and
   kls_dog.PREDPR_ID=kls_predpr.ID and
--   v_bills.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy') and
--   v_bill_pos_flat.DATE_REALIZ>=TO_DATE('01.01.2005','dd.mm.yyyy') and
   kls_dog.dog_number LIKE V_MASTER_REPORTS.DOG_NUMBER and
   v_bills.DATE_VYP_SF between begin_date AND end_date and
   NLS_UPPER(V_MASTER_REPORTS.REPORT_FILE)='OTCH_AGENT_2006.XLS'
   AND (v_bills.PROD_ID_NPR IN ('10001','10007','10050','10051','10052','10053','10054','10060','10061','10056','10057') OR
        v_bills.PROD_ID_NPR>='10100')
   AND v_bills.DOG_ID=usl_dog.DOG_ID(+)
   AND v_bills.USL_NUMBER=usl_dog.USL_NUMBER(+)
   AND v_bills.IS_AGENT IN (2,4,5)
   AND v_bills.nom_zd=month.nom_zd(+)
   AND month.load_abbr=kls_vid_otgr.load_abbr(+)
   AND (kls_vid_otgr.LOAD_TYPE_ID in (1,4,6) or kls_vid_otgr.LOAD_TYPE_ID is null)
 GROUP BY
   end_date,
   kls_dog.DOG_NUMBER,
   kls_dog.dog_date,
   kls_predpr.PREDPR_NAME
--
UNION ALL
--
-- Тариф
SELECT
  end_date AS date_agent,
  kls_dog.DOG_NUMBER,
  RusDate(kls_dog.dog_date) as dog_date,
  kls_predpr.PREDPR_NAME,
  0 AS ves,
  -- Тариф по транспортировке в аренд.вагонах
  0 AS sum_tarif_arend_bn,
  0 AS sum_tarif_arend_nds,
  0 AS sum_tarif_arend,
  -- Тариф
  SUM(v_bill_pos_flat.TARIF_BN+v_bill_pos_flat.TARIF_GUARD_BN) AS sum_tarif_bn,
  SUM(v_bill_pos_flat.TARIF_NDS+v_bill_pos_flat.TARIF_GUARD_NDS) AS sum_tarif_nds,
  SUM(v_bill_pos_flat.TARIF+v_bill_pos_flat.TARIF_GUARD) AS sum_tarif,
  -- Вознаграждение по ИВР
  0 AS sum_vozn_10001_bn,
  0 AS sum_vozn_10001_NDS,
  0 AS sum_vozn_10001,
  -- Вознаграждение
  0 AS sum_vozn_bn,
  0 AS sum_vozn_NDS,
  0 AS sum_vozn,
  -- Услуги по организации транспортировки в аренд вагонах
  0 AS sum_usl_arend_bn,
  0 AS sum_usl_arend_NDS,
  0 AS sum_usl_arend,
  -- Услуги по организации транспортировки в вагонах МПС
  0 AS sum_usl_bn,
  0 AS sum_usl_NDS,
  0 AS sum_usl,
  -- Услуги предоставлению вагонов
  0 AS sum_vozn_gd_bn,
  0 AS sum_vozn_gd_NDS,
  0 AS sum_vozn_gd,
  0 AS sum_strah,
  -- Договорный сбор за перевозку в вагонах перевозчика
  0 AS sum_vozn_10052_bn,
  0 AS sum_vozn_10052_NDS,
  0 AS sum_vozn_10052,
  -- Договорный сбор за перевозку в арендованных вагонах
  0 AS sum_vozn_10051_bn,
  0 AS sum_vozn_10051_NDS,
  0 AS sum_vozn_10051,
  -- Cбор за изменение заявки
  0 AS sum_vozn_10050_bn,
  0 AS sum_vozn_10050_NDS,
  0 AS sum_vozn_10050,
  -- Штраф за невыполнение заявки 0,1 МРОТ
  0 AS sum_vozn_10060_bn,
  'НДС не предусмотрен' AS sum_vozn_10060_NDS,
  0 AS sum_vozn_10060,
  -- Штраф за невыполнение заявки 0,1 МРОТ/3*2
  0 AS sum_vozn_10061_bn,
  'НДС не предусмотрен' AS sum_vozn_10061_NDS,
  0 AS sum_vozn_10061,
  -- Cбор за изменение станции
  0 AS sum_vozn_10053_bn,
  0 AS sum_vozn_10053_NDS,
  0 AS sum_vozn_10053,
  -- Cбор за факс-обмен
  0 AS sum_vozn_10054_bn,
  0 AS sum_vozn_10054_NDS,
  0 AS sum_vozn_10054,
  -- Услуги по подаче телеграм
  0 AS sum_vozn_10007_bn,
  0 AS sum_vozn_10007_NDS,
  0 AS sum_vozn_10007,
  -- Отстой цистерн Покупателя на путях общего пользования составил 
  0 AS sum_vozn_10056_bn,
  0 AS sum_vozn_10056_NDS,
  0 AS sum_vozn_10056,
  -- Подготовка цистерн Покупателя под налив средствами Сосногорского вагонного депо составила 
  0 AS sum_vozn_10057_bn,
  0 AS sum_vozn_10057_NDS,
  0 AS sum_vozn_10057
 FROM v_bills_fin_unp v_bills,V_AGENT_REPORT_TARIF_2006 v_bill_pos_flat,kls_dog,kls_predpr,usl_dog,V_MASTER_REPORTS,month,kls_vid_otgr
 WHERE
   v_bills.DOG_ID=kls_dog.id and
   v_bills.NOM_DOK=v_bill_pos_flat.NOM_DOK and
   kls_dog.PREDPR_ID=kls_predpr.ID and
--   v_bills.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy') and
--   v_bill_pos_flat.DATE_REALIZ>=TO_DATE('01.01.2005','dd.mm.yyyy') and
   kls_dog.dog_number LIKE V_MASTER_REPORTS.DOG_NUMBER and
--   v_bills.DATE_VYP_SF between begin_date AND end_date and
   NLS_UPPER(V_MASTER_REPORTS.REPORT_FILE)='OTCH_AGENT_2006.XLS'
   AND v_bills.PROD_ID_NPR>='10100'
   AND v_bills.DOG_ID=usl_dog.DOG_ID(+)
   AND v_bills.USL_NUMBER=usl_dog.USL_NUMBER(+)
   AND v_bills.IS_AGENT IN (2,4,5)
   AND v_bills.nom_zd=month.nom_zd(+)
   AND month.load_abbr=kls_vid_otgr.load_abbr(+)
   AND (kls_vid_otgr.LOAD_TYPE_ID in (1,4,6) or kls_vid_otgr.LOAD_TYPE_ID is null)
 GROUP BY
   end_date,
   kls_dog.DOG_NUMBER,
   kls_dog.dog_date,
   kls_predpr.PREDPR_NAME
)
GROUP BY
  date_agent,
  DOG_NUMBER,
  dog_date,
  PREDPR_NAME;


--
-- V_AKT_VOZV_TO_EXP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AKT_VOZV_TO_EXP
(STAN_NAME, NUM_NAKL, NUM_CIST, DATE_VOZ, TIME_VOZ, 
 DATE_NALIV, TIME_NALIV, SVED_NUM, NOM_ZD, DATE_OTGR)
AS 
select 
  s1.stan_name, 
--  m1.is_exp,
  v.num_nakl, 
  v.num_cist, 
  v.date_voz, 
  v.time_voz,
  TRUNC(NVL(sv2.BEG_NALIV_TIME,k2.DATE_OFORML)) as date_naliv,
  TO_CHAR(NVL(sv2.BEG_NALIV_TIME,k2.DATE_OFORML),'hh24:mi') as time_naliv,
  sv2.sved_num,
  k2.nom_zd,
  k2.date_otgr
--  m2.is_exp
from (select v.id,v.kvit_id,v.num_nakl,v.num_cist,v.date_voz,v.time_voz,MIN(k2.date_kvit) as date_kvit_next 
        from (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='AKT_VOZV_TO_EXP.XLS') r, 
        vozvrat v,kvit k2 
       where k2.num_cist=v.num_cist 
         and k2.date_kvit>=v.date_voz 
   -- Условия 
         and v.date_voz between r.begin_date and r.end_date -- Отчетный период 
   and k2.date_kvit>=r.begin_date -- Отгружено после начала отчетного периода 
       GROUP BY v.id,v.kvit_id,v.num_nakl,v.num_cist,v.date_voz,v.time_voz 
     ) v, 
     kvit k1, month m1, kls_stan s1, kvit k2, month m2, sved sv2
where v.kvit_id=k1.id
  and k1.nom_zd=m1.nom_zd 
  and m1.stan_id=s1.id 
  and v.num_cist=k2.num_cist 
  and v.date_kvit_next=k2.date_kvit 
  and k2.nom_zd=m2.nom_zd
  and k2.sved_id=sv2.id(+) 
  -- Условия 
  and m1.is_exp=0 -- До возврата был отгружен на внутренний рынок 
  and m2.is_exp=1 -- После возврата был отгружен на экспорт 
  and k1.vagowner_id<>3 -- Собственные или арендованные вагоны 
order by v.date_voz,v.num_nakl,v.num_cist;


--
-- V_AKT_VOZV_TO_EXP_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_AKT_VOZV_TO_EXP_2
(STAN_NAME, NUM_NAKL, NUM_CIST, DATE_VOZ, TIME_VOZ, 
 DATE_NALIV, TIME_NALIV, SVED_NUM, NOM_ZD, DATE_OTGR)
AS 
select 
  s1.stan_name,
--  m1.is_exp, 
  v1.num_nakl, 
  v1.num_cist, 
  v1.date_voz, 
  v1.time_voz,
  TRUNC(NVL(sv2.BEG_NALIV_TIME,k2.DATE_OFORML)) as date_naliv,
  TO_CHAR(NVL(sv2.BEG_NALIV_TIME,k2.DATE_OFORML),'hh24:mi') as time_naliv,
  sv2.sved_num,
  k2.nom_zd,
  k2.date_otgr
--  m2.is_exp
from (
      select
     k2.id as kvit_id, 
     k2.num_cist, 
  MAX(v.date_voz) as date_voz,
  k2.date_kvit as date_kvit_next 
      from (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='AKT_VOZV_TO_EXP.XLS') r, 
        vozvrat v,kvit k2 
       where k2.num_cist=v.num_cist 
         and k2.date_kvit>=v.date_voz 
         -- Условия 
         and k2.date_kvit between r.begin_date and r.end_date -- Отчетный период 
         and v.date_voz<=r.end_date -- Вернулось до окончания отчетного периода 
       GROUP BY k2.id,k2.num_cist,k2.date_kvit 
     ) v, 
     vozvrat v1, kvit k1, month m1, kls_stan s1, kvit k2, month m2, sved sv2
where v.num_cist=v1.num_cist
  and v.date_voz=v1.date_voz
  and v1.kvit_id=k1.id
  and k1.nom_zd=m1.nom_zd 
  and m1.stan_id=s1.id 
  and v.num_cist=k2.num_cist 
  and v.date_kvit_next=k2.date_kvit 
  and k2.nom_zd=m2.nom_zd 
  and k2.sved_id=sv2.id(+) 
  -- Условия 
  and m1.is_exp=0 -- До возврата был отгружен на внутренний рынок 
  and m2.is_exp=1 -- После возврата был отгружен на экспорт 
  and k1.vagowner_id<>3 -- Собственные или арендованные вагоны
order by v.date_kvit_next,v.date_voz,v1.num_nakl,v1.num_cist;


--
-- V_BUDJET_NPR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_BUDJET_NPR
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, SUMMA_DOK, 
 SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number, 
  bills.DOG_ID, 
  bills.DATE_BUXG, 
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat, 
  sum(v_bill_pos.SUMMA) AS summa_dok, 
  0 AS summa_opl 
  FROM bills,v_bill_pos,kls_dog, 
    (SELECT kvit.bill_id 
	 FROM kvit,kls_dog,month 
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   (kls_dog.LUKDOG_ID=787 or kls_dog.ID=787)
	  GROUP BY bill_id 
	) kv 
  WHERE bills.dog_id=kls_dog.ID and v_bill_pos.nom_dok=bills.nom_dok and (kls_dog.LUKDOG_ID=787 or kls_dog.ID=787) and bills.nom_dok=kv.bill_id 
  and v_bill_pos.PROD_ID_NPR>10300 
  GROUP BY 
    kls_dog.dog_number, 
    bills.DOG_ID, 
    bills.DATE_BUXG, 
    bills.DATE_KVIT+bills.KOL_DN 
UNION ALL 
SELECT
  kls_dog.DOG_NUMBER,
  opl.DOG_ID,
  opl.DATA_POR AS date_buxg,
  opl.DATA_POR AS date_to_plat,
  0 as summa_dok,
  sum(opl.SUMMA) AS summa_opl
  FROM kls_dog,opl
  WHERE kls_dog.id=opl.dog_id AND kls_dog.ID=787 
  GROUP BY 
    kls_dog.dog_number, 
    opl.DOG_ID, 
    opl.DATA_POR, 
    opl.DATA_POR;


--
-- V_DAYLYFACT_HRAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DAYLYFACT_HRAN
(DATE_OTGR, PROD_ID_NPR, OTGR, NPR_SOBSTV_ID)
AS 
SELECT kvit.date_otgr,kvit.prod_id_NPR, 
iif_num(month.nazn_OTG_id,'=',8,kvit.VES,-kvit.VES) as otgr, 
MONTH.NPR_SOBSTV_id 
FROM kvit , month 
WHERE (month.nazn_OTG_id=8 or month.nazn_OTG_id=9) and (kvit.NOM_ZD) = (MONTH.NOM_ZD) and month.date_plan>sysdate-60
order by kvit.date_otgr, kvit.prod_id_NPR;


--
-- V_DAYLY_FACT_OTGR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DAYLY_FACT_OTGR
(PROD_ID_NPR, OTGR, REQ, NPR_SOBSTV_ID, DATE_OTGR)
AS 
SELECT kvit.prod_id_NPR, 
sum(kvit.VES) as otgr, 
sum(month.TONN_DECLARED) as req,
MONTH.NPR_SOBSTV_id, 
kvit.date_otgr
FROM kvit , month 
WHERE month.nazn_OTG_id<>8 and month.nazn_OTG_id<>10 and (kvit.NOM_ZD) = (MONTH.NOM_ZD)  and month.date_plan>sysdate-60
group by kvit.prod_id_NPR,MONTH.NPR_SOBSTV_id, kvit.date_otgr
order by kvit.date_otgr, kvit.prod_id_NPR;


--
-- V_DEKADA_MOSK_GU12  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DEKADA_MOSK_GU12
(VID_DOC, GRPROD, PROD, PLAT, DATE_O, 
 DEKADA, NORMA, KOL_PLAN, VES_PLAN, KOL_FAKT, 
 VES_FAKT)
AS 
SELECT vid_doc
	   ,GRPROD
       ,PROD
       ,PLAT
	   ,DATE_O
	   ,(case 
	   		  when to_number(to_char(DATE_O,'dd'))>=1 and to_number(to_char(DATE_O,'dd'))<=10 then 1
			  when to_number(to_char(DATE_O,'dd'))>10 and to_number(to_char(DATE_O,'dd'))<=20 then 2
			  else 3
		 end) as dekada	   
	   ,NORMA
	   ,KOL_PLAN
	   ,VES_PLAN
	   ,KOL_FAKT
	   ,VES_FAKT
FROM
(SELECT vid_doc 
	   ,GRPROD
       ,PROD
       ,PLAT
	   ,DATE_O
	   ,MAX(NORMA) AS NORMA
	   ,SUM(KOL_PLAN) AS KOL_PLAN
	   ,SUM(VES_PLAN) AS VES_PLAN
	   ,SUM(KOL_FAKT) AS KOL_FAKT
	   ,SUM(VES_FAKT) AS VES_FAKT
FROM (
--KVIT
SELECT /*+ ORDERED USE_NL(K,M,A) */
  'fact' as vid_doc
  ,GR_NP.NAME_NPR AS GRPROD
  ,NP.NAME_NPR AS PROD
  ,PL.FULLPLAT AS PLAT
  ,(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
    END) AS DATE_O
  ,0 AS NORMA
  ,0 AS KOL_PLAN
  ,0 AS VES_PLAN
  ,1 AS KOL_FAKT
  ,K.VES_BRUTTO AS VES_FAKT
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD_GU12 P
  ,KLS_PROD NP
  ,KLS_PROD GR_NP
  ,GU12_A A
  ,KLS_DOG D
  ,V_GU12_PLAT PL
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=NP.ID_NPR(+)
  AND NP.PROD_GU12_ID=P.ID(+)
  AND NP.ID_GROUP_NPR=GR_NP.ID_NPR(+)
  AND M.GU12_A_ID=A.ID(+)
  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('BEGIN_DATE','MASTER','RAZNAR_MOSK.XLS'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')-1
  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('END_DATE','MASTER','RAZNAR_MOSK.XLS'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND VO.LOAD_TYPE_ID=1
  AND M.DOG_ID=D.ID
  AND D.PREDPR_ID=PL.PLAT_ID
  AND NOT A.SOGL_DATE IS NULL
  AND (CASE
          WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		  ELSE PL.PLAT_ID
	   END)=2641
  AND m.is_exp=0	   
UNION ALL
-- GU12
SELECT
  'gu12' as vid_doc  
  ,GR_NP.NAME_NPR AS GRPROD
  ,NVL(NP.NAME_NPR,'   ') AS PROD
  ,PL.FULLPLAT AS PLAT
  ,BR.DATE_R AS DATE_O
  ,NP.NORMOTGR AS NORMA
  ,BR.KOL_VAG AS KOL_PLAN
  ,BR.VES AS VES_PLAN
  ,0 AS KOL_FAKT
  ,0 AS VES_FAKT
FROM
  GU12_BR BR
  ,GU12_B B
  ,GU12_A A
  ,KLS_PROD_GU12 P
  ,KLS_PROD NP
  ,KLS_PROD GR_NP
  ,V_GU12_PLAT PL
WHERE
  BR.ID_B=B.ID
  AND B.ID_A=A.ID
  AND A.PROD_ID=P.ID
  AND BR.ID_NPR=NP.ID_NPR(+)
  AND NP.ID_GROUP_NPR=GR_NP.ID_NPR(+)
  AND PL.PLAT_ID=B.PLAT_ID
  AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_MOSK.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_MOSK.XLS')
  AND B.ISCOR<>2
  AND NOT A.SOGL_DATE IS NULL
  AND (CASE
          WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		  ELSE B.PLAT_ID
	   END)=2641
  AND NVL(A.EXPED_ID,0)=0  
)
GROUP BY GRPROD
	  	 ,vid_doc
         ,PROD
         ,PLAT
		 ,(case 
	   		  when to_number(to_char(DATE_O,'dd'))>=1 and to_number(to_char(DATE_O,'dd'))<=10 then 1
			  when to_number(to_char(DATE_O,'dd'))>10 and to_number(to_char(DATE_O,'dd'))<=20 then 2
			  else 3
		  end)		 
	     ,DATE_O
ORDER BY GRPROD
         ,PROD
         ,PLAT
	     ,DATE_O)
WHERE NOT (KOL_PLAN=0 AND VES_PLAN=0 AND KOL_FAKT=0 AND VES_FAKT=0);


--
-- V_DIMA_FOR_AUDIT_GP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DIMA_FOR_AUDIT_GP
(GOSPROG_NAME, DATE_OTGR, PREDPR_NAME, DOG_NUMBER, REGION_NAME, 
 STAN_NAME, POLUCH, LONG_NAME_NPR, VES, CENA_OTP)
AS 
select
  kls_gosprog.GOSPROG_NAME,
  kvit.DATE_OTGR,
  kls_predpr.PREDPR_NAME,
  kls_dog.DOG_NUMBER,
  kls_region.REGION_NAME,
  kls_stan.STAN_NAME,
  kls_predpr2.PREDPR_NAME AS poluch,
  kls_prod.LONG_NAME_NPR,
  sum(kvit.ves) as ves,
  kvit.CENA_OTP
  from kvit,month,kls_gosprog,kls_prod,kls_predpr,kls_dog,kls_predpr kls_predpr2,kls_stan,kls_region
  where 
    kvit.NOM_ZD=month.NOM_ZD and
	kls_dog.ID=month.DOG_ID and
	kls_predpr.ID=kls_dog.PREDPR_ID and
	month.POLUCH_ID=kls_predpr2.ID and
	kls_stan.ID=month.STAN_ID and
	kls_stan.REGION_ID=kls_region.ID and
	month.GOSPROG_ID=kls_gosprog.ID and
	month.PROD_ID_NPR=kls_prod.ID_NPR and
	month.GOSPROG_ID<>0
	and month.DATE_PLAN between
	  TO_DATE('01.01.2003','dd.mm.yyyy') and
	  TO_DATE('30.06.2004','dd.mm.yyyy')
GROUP BY
  kls_gosprog.GOSPROG_NAME,
  kvit.DATE_OTGR,
  kls_predpr.PREDPR_NAME,
  kls_dog.DOG_NUMBER,
  kls_region.REGION_NAME,
  kls_stan.STAN_NAME,
  kls_predpr2.PREDPR_NAME,
  kls_prod.LONG_NAME_NPR,
  kvit.CENA_OTP;


--
-- V_DISPSEND_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_DISPSEND_SF
(KOD_PLAT, NOM_DOG, NOM_SF, DATA_DOK, PROD_ID_NPR, 
 NAIM_PR, DATA_KVIT, VES, CENA_NFP, D_41, 
 D_191, ALL_TARIF, ALL_TARIF_NDS, D_441, D_194, 
 DOP_TARIF, NDC_DOPTAR, D_442, NDC_TR20, SUM_NALIV, 
 NDC_NAL20, SUM_NACEN, SUMMA_DOK, NOM_DOK, PLAT_NAIM, 
 POLUCH_NAIM, POLUCH_ADDR, STAN_NAIM, STAN_KOD, NP, 
 POLUCH_KSSS, PROD_KSSS)
AS 
SELECT /*+ RULE */
  kls_dog.PREDPR_ID,
  kls_dog.DOG_NUMBER,
  bills.NOM_SF,
  bills.DATE_VYP_SF,
  bills.PROD_ID_NPR,
  kls_prod.NAME_NPR,
  bills.DATE_KVIT,
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.VES,0)) AS ves,
  SUM(DECODE(bill_pos.BILL_POS_ID,1,bill_pos.CENA_BN,0)) AS cena_bn,
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.SUMMA-bill_pos.SUMMA_NDS20,0)) AS summa_prod_bn,
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.SUMMA_NDS20,0)) AS summa_prod_nds,
  SUM(DECODE(bill_pos.BILL_POS_ID,10,bill_pos.SUMMA_BN,13,bill_pos.SUMMA_BN,0)) AS summa_tarif,
  SUM(DECODE(bill_pos.BILL_POS_ID,10,bill_pos.SUMMA_NDS20,13,bill_pos.SUMMA_NDS20,0)) AS summa_tarif_nds,
  SUM(DECODE(bill_pos.BILL_POS_ID,10,bill_pos.SUMMA_BN,0)) AS summa_tarif_clr,
  SUM(DECODE(bill_pos.BILL_POS_ID,10,bill_pos.SUMMA_NDS20,0)) AS summa_tarif_clr_nds,
  SUM(DECODE(bill_pos.BILL_POS_ID,13,bill_pos.SUMMA_BN,0)) AS summa_ohrana,
  SUM(DECODE(bill_pos.BILL_POS_ID,13,bill_pos.SUMMA_NDS20,0)) AS summa_ohrana_nds,
  SUM(DECODE(bill_pos.BILL_POS_ID,12,bill_pos.SUMMA_BN,0)) AS summa_agen1,
  SUM(DECODE(bill_pos.BILL_POS_ID,12,bill_pos.SUMMA_NDS20,0)) AS summa_agen1_nds,
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA_BN,0)) AS summa_agen2,
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA_NDS20,0)) AS summa_agen2_nds,
  SUM(DECODE(bill_pos.BILL_POS_ID,20,bill_pos.SUMMA,0)) AS summa_strah,
  bills.SUMMA_DOK,
  bills.NOM_DOK,
  plat.PREDPR_NAME,
  poluch.PREDPR_NAME,
  GET_ADDR(KLS_REGION.ID,POLUCH.POSTINDEX_P,POLUCH.CITY_P,POLUCH.ADDRESS_P,KLS_REGION.REGION_NAME) as POLUCH_ADDR,
  kls_stan.STAN_NAME,
  kls_stan.STAN_KOD,
  KV.SVED_NUM,
  poluch.KSSS_PREDPR_ID as poluch_KSSS,
  kls_prod.KSSS_PROD_ID as prod_KSSS
FROM bills, kls_predpr plat, kls_predpr poluch, kls_stan, kls_dog, month, kls_prod, bill_pos, KLS_REGION,
  (SELECT KVIT.BILL_ID,
          MAX(KVIT.SVED_NUM) AS SVED_NUM
   FROM KVIT
 GROUP BY KVIT.BILL_ID) KV
WHERE bills.nom_dok = KV.BILL_ID (+)
  AND bill_pos.NOM_DOK = bills.NOM_DOK
  AND bills.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = plat.ID
  AND bills.NOM_ZD = month.NOM_ZD (+)
  AND month.POLUCH_ID = poluch.ID (+)
  and poluch.REGION_ID = KLS_REGION.ID (+)
  AND month.STAN_ID = kls_stan.ID (+)
  AND bills.PROD_ID_NPR = kls_prod.ID_NPR (+)
  AND bills.DATE_VYP_SF>=TO_DATE('01.01.2006','dd.mm.yyyy')
GROUP BY kls_dog.PREDPR_ID,
  plat.PREDPR_NAME,
  kls_dog.DOG_NUMBER,
  poluch.PREDPR_NAME,
  GET_ADDR(KLS_REGION.ID,POLUCH.POSTINDEX_P,POLUCH.CITY_P,POLUCH.ADDRESS_P,KLS_REGION.REGION_NAME),
  kls_stan.STAN_NAME,
  kls_stan.STAN_KOD,
  bills.DATE_VYP_SF,
  bills.NOM_DOK,
  bills.NOM_SF,
  bills.PROD_ID_NPR,
  kls_prod.NAME_NPR,
  bills.DATE_KVIT,
  bills.SUMMA_DOK,
  KV.SVED_NUM,
  poluch.KSSS_PREDPR_ID,
  kls_prod.KSSS_PROD_ID;


--
-- V_GD_AGENT_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_FACT
(VES, KOL)
AS 
SELECT /*+ ORDERED INDEX(kvit) USE_NL(month,kvit,C,kls_vid_otgr,kls_dog ) */
  ROUND(SUM(ves_brutto)) as ves,
  COUNT(*) as kol
FROM (SELECT * FROM v_master_reports WHERE NLS_UPPER(REPORT_FILE)='GD_AGENT.XLS') C, kvit,month,kls_vid_otgr,kls_dog
WHERE kvit.date_otgr>=C.BEGIN_DATE
  AND kvit.date_otgr<=C.END_DATE
  AND kvit.nom_zd=month.nom_zd
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
  AND month.DOG_ID=kls_dog.ID
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE;


--
-- V_GD_AGENT_GU12_LIST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_GU12_LIST
(GU12_A_ID, STAN_ID, KVIT_VNUT, KVIT_EXP, CLIENT_KOL, 
 CLIENT_VES, FACT_VES, MPS_VNUT_BEFORE, SOBS_VNUT_BEFORE, MPS_EXP_BEFORE, 
 SOBS_EXP_BEFORE)
AS 
SELECT /*+ RULE */
  /* Факт отгрузки в отчетном периоде по заявкам */
  GU12_A_ID,
  STAN_ID,
  SUM(kvit_vnut) as kvit_vnut,
  SUM(kvit_exp) as kvit_exp,
  SUM(client_kol) as client_kol,
  SUM(client_ves) as client_ves,
  SUM(fact_ves) as fact_ves,
  SUM(mps_vnut_before) as mps_vnut_before,
  SUM(sobs_vnut_before) as sobs_vnut_before,
  SUM(mps_exp_before) as mps_exp_before,
  SUM(sobs_exp_before) as sobs_exp_before
FROM
(
SELECT /*+ RULE */
  month.GU12_A_ID,
  month.STAN_ID,
  kvit.num_kvit,
  DECODE(month.is_exp,0,1,0) as kvit_vnut,
  DECODE(month.is_exp,1,1,0) as kvit_exp,
  COUNT(*) as client_kol, -- Отгружено вагонов
  SUM(kvit.ves_brutto) as client_ves, -- Вес клиента
  SUM(DECODE(SIGN(kvit.ves_brutto+kvit.upak_ves-10),1,CEIL(kvit.ves_brutto+kvit.upak_ves),CEIL((kvit.ves_brutto+kvit.upak_ves)*10)/10)) as fact_ves, -- Вес ЖД
  SUM(CASE
        -- Отгружено ранее срока вагонов МПС по России
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID=3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID=3 THEN 1
  	    ELSE 0
	  END) as MPS_VNUT_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока НЕ вагонов МПС по России
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID<>3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID<>3 THEN 1
  	    ELSE 0
	  END) as SOBS_VNUT_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока вагонов МПС на Экспорт
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID=3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID=3 THEN 1
		ELSE 0
	  END) as MPS_EXP_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока НЕ вагонов МПС на Экспорт
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID<>3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID<>3 THEN 1
		ELSE 0
	  END) as SOBS_EXP_BEFORE
FROM month,kvit,V_GD_AGENT_GU12_GRP A,v_master_reports C,kls_dog,kls_vid_otgr
WHERE month.nom_zd=kvit.nom_zd
  AND month.GU12_A_ID=A.GU12_A_ID(+)
  AND month.STAN_ID=A.STAN_ID(+)
  AND month.dog_id=kls_dog.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
  AND kvit.date_oforml<TO_DATE(TO_CHAR(C.END_DATE+1,'dd.mm.yyyy')||' 00:00','dd.mm.yyyy hh24:mi')
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
GROUP BY
  month.GU12_A_ID,
  month.STAN_ID,
  kvit.num_kvit,
  month.is_exp
UNION ALL
SELECT
  GU12_A_ID,
  STAN_ID,
  0 as num_kvit,
  0 as kvit_vnut,
  0 as kvit_exp,
  0 as client_kol,
  0 as client_ves,
  0 as fact_ves,
  0 as mps_vnut_before,
  0 as sobs_vnut_before,
  0 as mps_exp_before,
  0 as sobs_exp_before
FROM
  V_GD_AGENT_GU12_GRP
--WHERE FROM_DATE<BEGIN_DATE
)
GROUP BY
  GU12_A_ID,
  STAN_ID;


--
-- V_GD_AGENT_GU12_ZAYV_KORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_GU12_ZAYV_KORR
(GU12_A_ID, STAN_ID, BEGIN_DATE, END_DATE, FROM_DATE, 
 TO_DATE, ZAYV_DATE, ZAYV_NUM, STAN_NAME, PROD_NAME, 
 KOL, VES, FACT_KOL, FACT_VES, KORR_DATE, 
 KORR_NUM, KORR_KOL, KORR_VES, IS_KORR)
AS 
SELECT
  /* Заявки отчетного месяца с корректировками и отгрузкой */
  a.GU12_A_ID,
  a.STAN_ID,
  a.BEGIN_DATE,
  a.END_DATE,
  a.FROM_DATE,
  a.TO_DATE,
  a.ZAYV_DATE,
  a.ZAYV_NUM,
  a.STAN_NAME,
  a.PROD_NAME,
  a.ORIG_KOL as KOL,
  a.ORIG_VES as VES,
  NVL(b.FACT_KOL,0) as FACT_KOL,
  NVL(b.FACT_VES,0) as FACT_VES,
  c.KORR_DATE,
  c.KORR_NUM,
  c.KORR_KOL,
  c.KORR_VES,
  c.IS_KORR
FROM V_GD_AGENT_GU12_ZAYV a,
(
SELECT GU12_A_ID,STAN_ID,SUM(CLIENT_KOL) as FACT_KOL, SUM(CLIENT_VES) as FACT_VES FROM V_GD_AGENT_GU12_LIST GROUP BY GU12_A_ID,STAN_ID
) b,
(
SELECT GU12_A_ID,STAN_ID,RAZN_DATE as KORR_DATE, RAZN_NUM as KORR_NUM, SUM(KOL) as KORR_KOL, SUM(VES) as KORR_VES,IS_KORR
  FROM V_GD_AGENT_GU12_KORR GROUP BY GU12_A_ID,STAN_ID,RAZN_DATE,RAZN_NUM,IS_KORR
) c
WHERE a.GU12_A_ID=b.GU12_A_ID(+)
  AND a.STAN_ID=b.STAN_ID(+)
  AND a.GU12_A_ID=c.GU12_A_ID(+)
  AND a.STAN_ID=c.STAN_ID(+);


--
-- V_GD_AGENT_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_MONTH
(GU12_A_ID, STAN_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, ORIG_KOL, ORIG_VES, 
 KOL, VES, IS_KORR, STAN_NAME, NOM_ZD, 
 CLIENT_KOL, CLIENT_VES, FACT_VES)
AS 
SELECT /*+ ORDERED */
  -- Заявки из ФИНАНСОВ текущего месяца с привязкой ГУ-12
  month.GU12_A_ID,
  month.STAN_ID,
  A.zayv_num,
  A.zayv_date,
  A.from_date,
  A.to_date,
  A.begin_date,
  A.end_date,
  A.orig_kol,
  A.orig_ves,
  A.kol,
  A.ves,
  A.IS_KORR,
  KLS_STAN.STAN_NAME,
  month.nom_zd,
  COUNT(*) as client_kol,
  SUM(kvit.ves_brutto) as client_ves,
  SUM(DECODE(SIGN(kvit.ves_brutto+kvit.upak_ves-10),1,CEIL(kvit.ves_brutto+kvit.upak_ves),CEIL((kvit.ves_brutto+kvit.upak_ves)*10)/10)) as fact_ves
FROM V_GD_AGENT_GU12_GRP A,month,kvit, V_GD_AGENT_GU12_LIST AA, kls_stan, kls_dog, kls_vid_otgr, v_master_reports C
WHERE month.GU12_A_ID=AA.GU12_A_ID -- Только из списка
  AND month.STAN_ID=AA.STAN_ID -- Только из списка
  AND month.GU12_A_ID=A.GU12_A_ID -- Реквизиты заявок
  AND month.STAN_ID=A.STAN_ID -- Реквизиты заявок
  AND month.nom_zd=kvit.nom_zd
  AND month.dog_id=kls_dog.id
  AND month.stan_id=kls_stan.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
  AND kvit.date_oforml<TO_DATE(TO_CHAR(C.END_DATE+1,'dd.mm.yyyy')||' 00:00','dd.mm.yyyy hh24:mi')
  AND month.date_plan=TRUNC(C.BEGIN_DATE,'MONTH')
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
GROUP BY
  month.GU12_A_ID,
  month.STAN_ID,
  A.zayv_num,
  A.zayv_date,
  A.from_date,
  A.to_date,
  A.begin_date,
  A.end_date,
  A.orig_kol,
  A.orig_ves,
  A.kol,
  A.ves,
  A.IS_KORR,
  KLS_STAN.STAN_NAME,
  month.nom_zd;


--
-- V_GD_AGENT_MONTH_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_MONTH_ALL
(RAZN_NUM, RAZN_DATE, INPUT_DATE, STAN_OLD_ID, STAN_OLD_NAME, 
 STAN_ID, STAN_NAME, POLUCH_ID, POLUCH_NAME, PROD_ID, 
 PROD_NAME, KOL, VES, SPEED_KOL, SPEED_VES, 
 PRIM, STATUS_ZAKAZ_ID, MAIN_RAZN_NUM, MAIN_RAZN_DATE, MAIN_INPUT_DATE)
AS 
SELECT
  RAZN_NUM,
  RAZN_DATE,
  INPUT_DATE,
  STAN_OLD_ID,
  STAN_OLD_NAME,
  STAN_ID,
  STAN_NAME,
  POLUCH_ID,
  POLUCH_NAME,
  PROD_ID,
  PROD_NAME,
  KOL,
  VES,
  SPEED_KOL,
  SPEED_VES,
  PRIM,
  STATUS_ZAKAZ_ID,
  MAIN_RAZN_NUM,
  MAIN_RAZN_DATE,
  MAIN_INPUT_DATE
FROM
(
SELECT /*+ RULE */
  /* Предоставлено разнарядок */
  -- Основные заявки
  mon.client_number as RAZN_NUM,
  mon.client_date as RAZN_DATE,
  mon.input_date,
  old_mon.STAN_ID as STAN_OLD_ID,
  old_STAN.STAN_NAME as STAN_OLD_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME as POLUCH_NAME,
  KLS_PROD.ID_NPR as PROD_ID,
  kls_prod.NAME_NPR as PROD_NAME,
  SUM(NVL(mon.KOL,0)) as KOL,
  SUM(NVL(mon.REQUEST,0)) as VES,
  SUM(NVL((
    SELECT COUNT(*) FROM kvit,month,v_master_reports C,kls_vid_otgr
	 WHERE kvit.nom_zd=month.nom_zd AND month.zakaz_id=mon.id
--       AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
--       AND kvit.date_oforml<=TO_DATE(TO_CHAR(C.END_DATE,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
       AND kvit.date_otgr>=C.BEGIN_DATE
       AND kvit.date_otgr<=C.END_DATE
       AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
       AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
       AND month.load_abbr=kls_vid_otgr.load_abbr
       AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
   ),0)) as SPEED_KOL,
  SUM(NVL((
    SELECT SUM(kvit.ves_brutto) FROM kvit,month,v_master_reports C,kls_vid_otgr
	 WHERE kvit.nom_zd=month.nom_zd AND month.zakaz_id=mon.id
--       AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
--       AND kvit.date_oforml<=TO_DATE(TO_CHAR(C.END_DATE,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
       AND kvit.date_otgr>=C.BEGIN_DATE
       AND kvit.date_otgr<=C.END_DATE
       AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
       AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
       AND month.load_abbr=kls_vid_otgr.load_abbr
       AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
   ),0)) as SPEED_VES,
  ''  as PRIM,
  10 as STATUS_ZAKAZ_ID,
  mon.client_number as MAIN_RAZN_NUM,
  mon.client_date as MAIN_RAZN_DATE,
  mon.input_date as MAIN_INPUT_DATE
FROM month_all mon,kls_dog,v_master_reports C, kls_stan,kls_prod,month_all old_mon,kls_stan old_stan, kls_predpr poluch
WHERE mon.KLS_dog_id=kls_dog.id
  AND mon.ZAKAZ_OLD_ID=old_mon.ID(+)
  AND old_mon.stan_id=old_stan.ID (+)
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND mon.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
  AND mon.KLS_PROD_ID<>'90000' -- Без НЕФТИ
  AND mon.PARUS_RN is null -- Без СНП
  AND mon.IS_AGENT=1 -- Только агентские
  AND mon.STAN_ID=KLS_STAN.ID
  and mon.kls_prod_id=kls_prod.id_npr
  and mon.POLUCH_ID=poluch.ID(+)
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА
GROUP BY
  mon.client_number,
  mon.client_date,
  mon.input_date,
  old_mon.STAN_ID,
  old_STAN.STAN_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME,
  KLS_PROD.ID_NPR,
  kls_prod.NAME_NPR,
  DECODE(mon.ZAKAZ_OLD_ID,NULL,'','В счет заказа № '||old_mon.CLIENT_NUMBER||' ст.'||old_stan.STAN_NAME || ' ')
--
UNION ALL
--
SELECT /*+ RULE */
  -- Переадресовки в пути
  mon.client_number as RAZN_NUM,
  mon.client_date as RAZN_DATE,
  mon.input_date,
  mon.STAN_OLD_ID,
  old_stan.STAN_NAME as STAN_OLD_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME as POLUCH_NAME,
  KLS_PROD.ID_NPR as PROD_ID,
  kls_prod.NAME_NPR as PROD_NAME,
  SUM(ABS(NVL(mon.KOL,0))) as KOL,
  SUM(ABS(NVL(mon.REQUEST,0))) as VES,
  SUM(ABS(NVL(mon.SPEED_KOL,0))) as SPEED_KOL,
  SUM(ABS(NVL(mon.SPEED_VES,0))) as SPEED_VES,
  ''  as PRIM,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number as MAIN_RAZN_NUM,
  month_all.client_date as MAIN_RAZN_DATE,
  month_all.input_date as MAIN_INPUT_DATE
FROM month_all_row mon,month_all,kls_dog,v_master_reports C, kls_stan,kls_prod, kls_stan old_stan, kls_predpr poluch
WHERE mon.KLS_dog_id=kls_dog.id
  AND mon.month_all_id=month_all.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month_all.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
  AND mon.KLS_PROD_ID<>'90000' -- Без НЕФТИ
  AND month_all.PARUS_RN is null -- Без СНП
  AND month_all.IS_AGENT=1 -- Только агентские
  AND mon.STAN_ID=KLS_STAN.ID
  AND mon.STAN_OLD_ID=old_stan.ID
  and mon.kls_prod_id=kls_prod.id_npr
  and month_all.POLUCH_ID=poluch.ID(+)
  and mon.status_zakaz_id in (41,42)
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА
GROUP BY
  mon.client_number,
  mon.client_date,
  mon.input_date,
  mon.STAN_OLD_ID,
  old_stan.STAN_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME,
  KLS_PROD.ID_NPR,
  kls_prod.NAME_NPR,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number,
  month_all.client_date,
  month_all.input_date
--
UNION ALL
--
SELECT /*+ RULE */
  -- Отказы
  mon.client_number as RAZN_NUM,
  mon.client_date as RAZN_DATE,
  mon.input_date,
  NULL as STAN_OLD_ID,
  NULL as STAN_OLD_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME as POLUCH_NAME,
  KLS_PROD.ID_NPR as PROD_ID,
  kls_prod.NAME_NPR as PROD_NAME,
  SUM(ABS(NVL(mon.KOL,0))) as KOL,
  SUM(ABS(NVL(mon.REQUEST,0))) as VES,
  SUM(ABS(NVL(mon.SPEED_KOL,0))) as SPEED_KOL,
  SUM(ABS(NVL(mon.SPEED_VES,0))) as SPEED_VES,
  ''  as PRIM,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number as MAIN_RAZN_NUM,
  month_all.client_date as MAIN_RAZN_DATE,
  month_all.input_date as MAIN_INPUT_DATE
FROM month_all_row mon,month_all,kls_dog,v_master_reports C, kls_stan,kls_prod,kls_predpr poluch
WHERE month_all.KLS_dog_id=kls_dog.id
  AND mon.month_all_id=month_all.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month_all.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT.XLS'
  AND month_all.KLS_PROD_ID<>'90000' -- Без НЕФТИ
  AND month_all.PARUS_RN is null -- Без СНП
  AND month_all.IS_AGENT=1 -- Только агентские
  AND month_all.STAN_ID=KLS_STAN.ID
  and month_all.kls_prod_id=kls_prod.id_npr
  and mon.status_zakaz_id in (50)
  and month_all.POLUCH_ID=poluch.ID(+)
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА
GROUP BY
  mon.client_number,
  mon.client_date,
  mon.input_date,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME,
  KLS_PROD.ID_NPR,
  kls_prod.NAME_NPR,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number,
  month_all.client_date,
  month_all.input_date
)
ORDER BY
  razn_date,
  razn_num,
  prod_id,
  STAN_NAME;


--
-- V_GD_AGENT_2006_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_FACT
(VES, KOL)
AS 
SELECT /*+ ORDERED INDEX(kvit) USE_NL(month,kvit,C,kls_vid_otgr,kls_dog ) */
  ROUND(SUM(ves_brutto)) as ves,
  COUNT(*) as kol
FROM (SELECT * FROM v_master_reports WHERE NLS_UPPER(REPORT_FILE)='GD_AGENT_2006.XLS') C, kvit,month,kls_vid_otgr,kls_dog
WHERE kvit.date_otgr>=C.BEGIN_DATE
  AND kvit.date_otgr<=C.END_DATE
  AND kvit.nom_zd=month.nom_zd
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
  AND month.DOG_ID=kls_dog.ID
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE;


--
-- V_GD_AGENT_2006_GU12_LIST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_LIST
(GU12_A_ID, STAN_ID, KVIT_VNUT, KVIT_EXP, CLIENT_KOL, 
 CLIENT_VES, FACT_VES, MPS_VNUT_BEFORE, SOBS_VNUT_BEFORE, MPS_EXP_BEFORE, 
 SOBS_EXP_BEFORE)
AS 
SELECT /*+ RULE */
  /* Факт отгрузки в отчетном периоде по заявкам */
  GU12_A_ID,
  STAN_ID,
  SUM(kvit_vnut) as kvit_vnut,
  SUM(kvit_exp) as kvit_exp,
  SUM(client_kol) as client_kol,
  SUM(client_ves) as client_ves,
  SUM(fact_ves) as fact_ves,
  SUM(mps_vnut_before) as mps_vnut_before,
  SUM(sobs_vnut_before) as sobs_vnut_before,
  SUM(mps_exp_before) as mps_exp_before,
  SUM(sobs_exp_before) as sobs_exp_before
FROM
(
SELECT /*+ RULE */
  month.GU12_A_ID,
  month.STAN_ID,
  kvit.num_kvit,
  DECODE(month.is_exp,0,1,0) as kvit_vnut,
  DECODE(month.is_exp,1,1,0) as kvit_exp,
  COUNT(*) as client_kol, -- Отгружено вагонов
  SUM(kvit.ves_brutto) as client_ves, -- Вес клиента
  SUM(DECODE(SIGN(kvit.ves_brutto+kvit.upak_ves-10),1,CEIL(kvit.ves_brutto+kvit.upak_ves),CEIL((kvit.ves_brutto+kvit.upak_ves)*10)/10)) as fact_ves, -- Вес ЖД
  SUM(CASE
        -- Отгружено ранее срока вагонов МПС по России
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID=3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID=3 THEN 1
       ELSE 0
   END) as MPS_VNUT_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока НЕ вагонов МПС по России
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID<>3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID<>3 THEN 1
       ELSE 0
   END) as SOBS_VNUT_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока вагонов МПС на Экспорт
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID=3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID=3 THEN 1
  ELSE 0
   END) as MPS_EXP_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока НЕ вагонов МПС на Экспорт
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID<>3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID<>3 THEN 1
  ELSE 0
   END) as SOBS_EXP_BEFORE
FROM month,kvit,V_GD_AGENT_2006_GU12_GRP A,v_master_reports C,kls_dog,kls_vid_otgr
WHERE month.nom_zd=kvit.nom_zd
  AND month.GU12_A_ID=A.GU12_A_ID 
  AND month.STAN_ID=A.STAN_ID
  AND month.dog_id=kls_dog.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT_2006.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
--  AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
--  AND kvit.date_oforml<TO_DATE(TO_CHAR(C.END_DATE+1,'dd.mm.yyyy')||' 00:00','dd.mm.yyyy hh24:mi')
  AND A.ZAKR_DATE BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2006.XLS'
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
GROUP BY
  month.GU12_A_ID,
  month.STAN_ID,
  kvit.num_kvit,
  month.is_exp
UNION ALL
SELECT
  GU12_A_ID,
  STAN_ID,
  0 as num_kvit,
  0 as kvit_vnut,
  0 as kvit_exp,
  0 as client_kol,
  0 as client_ves,
  0 as fact_ves,
  0 as mps_vnut_before,
  0 as sobs_vnut_before,
  0 as mps_exp_before,
  0 as sobs_exp_before
FROM
  V_GD_AGENT_2006_GU12_GRP
--WHERE FROM_DATE<BEGIN_DATE
)
GROUP BY
  GU12_A_ID,
  STAN_ID;


--
-- V_GD_AGENT_2006_GU12_ZAYV_KORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_ZAYV_KORR
(GU12_A_ID, STAN_ID, BEGIN_DATE, END_DATE, FROM_DATE, 
 TO_DATE, ZAYV_DATE, ZAYV_NUM, STAN_NAME, PROD_NAME, 
 KOL, VES, FACT_KOL, FACT_VES, KORR_DATE, 
 KORR_NUM, KORR_KOL, KORR_VES, IS_KORR)
AS 
SELECT
  /* Заявки отчетного месяца с корректировками и отгрузкой */
  a.GU12_A_ID,
  a.STAN_ID,
  a.BEGIN_DATE,
  a.END_DATE,
  a.FROM_DATE,
  a.TO_DATE,
  a.ZAYV_DATE,
  a.ZAYV_NUM,
  a.STAN_NAME,
  a.PROD_NAME,
  a.ORIG_KOL as KOL,
  a.ORIG_VES as VES,
  NVL(b.FACT_KOL,0) as FACT_KOL,
  NVL(b.FACT_VES,0) as FACT_VES,
  c.KORR_DATE,
  c.KORR_NUM,
  c.KORR_KOL,
  c.KORR_VES,
  c.IS_KORR
FROM V_GD_AGENT_2006_GU12_ZAYV a,
(
SELECT GU12_A_ID,STAN_ID,SUM(CLIENT_KOL) as FACT_KOL, SUM(CLIENT_VES) as FACT_VES FROM V_GD_AGENT_2006_GU12_LIST GROUP BY GU12_A_ID,STAN_ID
) b,
(
SELECT GU12_A_ID,STAN_ID,RAZN_DATE as KORR_DATE, RAZN_NUM as KORR_NUM, SUM(KOL) as KORR_KOL, SUM(VES) as KORR_VES,IS_KORR
  FROM V_GD_AGENT_2006_GU12_KORR GROUP BY GU12_A_ID,STAN_ID,RAZN_DATE,RAZN_NUM,IS_KORR
) c
WHERE a.GU12_A_ID=b.GU12_A_ID(+)
  AND a.STAN_ID=b.STAN_ID(+)
  AND a.GU12_A_ID=c.GU12_A_ID(+)
  AND a.STAN_ID=c.STAN_ID(+);


--
-- V_GD_AGENT_2006_GU12_ZAYV_KR_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_ZAYV_KR_1
(GU12_A_ID, STAN_ID, BEGIN_DATE, END_DATE, FROM_DATE, 
 TO_DATE, ZAYV_DATE, ZAYV_NUM, STAN_NAME, PROD_NAME, 
 KOL, VES, FACT_KOL, FACT_VES, KORR_DATE, 
 KORR_NUM, KORR_KOL, KORR_VES, IS_KORR)
AS 
SELECT
  /* Заявки прошлых месяцев с корректировками и отгрузкой */
  a.GU12_A_ID,
  a.STAN_ID,
  a.BEGIN_DATE,
  a.END_DATE,
  a.FROM_DATE,
  a.TO_DATE,
  a.ZAYV_DATE,
  a.ZAYV_NUM,
  a.STAN_NAME,
  a.PROD_NAME,
  a.ORIG_KOL as KOL,
  a.ORIG_VES as VES,
  NVL(b.FACT_KOL,0) as FACT_KOL,
  NVL(b.FACT_VES,0) as FACT_VES,
  c.KORR_DATE,
  c.KORR_NUM,
  c.KORR_KOL,
  c.KORR_VES,
  c.IS_KORR
FROM V_GD_AGENT_2006_GU12_ZAYV_1 a,
(
SELECT GU12_A_ID,STAN_ID,SUM(CLIENT_KOL) as FACT_KOL, SUM(CLIENT_VES) as FACT_VES FROM V_GD_AGENT_2006_GU12_LIST GROUP BY GU12_A_ID,STAN_ID
) b,
(
SELECT GU12_A_ID,STAN_ID,RAZN_DATE as KORR_DATE, RAZN_NUM as KORR_NUM, SUM(KOL) as KORR_KOL, SUM(VES) as KORR_VES,IS_KORR
  FROM V_GD_AGENT_2006_GU12_KORR GROUP BY GU12_A_ID,STAN_ID,RAZN_DATE,RAZN_NUM,IS_KORR
) c
WHERE a.GU12_A_ID=b.GU12_A_ID(+)
  AND a.STAN_ID=b.STAN_ID(+)
  AND a.GU12_A_ID=c.GU12_A_ID(+)
  AND a.STAN_ID=c.STAN_ID(+);


--
-- V_GD_AGENT_2006_GU12_ZAYV_KR_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_GU12_ZAYV_KR_2
(GU12_A_ID, STAN_ID, BEGIN_DATE, END_DATE, FROM_DATE, 
 TO_DATE, ZAYV_DATE, ZAYV_NUM, STAN_NAME, PROD_NAME, 
 KOL, VES, FACT_KOL, FACT_VES, KORR_DATE, 
 KORR_NUM, KORR_KOL, KORR_VES, IS_KORR)
AS 
SELECT
  /* Заявки отчетного месяца с корректировками и отгрузкой */
  a.GU12_A_ID,
  a.STAN_ID,
  a.BEGIN_DATE,
  a.END_DATE,
  a.FROM_DATE,
  a.TO_DATE,
  a.ZAYV_DATE,
  a.ZAYV_NUM,
  a.STAN_NAME,
  a.PROD_NAME,
  a.ORIG_KOL as KOL,
  a.ORIG_VES as VES,
  NVL(b.FACT_KOL,0) as FACT_KOL,
  NVL(b.FACT_VES,0) as FACT_VES,
  c.KORR_DATE,
  c.KORR_NUM,
  c.KORR_KOL,
  c.KORR_VES,
  c.IS_KORR
FROM V_GD_AGENT_2006_GU12_ZAYV_2 a,
(
SELECT GU12_A_ID,STAN_ID,SUM(CLIENT_KOL) as FACT_KOL, SUM(CLIENT_VES) as FACT_VES FROM V_GD_AGENT_2006_GU12_LIST GROUP BY GU12_A_ID,STAN_ID
) b,
(
SELECT GU12_A_ID,STAN_ID,RAZN_DATE as KORR_DATE, RAZN_NUM as KORR_NUM, SUM(KOL) as KORR_KOL, SUM(VES) as KORR_VES,IS_KORR
  FROM V_GD_AGENT_2006_GU12_KORR GROUP BY GU12_A_ID,STAN_ID,RAZN_DATE,RAZN_NUM,IS_KORR
) c
WHERE a.GU12_A_ID=b.GU12_A_ID(+)
  AND a.STAN_ID=b.STAN_ID(+)
  AND a.GU12_A_ID=c.GU12_A_ID(+)
  AND a.STAN_ID=c.STAN_ID(+);


--
-- V_GD_AGENT_2006_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_MONTH
(GU12_A_ID, STAN_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, ORIG_KOL, ORIG_VES, 
 KOL, VES, IS_KORR, STAN_NAME, NOM_ZD, 
 CLIENT_KOL, CLIENT_VES, FACT_VES)
AS 
SELECT /*+ ORDERED */
  -- Заявки из ФИНАНСОВ текущего месяца с привязкой ГУ-12
  month.GU12_A_ID,
  month.STAN_ID,
  A.zayv_num,
  A.zayv_date,
  A.from_date,
  A.to_date,
  A.begin_date,
  A.end_date,
  A.orig_kol,
  A.orig_ves,
  A.kol,
  A.ves,
  A.IS_KORR,
  KLS_STAN.STAN_NAME,
  month.nom_zd,
  COUNT(*) as client_kol,
  SUM(kvit.ves_brutto) as client_ves,
  SUM(DECODE(SIGN(kvit.ves_brutto+kvit.upak_ves-10),1,CEIL(kvit.ves_brutto+kvit.upak_ves),CEIL((kvit.ves_brutto+kvit.upak_ves)*10)/10)) as fact_ves
FROM V_GD_AGENT_2006_GU12_GRP A,month,kvit, V_GD_AGENT_2006_GU12_LIST AA, kls_stan, kls_dog, kls_vid_otgr, v_master_reports C
WHERE month.GU12_A_ID=AA.GU12_A_ID -- Только из списка
  AND month.STAN_ID=AA.STAN_ID -- Только из списка
  AND month.GU12_A_ID=A.GU12_A_ID -- Реквизиты заявок
  AND month.STAN_ID=A.STAN_ID -- Реквизиты заявок
  AND month.nom_zd=kvit.nom_zd
  AND month.dog_id=kls_dog.id
  AND month.stan_id=kls_stan.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
  AND kvit.date_oforml<TO_DATE(TO_CHAR(C.END_DATE+1,'dd.mm.yyyy')||' 00:00','dd.mm.yyyy hh24:mi')
  AND month.date_plan=TRUNC(C.BEGIN_DATE,'MONTH')
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2006.XLS'
GROUP BY
  month.GU12_A_ID,
  month.STAN_ID,
  A.zayv_num,
  A.zayv_date,
  A.from_date,
  A.to_date,
  A.begin_date,
  A.end_date,
  A.orig_kol,
  A.orig_ves,
  A.kol,
  A.ves,
  A.IS_KORR,
  KLS_STAN.STAN_NAME,
  month.nom_zd;


--
-- V_GD_AGENT_2006_ZAKAZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_ZAKAZ
(ID, FROM_DATE, KOL, REQUEST, FACT_KOL, 
 FACT_VES)
AS 
SELECT
  ID,
  FROM_DATE,
  MAX(KOL) as KOL,
  MAX(REQUEST) as REQUEST,
  SUM(FACT_KOL) as FACT_KOL,
  SUM(FACT_VES) as FACT_VES
FROM
(     
SELECT /*+ RULE */
  /* Предоставлено заявок */
  mon.ID,
  TRUNC(NVL(gu12_a.FROM_DATE,mon.DATE_PLAN),'MONTH') as FROM_DATE,
  NVL(mon.KOL,0) as KOL,
  NVL(mon.REQUEST,0) as REQUEST,
  (CASE WHEN gu12_a.id is null then 0 ELSE NVL(mon_r.LOAD_KOL,0) END) as LOAD_KOL,
  (CASE WHEN gu12_a.id is null then 0 ELSE NVL(mon_r.LOAD_VES,0) END) as LOAD_VES,
  NVL((SELECT COUNT(*) FROM kvit WHERE kvit.nom_zd=month.nom_zd),0) as FACT_KOL,
  NVL((SELECT SUM(kvit.ves_brutto) FROM kvit WHERE kvit.nom_zd=month.nom_zd),0) as FACT_VES
FROM month_all mon,v_master_reports C,
  (
  select * from zakaz_hist where status_zakaz_id=20
  ) mon_r,
  month,gu12_a
WHERE mon.id=mon_r.zakaz_id(+)
  AND mon_r.nom_zd=month.nom_zd(+)
  AND month.GU12_A_ID=GU12_A.ID(+)
  AND mon.IS_AGENT=1
  AND DECODE(gu12_a.id,NULL,mon.DATE_PLAN,gu12_a.ZAKR_DATE) BETWEEN C.BEGIN_DATE AND C.END_DATE -- Если нет плана перевозок
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2006.XLS'
)
GROUP BY
ID,FROM_DATE;


--
-- V_GD_AGENT_2008_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_FACT
(VES, KOL)
AS 
SELECT /*+ ORDERED INDEX(kvit) USE_NL(month,kvit,C,kls_vid_otgr,kls_dog ) */
  ROUND(SUM(ves_brutto)) as ves,
  COUNT(*) as kol
FROM (SELECT * FROM v_master_reports WHERE NLS_UPPER(REPORT_FILE)='GD_AGENT_2008.XLS') C, kvit,month,kls_vid_otgr,kls_dog
WHERE kvit.date_otgr>=C.BEGIN_DATE
  AND kvit.date_otgr<=C.END_DATE
  AND kvit.nom_zd=month.nom_zd
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
  AND month.DOG_ID=kls_dog.ID
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE;


--
-- V_GD_AGENT_2008_GU12_LIST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_GU12_LIST
(GU12_A_ID, STAN_ID, KVIT_VNUT, KVIT_EXP, CLIENT_KOL, 
 CLIENT_VES, FACT_VES, MPS_VNUT_BEFORE, SOBS_VNUT_BEFORE, MPS_EXP_BEFORE, 
 SOBS_EXP_BEFORE, MPS_VNUT_KV_BEFORE, SOBS_VNUT_KV_BEFORE, MPS_EXP_KV_BEFORE, SOBS_EXP_KV_BEFORE)
AS 
SELECT /*+ RULE */
  /* Факт отгрузки в отчетном периоде по заявкам */
  GU12_A_ID,
  STAN_ID,
  SUM(kvit_vnut) as kvit_vnut,
  SUM(kvit_exp) as kvit_exp,
  SUM(client_kol) as client_kol,
  SUM(client_ves) as client_ves,
  SUM(fact_ves) as fact_ves,
  SUM(mps_vnut_before) as mps_vnut_before,
  SUM(sobs_vnut_before) as sobs_vnut_before,
  SUM(mps_exp_before) as mps_exp_before,
  SUM(sobs_exp_before) as sobs_exp_before,
  SUM(
    CASE
      WHEN num_kvit>0 AND mps_vnut_before>0 THEN 1
      ELSE 0
    END) as mps_vnut_kv_before,   
  SUM(
    CASE
      WHEN num_kvit>0 AND sobs_vnut_before>0 THEN 1
      ELSE 0
    END) as sobs_vnut_kv_before,   
  SUM(
    CASE
      WHEN num_kvit>0 AND mps_exp_before>0 THEN 1
      ELSE 0
    END) as mps_exp_kv_before,   
  SUM(
    CASE
      WHEN num_kvit>0 AND sobs_exp_before>0 THEN 1
      ELSE 0
    END) as sobs_exp_kv_before   
FROM
(
SELECT /*+ RULE */
  month.GU12_A_ID,
  month.STAN_ID,
  kvit.num_kvit,
  DECODE(month.is_exp,0,1,0) as kvit_vnut,
  DECODE(month.is_exp,1,1,0) as kvit_exp,
  COUNT(*) as client_kol, -- Отгружено вагонов
  SUM(kvit.ves_brutto) as client_ves, -- Вес клиента
  SUM(DECODE(SIGN(kvit.ves_brutto+kvit.upak_ves-10),1,CEIL(kvit.ves_brutto+kvit.upak_ves),CEIL((kvit.ves_brutto+kvit.upak_ves)*10)/10)) as fact_ves, -- Вес ЖД
  SUM(CASE
        -- Отгружено ранее срока вагонов МПС по России
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID=3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID=3 THEN 1
  	    ELSE 0
	  END) as MPS_VNUT_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока НЕ вагонов МПС по России
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID<>3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+10 AND month.IS_EXP=0 AND kvit.VAGOWNER_ID<>3 THEN 1
  	    ELSE 0
	  END) as SOBS_VNUT_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока вагонов МПС на Экспорт
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID=3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID=3 THEN 1
		ELSE 0
	  END) as MPS_EXP_BEFORE,
  SUM(CASE
        -- Отгружено ранее срока НЕ вагонов МПС на Экспорт
        WHEN kvit.date_kvit>=TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<=A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID<>3 THEN 1
        WHEN kvit.date_kvit<TO_DATE('01.01.2006','dd.mm.yyyy') AND kvit.date_kvit<A.ZAYV_DATE+15 AND month.IS_EXP=1 AND kvit.VAGOWNER_ID<>3 THEN 1
		ELSE 0
	  END) as SOBS_EXP_BEFORE
FROM month,kvit,V_GD_AGENT_2008_GU12_GRP A,v_master_reports C,kls_dog,kls_vid_otgr
WHERE month.nom_zd=kvit.nom_zd
  AND month.GU12_A_ID=A.GU12_A_ID(+)
  AND month.STAN_ID=A.STAN_ID(+)
  AND month.dog_id=kls_dog.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
  AND kvit.date_oforml<TO_DATE(TO_CHAR(C.END_DATE+1,'dd.mm.yyyy')||' 00:00','dd.mm.yyyy hh24:mi')
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
GROUP BY
  month.GU12_A_ID,
  month.STAN_ID,
  kvit.num_kvit,
  month.is_exp
UNION ALL
SELECT
  GU12_A_ID,
  STAN_ID,
  0 as num_kvit,
  0 as kvit_vnut,
  0 as kvit_exp,
  0 as client_kol,
  0 as client_ves,
  0 as fact_ves,
  0 as mps_vnut_before,
  0 as sobs_vnut_before,
  0 as mps_exp_before,
  0 as sobs_exp_before
FROM
  V_GD_AGENT_2008_GU12_GRP
--WHERE FROM_DATE<BEGIN_DATE
)
GROUP BY
  GU12_A_ID,
  STAN_ID;


--
-- V_GD_AGENT_2008_GU12_ZAYV_KORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_GU12_ZAYV_KORR
(GU12_A_ID, STAN_ID, BEGIN_DATE, END_DATE, FROM_DATE, 
 TO_DATE, ZAYV_DATE, ZAYV_NUM, STAN_NAME, PROD_NAME, 
 KOL, VES, FACT_KOL, FACT_VES, KORR_DATE, 
 KORR_NUM, KORR_KOL, KORR_VES, IS_KORR)
AS 
SELECT
  /* Заявки отчетного месяца с корректировками и отгрузкой */
  a.GU12_A_ID,
  a.STAN_ID,
  a.BEGIN_DATE,
  a.END_DATE,
  a.FROM_DATE,
  a.TO_DATE,
  a.ZAYV_DATE,
  a.ZAYV_NUM,
  a.STAN_NAME,
  a.PROD_NAME,
  a.ORIG_KOL as KOL,
  a.ORIG_VES as VES,
  NVL(b.FACT_KOL,0) as FACT_KOL,
  NVL(b.FACT_VES,0) as FACT_VES,
  c.KORR_DATE,
  c.KORR_NUM,
  c.KORR_KOL,
  c.KORR_VES,
  c.IS_KORR
FROM V_GD_AGENT_2008_GU12_ZAYV a,
(
SELECT GU12_A_ID,STAN_ID,SUM(CLIENT_KOL) as FACT_KOL, SUM(CLIENT_VES) as FACT_VES FROM V_GD_AGENT_2008_GU12_LIST GROUP BY GU12_A_ID,STAN_ID
) b,
(
SELECT GU12_A_ID,STAN_ID,RAZN_DATE as KORR_DATE, RAZN_NUM as KORR_NUM, SUM(KOL) as KORR_KOL, SUM(VES) as KORR_VES,IS_KORR
  FROM V_GD_AGENT_2008_GU12_KORR GROUP BY GU12_A_ID,STAN_ID,RAZN_DATE,RAZN_NUM,IS_KORR
) c
WHERE a.GU12_A_ID=b.GU12_A_ID(+)
  AND a.STAN_ID=b.STAN_ID(+)
  AND a.GU12_A_ID=c.GU12_A_ID(+)
  AND a.STAN_ID=c.STAN_ID(+);


--
-- V_GD_AGENT_2008_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_MONTH
(GU12_A_ID, STAN_ID, ZAYV_NUM, ZAYV_DATE, FROM_DATE, 
 TO_DATE, BEGIN_DATE, END_DATE, ORIG_KOL, ORIG_VES, 
 KOL, VES, IS_KORR, STAN_NAME, NOM_ZD, 
 CLIENT_KOL, CLIENT_VES, FACT_VES)
AS 
SELECT /*+ ORDERED */
  -- Заявки из ФИНАНСОВ текущего месяца с привязкой ГУ-12
  month.GU12_A_ID,
  month.STAN_ID,
  A.zayv_num,
  A.zayv_date,
  A.from_date,
  A.to_date,
  A.begin_date,
  A.end_date,
  A.orig_kol,
  A.orig_ves,
  A.kol,
  A.ves,
  A.IS_KORR,
  KLS_STAN.STAN_NAME,
  month.nom_zd,
  COUNT(*) as client_kol,
  SUM(kvit.ves_brutto) as client_ves,
  SUM(DECODE(SIGN(kvit.ves_brutto+kvit.upak_ves-10),1,CEIL(kvit.ves_brutto+kvit.upak_ves),CEIL((kvit.ves_brutto+kvit.upak_ves)*10)/10)) as fact_ves
FROM V_GD_AGENT_2008_GU12_GRP A,month,kvit, V_GD_AGENT_2008_GU12_LIST AA, kls_stan, kls_dog, kls_vid_otgr, v_master_reports C
WHERE month.GU12_A_ID=AA.GU12_A_ID -- Только из списка
  AND month.STAN_ID=AA.STAN_ID -- Только из списка
  AND month.GU12_A_ID=A.GU12_A_ID -- Реквизиты заявок
  AND month.STAN_ID=A.STAN_ID -- Реквизиты заявок
  AND month.nom_zd=kvit.nom_zd
  AND month.dog_id=kls_dog.id
  AND month.stan_id=kls_stan.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
  AND month.load_abbr=kls_vid_otgr.load_abbr
  AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
  AND kvit.date_oforml<TO_DATE(TO_CHAR(C.END_DATE+1,'dd.mm.yyyy')||' 00:00','dd.mm.yyyy hh24:mi')
  AND month.date_plan=TRUNC(C.BEGIN_DATE,'MONTH')
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
GROUP BY
  month.GU12_A_ID,
  month.STAN_ID,
  A.zayv_num,
  A.zayv_date,
  A.from_date,
  A.to_date,
  A.begin_date,
  A.end_date,
  A.orig_kol,
  A.orig_ves,
  A.kol,
  A.ves,
  A.IS_KORR,
  KLS_STAN.STAN_NAME,
  month.nom_zd;


--
-- V_GD_AGENT_2008_MONTH_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2008_MONTH_ALL
(RAZN_NUM, RAZN_DATE, INPUT_DATE, STAN_OLD_ID, STAN_OLD_NAME, 
 STAN_ID, STAN_NAME, POLUCH_ID, POLUCH_NAME, PROD_ID, 
 PROD_NAME, KOL, VES, SPEED_KOL, SPEED_VES, 
 PRIM, STATUS_ZAKAZ_ID, MAIN_RAZN_NUM, MAIN_RAZN_DATE, MAIN_INPUT_DATE)
AS 
SELECT
  RAZN_NUM,
  RAZN_DATE,
  INPUT_DATE,
  STAN_OLD_ID,
  STAN_OLD_NAME,
  STAN_ID,
  STAN_NAME,
  POLUCH_ID,
  POLUCH_NAME,
  PROD_ID,
  PROD_NAME,
  KOL,
  VES,
  SPEED_KOL,
  SPEED_VES,
  PRIM,
  STATUS_ZAKAZ_ID,
  MAIN_RAZN_NUM,
  MAIN_RAZN_DATE,
  MAIN_INPUT_DATE
FROM
(
SELECT /*+ RULE */
  /* Предоставлено разнарядок */
  -- Основные заявки
  mon.client_number as RAZN_NUM,
  mon.client_date as RAZN_DATE,
  mon.input_date,
  old_mon.STAN_ID as STAN_OLD_ID,
  old_STAN.STAN_NAME as STAN_OLD_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME as POLUCH_NAME,
  KLS_PROD.ID_NPR as PROD_ID,
  kls_prod.NAME_NPR as PROD_NAME,
  SUM(NVL(mon.KOL,0)) as KOL,
  SUM(NVL(mon.REQUEST,0)) as VES,
  SUM(NVL((
    SELECT COUNT(*) FROM kvit,month,v_master_reports C,kls_vid_otgr
	 WHERE kvit.nom_zd=month.nom_zd AND month.zakaz_id=mon.id
--       AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
--       AND kvit.date_oforml<=TO_DATE(TO_CHAR(C.END_DATE,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
       AND kvit.date_otgr>=C.BEGIN_DATE
       AND kvit.date_otgr<=C.END_DATE
       AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
       AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
       AND month.load_abbr=kls_vid_otgr.load_abbr
       AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
   ),0)) as SPEED_KOL,
  SUM(NVL((
    SELECT SUM(kvit.ves_brutto) FROM kvit,month,v_master_reports C,kls_vid_otgr
	 WHERE kvit.nom_zd=month.nom_zd AND month.zakaz_id=mon.id
--       AND kvit.date_oforml>=TO_DATE(TO_CHAR(C.BEGIN_DATE-1,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
--       AND kvit.date_oforml<=TO_DATE(TO_CHAR(C.END_DATE,'dd.mm.yyyy')||' 17:00','dd.mm.yyyy hh24:mi')
       AND kvit.date_otgr>=C.BEGIN_DATE
       AND kvit.date_otgr<=C.END_DATE
       AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
       AND month.PROD_ID_NPR<>'90000' -- Без НЕФТИ
       AND month.load_abbr=kls_vid_otgr.load_abbr
       AND kls_vid_otgr.LOAD_TYPE_ID IN (1,6) -- Только ЖД и контейнеры
   ),0)) as SPEED_VES,
  ''  as PRIM,
  10 as STATUS_ZAKAZ_ID,
  mon.client_number as MAIN_RAZN_NUM,
  mon.client_date as MAIN_RAZN_DATE,
  mon.input_date as MAIN_INPUT_DATE
FROM month_all mon,kls_dog,v_master_reports C, kls_stan,kls_prod,month_all old_mon,kls_stan old_stan, kls_predpr poluch
WHERE mon.KLS_dog_id=kls_dog.id
  AND mon.ZAKAZ_OLD_ID=old_mon.ID(+)
  AND old_mon.stan_id=old_stan.ID (+)
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT_2008.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND mon.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
  AND mon.KLS_PROD_ID<>'90000' -- Без НЕФТИ
  AND mon.PARUS_RN is null -- Без СНП
  AND mon.IS_AGENT=1 -- Только агентские
  AND mon.STAN_ID=KLS_STAN.ID
  and mon.kls_prod_id=kls_prod.id_npr
  and mon.POLUCH_ID=poluch.ID(+)
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА
GROUP BY
  mon.client_number,
  mon.client_date,
  mon.input_date,
  old_mon.STAN_ID,
  old_STAN.STAN_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME,
  KLS_PROD.ID_NPR,
  kls_prod.NAME_NPR,
  DECODE(mon.ZAKAZ_OLD_ID,NULL,'','В счет заказа № '||old_mon.CLIENT_NUMBER||' ст.'||old_stan.STAN_NAME || ' ')
--
UNION ALL
--
SELECT /*+ RULE */
  -- Переадресовки в пути
  mon.client_number as RAZN_NUM,
  mon.client_date as RAZN_DATE,
  mon.input_date,
  mon.STAN_OLD_ID,
  old_stan.STAN_NAME as STAN_OLD_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME as POLUCH_NAME,
  KLS_PROD.ID_NPR as PROD_ID,
  kls_prod.NAME_NPR as PROD_NAME,
  SUM(ABS(NVL(mon.KOL,0))) as KOL,
  SUM(ABS(NVL(mon.REQUEST,0))) as VES,
  SUM(ABS(NVL(mon.SPEED_KOL,0))) as SPEED_KOL,
  SUM(ABS(NVL(mon.SPEED_VES,0))) as SPEED_VES,
  ''  as PRIM,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number as MAIN_RAZN_NUM,
  month_all.client_date as MAIN_RAZN_DATE,
  month_all.input_date as MAIN_INPUT_DATE
FROM month_all_row mon,month_all,kls_dog,v_master_reports C, kls_stan,kls_prod, kls_stan old_stan, kls_predpr poluch
WHERE mon.KLS_dog_id=kls_dog.id
  AND mon.month_all_id=month_all.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT_2008.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month_all.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
  AND mon.KLS_PROD_ID<>'90000' -- Без НЕФТИ
  AND month_all.PARUS_RN is null -- Без СНП
  AND month_all.IS_AGENT=1 -- Только агентские
  AND mon.STAN_ID=KLS_STAN.ID
  AND mon.STAN_OLD_ID=old_stan.ID
  and mon.kls_prod_id=kls_prod.id_npr
  and month_all.POLUCH_ID=poluch.ID(+)
  and mon.status_zakaz_id in (41,42)
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА
GROUP BY
  mon.client_number,
  mon.client_date,
  mon.input_date,
  mon.STAN_OLD_ID,
  old_stan.STAN_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME,
  KLS_PROD.ID_NPR,
  kls_prod.NAME_NPR,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number,
  month_all.client_date,
  month_all.input_date
--
UNION ALL
--
SELECT /*+ RULE */
  -- Отказы
  mon.client_number as RAZN_NUM,
  mon.client_date as RAZN_DATE,
  mon.input_date,
  NULL as STAN_OLD_ID,
  NULL as STAN_OLD_NAME,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME as POLUCH_NAME,
  KLS_PROD.ID_NPR as PROD_ID,
  kls_prod.NAME_NPR as PROD_NAME,
  SUM(ABS(NVL(mon.KOL,0))) as KOL,
  SUM(ABS(NVL(mon.REQUEST,0))) as VES,
  SUM(ABS(NVL(mon.SPEED_KOL,0))) as SPEED_KOL,
  SUM(ABS(NVL(mon.SPEED_VES,0))) as SPEED_VES,
  ''  as PRIM,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number as MAIN_RAZN_NUM,
  month_all.client_date as MAIN_RAZN_DATE,
  month_all.input_date as MAIN_INPUT_DATE
FROM month_all_row mon,month_all,kls_dog,v_master_reports C, kls_stan,kls_prod,kls_predpr poluch
WHERE month_all.KLS_dog_id=kls_dog.id
  AND mon.month_all_id=month_all.id
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT_2008.XLS')
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER
  AND month_all.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2008.XLS'
  AND month_all.KLS_PROD_ID<>'90000' -- Без НЕФТИ
  AND month_all.PARUS_RN is null -- Без СНП
  AND month_all.IS_AGENT=1 -- Только агентские
  AND month_all.STAN_ID=KLS_STAN.ID
  and month_all.kls_prod_id=kls_prod.id_npr
  and mon.status_zakaz_id in (50)
  and month_all.POLUCH_ID=poluch.ID(+)
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА
GROUP BY
  mon.client_number,
  mon.client_date,
  mon.input_date,
  mon.STAN_ID,
  KLS_STAN.STAN_NAME,
  mon.POLUCH_ID,
  poluch.SF_NAME,
  KLS_PROD.ID_NPR,
  kls_prod.NAME_NPR,
  mon.STATUS_ZAKAZ_ID,
  month_all.client_number,
  month_all.client_date,
  month_all.input_date
)
ORDER BY
  razn_date,
  razn_num,
  prod_id,
  STAN_NAME;


--
-- V_GD_OTGR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_OTGR
(IS_AGENT, IS_AGENT_NAME, LUK_DOG_ID, LUK_DOG_NUMBER, LOAD_TYPE_ID, 
 DATE_OFORML, DATE_OTGR, DATE_KVIT, PROD_ID_NPR, IS_EXP, 
 CIST, VES)
AS 
SELECT
  KLS_DOG.IS_AGENT,
  KLS_DOG_MAIN.NAME as IS_AGENT_NAME,
  NVL(KLS_DOG_MAIN.DOG_ID,0) as LUK_DOG_ID,
  NVL(MAIN_DOG.DOG_NUMBER,'Собственные договора') as LUK_DOG_NUMBER,
  KLS_VID_OTGR.LOAD_TYPE_ID,
  KVIT.DATE_OFORML,
  KVIT.DATE_OTGR,
  KVIT.DATE_KVIT,
  KVIT.PROD_ID_NPR,
  MONTH.IS_EXP,
  1 AS CIST,
  DECODE(KVIT.VES,0,KVIT.VES_BRUTTO,KVIT.VES) AS VES
FROM KVIT,MONTH,KLS_VID_OTGR,KLS_DOG,KLS_DOG_MAIN, KLS_DOG MAIN_DOG
WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
  AND MONTH.DOG_ID=KLS_DOG.ID
  AND KVIT.DATE_OTGR>=TO_DATE('01.04.2002','dd.mm.yyyy')
  AND KLS_DOG.IS_AGENT=KLS_DOG_MAIN.IS_AGENT
  AND KVIT.DATE_KVIT BETWEEN KLS_DOG_MAIN.FROM_DATE AND KLS_DOG_MAIN.TO_DATE
  AND KLS_DOG_MAIN.DOG_ID=MAIN_DOG.ID;


--
-- V_GD_VYP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_VYP
(TIP_OTGR_2, KOD_NPR_2, EXPORT_2, KOD_GROTP, GROTP, 
 FACT_MON_C, FACT_MON_T, FACT_SUT_C, F_SOBC_SUT, F_SOBC_MON, 
 F_SOBV_MON, FACT_SUT_T)
AS 
SELECT /*+ RULE */
  kls_vid_otgr.LOAD_TYPE_ID AS tip_otgr_2,
  kvit.PROD_ID_NPR AS kod_npr_2,
  DECODE(month.NAZN_OTG_ID,5,2,1) AS export_2,
  month.GROTP_ID AS kod_grotp,
  kls_tex_pd.GROTP_SHORT_NAME AS grotp,
  COUNT(*) AS fact_mon_c,
  SUM(kvit.ves_brutto) AS fact_mon_t,
  SUM(DECODE(SIGN(kvit.DATE_OFORML-(V_TEMP_VYP_GD_PARAMS.END_DATE-7/24)),1,1,0,1,0)) AS fact_sut_c,
  SUM(DECODE(SIGN(kvit.DATE_OFORML-(V_TEMP_VYP_GD_PARAMS.END_DATE-7/24)),1,DECODE(kvit.vagowner_id,3,0,1),0,DECODE(kvit.vagowner_id,3,0,1),0)) AS f_sobc_sut,
  SUM(DECODE(kvit.vagowner_id,3,0,1)) AS f_sobc_mon,
  SUM(DECODE(kvit.vagowner_id,3,0,kvit.ves_brutto)) AS f_sobv_mon,
  SUM(DECODE(SIGN(kvit.DATE_OFORML-(V_TEMP_VYP_GD_PARAMS.END_DATE-7/24)),1,kvit.ves_brutto,0,kvit.ves_brutto,0)) AS fact_sut_t
  FROM kvit,month,kls_vid_otgr,kls_prod,kls_prod kls_prod_gr,kls_tex_pd,kls_prod_plan,V_TEMP_VYP_GD_PARAMS
    where
   kvit.NOM_ZD=month.NOM_ZD and
   month.LOAD_ABBR=kls_vid_otgr.LOAD_ABBR and
   kvit.PROD_ID_NPR=kls_prod.ID_NPR and
   kls_prod.ID_GROUP_NPR=kls_prod_gr.ID_NPR and
   month.TEX_PD_ID=kls_tex_pd.ID and
   month.GROTP_ID=kls_tex_pd.GROTP_ID and
   kls_prod.PROD_PLAN_ID=kls_prod_plan.ID and
   kls_vid_otgr.LOAD_TYPE_ID<>5 and
   kvit.DATE_OFORML between
     V_TEMP_VYP_GD_PARAMS.BEGIN_DATE-7/24 and -- с 17:00
     V_TEMP_VYP_GD_PARAMS.END_DATE+(17*60*60-1)/(24*60*60) -- по 16:59:59
GROUP BY
  kls_vid_otgr.LOAD_TYPE_ID,
  kvit.PROD_ID_NPR,
  DECODE(month.NAZN_OTG_ID,5,2,1),
  kls_prod.NORMOTGR,
  kls_prod_gr.ID_NPR,
  month.GROTP_ID,
  kls_tex_pd.GROTP_SHORT_NAME;


--
-- V_GD_VYP_PRODRECODE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_VYP_PRODRECODE
(PROD_GU12_ID, ID_NPR)
AS 
SELECT /*+ RULE */
  kls_prod.PROD_GU12_ID,
  MIN(kls_prod.ID_NPR) AS id_npr
  FROM kls_prod,kvit,V_TEMP_VYP_GD_PARAMS,kls_prod_plan
  WHERE kvit.PROD_ID_NPR=kls_prod.ID_NPR and
        kls_prod.PROD_PLAN_ID=kls_prod_plan.id and
       kvit.DATE_KVIT between
       V_TEMP_VYP_GD_PARAMS.BEGIN_DATE and
       V_TEMP_VYP_GD_PARAMS.END_DATE
  GROUP BY kls_prod.PROD_GU12_ID
UNION ALL
SELECT 
  kls_prod.PROD_GU12_ID,
  MIN(kls_prod.ID_NPR) AS id_npr 
  FROM kls_prod,kls_prod_plan WHERE
    kls_prod.PROD_PLAN_ID=kls_prod_plan.id and
    kls_prod.PROD_GU12_ID not in 
 (SELECT
  kls_prod.PROD_GU12_ID
  FROM kls_prod,kvit,V_TEMP_VYP_GD_PARAMS,kls_prod_plan
  WHERE kvit.PROD_ID_NPR=kls_prod.ID_NPR and
        kls_prod.PROD_PLAN_ID=kls_prod_plan.id and
       kvit.DATE_KVIT between
       V_TEMP_VYP_GD_PARAMS.BEGIN_DATE and
       V_TEMP_VYP_GD_PARAMS.END_DATE
     GROUP BY kls_prod.PROD_GU12_ID
  )
  GROUP BY kls_prod.PROD_GU12_ID;


--
-- V_GKH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GKH
(KVIT_ID, NUM_CIST, SVED_NUM, DATE_OTGR, DATE_KVIT, 
 DATE_OFORML, PLAT_NAME, POLUCH_NAME, NAME_NPR, VES)
AS 
SELECT
  KVIT.ID,
  KVIT.NUM_CIST,
  KVIT.SVED_NUM,
  KVIT.DATE_OTGR,
  KVIT.DATE_KVIT,
  KVIT.DATE_OFORML,
  NPO_PLAT.PREDPR_NAME AS PLAT_NAME,
  POLUCH.PREDPR_NAME AS POLUCH_NAME,
  KLS_PROD.NAME_NPR,
  KVIT.VES_BRUTTO AS VES
FROM KVIT,MONTH,KLS_REGION,KLS_PREDPR NPO_PLAT,KLS_DOG NPO_DOG, KLS_PREDPR POLUCH, KLS_PROD, KLS_DOG LUK_DOG
WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
  AND MONTH.DOG_ID=LUK_DOG.ID
  AND LUK_DOG.IS_AGENT=2
  AND MONTH.GOSPROG_ID=50
  AND MONTH.PLANSTRU_ID<>78
  AND MONTH.NPODOG_ID=NPO_DOG.ID (+)
  AND MONTH.POLUCH_ID=POLUCH.ID
  AND NPO_DOG.PREDPR_ID=NPO_PLAT.ID
  AND NPO_PLAT.REGION_ID=KLS_REGION.ID
  AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR;


--
-- V_GOSPROG1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GOSPROG1
(N_DOG, PROGRAM, KOD_10, PLAN_DOG, SPLAN_DOG, 
 PLAN_MON, SPLAN_MON, KOD_MOSK, VES_MON, SUM_MON, 
 VES_YEAR, SVES_YEAR, OPL, DOLG, PROS, 
 PREV, KOD_NPR)
AS 
SELECT /*+ RULE*/
  uni_all.n_dog,
  uni_all.prg,
  uni_all.kod_10,   
  sum(nvl(uni_all.PLAN_DOG,0)) as plan_dog,
  ROUND(sum(nvl(uni_all.SPLAN_DOG,0)),2) as splan_dog,
  sum(nvl(uni_all.plan_mon,0)) as plan_mon,
  ROUND(sum(nvl(uni_all.splan_mon,0)),2) as splan_mon,
  uni_all.kod_mosk,
  sum(nvl(uni_all.ves_month,0)) as ves_mon,
  ROUND(sum(nvl(uni_all.sum_month,0)),2) as sum_mon,
  sum(nvl(uni_all.ves_year,0)) as ves_year,
  ROUND(sum(nvl(uni_all.sves_year,0)),2) as sves_year,
  sum(0) AS opl,
  sum(0) AS dolg,
  sum(0) AS pros,
  sum(0) AS prev,
  uni_all.npr as kod_npr
FROM
(SELECT 
  out_pl.n_dog,
  out_pl.prg,
  out_pl.kod_10,
  dg.vsego as PLAN_DOG,
  (dg.vsego/1000*prices.cena_otp) as SPLAN_DOG,
  mn.plan_mon,
  mn.splan_mon,
  out_pl.kod_mosk,
  kv.ves_month,
  kv.sum_month,
  out_pl.ves_year,
  out_pl.sves_year,
  out_pl.npr
FROM
  /*выбираем отгрузки за текущий месяц*/
  (SELECT kls_dog.SHORT_NUMBER as n_dog,
      month.GOSPROG_ID as prg,
    month.PROD_ID_NPR as npr,
    kls_region.KOD_MOSCOW as kod_mosk,
      Sum(kvit.VES*1000) as ves_month,
      Sum(kvit.VES*kvit.CENA_OTP) as Sum_month
  FROM   kvit,month,kls_dog,kls_predpr poluch,kls_region,v_master_reports r
  WHERE kvit.NOM_ZD=month.NOM_ZD
     AND month.DOG_ID=kls_dog.ID(+) 
     AND month.POLUCH_ID=poluch.ID(+)
     AND poluch.REGION_ID=kls_region.ID(+) 
     AND month.gosprog_id in (1,2,3,4,5) 
  AND TRIM(NLS_UPPER(r.REPORT_FILE))='PB30.XLS'
  AND month.DATE_PLAN=TRUNC(r.END_DATE,'MONTH')
     AND kvit.date_kvit<=r.END_DATE
     AND month.NAZN_OTG_ID<>10
   GROUP BY kls_dog.SHORT_NUMBER,month.PROD_ID_NPR,kls_region.KOD_MOSCOW,month.GOSPROG_ID) KV,
  /*выбираем заявки на текущий месяц */
  (SELECT kls_dog.SHORT_NUMBER as n_dog,
      month.GOSPROG_ID as prg,
      month.PROD_ID_NPR as npr,
      kls_region.KOD_MOSCOW as kod_mosk,
      Sum(month.TONN_DECLARED*1000) as plan_mon,
      Sum(month.TONN_DECLARED*month.CENA_OTP) as splan_mon
  FROM month,kls_dog,kls_predpr poluch,kls_region,v_master_reports r
  WHERE month.DOG_ID=kls_dog.ID(+) 
     AND month.POLUCH_ID=poluch.ID(+)
     AND poluch.REGION_ID=kls_region.ID(+)
     AND month.gosprog_id in (1,2,3,4,5) 
  AND TRIM(NLS_UPPER(r.REPORT_FILE))='PB30.XLS'
  AND month.DATE_PLAN=TRUNC(r.END_DATE,'MONTH')
     AND month.NAZN_OTG_ID<>10 
   GROUP BY kls_dog.SHORT_NUMBER,month.PROD_ID_NPR,kls_region.KOD_MOSCOW,month.GOSPROG_ID) MN,
   /* Отгрузки с начала года по 1 число отчетного м-ца кроме отгрузок на ответхранение. Они добавяться потом.*/
  (SELECT kls_dog.SHORT_NUMBER as n_dog,
      month.GOSPROG_ID as prg,
      v_out_plat_dbf.kod_nfp as npr,
      kls_prod.kod_10,
    v_out_plat_dbf.KATEG_PR,
      kls_region.KOD_MOSCOW as kod_mosk,
      Sum(case 
	  	   when to_char(v_out_plat_dbf.data_kvit,'mm')=to_char(r.END_DATE,'mm') then 0 
		   else v_out_plat_dbf.VES*1000 
	  end) as ves_year,
	  Sum(case 
	  	   when to_char(v_out_plat_dbf.data_kvit,'mm')=to_char(r.END_DATE,'mm') then 0 
		   else v_out_plat_dbf.summa_dok 
	  end) as sves_year
  FROM v_out_plat_dbf,month,kls_dog,kls_predpr poluch,kls_region,kls_prod,v_master_reports r
  WHERE v_out_plat_dbf.NOM_ZD=month.NOM_ZD(+)
     AND month.DOG_ID=kls_dog.ID(+) 
     AND month.POLUCH_ID=poluch.ID(+)
     AND poluch.REGION_ID=kls_region.ID(+)
     AND month.prod_id_npr=kls_prod.id_npr 
     AND month.gosprog_id in (1,2,3,4,5) 
  AND TRIM(NLS_UPPER(r.REPORT_FILE))='PB30.XLS'
     AND v_out_plat_dbf.data_kvit between TRUNC(r.END_DATE,'YEAR') AND r.END_DATE
     AND month.NAZN_OTG_ID<>10
  AND month.NAZN_OTG_ID<>8
   GROUP BY kls_dog.SHORT_NUMBER,kls_prod.kod_10,v_out_plat_dbf.KATEG_PR,v_out_plat_dbf.kod_nfp,kls_region.KOD_MOSCOW,month.GOSPROG_ID
   ) out_pl,
   /*Выбираем данные по заказам*/
   (SELECT kls_dog.SHORT_NUMBER as n_dog,
    zakaz.PROD_ID_NPR as npr,
    SUM(NVL(zakaz.VES,0)*1000) as vsego
 FROM kls_dog,zakaz,v_master_reports r
 WHERE zakaz.DOG_ID=kls_dog.ID
   AND zakaz.IS_AGENT=1
   AND zakaz.PERIOD_ID=1
   AND TRIM(NLS_UPPER(r.REPORT_FILE))='PB30.XLS'
      AND zakaz.DATE_PLAN between TRUNC(r.END_DATE,'YEAR') AND r.END_DATE
 GROUP BY KLS_DOG.SHORT_NUMBER,zakaz.PROD_ID_NPR) dg,
 npr_prices prices
 /*Объединяем таблицы в сводную */
WHERE out_pl.n_dog=mn.n_dog(+)
      AND out_pl.prg=mn.prg(+)
      AND out_pl.npr=mn.npr(+)
      AND out_pl.kod_mosk=mn.kod_mosk(+)
      AND out_pl.n_dog=kv.n_dog(+)
      AND out_pl.prg=kv.prg(+)
      AND out_pl.npr=kv.npr(+)
      AND out_pl.kod_mosk=kv.kod_mosk(+)
      AND out_pl.n_dog=dg.n_dog(+)
      AND out_pl.npr=dg.npr(+)
      AND out_pl.npr=prices.PROD_ID_NPR(+)
      AND prices.BEGIN_DATE=(select max(begin_date) from npr_prices where prod_id_npr=prices.prod_id_npr and cat_cen_id=out_pl.kateg_pr)
   AND prices.cat_cen_id=out_pl.kateg_pr
UNION ALL
/* присоединим данные по отгрузке за год на ответхранение по госпрограммам(month.NAZN_OTG_ID=8)*/
SELECT kls_dog.SHORT_NUMBER as n_dog,
    month.GOSPROG_ID as prg,
    kls_prod.KOD_10,
    0 as PLAN_DOG,
    0 as SPLAN_DOG,
    0 as plan_mon,
    0 as splan_mon,    
    kls_region.KOD_MOSCOW as kod_mosk,
    0 as ves_month,
      0 as sum_month,
    kvit.VES*1000 as ves_year,
    kvit.VES*kvit.CENA_OTP as sves_year,
    kls_prod.ID_NPR as npr
FROM   kvit,month,kls_dog,kls_predpr poluch,kls_region,kls_prod,v_master_reports r
WHERE kvit.NOM_ZD=month.NOM_ZD(+)
   AND month.DOG_ID=kls_dog.ID(+) 
   AND month.POLUCH_ID=poluch.ID(+)
   AND poluch.REGION_ID=kls_region.ID(+)
   AND month.PROD_ID_NPR=kls_prod.ID_NPR(+) 
   AND month.gosprog_id in (1,2,3,4,5) 
   AND TRIM(NLS_UPPER(r.REPORT_FILE))='PB30.XLS'
      AND kvit.date_kvit between TRUNC(r.END_DATE,'YEAR') AND TRUNC(r.END_DATE,'MONTH')-1
   AND month.NAZN_OTG_ID=8
) uni_all   
GROUP BY uni_all.n_dog,uni_all.kod_10,uni_all.npr,uni_all.kod_mosk,uni_all.prg;


--
-- V_GOSPROG6  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GOSPROG6
(KOD_OPER, NAME_OPER, KOD_VLAD, NAME_VLAD, KOD_POLU, 
 NAME_POLU, ZAYAV, MON, YEAR)
AS 
SELECT /*+ RULE*/
   plat.INN as kod_oper,
   SUBSTR(plat.predpr_name,1,30) as name_oper,
   sobst.INN as kod_vlad,
   SUBSTR(sobst.predpr_name,1,30) as name_vlad,
   SUBSTR(y.poluch,1,10) as kod_polu,
   SUBSTR(poluch.name,1,30) as name_polu,
   NVL(raz.tonn,0) as zayav,
   NVL(mon.bz_ves,0) as mon,
   NVL(y.kvit_ves,0) as year
FROM
(SELECT
    kls_dog.PREDPR_ID as plat,
    month.GP_NAPR_ID as poluch,
    month.NPR_SOBSTV_ID as sobst,
    SUM(ROUND(month.TONN_R*1000,0)) AS tonn
   FROM month,kls_dog,v_master_reports r 
   WHERE month.DOG_ID=kls_dog.ID
    AND month.GOSPROG_ID+0=6
 AND TRIM(NLS_UPPER(r.REPORT_FILE))='PA30.XLS'
 AND month.DATE_PLAN=TRUNC(r.END_DATE,'MONTH')
    AND SUBSTR(month.PROD_ID_NPR,1,3)='115'
    AND month.NAZN_OTG_ID<>10
 GROUP BY kls_dog.PREDPR_ID,month.GP_NAPR_ID,month.NPR_SOBSTV_ID) raz,
(SELECT
    kls_dog.PREDPR_ID as plat,
    month.GP_NAPR_ID as poluch,
    month.NPR_SOBSTV_ID as sobst,
    SUM(ROUND(kvit.VES*1000,0)) as bz_ves
   FROM month,kvit,kls_dog,v_master_reports r 
   WHERE month.NOM_ZD=kvit.NOM_ZD
       AND month.DOG_ID=kls_dog.ID
       AND month.GOSPROG_ID+0=6
 AND TRIM(NLS_UPPER(r.REPORT_FILE))='PA30.XLS'
 AND kvit.date_kvit BETWEEN TRUNC(r.END_DATE,'MONTH') AND r.END_DATE
    AND SUBSTR(month.PROD_ID_NPR,1,3)='115'
    AND month.NAZN_OTG_ID<>10
 GROUP BY kls_dog.PREDPR_ID,month.GP_NAPR_ID,month.NPR_SOBSTV_ID) mon,
(SELECT
    kls_dog.PREDPR_ID as plat,
    month.GP_NAPR_ID as poluch,
    month.NPR_SOBSTV_ID as sobst,
    SUM(ROUND(kvit.VES*1000,0)) as kvit_ves
   FROM month,kvit,kls_dog,v_master_reports r 
   WHERE month.NOM_ZD=kvit.NOM_ZD
       AND month.DOG_ID=kls_dog.ID
       AND month.GOSPROG_ID+0=6
 AND TRIM(NLS_UPPER(r.REPORT_FILE))='PA30.XLS'
 AND kvit.date_kvit between TRUNC(r.END_DATE,'YEAR') AND TRUNC(r.END_DATE,'MONTH')-1
    AND SUBSTR(month.PROD_ID_NPR,1,3)='115'
    AND month.NAZN_OTG_ID<>10
 GROUP BY kls_dog.PREDPR_ID,month.GP_NAPR_ID,month.NPR_SOBSTV_ID) y,
 kls_predpr plat,kls_gp_napr poluch,kls_predpr sobst
WHERE y.plat=mon.plat(+)
   AND y.poluch=mon.poluch(+)
   AND y.sobst=mon.sobst(+)
   AND y.plat=raz.plat(+)
   AND y.poluch=raz.poluch(+)
   AND y.sobst=raz.sobst(+)
   AND y.plat=plat.id(+)
   AND y.poluch=poluch.id(+)
   AND y.sobst=sobst.id(+);


--
-- V_GU_DEC_SUT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU_DEC_SUT
(COLUMN_A, COLUMN_B, COLUMN_C, COLUMN_D, COLUMN_E, 
 COLUMN_F, COLUMN_G, COLUMN_H, COLUMN_I, COLUMN_J)
AS 
select /*+ rule */ 
     -- Отгрузка по графику (4, F) 
      -- Жд 
       T1.DATE_R      as COLUMN_A,  -- Дата 
       0                          as COLUMN_B,  -- Возможность отгрузки по эстакадам 
       T3.NAME_NPR                as COLUMN_C,  -- Продукт 
       T4.PREDPR_NAME || ' (ж/д)' as COLUMN_D,  -- Покупатель 
       0                          as COLUMN_E,  -- Заказ на месяц, тн 
       Sum(T1.VES)                as COLUMN_F,  -- Отгрузка по графику, тн 
       0                          as COLUMN_G,  -- Задание на сутки, тн 
       0                          as COLUMN_H,  -- Отклонение от графика, тн 
       0                          as COLUMN_I,  -- Факт за сутки, тн 
       0                          as COLUMN_J   -- Отклонение от задания на сутки, тн 
from V_MASTER_REPORTS V1, GU12_BR T1 
join GU12_B T2 on (T1.ID_B = T2.ID) 
join KLS_PROD T3 on (T1.ID_NPR = T3.ID_NPR) 
join KLS_PREDPR T4 on (T2.PLAT_ID = T4.ID) 
where (T1.DATE_R between V1.BEGIN_DATE and V1.END_DATE) and 
      (Nls_Upper(V1.REPORT_FILE) = 'GU_DEC.XLS') 
group by T1.DATE_R, T3.NAME_NPR, T4.PREDPR_NAME 
union all 
-- Самовывоз 
select T4.VALUE                             as COLUMN_A,  -- Дата 
       0                                    as COLUMN_B,  -- Возможность отгрузки по эстакадам 
       T2.NAME_NPR                          as COLUMN_C,  -- Продукт 
       T3.PREDPR_NAME || ' (а/н)'           as COLUMN_D,  -- Покупатель 
       0                                    as COLUMN_E,  -- Заказ на месяц, тн 
       Sum(round(T1.VES/(Last_Day(T1.BEGIN_DATE)- 
	       T1.BEGIN_DATE+1),3))                as COLUMN_F,  -- Отгрузка по графику, тн 
       0                                    as COLUMN_G,  -- Задание на сутки, тн 
       0                                    as COLUMN_H,  -- Отклонение от графика, тн 
       0                                    as COLUMN_I,  -- Факт за сутки, тн 
       0                                    as COLUMN_J   -- Отклонение от задания на сутки, тн 
from V_MASTER_REPORTS V1, ZAKAZ T1 
join KLS_PROD T2 on (T1.PROD_ID_NPR = T2.ID_NPR) 
join KLS_PREDPR T3 on (T1.PLAT_ID = T3.ID), KLS_DATES T4 
where (T1.IS_AGENT = 1) and 
      (T1.BEGIN_DATE between V1.BEGIN_DATE and V1.END_DATE) and 
      (T4.VALUE between V1.BEGIN_DATE and V1.END_DATE) and 
      (T1.BEGIN_DATE <= T4.VALUE) and (T4.VALUE <= Last_Day(T1.BEGIN_DATE)) and 
      (T1.LOAD_ABBR = 'САМ') and 
	  (T1.IS_ACCEPT = 1) and 
      (Nls_Upper(V1.REPORT_FILE) = 'GU_DEC.XLS') 
group by T4.VALUE, T2.NAME_NPR, T3.PREDPR_NAME 
union all 
-- Факт за сутки (7, I) 
select /*+ rule */ T1.DATE_OTGR           as COLUMN_A,  -- Дата 
       0                                  as COLUMN_B,  -- Возможность отгрузки по эстакадам 
       T2.NAME_NPR                        as COLUMN_C,  -- Продукт 
       (case T3.LOAD_ABBR when 'САМ' 
		  then T5.PREDPR_NAME || ' (а/н)' 
	      else T5.PREDPR_NAME || ' (ж/д)' 
        end)                              as COLUMN_D,  -- Покупатель 
       0                                  as COLUMN_E,  -- Заказ на месяц, тн 
       0                                  as COLUMN_F,  -- Отгрузка по графику, тн 
       0                                  as COLUMN_G,  -- Задание на сутки, тн 
       0                                  as COLUMN_H,  -- Отклонение от графика, тн 
       Sum(T1.VES)                        as COLUMN_I,  -- Факт за сутки, тн 
       0                                  as COLUMN_J   -- Отклонение от задания на сутки, тн 
from V_MASTER_REPORTS V1, KVIT T1 
join KLS_PROD T2 on (T1.PROD_ID_NPR = T2.ID_NPR) 
join MONTH T3 on (T1.NOM_ZD = T3.NOM_ZD) 
join KLS_DOG T4 on (T3.DOG_ID = T4.ID) 
join KLS_PREDPR T5 on (T4.PREDPR_ID = T5.ID) 
where (T1.DATE_OTGR between V1.BEGIN_DATE and V1.END_DATE) and 
      (Nls_Upper(V1.REPORT_FILE) = 'GU_DEC.XLS') 
group by T1.DATE_OTGR, T2.NAME_NPR, (case T3.LOAD_ABBR when 'САМ' then T5.PREDPR_NAME || ' (а/н)' else T5.PREDPR_NAME || ' (ж/д)' end) 
--order by COLUMN_A, COLUMN_D, COLUMN_C
;


--
-- V_GU12_CARD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD
(DATE_O, STAN_ID, KOL_CORR, VES_CORR, KOL_PLAN, 
 VES_PLAN, KOL_FAKT, VES_FAKT, ISCOR)
AS 
SELECT
BR.DATE_R AS DATE_O
,B.STAN_ID
,(CASE WHEN B.ISCOR=1 THEN BR.KOL_VAG ELSE 0 END) AS KOL_CORR
,(CASE WHEN B.ISCOR=1 THEN BR.VES ELSE 0 END) AS VES_CORR
,BR.KOL_VAG AS KOL_PLAN
,BR.VES AS VES_PLAN
,0 AS KOL_FAKT
,0 AS VES_FAKT
,B.ISCOR AS ISCOR
FROM
GU12_A A
,GU12_B B
,GU12_BR BR
WHERE
A.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND A.ID=B.ID_A
AND B.ID=BR.ID_B
UNION ALL
SELECT
--TRUNC(K.DATE_OFORML) AS DATE_O
(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
END) AS DATE_O
,M.STAN_ID
,0 AS KOL_CORR
,0 AS VES_CORR
,0 AS KOL_PLAN
,0 AS VES_PLAN
,1 AS KOL_FAKT
,K.VES AS VES_FAKT
,0 AS ISCOR
FROM
KVIT K
,MONTH M
WHERE
K.NOM_ZD=M.NOM_ZD
AND M.GU12_A_ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12');


--
-- V_GU12_CARD_N  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_N
(DATE_O, STAN_ID, KOL_CORR, VES_CORR, KOL_PLAN, 
 VES_PLAN, KOL_FAKT, VES_FAKT, ISCOR, SOBVAG)
AS 
SELECT
BR.DATE_R AS DATE_O
,B.STAN_ID
,(CASE WHEN B.ISCOR=1 THEN BR.KOL_VAG ELSE 0 END) AS KOL_CORR
,(CASE WHEN B.ISCOR=1 THEN BR.VES ELSE 0 END) AS VES_CORR
,BR.KOL_VAG AS KOL_PLAN
,BR.VES AS VES_PLAN
,0 AS KOL_FAKT
,0 AS VES_FAKT
,B.ISCOR AS ISCOR
--,'' AS SOBVAG
,(CASE 
	   WHEN B.PRINVAG_ID=207 THEN 'П'
	   ELSE 'C'
  END) AS SOBVAG
FROM
GU12_A A
,GU12_B B
,GU12_BR BR
WHERE
A.ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND A.ID=B.ID_A
AND B.ID=BR.ID_B
UNION ALL
SELECT
--TRUNC(K.DATE_OFORML) AS DATE_O
(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
END) AS DATE_O
,M.STAN_ID
,0 AS KOL_CORR
,0 AS VES_CORR
,0 AS KOL_PLAN
,0 AS VES_PLAN
,1 AS KOL_FAKT
,K.VES AS VES_FAKT
,0 AS ISCOR
,(CASE 
	   WHEN OW.VAGOWN_TYP_ID=0 THEN 'П'
	   ELSE 'C'
  END) AS SOBVAG	   	    
--,DECODE(OW.VAGOWN_TYP_ID,0,'П',1,'С',2,'С',3,'С','') AS SOBVAG
FROM
KVIT K
,MONTH M
,KLS_VAGOWNER OW
WHERE
K.NOM_ZD=M.NOM_ZD
AND M.GU12_A_ID=FOR_TEMP.GET_AS_NUM('ID_ZAYAV','MASTER','GU12')
AND K.VAGOWNER_ID=OW.ID;


--
-- V_GU12_CARD_STAN_CORR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_STAN_CORR
(STAN_ID, SOBVAG, STANNAZN, KOL_CORR, VES_CORR, 
 KOL_PLAN, VES_PLAN, KOL_FAKT, VES_FAKT)
AS 
SELECT
A.STAN_ID
,A.SOBVAG
,MAX(S.STAN_NAME) AS STANNAZN
,SUM(A.KOL_CORR) AS KOL_CORR
,SUM(A.VES_CORR) AS VES_CORR
,SUM(A.KOL_PLAN) AS KOL_PLAN
,SUM(A.VES_PLAN) AS VES_PLAN
,SUM(A.KOL_FAKT) AS KOL_FAKT
,SUM(A.VES_FAKT) AS VES_FAKT
FROM V_GU12_CARD_N A, V_GU12_STAN_NAZN S
WHERE A.STAN_ID=S.ID 
GROUP BY STAN_ID,SOBVAG
ORDER BY STANNAZN,SOBVAG;


--
-- V_GU12_CARD_STAN_CORR_N  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_STAN_CORR_N
(STAN_ID, STANNAZN, KOL_CORR_P, KOL_CORR_S, VES_CORR, 
 VES_CORR_P, VES_CORR_S, KOL_PLAN, KOL_PLAN_P, KOL_PLAN_S, 
 VES_PLAN, VES_PLAN_P, VES_PLAN_S, KOL_FAKT, KOL_FAKT_P, 
 KOL_FAKT_S, VES_FAKT, VES_FAKT_P, VES_FAKT_S)
AS 
SELECT
STAN_ID
,MAX(S.STAN_NAME) AS STANNAZN
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_CORR ELSE 0 END) AS KOL_CORR_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_CORR END) AS KOL_CORR_S
,SUM(A.VES_CORR) AS VES_CORR
,SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_CORR ELSE 0 END) AS VES_CORR_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_CORR END) AS VES_CORR_S
,SUM(A.KOL_PLAN) AS KOL_PLAN
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_PLAN ELSE 0 END) AS KOL_PLAN_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_PLAN END) AS KOL_PLAN_S
,SUM(A.VES_PLAN) AS VES_PLAN
,SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_PLAN ELSE 0 END) AS VES_PLAN_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_PLAN END) AS VES_PLAN_S
,SUM(A.KOL_FAKT) AS KOL_FAKT
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_FAKT ELSE 0 END) AS KOL_FAKT_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_FAKT END) AS KOL_FAKT_S
,ROUND(SUM(A.VES_FAKT),0) AS VES_FAKT
,ROUND(SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_FAKT ELSE 0 END),0) AS VES_FAKT_P
,ROUND(SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_FAKT END),0) AS VES_FAKT_S
FROM V_GU12_CARD_N A, V_GU12_STAN_NAZN S
WHERE A.STAN_ID=S.ID 
GROUP BY STAN_ID
ORDER BY STANNAZN;


--
-- V_GU12_REP_OTGR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_OTGR
(NOM_Z, PROD, STAN, PRINVAG, KOL_P, 
 VES_P, KOL_S, VES_S)
AS 
SELECT
NOM_Z
,PROD
,STAN
,PRINVAG
,SUM(KOL_P) AS KOL_P
,SUM(VES_P) AS VES_P
,SUM(KOL_S) AS KOL_S
,SUM(VES_S) AS VES_S
FROM
(SELECT /*+ ORDERED USE_NL(K,M,A) */
  A.NOM_Z
  ,PGD.NAME AS PROD
  ,S.STAN_NAME AS STAN
  ,(CASE
  		WHEN OW.VAGOWN_TYP_ID=0 THEN 'П'
		ELSE 'С'
    END) AS PRINVAG  
  ,(CASE
  		WHEN OW.VAGOWN_TYP_ID=0 THEN 1
		ELSE 0
    END) AS KOL_P  
  ,(CASE
  		WHEN OW.VAGOWN_TYP_ID=0 THEN K.VES_BRUTTO
		ELSE 0
    END) AS VES_P  
  ,(CASE
  		WHEN OW.VAGOWN_TYP_ID=0 THEN 0
		ELSE 1
    END) AS KOL_S  
  ,(CASE
  		WHEN OW.VAGOWN_TYP_ID=0 THEN 0
		ELSE K.VES_BRUTTO
    END) AS VES_S  
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD P
  ,KLS_PROD_GU12 PGD
  ,GU12_A A
  ,V_GU12_STAN_NAZN S
  ,KLS_VAGOWNER OW
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=P.ID_NPR(+)
  AND P.PROD_GU12_ID=PGD.ID(+)
  AND M.GU12_A_ID=A.ID(+)
  AND M.STAN_ID=S.ID(+)
  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DBEG_OTGR','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DEND_OTGR','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND VO.LOAD_TYPE_ID=1
  AND K.VAGOWNER_ID=OW.ID)
GROUP BY NOM_Z,PROD,STAN,PRINVAG
ORDER BY NOM_Z,PROD,STAN,PRINVAG;


--
-- V_GU12_REP_PLANFAKT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_PLANFAKT
(PROD, PLAT, NOM_Z, STAN, DATE_O, 
 KOL_PLAN, VES_PLAN, KOL_FAKT, VES_FAKT)
AS 
SELECT PROD
       ,PLAT
	   ,NOM_Z
	   ,STAN
	   ,DATE_O
	   ,KOL_PLAN
	   ,VES_PLAN
	   ,KOL_FAKT
	   ,VES_FAKT
FROM
(
SELECT PROD
       ,PLAT
	   ,NOM_Z
	   ,STAN
	   ,DATE_O
	   ,SUM(KOL_PLAN) AS KOL_PLAN
	   ,SUM(VES_PLAN) AS VES_PLAN
	   ,SUM(KOL_FAKT) AS KOL_FAKT
	   ,SUM(VES_FAKT) AS VES_FAKT
FROM (
--KVIT
SELECT /*+ ORDERED USE_NL(K,M,A) */
  PGD.NAME AS PROD
  ,PL.FULLPLAT AS PLAT
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
    END) AS DATE_O
--  ,TRUNC(K.DATE_OFORML) AS DATE_O
  ,0 AS KOL_PLAN
  ,0 AS VES_PLAN
  ,1 AS KOL_FAKT
  ,K.VES_BRUTTO AS VES_FAKT
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD P
  ,KLS_PROD_GU12 PGD
  ,GU12_A A
  ,V_GU12_STAN_NAZN S
  ,KLS_DOG D
  ,V_GU12_PLAT PL
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=P.ID_NPR(+)
  AND P.PROD_GU12_ID=PGD.ID(+)
  AND M.GU12_A_ID=A.ID(+)
  AND M.STAN_ID=S.ID(+)
  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DBEG_MONTH','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')-1
  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DEND_MONTH','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
--  AND K.DATE_KVIT>=FOR_TEMP.GET_AS_DATE('DBEG_MONTH','GU12','GU12_PLANFAKT.XLS')
--  AND K.DATE_KVIT<=FOR_TEMP.GET_AS_DATE('DEND_MONTH','GU12','GU12_PLANFAKT.XLS')
  AND VO.LOAD_TYPE_ID=1
  AND M.DOG_ID=D.ID
  AND D.PREDPR_ID=PL.PLAT_ID
  AND NOT A.SOGL_DATE IS NULL
  AND (CASE
          WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		  ELSE PL.PLAT_ID
	   END)=2641
UNION ALL
-- GU12
SELECT
  P.NAME AS PROD
  ,PL.FULLPLAT AS PLAT
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,BR.DATE_R AS DATE_O
  ,BR.KOL_VAG AS KOL_PLAN
  ,BR.VES AS VES_PLAN
  ,0 AS KOL_FAKT
  ,0 AS VES_FAKT
FROM
  GU12_BR BR
  ,GU12_B B
  ,GU12_A A
  ,KLS_PROD_GU12 P
  ,V_GU12_PLAT PL
  ,V_GU12_STAN_NAZN S
WHERE
  BR.ID_B=B.ID
  AND B.ID_A=A.ID
  AND A.PROD_ID=P.ID
  AND PL.PLAT_ID=B.PLAT_ID
  AND S.ID=B.STAN_ID
  AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_MONTH','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_MONTH','MASTER','GU12')
  AND B.ISCOR<>2
  AND NOT A.SOGL_DATE IS NULL
  AND (CASE
          WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		  ELSE B.PLAT_ID
	   END)=2641
)
GROUP BY PROD
         ,PLAT
	     ,NOM_Z
	     ,STAN
	     ,DATE_O
ORDER BY PROD
         ,PLAT
	     ,NOM_Z
	     ,STAN
	     ,DATE_O
)
WHERE NOT (KOL_PLAN=0 AND VES_PLAN=0 AND KOL_FAKT=0 AND VES_FAKT=0);


--
-- V_GU12_REP_PLANFAKT_EXP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_PLANFAKT_EXP
(PROD, NOM_Z, STAN, EXPED, VLADPUT, 
 PRINVAG, DATE_O, KOL_PLAN, VES_PLAN, KOL_FAKT, 
 VES_FAKT)
AS 
SELECT PROD
	   ,NOM_Z
	   ,STAN
	   ,EXPED
	   ,VLADPUT
	   ,PRINVAG
	   ,DATE_O
	   ,SUM(KOL_PLAN) AS KOL_PLAN
	   ,SUM(VES_PLAN) AS VES_PLAN
	   ,SUM(KOL_FAKT) AS KOL_FAKT
	   ,SUM(VES_FAKT) AS VES_FAKT
FROM (
--KVIT
SELECT /*+ ORDERED USE_NL(K,M,A) */
  PGD.NAME AS PROD
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,E.PREDPR_NAME AS EXPED
  ,(CASE WHEN A.VLADPUT_ID=2641 THEN 'СНП'
  		 WHEN A.VLADPUT_ID=2120 THEN 'СМН'
		 ELSE 'СКС'
    END) AS VLADPUT
	,(CASE
		  WHEN VW.VAGOWN_TYP_ID=0 THEN 'П'
		  WHEN VW.VAGOWN_TYP_ID=1 THEN 'С'
		  ELSE 'А'
	  END) AS PRINVAG
  ,(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
    END) AS DATE_O
  ,0 AS KOL_PLAN
  ,0 AS VES_PLAN
  ,1 AS KOL_FAKT
  ,K.VES_BRUTTO AS VES_FAKT
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD P
  ,KLS_PROD_GU12 PGD
  ,GU12_A A
  ,V_GU12_STAN_NAZN S
  ,V_GU12_EXPED E
  ,KLS_VAGOWNER VW
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=P.ID_NPR(+)
  AND P.PROD_GU12_ID=PGD.ID(+)
  AND M.GU12_A_ID=A.ID(+)
  AND M.STAN_ID=S.ID(+)
  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DBEG_MONTH','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')-1
  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DEND_MONTH','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND VO.LOAD_TYPE_ID=1
  AND M.IS_EXP=1
  AND A.EXPED_ID=E.ID(+)
  AND K.VAGOWNER_ID=VW.ID
UNION ALL
-- GU12
SELECT
  P.NAME AS PROD
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,E.PREDPR_NAME AS EXPED
  ,(CASE WHEN A.VLADPUT_ID=2641 THEN 'СНП'
  		 WHEN A.VLADPUT_ID=2120 THEN 'СМН'
		 ELSE 'СКС'
    END) AS VLADPUT
  ,TRIM(PV.ABBR) AS PRINVAG
  ,BR.DATE_R AS DATE_O
  ,BR.KOL_VAG AS KOL_PLAN
  ,BR.VES AS VES_PLAN
  ,0 AS KOL_FAKT
  ,0 AS VES_FAKT
FROM
  GU12_BR BR
  ,GU12_B B
  ,GU12_A A
  ,KLS_PROD_GU12 P
  ,V_GU12_STAN_NAZN S
  ,V_GU12_EXPED E
  ,KLS_GD_PRINVAG PV
WHERE
  BR.ID_B=B.ID
  AND B.ID_A=A.ID
  AND A.PROD_ID=P.ID
  AND S.ID=B.STAN_ID
  AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_MONTH','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_MONTH','MASTER','GU12')
  AND BR.KOL_VAG<>0
  AND B.ISCOR<>2
  AND NOT A.SOGL_DATE IS NULL
  AND NOT A.EXPED_ID IS NULL
  AND A.EXPED_ID=E.ID(+)
  AND B.PRINVAG_ID=PV.ID
)
GROUP BY PROD
	     ,NOM_Z
	     ,STAN
	     ,EXPED
		 ,VLADPUT
		 ,PRINVAG
		 ,DATE_O
ORDER BY PROD
	     ,NOM_Z
	     ,STAN
	     ,EXPED
		 ,VLADPUT
		 ,PRINVAG
		 ,DATE_O;


--
-- V_GU12_REP_PLANFAKT_N  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_PLANFAKT_N
(GRPROD, PROD, PLAT, NOM_Z, STAN, 
 DATE_O, KOL_PLAN, VES_PLAN, KOL_FAKT, VES_FAKT)
AS 
SELECT GRPROD
       ,PROD
       ,PLAT
	   ,NOM_Z
	   ,STAN
	   ,DATE_O
	   ,KOL_PLAN
	   ,VES_PLAN
	   ,KOL_FAKT
	   ,VES_FAKT
FROM
(SELECT GRPROD
       ,PROD
       ,PLAT
	   ,NOM_Z
	   ,STAN
	   ,DATE_O
	   ,SUM(KOL_PLAN) AS KOL_PLAN
	   ,SUM(VES_PLAN) AS VES_PLAN
	   ,SUM(KOL_FAKT) AS KOL_FAKT
	   ,SUM(VES_FAKT) AS VES_FAKT
FROM (
--KVIT
SELECT /*+ ORDERED USE_NL(K,M,A) */
  P.NAME AS GRPROD
  ,NP.NAME_NPR AS PROD
  ,PL.FULLPLAT AS PLAT
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
    END) AS DATE_O
  ,0 AS KOL_PLAN
  ,0 AS VES_PLAN
  ,1 AS KOL_FAKT
  ,K.VES_BRUTTO AS VES_FAKT
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD_GU12 P
  ,KLS_PROD NP
  ,GU12_A A
  ,V_GU12_STAN_NAZN S
  ,KLS_DOG D
  ,V_GU12_PLAT PL
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=NP.ID_NPR(+)
  AND NP.PROD_GU12_ID=P.ID(+)
  AND M.GU12_A_ID=A.ID(+)
  AND M.STAN_ID=S.ID(+)
  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DBEG_MONTH','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')-1
  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DEND_MONTH','MASTER','GU12'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND VO.LOAD_TYPE_ID=1
  AND M.DOG_ID=D.ID
  AND D.PREDPR_ID=PL.PLAT_ID
  AND NOT A.SOGL_DATE IS NULL
  AND (CASE
          WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		  ELSE PL.PLAT_ID
	   END)=2641
UNION ALL
-- GU12
SELECT
  P.NAME AS GRPROD
  ,NVL(NP.NAME_NPR,'   ') AS PROD
  ,PL.FULLPLAT AS PLAT
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,BR.DATE_R AS DATE_O
  ,BR.KOL_VAG AS KOL_PLAN
  ,BR.VES AS VES_PLAN
  ,0 AS KOL_FAKT
  ,0 AS VES_FAKT
FROM
  GU12_BR BR
  ,GU12_B B
  ,GU12_A A
  ,KLS_PROD_GU12 P
  ,KLS_PROD NP
  ,V_GU12_PLAT PL
  ,V_GU12_STAN_NAZN S
WHERE
  BR.ID_B=B.ID
  AND B.ID_A=A.ID
  AND A.PROD_ID=P.ID
  AND BR.ID_NPR=NP.ID_NPR(+)
  AND PL.PLAT_ID=B.PLAT_ID
  AND S.ID=B.STAN_ID
  AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_MONTH','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_MONTH','MASTER','GU12')
  AND B.ISCOR<>2
  AND NOT A.SOGL_DATE IS NULL
  AND (CASE
          WHEN FOR_TEMP.GET_AS_NUM('USER_UNP','MASTER','GU12')=1 THEN 2641
		  ELSE B.PLAT_ID
	   END)=2641
)
GROUP BY GRPROD
         ,PROD
         ,PLAT
	     ,NOM_Z
	     ,STAN
	     ,DATE_O
ORDER BY GRPROD
         ,PROD
         ,PLAT
	     ,NOM_Z
	     ,STAN
	     ,DATE_O)
WHERE NOT (KOL_PLAN=0 AND VES_PLAN=0 AND KOL_FAKT=0 AND VES_FAKT=0);


--
-- V_GU12_REP_SPISOK_ZAYAV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_REP_SPISOK_ZAYAV
(PROD, NOM_Z, STAN, KOL_PLAN, VES_PLAN, 
 KOL_FAKT, VES_FAKT, REG_DATE, FROM_DATE, TO_DATE, 
 SOGL_DATE)
AS 
SELECT PROD
	   ,NOM_Z
	   ,STAN
	   ,SUM(KOL_PLAN) AS KOL_PLAN
	   ,SUM(VES_PLAN) AS VES_PLAN
	   ,SUM(KOL_FAKT) AS KOL_FAKT
	   ,SUM(VES_FAKT) AS VES_FAKT
	   ,MAX(REG_DATE) AS REG_DATE
	   ,MAX(FROM_DATE) AS FROM_DATE
	   ,MAX(TO_DATE) AS TO_DATE
	   ,MAX(SOGL_DATE) AS SOGL_DATE
FROM (
--KVIT
SELECT /*+ ORDERED USE_NL(K,M,A) */
  PGD.NAME AS PROD
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,0 AS KOL_PLAN
  ,0 AS VES_PLAN
  ,1 AS KOL_FAKT
  ,K.VES_BRUTTO AS VES_FAKT
  ,TO_DATE('01.01.2000','DD.MM.YYYY') AS REG_DATE
  ,TO_DATE('01.01.2000','DD.MM.YYYY') AS FROM_DATE
  ,TO_DATE('01.01.2000','DD.MM.YYYY') AS TO_DATE
  ,TO_DATE('01.01.2000','DD.MM.YYYY') AS SOGL_DATE
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD P
  ,KLS_PROD_GU12 PGD
  ,GU12_A A
  ,V_GU12_STAN_NAZN S
  ,KLS_DOG D
  ,V_GU12_PLAT PL
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=P.ID_NPR(+)
  AND P.PROD_GU12_ID=PGD.ID(+)
  AND M.GU12_A_ID=A.ID(+)
  AND M.STAN_ID=S.ID(+)
--  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DBEG_MONTH'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
--  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DEND_MONTH'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND K.DATE_KVIT>=FOR_TEMP.GET_AS_DATE('DBEG_SPIS','MASTER','GU12')
  AND K.DATE_KVIT<=FOR_TEMP.GET_AS_DATE('DEND_SPIS','MASTER','GU12')
  AND VO.LOAD_TYPE_ID=1
  AND M.DOG_ID=D.ID
  AND D.PREDPR_ID=PL.PLAT_ID
  AND NOT A.SOGL_DATE IS NULL
  AND D.PREDPR_ID=FOR_TEMP.GET_AS_NUM('PLATID_SPIS','MASTER','GU12')
UNION ALL
-- GU12
SELECT
  P.NAME AS PROD
  ,A.NOM_Z
  ,S.STAN_NAME AS STAN
  ,BR.KOL_VAG AS KOL_PLAN
  ,BR.VES AS VES_PLAN
  ,0 AS KOL_FAKT
  ,0 AS VES_FAKT
  ,A.REG_DATE
  ,A.FROM_DATE
  ,A.TO_DATE
  ,A.SOGL_DATE
FROM
  GU12_BR BR
  ,GU12_B B
  ,GU12_A A
  ,KLS_PROD_GU12 P
  ,V_GU12_PLAT PL
  ,V_GU12_STAN_NAZN S
WHERE
  BR.ID_B=B.ID
  AND B.ID_A=A.ID
  AND A.PROD_ID=P.ID
  AND PL.PLAT_ID=B.PLAT_ID
  AND S.ID=B.STAN_ID
  AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('DBEG_SPIS','MASTER','GU12') AND FOR_TEMP.GET_AS_DATE('DEND_SPIS','MASTER','GU12')
  AND BR.KOL_VAG<>0
  AND B.ISCOR<>2
  AND NOT A.SOGL_DATE IS NULL
  AND B.PLAT_ID=FOR_TEMP.GET_AS_NUM('PLATID_SPIS','MASTER','GU12'))
GROUP BY PROD
	     ,NOM_Z
	     ,STAN
ORDER BY PROD
	     ,NOM_Z
	     ,STAN;


--
-- V_INSURANCE_CERTIFICATE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_INSURANCE_CERTIFICATE
(NOM_CERT, DATE_VYP_SF, PREDPR_NAME, PREDPR_ADRESS, PREDPR_RS, 
 PREDPR_KS, PREDPR_BIK, BANK_NAME, BANK_ADRESS, LONG_NAME_NPR, 
 STAN_NAME, STRH_SUM, STRH, NUM_KVIT, DATE_KVIT, 
 NUM_CIST, VES)
AS 
SELECT
  bills.NOM_SF-6000000 AS nom_cert,
  bills.DATE_VYP_SF,
  kls_predpr.PREDPR_NAME,
  kls_predpr.POSTINDEX_J || ' ' || kls_predpr.CITY_J || ' ' || kls_predpr.ADDRESS_J AS Predpr_Adress,
  kls_predpr.RS AS Predpr_rs,
  kls_predpr.BANK_KORS AS Predpr_ks,
  kls_bank.BIK AS Predpr_bik,
  kls_bank.BANK_NAME,
  kls_bank.ADDRESS AS Bank_adress,
  kls_prod.LONG_NAME_NPR,
  kls_stan.stan_name,
  bills.PROD_SUM+bills.PROD_AKCIZ+bills.PROD_NDS+bills.PROD_GSM AS strh_sum,
  (SELECT SUM(bill_pos.SUMMA) from bill_pos WHERE bills.nom_dok=bill_pos.NOM_DOK AND bill_pos.BILL_POS_ID=20) AS strh,
  kvit.NUM_KVIT,
  kvit.DATE_KVIT,
  kvit.NUM_CIST,
  kvit.VES 
  FROM 
    bills,kls_dog,kls_predpr,kls_bank,month,kls_stan,kls_stan kls_stan2,kls_prod,kvit
  WHERE
    bills.DOG_ID=kls_dog.ID AND
	kls_dog.PREDPR_ID=kls_predpr.ID AND
	kls_predpr.BANK_KORS=kls_bank.KORS AND
	bills.PROD_ID_NPR=kls_prod.ID_NPR AND
	month.STAN_ID=kls_stan.id AND
	month.STANOTP_ID=kls_stan2.ID AND
	month.NOM_ZD=bills.NOM_ZD AND
	kvit.BILL_ID=bills.NOM_DOK AND
	bills.DATE_VYP_SF>=TO_DATE('01.01.2003','dd.mm.yyyy')
	and bills.nom_dok=6109399;


--
-- V_KOLYA_FOR_AUDIT_GP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KOLYA_FOR_AUDIT_GP
(GOSPROG_NAME, LONG_NAME_NPR, NOM_ZD, DATE_PLAN, TONN_DECLARED, 
 TONN_LOADED)
AS 
select
  kls_gosprog.GOSPROG_NAME,
  kls_prod.LONG_NAME_NPR,
  month.nom_zd,
  month.DATE_PLAN,
  month.TONN_DECLARED,
  (select sum(kvit.ves) from kvit where kvit.nom_zd=month.nom_zd) AS tonn_loaded
  from month,kls_gosprog,kls_prod
  where 
	month.GOSPROG_ID=kls_gosprog.ID and
	month.PROD_ID_NPR=kls_prod.ID_NPR and
	month.GOSPROG_ID<>0
	and month.DATE_PLAN between
	  TO_DATE('01.01.2003','dd.mm.yyyy') and
	  TO_DATE('30.06.2004','dd.mm.yyyy');


--
-- V_KVIT_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_ALL
(ID, FLG_OPERDATA, MESTO_ID, NOM_ZD, PROD_ID_NPR, 
 TEX_PD_ID, NUM_CIST, DATE_OTGR, VES, VES_BRUTTO, 
 VES_ED, KOL_ED, TARIF, TARIF19, TARIF_ORIG, 
 NUM_KVIT, DATE_KVIT, NUM_MILITARY, FLG_DOP_CIST, FLG_VAG_KLIENT, 
 VAGOWNER_ID, VAGONTYPE_ID, KALIBR_ID, VES_CIST, DATE_VOZ, 
 KVIT_VOZ, SUM_VOZ, DATE_OTV, PLOMBA1, PLOMBA2, 
 ROSINSPL1, ROSINSPL2, VZLIV, TEMPER, FAKT_PL, 
 FORMNAKL_ID, SHABEXP_ID, GTD, EXPED_ID, VETKA_OTP_ID, 
 NUM_EXP_MAR, BILL_ID, SVED_ID, DATE_OFORML, SVED_NUM, 
 PASP_ID, NUM_NAR, NUM_DOVER, PERER_ID, DATE_EDIT, 
 JKCOMMIT, GROTP_ID, PERECH_TEXPD_DATE, PERECH_TEXPD_NUM, SUM_PROD, 
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
 SUM_VOZN12, SUM_VOZN12_NDS, NACENKA, SUM_STRAH, CENA_VOZN, 
 TARIF_GUARD, TARIF_GUARD_NDS, TARIF_ALT, CENA, CENA_OTP, 
 NUM_AKT, BILL_POS_ID, PROTO_NUM, PROTO_DATE, NO_AKCIZ, 
 PERECH_GUARD_DATE, PERECH_GUARD_NUM, KOL_NET)
AS 
SELECT /*+  */
ID, FLG_OPERDATA, MESTO_ID, NOM_ZD, PROD_ID_NPR,
 TEX_PD_ID, NUM_CIST, DATE_OTGR, VES, VES_BRUTTO,
 VES_ED, KOL_ED, TARIF, TARIF19, TARIF_ORIG,
 NUM_KVIT, DATE_KVIT, NUM_MILITARY, FLG_DOP_CIST, FLG_VAG_KLIENT,
 VAGOWNER_ID, VAGONTYPE_ID, KALIBR_ID, VES_CIST, DATE_VOZ,
 KVIT_VOZ, SUM_VOZ, DATE_OTV, PLOMBA1, PLOMBA2,
 ROSINSPL1, ROSINSPL2, VZLIV, TEMPER, FAKT_PL,
 FORMNAKL_ID, SHABEXP_ID, GTD, EXPED_ID, VETKA_OTP_ID,
 NUM_EXP_MAR, BILL_ID, SVED_ID, DATE_OFORML, SVED_NUM,
 PASP_ID, NUM_NAR, NUM_DOVER, PERER_ID, DATE_EDIT,
 JKCOMMIT, GROTP_ID, PERECH_TEXPD_DATE, PERECH_TEXPD_NUM, SUM_PROD,
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS,
 SUM_VOZN12, SUM_VOZN12_NDS, NACENKA, SUM_STRAH, CENA_VOZN,
 TARIF_GUARD, TARIF_GUARD_NDS, TARIF_ALT, CENA, CENA_OTP,
 NUM_AKT, BILL_POS_ID, PROTO_NUM, PROTO_DATE, NO_AKCIZ, PERECH_GUARD_DATE,PERECH_GUARD_NUM,KOL_NET FROM KVIT
UNION ALL
SELECT /*+  */
ID, FLG_OPERDATA, MESTO_ID, NOM_ZD, PROD_ID_NPR,
 TEX_PD_ID, NUM_CIST, DATE_OTGR, VES, VES_BRUTTO,
 VES_ED, KOL_ED, TARIF, TARIF19, TARIF_ORIG,
 NUM_KVIT, DATE_KVIT, NUM_MILITARY, FLG_DOP_CIST, FLG_VAG_KLIENT,
 VAGOWNER_ID, VAGONTYPE_ID, KALIBR_ID, VES_CIST, DATE_VOZ,
 KVIT_VOZ, SUM_VOZ, DATE_OTV, PLOMBA1, PLOMBA2,
 ROSINSPL1, ROSINSPL2, VZLIV, TEMPER, FAKT_PL,
 FORMNAKL_ID, SHABEXP_ID, GTD, EXPED_ID, VETKA_OTP_ID,
 NUM_EXP_MAR, BILL_ID, SVED_ID, DATE_OFORML, SVED_NUM,
 PASP_ID, NUM_NAR, NUM_DOVER, PERER_ID, DATE_EDIT,
 JKCOMMIT, GROTP_ID, PERECH_TEXPD_DATE, PERECH_TEXPD_NUM, SUM_PROD,
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS,
 SUM_VOZN12, SUM_VOZN12_NDS, NACENKA, SUM_STRAH, CENA_VOZN,
 TARIF_GUARD, TARIF_GUARD_NDS, TARIF_ALT, CENA, CENA_OTP,
 NUM_AKT, BILL_POS_ID, PROTO_NUM, PROTO_DATE, NO_AKCIZ, PERECH_GUARD_DATE,PERECH_GUARD_NUM,KOL_NET FROM DOP_KVIT;


--
-- V_KVIT_DATE_VIR_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_DATE_VIR_ALL
(ID, FLG_OPERDATA, MESTO_ID, NOM_ZD, PROD_ID_NPR, 
 TEX_PD_ID, NUM_CIST, DATE_OTGR, VES, VES_BRUTTO, 
 VES_ED, KOL_ED, TARIF, TARIF19, TARIF_ORIG, 
 NUM_KVIT, DATE_KVIT, NUM_MILITARY, FLG_DOP_CIST, FLG_VAG_KLIENT, 
 VAGOWNER_ID, VAGONTYPE_ID, KALIBR_ID, VES_CIST, DATE_VOZ, 
 KVIT_VOZ, SUM_VOZ, DATE_OTV, PLOMBA1, PLOMBA2, 
 ROSINSPL1, ROSINSPL2, VZLIV, TEMPER, FAKT_PL, 
 FORMNAKL_ID, SHABEXP_ID, GTD, EXPED_ID, VETKA_OTP_ID, 
 NUM_EXP_MAR, BILL_ID, SVED_ID, DATE_OFORML, SVED_NUM, 
 PASP_ID, NUM_NAR, NUM_DOVER, PERER_ID, DATE_EDIT, 
 JKCOMMIT, GROTP_ID, PERECH_TEXPD_DATE, PERECH_TEXPD_NUM, SUM_PROD, 
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
 SUM_VOZN12, SUM_VOZN12_NDS, NACENKA, SUM_STRAH, CENA_VOZN, 
 TARIF_GUARD, TARIF_GUARD_NDS, TARIF_ALT, CENA, CENA_OTP, 
 NUM_AKT, BILL_POS_ID, PROTO_NUM, PROTO_DATE, NO_AKCIZ, 
 PERECH_GUARD_DATE, PERECH_GUARD_NUM, OWNERSHIP_ID, DATE_VIR)
AS 
SELECT /*+ ORDERED USE_NL(a,b) INDEX(b KVIT_DATE_VIR_BILL_I) */
a.ID,
a.FLG_OPERDATA,
a.MESTO_ID,
a.NOM_ZD,
a.PROD_ID_NPR,
a.TEX_PD_ID,
a.NUM_CIST,
a.DATE_OTGR,
NVL(b.VES,a.VES) as VES,
NVL(b.VES,a.VES_BRUTTO) as VES_BRUTTO,
a.VES_ED,
a.KOL_ED,
NVL(b.TARIF,a.TARIF) as TARIF,
NVL(b.TARIF19,a.TARIF19) as TARIF19,
NVL(b.TARIF_ORIG,a.TARIF_ORIG) as TARIF_ORIG,
a.NUM_KVIT,
a.DATE_KVIT,
a.NUM_MILITARY,
a.FLG_DOP_CIST,
a.FLG_VAG_KLIENT,
a.VAGOWNER_ID,
a.VAGONTYPE_ID,
a.KALIBR_ID,
NVL(b.VES_CIST,a.VES_CIST) as VES_CIST,
a.DATE_VOZ,
a.KVIT_VOZ,
a.SUM_VOZ,
a.DATE_OTV,
a.PLOMBA1,
a.PLOMBA2,
a.ROSINSPL1,
a.ROSINSPL2,
NVL(b.VZLIV,a.VZLIV) as VZLIV,
a.TEMPER,
a.FAKT_PL,
a.FORMNAKL_ID,
a.SHABEXP_ID,
a.GTD,
a.EXPED_ID,
a.VETKA_OTP_ID,
a.NUM_EXP_MAR,
a.BILL_ID,
a.SVED_ID,
a.DATE_OFORML,
a.SVED_NUM,
a.PASP_ID,
a.NUM_NAR,
a.NUM_DOVER,
a.PERER_ID,
a.DATE_EDIT,
a.JKCOMMIT,
a.GROTP_ID,
a.PERECH_TEXPD_DATE,
a.PERECH_TEXPD_NUM,
NVL(b.SUM_PROD,a.SUM_PROD) as SUM_PROD,
NVL(b.SUM_AKCIZ,a.SUM_AKCIZ) as SUM_AKCIZ,
NVL(b.SUM_PROD_NDS,a.SUM_PROD_NDS) as SUM_PROD_NDS,
NVL(b.TARIF_NDS,a.TARIF_NDS) as TARIF_NDS,
NVL(b.SUM_VOZN11,a.SUM_VOZN11) as SUM_VOZN11,
NVL(b.SUM_VOZN11_NDS,a.SUM_VOZN11_NDS) as SUM_VOZN11_NDS,
NVL(b.SUM_VOZN12,a.SUM_VOZN12) as SUM_VOZN12,
NVL(b.SUM_VOZN12_NDS,a.SUM_VOZN12_NDS) as SUM_VOZN12_NDS,
a.NACENKA,
NVL(b.SUM_STRAH,a.SUM_STRAH) as SUM_STRAH,
a.CENA_VOZN,
NVL(b.TARIF_GUARD,a.TARIF_GUARD) as TARIF_GUARD,
NVL(b.TARIF_GUARD_NDS,a.TARIF_GUARD_NDS) as TARIF_GUARD_NDS,
NVL(b.TARIF_ALT,a.TARIF_ALT) as TARIF_ALT,
a.CENA,
a.CENA_OTP,
a.NUM_AKT,
NVL(b.BILL_POS_ID,a.BILL_POS_ID) as BILL_POS_ID,
a.PROTO_NUM,
a.PROTO_DATE,
a.NO_AKCIZ,
a.PERECH_GUARD_DATE,
a.PERECH_GUARD_NUM,
NVL(b.OWNERSHIP_ID,1) as OWNERSHIP_ID,
NVL(b.DATE_VIR,TRUNC(a.DATE_KVIT,'MONTH')) as DATE_VIR
FROM (SELECT /*+ INDEX(kvit) */ * FROM kvit union all select /*+ INDEX(dop_kvit) */ * from dop_kvit) a,KVIT_DATE_VIR b
WHERE a.BILL_ID=b.BILL_ID(+)
AND a.ID=b.KVIT_ID(+)
--AND a.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy')
;


--
-- V_KVIT_DBF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_DBF
(ID, KOD_PLAT, KOD_POLUCH, KOD_POTREB, KST, 
 KOD_NPR, N_DOG, DATE_DOG, KATEG_CEN, KOL_CIST, 
 DATE_RAZN, DOP_CIST, NUM_CIST, DATE_OTGR, VES, 
 TARIF, TARIF19, DOP_TARIF, NUM_KVIT, DATE_KVIT, 
 N_PLAT, DATA_BUXG, REESTR, RODV, TIP_OTGR, 
 ERROR, VAG_KLIENT, PRIZN_MPS, TRANSP, POSRED, 
 TIP, VZLIV, MESTO, TIPV, USL_PPZT, 
 DATE_CEN, CENA, CENA_OTP, KOD_OTGR, VAR_POST, 
 NOM_ZD, GTD, EXPED, PRV, NSER, 
 DATE_VOZ, KVIT_VOZ, SUM_VOZ, P_O, OSC, 
 KOD_OPB, DATE_B, TIME_B, KOD_OPE, DATE_E, 
 TIME_E, KOD_NAPR, OLD_PLAT, ZPU, VOZVRAT, 
 MOSC_OUT, DATE_REMOV, NFP_OWNER, VES_PRIOBR, POKUP_DAYS, 
 DATE_OTV, DATE_PRIB, KST_O, AUTO_USL, PLN_CHANGE, 
 PASP, PLAT_TARIF, NALIV, VES_BRUTTO, NP, 
 ID_NP, DATE_NP, ID_NP_C, KOD_GROTP, NUM_PERECH, 
 DAT_PERECH, TARIF_ORIG, NP_DATA_O, NP_TIMEP, DATE_REE, 
 PATH, WRITE, KST_VOZ, RAS_V, KV_VOZ, 
 N_STAN, PT, CNT_CIST, N_VOZ_SCH, D_VOZ_SCH, 
 PROSR_DN, D_NAL_VOZ, PLOMBA1, PLOMBA2, ROSINPL1, 
 ROSINPL2, N_MAR, N_REZ, PL, TEMPER, 
 XPL, DOVEREN, NARIAD, REXP, KOD_PERER, 
 KOL_ED, VES_ED, TARA_ALL, SVED_ID, KODPASP, 
 DRIVER, GD_TRACK, DATE_PRIH, UPAK_ID, IS_DOC_R3, 
 D_41, SUM_AKCIZ, D_191, D_194, SUM_NALIV, 
 NDC_NAL20, D_442, NDC_TR20, NACENKA, SUM_NACEN, 
 CENA_VOZN, BAG_VES, TNVED, NDC_DOPTAR, TARIF_ALT, 
 WES, BAG_ID, SHIELDS, PODDONS, NOM_ETRAN, 
 TARIF_AREN, KOL_NET, BAG1_VES, SHLD_VES, PODD_VES, 
 N_PER_OHR, D_PER_OHR, PROTO_NUM, PROTO_DATE, NO_AKCIZ, 
 DEFI_MASS, NAKL_NUM, FIO_DOVER, DATE_DOVER, CTLV, 
 VOLUME, VOLUME15, PL15)
AS 
SELECT /*+ RULE */ 
  KVIT.ID, 
  KLS_DOG.PREDPR_ID as KOD_PLAT, 
  MONTH.POLUCH_ID as KOD_POLUCH, 
  MONTH.POTREB_ID as KOD_POTREB, 
  KLS_STAN.STAN_KOD as KST, 
  KVIT.PROD_ID_NPR as KOD_NPR, 
  KLS_DOG.SHORT_NUMBER as N_DOG, 
  KLS_DOG.DOG_DATE as DATE_DOG, 
  USL_DOG.CAT_CEN_ID as kateg_cen, 
  0 as kol_cist, 
  MONTH.INPUT_DATE as DATE_RAZN, 
  KVIT.FLG_DOP_CIST as DOP_CIST, 
  (CASE 
     WHEN KLS_VID_OTGR.LOAD_TYPE_ID=2 THEN 0 
	 ELSE ora_char_to_num(KVIT.NUM_CIST) 
   END) NUM_CIST, 
  KVIT.DATE_OTGR, 
  KVIT.VES_BRUTTO as VES, 
  KVIT.TARIF, 
  KVIT.TARIF19, 
  KVIT.TARIF_GUARD as DOP_TARIF, 
  KVIT.NUM_KVIT, 
  KVIT.DATE_KVIT, 
  KVIT.BILL_ID as N_PLAT, 
  BILLS.DATE_BUXG as DATA_BUXG, 
  (CASE 
     WHEN BILLS.PROD_ID_NPR='10080' THEN KVIT.NUM_AKT 
	 ELSE 0 
   END) as REESTR, 
  KVIT.VAGONTYPE_ID as rodv, 
  KLS_VID_OTGR.LOAD_TYPE_ID as tip_otgr, 
  0 as error, 
  KVIT.FLG_VAG_KLIENT as vag_klient, 
  DECODE(MONTH.IS_EXP,1,3,1) as prizn_mps, 
  NVL(KVIT.NUM_MILITARY,' ') as transp, 
  10 as posred, 
  KVIT.KALIBR_ID as tip, 
  KVIT.VZLIV, 
  KVIT.MESTO_ID as MESTO, 
  KVIT.VAGOWNER_ID as tipv, 
  0 as usl_ppzt, 
  KVIT.DATE_CENA as DATE_CEN, 
  KVIT.CENA, 
  KVIT.CENA_OTP, 
  MONTH.NAZN_OTG_ID as kod_otgr, 
  13 as var_post, 
  MONTH.NOM_ZD, 
  NVL(KVIT.GTD,' ') as GTD, 
  NVL(exped.KOD_MOSCOW,0) as exped, 
  0 as prv, 
  ' ' as nser, 
  KVIT.DATE_VOZ, 
  NVL(KVIT.KVIT_VOZ,' ') as KVIT_VOZ, 
  KVIT.SUM_VOZ, 
  0 as p_o, 
  KVIT.AXES as osc, 
  0 as kod_opb, 
  TRUNC(KVIT.DATE_OFORML) as date_b, 
  TO_CHAR(KVIT.DATE_OFORML,'hh24:mi:ss') as time_b, 
  0 as kod_ope, 
  TRUNC(KVIT.DATE_EDIT) as date_e, 
  TO_CHAR(KVIT.DATE_EDIT,'hh24:mi:ss') as time_e, 
  0 as KOD_NAPR, 
  0 as OLD_PLAT, 
  0 as ZPU, 
  0 as vozvrat, 
  ' ' as mosc_out, 
  TO_DATE(NULL) as date_remov, 
  decode(month.is_exp,1,4,3) as nfp_owner, 
  0 as ves_priobr, 
  0 as pokup_days, 
  KVIT.DATE_OTV, 
  TO_DATE(NULL) as date_prib, 
  0 as kst_o, 
  0 as auto_usl, 
  0 as pln_change, 
  ora_char_to_num(kls_pasp.PASP_NUM) as pasp, 
  MONTH.TEX_PD_ID as plat_tarif, 
  1 as naliv, 
  KVIT.VES_BRUTTO, 
  KVIT.SVED_NUM as NP, 
  0 as id_np, 
  KVIT.DATE_OTGR as date_np, 
  0 as id_np_c, 
  MONTH.GROTP_ID as kod_grotp, 
  NVL(KVIT.PERECH_TEXPD_NUM,' ') as num_perech, 
  KVIT.PERECH_TEXPD_DATE as dat_perech, 
  KVIT.TARIF_ORIG, 
  TRUNC(KVIT.DATE_OFORML) as np_data_o, 
  TO_CHAR(KVIT.DATE_OFORML,'hh24:mi:ss') as np_timep, 
  kvit.date_otgr as date_ree, 
  ' ' as path, 
  0 as write, 
  0 as kst_voz, 
  0 as ras_v, 
  ' ' as kv_voz, 
  ' ' as n_stan, 
  0 as pt, 
  0 as cnt_cist, 
  ' ' as n_voz_sch, 
  TO_DATE(NULL) as d_voz_sch, 
  0 as prosr_dn, 
  TO_DATE(NULL) as d_nal_voz, 
  NVL(KVIT.PLOMBA1,' ') as PLOMBA1, 
  NVL(KVIT.PLOMBA2,' ') as PLOMBA2, 
  NVL(KVIT.ROSINSPL1,' ') as ROSINPL1, 
  NVL(KVIT.ROSINSPL2,' ') as ROSINPL2, 
  NVL(KVIT.NUM_NAR,' ') as N_MAR, 
  ora_char_to_num(kls_pasp.REZ_NUM) as n_rez, 
  kvit.PL, 
  NVL(kvit.temper,0) as temper, 
  NVL(kvit.FAKT_PL,0) as xpl, 
  NVL(kvit.NUM_DOVER,' ') as DOVEREN, 
  NVL(kvit.NUM_NAR,' ') as NARIAD, 
  NVL(kvit.SHABEXP_ID,0) as rexp, 
  1 as kod_perer, 
  NVL(kvit.kol_ed,0) as kol_ed, 
  NVL(kvit.VES_ED,0) as ves_ed, 
  NVL(kvit.VES_CIST,0) as tara_all, 
  nvl(kvit.SVED_ID,' ') as sved_id, 
  nvl(kvit.pasp_id,' ') as kodpasp, 
  (CASE 
     WHEN KLS_VID_OTGR.LOAD_TYPE_ID=2 THEN kvit.num_cist 
	 ELSE ' ' 
   END) DRIVER, 
  kvit.VETKA_OTP_ID as gd_track, 
  TO_DATE(NULL) as date_prih, 
  NVL(kvit.UPAK_ID,0) as UPAK_ID, 
  0 as is_doc_r3, 
  nvl(kvit.SUM_PROD,0) as d_41, 
  nvl(kvit.SUM_AKCIZ,0) as sum_akciz, 
  nvl(kvit.SUM_PROD_NDS,0) as d_191, 
  nvl(kvit.TARIF_NDS,0) as d_194, 
  nvl(kvit.SUM_VOZN11,0) as sum_naliv, 
  nvl(kvit.SUM_VOZN11_NDS,0) as ndc_nal20, 
  nvl(kvit.SUM_VOZN12,0) as d_442, 
  nvl(kvit.SUM_VOZN12_NDS,0) as ndc_tr20, 
  nvl(kvit.NACENKA,0) as nacenka, 
  nvl(kvit.SUM_STRAH,0) as SUM_NACEN, 
  nvl(kvit.CENA_VOZN,0) as cena_vozn, 
  nvl(kvit.UPAK_VES,0) as bag_ves, 
  ' ' as tnved, 
  nvl(KVIT.TARIF_GUARD_NDS,0) as NDC_DOPTAR, 
  nvl(KVIT.TARIF_ALT,0) as tarif_alt, 
  ora_char_to_num(kvit.CAPACITY) as wes, 
  NVL(kvit.UPAK_ID,0) as bag_id, 
  kvit.SHIELDS, 
  kvit.PODDONS, 
  NVL(GU12_A.NOM_Z,' ') as nom_etran, 
  0 as tarif_aren, 
  kvit.KOL_NET, 
  kvit.UPAK_VES_ED as bag1_ves, 
  kvit.SHIELD_VES as SHLD_VES, 
  kvit.PODDON_VES as PODD_VES, 
  NVL(kvit.PERECH_GUARD_NUM,' ') as n_per_ohr, 
  kvit.PERECH_GUARD_DATE as d_per_ohr, 
  NVL(kvit.proto_num,' ') as proto_num, 
  kvit.proto_date, 
  NVL(kvit.no_akciz,0) as no_akciz, 
  kvit.defi_mass_id as defi_mass, 
  0 as nakl_num, 
  NVL(kvit.FIO_DRIVER,' ') as FIO_DOVER, 
  kvit.DATE_DOVER, 
  NVL(kvit.CTLV,0) as ctlv, 
  NVL(kvit.VOLUME,0) as volume, 
  NVL(kvit.volume15,0) as volume15, 
  NVL(kvit.pl15,0) as pl15 
FROM KVIT,MONTH,BILLS,KLS_DOG,KLS_STAN,USL_DOG,KLS_VID_OTGR,GU12_A,KLS_PASP, 
     (select * from predpr_role where kls_role_id=3) exped 
WHERE KVIT.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy') 
  AND KVIT.BILL_ID=BILLS.NOM_DOK(+) 
  AND KVIT.NOM_ZD=MONTH.NOM_ZD 
  AND MONTH.DOG_ID=KLS_DOG.ID 
  AND MONTH.STAN_ID=KLS_STAN.ID 
  AND MONTH.DOG_ID=USL_DOG.DOG_ID 
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER 
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR 
  AND MONTH.GU12_A_ID=GU12_A.ID(+) 
  AND KVIT.PASP_ID=KLS_PASP.ID(+) 
  AND kvit.exped_id=exped.predpr_id(+);


--
-- V_KVIT_FOR_PARUS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_FOR_PARUS
(BASE_NUMB, NPODOG_ID, KOL_DN, CAT_CEN_ID, MODIF, 
 MOD_MODIF, PROD_ID_NPR, PROC_INSURE, USL_SUM, FLG_OPERDATA, 
 VAGOWNER_ID, FLG_VAG_KLIENT, TARIF_MPS, TARIF_OWN, TARIF_GUARD, 
 DATE_OTGR, VES, TARIF1TONN, TARIF, VOZNAGR, 
 ID)
AS 
SELECT
  DP.BASE_NUMB, -- Договор из Паруса
  MONTH.NPODOG_ID, -- Договор из Финансов
  KLS_USL_OPL.KOL_DN, -- Отсрочка по договору
  USL_DOG.CAT_CEN_ID, -- Категория цены из финансов
  PP.MODIF, PP.MOD_MODIF, -- Продукт из Паруса
  KVIT.PROD_ID_NPR, -- Продукт из Финансов
  USL_DOG.PROC_INSURE, -- % страховки
  USL_DOG.USL_SUM, -- вознаграждение
  KVIT.FLG_OPERDATA, -- Признак оперативки
  KVIT.VAGOWNER_ID, -- собственник вагона
  KVIT.FLG_VAG_KLIENT, -- признак вагона клиента
  KVIT.tarif AS TARIF_MPS, -- Тариф за вагоны МПС
  KVIT.TARIF19 AS TARIF_OWN, -- Тариф за собственные вагоны
  KVIT.TARIF_GUARD, -- Плата за охрану
  KVIT.DATE_OTGR, -- Дата отгрузки
  KVIT.VES_BRUTTO AS VES, --Вес в тоннах
  MONTH.TARIF1TONN, -- Тариф за 1 тонну
  ROUND(DECODE(KVIT.FLG_OPERDATA,1,NVL(MONTH.TARIF1TONN,0)*KVIT.VES_BRUTTO,KVIT.TARIF),2)+KVIT.TARIF_GUARD AS Tarif, -- Ж/д тариф
  ROUND(DECODE(KVIT.VAGOWNER_ID,3,USL_DOG.USL_SUM*KVIT.VES_BRUTTO,
           DECODE(KVIT.FLG_VAG_KLIENT,1,USL_DOG.USL_SUM*KVIT.VES_BRUTTO,DECODE(KVIT.TARIF,0,USL_DOG.USL_SUM*KVIT.VES_BRUTTO,KVIT.TARIF19-KVIT.TARIF))),2) AS VOZNAGR, -- Вознаграждение
  KVIT.ID
FROM KVIT,MONTH,USL_DOG,KLS_DOG NPO_DOG,KLS_USL_OPL,
     (SELECT MAX(BASE_NUMB) AS BASE_NUMB, DOG_ID FROM KLS_DOG_PARUS WHERE IS_ACTUAL=1 GROUP BY DOG_ID) DP,
	 (SELECT A.MODIF, A.MOD_MODIF, A.PROD AS PROD_ID_NPR
	   FROM KLS_PROD_NOMENKLATOR A,
	        (SELECT MAX(PARUS_RN) AS PARUS_RN,PROD FROM KLS_PROD_NOMENKLATOR WHERE IS_ACTUAL=1 GROUP BY PROD) B
	  WHERE A.PARUS_RN=B.PARUS_RN
	 ) PP
WHERE KVIT.nom_zd=MONTH.nom_zd
  AND KVIT.DATE_OTGR>TO_DATE('31.12.2002','dd.mm.yyyy')
  AND KVIT.PROD_ID_NPR=PP.PROD_ID_NPR (+)
  AND KVIT.BILL_ID=0
  AND MONTH.NAZN_OTG_ID<>5
  AND MONTH.DATE_PLAN>TO_DATE('31.12.2002','dd.mm.yyyy')
  AND MONTH.DOG_ID=USL_DOG.DOG_ID
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
  AND MONTH.NPODOG_ID=DP.DOG_ID
  AND MONTH.NPODOG_ID=NPO_DOG.ID
  AND NPO_DOG.USL_OPL_ID=KLS_USL_OPL.ID
  AND KVIT.VES_BRUTTO<>0;


--
-- V_KVIT_FOR_PARUS_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_FOR_PARUS_2
(NOMEN_CODE, MODIF_CODE, PROD_ID_NPR, DATE_KVIT, NUM_KVIT, 
 VES)
AS 
SELECT /*+ RULE */
  PP.MODIF as NOMEN_CODE, -- Продукт из Паруса
  PP.MOD_MODIF as MODIF_CODE, -- Продукт из Паруса
  KVIT.PROD_ID_NPR,
  KVIT.DATE_KVIT, -- Дата отгрузки
  KVIT.NUM_KVIT,
  KVIT.VES_BRUTTO*1000 as VES
FROM KVIT,MONTH,
	 (SELECT A.MODIF, A.MOD_MODIF, A.PROD AS PROD_ID_NPR
	   FROM KLS_PROD_NOMENKLATOR A,
	        (SELECT MAX(PARUS_RN) AS PARUS_RN,PROD FROM KLS_PROD_NOMENKLATOR WHERE IS_ACTUAL=1 GROUP BY PROD) B
	  WHERE A.PARUS_RN=B.PARUS_RN
	 ) PP
WHERE KVIT.nom_zd=MONTH.nom_zd
  AND KVIT.PROD_ID_NPR=PP.PROD_ID_NPR (+)
  AND KVIT.DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy')
  AND KVIT.VES_BRUTTO>40;


--
-- V_KVIT_FOR_PARUS_3  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_FOR_PARUS_3
(NOMEN_CODE, MODIF_CODE, PROD_ID_NPR, DATE_KVIT, NUM_KVIT, 
 VES)
AS 
SELECT /*+ RULE */
  PP.MODIF as NOMEN_CODE, -- Продукт из Паруса
  PP.MOD_MODIF as MODIF_CODE, -- Продукт из Паруса
  KVIT.PROD_ID_NPR,
  KVIT.DATE_KVIT, -- Дата отгрузки
  KVIT.NUM_KVIT,
  SUM(KVIT.VES_BRUTTO*1000) as VES
FROM KVIT,MONTH,
	 (SELECT A.MODIF, A.MOD_MODIF, A.PROD AS PROD_ID_NPR
	   FROM KLS_PROD_NOMENKLATOR A,
	        (SELECT MAX(PARUS_RN) AS PARUS_RN,PROD FROM KLS_PROD_NOMENKLATOR WHERE IS_ACTUAL=1 GROUP BY PROD) B
	  WHERE A.PARUS_RN=B.PARUS_RN
	 ) PP
WHERE KVIT.nom_zd=MONTH.nom_zd
  AND KVIT.PROD_ID_NPR=PP.PROD_ID_NPR (+)
  AND KVIT.DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy')
  AND KVIT.VES_BRUTTO>40
GROUP BY
  PP.MODIF,
  PP.MOD_MODIF,
  KVIT.PROD_ID_NPR,
  KVIT.DATE_KVIT,
  KVIT.NUM_KVIT;


--
-- V_KVIT_GROUP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_GROUP
(PROD_ID_NPR, BILL_ID)
AS 
select kvit.prod_id_npr,kvit.BILL_ID from kvit
where kvit.date_kvit>= to_date('01.04.2002','dd.mm.yyyy')
group by kvit.prod_id_npr,kvit.BILL_ID;


--
-- V_KVIT_SHIP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_SHIP
(PROD_ID_NPR, DATE_OTGR, QUAN)
AS 
SELECT  
      PROD_ID_NPR
      ,DATE_OTGR
      ,sum(VES) as quan 
      
  FROM KVIT
where date_otgr>'01-jun-2018'
and VAGONTYPE_ID = 0
 AND NUM_CIST = 'ТП'
  group by PROD_ID_NPR,DATE_OTGR;


--
-- V_KVIT_604  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KVIT_604
(ID, FLG_OPERDATA, MESTO_ID, NOM_ZD, PROD_ID_NPR, 
 TEX_PD_ID, NUM_CIST, DATE_OTGR, VES, VES_BRUTTO, 
 VES_ED, KOL_ED, TARIF, TARIF19, TARIF_ORIG, 
 NUM_KVIT, DATE_KVIT, NUM_MILITARY, FLG_DOP_CIST, FLG_VAG_KLIENT, 
 VAGOWNER_ID, VAGONTYPE_ID, KALIBR_ID, VES_CIST, DATE_VOZ, 
 KVIT_VOZ, SUM_VOZ, DATE_OTV, PLOMBA1, PLOMBA2, 
 ROSINSPL1, ROSINSPL2, VZLIV, TEMPER, FAKT_PL, 
 FORMNAKL_ID, SHABEXP_ID, GTD, EXPED_ID, VETKA_OTP_ID, 
 NUM_EXP_MAR, BILL_ID, SVED_ID, DATE_OFORML, SVED_NUM, 
 PASP_ID, NUM_NAR, NUM_DOVER, PERER_ID, DATE_EDIT, 
 JKCOMMIT, GROTP_ID, PERECH_TEXPD_DATE, PERECH_TEXPD_NUM, SUM_PROD, 
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
 SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, CENA, CENA_OTP, 
 DATE_CENA, CENA_VOZN, CAPACITY, TARIF_GUARD, TARIF_GUARD_NDS, 
 TARIF_ALT, NACENKA, PODDONS, SHIELDS, UPAK_ID, 
 UPAK_VES, KOL_NET, UPAK_VES_ED, SHIELD_VES, PODDON_VES, 
 PL, NUM_AKT, BILL_POS_ID, PROTO_NUM, PROTO_DATE, 
 NO_AKCIZ, PERECH_GUARD_DATE, PERECH_GUARD_NUM, TTN_ID, DATE_DOVER, 
 FIO_DRIVER, IS_LOADED, AXES, CTLV, DEFI_MASS_ID, 
 VOLUME, VOLUME15, ZPU_TYPE1, ZPU_TYPE2, PL15, 
 DATE_IN, CONTRACT, TTN)
AS 
select kvit."ID",kvit."FLG_OPERDATA",kvit."MESTO_ID",kvit."NOM_ZD",kvit."PROD_ID_NPR",kvit."TEX_PD_ID",kvit."NUM_CIST",kvit."DATE_OTGR",kvit."VES",kvit."VES_BRUTTO",kvit."VES_ED",kvit."KOL_ED",kvit."TARIF",kvit."TARIF19",kvit."TARIF_ORIG",kvit."NUM_KVIT",kvit."DATE_KVIT",kvit."NUM_MILITARY",kvit."FLG_DOP_CIST",kvit."FLG_VAG_KLIENT",kvit."VAGOWNER_ID",kvit."VAGONTYPE_ID",kvit."KALIBR_ID",kvit."VES_CIST",kvit."DATE_VOZ",kvit."KVIT_VOZ",kvit."SUM_VOZ",kvit."DATE_OTV",kvit."PLOMBA1",kvit."PLOMBA2",kvit."ROSINSPL1",kvit."ROSINSPL2",kvit."VZLIV",kvit."TEMPER",kvit."FAKT_PL",kvit."FORMNAKL_ID",kvit."SHABEXP_ID",kvit."GTD",kvit."EXPED_ID",kvit."VETKA_OTP_ID",kvit."NUM_EXP_MAR",kvit."BILL_ID",kvit."SVED_ID",kvit."DATE_OFORML",kvit."SVED_NUM",kvit."PASP_ID",kvit."NUM_NAR",kvit."NUM_DOVER",kvit."PERER_ID",kvit."DATE_EDIT",kvit."JKCOMMIT",kvit."GROTP_ID",kvit."PERECH_TEXPD_DATE",kvit."PERECH_TEXPD_NUM",kvit."SUM_PROD",kvit."SUM_AKCIZ",kvit."SUM_PROD_NDS",kvit."TARIF_NDS",kvit."SUM_VOZN11",kvit."SUM_VOZN11_NDS",kvit."SUM_VOZN12",kvit."SUM_VOZN12_NDS",kvit."SUM_STRAH",kvit."CENA",kvit."CENA_OTP",kvit."DATE_CENA",kvit."CENA_VOZN",kvit."CAPACITY",kvit."TARIF_GUARD",kvit."TARIF_GUARD_NDS",kvit."TARIF_ALT",kvit."NACENKA",kvit."PODDONS",kvit."SHIELDS",kvit."UPAK_ID",kvit."UPAK_VES",kvit."KOL_NET",kvit."UPAK_VES_ED",kvit."SHIELD_VES",kvit."PODDON_VES",kvit."PL",kvit."NUM_AKT",kvit."BILL_POS_ID",kvit."PROTO_NUM",kvit."PROTO_DATE",kvit."NO_AKCIZ",kvit."PERECH_GUARD_DATE",kvit."PERECH_GUARD_NUM",kvit."TTN_ID",kvit."DATE_DOVER",kvit."FIO_DRIVER",kvit."IS_LOADED",kvit."AXES",kvit."CTLV",kvit."DEFI_MASS_ID",kvit."VOLUME",kvit."VOLUME15",kvit."ZPU_TYPE1",kvit."ZPU_TYPE2",kvit."PL15",kvit."DATE_IN", 
trim(GET_CONTRACT_PARUS_VZ(kvit.num_kvit,'GD_CONT',kvit.date_kvit)) as contract,
--'11' as CONTRACT,
trim(GET_CONTRACT_PARUS_VZ(kvit.num_kvit,'GD_ACC',kvit.date_kvit)) as ttn
--'11' as TTN
 

from  kvit;


--
-- V_LUKREP_KVIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_KVIT
(BILL_ID, PROD_ID_NPR, VAGOWN_TYP_ID, TARIF_MPS, TARIF_KVIT, 
 CNT, ID, SVED_NUM, NUM_KVIT, NUM_DOVER, 
 NUM_CIST, VES, NUM_AKT)
AS 
SELECT /*+ INDEX(KLS_VAGOWNER VAGOWNER_PK)*/ a.BILL_ID,a.PROD_ID_NPR,MIN(KLS_VAGOWNER.VAGOWN_TYP_ID) as VAGOWN_TYP_ID,
          SUM(a.TARIF_ALT) as TARIF_MPS, SUM(a.TARIF) as TARIF_KVIT,COUNT(*) AS CNT,MAX(a.ID) AS ID,
          MAX(a.SVED_NUM) AS SVED_NUM, MAX(a.NUM_KVIT) AS NUM_KVIT, MAX(a.NUM_DOVER) AS NUM_DOVER,
		  MAX(a.NUM_CIST) AS NUM_CIST,SUM(a.VES_BRUTTO) AS VES,MAX(a.NUM_AKT) AS NUM_AKT
     FROM (
	   SELECT /*+ ALL_ROWS INDEX(KVIT KVIT_DATE_KVIT_BILLS_I) */ * FROM KVIT
  	    WHERE DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy')
       UNION ALL
       SELECT /*+ ALL_ROWS INDEX(DOP_KVIT DOP_KVIT_DATE_KVIT_BILLS_I) */ * FROM DOP_KVIT
  	    WHERE DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy')
	 ) a ,KLS_VAGOWNER
	WHERE a.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
	GROUP BY a.BILL_ID,a.PROD_ID_NPR;


--
-- V_MONTH_KVIT_FOR_MOSCOW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MONTH_KVIT_FOR_MOSCOW
(IS_EXP, DATE_KVIT, LONG_NAME_NPR, PROD_ID_NPR, KOD_10, 
 MATNR, REGION_NAME, TYPE_OTGR_NAME, STAN_KOD, STAN_NAME, 
 DOG_NUMBER, DOG_NUMBER2, STAN_PER, PLAT_NAME, POLU_NAME, 
 EXPED_ID, EXPED_NAME, VAGOWNER_NAME, TONN_DECLARED, VES, 
 NUM_CIST, NUM_KVIT, CENA_OTP, DOG_DATE, KVIT_ID, 
 NOM_ZD, DATE_PLAN, DATE_OTGR, PLANSTRU_ID, STAN_ID, 
 LOAD_TYPE_ID, DOG_ID, PRIM)
AS 
SELECT /*+ RULE */
  mon_kv.IS_EXP,
  mon_kv.DATE_KVIT,
  kls_prod.LONG_NAME_NPR,
  kls_prod.ID_NPR as PROD_ID_NPR,
  kls_prod.KOD_10,
  ksss_prod.MATNR,
  kls_region.REGION_NAME,
  kls_load_type.TYPE_OTGR_NAME,
  kls_stan.STAN_KOD,
  kls_stan.STAN_NAME,
  kls_dog.DOG_NUMBER,
  kls_dog2.DOG_NUMBER as DOG_NUMBER2,
  Trim(Trim(kls_shabexp.STAN1)||' '||Trim(kls_shabexp.STAN2)||' '||Trim(kls_shabexp.STAN3)||' '||Trim(kls_shabexp.STAN4)) as STAN_PER,
  plat.PREDPR_NAME as PLAT_NAME,
  polu.PREDPR_NAME as POLU_NAME,
  mon_kv.EXPED_ID,
  exped.PREDPR_NAME as EXPED_NAME,
  kls_vagowner.VAGOWNER_NAME,
  NVL(mon_kv.TONN_DECLARED,0) as TONN_DECLARED,
  NVL(mon_kv.ves,0) as VES,
  mon_kv.NUM_CIST,
  mon_kv.NUM_KVIT,
  NVL(mon_kv.CENA_OTP,0) as CENA_OTP,
  kls_dog.DOG_DATE,
  mon_kv.KVIT_ID,
  mon_kv.NOM_ZD,
  mon_kv.DATE_PLAN,
  mon_kv.DATE_OTGR,
  mon_kv.PLANSTRU_ID,
  mon_kv.STAN_ID,
  mon_kv.LOAD_TYPE_ID,
  mon_kv.DOG_ID,
  mon_kv.PRIM
FROM
(
SELECT /*+ RULE */
  M.NOM_ZD,
  M.IS_EXP,
  M.DOG_ID,
  M.NPODOG_ID,
  DECODE(KLS_PLANSTRU.NAME,PARENT_STRU.NAME,KLS_PLANSTRU.PARENT_ID,M.PLANSTRU_ID) as PLANSTRU_ID, /* Для корректной привязки к причинам */
  M.DATE_PLAN,
  M.LOAD_ABBR,
  M.LOAD_TYPE_ID,
  M.STAN_ID,
  M.POLUCH_ID,
  M.PRIM,
  M.TONN_DECLARED,
  DECODE(K.ID,NULL,M.DATE_PLAN,DECODE(K.FLG_OPERDATA,1,K.DATE_OTGR,K.DATE_KVIT)) as DATE_KVIT,
  DECODE(K.ID,NULL,M.PROD_ID_NPR,K.PROD_ID_NPR) as PROD_ID_NPR,
  DECODE(M.is_exp,1,
    DECODE(K.ID,NULL,M.SHABEXP_ID,K.SHABEXP_ID),
	NULL) as SHABEXP_ID,
  DECODE(K.ID,NULL,M.EXPED_ID,K.EXPED_ID) as EXPED_ID,
  DECODE(K.ID,NULL,M.CENA_OTP,K.CENA_OTP) as CENA_OTP,
  k.ID as KVIT_ID,
  DECODE(K.ID,NULL,M.DATE_PLAN,k.DATE_OTGR) as DATE_OTGR,
  K.VAGOWNER_ID,
  k.VES,
  k.NUM_CIST,
  k.NUM_KVIT
FROM
  (
  /* Заявки */
    select /*+ RULE */
	    month.nom_zd,
        month.IS_EXP,
        month.DATE_PLAN,
        month.PROD_ID_NPR,
        month.STAN_ID,
        month.LOAD_ABBR,
        kls_vid_otgr.LOAD_TYPE_ID,
        month.DOG_ID,
        month.NPODOG_ID,
		month.POLUCH_ID,
        shabexp.id as SHABEXP_ID,
        DECODE(mon_exped.EXPED_ID,NULL,month.EXPED_ID,mon_exped.EXPED_ID) as EXPED_ID,
        month.TONN_DECLARED,
        month.CENA_OTP,
        DECODE(month.PRIM,NULL,month.gr4,'',month.gr4,month.PRIM) as prim,
		month.PLANSTRU_ID
      from
        month, KLS_VID_OTGR,
	    (select DOG_ID,PROD_ID_NPR,STAN_ID,MAX(ID) as ID FROM kls_shabexp GROUP BY DOG_ID,PROD_ID_NPR,STAN_ID) shabexp,
   	    (SELECT nom_zd,MAX(exped_id) as exped_id FROM kvit GROUP BY nom_zd) mon_exped
      where month.date_plan>=to_date('01.06.2004','dd.mm.yyyy') and
	    month.LOAD_ABBR=kls_vid_otgr.LOAD_ABBR and
        month.DOG_ID=shabexp.DOG_ID(+) and
        month.PROD_ID_NPR=shabexp.PROD_ID_NPR(+) and
        month.STAN_ID=shabexp.STAN_ID(+) and
 	    month.NOM_ZD=mon_exped.nom_zd(+)
  ) M,
  (
  /* Отгрузка */
    select /*+ RULE */
      kvit.ID,
	  kvit.FLG_OPERDATA,
	  kvit.nom_zd,
	  kvit.DATE_KVIT,
	  kvit.DATE_OTGR,
	  kvit.PROD_ID_NPR,
	  kvit.SHABEXP_ID,
	  kvit.EXPED_ID,
	  DECODE(kvit.VAGOWNER_ID,0,NULL,kvit.VAGOWNER_ID) as VAGOWNER_ID,
      kvit.ves,
      kvit.NUM_CIST,
      DECODE(kvit.NUM_KVIT,99999,NULL,0,NULL,kvit.NUM_KVIT) as NUM_KVIT,
      kvit.CENA_OTP,
	  kls_vid_otgr.LOAD_TYPE_ID,
	  month.date_plan,
	  month.PLANSTRU_ID,
	  month.DOG_ID,
	  month.STAN_ID
    from
 	  kvit,month,KLS_VID_OTGR
	where
	  kvit.nom_zd=month.nom_zd and
      month.LOAD_ABBR=kls_vid_otgr.LOAD_ABBR
  	  and month.date_plan>=to_date('01.06.2004','dd.mm.yyyy')
  ) K,
  KLS_PLANSTRU, KLS_PLANSTRU PARENT_STRU
WHERE
  M.nom_zd=K.NOM_ZD(+) and
  M.PLANSTRU_ID=KLS_PLANSTRU.ID and
  KLS_PLANSTRU.PARENT_ID=PARENT_STRU.ID(+)
) mon_kv,
    kls_prod,
	ksss_prod,kls_stan,
	kls_region,
	kls_load_type,kls_dog,kls_dog kls_dog2,
	kls_predpr plat,kls_predpr polu,kls_predpr exped,
	kls_vagowner,kls_shabexp
WHERE
  mon_kv.PROD_ID_NPR=kls_prod.ID_NPR (+) and
  kls_prod.ID_NPR=ksss_prod.FOX_ID(+) and
  mon_kv.STAN_ID=kls_stan.ID and
  kls_stan.REGION_ID=kls_region.ID and
  mon_kv.LOAD_TYPE_ID=kls_load_type.ID and
  mon_kv.DOG_ID=kls_dog.ID and
  mon_kv.NPODOG_ID=kls_dog2.ID(+) and
  kls_dog.PREDPR_ID=plat.id and
  mon_kv.POLUCH_ID=polu.id and
  mon_kv.EXPED_ID=exped.id(+) and
  mon_kv.VAGOWNER_ID=kls_vagowner.ID(+) and
  mon_kv.shabexp_id=kls_shabexp.ID(+);


--
-- V_MREE_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_MONTH
(PROD_PLAN_ID, ABBR_NPR, DOG_ID, FOR_ID, LOAD_TYPE_ID, 
 TYPE_OTGR_NAME, NOM_ZD, OTHER, INPUT_DATE, UPDATE_DATE, 
 TONN_DECLARED, TONN_LOADED, CIST_DECLARED, CIST_LOADED, PRIM, 
 POLUCH_NAME, STAN_NAME, PREDPR_NPO, ZAKAZ_ID, ZAKAZ_NUM, 
 ZAKAZ_DATE, ZAKAZ_VOL, ETRAN_NUM, ETRAN_DATE, KOD_ISU)
AS 
SELECT /*+ RULE */ 
  kls_prod.prod_plan_id, 
  kls_prod.ABBR_NPR, 
  month.dog_id, 
  kls_planstru.FOR_ID, 
  kls_load_type.ID AS load_type_id, 
  kls_load_type.TYPE_OTGR_NAME, 
  month.nom_zd, 
  DECODE(kls_planstru.KOD_SGR,91,DECODE(kls_planstru.KOD_SPG,10,1,0),0) AS other, 
  month.INPUT_DATE, 
  month.UPDATE_DATE, 
  NVL(month.tonn_RAZNAR,month.TONN_DECLARED) as TONN_DECLARED, 
  NVL((SELECT SUM(ves_brutto) FROM kvit where nom_zd=month.nom_zd),0) AS TONN_LOADED, 
  NVL(month.cist_raznar,NVL(DECODE(kls_load_type.ID,1,month.TONN_DECLARED,0)/kls_prod.normotgr,0)) AS cist_declared,
  NVL((SELECT SUM(DECODE(kls_load_type.ID,1,1,0)) FROM kvit where nom_zd=month.nom_zd),0) AS cist_LOADED, 
  month.prim, 
  kls_predpr.PREDPR_NAME AS poluch_name, 
  kls_stan.stan_name || ' ' || kls_gdor.SHORT_NAME AS stan_name, 
  plat.predpr_name AS predpr_npo, 
  month_all.ID AS zakaz_id, 
  month_all.INPUT_NUMBER AS zakaz_num, 
  month_all.INPUT_DATE AS zakaz_date, 
  month_all.REQUEST as zakaz_vol, 
  gu12_a.NOM_Z as etran_num, 
  gu12_a.REG_DATE as etran_date,
  zh.kod_isu 
  FROM month,kls_prod,kls_planstru,kls_stan,kls_predpr,kls_gdor,kls_load_type, 
    KLS_VID_OTGR,V_TEMP_MREESTR_PARAMS,kls_dog,kls_predpr plat,month_all,gu12_a,zakaz_hist zh 
  WHERE 
    month.DATE_PLAN=V_TEMP_MREESTR_PARAMS.DATE_PLAN AND 
	month.ZAKAZ_ID=month_all.ID(+) and 
	month.GU12_A_ID=gu12_a.ID(+) and 
	kls_prod.ID_NPR=month.PROD_ID_NPR AND 
	month.PLANSTRU_ID=kls_planstru.ID AND 
	month.STAN_ID=kls_stan.ID AND 
	month.POLUCH_ID=kls_predpr.ID AND 
	kls_stan.gdor_id=kls_gdor.ID AND 
	month.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR AND 
	KLS_VID_OTGR.LOAD_TYPE_ID=kls_load_type.ID AND 
	month.npodog_id=kls_dog.id(+) AND 
	kls_dog.predpr_id=plat.id(+) AND
    month.ZAKAZ_HIST_ID=zh.id(+);


--
-- V_MREE_REESTR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_REESTR
(IS_ZAKAZ, ORDER_NPR, PROD_PLAN_ID, NAME_NPR, DOG_ID, 
 DOG_NUMBER, GROUPDOG_ID, PLAT_ID, PLAT_NAME, FOR_ID, 
 FOR_NAME, LOAD_TYPE_ID, TYPE_OTGR_NAME, OTHER, NOM_ZD, 
 INPUT_DATE, ABBR_NPR, TONN_DECLARED, TONN_LOADED, CIST_DECLARED, 
 CIST_LOADED, PRIM, POLUCH_NAME, STAN_NAME, PREDPR_NPO, 
 ZAKAZ_NUM, ZAKAZ_DATE, ZAKAZ_VOL, ZAKAZ_ID, ETRAN_NUM, 
 ETRAN_DATE, PLANMOSCOWDOG, PLANMOSCOWDOGWITHFOR, PLANMOSCOWPROD, PLANMOSCOWPRODOPT, 
 PLANMOSCOWPRODOPTCLEAN, PLANMOSCOWPRODOPTKOMI, PLANMOSCOWPRODOPTARH, PLANOURDOG, PLANOURDOGWITHFOR, 
 PLANOURPROD, PLANOURPRODOPT, PLANOURPRODOPTCLEAN, PLANOURPRODOPTKOMI, PLANOURPRODOPTARH, 
 GU12_LOAD_ABBR, KOD_ISU)
AS 
SELECT "IS_ZAKAZ","ORDER_NPR","PROD_PLAN_ID","NAME_NPR","DOG_ID","DOG_NUMBER","GROUPDOG_ID","PLAT_ID","PLAT_NAME","FOR_ID","FOR_NAME","LOAD_TYPE_ID","TYPE_OTGR_NAME","OTHER","NOM_ZD","INPUT_DATE","ABBR_NPR","TONN_DECLARED","TONN_LOADED","CIST_DECLARED","CIST_LOADED","PRIM","POLUCH_NAME","STAN_NAME","PREDPR_NPO","ZAKAZ_NUM","ZAKAZ_DATE","ZAKAZ_VOL","ZAKAZ_ID","ETRAN_NUM","ETRAN_DATE","PLANMOSCOWDOG","PLANMOSCOWDOGWITHFOR","PLANMOSCOWPROD","PLANMOSCOWPRODOPT","PLANMOSCOWPRODOPTCLEAN","PLANMOSCOWPRODOPTKOMI","PLANMOSCOWPRODOPTARH","PLANOURDOG","PLANOURDOGWITHFOR","PLANOURPROD","PLANOURPRODOPT","PLANOURPRODOPTCLEAN","PLANOURPRODOPTKOMI","PLANOURPRODOPTARH"
,"GU12_LOAD_ABBR",kod_isu 
FROM
(
SELECT
  M.IS_ZAKAZ,
  kls_prod_plan.ORDER_NPR,
  M.PROD_PLAN_ID,
  kls_prod_plan.NAME_NPR,
  M.DOG_ID,
  kls_dog.DOG_NUMBER,
  kls_dog.GROUPDOG_ID,
  kls_predpr.ID AS plat_id,
  kls_predpr.PREDPR_NAME AS plat_name,
  NVL(M.FOR_ID,0) as FOR_ID,
  M.FOR_NAME,
  DECODE(M.LOAD_TYPE_ID,2,0,1) AS LOAD_TYPE_ID,
  M.TYPE_OTGR_NAME,
  NVL(M.other,0) AS other,
  M.NOM_ZD,
  M.INPUT_DATE,
  M.ABBR_NPR,
  M.TONN_DECLARED,
  M.TONN_LOADED,
  M.CIST_DECLARED,
  M.CIST_LOADED,
  M.PRIM,
  M.POLUCH_NAME,
  M.STAN_NAME,
  M.PREDPR_NPO,
  M.ZAKAZ_NUM,
  M.ZAKAZ_DATE,
  M.ZAKAZ_VOL,
  M.ZAKAZ_ID,
  M.ETRAN_NUM,
  M.ETRAN_DATE,
  M.GU12_LOAD_ABBR,
  M.PLANMOSCOWDOG,
  (SELECT SUM(B.PLANMOSCOWDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE
    M.dog_id=B.dog_id AND M.prod_plan_id=B.prod_plan_id AND B.OTHER=NVL(M.other,0)) AS PlanMoscowDogWithFor,
  (SELECT SUM(B.PLANMOSCOWDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE
    M.prod_plan_id=b.prod_plan_id) AS PlanMoscowProd,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10,15) or
   kls_planstru.KOD_SGR=20) and
   (v_mree_planpost.plan_id=2 or v_mree_planpost.plan_id=3)),0) AS PlanMoscowProdOpt,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10) and kls_planstru.kod_rzd<>20 or
   kls_planstru.KOD_SGR=20) and
   (v_mree_planpost.plan_id=2 or v_mree_planpost.plan_id=3)),0) AS PlanMoscowProdOptClean,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=10) and
   (v_mree_planpost.plan_id in (2,3))),0) AS PlanMoscowProdOptKomi,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=20) and
   (v_mree_planpost.plan_id in (2,3))),0) AS PlanMoscowProdOptArh,
  M.PLANOURDOG,
  (SELECT SUM(B.PLANOURDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE
    M.dog_id=b.dog_id AND M.prod_plan_id=b.prod_plan_id AND b.OTHER=NVL(M.other,0)) AS PlanOurDogWithFor,
  (SELECT SUM(B.PLANOURDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE
    M.prod_plan_id=b.prod_plan_id) AS PlanOurProd,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10,15) or
   kls_planstru.KOD_SGR=20) and
   (v_mree_planpost.plan_id=2)),0) AS PlanOurProdOpt,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10) and kls_planstru.kod_rzd<>20 or
   kls_planstru.KOD_SGR=20) and
   (v_mree_planpost.plan_id=2)),0) AS PlanOurProdOptClean,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=10) and
   (v_mree_planpost.plan_id=2)),0) AS PlanOurProdOptKomi,
  NVL((SELECT SUM(v_mree_planpost.PLAN_VES)
 FROM v_mree_planpost,kls_planstru,kls_prod,v_temp_mreestr_params
 WHERE v_mree_planpost.DATE_PLAN=v_temp_mreestr_params.DATE_PLAN AND
   v_mree_planpost.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   v_mree_planpost.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=20) and
   (v_mree_planpost.plan_id=2)),0) AS PlanOurProdOptArh,
 m.kod_isu  
FROM
(
SELECT /*+ RULE */
  0 as IS_ZAKAZ,
  A.PROD_PLAN_ID,
  A.DOG_ID,
  A.FOR_ID,
  A.FOR_NAME,
  v_mree_month.LOAD_TYPE_ID,
  v_mree_month.TYPE_OTGR_NAME,
  NVL(v_mree_month.other,NVL(A.other,0)) AS other,
  v_mree_month.NOM_ZD,
  (SELECT MAX(date_razn) FROM raznar WHERE v_mree_month.NOM_ZD=raznar.nom_zd) AS INPUT_DATE,
  v_mree_month.ABBR_NPR,
  v_mree_month.TONN_DECLARED,
  v_mree_month.TONN_LOADED,
  v_mree_month.CIST_DECLARED,
  v_mree_month.CIST_LOADED,
  v_mree_month.PRIM,
  v_mree_month.POLUCH_NAME,
  v_mree_month.STAN_NAME,
  v_mree_month.PREDPR_NPO,
  v_mree_month.ZAKAZ_NUM,
  v_mree_month.ZAKAZ_DATE,
  v_mree_month.ZAKAZ_VOL,
  v_mree_month.ZAKAZ_ID,
  v_mree_month.ETRAN_NUM,
  v_mree_month.ETRAN_DATE,
  for_reestr.GetLoadAbbr(v_mree_month.NOM_ZD) as GU12_LOAD_ABBR,
  v_mree_month.kod_isu,
  A.PLANMOSCOWDOG,
  A.PLANOURDOG
  FROM V_MREE_PLANBYDOGDETAIL A,v_mree_month
  WHERE --(a.PLANMOSCOWDOG<>0 or a.PLANOURDOG<>0) and
 a.dog_id=v_mree_month.dog_id(+) AND
 a.for_id=v_mree_month.for_id(+) AND
 a.other=v_mree_month.other(+) AND
 a.prod_plan_id=v_mree_month.prod_plan_id(+)
UNION ALL
SELECT
  mon.*,
  NVL(A.PLANMOSCOWDOG,0),
  NVL(A.PLANOURDOG,0)
FROM
(
SELECT /*+ RULE */
  1 as IS_ZAKAZ,
  kls_prod_plan.ID as PROD_PLAN_ID,
  DECODE(month_all.IS_AGENT,2,dog_main.DOG_ID,kls_dog.ID) as DOG_ID,
  NVL(kls_planstru.FOR_ID,0) as FOR_ID,
  kls_planstru.FOR_NAME,
  KLS_VID_OTGR.LOAD_TYPE_ID AS LOAD_TYPE_ID,
  kls_load_type.TYPE_OTGR_NAME,
  NVL(DECODE(kls_planstru.KOD_SGR,91,DECODE(kls_planstru.KOD_SPG,10,1,0),0),0) AS other,
  NULL as NOM_ZD,
  NULL AS INPUT_DATE,
  kls_prod.ABBR_NPR,
  0 as TONN_DECLARED,
  0 as TONN_LOADED,
  0 as CIST_DECLARED,
  0 as CIST_LOADED,
  month_all.PRICH as PRIM,
  poluch.PREDPR_NAME AS poluch_name,
  kls_stan.stan_name || ' ' || kls_gdor.SHORT_NAME AS stan_name,
  DECODE(month_all.IS_AGENT,2,DECODE(kls_predpr.ID,2641,'',kls_predpr.PREDPR_NAME),'') AS predpr_npo,
  month_all.INPUT_NUMBER AS zakaz_num,
  month_all.INPUT_DATE AS zakaz_date,
  NVL(zh.load_ves,month_all.REQUEST) as zakaz_vol,
  month_all.ID AS zakaz_id,
  NULL as ETRAN_NUM,
  NULL as ETRAN_DATE,
  kls_vid_otgr.LOAD_ABBR as GU12_LOAD_ABBR,
  zh.kod_isu
FROM MONTH_ALL,(select zakaz_id,kod_isu,sum(load_ves) as load_ves from zakaz_hist where status_zakaz_id=20 group by zakaz_id,kod_isu) zh,
      kls_prod_plan,kls_dog,kls_predpr,kls_predpr poluch,
     (select a.* from kls_dog_main a,V_TEMP_MREESTR_PARAMS b where b.DATE_PLAN BETWEEN a.from_date and a.to_date) dog_main,
     kls_planstru,kls_vid_otgr,kls_load_type,V_TEMP_MREESTR_PARAMS, kls_prod, kls_gdor, kls_stan
WHERE
  month_all.PARUS_RN IS NULL and -- Исключаем заявки из Паруса
  not exists (select NULL FROM month WHERE month.ZAKAZ_ID=month_all.ID) and -- Исключаем заявки по которым идет отгрузка
  month_all.DATE_PLAN=V_TEMP_MREESTR_PARAMS.DATE_PLAN AND -- Ограничиваем по дате
  month_all.IS_REQUESTED=1 and  -- Только "Утвержденные"
  month_all.kls_dog_id=kls_dog.id(+) and
  month_all.kls_predpr_id=kls_predpr.id and
  month_all.KLS_PROD_ID=kls_prod.ID_NPR and
  kls_prod.PROD_PLAN_ID=kls_prod_plan.ID and
  month_all.load_abbr=kls_vid_otgr.load_abbr(+) and
  kls_vid_otgr.LOAD_TYPE_ID=kls_load_type.id(+) and
  month_all.kls_planstruid=kls_planstru.id(+) and
  month_all.STAN_ID=kls_stan.id(+) and
  kls_stan.GDOR_ID=kls_gdor.id(+)  and
  month_all.POLUCH_ID=poluch.id(+) and
  month_all.IS_AGENT=dog_main.is_agent(+) and
  (month_all.DATE_PLAN<TO_DATE('01.01.2005','dd.mm.yyyy') OR month_all.IS_AGENT=1)  and
  month_all.ID=zh.zakaz_id(+)
) mon,V_MREE_PLANBYDOGDETAIL A
WHERE
  a.dog_id(+)=mon.dog_id AND
  a.for_id(+)=mon.for_id AND
  a.other(+)=mon.other AND
  a.prod_plan_id(+)=mon.prod_plan_id
) M,kls_prod_plan,kls_dog,kls_predpr
WHERE
 kls_prod_plan.ID=M.PROD_PLAN_ID AND
 kls_dog.id=M.dog_id AND
 kls_dog.PREDPR_ID=kls_predpr.ID AND
 M.PROD_PLAN_ID>='10100' and
 kls_dog.dog_number<>'1-2000'
ORDER BY
  ORDER_NPR,
  NAME_NPR,
  other,
  plat_name,
  DOG_NUMBER,
  FOR_ID,
  DECODE(predpr_npo,null,' ',predpr_npo),
  load_type_id,
  zakaz_num,
  ZAKAZ_id,
  nom_zd
) 
WHERE
 NVL(ZAKAZ_VOL,0)<>0 or NVL(TONN_DECLARED,0)<>0 or NVL(TONN_LOADED,0)<>0 or NVL(CIST_DECLARED,0)<>0 or NVL(CIST_LOADED,0)<>0 or
 PLANMOSCOWDOG<>0 or PLANMOSCOWDOGWITHFOR<>0 or PLANMOSCOWPROD<>0 or PLANMOSCOWPRODOPT<>0 or 
 PLANMOSCOWPRODOPTCLEAN<>0 or PLANMOSCOWPRODOPTKOMI<>0 or PLANMOSCOWPRODOPTARH<>0 or PLANOURDOG<>0 or PLANOURDOGWITHFOR<>0 or 
 PLANOURPROD<>0 or PLANOURPRODOPT<>0 or PLANOURPRODOPTCLEAN<>0 or PLANOURPRODOPTKOMI<>0 or PLANOURPRODOPTARH<>0;


--
-- V_MREE_REESTR_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_MREE_REESTR_SNP
(REFINERY_ID, REFINERY_NAME, IS_ZAKAZ, ORDER_NPR, PROD_PLAN_ID, 
 NAME_NPR, DOG_ID, DOG_NUMBER, GROUPDOG_ID, PLAT_ID, 
 PLAT_NAME, FOR_ID, FOR_NAME, LOAD_TYPE_ID, TYPE_OTGR_NAME, 
 OTHER, NOM_ZD, ABBR_NPR, TONN_DECLARED, LOAD_VES, 
 TONN_LOADED, CIST_DECLARED, LOAD_KOL, CIST_LOADED, PRIM, 
 POLUCH_NAME, STAN_NAME, PREDPR_NPO, ZAKAZ_NUM, ZAKAZ_DATE, 
 ZAKAZ_ID, ETRAN_NUM, ETRAN_SOGL, PLANALLDOG, PLANALLDOGWITHFOR, 
 PLANALLPROD, PLANALLPRODOPT, PLANALLPRODOPTCLEAN, PLANALLPRODOPTKOMI, PLANALLPRODOPTARH, 
 PLANFIRSTDOG, PLANFIRSTDOGWITHFOR, PLANFIRSTPROD, PLANFIRSTPRODOPT, PLANFIRSTPRODOPTCLEAN, 
 PLANFIRSTPRODOPTKOMI, PLANFIRSTPRODOPTARH)
AS 
SELECT
  M.REFINERY_ID,
  M.REFINERY_NAME,
  M.IS_ZAKAZ,
  kls_prod_plan.ORDER_NPR,
  M.PROD_PLAN_ID,
  kls_prod_plan.NAME_NPR,
  M.DOG_ID,
  kls_dog.DOG_NUMBER,
  kls_dog.GROUPDOG_ID,
  kls_predpr.ID AS plat_id,
  kls_predpr.PREDPR_NAME AS plat_name,
  NVL(M.FOR_ID,0) as FOR_ID,
  M.FOR_NAME,
  DECODE(M.LOAD_TYPE_ID,2,0,1) AS LOAD_TYPE_ID,
  M.TYPE_OTGR_NAME,
  NVL(M.other,0) AS other,
  M.NOM_ZD,
  M.ABBR_NPR,
  M.TONN_DECLARED,
  M.LOAD_VES,
  M.TONN_LOADED,
  M.CIST_DECLARED,
  M.LOAD_KOL,
  M.CIST_LOADED,
  M.PRIM,
  M.POLUCH_NAME,
  M.STAN_NAME,
  M.PREDPR_NPO,
  M.ZAKAZ_NUM,
  M.ZAKAZ_DATE,
  M.ZAKAZ_ID,
  M.ETRAN_NUM,
  M.ETRAN_SOGL,
  M.PLANALLDOG,
  (SELECT SUM(B.PLANALLDOG) FROM V_MREE_SNP_PLANBYDOGDETAIL B WHERE
    M.dog_id=B.dog_id AND M.prod_plan_id=B.prod_plan_id AND B.OTHER=NVL(M.other,0) AND B.REFINERY_ID=m.REFINERY_ID) AS PlanAllDogWithFor,
  (SELECT SUM(B.PLANALLDOG) FROM V_MREE_SNP_PLANBYDOGDETAIL B WHERE
    M.prod_plan_id=b.prod_plan_id AND B.REFINERY_ID=m.REFINERY_ID) AS PlanAllProd,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10,15) or
   kls_planstru.KOD_SGR=20)
    AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanAllProdOpt,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10) and kls_planstru.kod_rzd<>20 or
   kls_planstru.KOD_SGR=20) 
   AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanAllProdOptClean,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=10) 
   AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanAllProdOptKomi,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=20) 
   AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanAllProdOptArh,
  M.PLANFIRSTDOG,
  (SELECT SUM(B.PLANFIRSTDOG) FROM V_MREE_SNP_PLANBYDOGDETAIL B WHERE
    M.dog_id=b.dog_id AND M.prod_plan_id=b.prod_plan_id AND b.OTHER=NVL(M.other,0) AND B.REFINERY_ID=m.REFINERY_ID) AS PlanFirstDogWithFor,
  (SELECT SUM(B.PLANFIRSTDOG) FROM V_MREE_SNP_PLANBYDOGDETAIL B WHERE
    M.prod_plan_id=b.prod_plan_id AND B.REFINERY_ID=m.REFINERY_ID) AS PlanFirstProd,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10,15) or
   kls_planstru.KOD_SGR=20) and
   (a.plan_id=12) AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanFirstProdOpt,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=91 and
   kls_planstru.KOD_SPG in (10) and kls_planstru.kod_rzd<>20 or
   kls_planstru.KOD_SGR=20) and
   (a.plan_id=12) AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanFirstProdOptClean,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=10) and
   (a.plan_id=12) AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanFirstProdOptKomi,
  NVL((SELECT SUM(a.PLAN_VES)
 FROM v_mree_snp_planpost a,kls_planstru,kls_prod,v_temp_mreestr_snp_params b
 WHERE a.DATE_PLAN=b.DATE_PLAN AND
   a.ID_NPR=kls_prod.ID_NPR AND
   kls_prod.PROD_PLAN_ID=M.prod_plan_id AND
   a.PLANSTRU_ID=kls_planstru.ID and
   (kls_planstru.KOD_SGR=31 and kls_planstru.KOD_SPG=10 and
   kls_planstru.kod_rzd=65 and kls_planstru.KOD_prz=20) and
   (a.plan_id=12) AND A.REFINERY_ID=m.REFINERY_ID),0) AS PlanFirstProdOptArh
FROM
(
SELECT
  A.REFINERY_NAME,
  A.REFINERY_ID,
  NVL(mon.IS_ZAKAZ,0) as IS_ZAKAZ,
  A.PROD_PLAN_ID,
  A.DOG_ID,
  A.FOR_ID,
  A.FOR_NAME,
  mon.LOAD_TYPE_ID,
  mon.TYPE_OTGR_NAME,
  A.other,
  mon.NOM_ZD,
  mon.ABBR_NPR,
  NVL(mon.TONN_DECLARED,0) as TONN_DECLARED,
  NVL(mon.LOAD_VES,0) as LOAD_VES,
  NVL(mon.TONN_LOADED,0) as TONN_LOADED,
  NVL(mon.CIST_DECLARED,0) as CIST_DECLARED,
  NVL(mon.LOAD_KOL,0) as LOAD_KOL,
  NVL(mon.CIST_LOADED,0) as CIST_LOADED,
  mon.PRIM,
  mon.poluch_name,
  mon.stan_name,
  mon.predpr_npo,
  mon.zakaz_num,
  mon.zakaz_date,
  mon.zakaz_id,
  mon.ETRAN_NUM,
  mon.ETRAN_SOGL,
  NVL(A.PLANALLDOG,0) as PLANALLDOG,
  NVL(A.PLANFIRSTDOG,0) as PLANFIRSTDOG
FROM
(
SELECT /*+ RULE */
  (CASE
     WHEN kls_dog2.is_agent=8 THEN kls_dog2.agent_id 
  ELSE 8
   END) as REFINERY_ID,
  1 as IS_ZAKAZ,
  kls_prod_plan.ID as PROD_PLAN_ID,
  ZAKAZ.LUKDOG_ID as DOG_ID,
  NVL(kls_planstru.FOR_ID,0) as FOR_ID,
  kls_planstru.FOR_NAME,
  KLS_VID_OTGR.LOAD_TYPE_ID AS LOAD_TYPE_ID,
  kls_load_type.TYPE_OTGR_NAME,
  NVL(DECODE(kls_planstru.KOD_SGR,91,DECODE(kls_planstru.KOD_SPG,10,1,0),0),0) AS other,
  ZAKAZ_HIST.NOM_ZD,
  kls_prod.ABBR_NPR,
  ZAKAZ.VES as TONN_DECLARED,
  (CASE
     WHEN kls_dog2.is_agent=8 or kls_dog2.is_agent=4175 THEN ZAKAZ_HIST.LOAD_VES 
  ELSE MONTH.TONN_DECLARED
   END) as LOAD_VES,
  DECODE(ZAKAZ_HIST.ID,NULL,ZAKAZ.FACT_VES,ZAKAZ_HIST.FACT_VES) as TONN_LOADED,
  ZAKAZ.KOL as CIST_DECLARED,
--  DECODE(ZAKAZ_HIST.ID,NULL,ZAKAZ.LOAD_KOL,ZAKAZ_HIST.LOAD_KOL) as LOAD_KOL,
  (CASE
     WHEN kls_dog2.is_agent=8 or kls_dog2.is_agent=4175 THEN ZAKAZ_HIST.LOAD_KOL 
  ELSE MONTH.CIST_DECLARED 
   END) as LOAD_KOL,
  DECODE(ZAKAZ_HIST.ID,NULL,ZAKAZ.FACT_KOL,ZAKAZ_HIST.FACT_KOL) as CIST_LOADED,
  ZAKAZ.PRIM,
  poluch.PREDPR_NAME AS poluch_name,
  kls_stan.stan_name || ' ' || kls_gdor.SHORT_NAME AS stan_name,
  DECODE(kls_predpr.ID,2641,'',kls_predpr.PREDPR_NAME) AS predpr_npo,
  ZAKAZ.INPUT_NUMBER AS zakaz_num,
  ZAKAZ.INPUT_DATE AS zakaz_date,
  ZAKAZ.ID AS zakaz_id,
  DECODE(MONTH.GU12_A_ID,NULL,GU12_A.NOM_Z,mon_GU12_A.NOM_Z) as ETRAN_NUM,
  DECODE(MONTH.GU12_A_ID,NULL,NVL(GU12_A.SOGL,0),NVL(mon_GU12_A.SOGL,0)) as ETRAN_SOGL
FROM ZAKAZ,kls_prod_plan,kls_dog,kls_predpr,kls_predpr poluch,
     (select a.* from kls_dog_main a,V_TEMP_MREESTR_SNP_PARAMS b where a.IS_AGENT=2 AND b.DATE_PLAN BETWEEN a.from_date and a.to_date) dog_main,
  kls_dog kls_dog2,
     kls_planstru,kls_vid_otgr,kls_load_type,V_TEMP_MREESTR_SNP_PARAMS, kls_prod, kls_gdor, kls_stan,
  gu12_a, gu12_a mon_gu12_a, (select * from zakaz_hist where status_zakaz_id=20) zakaz_hist, MONTH
WHERE
  ZAKAZ.DATE_PLAN=V_TEMP_MREESTR_SNP_PARAMS.DATE_PLAN AND -- Ограничиваем по дате
  ZAKAZ.IS_ACCEPT=1 and  -- Только "Утвержденные"
  ZAKAZ.dog_id=kls_dog.id(+) and
  ZAKAZ.PLAT_ID=kls_predpr.id and
  ZAKAZ.PROD_ID_NPR=kls_prod.ID_NPR and
  kls_prod.PROD_PLAN_ID=kls_prod_plan.ID and
  ZAKAZ.load_abbr=kls_vid_otgr.load_abbr(+) and
  kls_vid_otgr.LOAD_TYPE_ID=kls_load_type.id(+) and
  ZAKAZ.planstru_id=kls_planstru.id(+) and
  ZAKAZ.STAN_ID=kls_stan.id(+) and
  kls_stan.GDOR_ID=kls_gdor.id(+)  and
  ZAKAZ.POLUCH_ID=poluch.id(+) and
  ZAKAZ.IS_AGENT=dog_main.is_agent(+) and
  ZAKAZ.lukdog_id=kls_dog2.id(+) and
  zakaz.IS_AGENT=2 and
  zakaz.id=zakaz_hist.zakaz_id(+) and
  zakaz_hist.GU12_A_ID=gu12_a.id(+) and
  zakaz_hist.NOM_ZD=MONTH.NOM_ZD(+) and
  month.gu12_a_id=mon_gu12_a.id(+)

) mon,V_MREE_SNP_PLANBYDOGDETAIL A
WHERE
  a.refinery_id=mon.refinery_id(+) AND
  a.dog_id=mon.dog_id(+) AND
  a.for_id=mon.for_id(+) AND
  a.other=mon.other(+) AND
  a.prod_plan_id=mon.prod_plan_id(+)
) M,kls_prod_plan,kls_dog,kls_predpr
WHERE
 kls_prod_plan.ID=M.PROD_PLAN_ID AND
 kls_dog.id=M.dog_id AND
 kls_dog.PREDPR_ID=kls_predpr.ID AND
 M.PROD_PLAN_ID>='10100' and
 kls_dog.dog_number<>'1-2000'
ORDER BY
  M.REFINERY_ID,
  M.REFINERY_NAME,
  ORDER_NPR,
  NAME_NPR,
  other,
  plat_name,
  DOG_NUMBER,
  FOR_ID,
  DECODE(predpr_npo,null,' ',predpr_npo),
  load_type_id,
  zakaz_num,
  ZAKAZ_id,
  nom_zd;


--
-- V_NARIAD_KTU  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NARIAD_KTU
(YY, MM, KOD_PLAT, NAME_PLAT, KOD_PROD, 
 NAME_PROD, NOM_ZD, NARIAD, DOVEREN, DATE_END, 
 VES)
AS 
SELECT YY,
       MM, 
       KOD_PLAT,
	   NAME_PLAT,   
       KOD_PROD,   
       NAME_PROD,   
	   NOM_ZD,   
	   NARIAD,   
	   DOVEREN,   
	   DATE_END,
	   SUM(VES) AS VES
FROM V_NARIAD_READY  
GROUP BY YY,MM,NAME_PLAT, KOD_PLAT, NAME_PROD, KOD_PROD, NOM_ZD, NARIAD, DOVEREN, DATE_END;


--
-- V_NARIAD_REESTR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NARIAD_REESTR
(KOD_PLAT, PROD_ID_NPR, NOM_ZD, NARIAD_ID, NARIAD, 
 DOVEREN, MM, YY, DATE_OTGR, VES)
AS 
SELECT
	   KLS_DOG.PREDPR_ID AS KOD_PLAT,  
       KVIT.PROD_ID_NPR, 
       KVIT.NOM_ZD,
	   SVED.NARIAD_ID, 
	   TRIM_NUMNAR(KLS_NARIAD.NUM_NAR) AS NARIAD, 
	   TRIM_NUMNAR(KLS_DOVER.NUM_DOVER) AS DOVEREN,
	   TO_CHAR(KVIT.DATE_KVIT,'MM') AS MM,   
	   TO_CHAR(KVIT.DATE_KVIT,'YYYY') AS YY,   
	   KVIT.DATE_OTGR, 
   	   KVIT.VES 
FROM KVIT, SVED, MONTH, KLS_DOG, KLS_NARIAD, KLS_DOVER 
WHERE KVIT.SVED_ID = SVED.ID 
  AND KVIT.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID = KLS_DOG.ID 
  AND SVED.NARIAD_ID = KLS_NARIAD.ID (+)
  AND KLS_NARIAD.DOVER_ID = KLS_DOVER.ID (+) 
  AND (MONTH.LOAD_ABBR='САМ' OR MONTH.LOAD_ABBR='КНТ');


--
-- V_NARIAD_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NARIAD_UNP
(YY, MM, KOD_PLAT, NAME_PLAT, KOD_PROD, 
 NAME_PROD, NOM_ZD, NARIAD, DOVEREN, DATE_END, 
 VES)
AS 
SELECT V_NARIAD_REESTR.YY,   
	   V_NARIAD_REESTR.MM,   
       V_NARIAD_REESTR.KOD_PLAT,
	   KLS_PREDPR.SHORT_NAME AS NAME_PLAT,   
       KLS_PROD.ID_KIND_NPR AS KOD_PROD,   
       KINDPROD.NAME_NPR AS NAME_PROD,   
	   V_NARIAD_REESTR.NOM_ZD,   
	   V_NARIAD_REESTR.NARIAD,   
	   V_NARIAD_REESTR.DOVEREN,   
	   MAX(V_NARIAD_REESTR.DATE_OTGR) AS DATE_END,  
	   SUM(V_NARIAD_REESTR.VES) AS VES  
FROM V_NARIAD_REESTR, KLS_PROD, KLS_PROD KINDPROD, KLS_PREDPR  
WHERE V_NARIAD_REESTR.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KINDPROD.ID_NPR = KLS_PROD.ID_KIND_NPR
  AND V_NARIAD_REESTR.KOD_PLAT = KLS_PREDPR.ID
GROUP BY V_NARIAD_REESTR.YY, V_NARIAD_REESTR.MM, KLS_PREDPR.SHORT_NAME, V_NARIAD_REESTR.KOD_PLAT, KINDPROD.NAME_NPR, KLS_PROD.ID_KIND_NPR, V_NARIAD_REESTR.NOM_ZD, V_NARIAD_REESTR.NARIAD, V_NARIAD_REESTR.DOVEREN;


--
-- V_NPO_BUDGET05  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NPO_BUDGET05
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number,
  bills.DOG_ID,
  bills.DATE_KVIT,
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat,
  sum(kv.ves) AS ves,
  sum(bills.summa_dok) as summa_dok,
  0 AS summa_opl
  FROM bills,kls_dog,
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID =0 
	   and kls_dog.ID<>787 and kls_dog.ID<>793
	  GROUP BY bill_id
	) kv 
  WHERE bills.dog_id=kls_dog.ID  and kls_dog.LUKDOG_ID =0 and bills.nom_dok=kv.bill_id
  and kls_dog.ID<>787 and kls_dog.ID<>793 
  GROUP BY
    kls_dog.dog_number,
    bills.DOG_ID,
    bills.DATE_KVIT,
    bills.DATE_KVIT+bills.KOL_DN;


--
-- V_OPER_KVIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_OPER_KVIT
(DATE_OFORML, SHORT_NAME, EMAIL, NAME_STAN, NAME_POLUCH, 
 ABBR_NPR, SVED_NUM, NUM_CIST, NOM_ZD, VES_BRUTTO, 
 KOL, VES_CIST, PASP)
AS 
SELECT /*RULE*/ 
  KVIT.DATE_OFORML, 
  PLAT.SHORT_NAME, 
  PLAT.EMAIL,
  KLS_STAN.STAN_NAME || ' ' || kls_gdor.SHORT_NAME AS name_stan,
  poluch.PREDPR_NAME as name_poluch,
  kls_prod.ABBR_NPR,
  kvit.SVED_NUM,
  kvit.NUM_CIST,
  month.nom_zd,
  kvit.VES_BRUTTO,
  1 as kol,
  kvit.VES_CIST,
  0 as pasp
FROM KVIT , KLS_PREDPR POLUCH, MONTH , KLS_DOG , KLS_PREDPR PLAT, KLS_STAN ,
 KLS_GDOR, kls_prod
WHERE (POLUCH.ID = MONTH.POLUCH_ID) AND
 (MONTH.NOM_ZD = KVIT.NOM_ZD) AND
 (KLS_DOG.ID = MONTH.DOG_ID) AND
 (PLAT.ID = KLS_DOG.PREDPR_ID) AND
 (KLS_STAN.ID = MONTH.STAN_ID) AND
 (KLS_GDOR.ID = KLS_STAN.GDOR_ID) AND
 (kls_prod.ID_NPR=kvit.PROD_ID_NPR);


--
-- V_PARUS_DEBITOR_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PARUS_DEBITOR_SF
(NOM_SF, NOM_DOK, LUKDOG_ID, PLAT_ID, DOG_ID, 
 IS_PROD, DATE_KVIT, KOL_DN, DATE_TO_OPL, SUMMA_DOK)
AS 
SELECT   /*+ FIRST_ROWS*/
             bills_parus.npo_sf, bills_parus.nom_dok,
             DECODE (NVL (kls_dog.lukdog_id, 0),
                     0, bills_parus.dog_id,
                     kls_dog.lukdog_id
                    ),
             kls_dog.predpr_id, bills_parus.dog_id,
             DECODE (SIGN (bp.bill_pos_parus_id - 10), -1, 1, 0),
             MAX (bills_parus.date_kvit), MAX (bills_parus.kol_dn),
             MAX (bills_parus.date_kvit + bills_parus.kol_dn), SUM (bp.summa)
       FROM bills_parus, bill_pos_parus bp, kls_dog
      WHERE bills_parus.date_kvit >= TO_DATE ('01.12.2002', 'dd.mm.yyyy')
        AND bills_parus.dog_id = kls_dog.ID
        AND bp.nom_dok = bills_parus.nom_dok
   GROUP BY bills_parus.npo_sf,
            bills_parus.nom_dok,
            DECODE (NVL (kls_dog.lukdog_id, 0),
                    0, bills_parus.dog_id,
                    kls_dog.lukdog_id
                   ),
            kls_dog.predpr_id,
            bills_parus.dog_id,
            DECODE (SIGN (bp.bill_pos_parus_id - 10), -1, 1, 0)
   UNION ALL
   SELECT ' ', 0, kls_dog.lukdog_id, kls_predpr.ID, kls_dog.ID, 1,
          TO_DATE ('30.11.2002', 'dd.mm.yyyy'), kls_usl_opl.kol_dn,
          TO_DATE ('30.11.2002', 'dd.mm.yyyy') + kls_usl_opl.kol_dn,
          kls_dog.saldo_01122002
     FROM kls_dog, kls_predpr, kls_usl_opl
    WHERE kls_dog.saldo_01122002 <> 0
      AND kls_dog.usl_opl_id = kls_usl_opl.ID(+)
      AND kls_dog.predpr_id = kls_predpr.ID;


--
-- V_PASP_CONTROL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PASP_CONTROL
(REZ_NUM, PASP_TYP, PASP_NUM, NAME_NPR, PASP_DATE, 
 DATE_VIR, NEXT_PASP_NUM, NEXT_NAME_NPR, NEXT_PASP_DATE, NEXT_DATE_VIR, 
 INSPEKTOR, OTGR)
AS 
SELECT /*+ INDEX(AA PASP_DATE_VIR_I) */
  A.rez_num,
  A.pasp_typ,
  A.pasp_num,
  A.name_npr,
  A.pasp_date,
  A.date_vir,
  (SELECT MIN(C.pasp_num) FROM kls_pasp C WHERE C.MESTO_ID=1 and C.pasp_typ=2
      and C.rez_num=A.rez_num
	  and C.date_vir=A.next_date_vir) as next_pasp_num,
  (SELECT MIN(D.name_npr) FROM kls_pasp C, kls_prod D WHERE C.PROD_ID_NPR=D.ID_NPR and C.MESTO_ID=1 and C.pasp_typ=2
      and C.rez_num=A.rez_num
	  and date_vir=A.next_date_vir) as next_name_npr,
  (SELECT MIN(pasp_date) FROM kls_pasp C WHERE C.MESTO_ID=1 and C.pasp_typ=2
      and C.rez_num=A.rez_num
	  and date_vir=A.next_date_vir) as next_pasp_date,
  A.next_date_vir,
  A.inspektor,
  (SELECT SUM(VES_BRUTTO) FROM KVIT WHERE PASP_ID=A.ID) as otgr
from
(
select
  AA.ID,
  AA.rez_num,
  DECODE(AA.pasp_typ,2,'Р','Н') as pasp_typ,
  AA.pasp_num,
  kls_prod.name_npr,
  AA.pasp_date,
  AA.date_vir,
  (SELECT MIN(date_vir) FROM kls_pasp C WHERE C.MESTO_ID=1 and C.pasp_typ=2
      and C.rez_num=AA.rez_num
	  and C.date_vir>AA.date_vir) as next_date_vir,
  inspektor
from kls_pasp AA,kls_prod
where AA.prod_id_npr=kls_prod.id_npr
  and AA.MESTO_ID=1
  and AA.rez_num<>'0'
) A;


--
-- V_PF_RUB_DATA  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PF_RUB_DATA
(PLANSTRU_ID, PLAN_VES, PLAN_SUM, PLANOBR_VES, FACT_VES, 
 FACT_SUM)
AS 
select PLANSTRU_ID,
        sum(PLAN_VES) as PLAN_VES,
        sum(PLAN_SUM) as PLAN_SUM,
        sum(PLANOBR_VES) as PLANOBR_VES,
        sum(FACT_VES) as FACT_VES,
        sum(FACT_SUM) as FACT_SUM
 from (
       -- Факт
       select /*+ RULE*/ 
              T2.PLANSTRU_ID,
              0 as PLAN_VES,
              0 as PLAN_SUM,
              0 as PLANOBR_VES,
              sum(T1.VES_BRUTTO) as FACT_VES,
              round(sum(decode(nvl(T1.SUM_PROD,0),0,
                   nvl((select max(T3.CENA)
                                    from V_NPR_PRICES T3
                                    where (T3.CAT_CEN_ID = T4.CAT_CEN_ID)   and
                                          (T3.PROD_ID_NPR = T1.PROD_ID_NPR) and
                                  (T1.DATE_KVIT between T3.BEGIN_DATE and T3.END_DATE)),0)*T1.VES_BRUTTO,
                T1.SUM_PROD)),2) as FACT_SUM
       from V_MASTER_REPORTS R, KVIT T1, MONTH T2, USL_DOG T4
       where (nls_upper(R.REPORT_FILE) = 'PF_RUB.XLS') and
             (T1.DATE_KVIT between R.BEGIN_DATE and R.END_DATE) and
             (T1.NOM_ZD = T2.NOM_ZD) and
             (T2.DOG_ID = T4.DOG_ID) and
             (T2.USL_NUMBER = T4.USL_NUMBER)
       group by T2.PLANSTRU_ID
       
    union all

       -- Первоначальный план
       select  /*+ RULE*/ 
              T1.PLANSTRU_ID,
              sum(T1.PLAN_VES) as PLAN_VES,
              round(sum(nvl((select max(T3.CENA)
                             from V_NPR_PRICES T3, KLS_CAT_CEN CC
                       where (T3.CAT_CEN_ID = CC.ID) and 
                         (decode(nvl(CC.PREDPR_ID,0),0,2,CC.PREDPR_ID) = D.PREDPR_ID) and
                             (T3.PROD_ID_NPR = T1.PROD_ID_NPR) and
                       (T2.BEGIN_DATE between T3.BEGIN_DATE and T3.END_DATE)),
           0)*T1.PLAN_VES),2) as PLAN_SUM_SUM,
              0 as PLANOBR_VES,
              0 as FACT_VES,
              0 as FACT_SUM
       from V_MASTER_REPORTS R, PLAN_POST T1, PLAN_PERIODS T2, KLS_DOG D
       where (nls_upper(r.REPORT_FILE) = 'PF_RUB.XLS') and
             (T1.PLAN_PER_ID = T2.ID) and
            (T1.DOG_ID = D.ID) and
             (T1.PLAN_ID = 2) and
             (T2.END_DATE >= R.BEGIN_DATE) and
          (T2.BEGIN_DATE <= R.END_DATE)
       group by T1.PLANSTRU_ID
       
    union all

       -- План с ОБР
       select  /*+ RULE*/ 
               T1.PLANSTRU_ID,
               0 as PLAN_VES,
               0 as PLAN_SUM,
               sum(T1.PLAN_VES) as PLANOBR_VES,
               0 as FACT_VES,
               0 as FACT_SUM
       from V_MASTER_REPORTS R, PLAN_POST T1, PLAN_PERIODS T2
       where (nls_upper(R.REPORT_FILE) = 'PF_RUB.XLS') and
             (T1.PLAN_PER_ID = T2.ID) and
             (T1.PLAN_ID in (2,3)) and
             (T2.END_DATE >= R.BEGIN_DATE)   and
           (T2.BEGIN_DATE <= R.END_DATE)
       group by T1.PLANSTRU_ID)
 group by PLANSTRU_ID;


--
-- V_RASSTANDOWNER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RASSTANDOWNER
(NAME_RASST, CIST_MPS, CIST_NOT_MPS, VAGON_MPS, VAGON_NOT_MPS)
AS 
SELECT
  kls_rasst.NAME_RASST,
/*  kls_prod.NAME_NPR,
  kvit.VAGONTYPE_ID,
  kvit.VAGOWNER_ID,
  kvit.num_cist,*/
  SUM(DECODE(kvit.VAGOWNER_ID,3,
    DECODE(kvit.VAGONTYPE_ID,6,(kvit.VES_BRUTTO),1,(kvit.VES_BRUTTO),0)
  ,0)) AS cist_mps,
  SUM(DECODE(kvit.VAGOWNER_ID,3,0,
    DECODE(kvit.VAGONTYPE_ID,6,(kvit.VES_BRUTTO),1,(kvit.VES_BRUTTO),0)
  )) AS cist_not_mps,
  SUM(DECODE(kvit.VAGOWNER_ID,3,
    DECODE(kvit.VAGONTYPE_ID,6,0,1,0,0,0,(kvit.VES_BRUTTO))
  ,0)) AS vagon_mps,
  SUM(DECODE(kvit.VAGOWNER_ID,3,0,
    DECODE(kvit.VAGONTYPE_ID,6,0,1,0,0,0,(kvit.VES_BRUTTO))
  )) AS vagon_not_mps
  FROM kvit,kls_rasst,month,kls_stan,kls_vid_otgr, kls_prod
  WHERE
    kls_stan.rast between kls_rasst.MIN_RASST and kls_rasst.MAX_RASST and
	kls_stan.ID=month.STAN_ID and
	kvit.prod_id_npr=kls_prod.id_npr and
	month.nom_zd=kvit.nom_zd and
	month.LOAD_ABBR=kls_vid_otgr.LOAD_ABBR and
	month.is_exp=0 and
	kls_vid_otgr.LOAD_TYPE_ID=1 and
	kvit.DATE_KVIT between
	  TO_DATE('01.07.2003','dd.mm.yyyy') and
	  TO_DATE('31.12.2003','dd.mm.yyyy')
/*	and kvit.VAGOWNER_ID<>3
	and kvit.VAGONTYPE_ID<>6*/
  GROUP BY
    kls_rasst.NAME_RASST/*,
	  kls_prod.NAME_NPR,
  kvit.VAGONTYPE_ID,
  kvit.VAGOWNER_ID,
  kvit.num_cist*/
;


--
-- V_REE_FACTPROD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_FACTPROD
(PROD_PLAN_ID, VES_BRUTTO)
AS 
SELECT
  kls_prod.PROD_PLAN_ID,
  SUM(kvit.ves_brutto) AS ves_brutto 
	FROM kvit,month,kls_prod,V_TEMP_REESTR_PARAMS
	WHERE 
	  month.date_plan=V_TEMP_REESTR_PARAMS.DATE_PLAN and
	  kvit.DATE_OFORML<=V_TEMP_REESTR_PARAMS.DATETIME_REPORT and
	  kvit.PROD_ID_NPR=kls_prod.ID_NPR and
	  kvit.NOM_ZD=month.NOM_ZD
  GROUP BY kls_prod.PROD_PLAN_ID;


--
-- V_REE_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_MONTH
(ORDER_NPR, KIND_NPR, PLAT_NAME, PLATSNP_NAME, FILIAL_NAME, 
 FILIAL_TRANSIT, KINDPROD_NAME, DOG_NUMBER, ABBR_NPR, INPUT_DATE, 
 NOM_ZD, TONN_DECLARED, TONN_LOADED, CIST_LOADED, POLU_NAME, 
 NAIM_REGION, STAN_NAME, GDOR_NAME, FLG_ALLOW_8_AXES, LOAD_ABBR, 
 NORMOTGR, CENA_OTP, PRIM, OST, PLANMOSCOWDOG, 
 PLANMOSCOWDOGWITHFOR, PLANOURDOG, PLANOURDOGWITHFOR, PLANMOSCOWPROD, PLANMOSCOWPRODOPT, 
 PLANOURPROD, PLANOURPRODOPT, FACTDOG, FACTDOGWITHFOR, FACTPROD, 
 ETRAN_NUM, ETRAN_DATE, ETRAN_SOGL, GU12_A_ID, STAN_ID, 
 PROD_ID_NPR, KOD_ISU)
AS 
SELECT
  order_npr,
  TO_CHAR(kls_prod.PROD_PLAN_ID) AS kind_npr,
  plat.PREDPR_NAME AS plat_name,
  NVL(platSNP.Predpr_name,' ') AS platSnp_name,
  NVL(kls_planstru.FOR_NAME,' ') AS Filial_name,
  DECODE(kls_planstru.FOR_ID,1,DECODE(kls_planstru.TIP_REAL_ID,2,'ТРАНЗИТ',' '),' ') AS Filial_transit,
  KLS_PROD_PLAN.NAME_NPR AS kindprod_name,
  kls_dog.DOG_NUMBER,
  kls_prod.ABBR_NPR,
 (SELECT MAX(date_razn) FROM raznar WHERE month.NOM_ZD=raznar.nom_zd) AS INPUT_DATE,
  month.NOM_ZD,
  month.TONN_DECLARED,
  NVL((SELECT SUM(kvit.VES_BRUTTO) FROM kvit WHERE kvit.nom_zd=month.nom_zd
    AND kvit.DATE_OFORML<=V_TEMP_REESTR_PARAMS.DATETIME_REPORT),0) AS tonn_loaded,
  NVL((SELECT COUNT(*) FROM kvit WHERE kvit.nom_zd=month.nom_zd
    AND kvit.DATE_OFORML<=V_TEMP_REESTR_PARAMS.DATETIME_REPORT),0) AS cist_loaded,
  polu.PREDPR_NAME AS polu_name,
  kls_region.REGION_NAME AS naim_region,
  kls_stan.STAN_NAME,
  KLS_GDOR.SHORT_NAME AS gdor_name,
  month.FLG_ALLOW_8_AXES,
  month.LOAD_ABBR,
  kls_prod.NORMOTGR,
  month.CENA_OTP,
  month.PRIM,
  v_ree_rez.OST,
  NVL((SELECT
    SUM(DECODE(NVL(kls_planstru.FOR_ID,0),v_ree_planpost.FOR_ID,v_ree_planpost.PLAN_VES,0))
	FROM v_ree_planpost,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.DOG_ID=month.dog_id AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  (v_ree_planpost.plan_id=2 or v_ree_planpost.plan_id=3)),0)
	AS planMoscowDog,
  NVL((SELECT
    SUM(v_ree_planpost.PLAN_VES)
	FROM v_ree_planpost,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.DOG_ID=month.dog_id AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  (v_ree_planpost.plan_id=2 or v_ree_planpost.plan_id=3)),0)
	AS planMoscowDogWithFor,
  NVL((SELECT
    SUM(DECODE(NVL(kls_planstru.FOR_ID,0),v_ree_planpost.FOR_ID,v_ree_planpost.PLAN_VES,0))
	FROM v_ree_planpost,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.DOG_ID=month.dog_id AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  v_ree_planpost.plan_id=1),0)
	AS planOurDog,
  NVL((SELECT
    SUM(v_ree_planpost.PLAN_VES)
	FROM v_ree_planpost,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.DOG_ID=month.dog_id AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  v_ree_planpost.plan_id=1),0)
	AS planOurDogWithFor,
  NVL((SELECT
    SUM(v_ree_planpost.PLAN_VES)
	FROM v_ree_planpost,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  (v_ree_planpost.plan_id=2 or v_ree_planpost.plan_id=3)),0)
	AS planMoscowProd,
  NVL((SELECT
    SUM(v_ree_planpost.PLAN_VES)
	FROM v_ree_planpost,kls_planstru,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  v_ree_planpost.PLANSTRU_ID=kls_planstru.ID and
	  (kls_planstru.KOD_SGR=91 and
	  kls_planstru.KOD_SPG in (10,15) or
	  kls_planstru.KOD_SGR=20) and
	  (v_ree_planpost.plan_id=2 or v_ree_planpost.plan_id=3)),0)
	AS planMoscowProdOpt,
  NVL((SELECT
    SUM(v_ree_planpost.PLAN_VES)
	FROM v_ree_planpost,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  v_ree_planpost.plan_id=1),0)
	AS planOurProd,
  NVL((SELECT
    SUM(v_ree_planpost.PLAN_VES)
	FROM v_ree_planpost,kls_planstru,kls_prod
	WHERE v_ree_planpost.DATE_PLAN=month.DATE_PLAN AND
	  v_ree_planpost.PROD_PLAN_ID=kls_prod.prod_plan_id AND
	  kls_prod.ID_NPR=month.PROD_ID_NPR AND
	  v_ree_planpost.PLANSTRU_ID=kls_planstru.ID and
	  (kls_planstru.KOD_SGR=91 and
	  kls_planstru.KOD_SPG in (10,15) or
	  kls_planstru.KOD_SGR=20) and
	  v_ree_planpost.plan_id=1),0)
	AS planOurProdOpt,
  NVL((SELECT
--    SUM(DECODE(NVL(kls_planstru.FOR_ID,0),0,kvit.ves_brutto,
--	  DECODE(NVL(kls_planstru.FOR_ID,0),ps2.FOR_ID,kvit.ves_brutto,0)))
    SUM(DECODE(NVL(kls_planstru.FOR_ID,0),NVL(ps2.FOR_ID,0),kvit.ves_brutto,0))
	FROM kvit,month m2,kls_planstru ps2,kls_prod,kls_prod pr2
	WHERE month.date_plan=m2.date_plan AND
	  m2.DOG_ID=month.dog_id AND
	  kvit.prod_id_npr=pr2.id_npr AND
	  month.prod_id_npr=kls_prod.ID_NPR AND
	  kls_prod.PROD_PLAN_ID=pr2.PROD_PLAN_ID AND
	  kvit.nom_zd=m2.nom_zd AND
	  m2.planstru_id=ps2.ID AND
	  kvit.DATE_OFORML<=V_TEMP_REESTR_PARAMS.DATETIME_REPORT),0)
	AS factDog,
  NVL((SELECT
    SUM(kvit.ves_brutto)
	FROM kvit,month m2,kls_prod,kls_prod pr2
	WHERE month.date_plan=m2.date_plan AND
	  m2.DOG_ID=month.dog_id AND
	  kvit.prod_id_npr=pr2.id_npr AND
	  month.prod_id_npr=kls_prod.ID_NPR AND
	  kls_prod.PROD_PLAN_ID=pr2.PROD_PLAN_ID AND
	  kvit.nom_zd=m2.nom_zd AND
	  kvit.DATE_OFORML<=V_TEMP_REESTR_PARAMS.DATETIME_REPORT),0)
	AS factDogWithFor,
  NVL((SELECT
    SUM(v_ree_factprod.ves_brutto)
	FROM v_ree_factprod,kls_prod
	WHERE v_ree_factprod.PROD_PLAN_ID=kls_prod.PROD_PLAN_ID and
	  month.PROD_ID_NPR=kls_prod.ID_NPR),0)
	AS factProd,
  gu12_a.NOM_Z,
  gu12_a.REG_DATE,
  gu12_a.SOGL,
  gu12_a.ID,
  KLS_STAN.ID,
  KLS_PROD.ID_NPR,
  zh.kod_isu
  FROM month,kls_predpr plat,kls_predpr polu,kls_dog,
       kls_prod,kls_stan,kls_gdor,kls_prod_plan,kls_region,
       kls_predpr platSnp,kls_dog dogSnp,kls_planstru,
	   V_TEMP_REESTR_PARAMS,v_ree_rez,gu12_a,zakaz_hist zh
  WHERE
    month.gu12_a_id=gu12_a.id(+) and
    month.DOG_ID=kls_dog.ID AND
	kls_dog.PREDPR_ID=plat.ID AND
	month.PROD_ID_NPR=kls_prod.ID_NPR AND
	kls_prod.PROD_PLAN_ID=kls_prod_plan.ID AND
	month.STAN_ID=kls_stan.ID AND
	kls_stan.GDOR_ID=kls_gdor.ID AND
	month.PLANSTRU_ID=kls_planstru.ID AND
	kls_region.ID(+)=kls_stan.region_id AND
	month.POLUCH_ID=polu.ID AND
	month.NPODOG_ID=dogSnp.ID(+) AND
	dogSNP.predpr_ID=platSNP.ID(+) AND
	month.PROD_ID_NPR BETWEEN '10300' AND '99999' AND
	month.date_plan=V_TEMP_REESTR_PARAMS.DATE_PLAN AND
	kls_prod.PROD_PLAN_ID=v_ree_rez.KIND_NPR(+) and
    month.zakaz_hist_id=zh.id(+)
ORDER BY order_npr, kind_npr, plat_name, Filial_name,platSnp_name,Filial_transit,nom_zd;


--
-- V_REE_MONTH_MOSCOW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_MONTH_MOSCOW
(ORDER_NPR, KIND_NPR, PLAT_NAME, PLATSNP_NAME, FILIAL_NAME, 
 FILIAL_TRANSIT, KINDPROD_NAME, DOG_NUMBER, ABBR_NPR, INPUT_DATE, 
 NOM_ZD, TONN_DECLARED, TONN_LOADED, CIST_LOADED, POLU_NAME, 
 NAIM_REGION, STAN_NAME, GDOR_NAME, FLG_ALLOW_8_AXES, LOAD_ABBR, 
 NORMOTGR, CENA_OTP, PRIM, OST, PLANMOSCOWDOG, 
 PLANMOSCOWDOGWITHFOR, PLANOURDOG, PLANOURDOGWITHFOR, PLANMOSCOWPROD, PLANMOSCOWPRODOPT, 
 PLANOURPROD, PLANOURPRODOPT, FACTDOG, FACTDOGWITHFOR, FACTPROD, 
 ETRAN_NUM, ETRAN_DATE, ETRAN_SOGL, GU12_A_ID, STAN_ID, 
 PROD_ID_NPR, KOD_ISU, TONN_REE, PRIORITY, GU12_GRAFIK, 
 GU12_LOAD_ABBR)
AS 
SELECT
  A."ORDER_NPR",A."KIND_NPR",A."PLAT_NAME",A."PLATSNP_NAME",A."FILIAL_NAME",A."FILIAL_TRANSIT",A."KINDPROD_NAME",A."DOG_NUMBER",A."ABBR_NPR",A."INPUT_DATE",A."NOM_ZD",A."TONN_DECLARED",A."TONN_LOADED",A."CIST_LOADED",A."POLU_NAME",A."NAIM_REGION",A."STAN_NAME",A."GDOR_NAME",A."FLG_ALLOW_8_AXES",A."LOAD_ABBR",A."NORMOTGR",A."CENA_OTP",A."PRIM",A."OST",A."PLANMOSCOWDOG",A."PLANMOSCOWDOGWITHFOR",A."PLANOURDOG",A."PLANOURDOGWITHFOR",A."PLANMOSCOWPROD",A."PLANMOSCOWPRODOPT",A."PLANOURPROD",A."PLANOURPRODOPT",A."FACTDOG",A."FACTDOGWITHFOR",A."FACTPROD",A."ETRAN_NUM",A."ETRAN_DATE",A."ETRAN_SOGL",A."GU12_A_ID",A."STAN_ID",A."PROD_ID_NPR",A."KOD_ISU",
  C.TONN_MOS as TONN_REE,
  C.PRIORITY
  , for_reestr.GrafikToStr(a.NOM_ZD,e.GRAFIK_TO) as GU12_GRAFIK
  , for_reestr.GetLoadAbbr(a.NOM_ZD) as GU12_LOAD_ABBR
FROM V_REE_MONTH A, MONTH_REESTR B, MONTH_REESTR_POS C, V_TEMP_REESTR_PARAMS E
-- С учетом согласования
WHERE B.DATE_REE=E.DATE_REE
  AND B.DOP_REE=0 -- Только основной
  AND B.ID=C.MONTH_REESTR_ID
  AND C.NOM_ZD=A.NOM_ZD;


--
-- V_REE_MONTH_UHTA  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_MONTH_UHTA
(ORDER_NPR, KIND_NPR, PLAT_NAME, PLATSNP_NAME, FILIAL_NAME, 
 FILIAL_TRANSIT, KINDPROD_NAME, DOG_NUMBER, ABBR_NPR, INPUT_DATE, 
 NOM_ZD, TONN_DECLARED, TONN_LOADED, CIST_LOADED, POLU_NAME, 
 NAIM_REGION, STAN_NAME, GDOR_NAME, FLG_ALLOW_8_AXES, LOAD_ABBR, 
 NORMOTGR, CENA_OTP, PRIM, OST, PLANMOSCOWDOG, 
 PLANMOSCOWDOGWITHFOR, PLANOURDOG, PLANOURDOGWITHFOR, PLANMOSCOWPROD, PLANMOSCOWPRODOPT, 
 PLANOURPROD, PLANOURPRODOPT, FACTDOG, FACTDOGWITHFOR, FACTPROD, 
 ETRAN_NUM, ETRAN_DATE, ETRAN_SOGL, GU12_A_ID, STAN_ID, 
 PROD_ID_NPR, KOD_ISU, TONN_REE, PRIORITY, GU12_GRAFIK, 
 GU12_LOAD_ABBR)
AS 
SELECT
  A."ORDER_NPR",A."KIND_NPR",A."PLAT_NAME",A."PLATSNP_NAME",A."FILIAL_NAME",A."FILIAL_TRANSIT",A."KINDPROD_NAME",A."DOG_NUMBER",A."ABBR_NPR",A."INPUT_DATE",A."NOM_ZD",A."TONN_DECLARED",A."TONN_LOADED",A."CIST_LOADED",A."POLU_NAME",A."NAIM_REGION",A."STAN_NAME",A."GDOR_NAME",A."FLG_ALLOW_8_AXES",A."LOAD_ABBR",A."NORMOTGR",A."CENA_OTP",A."PRIM",A."OST",A."PLANMOSCOWDOG",A."PLANMOSCOWDOGWITHFOR",A."PLANOURDOG",A."PLANOURDOGWITHFOR",A."PLANMOSCOWPROD",A."PLANMOSCOWPRODOPT",A."PLANOURPROD",A."PLANOURPRODOPT",A."FACTDOG",A."FACTDOGWITHFOR",A."FACTPROD",A."ETRAN_NUM",A."ETRAN_DATE",A."ETRAN_SOGL",A."GU12_A_ID",A."STAN_ID",A."PROD_ID_NPR",A."KOD_ISU",
  DECODE(SIGN(A.TONN_DECLARED-A.TONN_LOADED),1,A.TONN_DECLARED-A.TONN_LOADED,0) as TONN_REE,
  0 as PRIORITY -- Приоритет не определен
  , for_reestr.GrafikToStr(a.NOM_ZD,DECODE(b.USE_GRAFIK,1,b.GRAFIK_TO,TO_DATE('31.12.2200','dd.mm.yyyy'))) as GU12_GRAFIK
  , for_reestr.GetLoadAbbr(a.NOM_ZD) as GU12_LOAD_ABBR
FROM V_REE_MONTH A, V_TEMP_REESTR_PARAMS b
-- Ограничения по остатку
WHERE (A.tonn_declared - A.tonn_loaded)>=
  (CASE
     WHEN A.load_abbr IN ('САМ','КНТ') THEN 0.5
	 WHEN SUBSTR(A.kind_npr,1,3) in ('130','131') THEN 30
	 ELSE 40
   END);


--
-- V_REESTR_AKCIZ_BY_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REESTR_AKCIZ_BY_SF
(BEGIN_DATE, END_DATE, OWNER_NAME, OWNER_INN, OWNER_KPP, 
 OWNER_EX_SVID, PLAT_NAME, PLAT_INN, PLAT_KPP, PLAT_EX_SVID, 
 PROD_NAME, PROD_KOD, PROD_ORD, NOM_SF, DATE_VYP_SF, 
 VES)
AS 
SELECT /*+ ORDERED INDEX(kvit) USE_NL(r,kvit,bills) */
  r.BEGIN_DATE,
  r.END_DATE,
  owner.SF_NAME as OWNER_NAME,
  owner.INN as OWNER_INN,
  owner.KPP as OWNER_KPP,
  'серия ' || owner_akciz.EX_SVID_PREF || ' N ' || owner_akciz.EX_SVID_NUMB as OWNER_EX_SVID,
  plat.SF_NAME as PLAT_NAME,
  plat.INN as PLAT_INN,
  Plat.KPP as PLAT_KPP,
  'серия ' || plat_akciz.EX_SVID_PREF || ' N ' || plat_akciz.EX_SVID_NUMB as PLAT_EX_SVID,
  prod_akciz.GROUP_NAME as prod_name,
  prod_akciz.GROUP_ABBR as prod_kod,
  prod_akciz.GROUP_ORDER as prod_ord,
  bills.NOM_SF,
  bills.DATE_VYP_SF,
  SUM(kvit.VES_BRUTTO) as VES
FROM (select * from v_master_reports WHERE NLS_UPPER(REPORT_FILE)='REESTR_AKCIZ_BY_SF.XLS') r, 
  kvit, 
  bills,
  kls_predpr owner, -- Продавец 
  (
  SELECT a.PLAT_ID,MAX(EX_SVID_PREF) as EX_SVID_PREF,MAX(EX_SVID_NUMB) as EX_SVID_NUMB
     FROM kls_predpr_akciz a, (select * from v_master_reports WHERE NLS_UPPER(REPORT_FILE)='REESTR_AKCIZ_BY_SF.XLS') r
    WHERE a.DATE_BEG<=r.END_DATE
      AND a.DATE_END>=r.BEGIN_DATE
   AND a.EX_SVID=1
   GROUP BY a.PLAT_ID   
  ) owner_akciz, -- Акцизное свидетельство продавца 
  kls_dog, -- Договор 
  kls_predpr plat, -- Покупатель
  (
  SELECT a.PLAT_ID,MAX(EX_SVID_PREF) as EX_SVID_PREF,MAX(EX_SVID_NUMB) as EX_SVID_NUMB
     FROM kls_predpr_akciz a, (select * from v_master_reports WHERE NLS_UPPER(REPORT_FILE)='REESTR_AKCIZ_BY_SF.XLS') r
    WHERE a.DATE_BEG<=r.END_DATE
      AND a.DATE_END>=r.BEGIN_DATE
   AND a.EX_SVID=1
   GROUP BY a.PLAT_ID   
  ) plat_akciz, -- Акцизное свидетельство ппокупателя 
  (select ds.PROD_ID_NPR, gr.ID, gr.GROUP_ABBR, gr.GROUP_ORDER, gr.GROUP_NAME 
     from kls_prod_groups_desc ds, kls_prod_groups gr 
    where ds.PROD_GROUPS_ID=gr.ID and gr.prod_type_grp_id=6) prod_akciz -- Подакцизные н/пр
WHERE kvit.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND bills.NOM_DOK=kvit.BILL_ID
  AND bills.owner_id=owner.ID
  AND bills.dog_id=kls_dog.ID
  AND kls_dog.PREDPR_ID=plat.ID
  AND kvit.PROD_ID_NPR=prod_akciz.PROD_ID_NPR
  AND owner.ID=owner_akciz.PLAT_ID(+)
  AND plat.ID=plat_akciz.PLAT_ID(+)
  AND plat.ID=r.PLAT_ID
GROUP BY
  r.BEGIN_DATE,
  r.END_DATE,
  owner.SF_NAME,
  owner.INN,
  owner.KPP,
  'серия ' || owner_akciz.EX_SVID_PREF || ' N ' || owner_akciz.EX_SVID_NUMB,
  plat.SF_NAME,
  plat.INN,
  Plat.KPP,
  'серия ' || plat_akciz.EX_SVID_PREF || ' N ' || plat_akciz.EX_SVID_NUMB,
  prod_akciz.GROUP_NAME,
  prod_akciz.GROUP_ABBR,
  prod_akciz.GROUP_ORDER,
  bills.NOM_SF,
  bills.DATE_VYP_SF
ORDER BY 
  prod_akciz.GROUP_ORDER,
  bills.DATE_VYP_SF,
  bills.NOM_SF;


--
-- V_REESTR_RAIL_DOG_RGD_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REESTR_RAIL_DOG_RGD_SF
(KVIT_ID, DATE_KVIT, NOM_SCH, DATE_SCH, NUM_PER, 
 DATA_PER, SHORT_NAME, NOM_SF, DATE_VYP_SF, NUM_KVIT, 
 TAR_UNP, TAR_UNP_NDS, TAR_NDS_UNP, TAR_RGD, TAR_RGD_NDS, 
 TAR_NDS_RGD)
AS 
SELECT /*+ ORDERED */                        /* Охрана - Есть реестр от РЖД */
       k.ID, k.date_kvit, gd_schet.nom_sch, gd_schet.date_sch, reestr.num_per,
       reestr.data_per, p.short_name, b.nom_sf, b.date_vyp_sf, k.num_kvit,
       DECODE (SIGN (reestr.GUARD), -1, 0, k.tarif_guard) AS tar_unp,
       DECODE (SIGN (reestr.GUARD), -1, 0, k.tarif_guard_nds) AS tar_unp_nds,
       DECODE (SIGN (reestr.GUARD),
               -1, 0,
               k.tarif_guard + k.tarif_guard_nds
              ) AS tar_nds_unp,
       reestr.GUARD AS tar_rgd, reestr.guardnds - reestr.GUARD AS tar_rgd_nds,
       reestr.guardnds AS tar_nds_rgd
  FROM MASTER.kvit k,
       MASTER.bills b,
       MASTER.kls_dog d,
       MASTER.kls_predpr p,
       MASTER.reestr_rail reestr,
       (SELECT DISTINCT nom_sch, date_sch, nom_perech, dat_perech, r21, kst
                   FROM MASTER.reestr_rail_rgd_sf
                  WHERE r21 = 95 AND kst = 285706) gd_schet
 WHERE k.bill_id = b.nom_dok
   AND b.dog_id = d.ID
   AND d.predpr_id = p.ID
   AND reestr.data_per = gd_schet.dat_perech
   AND k.num_kvit = reestr.num_kvit
   AND reestr.num_per = gd_schet.nom_perech
   AND k.perech_guard_num = reestr.num_per
   AND k.perech_guard_date = reestr.data_per
   AND k.tarif_guard <> 0
   AND reestr.GUARD <> 0
--   and k.date_kvit between to_date('01.07.2005','dd.mm.yyyy') and to_date('31.07.2005','dd.mm.yyyy')
UNION ALL
SELECT /*+ ORDERED */                        /* Охрана - Нет реестра от РЖД */
       k.ID, k.date_kvit, NULL AS nom_sch, NULL AS date_sch,
       k.perech_guard_num AS num_per, k.perech_guard_date AS data_per,
       p.short_name, b.nom_sf, b.date_vyp_sf, k.num_kvit,
       k.tarif_guard AS tar_unp, k.tarif_guard_nds AS tar_unp_nds,
       k.tarif_guard + k.tarif_guard_nds AS tar_nds_unp, 0 AS tar_rgd,
       0 AS tar_rgd_nds, 0 AS tar_nds_rgd
  FROM MASTER.kvit k, MASTER.bills b, MASTER.kls_dog d, MASTER.kls_predpr p
 WHERE k.bill_id = b.nom_dok
   AND b.dog_id = d.ID
   AND d.predpr_id = p.ID
   AND NOT EXISTS (
          SELECT NULL
            FROM MASTER.reestr_rail reestr,
                 MASTER.reestr_rail_rgd_sf gd_schet
           WHERE reestr.data_per = gd_schet.dat_perech
             AND k.num_kvit = reestr.num_kvit
             AND reestr.num_per = gd_schet.nom_perech
             AND k.perech_guard_num = reestr.num_per
             AND k.perech_guard_date = reestr.data_per
             AND reestr.GUARD <> 0
             AND gd_schet.r21 = 95
             AND gd_schet.kst = 285706)
   AND k.tarif_guard <> 0
--   and k.date_kvit between to_date('01.07.2005','dd.mm.yyyy') and to_date('31.07.2005','dd.mm.yyyy')
UNION ALL
SELECT /*+ ORDERED */                         /* Тариф - Есть реестр от РЖД */
       k.ID, k.date_kvit, gd_schet.nom_sch, gd_schet.date_sch, reestr.num_per,
       reestr.data_per, p.short_name, b.nom_sf, b.date_vyp_sf, k.num_kvit,
       DECODE (SIGN (reestr.tarif), -1, 0, k.tarif) AS tar_unp,
       DECODE (SIGN (reestr.tarif), -1, 0, k.tarif_nds) AS tar_unp_nds,
       DECODE (SIGN (reestr.tarif),
               -1, 0,
               k.tarif + k.tarif_nds
              ) AS tar_nds_unp,
       reestr.tarif AS tar_rgd, reestr.tarnds - reestr.tarif AS tar_rgd_nds,
       reestr.tarnds AS tar_nds_rgd
  FROM MASTER.kvit k,
       MASTER.bills b,
       MASTER.kls_dog d,
       MASTER.kls_predpr p,
       MASTER.reestr_rail reestr,
       (SELECT DISTINCT nom_sch, date_sch, nom_perech, dat_perech, r21, kst
                   FROM MASTER.reestr_rail_rgd_sf
                  WHERE r21 = 95 AND kst = 285706) gd_schet
 WHERE k.bill_id = b.nom_dok
   AND b.dog_id = d.ID
   AND d.predpr_id = p.ID
   AND reestr.data_per = gd_schet.dat_perech
   AND k.num_kvit = reestr.num_kvit
   AND reestr.num_per = gd_schet.nom_perech
   AND k.perech_texpd_num = reestr.num_per
   AND k.perech_texpd_date = reestr.data_per
   AND k.tarif <> 0
   AND reestr.tarif <> 0
   AND gd_schet.r21 = 95
   AND gd_schet.kst = 285706
--   and k.date_kvit between to_date('01.07.2005','dd.mm.yyyy') and to_date('31.07.2005','dd.mm.yyyy')
UNION ALL
SELECT /*+ RULE */                            /* Тариф - Нет реестра от РЖД */
       k.ID, k.date_kvit, NULL AS nom_sch, NULL AS date_sch,
       k.perech_texpd_num AS num_per, k.perech_texpd_date AS data_per,
       p.short_name, b.nom_sf, b.date_vyp_sf, k.num_kvit, k.tarif AS tar_unp,
       k.tarif_nds AS tar_unp_nds, k.tarif + k.tarif_nds AS tar_nds_unp,
       0 AS tar_rgd, 0 AS tar_rgd_nds, 0 AS tar_nds_rgd
  FROM MASTER.kvit k, MASTER.bills b, MASTER.kls_dog d, MASTER.kls_predpr p
 WHERE k.bill_id = b.nom_dok
   AND b.dog_id = d.ID
   AND d.predpr_id = p.ID
   AND NOT EXISTS (
          SELECT NULL
            FROM MASTER.reestr_rail reestr,
                 MASTER.reestr_rail_rgd_sf gd_schet
           WHERE reestr.data_per = gd_schet.dat_perech
             AND k.num_kvit = reestr.num_kvit
             AND reestr.num_per = gd_schet.nom_perech
             AND k.perech_texpd_num = reestr.num_per
             AND k.perech_texpd_date = reestr.data_per
             AND reestr.tarif <> 0
             AND gd_schet.r21 = 95
             AND gd_schet.kst = 285706)
   AND k.tarif <> 0
-- and k.date_kvit between to_date('01.07.2005','dd.mm.yyyy') and to_date('31.07.2005','dd.mm.yyyy')
;


--
-- V_RENEW_KVIT_DATE_VIR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RENEW_KVIT_DATE_VIR
(DATE_PLAN, BILL_ID, KVIT_ID, DATE_VIR, NOM_SF_POKUP, 
 NOM_DOK_POKUP, BILL_POS_ID, VES_BRUTTO, VES, VES_CIST, 
 VZLIV, KOL_NET, SUM_PROD, SUM_PROD_NDS, SUM_AKCIZ, 
 TARIF_ORIG, TARIF_ALT, TARIF, TARIF19, TARIF_NDS, 
 TARIF_GUARD, TARIF_GUARD_NDS, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, 
 SUM_VOZN12_NDS, SUM_STRAH, VES_BRUTTO_ALL, VES_ALL, VES_CIST_ALL, 
 VZLIV_ALL, KOL_NET_ALL, SUM_PROD_ALL, SUM_PROD_NDS_ALL, SUM_AKCIZ_ALL, 
 TARIF_ORIG_ALL, TARIF_ALT_ALL, TARIF_ALL, TARIF19_ALL, TARIF_NDS_ALL, 
 TARIF_GUARD_ALL, TARIF_GUARD_NDS_ALL, SUM_VOZN11_ALL, SUM_VOZN11_NDS_ALL, SUM_VOZN12_ALL, 
 SUM_VOZN12_NDS_ALL, SUM_STRAH_ALL)
AS 
SELECT /*+ ORDERED INDEX(a) USE_NL(a,b) */
  a.month as DATE_PLAN,
  a.IDINVOICE as BILL_ID,
  a.ID as KVIT_ID,
  a.PERIOD as DATE_VIR,
  a.BUYINVC as NOM_SF_POKUP,
  NULL as NOM_DOK_POKUP,
  NVL(b.BILL_POS_ID,1) as BILL_POS_ID,
  a.QUAN as VES_BRUTTO,
  ROUND(b.VES/b.VES_BRUTTO*a.QUAN,3) as VES,
  ROUND(b.VES_CIST/b.VES_BRUTTO*a.QUAN,3) as VES_CIST,
  ROUND(b.VZLIV/b.VES_BRUTTO*a.QUAN,0) as VZLIV,
  ROUND(NVL(b.KOL_NET,0)/b.VES_BRUTTO*a.QUAN,6) as KOL_NET,
  ROUND(b.SUM_PROD/b.VES_BRUTTO*a.QUAN,2) as SUM_PROD,
  ROUND(b.SUM_PROD_NDS/b.VES_BRUTTO*a.QUAN,2) as SUM_PROD_NDS,
  ROUND(b.SUM_AKCIZ/b.VES_BRUTTO*a.QUAN,2) as SUM_AKCIZ,
  ROUND(b.TARIF_ORIG/b.VES_BRUTTO*a.QUAN,2) as TARIF_ORIG,
  ROUND(b.TARIF_ALT/b.VES_BRUTTO*a.QUAN,2) as TARIF_ALT,
  ROUND(b.TARIF/b.VES_BRUTTO*a.QUAN,2) as TARIF,
  ROUND(b.TARIF19/b.VES_BRUTTO*a.QUAN,2) as TARIF19,
  ROUND(b.TARIF_NDS/b.VES_BRUTTO*a.QUAN,2) as TARIF_NDS,
  ROUND(b.TARIF_GUARD/b.VES_BRUTTO*a.QUAN,2) as TARIF_GUARD,
  ROUND(b.TARIF_GUARD_NDS/b.VES_BRUTTO*a.QUAN,2) as TARIF_GUARD_NDS,
  ROUND(b.SUM_VOZN11/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN11,
  ROUND(b.SUM_VOZN11_NDS/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN11_NDS,
  ROUND(b.SUM_VOZN12/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN12,
  ROUND(b.SUM_VOZN12_NDS/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN12_NDS,
  ROUND(b.SUM_STRAH/b.VES_BRUTTO*a.QUAN,2) as SUM_STRAH,
  b.VES_BRUTTO as VES_BRUTTO_ALL,
  b.VES as VES_ALL,
  b.VES_CIST as VES_CIST_ALL,
  b.VZLIV as VZLIV_ALL,
  NVL(b.KOL_NET,0) as KOL_NET_ALL,
  b.SUM_PROD as SUM_PROD_ALL,
  b.SUM_PROD_NDS as SUM_PROD_NDS_ALL,
  b.SUM_AKCIZ as SUM_AKCIZ_ALL,
  b.TARIF_ORIG as TARIF_ORIG_ALL,
  b.TARIF_ALT as TARIF_ALT_ALL,
  b.TARIF as TARIF_ALL,
  b.TARIF19 as TARIF19_ALL,
  b.TARIF_NDS as TARIF_NDS_ALL,
  b.TARIF_GUARD as TARIF_GUARD_ALL,
  b.TARIF_GUARD_NDS as TARIF_GUARD_NDS_ALL,
  b.SUM_VOZN11 as SUM_VOZN11_ALL,
  b.SUM_VOZN11_NDS as SUM_VOZN11_NDS_ALL,
  b.SUM_VOZN12 as SUM_VOZN12_ALL,
  b.SUM_VOZN12_NDS as SUM_VOZN12_NDS_ALL,
  b.SUM_STRAH as SUM_STRAH_ALL
 FROM moveprod a, kvit b
WHERE a.IDINVOICE=b.BILL_ID
  AND a.ID=b.ID
  AND a.month>=TO_DATE('01.01.2005','dd.mm.yyyy')
  AND a.oper<>1
UNION
SELECT /*+ ORDERED INDEX(a) USE_NL(a,b) */
  a.month as DATE_PLAN,
  a.IDINVOICE as BILL_ID,
  a.ID as KVIT_ID,
  a.PERIOD as DATE_VIR,
  a.BUYINVC as NOM_SF_POKUP,
  NULL as NOM_DOK_POKUP,
  NVL(b.BILL_POS_ID,1) as BILL_POS_ID,
  a.QUAN as VES_BRUTTO,
  ROUND(b.VES/b.VES_BRUTTO*a.QUAN,3) as VES,
  ROUND(b.VES_CIST/b.VES_BRUTTO*a.QUAN,3) as VES_CIST,
  ROUND(b.VZLIV/b.VES_BRUTTO*a.QUAN,0) as VZLIV,
  ROUND(NVL(b.KOL_NET,0)/b.VES_BRUTTO*a.QUAN,6) as KOL_NET,
  ROUND(b.SUM_PROD/b.VES_BRUTTO*a.QUAN,2) as SUM_PROD,
  ROUND(b.SUM_PROD_NDS/b.VES_BRUTTO*a.QUAN,2) as SUM_PROD_NDS,
  ROUND(b.SUM_AKCIZ/b.VES_BRUTTO*a.QUAN,2) as SUM_AKCIZ,
  ROUND(b.TARIF_ORIG/b.VES_BRUTTO*a.QUAN,2) as TARIF_ORIG,
  ROUND(b.TARIF_ALT/b.VES_BRUTTO*a.QUAN,2) as TARIF_ALT,
  ROUND(b.TARIF/b.VES_BRUTTO*a.QUAN,2) as TARIF,
  ROUND(b.TARIF19/b.VES_BRUTTO*a.QUAN,2) as TARIF19,
  ROUND(b.TARIF_NDS/b.VES_BRUTTO*a.QUAN,2) as TARIF_NDS,
  ROUND(b.TARIF_GUARD/b.VES_BRUTTO*a.QUAN,2) as TARIF_GUARD,
  ROUND(b.TARIF_GUARD_NDS/b.VES_BRUTTO*a.QUAN,2) as TARIF_GUARD_NDS,
  ROUND(b.SUM_VOZN11/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN11,
  ROUND(b.SUM_VOZN11_NDS/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN11_NDS,
  ROUND(b.SUM_VOZN12/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN12,
  ROUND(b.SUM_VOZN12_NDS/b.VES_BRUTTO*a.QUAN,2) as SUM_VOZN12_NDS,
  ROUND(b.SUM_STRAH/b.VES_BRUTTO*a.QUAN,2) as SUM_STRAH,
  b.VES_BRUTTO as VES_BRUTTO_ALL,
  b.VES as VES_ALL,
  b.VES_CIST as VES_CIST_ALL,
  b.VZLIV as VZLIV_ALL,
  NVL(b.KOL_NET,0) as KOL_NET_ALL,
  b.SUM_PROD as SUM_PROD_ALL,
  b.SUM_PROD_NDS as SUM_PROD_NDS_ALL,
  b.SUM_AKCIZ as SUM_AKCIZ_ALL,
  b.TARIF_ORIG as TARIF_ORIG_ALL,
  b.TARIF_ALT as TARIF_ALT_ALL,
  b.TARIF as TARIF_ALL,
  b.TARIF19 as TARIF19_ALL,
  b.TARIF_NDS as TARIF_NDS_ALL,
  b.TARIF_GUARD as TARIF_GUARD_ALL,
  b.TARIF_GUARD_NDS as TARIF_GUARD_NDS_ALL,
  b.SUM_VOZN11 as SUM_VOZN11_ALL,
  b.SUM_VOZN11_NDS as SUM_VOZN11_NDS_ALL,
  b.SUM_VOZN12 as SUM_VOZN12_ALL,
  b.SUM_VOZN12_NDS as SUM_VOZN12_NDS_ALL,
  b.SUM_STRAH as SUM_STRAH_ALL
 FROM moveprod a, dop_kvit b
WHERE a.IDINVOICE=b.BILL_ID
  AND a.ID=b.ID
  AND a.month>=TO_DATE('01.01.2005','dd.mm.yyyy')
  AND a.oper<>1;


--
-- V_RITM_POST_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RITM_POST_FACT
(PLAT_ID, PLAT_NAME, NUM_DECADA, FACT_VES)
AS 
SELECT 
  --Анализ ритмичности: Факт поставок 
  PLAT_ID, 
  PLAT_NAME, 
  NUM_DECADA, 
  ROUND(SUM(FACT_VES),0) AS FACT_VES 
FROM 
( 
  SELECT /*+ RULE */ 
    plat.ID AS PLAT_ID, 
    plat.PREDPR_NAME AS PLAT_NAME, 
    (CASE 
        WHEN TO_NUMBER(TO_CHAR(KVIT.DATE_OTGR,'DD'))<=10 THEN 1 
        WHEN TO_NUMBER(TO_CHAR(KVIT.DATE_OTGR,'DD'))<=20 THEN 2 
  	    ELSE 3 
  	 END) AS NUM_DECADA, 
    KVIT.VES_BRUTTO AS FACT_VES 
  FROM KVIT,MONTH,KLS_DOG,KLS_PREDPR plat, 
           (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r 
  WHERE 
	KVIT.NOM_ZD=MONTH.NOM_ZD AND MONTH.DOG_ID=KLS_DOG.ID AND KLS_DOG.PREDPR_ID=plat.ID AND 
	KVIT.DATE_OTGR BETWEEN r.BEGIN_DATE AND r.END_DATE AND 
    KVIT.PROD_ID_NPR<>'90000' 
    AND KLS_DOG.AGENT_ID IN (8,1,4175) AND plat.ID<>1334 
    AND plat.ID=DECODE(r.IS_UNP,1,plat.ID,2641) 
) 
GROUP BY 
  PLAT_ID, 
  PLAT_NAME, 
  NUM_DECADA     
ORDER BY 
  PLAT_ID, 
  PLAT_NAME, 
  NUM_DECADA;


--
-- V_RUI_ISU_OTGRWITHSUMM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RUI_ISU_OTGRWITHSUMM
(DATE_KVIT, CENA, CENA_OTP, NOM_ZD, NUM_CIST, 
 NUM_KVIT, SUM_AKCIZ, SUM_PROD, SUM_PROD_NDS, SUM_STRAH, 
 SUM_VOZ, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, 
 SVED_NUM, TARIF, TARIF19, TARIF_ALT, TARIF_GUARD, 
 TARIF_GUARD_NDS, TARIF_NDS, TARIF_ORIG, VES, SHORT_NAME, 
 DOG_NUMBER, NAME_NPR)
AS 
SELECT k.date_kvit, k.cena, k.cena_otp, k.nom_zd, k.num_cist, k.num_kvit,
       k.sum_akciz, k.sum_prod, k.sum_prod_nds, k.sum_strah, k.sum_voz,
       k.sum_vozn11, k.sum_vozn11_nds, k.sum_vozn12, k.sum_vozn12_nds,
       k.sved_num, k.tarif, k.tarif19, k.tarif_alt, k.tarif_guard,
       k.tarif_guard_nds, k.tarif_nds, k.tarif_orig, k.ves, p.short_name,
       d.dog_number, prod.name_npr
  FROM kvit k, MONTH m, kls_predpr p, kls_prod prod, kls_dog d
 WHERE m.nom_zd = k.nom_zd
   AND m.dog_id = d.ID
   AND d.predpr_id = p.ID
   AND k.prod_id_npr = prod.id_npr
   AND k.date_kvit >= '01-jul-2006'
   AND k.num_kvit <> 99999
   and m.poluch_id<>8;


--
-- V_RUI_OTGR_RASST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RUI_OTGR_RASST
(AGENT_ID, DOG_NUMBER, DATE_KVIT, NUM_CIST, NUM_KVIT, 
 VES, RAST, SOBSTV, STAN_NAME, NAME_NPR, 
 OW, SOB, REP_OWNER_ID)
AS 
SELECT /*+ ORDERED INDEX(k) USE_NL(m,k,s_nazn,dog,prod,vo,KLS_VAGOWNER,vow,vsob) */
       dog.agent_id, dog.short_number AS dog_number, k.date_kvit, k.num_cist,
       k.num_kvit, k.ves, s_nazn.rast,
       DECODE (vow.ID - vsob.ID, 0, 1, 0) AS sobstv,
                                                    /* Собственные - 1, Арендованные - 0*/
                                                    s_nazn.stan_name,
       prod.name_npr, vow.vagowner_name AS ow, vsob.vagowner_name AS sob,
       NVL (for_temp.get_as_num ('LC_VAGOWNER', 'MASTER', 'GD_OTGR_RASST.XLS'),
            0
           ) AS rep_owner_id
  FROM kvit k,
       MONTH m,
       kls_stan s_nazn,
       kls_dog dog,
       kls_prod prod,
       kls_vid_otgr vo,
       kls_vagowner,
       kls_vagowner vow,
       kls_vagowner vsob
 WHERE (m.nom_zd = k.nom_zd)
   AND (s_nazn.ID = m.stan_id)
   AND (dog.ID = m.dog_id)
   AND (k.prod_id_npr = prod.id_npr)
   AND (m.load_abbr = vo.load_abbr)
   AND (vo.load_type_id = 1)
   AND (k.vagowner_id = kls_vagowner.ID)
   AND (kls_vagowner.owner_id = vow.ID)
   AND (kls_vagowner.sobstv_id = vsob.ID)
   AND vow.ID =
          DECODE (for_temp.get_as_num ('LC_VAGOWNER',
                                       'MASTER',
                                       'GD_OTGR_RASST.XLS'
                                      ),
                  0, vow.ID,
                  for_temp.get_as_num ('LC_VAGOWNER',
                                       'MASTER',
                                       'GD_OTGR_RASST.XLS'
                                      )
                 )
--   AND (k.date_kvit >= TO_DATE ('01.01.2005', 'dd.mm.yyyy'))
   AND (k.prod_id_npr <> '90000')
   AND (m.nazn_otg_id <> 5)
   AND k.vagowner_id <> 3
   AND k.tex_pd_id <> 7242958;


--
-- V_RUI_OTGR_RASST_STOROGEV  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RUI_OTGR_RASST_STOROGEV
(DATE_KVIT, VES, RAST, SOBSTV, KIND_NPR)
AS 
SELECT /*+ ORDERED */
       k.date_kvit, k.ves, s_nazn.rast, 
	   DECODE (vow.sobstv_ID, 3, 1, 0) AS sobstv,/* МПС - 1, остальные 0*/
       DECODE (vt.ID, 6, 1, 0) AS kind_npr /*Цистерна 6 - 1, остальные 0*/ 
  FROM MONTH m,
       KVIT k,
       KLS_STAN s_nazn,
       KLS_VID_OTGR vo,
       KLS_VAGOWNER vow,
	   KLS_VAGONTYPE vt
 WHERE (m.nom_zd = k.nom_zd)
   AND (s_nazn.ID = m.stan_id)
   AND ((m.load_abbr = vo.load_abbr) AND (vo.load_type_id = 1))
   AND (k.vagowner_id = vow.ID) and k.VAGONTYPE_ID=vt.ID
   and k.ves>0
   AND (k.date_kvit >= TO_DATE ('01.01.2002', 'dd.mm.yyyy'))
   AND (k.prod_id_npr <> '90000')
   AND (m.nazn_otg_id <> 5);


--
-- V_RUI_OTGR_RASST_TM  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RUI_OTGR_RASST_TM
(AGENT_ID, DOG_NUMBER, DATE_KVIT, NUM_CIST, NUM_KVIT, 
 VES, RAST, SOBSTV, STAN_NAME, NAME_NPR, 
 OW, SOB, REP_OWNER_ID)
AS 
SELECT /*+ ORDERED INDEX(k) USE_NL(m,k,s_nazn,dog,prod,vo,KLS_VAGOWNER,vow,vsob) */
       dog.agent_id, dog.short_number AS dog_number, k.date_kvit, k.num_cist,
       k.num_kvit, k.ves, s_nazn.rast,
       DECODE (vow.ID - vsob.ID, 0, 1, 0) AS sobstv,
                                                    /* Собственные - 1, Арендованные - 0*/
                                                    s_nazn.stan_name,
       prod.name_npr, vow.vagowner_name AS ow, vsob.vagowner_name AS sob,
       2 AS rep_owner_id
  FROM kvit k,
       MONTH m,
       kls_stan s_nazn,
       kls_dog dog,
       kls_prod prod,
       kls_vid_otgr vo,
       kls_vagowner,
       kls_vagowner vow,
       kls_vagowner vsob
 WHERE (m.nom_zd = k.nom_zd)
   AND (s_nazn.ID = m.stan_id)
   AND (dog.ID = m.dog_id)
   AND (k.prod_id_npr = prod.id_npr)
   AND (m.load_abbr = vo.load_abbr)
   AND (vo.load_type_id = 1)
   AND (k.vagowner_id = kls_vagowner.ID)
   AND (kls_vagowner.owner_id = vow.ID)
   AND (kls_vagowner.sobstv_id = vsob.ID)
   AND vow.ID in(2,33)
   AND (k.prod_id_npr <> '90000')
   AND (m.nazn_otg_id <> 5)
   AND k.vagowner_id <> 3
   AND k.tex_pd_id <> 7242958;


--
-- V_SBYTREPORT_AN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SBYTREPORT_AN
(PREDPR_NAME, DOG_NUMBER, LONG_NAME_NPR, NOM_ZD, DATE_PLAN, 
 INPUT_DATE, TONN_DECLARED, DATE_OTGR, VES)
AS 
SELECT 
  kls_predpr.predpr_name, 
  kls_dog.dog_number,
  gr_prod.LONG_NAME_NPR,
  month.nom_zd,
  month.DATE_PLAN,
  month.INPUT_DATE,
  month.TONN_DECLARED,
  kvit.DATE_OTGR,
  sum(kvit.VES)
  FROM MONTH, kls_dog, kls_predpr, kls_prod, kvit, kls_prod gr_prod
WHERE 
 MONTH.dog_id = kls_dog.id AND 
 kls_predpr.id = kls_dog.predpr_id and
 month.PROD_ID_NPR=kls_prod.ID_NPR and
 month.nom_zd=kvit.nom_zd and
 month.LOAD_ABBR='САМ' and 
 month.date_plan>=SYSDATE-100 and
 kvit.MESTO_ID=2 AND
 kls_prod.ID_GROUP_NPR=gr_prod.id_npr
GROUP BY
  kls_predpr.predpr_name, 
  kls_dog.dog_number,
  gr_prod.LONG_NAME_NPR,
  month.nom_zd,
  month.DATE_PLAN,
  month.INPUT_DATE,
  month.TONN_DECLARED,
  kvit.DATE_OTGR;


--
-- V_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF
(NOM_SF, NOM_DOK, DATE_VYP_SF, VES, VES_BRUTTO, 
 KOL, DOG_NUMBER, SHORT_NAME, NAME_STAN, NAME_POLUCH, 
 ABBR_NPR, NOM_ZD, LOAD_TYPE_ID, SUMMA_DOK, PROD_SUM, 
 ID_NPR, ID_GROUP_NPR, DOG_ID, PLAT_ID, POLUCH_ID, 
 STAN_KOD, GROTP_ID, NPR_SOBSTV_ID, DATE_KVIT, KOL_DN, 
 DATE_PLAT)
AS 
SELECT /*+ ORDERED USE_NL(KVIT,POLUCH,MONTH,KLS_DOG,PLAT,KLS_STAN,KLS_GDOR,KLS_PROD,KLS_VID_OTGR,BILLS) */
       /* RULE */
  BILLS.NOM_SF,
  BILLS.NOM_DOK,
  BILLS.DATE_VYP_SF,
  SUM(KVIT.VES) AS ves,
  SUM(KVIT.VES_BRUTTO) AS ves_brutto,
  COUNT(KVIT.VES) AS kol,
  KLS_DOG.DOG_NUMBER,
  PLAT.SHORT_NAME,
  KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME AS name_stan,
  poluch.PREDPR_NAME || ' ' || MONTH.gr4 AS name_poluch,
  KLS_PROD.ABBR_NPR,
  BILLS.nom_zd,
  KLS_VID_OTGR.load_type_id,
  BILLS.SUMMA_DOK,
  BILLS.PROD_SUM,
  KLS_PROD.ID_NPR,
  KLS_PROD.ID_GROUP_NPR,
  KLS_DOG.ID,
  plat.ID AS plat_id,
  poluch.ID AS poluch_id,
  KLS_STAN.STAN_KOD,
  MONTH.GROTP_ID,
  MONTH.NPR_SOBSTV_ID,
  BILLS.DATE_KVIT,
  BILLS.KOL_DN,
  BILLS.DATE_PLAT
FROM
  KVIT,/*V_USER_BILLS*/ BILLS,MONTH,KLS_DOG,KLS_PREDPR PLAT,KLS_PREDPR POLUCH,
  KLS_STAN,KLS_GDOR,KLS_PROD,KLS_VID_OTGR
WHERE
  (POLUCH.ID(+) = MONTH.POLUCH_ID) AND
  (MONTH.NOM_ZD(+) = BILLS.NOM_ZD) AND
  (KLS_DOG.ID = BILLS.DOG_ID) AND
  (PLAT.ID = KLS_DOG.PREDPR_ID) AND
  (KLS_STAN.ID(+) = MONTH.STAN_ID) AND
  (KLS_GDOR.ID(+) = KLS_STAN.GDOR_ID) AND
  (KLS_PROD.ID_NPR=BILLS.PROD_ID_NPR) AND
  (KLS_VID_OTGR.load_abbr(+)=MONTH.load_abbr) AND
  (BILLS.nom_dok=KVIT.bill_id(+) /*AND BILLS.PROD_ID_NPR=KVIT.PROD_ID_NPR(+)*/)
GROUP BY
  BILLS.NOM_SF,
  BILLS.NOM_DOK,
  BILLS.DATE_VYP_SF,
  KLS_DOG.DOG_NUMBER,
  PLAT.SHORT_NAME,
  KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME,
  poluch.PREDPR_NAME || ' ' || MONTH.gr4,
  KLS_PROD.ABBR_NPR,
  BILLS.nom_zd,
  KLS_VID_OTGR.load_type_id,
  BILLS.SUMMA_DOK,
  BILLS.PROD_SUM,
  KLS_PROD.ID_NPR,
  KLS_PROD.ID_GROUP_NPR,
  KLS_DOG.ID,
  plat.ID,
  poluch.ID,
  KLS_STAN.STAN_KOD,
  MONTH.GROTP_ID,
  MONTH.NPR_SOBSTV_ID,
  BILLS.DATE_KVIT,
  BILLS.KOL_DN,
  BILLS.DATE_PLAT;


--
-- V_SF_CLOSED_FINAL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_CLOSED_FINAL
(VES, D_41, SUM_AKCIZ, D_191, SUM_NALIV, 
 NDC_NAL20, NDC_NAL03, D_441, D_194, D_442, 
 NDC_TR20, NOM_SF, SUM_NACEN, NOM_POR, CLOSE_DATE, 
 DOG_NUMBER, PREDPR_NAME, NAME_NPR)
AS 
select c.VES, c.D_41, c.SUM_AKCIZ, c.D_191, c.SUM_NALIV, c.NDC_NAL20, c.NDC_NAL03,
       c.D_441, c.D_194, c.D_442, c.NDC_TR20, c.NOM_SF,c.SUM_NACEN,
	   c.NOM_POR, c.CLOSE_DATE,d.DOG_NUMBER, o.PREDPR_NAME,p.NAME_NPR
from v_sf_closed c,v_kvit_group k, kls_dog d,kls_predpr o,kls_prod p
where c.NOM_DOK=k.BILL_ID(+) and c.kod_nfp=p.ID_NPR(+) and c.DOG_REALP=d.SHORT_NUMBER and c.KOD_REALP=o.ID;


--
-- V_SF_NAKL_PRINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_NAKL_PRINT
(KOD_PROD, KOD_TU, SCHETF, SF_NO, ID_POZ_PROD, 
 DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, ADDR_PRED_POST, PHONE_POST, 
 INN_NPOST, PLRDOC, DATA_PLRD, PLRDOC_AND_DATE, DOGOVOR, 
 FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, KORS_PRED_PLAT, RS_PRED_PLAT, 
 BIK_PRED_PLAT, BANK_PRED_PLAT, INN_PLAT, GROTPR, GROTPR_ADDR, 
 GRPOL, GRPOL_ADDR, DOPOLN1, DOPOLN2, NAIM_TOV, 
 EDIZM, KOL, CENA, AKCIZ1, SUMMA, 
 AKCIZ2, STNDS, SUMNDS, STGSM, SUMGSM, 
 SUMNPR, ALLNDS, PROISX, GTD, ALLNDS_PROPIS, 
 NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, WITH_STNDS_TXT, BUHANAL, 
 DATE_OTGR, DATE_DOG, BOSS, GLAVBUH, NUM_PROTOKOL, 
 PLAT_OKPO, NAKL_NUM, VES_PROPIS, DOVER_NUM)
AS 
SELECT
  s.kod_prod, s.kod_tu,
  DECODE(NVL(s.linkschf, 0), 0, s.schetf, s.schetf||'/'||
         LTRIM(TO_CHAR(s.linkschf))) ||
         '     от  ' || TO_CHAR(s.data_vyp_sf, 'DD.MM.RRRR')
    AS schetf,
/* 2001/02/05 sulim */ s.schetf, p.id_poz_prod,
  s.data_vyp_sf, s.full_name_npost, s.vystval,
  DECODE(p1.addr_pred, '?', NULL, p1.addr_pred)
    AS addr_pred_post,
  p1.phone AS phone_post,
  s.inn_npost,
  s.plrdoc, s.data_plrd,
/* 2001/01/30 sulim */ rpad(decode(s.data_plrd,null,s.plrdoc,
/* 2001/01/30 sulim */        s.plrdoc||' от '||to_char(s.data_plrd,'dd.mm.rr'))
/* 2001/01/30 sulim */ || sveta.get_av_plrdocs(s.kod_prod,s.kod_tu),300),
  s.dogovor AS dogovor,
  s.full_name_plat,
  p2.addr_pred AS addr_pred_plat,
  p2.phone AS phone_plat,
  pp.BANK_KORS as kors_pred_plat,  ---  @KVS для печати реквизитов в счете
  pt.RS as rs_pred_plat,           ---
  bk.BIK as bik_pred_plat,         ---
  bk.BANK_NAME as bank_pred_plat,  ---
  DECODE(TRANSLATE(SUBSTR(s.inn_plat, 1, 1), 'x1234567890', 'x'),
         NULL, s.inn_plat, ' ')
    AS inn_plat,
  grotpr, grotpr_addr, grpol, grpol_addr,
  s.dopoln1, s.dopoln2,
  p.naim_tov,
  DECODE(p.edizm, '?', NULL, p.edizm)
    AS edizm,
  p.kol, p.cena, p.akciz1, p.summa, nvl(p.akciz2,0) as akciz2,
--  p.stnds,
-- 2001/02/08 sulim --  nvl(p.stnds,0),
/* 2001/02/16 sulim  Обратно из-за: Есть "Ставка=0", а есть "НДС не облаг." */
/* 2001/02/16 sulim */  p.stnds,
  p.sumnds, p.stgsm, p.sumgsm, p.sumnpr, p.allnds,
--/* 2001/02/06 sulim */  p.allnds-nvl(p.sumnpr,0) as sumbeznpr,
  p.proisx,
  DECODE(UPPER(p.proisx),
         'РОССИЯ', '-', p.gtd)
    AS gtd
/* 2001/03/06 sulim */ , sveta.sf_f_get_propisi_sfprod(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.sf_f_get_propisi_sfprodNDS(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.sf_f_get_propisi_sfprodNONDS(s.kod_prod, s.kod_tu)
/* 2001/10/01 sulim */ , decode(stnds,null,decode(nvl(sumnds,0),0,'-','?'),'+')
/* 2001/10/01 sulim */    as with_stnds
/* 2001/10/01 sulim */ , decode(stnds,null,decode(nvl(sumnds,0),0,'НДС не обл.','расчетн.'),'Y')
/* 2001/10/01 sulim */    as with_stnds_txt
/* 2001/10/03 sulim */ , buhanal   /* для критерия суммирования количества */
/* 2002/02/11 vev   */ , date_otgr
/* 2002/02/11 vev   */, DECODE(s.datadog, NULL, NULL,TO_CHAR(s.datadog,' "от" DD.MM.YYYY'))
/* 2002/02/16 vev   */ , sf_signs.boss
/* 2002/02/16 vev   */ , sf_signs.blavbuh
/* 2002/05/22 vev   */ , get_price_protokol(s.kod_prod)
/* 2002/06/19 vev   */ , get_plat_okpo(s.kod_prod)
/* 2002/06/19 vev   */ , get_nakl_num(s.kod_prod)
/* 2002/06/19 vev   */ , sveta.sf_f_get_propisi_ves(s.kod_prod, s.kod_tu)
/* 2002/06/19 vev   */ , get_dover_num(s.kod_prod)
FROM
  sveta.sf_sfak_prod s, sveta.sf_stat0_poz_prod p,
  sveta.sf_kls_pred p1, sveta.sf_kls_pred p2,
  sf_Signs, master.kls_predpr pp,
  predpr_temp pt, kls_bank bk
WHERE
  s.id_npred_post = p1.id_pred
  AND s.id_pred_plat  = p2.id_pred
  AND p.kod_prod = s.kod_prod
  AND p.kod_tu = s.kod_tu
  AND ltrim(rtrim(pp.PREDPR_NAME)) = ltrim(rtrim(p2.FULL_NAME))
  AND ltrim(rtrim(pt.NAIM)) = ltrim(rtrim(pp.PREDPR_NAME))
  AND bk.KORS=pp.BANK_KORS;


--
-- V_SF_PRINT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT
(KOD_PROD, KOD_TU, SCHETF, SF_NO, ORIG_SF_NO, 
 ID_POZ_PROD, DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, ADDR_PRED_POST, 
 PHONE_POST, INN_NPOST, PLRDOC, DATA_PLRD, PLRDOC_AND_DATE, 
 DOGOVOR, FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, KORS_PRED_PLAT, 
 RS_PRED_PLAT, BIK_PRED_PLAT, BANK_PRED_PLAT, INN_PLAT, GROTPR, 
 GROTPR_ADDR, GRPOL, GRPOL_ADDR, DOPOLN1, DOPOLN2, 
 NAIM_TOV, EDIZM, KOL, CENA, AKCIZ1, 
 SUMMA, AKCIZ2, STNDS, SUMNDS, STGSM, 
 SUMGSM, SUMNPR, ALLNDS, PROISX, GTD, 
 ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, WITH_STNDS_TXT, 
 BUHANAL, DATE_OTGR, DATE_DOG, BOSS, GLAVBUH, 
 NUM_PROTOKOL, PLAT_OKPO, NAKL_NUM, VES_PROPIS, DOVER_NUM)
AS 
SELECT
  s.kod_prod, s.kod_tu,
  DECODE(NVL(s.linkschf, 0), 0, s.schetf, s.schetf||'/'||
         LTRIM(TO_CHAR(s.linkschf))) ||
         '     от  ' || TO_CHAR(DECODE(SIGN(s.data_vyp_sf-p.date_otgr),-1,p.date_otgr,s.data_vyp_sf), 'DD.MM.RRRR')
    AS schetf,
/* 2001/02/05 sulim */ s.schetf, V_BILLS.orig_nom_sf, p.id_poz_prod,
  s.data_vyp_sf, s.full_name_npost, s.vystval,
  DECODE(p1.addr_pred, '?', NULL, p1.addr_pred)
    AS addr_pred_post,
  p1.phone AS phone_post,
  s.inn_npost,
  s.plrdoc, s.data_plrd,
/* 2001/01/30 sulim */ RPAD(DECODE(SIGN(p.date_otgr-TO_DATE('01.08.2002','dd.mm.yyyy')),1,'',DECODE(s.data_plrd,NULL,s.plrdoc,
/* 2001/01/30 sulim */        s.plrdoc||' от '||TO_CHAR(s.data_plrd,'dd.mm.rr'))
/* 2001/01/30 sulim */ || sveta.get_av_plrdocs(s.kod_prod,s.kod_tu)),300),
  s.dogovor AS dogovor,
  s.full_name_plat,
  p2.addr_pred AS addr_pred_plat,
  p2.phone AS phone_plat,
  pp.BANK_KORS AS kors_pred_plat,  ---  @KVS для печати реквизитов в счете
  pp.RS AS rs_pred_plat,           ---
  bk.BIK AS bik_pred_plat,         ---
  bk.BANK_NAME AS bank_pred_plat,  ---
  DECODE(TRANSLATE(SUBSTR(s.inn_plat, 1, 1), 'x1234567890', 'x'),
         NULL, s.inn_plat, ' ')
    AS inn_plat,
  grotpr, grotpr_addr, grpol, grpol_addr,
  s.dopoln1, s.dopoln2,
  p.naim_tov,
  DECODE(p.edizm, '?', NULL, p.edizm)
    AS edizm,
  p.kol, p.cena, p.akciz1, p.summa, NVL(p.akciz2,0) AS akciz2,
--  p.stnds,
-- 2001/02/08 sulim --  nvl(p.stnds,0),
/* 2001/02/16 sulim  Обратно из-за: Есть "Ставка=0", а есть "НДС не облаг." */
/* 2001/02/16 sulim */  p.stnds,
  p.sumnds, p.stgsm, p.sumgsm, p.sumnpr, p.allnds,
--/* 2001/02/06 sulim */  p.allnds-nvl(p.sumnpr,0) as sumbeznpr,
  p.proisx,
  DECODE(UPPER(p.proisx),
         'РОССИЯ', '-', p.gtd)
    AS gtd
/* 2001/03/06 sulim */ , sveta.Sf_F_Get_Propisi_Sfprod(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.Sf_F_Get_Propisi_Sfprodnds(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.Sf_F_Get_Propisi_Sfprodnonds(s.kod_prod, s.kod_tu)
/* 2001/10/01 sulim */ , DECODE(stnds,NULL,DECODE(NVL(sumnds,0),0,'-','?'),'+')
/* 2001/10/01 sulim */    AS with_stnds
/* 2001/10/01 sulim */ , DECODE(stnds,NULL,DECODE(NVL(sumnds,0),0,'НДС не обл.','расчетн.'),'Y')
/* 2001/10/01 sulim */    AS with_stnds_txt
/* 2001/10/03 sulim */ , buhanal   /* для критерия суммирования количества */
/* 2002/02/11 vev   */ , date_otgr
/* 2002/02/11 vev   */, DECODE(s.datadog, NULL, NULL,TO_CHAR(s.datadog,' "от" DD.MM.YYYY'))
/* 2002/02/16 vev   */ , SF_SIGNS.boss
/* 2002/02/16 vev   */ , SF_SIGNS.blavbuh
/* 2002/05/22 vev   */ , Get_Price_Protokol(s.kod_prod)
/* 2002/06/19 vev   */ , Get_Plat_Okpo(s.kod_prod)
/* 2002/06/19 vev   */ , Get_Nakl_Num(s.kod_prod)
/* 2002/06/19 vev   */ , sveta.sf_f_get_propisi_ves(s.kod_prod, s.kod_tu)
/* 2002/06/19 vev   */ , Get_Dover_Num(s.kod_prod)
FROM
  sveta.sf_sfak_prod s, sveta.sf_stat0_poz_prod p,
  sveta.sf_kls_pred p1, sveta.sf_kls_pred p2,
  SF_SIGNS, MASTER.KLS_PREDPR pp,
  KLS_BANKS bk, V_BILLS
WHERE s.kod_prod=V_BILLS.nom_dok
  AND s.id_npred_post = p1.id_pred
  AND s.id_pred_plat  = p2.id_pred
  AND p.kod_prod = s.kod_prod
  AND p.kod_tu = s.kod_tu
  AND LTRIM(RTRIM(pp.PREDPR_NAME)) = LTRIM(RTRIM(p2.FULL_NAME))
  AND bk.ID=pp.BANKS_ID;


--
-- V_SF_PRINT_WITH_KVIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT_WITH_KVIT
(KOD_PROD, KOD_TU, SCHETF, SCHETUSL, SF_NO, 
 ORIG_SF_NO, ID_POZ_PROD, DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, 
 ADDR_PRED_POST, PHONE_POST, INN_NPOST, PLRDOC, DATA_PLRD, 
 PLRDOC_AND_DATE, DOGOVOR, FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, 
 KORS_PRED_PLAT, RS_PRED_PLAT, BIK_PRED_PLAT, BANK_PRED_PLAT, INN_PLAT, 
 GROTPR, GROTPR_ADDR, GRPOL, GRPOL_ADDR, DOPOLN1, 
 DOPOLN2, NAIM_TOV, EDIZM, KOL, CENA, 
 AKCIZ1, SUMMA, AKCIZ2, STNDS, SUMNDS, 
 STGSM, SUMGSM, SUMNPR, ALLNDS, PROISX, 
 GTD, ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, 
 WITH_STNDS_TXT, BUHANAL, DATE_OTGR, DATE_DOG, BOSS, 
 GLAVBUH, NUM_PROTOKOL, PLAT_OKPO, NAKL_NUM, VES_PROPIS, 
 DOVER_NUM, KVIT_ID, NUM_CIST, AKCIZ_TXT, DATE_MOS, 
 KPP_PLAT, KPP_POST)
AS 
SELECT 
  s.kod_prod, s.kod_tu, 
  DECODE(NVL(s.linkschf, 0), 0, s.schetf, s.schetf||'/'|| 
         LTRIM(TO_CHAR(s.linkschf))) || 
         '     от  ' || TO_CHAR(DECODE(SIGN(s.data_vyp_sf-p.date_otgr),-1,p.date_otgr,s.data_vyp_sf), 'DD.MM.RRRR') 
    AS schetf, 
/* 2004/02/02 vev     '6' || TO_CHAR(s.data_vyp_sf,'MM') || ' от ' || 
   TO_CHAR(s.data_vyp_sf, 'DD.MM.YYYY') || 'г.' AS schetUsl, */ 
/* 02.06.2004 psv */    TRIM(s.schetf) || ' от ' ||  TO_CHAR(s.data_vyp_sf, 'DD.MM.YYYY') || 'г.' AS schetUsl, 
/* 2001/02/05 sulim */ s.schetf, BILLS.nom_sf, p.id_poz_prod, 
  s.data_vyp_sf, s.full_name_npost, LOWER(s.vystval) AS vystval, 
  DECODE(p1.addr_pred, '?', NULL, p1.addr_pred) 
    AS addr_pred_post, 
  p1.phone AS phone_post, 
  s.inn_npost, 
  s.plrdoc, s.data_plrd, 
/* 2001/01/30 sulim */ RPAD(DECODE(SIGN(p.date_otgr-TO_DATE('01.08.2002','dd.mm.yyyy')),1,'',DECODE(s.data_plrd,NULL,s.plrdoc, 
/* 2001/01/30 sulim */        s.plrdoc||' от '||TO_CHAR(s.data_plrd,'dd.mm.rr')) 
/* 2001/01/30 sulim */ || sveta.get_av_plrdocs(s.kod_prod,s.kod_tu)),300), 
  s.dogovor AS dogovor, 
  s.full_name_plat, 
  p2.addr_pred AS addr_pred_plat, 
  p2.phone AS phone_plat, 
  pp.BANK_KORS AS kors_pred_plat,  ---  @KVS для печати реквизитов в счете 
  pp.RS AS rs_pred_plat,           --- 
  bk.BIK AS bik_pred_plat,         --- 
  bk.BANK_NAME AS bank_pred_plat,  --- 
  DECODE(TRANSLATE(SUBSTR(s.inn_plat, 1, 1), 'x1234567890', 'x'), 
         NULL, s.inn_plat, ' ') 
    AS inn_plat, 
  grotpr, grotpr_addr, grpol, grpol_addr, 
  s.dopoln1, s.dopoln2, 
  p.naim_tov, 
  DECODE(p.edizm, '?', NULL, p.edizm) AS edizm, 
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.kol,DECODE(buhanal,48,p.kol,50,p.kol,68,p.kol,69,p.kol,SIGN(kv.SUM_PROD)*ABS(kv.VES_BRUTTO))) AS kol, 
  p.kol, 
  DECODE(BILLS.prod_id_npr,'10001',NULL,TO_CHAR(p.cena,'9999999.99')), 
  p.akciz1, 
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.summa,DECODE(buhanal,47,0,48,kv.SUM_VOZN11+kv.SUM_VOZN12,50,kv.SUM_VOZN11+kv.SUM_VOZN12,68,DECODE(id_nfprod,'10013',kv.TARIF_GUARD,kv.TARIF),69,kv.SUM_STRAH,kv.SUM_PROD)) AS summa, 
  p.summa, 
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,NVL(p.akciz2,0),DECODE(buhanal,47,0,48,NVL(p.akciz2,0),50,NVL(p.akciz2,0),68,NVL(p.akciz2,0),69,NVL(p.akciz2,0),kv.SUM_AKCIZ)) AS akciz2, 
  NVL(p.akciz2,0) AS akciz2, 
--  p.stnds, 
-- 2001/02/08 sulim --  nvl(p.stnds,0), 
/* 2001/02/16 sulim  Обратно из-за: Есть "Ставка=0", а есть "НДС не облаг." */ 
/* 2001/02/16 sulim */  p.stnds, 
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.sumnds,DECODE(buhanal,47,0,48,kv.SUM_VOZN11_NDS+kv.SUM_VOZN12_NDS,50,kv.SUM_VOZN11_NDS+kv.SUM_VOZN12_NDS,68,DECODE(id_nfprod,'10013',kv.TARIF_GUARD_NDS,kv.TARIF_NDS),69,0,kv.SUM_PROD_NDS)) AS sumnds, 
  p.sumnds, 
  p.stgsm, p.sumgsm, p.sumnpr, 
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.allnds,DECODE(buhanal,47,0,48,kv.SUM_VOZN11+kv.SUM_VOZN11_NDS+kv.SUM_VOZN12+kv.SUM_VOZN12_NDS,50,kv.SUM_VOZN11+kv.SUM_VOZN11_NDS+kv.SUM_VOZN12+kv.SUM_VOZN12_NDS,68,DECODE(id_nfprod,'10013',kv.TARIF_GUARD+kv.TARIF_GUARD_NDS,kv.TARIF+kv.TARIF_NDS),69,kv.SUM_STRAH,kv.SUM_PROD+kv.SUM_AKCIZ+kv.SUM_PROD_NDS)) AS allnds, 
  p.allnds, 
--/* 2001/02/06 sulim */  p.allnds-nvl(p.sumnpr,0) as sumbeznpr, 
/* MYudin временно p.proisx,*/ 
  '-' AS proisx, 
  DECODE(UPPER(p.proisx), 
         'РОССИЯ', '-', p.gtd) 
    AS gtd 
/* 2001/03/06 sulim */ , sveta.Sf_F_Get_Propisi_Sfprod(s.kod_prod, s.kod_tu) 
/* 2002/02/10 vev   */ , sveta.Sf_F_Get_Propisi_Sfprodnds(s.kod_prod, s.kod_tu) 
/* 2002/02/10 vev   */ , sveta.Sf_F_Get_Propisi_Sfprodnonds(s.kod_prod, s.kod_tu) 
/* 2001/10/01 sulim */ , DECODE(stnds,NULL,DECODE(NVL(sumnds,0),0,'-','?'),'+') 
/* 2001/10/01 sulim */    AS with_stnds 
/* 2001/10/01 sulim */ , DECODE(stnds,NULL,DECODE(NVL(sumnds,0),0,'НДС не обл.','расчетн.'),'Y') 
/* 2001/10/01 sulim */    AS with_stnds_txt 
/* 2001/10/03 sulim */ , buhanal   /* для критерия суммирования количества */ 
/* 2002/02/11 vev   */ , p.date_otgr 
/* 2002/02/11 vev   */, DECODE(s.datadog, NULL, NULL,TO_CHAR(s.datadog,' "от" DD.MM.YYYY')) 
/* 2002/02/16 vev   */ , V_SF_SIGNS.boss 
/* 2002/02/16 vev   */ , V_SF_SIGNS.blavbuh 
/* 2002/05/22 vev   */ , Get_Price_Protokol(s.kod_prod) 
/* 2002/06/19 vev   */ , Get_Plat_Okpo(s.kod_prod) 
/* 2002/06/19 vev   */ , Get_Nakl_Num(s.kod_prod) 
/* 2002/06/19 vev   */ , sveta.sf_f_get_propisi_ves(s.kod_prod, s.kod_tu) 
/* 2002/06/19 vev   */ , Get_Dover_Num(s.kod_prod), 
kv.ID, 
kv.NUM_CIST, 
/*buhanal, 
KLS_PROD.akciz, 
BILLS.akciz_dok,*/ 
-- DECODE(kv.ID,NULL,'',DECODE(buhanal,47,'',48,'',50,'',68,'',69,'',DECODE(KLS_PROD.AKCIZ,1,DECODE(NVL(pp.AKCIZ_SVED_NUM,0),0,'','БЕЗ АКЦИЗА'),''))) AS AKCIZ_TXT, 
--DECODE(kv.ID,NULL,'',DECODE(buhanal,47,'',48,'',50,'',68,'',69,'',p.NO_AKCIZ)) AS AKCIZ_TXT, 
p.NO_AKCIZ AS AKCIZ_TXT, 
BILLS.DATE_MOS, 
s.KPP_PLAT, 
s.KPP_POST 
FROM 
  sveta.v_sf_sfak_prod_psv s, sveta.sf_stat0_poz_prod p, MASTER.BILLS, 
  (SELECT * FROM MASTER.V_KVIT_ALL WHERE DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy')) kv, 
  sveta.sf_kls_pred p1, sveta.sf_kls_pred p2, 
  MASTER.KLS_PREDPR pp, MASTER.KLS_BANKS bk, V_SF_SIGNS, MASTER.KLS_PROD 
WHERE s.kod_prod=BILLS.nom_dok 
  AND s.id_npred_post = p1.id_pred 
  AND s.id_pred_plat  = p2.id_pred 
  AND p.kod_prod = s.kod_prod 
  AND p.kod_tu = s.kod_tu 
  AND LTRIM(RTRIM(p2.FULL_NAME))=LTRIM(RTRIM(pp.PREDPR_NAME)) 
  AND pp.BANKS_ID=bk.ID(+) 
  AND p.kod_prod = kv.BILL_ID(+) 
  AND p.KVIT_ID = kv.ID(+) 
--  AND s.kod_prod = kv.BILL_ID(+) 
--  AND BILLS.nom_sf=6002000 
-- AND s.kod_prod=6093360 
  AND s.DATA_VYP_SF>=TO_DATE('01.01.2003','dd.mm.yyyy') 
  AND p.DATE_OTGR>=TO_DATE('01.01.2003','dd.mm.yyyy') 
  AND BILLS.DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy') 
  AND kv.PROD_ID_NPR=KLS_PROD.ID_NPR(+);


--
-- V_SF_PRINT_WITH_KVIT_NEW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT_WITH_KVIT_NEW
(KOD_PROD, KOD_TU, SCHETF, SCHETUSL, SF_NO, 
 ORIG_SF_NO, ID_POZ_PROD, DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, 
 ADDR_PRED_POST, PHONE_POST, INN_NPOST, PLRDOC, DATA_PLRD, 
 PLRDOC_AND_DATE, DOGOVOR, FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, 
 KORS_PRED_PLAT, RS_PRED_PLAT, BIK_PRED_PLAT, BANK_PRED_PLAT, INN_PLAT, 
 GROTPR, GROTPR_ADDR, GRPOL, GRPOL_ADDR, DOPOLN1, 
 DOPOLN2, NAIM_TOV, EDIZM, KOL, CENA, 
 AKCIZ1, SUMMA, AKCIZ2, STNDS, SUMNDS, 
 STGSM, SUMGSM, SUMNPR, ALLNDS, PROISX, 
 GTD, ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, 
 WITH_STNDS_TXT, BUHANAL, DATE_OTGR, DATE_DOG, BOSS, 
 GLAVBUH, NUM_PROTOKOL, PLAT_OKPO, NAKL_NUM, VES_PROPIS, 
 DOVER_NUM, KVIT_ID, NUM_CIST, AKCIZ_TXT, DATE_MOS, 
 KPP_PLAT, KPP_POST)
AS 
SELECT
  s.kod_prod, s.kod_tu,
  DECODE(NVL(s.linkschf, 0), 0, s.schetf, s.schetf||'/'||
         LTRIM(TO_CHAR(s.linkschf))) ||
         '     от  ' || TO_CHAR(DECODE(SIGN(s.data_vyp_sf-p.date_otgr),-1,p.date_otgr,s.data_vyp_sf), 'DD.MM.RRRR')
    AS schetf,
/* 2004/02/02 vev     '6' || TO_CHAR(s.data_vyp_sf,'MM') || ' от ' ||
   TO_CHAR(s.data_vyp_sf, 'DD.MM.YYYY') || 'г.' AS schetUsl, */
/* 02.06.2004 psv */    TRIM(s.schetf) || ' от ' ||  TO_CHAR(s.data_vyp_sf, 'DD.MM.YYYY') || 'г.' AS schetUsl,
/* 2001/02/05 sulim */ s.schetf, BILLS.nom_sf, p.id_poz_prod,
  s.data_vyp_sf, s.full_name_npost, LOWER(s.vystval) AS vystval,
  DECODE(p1.addr_pred, '?', NULL, p1.addr_pred)
    AS addr_pred_post,
  p1.phone AS phone_post,
  s.inn_npost,
  s.plrdoc, s.data_plrd,
/* 2001/01/30 sulim */ RPAD(DECODE(SIGN(p.date_otgr-TO_DATE('01.08.2002','dd.mm.yyyy')),1,'',DECODE(s.data_plrd,NULL,s.plrdoc,
/* 2001/01/30 sulim */        s.plrdoc||' от '||TO_CHAR(s.data_plrd,'dd.mm.rr'))
/* 2001/01/30 sulim */ || sveta.get_av_plrdocs(s.kod_prod,s.kod_tu)),300),
  s.dogovor AS dogovor,
  s.full_name_plat,
  p2.addr_pred AS addr_pred_plat,
  p2.phone AS phone_plat,
  pp.BANK_KORS AS kors_pred_plat,  ---  @KVS для печати реквизитов в счете
  pp.RS AS rs_pred_plat,           ---
  bk.BIK AS bik_pred_plat,         ---
  bk.BANK_NAME AS bank_pred_plat,  ---
  DECODE(TRANSLATE(SUBSTR(s.inn_plat, 1, 1), 'x1234567890', 'x'),
         NULL, s.inn_plat, ' ')
    AS inn_plat,
  grotpr, grotpr_addr, grpol, grpol_addr,
  s.dopoln1, s.dopoln2,
  p.naim_tov,
  DECODE(p.edizm, '?', NULL, p.edizm) AS edizm,
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.kol,DECODE(buhanal,48,p.kol,50,p.kol,68,p.kol,69,p.kol,SIGN(kv.SUM_PROD)*ABS(kv.VES_BRUTTO))) AS kol,
  p.kol,
  DECODE(BILLS.prod_id_npr,'10001',NULL,TO_CHAR(p.cena,'9999999.99')),
  p.akciz1,
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.summa,DECODE(buhanal,47,0,48,kv.SUM_VOZN11+kv.SUM_VOZN12,50,kv.SUM_VOZN11+kv.SUM_VOZN12,68,DECODE(id_nfprod,'10013',kv.TARIF_GUARD,kv.TARIF),69,kv.SUM_STRAH,kv.SUM_PROD)) AS summa,
  p.summa,
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,NVL(p.akciz2,0),DECODE(buhanal,47,0,48,NVL(p.akciz2,0),50,NVL(p.akciz2,0),68,NVL(p.akciz2,0),69,NVL(p.akciz2,0),kv.SUM_AKCIZ)) AS akciz2,
  NVL(p.akciz2,0) AS akciz2,
--  p.stnds,
-- 2001/02/08 sulim --  nvl(p.stnds,0),
/* 2001/02/16 sulim  Обратно из-за: Есть "Ставка=0", а есть "НДС не облаг." */
/* 2001/02/16 sulim */  p.stnds,
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.sumnds,DECODE(buhanal,47,0,48,kv.SUM_VOZN11_NDS+kv.SUM_VOZN12_NDS,50,kv.SUM_VOZN11_NDS+kv.SUM_VOZN12_NDS,68,DECODE(id_nfprod,'10013',kv.TARIF_GUARD_NDS,kv.TARIF_NDS),69,0,kv.SUM_PROD_NDS)) AS sumnds,
  p.sumnds,
  p.stgsm, p.sumgsm, p.sumnpr,
--/* PSV позиции по тр. ср-вам */ DECODE(kv.ID,NULL,p.allnds,DECODE(buhanal,47,0,48,kv.SUM_VOZN11+kv.SUM_VOZN11_NDS+kv.SUM_VOZN12+kv.SUM_VOZN12_NDS,50,kv.SUM_VOZN11+kv.SUM_VOZN11_NDS+kv.SUM_VOZN12+kv.SUM_VOZN12_NDS,68,DECODE(id_nfprod,'10013',kv.TARIF_GUARD+kv.TARIF_GUARD_NDS,kv.TARIF+kv.TARIF_NDS),69,kv.SUM_STRAH,kv.SUM_PROD+kv.SUM_AKCIZ+kv.SUM_PROD_NDS)) AS allnds,
  p.allnds,
--/* 2001/02/06 sulim */  p.allnds-nvl(p.sumnpr,0) as sumbeznpr,
/* MYudin временно p.proisx,*/
  '-' AS proisx,
  DECODE(UPPER(p.proisx),
         'РОССИЯ', '-', p.gtd)
    AS gtd
/* 2001/03/06 sulim */ , sveta.Sf_F_Get_Propisi_Sfprod(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.Sf_F_Get_Propisi_Sfprodnds(s.kod_prod, s.kod_tu)
/* 2002/02/10 vev   */ , sveta.Sf_F_Get_Propisi_Sfprodnonds(s.kod_prod, s.kod_tu)
/* 2001/10/01 sulim */ , DECODE(stnds,NULL,DECODE(NVL(sumnds,0),0,'-','?'),'+')
/* 2001/10/01 sulim */    AS with_stnds
/* 2001/10/01 sulim */ , DECODE(stnds,NULL,DECODE(NVL(sumnds,0),0,'НДС не обл.','расчетн.'),'Y')
/* 2001/10/01 sulim */    AS with_stnds_txt
/* 2001/10/03 sulim */ , buhanal   /* для критерия суммирования количества */
/* 2002/02/11 vev   */ , p.date_otgr
/* 2002/02/11 vev   */, DECODE(s.datadog, NULL, NULL,TO_CHAR(s.datadog,' "от" DD.MM.YYYY'))
/* 2002/02/16 vev   */ , V_SF_SIGNS.boss
/* 2002/02/16 vev   */ , V_SF_SIGNS.blavbuh
/* 2002/05/22 vev   */ , Get_Price_Protokol(s.kod_prod)
/* 2002/06/19 vev   */ , Get_Plat_Okpo(s.kod_prod)
/* 2002/06/19 vev   */ , Get_Nakl_Num(s.kod_prod)
/* 2002/06/19 vev   */ , sveta.sf_f_get_propisi_ves(s.kod_prod, s.kod_tu)
/* 2002/06/19 vev   */ , Get_Dover_Num(s.kod_prod),
kv.ID,
kv.NUM_CIST,
/*buhanal,
KLS_PROD.akciz,
BILLS.akciz_dok,*/
-- DECODE(kv.ID,NULL,'',DECODE(buhanal,47,'',48,'',50,'',68,'',69,'',DECODE(KLS_PROD.AKCIZ,1,DECODE(NVL(pp.AKCIZ_SVED_NUM,0),0,'','БЕЗ АКЦИЗА'),''))) AS AKCIZ_TXT,
--DECODE(kv.ID,NULL,'',DECODE(buhanal,47,'',48,'',50,'',68,'',69,'',p.NO_AKCIZ)) AS AKCIZ_TXT,
p.NO_AKCIZ AS AKCIZ_TXT,
BILLS.DATE_MOS,
s.KPP_PLAT,
s.KPP_POST
FROM
  sveta.v_sf_sfak_prod_psv s, sveta.sf_stat0_poz_prod p, MASTER.BILLS,
  (SELECT * FROM MASTER.V_KVIT_ALL WHERE DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy')) kv,
  sveta.sf_kls_pred p1, sveta.sf_kls_pred p2,
  MASTER.KLS_PREDPR pp, MASTER.KLS_BANKS bk, V_SF_SIGNS, MASTER.KLS_PROD
WHERE s.kod_prod=BILLS.nom_dok
  AND s.id_npred_post = p1.id_pred
  AND s.id_pred_plat  = p2.id_pred
  AND p.kod_prod = s.kod_prod
  AND p.kod_tu = s.kod_tu
  AND LTRIM(RTRIM(p2.FULL_NAME))=LTRIM(RTRIM(pp.PREDPR_NAME))
  AND pp.BANKS_ID=bk.ID(+)
  AND p.kod_prod = kv.BILL_ID(+)
  AND p.KVIT_ID = kv.ID(+)
--  AND s.kod_prod = kv.BILL_ID(+)
--  AND BILLS.nom_sf=6002000
-- AND s.kod_prod=6093360
  AND s.DATA_VYP_SF>=TO_DATE('01.01.2003','dd.mm.yyyy')
  AND p.DATE_OTGR>=TO_DATE('01.01.2003','dd.mm.yyyy')
  AND BILLS.DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy')
  AND kv.PROD_ID_NPR=KLS_PROD.ID_NPR(+);


--
-- V_SOST_RASCH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SOST_RASCH
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number, 
  bills.DOG_ID, 
  bills.DATE_BUXG, 
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat, 
  sum(kv.ves) AS ves, 
  sum(summa_dok) as summa_dok, 
  0 AS summa_opl 
  FROM bills,kls_dog, 
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month 
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID=793 
	  GROUP BY bill_id 
	) kv 
  WHERE bills.dog_id=kls_dog.ID and kls_dog.LUKDOG_ID=793 and bills.nom_dok=kv.bill_id 
  GROUP BY 
    kls_dog.dog_number, 
    bills.DOG_ID, 
    bills.DATE_BUXG, 
    bills.DATE_KVIT+bills.KOL_DN 
UNION ALL 
SELECT 
  kls_dog.dog_number, 
  kls_dog.id, 
  opl.DATA_por, 
  opl.DATA_por, 
  0 AS ves, 
  0 As summa_dok, 
  sum(opl.summa) AS summa_opl 
  FROM kls_dog,opl 
  WHERE opl.nom_dog=kls_dog.short_number and kls_dog.LUKDOG_ID=793 
  GROUP BY 
    kls_dog.dog_number, 
    kls_dog.id, 
    opl.DATA_por, 
    opl.DATA_por;


--
-- V_SVOD_USL_2006  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SVOD_USL_2006
(PROD_ID_NPR, PROD_NAME, VES, ED_IZ, SUMMA_BN, 
 SUMMA_NDS, SUMMA)
AS 
SELECT 
  a.PROD_ID_NPR, 
  KLS_PROD.SF_NAME as PROD_NAME, 
  SUM(VES) as VES, 
  MAX(a.ED_IZ) as ED_IZ, 
  SUM(SUMMA_BN) as SUMMA_BN, 
  SUM(SUMMA_NDS) as SUMMA_NDS, 
  SUM(SUMMA) as SUMMA 
FROM 
( 
SELECT 
  /************** ВОЗНАГРАЖДЕНИЕ **********************/ 
  '10001' as PROD_ID_NPR, 
  SUM(b.VES) as VES, 
  ' ТН ' as ED_IZ, 
  SUM(a.summa_bn) as summa_bn, 
  SUM(a.summa_nds) as summa_nds, 
  SUM(a.summa) as summa 
FROM 
( 
SELECT /*+ rule */ 
  -- позиции "Вознаграждение" 
  bills.NOM_DOK, 
  SUM(summa_bn) as summa_bn, 
  SUM(summa_nds20) as summa_nds, 
  SUM(summa) as summa 
FROM BILLS, BILL_POS, V_MASTER_REPORTS B 
WHERE (UPPER(B.REPORT_FILE)='SVOD_USL_2006.XLS') 
  AND bills.DATE_KVIT>=B.BEGIN_DATE 
  AND bills.DATE_KVIT<=B.END_DATE 
  AND bills.NOM_DOK=bill_pos.nom_dok 
  AND bill_pos.PROD_ID_NPR in ('10011','10012') 
  AND bill_pos.is_luk+0=0 
GROUP BY 
  bills.NOM_DOK 
) a, 
( 
SELECT /*+ rule */ 
  -- позиции "Товар" 
  bills.NOM_DOK, 
  SUM(bill_pos.VES) as VES 
FROM BILLS, BILL_POS, V_MASTER_REPORTS B, MONTH, KLS_VID_OTGR 
WHERE (UPPER(B.REPORT_FILE)='SVOD_USL_2006.XLS') 
  AND bills.DATE_KVIT>=B.BEGIN_DATE 
  AND bills.DATE_KVIT<=B.END_DATE 
  AND bills.NOM_DOK=bill_pos.nom_dok 
  AND bill_pos.PROD_ID_NPR>='10100' 
  AND bill_pos.is_luk+0=1 
  AND BILLS.IS_AGENT IN (2,4,5) 
  AND BILLS.NOM_ZD = MONTH.NOM_ZD 
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR 
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6) 
GROUP BY 
  bills.NOM_DOK 
) b 
WHERE b.nom_dok=a.nom_dok(+) 
-- 
UNION ALL 
-- 
SELECT 
  /************** ТАРИФ **********************/ 
  '10006' as PROD_ID_NPR, 
  SUM(a.VES) as VES, 
  ' ТН ' as ED_IZ, 
  SUM(a.summa_bn) as summa_bn, 
  SUM(a.summa_nds) as summa_nds, 
  SUM(a.summa) as summa 
FROM 
( 
SELECT 
  NOM_DOK, 
  KVIT_ID, 
  MAX(VES) AS VES, 
  SUM(SUMMA_BN) as SUMMA_BN, 
  SUM(SUMMA_NDS) as SUMMA_NDS, 
  SUM(SUMMA) as SUMMA 
FROM 
( 
  -- Вознаграждение + продукт + страховка (по DATE_KVIT) 
  SELECT /*+ RULE */ 
    BILLS.NOM_DOK, 
    KVIT.ID as KVIT_ID, 
    KVIT.VES_BRUTTO AS VES, 
 0 as SUMMA_BN, 
 0 as SUMMA_NDS, 
 0 as SUMMA 
  FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='SVOD_USL_2006.XLS') r, 
    BILLS, KVIT, MONTH, KLS_VID_OTGR 
  WHERE BILLS.NOM_DOK = KVIT.BILL_ID 
    AND KVIT.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE 
    AND BILLS.IS_AGENT IN (2,4,5) 
    AND BILLS.NOM_ZD = MONTH.NOM_ZD 
    AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR 
    AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6) 
  UNION ALL 
  -- Тариф (по дате счета от РЖД) 
  SELECT /*+ RULE */ 
    BILLS.NOM_DOK, 
    KVIT.ID as KVIT_ID, 
    KVIT.VES_BRUTTO AS VES, 
    NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_GUARD,0) AS SUMMA_BN, 
    NVL(KVIT.TARIF_NDS,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_NDS, 
    NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_NDS,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA 
  FROM 
    BILLS, KVIT, MONTH, KLS_VID_OTGR, 
    (SELECT distinct nom_perech,dat_perech 
       FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='SVOD_USL_2006.XLS') r,REESTR_RAIL_RGD_SF 
      WHERE DATE_SCH BETWEEN r.BEGIN_DATE AND r.END_DATE -- По дате счета РЖД 
        AND r21=95) rail_sf 
  WHERE BILLS.NOM_DOK = KVIT.BILL_ID 
    AND KVIT.PERECH_TEXPD_DATE=rail_sf.dat_perech 
    AND KVIT.PERECH_TEXPD_NUM=rail_sf.nom_perech 
    AND BILLS.IS_AGENT IN (2,4,5) 
    AND BILLS.NOM_ZD = MONTH.NOM_ZD 
    AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR 
    AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6) 
) 
GROUP BY 
  NOM_DOK, 
  KVIT_ID 
) a 
-- 
UNION ALL 
-- 
SELECT /*+ rule */ 
  /************** ПРОЧИЕ УСЛУГИ **********************/ 
  bills.PROD_ID_NPR, 
  SUM(bill_pos.VES) as VES, 
  KLS_PROD.ED_IZ, 
  SUM(bill_pos.SUMMA_BN) as SUMMA_BN, 
  SUM(bill_pos.SUMMA_NDS20) as SUMMA_NDS, 
  SUM(bill_pos.SUMMA) as SUMMA 
FROM bills, BILL_POS, KLS_PROD, V_MASTER_REPORTS B, KLS_DOG 
WHERE (UPPER(B.REPORT_FILE)='SVOD_USL_2006.XLS') 
  AND bills.DATE_KVIT>=B.BEGIN_DATE 
  AND bills.DATE_KVIT<=B.END_DATE 
  AND bills.NOM_DOK=bill_pos.nom_dok 
  AND bill_pos.PROD_ID_NPR=kls_prod.id_npr 
  AND bills.PROD_ID_NPR<'10100' AND bills.PROD_ID_NPR NOT LIKE '1009%' 
  AND bills.PROD_ID_NPR not in ('10003','10006','10080') 
  AND bill_pos.is_luk+0=1 
  AND bills.DOG_ID=KLS_DOG.ID 
  AND KLS_DOG.SHORT_NUMBER NOT IN ('0411498','0411565') 
GROUP BY 
  bills.PROD_ID_NPR, 
  KLS_PROD.ED_IZ 
) a, KLS_PROD 
WHERE a.PROD_ID_NPR=KLS_PROD.ID_NPR 
GROUP BY a.PROD_ID_NPR,KLS_PROD.SF_NAME 
ORDER BY PROD_ID_NPR;


--
-- V_TARIF_NO_RAIL_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TARIF_NO_RAIL_SF
(BEG_DATE, END_DATE, IS_AGENT, PLAT_ID, PLAT_NAME, 
 DOG_ID, DOG_NUMBER, DOG_DATE, DATE_KVIT, ORIG_NOM_SF, 
 DATE_VYP_SF, PROD_ID_NPR, PROD_NAME, PROD_EDIZ, NOM_ZD, 
 NUM_KVIT, VES, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, 
 SUMMA_OHRANA_NDS)
AS 
SELECT /*+ RULE */
  -- Непредъявленный тариф (нет счета от РЖД)
  TRUNC(KVIT.DATE_KVIT,'MONTH') AS BEG_DATE, -- Отетный период
  LAST_DAY(KVIT.DATE_KVIT) AS END_DATE, -- Отчетный период
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.NOM_ZD,
  KVIT.NUM_KVIT,
  SUM(KVIT.VES_BRUTTO) AS VES,
  SUM(NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)) AS SUMMA_TARIF,
  SUM(NVL(KVIT.TARIF_NDS,0)) AS SUMMA_TARIF_NDS,
  SUM(NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)) AS SUMMA_OHRANA,
  SUM(NVL(KVIT.TARIF_GUARD_NDS,0)) AS SUMMA_OHRANA_NDS
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='TARIF_NO_RAIL_SF.XLS') r,
  BILLS, KVIT, SVED, KLS_DOG, KLS_PREDPR PLAT, KLS_PROD 
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND KVIT.SVED_ID=SVED.ID(+)  
  -- Условия отбора
  AND NOT EXISTS (SELECT NULL FROM REESTR_RAIL_RGD_SF rail_sf 
               WHERE kvit.PERECH_TEXPD_DATE=rail_sf.dat_perech
                 AND KVIT.PERECH_TEXPD_NUM=rail_sf.nom_perech
                 AND r21=95)  
  AND BILLS.IS_AGENT IN (2,4,5)
GROUP BY
  TRUNC(KVIT.DATE_KVIT,'MONTH'), -- Отетный период
  LAST_DAY(KVIT.DATE_KVIT), -- Отчетный период
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID,
  PLAT.SF_NAME,
  BILLS.DOG_ID,
  KLS_DOG.DOG_NUMBER,
  KLS_DOG.DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.NOM_SF,
  BILLS.DATE_VYP_SF,
  KLS_PROD.ID_NPR,
  KLS_PROD.SF_NAME,
  KLS_PROD.ED_IZ,
  KVIT.NOM_ZD,
  SVED.SVED_NUM,
  KVIT.DATE_OTGR,
  KVIT.NUM_KVIT
HAVING SUM(NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0))>0;


--
-- V_TEMP_BILL_KVIT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_KVIT
(KVIT_ID, NUM_KVIT, TERMINAL_NAME, OSUSER_NAME, NUM_CIST, 
 VES, TARIF, TARIF19, SVED_NUM, SUM_PROD, 
 SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
 SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, CENA, CENA_OTP, 
 DATE_CENA, DATE_KVIT, PROTO_NUM, PROTO_DATE, CENA_VOZN, 
 TARIF_GUARD, TARIF_GUARD_NDS, NACENKA, NUM_AKT, BILL_POS_ID, 
 NO_AKCIZ, NPR_PRICES_ID, CAT_CEN_ID, ID_NPR, ABBR_NPR)
AS 
SELECT
  TEMP_BILL_KVIT."KVIT_ID",TEMP_BILL_KVIT."NUM_KVIT",TEMP_BILL_KVIT."TERMINAL_NAME",TEMP_BILL_KVIT."OSUSER_NAME",TEMP_BILL_KVIT."NUM_CIST",TEMP_BILL_KVIT."VES",TEMP_BILL_KVIT."TARIF",TEMP_BILL_KVIT."TARIF19",TEMP_BILL_KVIT."SVED_NUM",TEMP_BILL_KVIT."SUM_PROD",TEMP_BILL_KVIT."SUM_AKCIZ",TEMP_BILL_KVIT."SUM_PROD_NDS",TEMP_BILL_KVIT."TARIF_NDS",TEMP_BILL_KVIT."SUM_VOZN11",TEMP_BILL_KVIT."SUM_VOZN11_NDS",TEMP_BILL_KVIT."SUM_VOZN12",TEMP_BILL_KVIT."SUM_VOZN12_NDS",TEMP_BILL_KVIT."SUM_STRAH",TEMP_BILL_KVIT."CENA",TEMP_BILL_KVIT."CENA_OTP",TEMP_BILL_KVIT."DATE_CENA",TEMP_BILL_KVIT."DATE_KVIT",TEMP_BILL_KVIT."PROTO_NUM",TEMP_BILL_KVIT."PROTO_DATE",TEMP_BILL_KVIT."CENA_VOZN",TEMP_BILL_KVIT."TARIF_GUARD",TEMP_BILL_KVIT."TARIF_GUARD_NDS",TEMP_BILL_KVIT."NACENKA",TEMP_BILL_KVIT."NUM_AKT",TEMP_BILL_KVIT."BILL_POS_ID",TEMP_BILL_KVIT."NO_AKCIZ",TEMP_BILL_KVIT."NPR_PRICES_ID",TEMP_BILL_KVIT."CAT_CEN_ID",
  (SELECT prod_id_npr FROM kvit WHERE kvit.id=temp_bill_kvit.kvit_id) AS id_npr,
  (SELECT kls_prod.abbr_npr FROM kvit,kls_prod WHERE kvit.id=temp_bill_kvit.kvit_id AND kvit.prod_id_npr=kls_prod.id_npr) AS abbr_npr
  FROM TEMP_BILL_KVIT
  WHERE TERMINAL_NAME = For_Init.GetCurrTerm
    AND OSUSER_NAME = For_init.GetCurrUser;


--
-- V_TEMP_BILL_KVIT_PRICES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_KVIT_PRICES
(ABBR_NPR, ID_NPR, CENA, CENA_OTP, BEGIN_DATE, 
 END_DATE, ID, SELECTED)
AS 
SELECT 
  kls_prod.abbr_npr,
  a.id_npr,
  npr_prices.CENA,
  npr_prices.CENA_OTP,
  npr_prices.BEGIN_DATE,
  npr_prices.END_DATE,
  npr_prices.ID,
  DECODE(b.id_npr,NULL,0,1) AS Selected
FROM npr_prices,kls_prod,(SELECT DISTINCT id_npr,date_kvit FROM V_TEMP_BILL_KVIT) a,
  (SELECT DISTINCT npr_prices_id,id_npr FROM V_TEMP_BILL_KVIT) b WHERE
  npr_prices.CAT_CEN_ID=100 and
  npr_prices.PROD_ID_NPR=a.id_npr and
  npr_prices.PROD_ID_NPR=kls_prod.id_npr and
  npr_prices.id=b.npr_prices_id(+) and
  npr_prices.prod_id_npr=b.id_npr(+) and
  (npr_prices.END_DATE is null or npr_prices.END_DATE>=a.date_kvit)
ORDER BY begin_date DESC;


--
-- V_TEMP_BILL_KVIT_REKVIZITS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TEMP_BILL_KVIT_REKVIZITS
(DOG_NUMBER, DOG_DATE, PLAT_NAME, POLUCH_NAME, POTR_NAME, 
 STAN_NAME, ID_NPR, LONG_NAME_NPR, CAT_CEN_ID, USL_NUMBER, 
 CAT_CEN_NAME, NOM_ZD)
AS 
SELECT /*+ FIRST_ROWS(1) */
KLS_DOG.DOG_NUMBER,
KLS_DOG.DOG_DATE,
plat.PREDPR_NAME AS plat_name,
pol.PREDPR_NAME AS poluch_name,
potr.PREDPR_NAME AS potr_name,
KLS_STAN.STAN_NAME || ' (' || TO_CHAR(KLS_STAN.RAST) || 'км)' AS stan_name,
KLS_PROD.ID_NPR,
KLS_PROD.LONG_NAME_NPR,
USL_DOG.CAT_CEN_ID,
USL_DOG.USL_NUMBER,
KLS_CAT_CEN.CAT_CEN_NAME,
MONTH.nom_zd
FROM KLS_DOG,USL_DOG,MONTH,TEMP_BILL_KVIT,KVIT,KLS_PREDPR plat,KLS_PREDPR pol,KLS_PREDPR potr,KLS_STAN,KLS_PROD,KLS_CAT_CEN
WHERE KLS_DOG.ID=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.DOG_ID,MONTH.POKUP_DOG_ID)
  AND MONTH.NOM_ZD=KVIT.NOM_ZD
  AND KVIT.ID=TEMP_BILL_KVIT.KVIT_ID
  AND MONTH.POLUCH_ID=pol.id
  AND MONTH.POTREB_ID=potr.id
  AND KLS_DOG.PREDPR_ID=plat.id
  AND MONTH.STAN_ID=KLS_STAN.ID
  AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR
  AND USL_DOG.DOG_ID=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.DOG_ID,MONTH.POKUP_DOG_ID)
  AND USL_DOG.USL_NUMBER=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.USL_NUMBER,MONTH.POKUP_USL_NUMBER)
  AND USL_DOG.CAT_CEN_ID=KLS_CAT_CEN.ID
  AND TERMINAL_NAME = For_Init.GetCurrTerm
  AND OSUSER_NAME = For_Init.GetCurrUser;


--
-- V_TRIADA_RAZNAR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TRIADA_RAZNAR
(VID_DOC, GRPROD, PROD, PLAT, DATE_O, 
 TRIADA, NORMA, KOL_PLAN, VES_PLAN, KOL_FAKT, 
 VES_FAKT)
AS 
SELECT vid_doc
	   ,GRPROD
       ,PROD
       ,PLAT
	   ,DATE_O
	   ,(case 
	   		  when to_number(to_char(DATE_O,'dd')) in (1,2,3) then 1
			  when to_number(to_char(DATE_O,'dd')) in (4,5,6) then 2
			  when to_number(to_char(DATE_O,'dd')) in (7,8,9,10) then 3
			  when to_number(to_char(DATE_O,'dd')) in (11,12,13) then 4
			  when to_number(to_char(DATE_O,'dd')) in (14,15,16) then 5
			  when to_number(to_char(DATE_O,'dd')) in (17,18,19,20) then 6
			  when to_number(to_char(DATE_O,'dd')) in (21,22,23) then 7
			  when to_number(to_char(DATE_O,'dd')) in (24,25,26) then 8
			  else 9
		  end) as triada	   
	   ,NORMA
	   ,KOL_PLAN
	   ,VES_PLAN
	   ,KOL_FAKT
	   ,VES_FAKT
FROM
(SELECT vid_doc 
	   ,GRPROD
       ,PROD
       ,PLAT
	   ,DATE_O
	   ,MAX(NORMA) AS NORMA
	   ,SUM(KOL_PLAN) AS KOL_PLAN
	   ,SUM(VES_PLAN) AS VES_PLAN
	   ,SUM(KOL_FAKT) AS KOL_FAKT
	   ,SUM(VES_FAKT) AS VES_FAKT
FROM (
--KVIT
SELECT /*+ ORDERED USE_NL(K,M,A) */
  'fact' as vid_doc
  ,GR_NP.NAME_NPR AS GRPROD
  ,NP.NAME_NPR AS PROD
  ,PL.FULLPLAT AS PLAT
  ,(CASE
	WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1
	ELSE TRUNC(K.DATE_OFORML)
    END) AS DATE_O
  ,0 AS NORMA
  ,0 AS KOL_PLAN
  ,0 AS VES_PLAN
  ,1 AS KOL_FAKT
  ,K.VES_BRUTTO AS VES_FAKT
FROM
  KVIT K
  ,MONTH M
  ,KLS_VID_OTGR VO
  ,KLS_PROD_GU12 P
  ,KLS_PROD NP
  ,KLS_PROD GR_NP
  ,GU12_A A
  ,KLS_DOG D
  ,V_GU12_PLAT PL
WHERE
  K.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND K.PROD_ID_NPR=NP.ID_NPR(+)
  AND NP.PROD_GU12_ID=P.ID(+)
  AND NP.ID_GROUP_NPR=GR_NP.ID_NPR(+)
  AND M.GU12_A_ID=A.ID(+)
  AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('BEGIN_DATE','MASTER','RAZNAR_TRIADA.XLS'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')-1
  AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('END_DATE','MASTER','RAZNAR_TRIADA.XLS'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
  AND VO.LOAD_TYPE_ID=1
  AND M.DOG_ID=D.ID
  AND D.PREDPR_ID=PL.PLAT_ID
  AND NOT A.SOGL_DATE IS NULL
--  AND m.is_exp=0	   
UNION ALL
-- GU12
SELECT
  'gu12' as vid_doc  
  ,GR_NP.NAME_NPR AS GRPROD
  ,NVL(NP.NAME_NPR,'   ') AS PROD
  ,PL.FULLPLAT AS PLAT
  ,BR.DATE_R AS DATE_O
  ,NP.NORMOTGR AS NORMA
  ,BR.KOL_VAG AS KOL_PLAN
  ,BR.VES AS VES_PLAN
  ,0 AS KOL_FAKT
  ,0 AS VES_FAKT
FROM
  GU12_BR BR
  ,GU12_B B
  ,GU12_A A
  ,KLS_PROD_GU12 P
  ,KLS_PROD NP
  ,KLS_PROD GR_NP
  ,V_GU12_PLAT PL
WHERE
  BR.ID_B=B.ID
  AND B.ID_A=A.ID
  AND A.PROD_ID=P.ID
  AND BR.ID_NPR=NP.ID_NPR(+)
  AND NP.ID_GROUP_NPR=GR_NP.ID_NPR(+)
  AND PL.PLAT_ID=B.PLAT_ID
  AND BR.DATE_R BETWEEN FOR_TEMP.GET_AS_DATE('BEGIN_DATE','MASTER','RAZNAR_TRIADA.XLS') AND FOR_TEMP.GET_AS_DATE('END_DATE','MASTER','RAZNAR_TRIADA.XLS')
  AND B.ISCOR<>2
  AND NOT A.SOGL_DATE IS NULL
--  AND NVL(A.EXPED_ID,0)=0  
)
GROUP BY GRPROD
	  	 ,vid_doc
         ,PROD
         ,PLAT
		 ,(case 
	   		  when to_number(to_char(DATE_O,'dd')) in (1,2,3) then 1
			  when to_number(to_char(DATE_O,'dd')) in (4,5,6) then 2
			  when to_number(to_char(DATE_O,'dd')) in (7,8,9,10) then 3
			  when to_number(to_char(DATE_O,'dd')) in (11,12,13) then 4
			  when to_number(to_char(DATE_O,'dd')) in (14,15,16) then 5
			  when to_number(to_char(DATE_O,'dd')) in (17,18,19,20) then 6
			  when to_number(to_char(DATE_O,'dd')) in (21,22,23) then 7
			  when to_number(to_char(DATE_O,'dd')) in (24,25,26) then 8
			  else 9
		  end)		 
	     ,DATE_O
ORDER BY GRPROD
         ,PROD
         ,PLAT
	     ,DATE_O)
WHERE NOT (KOL_PLAN=0 AND VES_PLAN=0 AND KOL_FAKT=0 AND VES_FAKT=0);


--
-- V_TRIADA_RES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TRIADA_RES
(GR_PROD, PROD, PLAT, VES, TRIADA1_FACT, 
 TRIADA2_FACT, TRIADA3_FACT, TRIADA4_FACT, TRIADA5_FACT, TRIADA6_FACT, 
 TRIADA7_FACT, TRIADA8_FACT, TRIADA9_FACT, TRIADA1_GRAF, TRIADA2_GRAF, 
 TRIADA3_GRAF, TRIADA4_GRAF, TRIADA5_GRAF, TRIADA6_GRAF, TRIADA7_GRAF, 
 TRIADA8_GRAF, TRIADA9_GRAF)
AS 
SELECT PL.GR_PROD,
	  PL.PROD,
	  PL.PLAT,
	  PL.VES,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=1 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA1_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=2 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA2_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=3 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA3_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=4 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA4_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=5 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA5_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=6 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA6_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=7 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA7_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=8 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA8_FACT,
	  (SELECT sum(ves_fakt)  FROM V_TRIADA_RAZNAR WHERE TRIADA=9 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='fact' group by prod,plat) AS TRIADA9_FACT,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=1 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA1_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=2 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA2_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=3 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA3_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=4 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA4_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=5 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA5_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=6 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA6_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=7 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA7_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=8 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA8_GRAF,
	  (SELECT sum(ves_plan)  FROM V_TRIADA_RAZNAR WHERE TRIADA=9 AND PROD=PL.PROD AND PLAT=PL.PLAT AND VID_DOC='gu12' group by prod,plat) AS TRIADA9_GRAF
FROM V_TRIADA_PLAN PL;


--
-- V_UNP_REP_OTGR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_REP_OTGR
(DATE_VYP_SF, DATE_BUXG, NOM_SF, DATE_KVIT, PROD_ID_NPR, 
 VES_BRUTTO, NUM_CIST, NUM_KVIT, SUM_PROD, SUM_PROD_NDS, 
 TARIF, TARIF_NDS, SUM_STRAH, GROTP_ID, TARIF_GUARD, 
 TARIF_GUARD_NDS, SVED_NUM, GROTP_NAME, TEX_PD_ID, NAME_NPR, 
 ID_GROUP_NPR, GROUP_NPR_NAME, POLUCH_ID, POLUCH_NAME, STAN_ID, 
 STAN_NAME, NAZN_OTG_ID, SOBSTV_ID, SOBSTV_NAME, N_DOG, 
 DOG_ID, LOAD_TYPE_ID, LOAD_TYPE_NAME, OWN_VAG_ID, SOBVAG_NAME, 
 PLAT_ID, PLAT_NAME, SUM_VOZ, DATE_OTGR, TARIF19, 
 CENA, CENA_OTP, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, 
 SUM_VOZN12_NDS, CAT_CEN_ID, USL_BEGIN_DATE, USL_END_DATE, ID_KIND_NPR, 
 SBOR, SHTRAF, DOG_ID2, PLAT_ID2, PLAT_NAME2, 
 N_DOG2, KOL_DN, DATE_PLAT, NOM_ZD)
AS 
SELECT /*+ RULE */
B.DATE_VYP_SF
,B.DATE_BUXG
,B.NOM_SF
,K.DATE_KVIT
,K.PROD_ID_NPR
,K.VES_BRUTTO
,K.NUM_CIST
,DECODE(K.NUM_KVIT,NULL,0,99999,0,K.NUM_KVIT) AS NUM_KVIT 
,K.SUM_PROD
,K.SUM_PROD_NDS
,K.TARIF
,K.TARIF_NDS
--,K.SUM_VOZN11+K.SUM_VOZN12 AS USL_TRANSP
--,K.SUM_VOZN11_NDS+K.SUM_VOZN12_NDS AS USL_TRANSP_NDS
,K.SUM_STRAH
,K.GROTP_ID
,K.TARIF_GUARD
,K.TARIF_GUARD_NDS
,K.SVED_NUM
,PR1.PREDPR_NAME AS GROTP_NAME
,K.TEX_PD_ID
,P1.NAME_NPR
,P1.ID_GROUP_NPR
,P2.NAME_NPR AS GROUP_NPR_NAME
,M.POTREB_ID AS POLUCH_ID
,PR2.PREDPR_NAME AS POLUCH_NAME
,M.STAN_ID
,S.STAN_NAME
,M.NAZN_OTG_ID
,M.NPR_SOBSTV_ID AS SOBSTV_ID
,PR3.PREDPR_NAME AS SOBSTV_NAME
,D.SHORT_NUMBER AS N_DOG
,B.DOG_ID
,LT.ID AS LOAD_TYPE_ID
,LT.TYPE_OTGR_NAME AS LOAD_TYPE_NAME
,OWN1.ID AS OWN_VAG_ID
,OWN1.VAGOWNER_NAME AS SOBVAG_NAME
,PR4.ID AS PLAT_ID
,PR4.PREDPR_NAME AS PLAT_NAME
,K.SUM_VOZ
,K.DATE_OTGR
,K.TARIF19
,(CASE WHEN K.CENA IS NULL THEN 0 ELSE K.CENA END) AS CENA
--,K.CENA
--,K.CENA_OTP
,(CASE WHEN K.CENA_OTP IS NULL THEN 0 ELSE K.CENA_OTP END) AS CENA_OTP
,K.SUM_VOZN11
,K.SUM_VOZN11_NDS
,K.SUM_VOZN12
,K.SUM_VOZN12_NDS
,UD.CAT_CEN_ID
,UD.USL_BEGIN_DATE
,UD.USL_END_DATE
,P1.ID_KIND_NPR
,0 AS SBOR
,0 AS SHTRAF
,M.DOG_ID AS DOG_ID2
,PR5.ID AS PLAT_ID2
,PR5.PREDPR_NAME AS PLAT_NAME2
,D2.SHORT_NUMBER AS N_DOG2
,B.KOL_DN
,B.DATE_PLAT
,K.NOM_ZD
FROM
V_KVIT_ALL K
,BILLS B
,KLS_PROD P1
,KLS_PROD P2
,MONTH M
,KLS_PREDPR PR1 --ОТПРАВИТЕЛЬ
,KLS_PREDPR PR2 --ПОЛУЧАТЕЛЬ
,KLS_PREDPR PR3 --СОБСТВЕННИК ПРОДУКТА
,KLS_PREDPR PR4 --ПЛАТЕЛЬЩИК
,KLS_PREDPR PR5 --ПЛАТЕЛЬЩИК 2
,KLS_STAN S
,KLS_DOG D
,KLS_DOG D2
,KLS_VID_OTGR VO
,KLS_LOAD_TYPE LT
,KLS_VAGOWNER OWN1
,USL_DOG UD
WHERE
K.BILL_ID=B.NOM_DOK(+)
AND K.PROD_ID_NPR=P1.ID_NPR
AND P1.ID_GROUP_NPR=P2.ID_NPR
AND K.NOM_ZD=M.NOM_ZD
AND K.GROTP_ID=PR1.ID
AND M.POTREB_ID=PR2.ID
AND M.NPR_SOBSTV_ID=PR3.ID
AND M.STAN_ID=S.ID
AND (CASE
       WHEN B.DOG_ID IS NOT NULL THEN B.DOG_ID  -- если есть СФ, то договор из СФ
    WHEN M.IS_EXP=1 THEN 2519 -- если экспорт, то договор поставки лукойлу
    ELSE M.DOG_ID -- иначе - договор из заявки
  END)=D.ID
AND M.LOAD_ABBR=VO.LOAD_ABBR
AND VO.LOAD_TYPE_ID=LT.ID
AND K.VAGOWNER_ID=OWN1.ID
AND D.PREDPR_ID=PR4.ID
AND M.DOG_ID=UD.DOG_ID
AND M.USL_NUMBER=UD.USL_NUMBER
AND M.DOG_ID=D2.ID
AND D2.PREDPR_ID=PR5.ID;


--
-- V_UNP_REP_VOZVRAT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_REP_VOZVRAT
(NUM_AKT, SUM_VNR, KOL_VNR, SUM_EXP_N, KOL_EXP_N, 
 SUM_EXP_P, KOL_EXP_P)
AS 
select
	 t.num_akt
	 ,sum(case when m.is_exp=0 then v.summa else 0 end) as sum_vnr
	 ,sum(case when m.is_exp=0 then 1 else 0 end) as kol_vnr 
	 ,sum(case when m.is_exp=1 and p.id_group_npr=90099 then v.summa else 0 end) as sum_exp_n
	 ,sum(case when m.is_exp=1 and p.id_group_npr=90099 then 1 else 0 end) as kol_exp_n 
	 ,sum(case when m.is_exp=1 and p.id_group_npr<>90099 then v.summa else 0 end) as sum_exp_p
	 ,sum(case when m.is_exp=1 and p.id_group_npr<>90099 then 1 else 0 end) as kol_exp_p 
from kvit k
	 ,month m
	 ,vozvrat_temp t
	 ,vozvrat v
	 ,kls_prod p
where 
	 t.user_name=for_init.GetCurrUser()
	 and t.priznak=1
	 and t.num_akt=trim(v.num_akt)
	 and m.nom_zd=k.nom_zd
	 and v.num_cist=k.num_cist
	 and get_newkvit(v.date_kvit,v.num_cist)=k.num_kvit
	 and k.prod_id_npr=p.id_npr
group by t.num_akt
order by t.num_akt;


--
-- V_VED_OSMOTR_LAST_GRUZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VED_OSMOTR_LAST_GRUZ
(REPORT_TIME, NUM_CIST, VED_ID, LAST_GRUZ)
AS 
SELECT  
SYSDATE as REPORT_TIME,
a.NUM_CIST, a.VED_ID,
FOR_CIST.LAST_GRUZ(b.VED_DATE,a.NUM_CIST,b.MESTO_ID,b.LOAD_TYPE_ID) as LAST_GRUZ
FROM VED_OSMOTR_ROW a, VED_OSMOTR b
WHERE /*a.VED_ID=FOR_TEMP.GET_AS_NUM('VED_ID','MASTER','Sved_gd.rpt')
  AND */a.VED_ID=b.ID
ORDER BY a.pod_pos;


--
-- V_YAROSLAVSKY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_YAROSLAVSKY
(MARKET, DAT, FACTORYNAM, PRODUCTNAM, IDPROD, 
 KORPKOD, IDR3, COUNTRYNAM, TIPOTGRUZ, IDSTATION, 
 STATIONNAM, CONTRACTNU, CONTRACTNU2, CONDITIONN, STATIONPER, 
 CLIENTNAM, POLUCHATEL, EKSPEDITOR, SOBSTVCIST, TONSPLAN, 
 TONSRAZN, TONSPAY, PAYDAT, TONSFACT, NOMCIST, 
 NOMNAKL, TONSWAYPLA, TONSWAYPAY, IDPRC, PRC, 
 TYPEDOC, DATDOC, NOTE)
AS 
select /*+ RULE*/
  month.IS_EXP as market,
  kvit.DATE_KVIT as dat,
  'Ухта' as factorynam,
  kls_prod.LONG_NAME_NPR as productnam,
  kls_prod.ID_NPR as idprod,
  kls_prod.KOD_10 as korpkod,
  ksss_prod.MATNR AS idr3,
  kls_region.REGION_NAME as countrynam,
  kls_load_type.TYPE_OTGR_NAME as tipotgruz,
  kls_stan.STAN_KOD as idstation,
  kls_stan.STAN_NAME as stationnam,
  kls_dog.DOG_NUMBER as contractnu,
  kls_dog2.DOG_NUMBER as contractnu2,
  '???' as conditionn,
  '???' as stationper,
  plat.PREDPR_NAME clientnam,
  polu.PREDPR_NAME as poluchatel,
  decode(exped.PREDPR_NAME,'<Контрагент>','',exped.PREDPR_NAME) as ekspeditor,
  kls_vagowner.SHORT_NAME as sobstvcist,
  -1 as tonsplan,
  month.TONN_DECLARED as tonsrazn,
  -1 as tonspay,
  TO_DATE('01.01.2020','dd.mm.yyyy') as paydat,
  kvit.ves as tonsfact,
  kvit.NUM_CIST as nomcist,
  kvit.NUM_KVIT as nomnakl,
  -1 as tonswaypla,
  -1 as tonswaypay,
  -1 as idprc,
  -1 as prc,
  -1 as typedoc,
  kls_dog.DOG_DATE as datdoc,
  month.PRIM as note
  from 
    month,kvit,kls_prod,
	ksss_prod,kls_stan,
	kls_region,kls_vid_otgr,
	kls_load_type,kls_dog,kls_dog kls_dog2,
	kls_predpr plat,kls_predpr polu,kls_predpr exped,
	kls_vagowner
  where 
    month.nom_zd=kvit.nom_zd(+) and
	kvit.PROD_ID_NPR=kls_prod.ID_NPR and
	kls_prod.ID_NPR=ksss_prod.FOX_ID(+) and
	month.STAN_ID=kls_stan.ID and
	kls_stan.REGION_ID=kls_region.ID and
	month.LOAD_ABBR=kls_vid_otgr.LOAD_ABBR and
	kls_vid_otgr.LOAD_TYPE_ID=kls_load_type.ID and
	month.DOG_ID=kls_dog.ID and
	month.NPODOG_ID=kls_dog2.ID(+) and
	kls_dog.PREDPR_ID=plat.id and
    month.POLUCH_ID=polu.id and
	kvit.EXPED_ID=exped.id(+) and
	kvit.VAGOWNER_ID=kls_vagowner.ID;


--
-- V_ZAKAZ_DECADS  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZAKAZ_DECADS
(PREDPR_NAME, GROUP_NAME, NAME_NPR, DATE_, VES, 
 DECADE_)
AS 
select 
  a.PREDPR_NAME,
  a.GROUP_NAME,
  a.NAME_NPR,
  a.DATE_ as date_,
  round(a.VES / c.ves * b.ves,1) as ves,
  a.decade_
from 
  v_ZAKAZ_DECADS_UNP a, 
  (
  select
   predpr_id,
   prod_id_npr,
   sum(ves) as ves
  from v_ZAKAZ_DECADS_SNP
  group by  
   predpr_id,
   prod_id_npr
  ) b,
  (select
   predpr_id,
   prod_id_npr,
   sum(ves) as ves
  from v_ZAKAZ_DECADS_UNP
  group by  
   predpr_id,
   prod_id_npr
  ) c   
where
b.PREDPR_ID=a.PREDPR_ID and
b.PROD_ID_NPR=a.PROD_ID_NPR and
a.PREDPR_ID=c.PREDPR_ID and
a.PROD_ID_NPR=c.PROD_ID_NPR
order by predpr_name,decade_,date_,group_name,name_npr;


--
-- V_ZATRATY_ARENDA_VAG  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_ZATRATY_ARENDA_VAG
(POTREB, DATE_KVIT, NUM_KVIT, NUM_CIST, VAGOWNER_NAME, 
 VES_BRUTTO, STAN_NAME, PROD, RAST, STOIMOST)
AS 
SELECT /*+ ORDERED USE_NL(K,M,PR,PROD,S,D) */
PREDPR.SF_NAME AS POTREB 
,K.DATE_KVIT
,K.NUM_KVIT
,K.NUM_CIST
,OWN2.VAGOWNER_NAME
,K.VES_BRUTTO
,S.STAN_NAME
,PROD.SF_NAME AS PROD
,S.RAST
,SV.STOIMOST
FROM
KVIT K
,MONTH M
,KLS_DOG D
,KLS_PREDPR PREDPR
,KLS_VAGOWNER OWN1
,KLS_VAGOWNER OWN2
,KLS_STAN S
,KLS_PROD PROD
,KLS_VAG_STOIM_ISPOLZ SV
,KLS_VID_OTGR VO
WHERE
K.NOM_ZD=M.NOM_ZD
AND M.DOG_ID=D.ID
AND D.PREDPR_ID=PREDPR.ID
AND K.VAGOWNER_ID=OWN1.ID
AND M.STAN_ID=S.ID
AND K.PROD_ID_NPR=PROD.ID_NPR
AND (CASE 
		  WHEN NVL(For_Temp.GET_AS_NUM('LC_VAGOWNER', 'MASTER', 'ZATRATY_ARENDA_VAG.XLS'),0)=0 THEN OWN1.OWNER_ID
		  ELSE NVL(For_Temp.GET_AS_NUM('LC_VAGOWNER', 'MASTER', 'ZATRATY_ARENDA_VAG.XLS'),0)
     END)=OWN1.OWNER_ID 
AND OWN1.SOBSTV_ID=OWN2.ID
AND OWN1.OWNER_ID=SV.VAGOWNER_ID
AND S.RAST>=SV.BEG_DIST
AND S.RAST<SV.END_DIST+1
--AND SV.ID<29
AND K.DATE_KVIT>=SV.BEG_DATE
AND K.DATE_KVIT<=SV.END_DATE
AND M.IS_EXP=0
AND K.DATE_KVIT>=(SELECT BEGIN_DATE FROM V_MASTER_REPORTS WHERE REPORT_FILE='ZATRATY_ARENDA_VAG.XLS')
AND K.DATE_KVIT<=(SELECT END_DATE FROM V_MASTER_REPORTS WHERE REPORT_FILE='ZATRATY_ARENDA_VAG.XLS')
AND VO.LOAD_TYPE_ID = 1
AND M.LOAD_ABBR = VO.LOAD_ABBR
AND M.NAZN_OTG_ID <> 5
--AND K.DATE_OFORML>=TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DBEG_MONTH'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')-1
--AND K.DATE_OFORML<TO_DATE(SUBSTR(FOR_TEMP.GET_AS_CHAR('DEND_MONTH'),1,10)||' 17:00:00','DD.MM.YYYY HH24:MI:SS')
--AND
/*(CASE
WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1    
ELSE TRUNC(K.DATE_OFORML)  
END)>=(SELECT BEGIN_DATE FROM V_MASTER_REPORTS WHERE REPORT_FILE='ZATRATY_ARENDA_VAG.XLS')
AND
(CASE
WHEN K.DATE_OFORML>=TO_DATE(TO_CHAR(TRUNC(K.DATE_OFORML),'DD.MM.YYYY')||' 17:00:00','DD.MM.YYYY HH24:MI:SS') THEN TRUNC(K.DATE_OFORML)+1    
ELSE TRUNC(K.DATE_OFORML)  
END)<=(SELECT END_DATE FROM V_MASTER_REPORTS WHERE REPORT_FILE='ZATRATY_ARENDA_VAG.XLS') 
AND K.VAGOWNER_ID<>3
*/
;


--
-- V_1_FIPP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1_FIPP
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number,
  bills.DOG_ID,
  bills.DATE_KVIT,
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat,
  sum(kv.ves) AS ves,
  sum(bills.summa_dok) as summa_dok,
  0 AS summa_opl
  FROM bills,kls_dog,
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID=793 
	  GROUP BY bill_id
	) kv 
  WHERE bills.dog_id=kls_dog.ID  and kls_dog.LUKDOG_ID=793 and bills.nom_dok=kv.bill_id
  GROUP BY
    kls_dog.dog_number,
    bills.DOG_ID,
    bills.DATE_KVIT,
    bills.DATE_KVIT+bills.KOL_DN
UNION ALL
SELECT
  kls_dog.dog_number,
  opl.DOG_ID,
  opl.DATA_POR,
  opl.DATA_POR,
  0 AS ves,
  0 As summa_dok,
  sum(opl.SUMMA) AS summa_opl
  FROM opl,kls_dog
  WHERE opl.dog_id=kls_dog.ID and kls_dog.LUKDOG_ID=793
  GROUP BY
    kls_dog.dog_number,
    opl.DOG_ID,
    opl.DATA_POR,
    opl.DATA_POR;


--
-- V_1_FIPP_DBUX  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1_FIPP_DBUX
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number,
  bills.DOG_ID,
  bills.DATE_BUXG,
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat,
  sum(kv.ves) AS ves,
  sum(bills.summa_dok) as summa_dok,
  0 AS summa_opl
  FROM bills,kls_dog,
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID=793 
	  GROUP BY bill_id
	) kv 
  WHERE bills.dog_id=kls_dog.ID  and kls_dog.LUKDOG_ID=793 and bills.nom_dok=kv.bill_id
  GROUP BY
    kls_dog.dog_number,
    bills.DOG_ID,
    bills.DATE_BUXG,
    bills.DATE_KVIT+bills.KOL_DN
UNION ALL
SELECT
  kls_dog.dog_number,
  opl.DOG_ID,
  opl.DATA_POR,
  opl.DATA_POR,
  0 AS ves,
  0 As summa_dok,
  sum(opl.SUMMA) AS summa_opl
  FROM opl,kls_dog
  WHERE opl.dog_id=kls_dog.ID and kls_dog.LUKDOG_ID=793
  GROUP BY
    kls_dog.dog_number,
    opl.DOG_ID,
    opl.DATA_POR,
    opl.DATA_POR;


--
-- V_1_FIPP_LUK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1_FIPP_LUK
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number, 
  bills.DOG_ID, 
  bills.DATE_BUXG, 
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat, 
  sum(kv.ves) AS ves, 
  sum(v_bill_pos.SUMMA) AS summa_dok, 
  0 AS summa_opl 
  FROM bills,v_bill_pos,kls_dog, 
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month 
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID=793 
	  GROUP BY bill_id 
	) kv 
  WHERE bills.dog_id=kls_dog.ID and v_bill_pos.nom_dok=bills.nom_dok and kls_dog.LUKDOG_ID=793 and bills.nom_dok=kv.bill_id 
  and v_bill_pos.PROD_ID_NPR>10300 
  GROUP BY 
    kls_dog.dog_number, 
    bills.DOG_ID, 
    bills.DATE_BUXG, 
    bills.DATE_KVIT+bills.KOL_DN 
UNION ALL 
SELECT 
  kls_dog.dog_number, 
  opl.DOG_ID, 
  opl.DATA_POR, 
  opl.DATA_POR, 
  0 AS ves, 
  0 As summa_dok, 
  sum(opl.summa) AS summa_opl 
  FROM opl, kls_dog
  WHERE opl.NOM_DOG='0210218' and opl.DOG_ID=kls_dog.ID 
  GROUP BY 
    kls_dog.dog_number, 
    opl.DOG_ID, 
    opl.DATA_POR, 
    opl.DATA_POR;


--
-- V_1_FIPP_NPR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1_FIPP_NPR
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number, 
  bills.DOG_ID, 
  bills.DATE_BUXG, 
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat, 
  sum(kv.ves) AS ves, 
  sum(v_bill_pos.SUMMA) AS summa_dok, 
  0 AS summa_opl 
  FROM bills,v_bill_pos,kls_dog, 
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month 
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID=793 
	  GROUP BY bill_id 
	) kv 
  WHERE bills.dog_id=kls_dog.ID and v_bill_pos.nom_dok=bills.nom_dok and kls_dog.LUKDOG_ID=793 and bills.nom_dok=kv.bill_id 
  and v_bill_pos.PROD_ID_NPR>10300 
  GROUP BY 
    kls_dog.dog_number, 
    bills.DOG_ID, 
    bills.DATE_BUXG, 
    bills.DATE_KVIT+bills.KOL_DN 
UNION ALL 
SELECT 
  kls_dog.dog_number, 
  opl.DOG_ID, 
  opl.DATA_POR, 
  opl.DATA_POR, 
  0 AS ves, 
  0 As summa_dok, 
  sum(real_opl.d_41+real_opl.d_191+real_opl.sum_akciz) AS summa_opl 
  FROM opl,real_opl, kls_dog 
  WHERE kls_dog.LUKDOG_ID=793 and real_opl.UN_DOK=opl.nom_dok and real_opl.dog_realp=kls_dog.SHORT_NUMBER and real_opl.close_date is not null 
  GROUP BY 
    kls_dog.dog_number, 
    opl.DOG_ID, 
    opl.DATA_POR, 
    opl.DATA_POR;


--
-- V_1_FIPP_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1_FIPP_OLD
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  kls_dog.dog_number,
  bills.DOG_ID,
  bills.DATE_BUXG,
  bills.DATE_KVIT+bills.KOL_DN AS date_to_plat,
  sum(kv.ves) AS ves,
  sum(v_bill_pos.SUMMA) AS summa_dok,
  0 AS summa_opl
  FROM bills,v_bill_pos,kls_dog,
    (SELECT kvit.bill_id,SUM(ves) AS ves 
	 FROM kvit,kls_dog,month
	 WHERE 
	   kvit.NOM_ZD=month.nom_zd AND 
	   month.dog_id=kls_dog.id AND 
	   kls_dog.LUKDOG_ID=793 
	  GROUP BY bill_id
	) kv 
  WHERE bills.dog_id=kls_dog.ID and v_bill_pos.nom_dok=bills.nom_dok and kls_dog.LUKDOG_ID=793 and bills.nom_dok=kv.bill_id
  and v_bill_pos.PROD_ID_NPR>10300 
  GROUP BY
    kls_dog.dog_number,
    bills.DOG_ID,
    bills.DATE_BUXG,
    bills.DATE_KVIT+bills.KOL_DN
UNION ALL
SELECT
  kls_dog.dog_number,
  opl.DOG_ID,
  opl.DATA_POR,
  opl.DATA_POR,
  0 AS ves,
  0 As summa_dok,
  sum(opl.SUMMA) AS summa_opl
  FROM opl,kls_dog
  WHERE opl.dog_id=kls_dog.ID and kls_dog.LUKDOG_ID=793
  GROUP BY
    kls_dog.dog_number,
    opl.DOG_ID,
    opl.DATA_POR,
    opl.DATA_POR;


--
-- V_1_FIPP_1010  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1_FIPP_1010
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT 
  KLS_DOG.dog_number,
  BILLS.DOG_ID,
  BILLS.DATE_KVIT,
  BILLS.DATE_KVIT+BILLS.KOL_DN AS date_to_plat,
  SUM(kv.ves) AS ves,
  SUM(BILLS.summa_dok) AS summa_dok,
  0 AS summa_opl
  FROM BILLS,KLS_DOG,
    (SELECT KVIT.bill_id,SUM(ves) AS ves 
	 FROM KVIT,KLS_DOG,MONTH
	 WHERE 
	   KVIT.NOM_ZD=MONTH.nom_zd AND 
	   MONTH.dog_id=KLS_DOG.ID AND 
	   KLS_DOG.LUKDOG_ID=793 
	  GROUP BY bill_id
	) kv 
  WHERE BILLS.dog_id=KLS_DOG.ID  AND KLS_DOG.LUKDOG_ID=793 AND BILLS.nom_dok=kv.bill_id
  GROUP BY
    KLS_DOG.dog_number,
    BILLS.DOG_ID,
    BILLS.DATE_KVIT,
    BILLS.DATE_KVIT+BILLS.KOL_DN
UNION ALL
SELECT
  KLS_DOG.dog_number,
  OPL.DOG_ID,
  OPL.DATA_POR,
  OPL.DATA_POR,
  0 AS ves,
  0 AS summa_dok,
  SUM(OPL.SUMMA) AS summa_opl
  FROM OPL,KLS_DOG
  WHERE OPL.dog_id=KLS_DOG.ID AND KLS_DOG.LUKDOG_ID=793
  GROUP BY
    KLS_DOG.dog_number,
    OPL.DOG_ID,
    OPL.DATA_POR,
    OPL.DATA_POR;


--
-- AGENT_GDPLAN_FOR_ANTON_BIU  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.AGENT_GDPLAN_FOR_ANTON_BIU
BEFORE INSERT OR UPDATE
ON MASTER.AGENT_GDPLAN_FOR_ANTON
FOR EACH ROW
BEGIN
  :NEW.tarif:=0;
  FOR lcur IN (SELECT date_kvit,num_kvit,kvit.nom_zd FROM kvit,month,kls_prod 
   WHERE kvit.PROD_ID_NPR=kls_prod.ID_NPR 
    AND kls_prod.PROD_PLAN_ID=TO_NUMBER(:NEW.prod_npr_id) 
	AND kvit.NOM_ZD=month.NOM_ZD
	AND month.STAN_ID=:NEW.stan_id
	AND kvit.tarif<>0
	AND kvit.date_kvit<:NEW.date_plan
	ORDER BY kvit.ID DESC) LOOP
    BEGIN
	  FOR lcur2 IN (SELECT SUM(tarif_orig) AS tarif,SUM(ves) AS ves FROM kvit WHERE
	    nom_zd=lcur.nom_zd AND
		num_kvit=lcur.num_kvit AND
		date_kvit=lcur.date_kvit) LOOP
   	  
	    :NEW.tarif:=:NEW.ves*lcur2.tarif/lcur2.ves;
  	    EXIT;
      END LOOP;	
	  EXIT;
    END;
  END LOOP;
END AGENT_GDPLAN_FOR_ANTON_BIU;
/


--
-- TRG_AIUDR_REESTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_REESTR
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.REESTR
FOR EACH ROW
DECLARE
 vNEW_NOM_ZD VARCHAR2(12);
 vOLD_NOM_ZD VARCHAR2(12);
 vNUM_NAR KLS_NARIAD.NUM_NAR%TYPE;
 vKOL KLS_NAR_LINE.KOL%TYPE;
 vVES KLS_NAR_LINE.VES%TYPE;
 vFACT_KOL KLS_NAR_LINE.FACT_KOL%TYPE;
 vFACT_VES KLS_NAR_LINE.FACT_VES%TYPE;
 vCIST_RAZNAR MONTH.CIST_RAZNAR%TYPE;
 vTONN_RAZNAR MONTH.TONN_RAZNAR%TYPE;
 vCIST_FACT MONTH.CIST_FACT%TYPE;
 vTONN_FACT MONTH.TONN_FACT%TYPE;
 vLOAD_TYPE_ID KLS_VID_OTGR.LOAD_TYPE_ID%TYPE;
 vNEW_GROUP_NPR KLS_PROD.ID_GROUP_NPR%TYPE;
 vOLD_GROUP_NPR KLS_PROD.ID_GROUP_NPR%TYPE;
 vSVED_NUM SVED.SVED_NUM%TYPE;
 vPASP_ID SVED.PASP_ID%TYPE;
 vPROD_ID_NPR SVED.PROD_ID_NPR%TYPE;
BEGIN
  -- Обновляем кол-во и веса в заголовке документа, факт отгрузки в заявке и разрешении диспетчера
  IF INSERTING() THEN
    UPDATE SVED
	   SET SVED_CNT=NVL(SVED_CNT,0)+1,
	       SVED_VES=NVL(SVED_VES,0)+NVL(:NEW.VES,0),
	       VES_CIST=NVL(VES_CIST,0)+NVL(:NEW.VES_CIST,0),
	       KOL_NET=NVL(KOL_NET,0)+NVL(:NEW.KOL_NET,0),
	       VES_ALL=NVL(VES_ALL,0)+NVL(:NEW.VES_ALL,0)
 	 WHERE ID=:NEW.SVED_ID;
  END IF;
  IF DELETING() THEN
    UPDATE SVED
	   SET SVED_CNT=NVL(SVED_CNT,0)-1,
	       SVED_VES=NVL(SVED_VES,0)-NVL(:OLD.VES,0),
	       VES_CIST=NVL(VES_CIST,0)-NVL(:OLD.VES_CIST,0),
	       KOL_NET=NVL(KOL_NET,0)+NVL(:OLD.KOL_NET,0),
	       VES_ALL=NVL(VES_ALL,0)-NVL(:OLD.VES_ALL,0)
	 WHERE ID=:OLD.SVED_ID;
  END IF;
  IF UPDATING('SVED_ID') OR UPDATING('VES') OR UPDATING('VES_CIST') OR UPDATING('KOL_NET') OR UPDATING('VES_ALL') THEN
    -- "минус" со старого сведения
    UPDATE SVED
	   SET SVED_VES=NVL(SVED_VES,0)-NVL(:OLD.VES,0),
	       VES_CIST=NVL(VES_CIST,0)-NVL(:OLD.VES_CIST,0),
	       KOL_NET=NVL(KOL_NET,0)-NVL(:OLD.KOL_NET,0),
	       VES_ALL=NVL(VES_ALL,0)-NVL(:OLD.VES_ALL,0)
	 WHERE ID=:OLD.SVED_ID;
    -- "плюс" на новое сведение
    UPDATE SVED
	   SET SVED_VES=NVL(SVED_VES,0)+NVL(:NEW.VES,0),
	       VES_CIST=NVL(VES_CIST,0)+NVL(:NEW.VES_CIST,0),
	       KOL_NET=NVL(KOL_NET,0)+NVL(:NEW.KOL_NET,0),
	       VES_ALL=NVL(VES_ALL,0)+NVL(:NEW.VES_ALL,0)
	 WHERE ID=:NEW.SVED_ID;
  END IF;

  IF NVL(:OLD.NAR_LINE_ID,0)<>NVL(:NEW.NAR_LINE_ID,0) THEN
    -- Действия при адресации вагона
    -- Снимаем факт отгрузки со старого задания
    vOLD_NOM_ZD:='';
    IF NVL(:OLD.NAR_LINE_ID,0)<>0 THEN
      -- Обновляем KLS_NAR_LINE
 	  UPDATE KLS_NAR_LINE SET FACT_KOL=FACT_KOL-1, FACT_VES=FACT_VES-NVL(:NEW.VES,0) WHERE ID=:OLD.NAR_LINE_ID;
	  -- Определяем № предыдущего задания
  	  BEGIN
	    SELECT NOM_ZD INTO vOLD_NOM_ZD
	      FROM KLS_NAR_LINE
	     WHERE ID=:OLD.NAR_LINE_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vOLD_NOM_ZD:='';
  	  END;
	END IF;

    -- Вешаем факт отгрузки на новое задание
    vNEW_NOM_ZD:='';
    IF NVL(:NEW.NAR_LINE_ID,0)<>0 THEN
	  -- Определяем № нового задания
	  BEGIN
	    SELECT b.NUM_NAR,a.NOM_ZD,a.KOL,a.VES,a.FACT_KOL,a.FACT_VES,
               m.CIST_RAZNAR,m.TONN_RAZNAR,m.CIST_FACT,m.TONN_FACT,v.LOAD_TYPE_ID,p.ID_GROUP_NPR
		  INTO vNUM_NAR,vNEW_NOM_ZD,vKOL,vVES,vFACT_KOL,vFACT_VES,
		       vCIST_RAZNAR,vTONN_RAZNAR,vCIST_FACT,vTONN_FACT,vLOAD_TYPE_ID,vNEW_GROUP_NPR
	      FROM KLS_NAR_LINE a,KLS_NARIAD b,MONTH m,KLS_PROD p,KLS_VID_OTGR v
	     WHERE a.NARIAD_ID=b.ID
		   AND a.NOM_ZD=m.NOM_ZD
		   AND m.PROD_ID_NPR=p.ID_NPR
		   AND m.LOAD_ABBR=v.LOAD_ABBR
		   AND a.ID=:NEW.NAR_LINE_ID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      vNEW_NOM_ZD:=NULL;
	  END;

/*	  IF vNEW_NOM_ZD IS NOT NULL AND (vOLD_NOM_ZD||' '<>vNEW_NOM_ZD||' ' OR vOLD_NOM_ZD IS NULL) THEN
	    -- Проверяем на перегруз заявки
		IF NVL(vCIST_RAZNAR,0)-NVL(vCIST_FACT,0)<=0 THEN
    	  RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Попытка перегрузить задание '||vNEW_NOM_ZD||' - по кол-ву транспортных средств!');
		END IF;
		IF NVL(vTONN_RAZNAR,0)-NVL(vTONN_FACT,0)<FOR_SVED.GET_MIN_OSTAT_VES(vLOAD_TYPE_ID,vNEW_GROUP_NPR) THEN
    	  RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Попытка перегрузить задание '||vNEW_NOM_ZD||' - по весу!');
		END IF;
      END IF;

      -- Проверяем на перегруз позиции разрешения
	  IF NVL(vKOL,0)-NVL(vFACT_KOL,0)<=0 THEN
    	RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Попытка перегрузить разрешение '||vNUM_NAR||', позиция '||vNEW_NOM_ZD||' - по кол-ву транспортных средств!');
	  END IF;
  	  IF NVL(vVES,0)-NVL(vFACT_VES,0)<FOR_SVED.GET_MIN_OSTAT_VES(vLOAD_TYPE_ID,vNEW_GROUP_NPR) THEN
    	RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Попытка перегрузить разрешение '||vNUM_NAR||', позиция '||vNEW_NOM_ZD||' - по весу!');
      END IF;
*/
      -- Обновляем KLS_NAR_LINE
 	  UPDATE KLS_NAR_LINE SET FACT_KOL=FACT_KOL+1, FACT_VES=FACT_VES+NVL(:NEW.VES,0) WHERE ID=:NEW.NAR_LINE_ID;

 	  -- Считываем номер задания из сведения
	  SELECT s.NOM_ZD,s.SVED_NUM,p.ID_GROUP_NPR,s.PASP_ID INTO vOLD_NOM_ZD,vSVED_NUM,vOLD_GROUP_NPR,vPASP_ID
	    FROM SVED s,KLS_PROD p
	   WHERE s.PROD_ID_NPR=p.ID_NPR
	     AND s.ID=:NEW.SVED_ID;
	  -- Проверяем соответствие
	  IF vNEW_NOM_ZD||' '<>vOLD_NOM_ZD||' ' AND vOLD_NOM_ZD IS NOT NULL THEN
	    -- Попытка присвоить вагонам в сведении разные № заданий
  	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер задания '||vOLD_NOM_ZD||' на '||vNEW_NOM_ZD||' в сведении N '||vSVED_NUM||'. Сначала отмените адреса у всех вагонов в сведении или выполните переадресацию сведения целиком!');
	  END IF;
	  IF vNEW_GROUP_NPR||' '<>vOLD_GROUP_NPR||' ' AND vOLD_GROUP_NPR IS NOT NULL AND vPASP_ID IS NOT NULL THEN
	    -- Попытка присвоить № задания с группой продукта не соответствующей группе продукта в паспорте
    	RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить группу продукта в сведении N '||vSVED_NUM||' - уже проставлен паспорт на другую группу');
	  END IF;
	  -- Обновляем номер задания
	  UPDATE SVED SET NOM_ZD=vNEW_NOM_ZD WHERE ID=:NEW.SVED_ID;
	END IF;
  ELSE
    -- Действия, если адрес не изменился, но изменился вес
    IF NVL(:NEW.NAR_LINE_ID,0)<>0 AND NVL(:NEW.VES,0)<>NVL(:OLD.VES,0) THEN
      -- Обновляем KLS_NAR_LINE
 	  UPDATE KLS_NAR_LINE SET FACT_VES=FACT_VES-NVL(:OLD.VES,0)+NVL(:NEW.VES,0) WHERE ID=:NEW.NAR_LINE_ID;
	END IF;
  END IF;

  IF DELETING() THEN
    -- Очищаем SVED.NOM_ZD при удалении последнего вагона
    UPDATE SVED SET NOM_ZD='' WHERE ID=:OLD.SVED_ID AND SVED_CNT=0;
  END IF;

  -- Сохранить изменения в справочнике вагонов
  BEGIN
	SELECT LOAD_TYPE_ID,PROD_ID_NPR INTO vLOAD_TYPE_ID,vPROD_ID_NPR
	  FROM SVED
	 WHERE ID=:NEW.SVED_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
  END;

  IF INSERTING() OR UPDATING('NUM_CIST') OR UPDATING('NCISTDOP') OR UPDATING('AXES') OR UPDATING('CAPACITY') OR UPDATING('WES1') OR 
     UPDATING('VES_CIST') OR UPDATING('VAGONTYPE_ID') OR UPDATING('KALIBR_ID') OR UPDATING('TIP1') OR UPDATING('VAGOWNER_ID') THEN
	FOR_CIST.ADD_CIST(0,:NEW.NUM_CIST,vLOAD_TYPE_ID,:NEW.VAGONTYPE_ID,:NEW.KALIBR_ID,:NEW.TIP1,:NEW.CAPACITY,:NEW.WES1,:NEW.NCISTDOP,:NEW.AXES,:NEW.VES_CIST,:NEW.VAGOWNER_ID,vPROD_ID_NPR);
  END IF;

  IF INSERTING() OR UPDATING('ZPU_TYPE1') THEN
    IF NVL(:NEW.ZPU_TYPE1,0)<>0 THEN
      FOR_ENVIRONMENT.SET_ENV('MASTER','VARI','ZPU_TYPE1',:NEW.ZPU_TYPE1,FOR_INIT.GetCurrUser);
	END IF;  
  END IF;
  IF INSERTING() OR UPDATING('ZPU_TYPE2') THEN
    IF NVL(:NEW.ZPU_TYPE2,0)<>0 THEN
      FOR_ENVIRONMENT.SET_ENV('MASTER','VARI','ZPU_TYPE2',:NEW.ZPU_TYPE2,FOR_INIT.GetCurrUser);
	END IF;  
  END IF;

END;
/


--
-- TRG_AIUDR_VED_OSMOTR_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_VED_OSMOTR_ROW
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR_ROW
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID NUMBER;
BEGIN
  -- Обновляем кол-во и веса в заголовке документа
  IF INSERTING() THEN
    UPDATE VED_OSMOTR
	   SET KOL=NVL(KOL,0)+1
 	 WHERE ID=:NEW.VED_ID;
  END IF;
  IF DELETING() THEN
    UPDATE VED_OSMOTR
	   SET KOL=NVL(KOL,0)-1
	 WHERE ID=:OLD.VED_ID;
  END IF;
  IF UPDATING('VED_ID') THEN
    -- "минус" со старого
    UPDATE VED_OSMOTR
	   SET KOL=NVL(KOL,0)-1
	 WHERE ID=:OLD.VED_ID;
    -- "плюс" на новый
    UPDATE VED_OSMOTR
	   SET KOL=NVL(KOL,0)+1
	 WHERE ID=:NEW.VED_ID;
  END IF;

  -- Сохранить изменения в справочнике вагонов
  BEGIN
	SELECT LOAD_TYPE_ID INTO vLOAD_TYPE_ID
	  FROM VED_OSMOTR
	 WHERE ID=:NEW.VED_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
  END;

  IF INSERTING() OR UPDATING('NUM_CIST') OR UPDATING('NCISTDOP') OR UPDATING('AXES') OR UPDATING('CAPACITY') OR 
     UPDATING('VES_CIST') OR UPDATING('VAGONTYPE_ID') OR UPDATING('KALIBR_ID') OR UPDATING('VAGOWNER_ID') OR UPDATING('PROD_ID_NPR') THEN
	FOR_CIST.ADD_CIST(0,:NEW.NUM_CIST,vLOAD_TYPE_ID,:NEW.VAGONTYPE_ID,:NEW.KALIBR_ID,'',:NEW.CAPACITY,'',:NEW.NCISTDOP,:NEW.AXES,:NEW.VES_CIST,:NEW.VAGOWNER_ID,:NEW.PROD_ID_NPR);
  END IF;

  IF INSERTING() OR UPDATING('RAZMET_PER') THEN
    IF :NEW.RAZMET_PER IS NOT NULL THEN
      UPDATE KLS_PROD_RAZMET SET RAZMET=NLS_UPPER(:NEW.RAZMET_PER) 
   	   WHERE RAZMET=NLS_UPPER(:NEW.RAZMET_PER);
	  IF SQL%NOTFOUND THEN
	    INSERT INTO KLS_PROD_RAZMET (RAZMET) VALUES (NLS_UPPER(:NEW.RAZMET_PER));
  	  END IF;
	END IF;     
  END IF;

END;
/


--
-- TRG_AIUDR_VED_POD_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_AIUDR_VED_POD_ROW
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.VED_POD_ROW
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID NUMBER;
 vREESTR_ID NUMBER;
 vDEFI_MASS_ID NUMBER;
BEGIN
  -- Обновляем кол-во и веса в заголовке документа
  IF INSERTING() THEN
    UPDATE VED_POD
	   SET KOL=NVL(KOL,0)+1,
	       VES_CIST=NVL(VES_CIST,0)+NVL(:NEW.VES_CIST,0)
 	 WHERE ID=:NEW.VED_POD_ID;
  END IF;
  IF DELETING() THEN
    UPDATE VED_POD
	   SET KOL=NVL(KOL,0)-1,
	       VES_CIST=NVL(VES_CIST,0)-NVL(:OLD.VES_CIST,0)
	 WHERE ID=:OLD.VED_POD_ID;
  END IF;
  IF UPDATING('VES_CIST') OR UPDATING('VED_POD_ID') THEN
    -- "минус" со старого
    UPDATE VED_POD
	   SET KOL=NVL(KOL,0)-1,
	       VES_CIST=NVL(VES_CIST,0)-NVL(:OLD.VES_CIST,0)
	 WHERE ID=:OLD.VED_POD_ID;
    -- "плюс" на новый
    UPDATE VED_POD
	   SET KOL=NVL(KOL,0)+1,
	       VES_CIST=NVL(VES_CIST,0)+NVL(:NEW.VES_CIST,0)
	 WHERE ID=:NEW.VED_POD_ID;
  END IF;

  IF UPDATING('TEMPER') OR UPDATING('VZLIV') OR UPDATING('ZPU_TYPE1') OR UPDATING('ZPU_TYPE2') OR
     UPDATING('PLOMBA1') OR UPDATING('PLOMBA2') OR UPDATING('ROSINSPL1') OR UPDATING('ROSINSPL2') THEN
    -- переносим изменения на сведение
    BEGIN
	  -- Ищем позицию сведения
      SELECT REESTR.ID,SVED.DEFI_MASS_ID INTO vREESTR_ID,vDEFI_MASS_ID
	    FROM REESTR,SVED
	   WHERE REESTR.VED_POD_ROW_ID=:NEW.ID
	     AND REESTR.NAKL_ID IS NULL -- еще не отпечатана накладная 
	     AND REESTR.SVED_ID=SVED.ID;

      IF NVL(:NEW.TEMPER,0)<>NVL(:OLD.TEMPER,0) THEN
        UPDATE REESTR SET TEMPER=:NEW.TEMPER WHERE ID=vREESTR_ID;
		IF vDEFI_MASS_ID=1 THEN
          UPDATE REESTR SET VES=0 WHERE ID=vREESTR_ID;
		END IF;  
	  END IF;	
      IF NVL(:NEW.VZLIV,0)<>NVL(:OLD.VZLIV,0) THEN
        UPDATE REESTR SET VZLIV=:NEW.VZLIV WHERE ID=vREESTR_ID;
		IF vDEFI_MASS_ID=1 THEN
          UPDATE REESTR SET VES=0 WHERE ID=vREESTR_ID;
		END IF;  
      END IF;
      IF NVL(:NEW.ZPU_TYPE1,0)<>NVL(:OLD.ZPU_TYPE1,0) THEN
        UPDATE REESTR SET ZPU_TYPE1=:NEW.ZPU_TYPE1 WHERE ID=vREESTR_ID;
      END IF;
      IF  NVL(:NEW.ZPU_TYPE2,0)<>NVL(:OLD.ZPU_TYPE2,0) THEN
        UPDATE REESTR SET ZPU_TYPE2=:NEW.ZPU_TYPE2 WHERE ID=vREESTR_ID;
      END IF;
      IF :NEW.PLOMBA1||' '<>:OLD.PLOMBA1||' ' THEN
        UPDATE REESTR SET PLOMBA1=:NEW.PLOMBA1 WHERE ID=vREESTR_ID;
      END IF;
      IF :NEW.PLOMBA2||' '<>:OLD.PLOMBA2||' ' THEN
        UPDATE REESTR SET PLOMBA2=:NEW.PLOMBA2 WHERE ID=vREESTR_ID;
      END IF;
      IF :NEW.ROSINSPL1||' '<>:OLD.ROSINSPL1||' ' THEN
        UPDATE REESTR SET ROSINSPL1=:NEW.ROSINSPL1 WHERE ID=vREESTR_ID;
      END IF;
      IF :NEW.ROSINSPL2||' '<>:OLD.ROSINSPL2||' ' THEN
        UPDATE REESTR SET ROSINSPL2=:NEW.ROSINSPL2 WHERE ID=vREESTR_ID;
      END IF;
    EXCEPTION
	  WHEN OTHERS THEN
	    NULL;
	END;
  END IF;
  		  
  -- Сохранить изменения в справочнике вагонов
  BEGIN
	SELECT LOAD_TYPE_ID INTO vLOAD_TYPE_ID
	  FROM VED_POD
	 WHERE ID=:NEW.VED_POD_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
  END;

  IF INSERTING() OR UPDATING('NUM_CIST') OR UPDATING('NCISTDOP') OR UPDATING('AXES') OR UPDATING('CAPACITY') OR 
     UPDATING('VES_CIST') OR UPDATING('VAGONTYPE_ID') OR UPDATING('KALIBR_ID') OR UPDATING('VAGOWNER_ID') OR UPDATING('PROD_ID_NPR') THEN
	FOR_CIST.ADD_CIST(0,:NEW.NUM_CIST,vLOAD_TYPE_ID,:NEW.VAGONTYPE_ID,:NEW.KALIBR_ID,'',:NEW.CAPACITY,'',:NEW.NCISTDOP,:NEW.AXES,:NEW.VES_CIST,:NEW.VAGOWNER_ID,:NEW.PROD_ID_NPR);
  END IF;

  IF INSERTING() OR UPDATING('ZPU_TYPE1') THEN
    IF NVL(:NEW.ZPU_TYPE1,0)<>0 THEN
      FOR_ENVIRONMENT.SET_ENV('MASTER','VARI','ZPU_TYPE1',:NEW.ZPU_TYPE1,FOR_INIT.GetCurrUser);
	END IF;  
  END IF;
  IF INSERTING() OR UPDATING('ZPU_TYPE2') THEN
    IF NVL(:NEW.ZPU_TYPE2,0)<>0 THEN
      FOR_ENVIRONMENT.SET_ENV('MASTER','VARI','ZPU_TYPE2',:NEW.ZPU_TYPE2,FOR_INIT.GetCurrUser);
	END IF;  
  END IF;

END;
/


--
-- TRG_BIUDR_KLS_NAR_LINE  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KLS_NAR_LINE
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KLS_NAR_LINE
FOR EACH ROW
DECLARE 
 vLOAD_TYPE_ID NUMBER;
 vNUM_NAR KLS_NARIAD.NUM_NAR%TYPE;
 vDATE_NAR KLS_NARIAD.DATE_NAR%TYPE;
 vID_GROUP_NPR KLS_PROD.ID_GROUP_NPR%TYPE;
BEGIN
  -- Данные о разрешении
  SELECT NUM_NAR,DATE_NAR INTO vNUM_NAR,vDATE_NAR
    FROM KLS_NARIAD
   WHERE ID=:NEW.NARIAD_ID;	

  -- Проверяем возможность отгрузки
  IF UPDATING() AND
     (NVL(:NEW.KOL,0)<NVL(:OLD.KOL,0) OR NVL(:NEW.FACT_KOL,0)>NVL(:OLD.FACT_KOL,0)) THEN 

    IF NVL(:NEW.KOL,0)<NVL(:NEW.FACT_KOL,0) THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 
	    'Кол-во отгруженных вагонов по заданию '||:NEW.NOM_ZD||' ('||TO_CHAR(:NEW.FACT_KOL)||' в/ц) '||CHR(13)||' не должно превышать кол-во вагонов '||CHR(13)||'в разрешении на отгрузку № ' || TO_CHAR(vNUM_NAR) || ' от ' || TO_CHAR(vDATE_NAR,'dd.mm.yyyy') || ' ('||TO_CHAR(:NEW.KOL)||' в/ц)!'||CHR(10)||CHR(13));
	END IF;
  END IF;	  
	 
  IF UPDATING() AND
     (NVL(:NEW.VES,0)<NVL(:OLD.VES,0) OR NVL(:NEW.FACT_VES,0)>NVL(:OLD.FACT_VES,0)) THEN 

	-- Данные о заявке
    SELECT KLS_VID_OTGR.LOAD_TYPE_ID,KLS_PROD.ID_GROUP_NPR INTO vLOAD_TYPE_ID,vID_GROUP_NPR
      FROM MONTH,KLS_VID_OTGR,KLS_PROD
	 WHERE MONTH.NOM_ZD=:NEW.NOM_ZD
	   AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
	   AND MONTH.PROD_ID_NPR=KLS_PROD.ID_NPR;
		 
    IF NVL(:NEW.VES,0)<(NVL(:OLD.FACT_VES,0)+FOR_SVED.GET_MIN_OSTAT_VES(vLOAD_TYPE_ID,vID_GROUP_NPR)) AND NVL(:NEW.VES,0)<NVL(:NEW.FACT_VES,0) THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 
	    'Перегруз задания '||:NEW.NOM_ZD||' ('||TO_CHAR(:NEW.FACT_VES)||' тн) '||CHR(13)||'в разрешении на отгрузку № ' || TO_CHAR(vNUM_NAR) || ' от ' || TO_CHAR(vDATE_NAR,'dd.mm.yyyy') || ' ('||TO_CHAR(:NEW.VES)||' тн)!'||CHR(10)||CHR(13));
	END IF;
  END IF;


END;
/


--
-- TRG_BIUDR_KVIT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_KVIT
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KVIT FOR EACH ROW
DECLARE
  v_tmp NUMBER;
BEGIN

  -- До удаления
  IF DELETING() AND NVL(:OLD.BILL_ID,0)<>0 THEN
     --raise_application_error( FOR_SCRIPTS.SG$ERROR, 'Невозможно удалить вагон, входящий в счет-фактуру!');
     null;
  END IF;

  -- определить ID накладной
  IF INSERTING() OR 
     (UPDATING('DATE_KVIT') AND :NEW.DATE_KVIT<>:OLD.DATE_KVIT) OR 
	 (UPDATING('NUM_KVIT') AND :NEW.NUM_KVIT<>:OLD.NUM_KVIT) THEN
    if :new.date_otgr<to_date('01.04.2008','dd.mm.yyyy') then 
      :NEW.ttn_id:=to_number(to_char(:NEW.date_kvit,'yyyymmdd')||lpad(to_char(:NEW.num_kvit),7,'0'));
    end if;  
  END IF;
  
  -- Попытка обновить запись, загруженную в ИСУ
  IF UPDATING() AND :OLD.IS_LOADED in (8,9) THEN

    IF :OLD.TTN_ID<>:NEW.TTN_ID OR
       :OLD.NUM_KVIT<>:NEW.NUM_KVIT OR
       :OLD.DATE_OTGR<>:NEW.DATE_OTGR OR
       :OLD.NUM_CIST<>:NEW.NUM_CIST OR
       NVL(:OLD.TARIF,0)<>NVL(:NEW.TARIF,0) OR
       NVL(:OLD.TARIF19,0)<>NVL(:NEW.TARIF19,0) OR
       NVL(:OLD.TARIF_GUARD,0)<>NVL(:NEW.TARIF_GUARD,0) OR
       NVL(:OLD.VES_BRUTTO,0)<>NVL(:NEW.VES_BRUTTO,0) OR
       NVL(:OLD.VES,0)<>NVL(:NEW.VES,0) OR
       NVL(:OLD.KOL_ED,0)<>NVL(:NEW.KOL_ED,0) OR
--       NVL(:OLD.TARIF_NDS,0)<>NVL(:NEW.TARIF_NDS,0) OR
--       NVL(:OLD.TARIF_GUARD_NDS,0)<>NVL(:NEW.TARIF_GUARD_NDS,0) OR
       :OLD.DATE_KVIT<>:NEW.DATE_KVIT OR
       :OLD.NUM_DOVER||' '<>:NEW.NUM_DOVER||' ' OR
       NVL(:OLD.DATE_DOVER,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(:NEW.DATE_DOVER,TO_DATE('01.01.1900','dd.mm.yyyy')) OR
       :OLD.FIO_DRIVER||' '<>:NEW.FIO_DRIVER||' ' OR
	   (:OLD.FLG_OPERDATA<>:NEW.FLG_OPERDATA AND :OLD.FLG_OPERDATA=1) OR -- раскредитовывание
       :OLD.NOM_ZD||' '<>:NEW.NOM_ZD||' ' OR
       NVL(:OLD.VAGOWNER_ID,0)<>NVL(:NEW.VAGOWNER_ID,0) OR
       :OLD.PROD_ID_NPR||' '<>:NEW.PROD_ID_NPR||' ' OR
       NVL(:OLD.VAGONTYPE_ID,0)<>NVL(:NEW.VAGONTYPE_ID,0) OR
       NVL(:OLD.VES_ED,0)<>NVL(:NEW.VES_ED,0) OR
--       NVL(:OLD.BILL_ID,0)<>NVL(:NEW.BILL_ID,0) OR
--       NVL(:OLD.NUM_AKT,0)<>NVL(:NEW.NUM_AKT,0) OR
--       NVL(:OLD.BILL_POS_ID,0)<>NVL(:NEW.BILL_POS_ID,0) OR
--       :OLD.PROTO_NUM||' '<>:NEW.PROTO_NUM||' ' OR
--       NVL(:OLD.PROTO_DATE,TO_DATE('01.01.1900','dd.mm.yyyy'))<>NVL(:NEW.PROTO_DATE,TO_DATE('01.01.1900','dd.mm.yyyy')) OR
       NVL(:OLD.AXES,0)<>NVL(:NEW.AXES,0) THEN

      :NEW.IS_LOADED:=1;
	END IF;
	  
  END IF;

  IF UPDATING() THEN
    IF :NEW.TARIF=0 THEN
	  :NEW.TARIF_NDS:=0;
	END IF;   
    IF :NEW.TARIF_GUARD=0 THEN
	  :NEW.TARIF_GUARD_NDS:=0;
	END IF;
	IF :NEW.SUM_VOZN11=0 THEN
	  :NEW.SUM_VOZN11_NDS:=0;
	END IF;
	IF :NEW.SUM_VOZN12=0 THEN
	  :NEW.SUM_VOZN12_NDS:=0;
	END IF;
	IF :NEW.SUM_PROD=0 THEN
	  :NEW.SUM_PROD_NDS:=0;
	END IF;
  END IF;
  	
  -- Попытка добавить новую запись
  IF INSERTING() THEN
    :NEW.IS_LOADED:=0;
  END IF;

  
END;
/


--
-- TRG_BIUDR_REESTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REESTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REESTR
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID NUMBER;
 vOTHER_SVED_NUM SVED.SVED_NUM%TYPE;
 vSVED_DATE SVED.SVED_DATE%TYPE;
BEGIN
  -- Считываем значения из других таблиц
  BEGIN
	SELECT LOAD_TYPE_ID,SVED_DATE INTO vLOAD_TYPE_ID,vSVED_DATE
	  FROM SVED
	 WHERE ID=:NEW.SVED_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
	  vSVED_DATE:=NULL;
  END;

  -- Корректируем значения полей
  IF INSERTING() OR (UPDATING('CAPACITY') AND :NEW.CAPACITY||' '<>:OLD.CAPACITY||' ') THEN
	BEGIN
      :NEW.CAPACITY:=ORA_NUM_TO_CHAR(ora_char_to_num(:NEW.CAPACITY,'999.999'));
	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Неверное значение грузоподъемности!');
	END;
  END IF;

  IF INSERTING() OR UPDATING('VES_CIST') THEN
    :NEW.VES_CIST:=NVL(:NEW.VES_CIST,0);
  END IF;

  IF UPDATING('NUM_CIST') AND :NEW.NUM_CIST||' '<>:OLD.NUM_CIST||' ' AND :NEW.VED_POD_ROW_ID IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер вагона в сведении! Вагон '||:OLD.NUM_CIST||' связан с ведомостью подачи!');
  END IF;
  
  IF INSERTING() OR (UPDATING('NUM_CIST') AND :NEW.NUM_CIST||' '<>:OLD.NUM_CIST||' ') THEN
    IF FOR_CIST.CHECK_NUM_CIST(:NEW.NUM_CIST, vLOAD_TYPE_ID, NVL(:NEW.VAGONTYPE_ID,0))=0 THEN
      :NEW.BAD_NUM:=1;
	ELSE
	  :NEW.BAD_NUM:=0;
	END IF;
	vOTHER_SVED_NUM:=FOR_SVED.CHECK_UNIQ(vLOAD_TYPE_ID,:NEW.NUM_CIST,:NEW.ID,vSVED_DATE);
	IF NVL(vOTHER_SVED_NUM,0)<>0 THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Вагон '||:NEW.NUM_CIST||' уже есть в сведении N '||TO_CHAR(vOTHER_SVED_NUM));
	END IF;
  END IF;

  IF INSERTING() OR (UPDATING('KALIBR_ID') AND :NEW.KALIBR_ID||' '<>:OLD.KALIBR_ID||' ') THEN
    :NEW.KALIBR_ID:=NLS_UPPER(:NEW.KALIBR_ID);
	IF :NEW.KALIBR_ID='25A' THEN
	  :NEW.KALIBR_ID:='25А';
	END IF;
  END IF;	

  IF INSERTING() OR (UPDATING('VAGONTYPE_ID') AND NVL(:NEW.VAGONTYPE_ID,0)<>NVL(:OLD.VAGONTYPE_ID,0)) THEN
	IF NVL(:NEW.VAGONTYPE_ID,0) IN (1,2,5,9) THEN
	  :NEW.KALIBR_ID:=FOR_CIST.GET_KALIBR_BY_VAGONTYPE(vLOAD_TYPE_ID, NVL(:NEW.VAGONTYPE_ID,0));
	END IF;
  END IF;

  IF INSERTING() OR 
     (UPDATING('KALIBR_ID') AND :NEW.KALIBR_ID||' '<>:OLD.KALIBR_ID||' ') OR 
	 (UPDATING('VZLIV') AND NVL(:NEW.VZLIV,0)<>NVL(:OLD.VZLIV,0)) THEN
    :NEW.VOLUME:=FOR_CIST.GET_VOLUME(:NEW.KALIBR_ID, NVL(:NEW.VZLIV,0), vLOAD_TYPE_ID, NVL(:NEW.VAGONTYPE_ID,0));
  END IF;

  IF INSERTING() OR UPDATING('AXES') THEN
    IF vLOAD_TYPE_ID=1 AND NVL(:NEW.AXES,0) NOT IN (4,8) THEN
	  :NEW.AXES:=4;
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('VES') THEN
    IF vLOAD_TYPE_ID=1 AND NVL(:NEW.VES,0)>0 AND NVL(:NEW.VES,0)<100 THEN
	  :NEW.AXES:=4;
	END IF;
    IF vLOAD_TYPE_ID=1 AND NVL(:NEW.VES,0)>0 AND NVL(:NEW.VES,0)>=100 THEN
	  :NEW.AXES:=8;
	END IF;
	IF NVL(:NEW.VES,0)=0 THEN
	  :NEW.KOL_NET:=0;
	END IF;  
  END IF;
  
  IF INSERTING() OR UPDATING('ZPU_TYPE1') THEN
    :NEW.ZPU_TYPE1:=NVL(:NEW.ZPU_TYPE1,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE1',FOR_INIT.GetCurrUser));
  END IF;
  IF INSERTING() OR UPDATING('ZPU_TYPE2') THEN
--    IF :NEW.AXES>4 THEN
      :NEW.ZPU_TYPE2:=NVL(:NEW.ZPU_TYPE2,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE2',FOR_INIT.GetCurrUser));
--	END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;

	-- Изменение адреса
    IF NVL(:NEW.NAR_LINE_ID,0)<>NVL(:OLD.NAR_LINE_ID,0) THEN
      IF NVL(:NEW.NAR_LINE_ID,0)<>0 AND NVL(:NEW.VAG_STATUS_ID,0)<>0 THEN
	    -- Попытка адресации бракованного вагона
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя присвоить Разрешение (адрес) бракованному вагону!');
	  END IF;
	 
	  IF NVL(:NEW.NAR_LINE_ID,0)=0 AND NVL(:NEW.NAKL_ID,0)<>0 THEN
	    -- попытка снять адрес с вагона в накладной
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя отменить Разрешение (адрес) с вагона в Накладной!');
	  END IF;
	END IF;

	-- Изменение накладной
    IF NVL(:NEW.NAKL_ID,0)<>NVL(:OLD.NAKL_ID,0) THEN
	  IF NVL(:NEW.NAKL_ID,0)=0 AND NVL(:NEW.UVED_ID,0)<>0 THEN
	    -- попытка снять адрес с вагона в накладной
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изъять отгрузку из Накладной, если она включена в Уведомление!');
	  END IF;
    END IF;
		
    -- Проверка статуса вагона
    IF UPDATING('VAG_STATUS_ID') AND NVL(:NEW.VAG_STATUS_ID,0)<>NVL(:OLD.VAG_STATUS_ID,0) THEN
	  IF NVL(:NEW.NAKL_ID,0)<>0 THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя сменить статус отгрузки ' || :NEW.NUM_CIST || ' - она уже входит в накладную!');
      END IF;
      IF NVL(:NEW.VAG_STATUS_ID,0)<>0 THEN
  	    :NEW.NAR_LINE_ID:=NULL;
		:NEW.VES:=0;
		:NEW.KOL_NET:=0;
	  END IF;
	END IF;

  END IF;
END;
/


--
-- TRG_BIUDR_REESTR_IN  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REESTR_IN
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REESTR_IN
FOR EACH ROW
DECLARE
 vOTHER_SVED_NUM SVED_IN.SVED_NUM%TYPE;
 vSVED_DATE SVED_IN.SVED_DATE%TYPE;
 vPROD_ID_NPR SVED_IN.PROD_ID_NPR%TYPE;
BEGIN

  -- Считываем значения из других таблиц
  BEGIN
	SELECT SVED_DATE,PROD_ID_NPR INTO vSVED_DATE,vPROD_ID_NPR
	  FROM SVED_IN
	 WHERE ID=:NEW.SVED_IN_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vSVED_DATE:=NULL;
  END;

  -- Корректируем значения полей
  IF INSERTING() OR (UPDATING('CAPACITY') AND :NEW.CAPACITY||' '<>:OLD.CAPACITY||' ') THEN
	BEGIN
      :NEW.CAPACITY:=ORA_NUM_TO_CHAR(ora_char_to_num(:NEW.CAPACITY,'999.999'));
	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Неверное значение грузоподъемности!');
	END;
  END IF;

  IF INSERTING() OR UPDATING('VES_CIST') THEN
    :NEW.VES_CIST:=NVL(:NEW.VES_CIST,0);
  END IF;

  IF INSERTING() OR (UPDATING('NUM_CIST') AND :NEW.NUM_CIST||' '<>:OLD.NUM_CIST||' ') THEN
    IF FOR_CIST.CHECK_NUM_CIST(:NEW.NUM_CIST, 1, NVL(:NEW.VAGONTYPE_ID,0))=0 THEN
      :NEW.BAD_NUM:=1;
	ELSE
	  :NEW.BAD_NUM:=0;
	END IF;
	vOTHER_SVED_NUM:=FOR_SVED_IN.CHECK_UNIQ(1,:NEW.NUM_CIST,:NEW.ID,vSVED_DATE);
	IF NVL(vOTHER_SVED_NUM,0)<>0 THEN
--      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Вагон '||:NEW.NUM_CIST||' уже есть в сведении N '||TO_CHAR(vOTHER_SVED_NUM));
      NULL;
	END IF;
  END IF;

  IF INSERTING() OR (UPDATING('KALIBR_ID') AND :NEW.KALIBR_ID||' '<>:OLD.KALIBR_ID||' ') THEN
    :NEW.KALIBR_ID:=NLS_UPPER(:NEW.KALIBR_ID);
	IF :NEW.KALIBR_ID='25A' THEN
	  :NEW.KALIBR_ID:='25А';
	END IF;
  END IF;	

  IF INSERTING() OR (UPDATING('VAGONTYPE_ID') AND NVL(:NEW.VAGONTYPE_ID,0)<>NVL(:OLD.VAGONTYPE_ID,0)) THEN
	IF NVL(:NEW.VAGONTYPE_ID,0) IN (1,2,5,9) THEN
	  :NEW.KALIBR_ID:=FOR_CIST.GET_KALIBR_BY_VAGONTYPE(1, NVL(:NEW.VAGONTYPE_ID,0));
	END IF;
  END IF;

  IF INSERTING() OR 
     (UPDATING('KALIBR_ID') AND :NEW.KALIBR_ID||' '<>:OLD.KALIBR_ID||' ') OR 
	 (UPDATING('VZLIV') AND NVL(:NEW.VZLIV,0)<>NVL(:OLD.VZLIV,0)) THEN
    :NEW.VOLUME:=FOR_CIST.GET_VOLUME(:NEW.KALIBR_ID, NVL(:NEW.VZLIV,0), 1, NVL(:NEW.VAGONTYPE_ID,0));
  END IF;
  
  IF INSERTING() OR UPDATING('VES') THEN
	IF NVL(:NEW.VES,0)=0 THEN
	  :NEW.VES_NETTO:=0;
	END IF;  
  END IF;

  IF INSERTING() OR UPDATING('VES_KVIT')  OR UPDATING('P_VOD_KVIT') OR UPDATING('P_SOL_KVIT') OR UPDATING('P_DIRT_KVIT') THEN
	:NEW.VES_NETTO_KVIT:=ROUND((NVL(:NEW.VES_KVIT,0)*(1-NVL(:NEW.P_SOL_KVIT,0)/100-NVL(:NEW.P_DIRT_KVIT,0)/100-NVL(:NEW.P_VOD_KVIT,0)/100)),4);
  END IF;
  
  IF INSERTING() THEN
	IF :NEW.NUM_KVIT_TXT||' '<>' ' THEN
	  :NEW.NUM_KVIT:=ORA_VAL(:NEW.NUM_KVIT_TXT);
	ELSE  
	  :NEW.NUM_KVIT_TXT:=ORA_CHAR_TO_NUM(:NEW.NUM_KVIT);
	  IF :NEW.NUM_KVIT_TXT='0' THEN
	    :NEW.NUM_KVIT_TXT:=NULL;
	  END IF;	
	END IF;  
  END IF;
    
  IF UPDATING('NUM_KVIT_TXT') THEN
    :NEW.NUM_KVIT:=ORA_VAL(:NEW.NUM_KVIT_TXT);
  END IF;

  IF UPDATING('NUM_KVIT') THEN
    :NEW.NUM_KVIT_TXT:=TO_CHAR(:NEW.NUM_KVIT);
  END IF;

/*  IF INSERTING() OR UPDATING() THEN
	IF NVL(:NEW.VAGOWNER_ID,0)=0 AND vPROD_ID_NPR='90002' THEN
	  :NEW.VAGOWNER_ID:=33;
	END IF;  
  END IF;*/
  
  IF INSERTING() OR UPDATING('ZPU_TYPE1') THEN
    :NEW.ZPU_TYPE1:=NVL(:NEW.ZPU_TYPE1,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE1',FOR_INIT.GetCurrUser));
  END IF;
  IF INSERTING() OR UPDATING('ZPU_TYPE2') THEN
    :NEW.ZPU_TYPE2:=NVL(:NEW.ZPU_TYPE2,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE2',FOR_INIT.GetCurrUser));
  END IF;
  
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;	
END;
/


--
-- TRG_BIUDR_VED_OSMOTR_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_OSMOTR_ROW
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR_ROW
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID VED_OSMOTR.LOAD_TYPE_ID%TYPE;
 vVED_POD_ROW_ID VED_POD_ROW.ID%TYPE;
 vVED_POD_NUM VED_POD.POD_NUM%TYPE;
 vOTHER_VED_NUM VED_OSMOTR.VED_NUM%TYPE;
 vVED_DATE VED_OSMOTR.VED_DATE%TYPE;
BEGIN
  -- Считываем значения из других таблиц
  BEGIN
	SELECT LOAD_TYPE_ID,VED_DATE INTO vLOAD_TYPE_ID,vVED_DATE
	  FROM VED_OSMOTR
	 WHERE ID=:NEW.VED_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
	  vVED_DATE:=NULL;
  END;

  BEGIN
	SELECT b.ID, a.POD_NUM INTO vVED_POD_ROW_ID, vVED_POD_NUM
	  FROM VED_POD_ROW b, VED_POD a
	 WHERE b.VED_POD_ID=a.ID AND b.VED_OSMOTR_ROW_ID=:NEW.ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vVED_POD_ROW_ID:=NULL;
	  vVED_POD_NUM:=NULL;
  END;

  -- Корректируем значения полей
  IF INSERTING() OR UPDATING('CAPACITY') THEN
	BEGIN
      :NEW.CAPACITY:=ORA_NUM_TO_CHAR(ora_char_to_num(:NEW.CAPACITY,'999.999'));
	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Неверное значение грузоподъемности!');
	END;
  END IF;

  IF UPDATING('NUM_CIST') AND vVED_POD_ROW_ID IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер вагона в ведомости осмотра! Вагон '||:OLD.NUM_CIST||' уже включен в ведомость подачи N '||TO_CHAR(vVED_POD_NUM));
  END IF;

  IF INSERTING() OR UPDATING('VES_CIST') THEN
    :NEW.VES_CIST:=NVL(:NEW.VES_CIST,0);
  END IF;

  IF INSERTING() OR UPDATING('NUM_CIST') THEN
    IF FOR_CIST.CHECK_NUM_CIST(:NEW.NUM_CIST, vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID)=0 THEN
      :NEW.BAD_NUM:=1;
	ELSE
	  :NEW.BAD_NUM:=0;
	END IF;
	vOTHER_VED_NUM:=FOR_VED_OSMOTR.CHECK_UNIQ(vLOAD_TYPE_ID,:NEW.NUM_CIST,:NEW.ID,vVED_DATE);
	IF vOTHER_VED_NUM||' '<>' ' THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Вагон '||:NEW.NUM_CIST||' уже есть в ведомости осмотра N '||TO_CHAR(vOTHER_VED_NUM));
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('KALIBR_ID') OR UPDATING('VAGONTYPE_ID') THEN
    :NEW.KALIBR_ID:=NLS_UPPER(:NEW.KALIBR_ID);
	IF :NEW.KALIBR_ID='25A' THEN
	  :NEW.KALIBR_ID:='25А';
	END IF;
	IF :NEW.VAGONTYPE_ID IN (1,2,5,9) THEN
	  :NEW.KALIBR_ID:=FOR_CIST.GET_KALIBR_BY_VAGONTYPE(vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID);
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('AXES') THEN
    IF vLOAD_TYPE_ID=1 AND :NEW.AXES NOT IN (4,8) THEN
	  :NEW.AXES:=4;
	END IF;
  END IF;
 
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;

END;
/


--
-- TRG_BIUDR_VED_POD_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_POD_ROW
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_POD_ROW
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID VED_POD.LOAD_TYPE_ID%TYPE;
 vREESTR_ID REESTR.ID%TYPE;
 vSVED_NUM SVED.SVED_NUM%TYPE;
 vOTHER_POD_NUM VED_POD.POD_NUM%TYPE;
 vPOD_DATE VED_POD.POD_DATE%TYPE;
BEGIN
  -- Считываем значения из других таблиц
  BEGIN
	SELECT LOAD_TYPE_ID,POD_DATE INTO vLOAD_TYPE_ID,vPOD_DATE
	  FROM VED_POD
	 WHERE ID=:NEW.VED_POD_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
	  vPOD_DATE:=NULL;
  END;

  BEGIN
	SELECT b.ID, a.SVED_NUM INTO vREESTR_ID, vSVED_NUM
	  FROM REESTR b, SVED a
	 WHERE b.SVED_ID=a.ID AND b.VED_POD_ROW_ID=:NEW.ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vREESTR_ID:=NULL;
  END;

  -- Корректируем значения полей
  IF INSERTING() OR UPDATING('CAPACITY') THEN
	BEGIN
      :NEW.CAPACITY:=ORA_NUM_TO_CHAR(ora_char_to_num(:NEW.CAPACITY,'999.999'));
	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Неверное значение грузоподъемности!');
	END;
  END IF;

  IF UPDATING('NUM_CIST') AND vREESTR_ID IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер вагона в ведомости подачи! Вагон '||:OLD.NUM_CIST||' уже включен в сведение N '||TO_CHAR(vSVED_NUM));
  END IF;

  IF UPDATING('NUM_CIST') AND :NEW.VED_OSMOTR_ROW_ID IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер вагона в ведомости подачи! Вагон '||:OLD.NUM_CIST||' связан с ведомостью предварительного осмотра!');
  END IF;
  
  IF INSERTING() OR UPDATING('VES_CIST') THEN
    :NEW.VES_CIST:=NVL(:NEW.VES_CIST,0);
  END IF;

  IF INSERTING() OR UPDATING('NUM_CIST') THEN
    IF FOR_CIST.CHECK_NUM_CIST(:NEW.NUM_CIST, vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID)=0 THEN
      :NEW.BAD_NUM:=1;
	ELSE
	  :NEW.BAD_NUM:=0;
	END IF;
	vOTHER_POD_NUM:=FOR_PODACHA.CHECK_UNIQ(vLOAD_TYPE_ID,:NEW.NUM_CIST,:NEW.ID,vPOD_DATE);
	IF vOTHER_POD_NUM||' '<>' ' THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Вагон '||:NEW.NUM_CIST||' уже есть в ведомости подачи N '||TO_CHAR(vOTHER_POD_NUM));
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('KALIBR_ID') OR UPDATING('VAGONTYPE_ID') THEN
    :NEW.KALIBR_ID:=NLS_UPPER(:NEW.KALIBR_ID);
	IF :NEW.KALIBR_ID='25A' THEN
	  :NEW.KALIBR_ID:='25А';
	END IF;
	IF :NEW.VAGONTYPE_ID IN (1,2,5,9) THEN
	  :NEW.KALIBR_ID:=FOR_CIST.GET_KALIBR_BY_VAGONTYPE(vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID);
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('KALIBR_ID') OR UPDATING('VZLIV') THEN
    :NEW.VOLUME:=FOR_CIST.GET_VOLUME(:NEW.KALIBR_ID, :NEW.VZLIV, vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID);
  END IF;

  IF INSERTING() OR UPDATING('AXES') THEN
    IF vLOAD_TYPE_ID=1 AND :NEW.AXES NOT IN (4,8) THEN
	  :NEW.AXES:=4;
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('ZPU_TYPE1') THEN
    :NEW.ZPU_TYPE1:=NVL(:NEW.ZPU_TYPE1,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE1',FOR_INIT.GetCurrUser));
  END IF;
  IF INSERTING() OR UPDATING('ZPU_TYPE2') THEN
--    IF :NEW.AXES>4 THEN
      :NEW.ZPU_TYPE2:=NVL(:NEW.ZPU_TYPE2,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE2',FOR_INIT.GetCurrUser));
--	END IF;
  END IF;


  -- Уникальный ID
  IF INSERTING() OR UPDATING('ID') THEN
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;

END;
/


--
-- TRG_CHECKARH_DOP_KVIT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_DOP_KVIT
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.DOP_KVIT
FOR EACH ROW
DECLARE
  v_tmp NUMBER;
  v_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='KVIT';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Контроль
  IF DELETING() AND :OLD.DATE_KVIT<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND :OLD.DATE_KVIT<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND :NEW.DATE_KVIT<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_KVIT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_KVIT
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KVIT
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='KVIT';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    doc_dat:=:OLD.DATE_KVIT;
    /*BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:OLD.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  ELSE
    doc_dat:=:NEW.DATE_KVIT;
    /*BEGIN
      SELECT ISU_BILLS.DATE_VYP_SF INTO doc_dat
	    FROM ISU_BILLS WHERE ISU_BILLS.ISU_KOD=:NEW.ISU_KOD;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;*/	
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- TRG_CHECKARH_KVIT_NOMSF  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_CHECKARH_KVIT_NOMSF
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.KVIT_NOMSF
FOR EACH ROW
DECLARE
  v_dat DATE;
  doc_dat DATE;
  TABLE_MUTATING    EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
BEGIN
  /* Триггер запрета изменения архивных данных */
  
  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='ISU_BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	  

  -- Определение даты документа
  IF UPDATING() OR DELETING() THEN
    --doc_dat:=:OLD.DATE_VIR;
    BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:OLD.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;	
  ELSE
    --doc_dat:=:NEW.DATE_VIR;
    BEGIN
      SELECT KVIT.DATE_KVIT INTO doc_dat
	    FROM KVIT WHERE KVIT.ID=:NEW.KVIT_ID;
    EXCEPTION 
      WHEN TABLE_MUTATING THEN
	    doc_dat:=TO_DATE('01.01.2900','dd.mm.yyyy');
      WHEN OTHERS THEN
	    doc_dat:=TO_DATE('01.01.1900','dd.mm.yyyy');
    END;
  END IF;	  	  
 
  -- Контроль
  IF DELETING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_D);
  END IF;
  IF UPDATING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_U);
  END IF;
  IF INSERTING() AND doc_dat<=v_dat THEN
     raise_application_error( FOR_SCRIPTS.SG$CHANGE_ARCHIVE, FOR_SCRIPTS.SG$CHANGE_ARCHIVE_I);
  END IF;

END;
/


--
-- T11_BIUDR_MONTH  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T11_BIUDR_MONTH
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER."MONTH"
FOR EACH ROW
DECLARE
  vId NUMBER;
  TABLE_MUTATING    EXCEPTION;
  NO_STATEMENT_PARSED	EXCEPTION;
  PRAGMA EXCEPTION_INIT( TABLE_MUTATING,-04091 );
  PRAGMA EXCEPTION_INIT( NO_STATEMENT_PARSED,-01003 );
  v_old MONTH%ROWTYPE;
  v_new MONTH%ROWTYPE;
  v_zakaz ZAKAZ%ROWTYPE;
  v_zakaz_hist ZAKAZ_HIST%ROWTYPE;
  vNOM_ZD VARCHAR2(12);
  vNEW_NOM_ZD VARCHAR2(12);
BEGIN

  IF INSERTING() THEN
    vNOM_ZD:=:NEW.NOM_ZD;
	v_old.ZAKAZ_ID:=NULL;
	v_new.ZAKAZ_ID:=:NEW.ZAKAZ_ID;
	v_old.ZAKAZ_HIST_ID:=NULL;
	v_new.ZAKAZ_HIST_ID:=:NEW.ZAKAZ_HIST_ID;
	v_old.TONN_DECLARED:=0;
	v_new.TONN_DECLARED:=NVL(:NEW.TONN_DECLARED,0);
	v_old.CIST_DECLARED:=0;
	v_new.CIST_DECLARED:=NVL(:NEW.CIST_DECLARED,0);
	v_old.TONN_LOADED:=0;
	v_new.TONN_LOADED:=NVL(:NEW.TONN_LOADED,0);
	v_old.CIST_LOADED:=0;
	v_new.CIST_LOADED:=NVL(:NEW.CIST_LOADED,0);
    v_new.zakaz_kod_isu:=:new.zakaz_kod_isu;
  END IF;
  IF UPDATING() THEN
    vNOM_ZD:=:NEW.NOM_ZD;
	v_old.ZAKAZ_ID:=:OLD.ZAKAZ_ID;
	v_new.ZAKAZ_ID:=:NEW.ZAKAZ_ID;
	v_old.ZAKAZ_HIST_ID:=:OLD.ZAKAZ_HIST_ID;
	v_new.ZAKAZ_HIST_ID:=:NEW.ZAKAZ_HIST_ID;
	v_old.TONN_DECLARED:=NVL(:OLD.TONN_DECLARED,0);
	v_new.TONN_DECLARED:=NVL(:NEW.TONN_DECLARED,0);
	v_old.CIST_DECLARED:=NVL(:OLD.CIST_DECLARED,0);
	v_new.CIST_DECLARED:=NVL(:NEW.CIST_DECLARED,0);
	v_old.TONN_LOADED:=NVL(:OLD.TONN_LOADED,0);
	v_new.TONN_LOADED:=NVL(:NEW.TONN_LOADED,0);
	v_old.CIST_LOADED:=NVL(:OLD.CIST_LOADED,0);
	v_new.CIST_LOADED:=NVL(:NEW.CIST_LOADED,0);
    v_new.zakaz_kod_isu:=:new.zakaz_kod_isu;
  END IF;
  IF DELETING() THEN
    vNOM_ZD:=:OLD.NOM_ZD;
	v_old.ZAKAZ_ID:=:OLD.ZAKAZ_ID;
	v_new.ZAKAZ_ID:=NULL;
	v_old.ZAKAZ_HIST_ID:=:OLD.ZAKAZ_HIST_ID;
	v_new.ZAKAZ_HIST_ID:=NULL;
	v_old.TONN_DECLARED:=NVL(:OLD.TONN_DECLARED,0);
	v_new.TONN_DECLARED:=0;
	v_old.CIST_DECLARED:=NVL(:OLD.CIST_DECLARED,0);
	v_new.CIST_DECLARED:=0;
	v_old.TONN_LOADED:=NVL(:OLD.TONN_LOADED,0);
	v_new.TONN_LOADED:=0;
	v_old.CIST_LOADED:=NVL(:OLD.CIST_LOADED,0);
	v_new.CIST_LOADED:=0;
    v_new.zakaz_kod_isu:='';
  END IF;

  IF NVL(v_new.ZAKAZ_HIST_ID,0)<=0 THEN
    v_new.ZAKAZ_HIST_ID:=NULL;
  END IF;
  IF NVL(v_new.ZAKAZ_ID,0)<=0 THEN
    v_new.ZAKAZ_ID:=NULL;
    v_new.ZAKAZ_HIST_ID:=NULL;
  END IF;

  /* обработка мутаций при попытке обращения к таблице ZAKAZ_HIST */
  BEGIN
    IF NVL(v_old.ZAKAZ_ID,0)<>NVL(v_new.ZAKAZ_ID,0) OR
	   NVL(v_old.ZAKAZ_HIST_ID,0)<>NVL(v_new.ZAKAZ_HIST_ID,0) OR
	   (NVL(v_new.ZAKAZ_HIST_ID,0)=0 AND NVL(v_new.ZAKAZ_ID,0)<>0) THEN
	  -- Заказ изменился или в заказе не проставлена разнарядка

	  IF NVL(v_old.ZAKAZ_ID,0)<>NVL(v_new.ZAKAZ_ID,0) OR
	     (NVL(v_old.ZAKAZ_HIST_ID,0)<>NVL(v_new.ZAKAZ_HIST_ID,0) AND NVL(v_new.ZAKAZ_HIST_ID,0)<>0) THEN
		-- Заказ сменился - снимаем со старого разнарядку
		For_Zakaz.SetNOM_ZD(0,v_old.ZAKAZ_ID, v_old.ZAKAZ_HIST_ID, vNOM_ZD, '',0,0,0,0);
	  END IF;

	  IF NVL(v_new.ZAKAZ_ID,0)<>0 OR
	     NVL(v_new.ZAKAZ_HIST_ID,0)<>0 THEN
	  	-- Есть новый заказ

  	    IF NVL(v_new.ZAKAZ_ID,0)<>0 THEN
		  -- проверяем заказ
		  BEGIN
		    SELECT * INTO v_zakaz FROM ZAKAZ WHERE ID=v_new.ZAKAZ_ID;
		  EXCEPTION
		    WHEN NO_DATA_FOUND THEN
			  v_new.ZAKAZ_ID:=NULL;
		  END;
		END IF;

  	    IF NVL(v_new.ZAKAZ_ID,0)<>0 THEN
  	      IF NVL(v_new.ZAKAZ_HIST_ID,0)<>0 THEN
		    -- проверяем позицию заказа
		    BEGIN
		      SELECT * INTO v_zakaz_hist FROM ZAKAZ_HIST WHERE ID=v_new.ZAKAZ_HIST_ID AND ZAKAZ_ID=v_new.ZAKAZ_ID;
		    EXCEPTION
		      WHEN NO_DATA_FOUND THEN
			    v_new.ZAKAZ_HIST_ID:=NULL;
		    END;
		  END IF;

  	      IF NVL(v_new.ZAKAZ_HIST_ID,0)<>0 THEN
		    -- есть позиция заказа - вешаем на него разнарядку
		    For_Zakaz.SetNOM_ZD(0,v_new.ZAKAZ_ID, v_new.ZAKAZ_HIST_ID, vNOM_ZD, vNOM_ZD, v_new.TONN_DECLARED, v_new.CIST_DECLARED, v_new.TONN_LOADED, v_new.CIST_LOADED);
		  ELSE
		    -- ищем аналог
	        BEGIN
	          SELECT ID, NOM_ZD INTO v_new.ZAKAZ_HIST_ID, vNEW_NOM_ZD
		        FROM ZAKAZ_HIST
		       WHERE ZAKAZ_ID=v_new.ZAKAZ_ID
		         AND STATUS_ZAKAZ_ID=20
                 --AND IS_AUTO_MONTH=1 -- 26/12/2007 PSV 
		         AND IS_AUTO=0
		         AND (NOM_ZD IS NULL or NOM_ZD=vNOM_ZD)
		         AND PROD_ID_NPR=:NEW.PROD_ID_NPR
		         AND STAN_ID=:NEW.STAN_ID
		         AND POLUCH_ID=:NEW.POLUCH_ID
		         AND LOAD_VES=v_new.TONN_DECLARED
 		         AND ROWNUM=1;
	        EXCEPTION
	          WHEN NO_DATA_FOUND THEN
		        v_new.ZAKAZ_HIST_ID:=NULL;
	        END;
            
	        IF vNEW_NOM_ZD||' '=' ' THEN
		      -- в найденном заказе разнарядка не указана - снимаем разнарядку со старого заказа 
		      For_Zakaz.SetNOM_ZD(0,v_old.ZAKAZ_ID, v_old.ZAKAZ_HIST_ID, vNOM_ZD, '',0,0,0,0);
	        END IF;

  	        IF NVL(v_new.ZAKAZ_HIST_ID,0)<>0 THEN
		      -- аналог найден - вешаем на него разнарядку
		      For_Zakaz.SetNOM_ZD(0,v_new.ZAKAZ_ID, v_new.ZAKAZ_HIST_ID, vNOM_ZD, vNOM_ZD, v_new.TONN_DECLARED, v_new.CIST_DECLARED, v_new.TONN_LOADED, v_new.CIST_LOADED);
		    ELSE
			  -- даже аналог не найден - создаем позицию
              v_new.ZAKAZ_HIST_ID:=For_Zakaz.ToLoadZakaz(0, v_new.ZAKAZ_ID, 0, NULL, v_zakaz.INPUT_DATE, :NEW.INPUT_DATE, :NEW.PROD_ID_NPR,
                     :NEW.STAN_ID, :NEW.POLUCH_ID, :NEW.POTREB_ID, :NEW.CENA, vNOM_ZD, v_new.TONN_DECLARED, v_new.CIST_DECLARED,
					 0,0, v_new.TONN_LOADED, v_new.CIST_LOADED, :NEW.GU12_A_ID,'*');
			  UPDATE ZAKAZ_HIST SET IS_AUTO_MONTH=1 WHERE ID=v_new.ZAKAZ_HIST_ID;
			END IF;
		  END IF;
          -- восстановим заявку из ИСУ
          UPDATE ZAKAZ_HIST SET KOD_ISU=v_new.zakaz_kod_isu WHERE ID=v_new.ZAKAZ_HIST_ID and v_new.zakaz_kod_isu||' '<>' ' and kod_isu||' '=' ';  
		END IF;
	  END IF;
	ELSE
      IF NVL(v_new.ZAKAZ_HIST_ID,0)<>0 /*AND
	     (v_old.TONN_LOADED<>v_new.TONN_LOADED OR v_old.CIST_LOADED<>v_new.CIST_LOADED OR
		  v_old.TONN_DECLARED<>v_new.TONN_DECLARED OR v_old.CIST_DECLARED<>v_new.CIST_DECLARED) */ THEN
	    -- Изменился факт отгрузки по разнарядке
		For_Zakaz.SetNOM_ZD(0,v_new.ZAKAZ_ID, v_new.ZAKAZ_HIST_ID, vNOM_ZD, vNOM_ZD, v_new.TONN_DECLARED, v_new.CIST_DECLARED, v_new.TONN_LOADED, v_new.CIST_LOADED);
	  END IF;
    END IF;
  EXCEPTION
    WHEN TABLE_MUTATING OR NO_STATEMENT_PARSED THEN NULL;
  END;

  IF INSERTING() OR UPDATING() THEN
    :NEW.ZAKAZ_ID:=v_new.ZAKAZ_ID;
    :NEW.ZAKAZ_HIST_ID:=v_new.ZAKAZ_HIST_ID;
    :NEW.TONN_DECLARED:=v_new.TONN_DECLARED;
    :NEW.CIST_DECLARED:=v_new.CIST_DECLARED;
    :NEW.TONN_LOADED:=v_new.TONN_LOADED;
    :NEW.CIST_LOADED:=v_new.CIST_LOADED;
  END IF;

END;
/


--
-- T21_AIUDR_ZAKAZ_HIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T21_AIUDR_ZAKAZ_HIST
AFTER INSERT OR DELETE OR UPDATE
ON MASTER.ZAKAZ_HIST FOR EACH ROW
DECLARE
  vId NUMBER;
  TABLE_MUTATING    exception;
  NO_STATEMENT_PARSED	exception;
  pragma exception_init( TABLE_MUTATING,-04091 );
  pragma exception_init( NO_STATEMENT_PARSED,-01003 );
  v_old ZAKAZ_HIST%ROWTYPE;
  v_new ZAKAZ_HIST%ROWTYPE;
  vSTATUS_ZAKAZ_ID NUMBER;
  vZAKAZ_ID NUMBER;
  vSTAN_ID NUMBER;
BEGIN

  IF INSERTING() THEN
    vID:=:NEW.ID;
    vSTATUS_ZAKAZ_ID:=:NEW.STATUS_ZAKAZ_ID;
    vZAKAZ_ID:=:NEW.ZAKAZ_ID;
    v_old.NOM_ZD:='';
    v_new.NOM_ZD:=:NEW.NOM_ZD;
	v_old.FACT_VES:=0;
	v_new.FACT_VES:=:NEW.FACT_VES;
	v_old.FACT_KOL:=0;
	v_new.FACT_KOL:=:NEW.FACT_KOL;
	v_old.VES:=0;
	v_new.VES:=:NEW.VES;
	v_old.KOL:=0;
	v_new.KOL:=:NEW.KOL;
	v_old.SPEED_VES:=0;
	v_new.SPEED_VES:=:NEW.SPEED_VES;
	v_old.SPEED_KOL:=0;
	v_new.SPEED_KOL:=:NEW.SPEED_KOL;
	v_old.LOAD_VES:=0;
	v_new.LOAD_VES:=:NEW.LOAD_VES;
	v_old.LOAD_KOL:=0;
	v_new.LOAD_KOL:=:NEW.LOAD_KOL;
	v_old.KOD_ISU:='';
	v_new.KOD_ISU:=:NEW.KOD_ISU;
    IF v_new.KOD_ISU||' '=' ' THEN
      -- считаем код из таблицы ZAKAZ_HIST_ISU
      BEGIN
		SELECT KOD_ISU INTO v_new.KOD_ISU
		  FROM ZAKAZ_HIST_ISU WHERE ZAKAZ_HIST_ID=vID;
	  EXCEPTION
	    WHEN OTHERS THEN
	      v_new.KOD_ISU:='';
	  END;
    END IF; 
  END IF;

  IF UPDATING() THEN
    vID:=:NEW.ID;
    vSTATUS_ZAKAZ_ID:=:NEW.STATUS_ZAKAZ_ID;
    vZAKAZ_ID:=:NEW.ZAKAZ_ID;
    v_old.NOM_ZD:=:OLD.NOM_ZD;
    v_new.NOM_ZD:=:NEW.NOM_ZD;
	v_old.FACT_VES:=:OLD.FACT_VES;
	v_new.FACT_VES:=:NEW.FACT_VES;
	v_old.FACT_KOL:=:OLD.FACT_KOL;
	v_new.FACT_KOL:=:NEW.FACT_KOL;
	v_old.VES:=:OLD.VES;
	v_new.VES:=:NEW.VES;
	v_old.KOL:=:OLD.KOL;
	v_new.KOL:=:NEW.KOL;
	v_old.SPEED_VES:=:OLD.SPEED_VES;
	v_new.SPEED_VES:=:NEW.SPEED_VES;
	v_old.SPEED_KOL:=:OLD.SPEED_KOL;
	v_new.SPEED_KOL:=:NEW.SPEED_KOL;
	v_old.LOAD_VES:=:OLD.LOAD_VES;
	v_new.LOAD_VES:=:NEW.LOAD_VES;
	v_old.LOAD_KOL:=:OLD.LOAD_KOL;
	v_new.LOAD_KOL:=:NEW.LOAD_KOL;
  	v_old.KOD_ISU:=:OLD.KOD_ISU;
	v_new.KOD_ISU:=:NEW.KOD_ISU;
  END IF;

  IF DELETING() THEN
    vID:=:OLD.ID;
    vSTATUS_ZAKAZ_ID:=:OLD.STATUS_ZAKAZ_ID;
    vZAKAZ_ID:=:OLD.ZAKAZ_ID;
    v_old.NOM_ZD:=:OLD.NOM_ZD;
    v_new.NOM_ZD:='';
	v_old.FACT_VES:=:OLD.FACT_VES;
	v_new.FACT_VES:=0;
	v_old.FACT_KOL:=:OLD.FACT_KOL;
	v_new.FACT_KOL:=0;
	v_old.VES:=:OLD.VES;
	v_new.VES:=0;
	v_old.KOL:=:OLD.KOL;
	v_new.KOL:=0;
	v_old.SPEED_VES:=:OLD.SPEED_VES;
	v_new.SPEED_VES:=0;
	v_old.SPEED_KOL:=:OLD.SPEED_KOL;
	v_new.SPEED_KOL:=0;
	v_old.LOAD_VES:=:OLD.LOAD_VES;
	v_new.LOAD_VES:=0;
	v_old.LOAD_KOL:=:OLD.LOAD_KOL;
	v_new.LOAD_KOL:=0;
  	v_old.KOD_ISU:=:OLD.KOD_ISU;
	v_new.KOD_ISU:=:OLD.KOD_ISU; -- так надо, чтобы код не удалился
  END IF;

  /* обработка мутаций при попытке обращения к таблице ZAKAZ */
  BEGIN
    -- "К отгрузке"
    IF vSTATUS_ZAKAZ_ID=20 THEN
      IF v_NEW.NOM_ZD||' '<>v_old.NOM_ZD||' ' THEN
	    -- Изменился № разнарядки - заменить в списке разнарядок заявки
  	    UPDATE ZAKAZ SET NOM_ZD_LIST=FOR_ZAKAZ.CHANGE_NOM_ZD(NOM_ZD_LIST,v_old.NOM_ZD,v_NEW.NOM_ZD)
		    WHERE ID=vZAKAZ_ID;
      END IF;
	  IF v_NEW.LOAD_KOL<>v_old.LOAD_KOL OR v_NEW.LOAD_VES<>v_old.LOAD_VES THEN
	    -- Изменился объем к отгрузке
  	    UPDATE ZAKAZ SET LOAD_KOL=LOAD_KOL+v_NEW.LOAD_KOL-v_old.LOAD_KOL,
		                 LOAD_VES=LOAD_VES+v_NEW.LOAD_VES-v_old.LOAD_VES
		    WHERE ID=vZAKAZ_ID;
	  END IF;
	  IF v_NEW.FACT_KOL<>v_old.FACT_KOL OR v_NEW.FACT_VES<>v_old.FACT_VES THEN
	    -- Изменился отгруженный объем
  	    UPDATE ZAKAZ SET FACT_KOL=FACT_KOL+v_NEW.FACT_KOL-v_old.FACT_KOL,
		                 FACT_VES=FACT_VES+v_NEW.FACT_VES-v_old.FACT_VES
		    WHERE ID=vZAKAZ_ID;
	  END IF;
	END IF;

    -- "Переадресация"
    IF vSTATUS_ZAKAZ_ID=40 OR vSTATUS_ZAKAZ_ID=41  OR vSTATUS_ZAKAZ_ID=42 THEN
	  IF UPDATING() OR INSERTING() THEN
  	    IF v_NEW.KOL<>v_old.KOL OR v_NEW.VES<>v_old.VES THEN
	      -- Изменился объем по заявке
  	      UPDATE ZAKAZ SET KOL=KOL+v_NEW.KOL-v_old.KOL,
		                 VES=VES+v_NEW.VES-v_old.VES
		    WHERE ID=vZAKAZ_ID;
	    END IF;
	    IF v_NEW.SPEED_KOL<>v_old.SPEED_KOL OR v_NEW.SPEED_VES<>v_old.SPEED_VES THEN
	      -- Изменился объем по заявке
  	      UPDATE ZAKAZ SET SPEED_KOL=SPEED_KOL+v_NEW.SPEED_KOL-v_old.SPEED_KOL,
		                 SPEED_VES=SPEED_VES+v_NEW.SPEED_VES-v_old.SPEED_VES
		    WHERE ID=vZAKAZ_ID;
	    END IF;
  	    IF v_NEW.VES=0 THEN
  	      -- Меняем станцию на новую только в том случае, когда
		  -- происходит переадресация всего заказа
  	      UPDATE ZAKAZ SET STAN_ID=:NEW.STAN_ID WHERE ID=vZAKAZ_ID;
		END IF;
	  ELSE
	    -- При удалении - Возвращаем предыдущую
		BEGIN
		  -- Проверяем на соответствие
		  SELECT STAN_ID INTO vSTAN_ID
		    FROM ZAKAZ WHERE ID=vZAKAZ_ID;
		EXCEPTION
		  WHEN OTHERS THEN
		    vSTAN_ID:=NULL;
		END;
		IF NVL(vSTAN_ID,0)<>0 THEN -- В заказе указана станция
		  IF NVL(vSTAN_ID,0)=NVL(:OLD.STAN_ID,0) THEN	-- Удаляется переадресация на текущую станцию
		    -- Возвращаем станцию до переадресации
  	        UPDATE ZAKAZ SET STAN_ID=:OLD.OLD_STAN_ID WHERE ID=vZAKAZ_ID;
		  END IF;
		END IF;
	  END IF;
	END IF;

    -- "Отказ"
    IF vSTATUS_ZAKAZ_ID=50 THEN
	  IF v_NEW.KOL<>v_old.KOL OR v_NEW.VES<>v_old.VES THEN
	    -- Изменился объем по заявке
  	    UPDATE ZAKAZ SET KOL=KOL+v_NEW.KOL-v_old.KOL,
		                 VES=VES+v_NEW.VES-v_old.VES
		    WHERE ID=vZAKAZ_ID;
	  END IF;
	  IF v_NEW.SPEED_KOL<>v_old.SPEED_KOL OR v_NEW.SPEED_VES<>v_old.SPEED_VES THEN
	    -- Изменился объем по заявке
  	    UPDATE ZAKAZ SET SPEED_KOL=SPEED_KOL+v_NEW.SPEED_KOL-v_old.SPEED_KOL,
		                 SPEED_VES=SPEED_VES+v_NEW.SPEED_VES-v_old.SPEED_VES
		    WHERE ID=vZAKAZ_ID;
	  END IF;
	END IF;

  exception
    when TABLE_MUTATING or NO_STATEMENT_PARSED then null;
  end;
 

  IF INSERTING() OR UPDATING() THEN
    /* обработка мутаций при попытке обращения к таблице MONTH */
    BEGIN
      --UPDATE MONTH SET zakaz_kod_isu=v_new.KOD_ISU where month.zakaz_hist_id=vID;
      null;
    exception
      when TABLE_MUTATING or NO_STATEMENT_PARSED then null;
    end;

    UPDATE ZAKAZ_HIST_ISU SET KOD_ISU=v_new.KOD_ISU WHERE ZAKAZ_HIST_ID=vID;
    IF SQL%NOTFOUND THEN
      INSERT INTO ZAKAZ_HIST_ISU (ZAKAZ_HIST_ID,KOD_ISU) VALUES (vID,v_new.KOD_ISU);
    END IF;
  END IF;
  
END;
/


--
-- T99_LOG_KVIT  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.T99_LOG_KVIT
/* ---------------------------------------------
  Генератор скриптов для MASTER
  PSV v1.04
--------------------------------------------- */
 AFTER DELETE OR INSERT OR UPDATE ON MASTER.KVIT  FOR EACH ROW
DECLARE
  v_old KVIT%ROWTYPE;
  v_new KVIT%ROWTYPE;
  v_tmp NUMBER;
  LogId NUMBER;
  cl_WhatWasDone CLOB;
  WriteStr VARCHAR2(250);
  WritePos NUMBER;
BEGIN

  IF DELETING() OR UPDATING() THEN
    -- Старые значения
    v_old.ID := :OLD.ID;
    v_old.FLG_OPERDATA := :OLD.FLG_OPERDATA;
    v_old.MESTO_ID := :OLD.MESTO_ID;
    v_old.NOM_ZD := :OLD.NOM_ZD;
    v_old.PROD_ID_NPR := :OLD.PROD_ID_NPR;
    v_old.TEX_PD_ID := :OLD.TEX_PD_ID;
    v_old.NUM_CIST := :OLD.NUM_CIST;
    v_old.DATE_OTGR := :OLD.DATE_OTGR;
    v_old.VES := :OLD.VES;
    v_old.VES_BRUTTO := :OLD.VES_BRUTTO;
    v_old.VES_ED := :OLD.VES_ED;
    v_old.KOL_ED := :OLD.KOL_ED;
    v_old.TARIF := :OLD.TARIF;
    v_old.TARIF19 := :OLD.TARIF19;
    v_old.TARIF_ORIG := :OLD.TARIF_ORIG;
    v_old.NUM_KVIT := :OLD.NUM_KVIT;
    v_old.DATE_KVIT := :OLD.DATE_KVIT;
    v_old.NUM_MILITARY := :OLD.NUM_MILITARY;
    v_old.FLG_DOP_CIST := :OLD.FLG_DOP_CIST;
    v_old.FLG_VAG_KLIENT := :OLD.FLG_VAG_KLIENT;
    v_old.VAGOWNER_ID := :OLD.VAGOWNER_ID;
    v_old.VAGONTYPE_ID := :OLD.VAGONTYPE_ID;
    v_old.KALIBR_ID := :OLD.KALIBR_ID;
    v_old.VES_CIST := :OLD.VES_CIST;
    v_old.DATE_VOZ := :OLD.DATE_VOZ;
    v_old.KVIT_VOZ := :OLD.KVIT_VOZ;
    v_old.SUM_VOZ := :OLD.SUM_VOZ;
    v_old.DATE_OTV := :OLD.DATE_OTV;
    v_old.PLOMBA1 := :OLD.PLOMBA1;
    v_old.PLOMBA2 := :OLD.PLOMBA2;
    v_old.ROSINSPL1 := :OLD.ROSINSPL1;
    v_old.ROSINSPL2 := :OLD.ROSINSPL2;
    v_old.VZLIV := :OLD.VZLIV;
    v_old.TEMPER := :OLD.TEMPER;
    v_old.FAKT_PL := :OLD.FAKT_PL;
    v_old.FORMNAKL_ID := :OLD.FORMNAKL_ID;
    v_old.SHABEXP_ID := :OLD.SHABEXP_ID;
    v_old.GTD := :OLD.GTD;
    v_old.EXPED_ID := :OLD.EXPED_ID;
    v_old.VETKA_OTP_ID := :OLD.VETKA_OTP_ID;
    v_old.NUM_EXP_MAR := :OLD.NUM_EXP_MAR;
    v_old.BILL_ID := :OLD.BILL_ID;
    v_old.SVED_ID := :OLD.SVED_ID;
    v_old.DATE_OFORML := :OLD.DATE_OFORML;
    v_old.SVED_NUM := :OLD.SVED_NUM;
    v_old.PASP_ID := :OLD.PASP_ID;
    v_old.NUM_NAR := :OLD.NUM_NAR;
    v_old.NUM_DOVER := :OLD.NUM_DOVER;
    v_old.PERER_ID := :OLD.PERER_ID;
    v_old.DATE_EDIT := :OLD.DATE_EDIT;
    v_old.JKCOMMIT := :OLD.JKCOMMIT;
    v_old.GROTP_ID := :OLD.GROTP_ID;
    v_old.PERECH_TEXPD_DATE := :OLD.PERECH_TEXPD_DATE;
    v_old.PERECH_TEXPD_NUM := :OLD.PERECH_TEXPD_NUM;
    v_old.SUM_PROD := :OLD.SUM_PROD;
    v_old.SUM_AKCIZ := :OLD.SUM_AKCIZ;
    v_old.SUM_PROD_NDS := :OLD.SUM_PROD_NDS;
    v_old.TARIF_NDS := :OLD.TARIF_NDS;
    v_old.SUM_VOZN11 := :OLD.SUM_VOZN11;
    v_old.SUM_VOZN11_NDS := :OLD.SUM_VOZN11_NDS;
    v_old.SUM_VOZN12 := :OLD.SUM_VOZN12;
    v_old.SUM_VOZN12_NDS := :OLD.SUM_VOZN12_NDS;
    v_old.SUM_STRAH := :OLD.SUM_STRAH;
    v_old.CENA := :OLD.CENA;
    v_old.CENA_OTP := :OLD.CENA_OTP;
    v_old.DATE_CENA := :OLD.DATE_CENA;
    v_old.CENA_VOZN := :OLD.CENA_VOZN;
    v_old.CAPACITY := :OLD.CAPACITY;
    v_old.TARIF_GUARD := :OLD.TARIF_GUARD;
    v_old.TARIF_GUARD_NDS := :OLD.TARIF_GUARD_NDS;
    v_old.TARIF_ALT := :OLD.TARIF_ALT;
    v_old.NACENKA := :OLD.NACENKA;
    v_old.PODDONS := :OLD.PODDONS;
    v_old.SHIELDS := :OLD.SHIELDS;
    v_old.UPAK_ID := :OLD.UPAK_ID;
    v_old.UPAK_VES := :OLD.UPAK_VES;
    v_old.KOL_NET := :OLD.KOL_NET;
    v_old.UPAK_VES_ED := :OLD.UPAK_VES_ED;
    v_old.SHIELD_VES := :OLD.SHIELD_VES;
    v_old.PODDON_VES := :OLD.PODDON_VES;
    v_old.PL := :OLD.PL;
    v_old.NUM_AKT := :OLD.NUM_AKT;
    v_old.BILL_POS_ID := :OLD.BILL_POS_ID;
    v_old.PROTO_NUM := :OLD.PROTO_NUM;
    v_old.PROTO_DATE := :OLD.PROTO_DATE;
    v_old.NO_AKCIZ := :OLD.NO_AKCIZ;
    v_old.PERECH_GUARD_DATE := :OLD.PERECH_GUARD_DATE;
    v_old.PERECH_GUARD_NUM := :OLD.PERECH_GUARD_NUM;
    v_old.TTN_ID := :OLD.TTN_ID;
    v_old.DATE_DOVER := :OLD.DATE_DOVER;
    v_old.FIO_DRIVER := :OLD.FIO_DRIVER;
    v_old.IS_LOADED := :OLD.IS_LOADED;
    v_old.AXES := :OLD.AXES;
    v_old.CTLV := :OLD.CTLV;
    v_old.DEFI_MASS_ID := :OLD.DEFI_MASS_ID;
    v_old.VOLUME := :OLD.VOLUME;
    v_old.VOLUME15 := :OLD.VOLUME15;
    v_old.ZPU_TYPE1 := :OLD.ZPU_TYPE1;
    v_old.ZPU_TYPE2 := :OLD.ZPU_TYPE2;
    v_old.PL15 := :OLD.PL15;
    v_old.DATE_IN := :OLD.DATE_IN;
  END IF;

  -- После удаления
  IF DELETING() THEN
    NULL;
    -- Запись в лог
    IF 1=1 THEN
      SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
      INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
        SELECT LogId,'KVIT',TO_CHAR(V_OLD.ID) || TO_CHAR(V_OLD.FLG_OPERDATA),osuser,terminal,MODULE,'D',EMPTY_CLOB()
          FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

      SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

      WritePos:=1;

            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.FLG_OPERDATA=' || TO_CHAR(V_OLD.FLG_OPERDATA) || ' :NEW.FLG_OPERDATA=' || TO_CHAR(V_NEW.FLG_OPERDATA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.MESTO_ID=' || TO_CHAR(V_OLD.MESTO_ID) || ' :NEW.MESTO_ID=' || TO_CHAR(V_NEW.MESTO_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.NUM_CIST=' || (V_OLD.NUM_CIST) || ' :NEW.NUM_CIST=' || (V_NEW.NUM_CIST) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_OTGR=' || TO_CHAR(V_OLD.DATE_OTGR,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OTGR=' || TO_CHAR(V_NEW.DATE_OTGR,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.VES_BRUTTO=' || TO_CHAR(V_OLD.VES_BRUTTO) || ' :NEW.VES_BRUTTO=' || TO_CHAR(V_NEW.VES_BRUTTO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.NUM_KVIT=' || TO_CHAR(V_OLD.NUM_KVIT) || ' :NEW.NUM_KVIT=' || TO_CHAR(V_NEW.NUM_KVIT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_KVIT=' || TO_CHAR(V_OLD.DATE_KVIT,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_KVIT=' || TO_CHAR(V_NEW.DATE_KVIT,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.BILL_ID=' || TO_CHAR(V_OLD.BILL_ID) || ' :NEW.BILL_ID=' || TO_CHAR(V_NEW.BILL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.SVED_ID=' || (V_OLD.SVED_ID) || ' :NEW.SVED_ID=' || (V_NEW.SVED_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_OFORML=' || TO_CHAR(V_OLD.DATE_OFORML,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OFORML=' || TO_CHAR(V_NEW.DATE_OFORML,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.SVED_NUM=' || TO_CHAR(V_OLD.SVED_NUM) || ' :NEW.SVED_NUM=' || TO_CHAR(V_NEW.SVED_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.PASP_ID=' || (V_OLD.PASP_ID) || ' :NEW.PASP_ID=' || (V_NEW.PASP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.SUM_PROD=' || TO_CHAR(V_OLD.SUM_PROD) || ' :NEW.SUM_PROD=' || TO_CHAR(V_NEW.SUM_PROD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.BILL_POS_ID=' || TO_CHAR(V_OLD.BILL_POS_ID) || ' :NEW.BILL_POS_ID=' || TO_CHAR(V_NEW.BILL_POS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.TTN_ID=' || TO_CHAR(V_OLD.TTN_ID) || ' :NEW.TTN_ID=' || TO_CHAR(V_NEW.TTN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.IS_LOADED=' || TO_CHAR(V_OLD.IS_LOADED) || ' :NEW.IS_LOADED=' || TO_CHAR(V_NEW.IS_LOADED) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_IN=' || TO_CHAR(V_OLD.DATE_IN,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_IN=' || TO_CHAR(V_NEW.DATE_IN,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          
    END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Новые значения
    v_new.ID := :NEW.ID;
    v_new.FLG_OPERDATA := :NEW.FLG_OPERDATA;
    v_new.MESTO_ID := :NEW.MESTO_ID;
    v_new.NOM_ZD := :NEW.NOM_ZD;
    v_new.PROD_ID_NPR := :NEW.PROD_ID_NPR;
    v_new.TEX_PD_ID := :NEW.TEX_PD_ID;
    v_new.NUM_CIST := :NEW.NUM_CIST;
    v_new.DATE_OTGR := :NEW.DATE_OTGR;
    v_new.VES := :NEW.VES;
    v_new.VES_BRUTTO := :NEW.VES_BRUTTO;
    v_new.VES_ED := :NEW.VES_ED;
    v_new.KOL_ED := :NEW.KOL_ED;
    v_new.TARIF := :NEW.TARIF;
    v_new.TARIF19 := :NEW.TARIF19;
    v_new.TARIF_ORIG := :NEW.TARIF_ORIG;
    v_new.NUM_KVIT := :NEW.NUM_KVIT;
    v_new.DATE_KVIT := :NEW.DATE_KVIT;
    v_new.NUM_MILITARY := :NEW.NUM_MILITARY;
    v_new.FLG_DOP_CIST := :NEW.FLG_DOP_CIST;
    v_new.FLG_VAG_KLIENT := :NEW.FLG_VAG_KLIENT;
    v_new.VAGOWNER_ID := :NEW.VAGOWNER_ID;
    v_new.VAGONTYPE_ID := :NEW.VAGONTYPE_ID;
    v_new.KALIBR_ID := :NEW.KALIBR_ID;
    v_new.VES_CIST := :NEW.VES_CIST;
    v_new.DATE_VOZ := :NEW.DATE_VOZ;
    v_new.KVIT_VOZ := :NEW.KVIT_VOZ;
    v_new.SUM_VOZ := :NEW.SUM_VOZ;
    v_new.DATE_OTV := :NEW.DATE_OTV;
    v_new.PLOMBA1 := :NEW.PLOMBA1;
    v_new.PLOMBA2 := :NEW.PLOMBA2;
    v_new.ROSINSPL1 := :NEW.ROSINSPL1;
    v_new.ROSINSPL2 := :NEW.ROSINSPL2;
    v_new.VZLIV := :NEW.VZLIV;
    v_new.TEMPER := :NEW.TEMPER;
    v_new.FAKT_PL := :NEW.FAKT_PL;
    v_new.FORMNAKL_ID := :NEW.FORMNAKL_ID;
    v_new.SHABEXP_ID := :NEW.SHABEXP_ID;
    v_new.GTD := :NEW.GTD;
    v_new.EXPED_ID := :NEW.EXPED_ID;
    v_new.VETKA_OTP_ID := :NEW.VETKA_OTP_ID;
    v_new.NUM_EXP_MAR := :NEW.NUM_EXP_MAR;
    v_new.BILL_ID := :NEW.BILL_ID;
    v_new.SVED_ID := :NEW.SVED_ID;
    v_new.DATE_OFORML := :NEW.DATE_OFORML;
    v_new.SVED_NUM := :NEW.SVED_NUM;
    v_new.PASP_ID := :NEW.PASP_ID;
    v_new.NUM_NAR := :NEW.NUM_NAR;
    v_new.NUM_DOVER := :NEW.NUM_DOVER;
    v_new.PERER_ID := :NEW.PERER_ID;
    v_new.DATE_EDIT := :NEW.DATE_EDIT;
    v_new.JKCOMMIT := :NEW.JKCOMMIT;
    v_new.GROTP_ID := :NEW.GROTP_ID;
    v_new.PERECH_TEXPD_DATE := :NEW.PERECH_TEXPD_DATE;
    v_new.PERECH_TEXPD_NUM := :NEW.PERECH_TEXPD_NUM;
    v_new.SUM_PROD := :NEW.SUM_PROD;
    v_new.SUM_AKCIZ := :NEW.SUM_AKCIZ;
    v_new.SUM_PROD_NDS := :NEW.SUM_PROD_NDS;
    v_new.TARIF_NDS := :NEW.TARIF_NDS;
    v_new.SUM_VOZN11 := :NEW.SUM_VOZN11;
    v_new.SUM_VOZN11_NDS := :NEW.SUM_VOZN11_NDS;
    v_new.SUM_VOZN12 := :NEW.SUM_VOZN12;
    v_new.SUM_VOZN12_NDS := :NEW.SUM_VOZN12_NDS;
    v_new.SUM_STRAH := :NEW.SUM_STRAH;
    v_new.CENA := :NEW.CENA;
    v_new.CENA_OTP := :NEW.CENA_OTP;
    v_new.DATE_CENA := :NEW.DATE_CENA;
    v_new.CENA_VOZN := :NEW.CENA_VOZN;
    v_new.CAPACITY := :NEW.CAPACITY;
    v_new.TARIF_GUARD := :NEW.TARIF_GUARD;
    v_new.TARIF_GUARD_NDS := :NEW.TARIF_GUARD_NDS;
    v_new.TARIF_ALT := :NEW.TARIF_ALT;
    v_new.NACENKA := :NEW.NACENKA;
    v_new.PODDONS := :NEW.PODDONS;
    v_new.SHIELDS := :NEW.SHIELDS;
    v_new.UPAK_ID := :NEW.UPAK_ID;
    v_new.UPAK_VES := :NEW.UPAK_VES;
    v_new.KOL_NET := :NEW.KOL_NET;
    v_new.UPAK_VES_ED := :NEW.UPAK_VES_ED;
    v_new.SHIELD_VES := :NEW.SHIELD_VES;
    v_new.PODDON_VES := :NEW.PODDON_VES;
    v_new.PL := :NEW.PL;
    v_new.NUM_AKT := :NEW.NUM_AKT;
    v_new.BILL_POS_ID := :NEW.BILL_POS_ID;
    v_new.PROTO_NUM := :NEW.PROTO_NUM;
    v_new.PROTO_DATE := :NEW.PROTO_DATE;
    v_new.NO_AKCIZ := :NEW.NO_AKCIZ;
    v_new.PERECH_GUARD_DATE := :NEW.PERECH_GUARD_DATE;
    v_new.PERECH_GUARD_NUM := :NEW.PERECH_GUARD_NUM;
    v_new.TTN_ID := :NEW.TTN_ID;
    v_new.DATE_DOVER := :NEW.DATE_DOVER;
    v_new.FIO_DRIVER := :NEW.FIO_DRIVER;
    v_new.IS_LOADED := :NEW.IS_LOADED;
    v_new.AXES := :NEW.AXES;
    v_new.CTLV := :NEW.CTLV;
    v_new.DEFI_MASS_ID := :NEW.DEFI_MASS_ID;
    v_new.VOLUME := :NEW.VOLUME;
    v_new.VOLUME15 := :NEW.VOLUME15;
    v_new.ZPU_TYPE1 := :NEW.ZPU_TYPE1;
    v_new.ZPU_TYPE2 := :NEW.ZPU_TYPE2;
    v_new.PL15 := :NEW.PL15;
    v_new.DATE_IN := :NEW.DATE_IN;

    -- После обновления
    IF UPDATING() THEN
      NULL;
      -- Запись в лог
      IF V_OLD.ID<>V_NEW.ID OR V_OLD.FLG_OPERDATA<>V_NEW.FLG_OPERDATA THEN
        -- Изменился PRIMARY KEY, добавляем в лог 2 записи
        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'KVIT',TO_CHAR(V_OLD.ID) || TO_CHAR(V_OLD.FLG_OPERDATA),osuser,terminal,MODULE,'D'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;

        -- Запись в лог
        IF 1=1 THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE)
            SELECT LogId,'KVIT',TO_CHAR(V_NEW.ID) || TO_CHAR(V_NEW.FLG_OPERDATA),osuser,terminal,MODULE,'I'
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');
        END IF;
      ELSE
        -- PRIMARY KEY не изменился, добавляем в лог 1 запись
        -- Запись в лог
        IF nvl(V_OLD.BILL_ID,0)<>nvl(V_NEW.BILL_ID,0) THEN
          SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
          INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
            SELECT LogId,'KVIT',TO_CHAR(V_NEW.ID) || TO_CHAR(V_NEW.FLG_OPERDATA),osuser,terminal,MODULE,'U',EMPTY_CLOB()
              FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

          SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

          WritePos:=1;

          IF V_OLD.ID<>V_NEW.ID THEN
            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FLG_OPERDATA<>V_NEW.FLG_OPERDATA THEN
            WriteStr:=':OLD.FLG_OPERDATA=' || TO_CHAR(V_OLD.FLG_OPERDATA) || ' :NEW.FLG_OPERDATA=' || TO_CHAR(V_NEW.FLG_OPERDATA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          /*IF V_OLD.MESTO_ID<>V_NEW.MESTO_ID THEN
            WriteStr:=':OLD.MESTO_ID=' || TO_CHAR(V_OLD.MESTO_ID) || ' :NEW.MESTO_ID=' || TO_CHAR(V_NEW.MESTO_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NOM_ZD||' '<>V_NEW.NOM_ZD||' ' THEN
            WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROD_ID_NPR||' '<>V_NEW.PROD_ID_NPR||' ' THEN
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TEX_PD_ID<>V_NEW.TEX_PD_ID THEN
            WriteStr:=':OLD.TEX_PD_ID=' || TO_CHAR(V_OLD.TEX_PD_ID) || ' :NEW.TEX_PD_ID=' || TO_CHAR(V_NEW.TEX_PD_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_CIST||' '<>V_NEW.NUM_CIST||' ' THEN
            WriteStr:=':OLD.NUM_CIST=' || (V_OLD.NUM_CIST) || ' :NEW.NUM_CIST=' || (V_NEW.NUM_CIST) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_OTGR<>V_NEW.DATE_OTGR THEN
            WriteStr:=':OLD.DATE_OTGR=' || TO_CHAR(V_OLD.DATE_OTGR,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OTGR=' || TO_CHAR(V_NEW.DATE_OTGR,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES<>V_NEW.VES THEN
            WriteStr:=':OLD.VES=' || TO_CHAR(V_OLD.VES) || ' :NEW.VES=' || TO_CHAR(V_NEW.VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES_BRUTTO<>V_NEW.VES_BRUTTO THEN
            WriteStr:=':OLD.VES_BRUTTO=' || TO_CHAR(V_OLD.VES_BRUTTO) || ' :NEW.VES_BRUTTO=' || TO_CHAR(V_NEW.VES_BRUTTO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES_ED<>V_NEW.VES_ED THEN
            WriteStr:=':OLD.VES_ED=' || TO_CHAR(V_OLD.VES_ED) || ' :NEW.VES_ED=' || TO_CHAR(V_NEW.VES_ED) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KOL_ED<>V_NEW.KOL_ED THEN
            WriteStr:=':OLD.KOL_ED=' || TO_CHAR(V_OLD.KOL_ED) || ' :NEW.KOL_ED=' || TO_CHAR(V_NEW.KOL_ED) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF<>V_NEW.TARIF THEN
            WriteStr:=':OLD.TARIF=' || TO_CHAR(V_OLD.TARIF) || ' :NEW.TARIF=' || TO_CHAR(V_NEW.TARIF) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF19<>V_NEW.TARIF19 THEN
            WriteStr:=':OLD.TARIF19=' || TO_CHAR(V_OLD.TARIF19) || ' :NEW.TARIF19=' || TO_CHAR(V_NEW.TARIF19) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF_ORIG<>V_NEW.TARIF_ORIG THEN
            WriteStr:=':OLD.TARIF_ORIG=' || TO_CHAR(V_OLD.TARIF_ORIG) || ' :NEW.TARIF_ORIG=' || TO_CHAR(V_NEW.TARIF_ORIG) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_KVIT<>V_NEW.NUM_KVIT THEN
            WriteStr:=':OLD.NUM_KVIT=' || TO_CHAR(V_OLD.NUM_KVIT) || ' :NEW.NUM_KVIT=' || TO_CHAR(V_NEW.NUM_KVIT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_KVIT<>V_NEW.DATE_KVIT THEN
            WriteStr:=':OLD.DATE_KVIT=' || TO_CHAR(V_OLD.DATE_KVIT,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_KVIT=' || TO_CHAR(V_NEW.DATE_KVIT,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_MILITARY||' '<>V_NEW.NUM_MILITARY||' ' THEN
            WriteStr:=':OLD.NUM_MILITARY=' || (V_OLD.NUM_MILITARY) || ' :NEW.NUM_MILITARY=' || (V_NEW.NUM_MILITARY) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FLG_DOP_CIST<>V_NEW.FLG_DOP_CIST THEN
            WriteStr:=':OLD.FLG_DOP_CIST=' || TO_CHAR(V_OLD.FLG_DOP_CIST) || ' :NEW.FLG_DOP_CIST=' || TO_CHAR(V_NEW.FLG_DOP_CIST) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FLG_VAG_KLIENT<>V_NEW.FLG_VAG_KLIENT THEN
            WriteStr:=':OLD.FLG_VAG_KLIENT=' || TO_CHAR(V_OLD.FLG_VAG_KLIENT) || ' :NEW.FLG_VAG_KLIENT=' || TO_CHAR(V_NEW.FLG_VAG_KLIENT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VAGOWNER_ID<>V_NEW.VAGOWNER_ID THEN
            WriteStr:=':OLD.VAGOWNER_ID=' || TO_CHAR(V_OLD.VAGOWNER_ID) || ' :NEW.VAGOWNER_ID=' || TO_CHAR(V_NEW.VAGOWNER_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VAGONTYPE_ID<>V_NEW.VAGONTYPE_ID THEN
            WriteStr:=':OLD.VAGONTYPE_ID=' || TO_CHAR(V_OLD.VAGONTYPE_ID) || ' :NEW.VAGONTYPE_ID=' || TO_CHAR(V_NEW.VAGONTYPE_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KALIBR_ID||' '<>V_NEW.KALIBR_ID||' ' THEN
            WriteStr:=':OLD.KALIBR_ID=' || (V_OLD.KALIBR_ID) || ' :NEW.KALIBR_ID=' || (V_NEW.KALIBR_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VES_CIST<>V_NEW.VES_CIST THEN
            WriteStr:=':OLD.VES_CIST=' || TO_CHAR(V_OLD.VES_CIST) || ' :NEW.VES_CIST=' || TO_CHAR(V_NEW.VES_CIST) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_VOZ<>V_NEW.DATE_VOZ THEN
            WriteStr:=':OLD.DATE_VOZ=' || TO_CHAR(V_OLD.DATE_VOZ,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_VOZ=' || TO_CHAR(V_NEW.DATE_VOZ,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KVIT_VOZ||' '<>V_NEW.KVIT_VOZ||' ' THEN
            WriteStr:=':OLD.KVIT_VOZ=' || (V_OLD.KVIT_VOZ) || ' :NEW.KVIT_VOZ=' || (V_NEW.KVIT_VOZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_VOZ<>V_NEW.SUM_VOZ THEN
            WriteStr:=':OLD.SUM_VOZ=' || TO_CHAR(V_OLD.SUM_VOZ) || ' :NEW.SUM_VOZ=' || TO_CHAR(V_NEW.SUM_VOZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_OTV<>V_NEW.DATE_OTV THEN
            WriteStr:=':OLD.DATE_OTV=' || TO_CHAR(V_OLD.DATE_OTV,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OTV=' || TO_CHAR(V_NEW.DATE_OTV,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLOMBA1||' '<>V_NEW.PLOMBA1||' ' THEN
            WriteStr:=':OLD.PLOMBA1=' || (V_OLD.PLOMBA1) || ' :NEW.PLOMBA1=' || (V_NEW.PLOMBA1) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PLOMBA2||' '<>V_NEW.PLOMBA2||' ' THEN
            WriteStr:=':OLD.PLOMBA2=' || (V_OLD.PLOMBA2) || ' :NEW.PLOMBA2=' || (V_NEW.PLOMBA2) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ROSINSPL1||' '<>V_NEW.ROSINSPL1||' ' THEN
            WriteStr:=':OLD.ROSINSPL1=' || (V_OLD.ROSINSPL1) || ' :NEW.ROSINSPL1=' || (V_NEW.ROSINSPL1) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ROSINSPL2||' '<>V_NEW.ROSINSPL2||' ' THEN
            WriteStr:=':OLD.ROSINSPL2=' || (V_OLD.ROSINSPL2) || ' :NEW.ROSINSPL2=' || (V_NEW.ROSINSPL2) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VZLIV<>V_NEW.VZLIV THEN
            WriteStr:=':OLD.VZLIV=' || TO_CHAR(V_OLD.VZLIV) || ' :NEW.VZLIV=' || TO_CHAR(V_NEW.VZLIV) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TEMPER<>V_NEW.TEMPER THEN
            WriteStr:=':OLD.TEMPER=' || TO_CHAR(V_OLD.TEMPER) || ' :NEW.TEMPER=' || TO_CHAR(V_NEW.TEMPER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FAKT_PL<>V_NEW.FAKT_PL THEN
            WriteStr:=':OLD.FAKT_PL=' || TO_CHAR(V_OLD.FAKT_PL) || ' :NEW.FAKT_PL=' || TO_CHAR(V_NEW.FAKT_PL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FORMNAKL_ID<>V_NEW.FORMNAKL_ID THEN
            WriteStr:=':OLD.FORMNAKL_ID=' || TO_CHAR(V_OLD.FORMNAKL_ID) || ' :NEW.FORMNAKL_ID=' || TO_CHAR(V_NEW.FORMNAKL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SHABEXP_ID<>V_NEW.SHABEXP_ID THEN
            WriteStr:=':OLD.SHABEXP_ID=' || TO_CHAR(V_OLD.SHABEXP_ID) || ' :NEW.SHABEXP_ID=' || TO_CHAR(V_NEW.SHABEXP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GTD||' '<>V_NEW.GTD||' ' THEN
            WriteStr:=':OLD.GTD=' || (V_OLD.GTD) || ' :NEW.GTD=' || (V_NEW.GTD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.EXPED_ID<>V_NEW.EXPED_ID THEN
            WriteStr:=':OLD.EXPED_ID=' || TO_CHAR(V_OLD.EXPED_ID) || ' :NEW.EXPED_ID=' || TO_CHAR(V_NEW.EXPED_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VETKA_OTP_ID<>V_NEW.VETKA_OTP_ID THEN
            WriteStr:=':OLD.VETKA_OTP_ID=' || TO_CHAR(V_OLD.VETKA_OTP_ID) || ' :NEW.VETKA_OTP_ID=' || TO_CHAR(V_NEW.VETKA_OTP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_EXP_MAR||' '<>V_NEW.NUM_EXP_MAR||' ' THEN
            WriteStr:=':OLD.NUM_EXP_MAR=' || (V_OLD.NUM_EXP_MAR) || ' :NEW.NUM_EXP_MAR=' || (V_NEW.NUM_EXP_MAR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;*/
          IF nvl(V_OLD.BILL_ID,0)<>nvl(V_NEW.BILL_ID,0) THEN
            WriteStr:=':OLD.BILL_ID=' || TO_CHAR(V_OLD.BILL_ID) || ' :NEW.BILL_ID=' || TO_CHAR(V_NEW.BILL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          /*IF V_OLD.SVED_ID||' '<>V_NEW.SVED_ID||' ' THEN
            WriteStr:=':OLD.SVED_ID=' || (V_OLD.SVED_ID) || ' :NEW.SVED_ID=' || (V_NEW.SVED_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_OFORML<>V_NEW.DATE_OFORML THEN
            WriteStr:=':OLD.DATE_OFORML=' || TO_CHAR(V_OLD.DATE_OFORML,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OFORML=' || TO_CHAR(V_NEW.DATE_OFORML,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SVED_NUM<>V_NEW.SVED_NUM THEN
            WriteStr:=':OLD.SVED_NUM=' || TO_CHAR(V_OLD.SVED_NUM) || ' :NEW.SVED_NUM=' || TO_CHAR(V_NEW.SVED_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PASP_ID||' '<>V_NEW.PASP_ID||' ' THEN
            WriteStr:=':OLD.PASP_ID=' || (V_OLD.PASP_ID) || ' :NEW.PASP_ID=' || (V_NEW.PASP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_NAR||' '<>V_NEW.NUM_NAR||' ' THEN
            WriteStr:=':OLD.NUM_NAR=' || (V_OLD.NUM_NAR) || ' :NEW.NUM_NAR=' || (V_NEW.NUM_NAR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_DOVER||' '<>V_NEW.NUM_DOVER||' ' THEN
            WriteStr:=':OLD.NUM_DOVER=' || (V_OLD.NUM_DOVER) || ' :NEW.NUM_DOVER=' || (V_NEW.NUM_DOVER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PERER_ID<>V_NEW.PERER_ID THEN
            WriteStr:=':OLD.PERER_ID=' || TO_CHAR(V_OLD.PERER_ID) || ' :NEW.PERER_ID=' || TO_CHAR(V_NEW.PERER_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_EDIT<>V_NEW.DATE_EDIT THEN
            WriteStr:=':OLD.DATE_EDIT=' || TO_CHAR(V_OLD.DATE_EDIT,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_EDIT=' || TO_CHAR(V_NEW.DATE_EDIT,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.JKCOMMIT<>V_NEW.JKCOMMIT THEN
            WriteStr:=':OLD.JKCOMMIT=' || TO_CHAR(V_OLD.JKCOMMIT) || ' :NEW.JKCOMMIT=' || TO_CHAR(V_NEW.JKCOMMIT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.GROTP_ID<>V_NEW.GROTP_ID THEN
            WriteStr:=':OLD.GROTP_ID=' || TO_CHAR(V_OLD.GROTP_ID) || ' :NEW.GROTP_ID=' || TO_CHAR(V_NEW.GROTP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PERECH_TEXPD_DATE||' '<>V_NEW.PERECH_TEXPD_DATE||' ' THEN
            WriteStr:=':OLD.PERECH_TEXPD_DATE=' || TO_CHAR(V_OLD.PERECH_TEXPD_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.PERECH_TEXPD_DATE=' || TO_CHAR(V_NEW.PERECH_TEXPD_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PERECH_TEXPD_NUM<>V_NEW.PERECH_TEXPD_NUM THEN
            WriteStr:=':OLD.PERECH_TEXPD_NUM=' || (V_OLD.PERECH_TEXPD_NUM) || ' :NEW.PERECH_TEXPD_NUM=' || (V_NEW.PERECH_TEXPD_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_PROD<>V_NEW.SUM_PROD THEN
            WriteStr:=':OLD.SUM_PROD=' || TO_CHAR(V_OLD.SUM_PROD) || ' :NEW.SUM_PROD=' || TO_CHAR(V_NEW.SUM_PROD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_AKCIZ<>V_NEW.SUM_AKCIZ THEN
            WriteStr:=':OLD.SUM_AKCIZ=' || TO_CHAR(V_OLD.SUM_AKCIZ) || ' :NEW.SUM_AKCIZ=' || TO_CHAR(V_NEW.SUM_AKCIZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_PROD_NDS<>V_NEW.SUM_PROD_NDS THEN
            WriteStr:=':OLD.SUM_PROD_NDS=' || TO_CHAR(V_OLD.SUM_PROD_NDS) || ' :NEW.SUM_PROD_NDS=' || TO_CHAR(V_NEW.SUM_PROD_NDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF_NDS<>V_NEW.TARIF_NDS THEN
            WriteStr:=':OLD.TARIF_NDS=' || TO_CHAR(V_OLD.TARIF_NDS) || ' :NEW.TARIF_NDS=' || TO_CHAR(V_NEW.TARIF_NDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_VOZN11<>V_NEW.SUM_VOZN11 THEN
            WriteStr:=':OLD.SUM_VOZN11=' || TO_CHAR(V_OLD.SUM_VOZN11) || ' :NEW.SUM_VOZN11=' || TO_CHAR(V_NEW.SUM_VOZN11) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_VOZN11_NDS<>V_NEW.SUM_VOZN11_NDS THEN
            WriteStr:=':OLD.SUM_VOZN11_NDS=' || TO_CHAR(V_OLD.SUM_VOZN11_NDS) || ' :NEW.SUM_VOZN11_NDS=' || TO_CHAR(V_NEW.SUM_VOZN11_NDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_VOZN12<>V_NEW.SUM_VOZN12 THEN
            WriteStr:=':OLD.SUM_VOZN12=' || TO_CHAR(V_OLD.SUM_VOZN12) || ' :NEW.SUM_VOZN12=' || TO_CHAR(V_NEW.SUM_VOZN12) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_VOZN12_NDS<>V_NEW.SUM_VOZN12_NDS THEN
            WriteStr:=':OLD.SUM_VOZN12_NDS=' || TO_CHAR(V_OLD.SUM_VOZN12_NDS) || ' :NEW.SUM_VOZN12_NDS=' || TO_CHAR(V_NEW.SUM_VOZN12_NDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SUM_STRAH<>V_NEW.SUM_STRAH THEN
            WriteStr:=':OLD.SUM_STRAH=' || TO_CHAR(V_OLD.SUM_STRAH) || ' :NEW.SUM_STRAH=' || TO_CHAR(V_NEW.SUM_STRAH) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA<>V_NEW.CENA THEN
            WriteStr:=':OLD.CENA=' || TO_CHAR(V_OLD.CENA) || ' :NEW.CENA=' || TO_CHAR(V_NEW.CENA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA_OTP<>V_NEW.CENA_OTP THEN
            WriteStr:=':OLD.CENA_OTP=' || TO_CHAR(V_OLD.CENA_OTP) || ' :NEW.CENA_OTP=' || TO_CHAR(V_NEW.CENA_OTP) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_CENA<>V_NEW.DATE_CENA THEN
            WriteStr:=':OLD.DATE_CENA=' || TO_CHAR(V_OLD.DATE_CENA,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_CENA=' || TO_CHAR(V_NEW.DATE_CENA,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CENA_VOZN<>V_NEW.CENA_VOZN THEN
            WriteStr:=':OLD.CENA_VOZN=' || TO_CHAR(V_OLD.CENA_VOZN) || ' :NEW.CENA_VOZN=' || TO_CHAR(V_NEW.CENA_VOZN) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CAPACITY||' '<>V_NEW.CAPACITY||' ' THEN
            WriteStr:=':OLD.CAPACITY=' || (V_OLD.CAPACITY) || ' :NEW.CAPACITY=' || (V_NEW.CAPACITY) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF_GUARD<>V_NEW.TARIF_GUARD THEN
            WriteStr:=':OLD.TARIF_GUARD=' || TO_CHAR(V_OLD.TARIF_GUARD) || ' :NEW.TARIF_GUARD=' || TO_CHAR(V_NEW.TARIF_GUARD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF_GUARD_NDS<>V_NEW.TARIF_GUARD_NDS THEN
            WriteStr:=':OLD.TARIF_GUARD_NDS=' || TO_CHAR(V_OLD.TARIF_GUARD_NDS) || ' :NEW.TARIF_GUARD_NDS=' || TO_CHAR(V_NEW.TARIF_GUARD_NDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TARIF_ALT<>V_NEW.TARIF_ALT THEN
            WriteStr:=':OLD.TARIF_ALT=' || TO_CHAR(V_OLD.TARIF_ALT) || ' :NEW.TARIF_ALT=' || TO_CHAR(V_NEW.TARIF_ALT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NACENKA<>V_NEW.NACENKA THEN
            WriteStr:=':OLD.NACENKA=' || TO_CHAR(V_OLD.NACENKA) || ' :NEW.NACENKA=' || TO_CHAR(V_NEW.NACENKA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PODDONS<>V_NEW.PODDONS THEN
            WriteStr:=':OLD.PODDONS=' || TO_CHAR(V_OLD.PODDONS) || ' :NEW.PODDONS=' || TO_CHAR(V_NEW.PODDONS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SHIELDS<>V_NEW.SHIELDS THEN
            WriteStr:=':OLD.SHIELDS=' || TO_CHAR(V_OLD.SHIELDS) || ' :NEW.SHIELDS=' || TO_CHAR(V_NEW.SHIELDS) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.UPAK_ID<>V_NEW.UPAK_ID THEN
            WriteStr:=':OLD.UPAK_ID=' || TO_CHAR(V_OLD.UPAK_ID) || ' :NEW.UPAK_ID=' || TO_CHAR(V_NEW.UPAK_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.UPAK_VES<>V_NEW.UPAK_VES THEN
            WriteStr:=':OLD.UPAK_VES=' || TO_CHAR(V_OLD.UPAK_VES) || ' :NEW.UPAK_VES=' || TO_CHAR(V_NEW.UPAK_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.KOL_NET<>V_NEW.KOL_NET THEN
            WriteStr:=':OLD.KOL_NET=' || TO_CHAR(V_OLD.KOL_NET) || ' :NEW.KOL_NET=' || TO_CHAR(V_NEW.KOL_NET) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.UPAK_VES_ED<>V_NEW.UPAK_VES_ED THEN
            WriteStr:=':OLD.UPAK_VES_ED=' || TO_CHAR(V_OLD.UPAK_VES_ED) || ' :NEW.UPAK_VES_ED=' || TO_CHAR(V_NEW.UPAK_VES_ED) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.SHIELD_VES<>V_NEW.SHIELD_VES THEN
            WriteStr:=':OLD.SHIELD_VES=' || TO_CHAR(V_OLD.SHIELD_VES) || ' :NEW.SHIELD_VES=' || TO_CHAR(V_NEW.SHIELD_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PODDON_VES<>V_NEW.PODDON_VES THEN
            WriteStr:=':OLD.PODDON_VES=' || TO_CHAR(V_OLD.PODDON_VES) || ' :NEW.PODDON_VES=' || TO_CHAR(V_NEW.PODDON_VES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PL<>V_NEW.PL THEN
            WriteStr:=':OLD.PL=' || TO_CHAR(V_OLD.PL) || ' :NEW.PL=' || TO_CHAR(V_NEW.PL) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NUM_AKT<>V_NEW.NUM_AKT THEN
            WriteStr:=':OLD.NUM_AKT=' || TO_CHAR(V_OLD.NUM_AKT) || ' :NEW.NUM_AKT=' || TO_CHAR(V_NEW.NUM_AKT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.BILL_POS_ID<>V_NEW.BILL_POS_ID THEN
            WriteStr:=':OLD.BILL_POS_ID=' || TO_CHAR(V_OLD.BILL_POS_ID) || ' :NEW.BILL_POS_ID=' || TO_CHAR(V_NEW.BILL_POS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROTO_NUM||' '<>V_NEW.PROTO_NUM||' ' THEN
            WriteStr:=':OLD.PROTO_NUM=' || (V_OLD.PROTO_NUM) || ' :NEW.PROTO_NUM=' || (V_NEW.PROTO_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PROTO_DATE<>V_NEW.PROTO_DATE THEN
            WriteStr:=':OLD.PROTO_DATE=' || TO_CHAR(V_OLD.PROTO_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.PROTO_DATE=' || TO_CHAR(V_NEW.PROTO_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.NO_AKCIZ<>V_NEW.NO_AKCIZ THEN
            WriteStr:=':OLD.NO_AKCIZ=' || TO_CHAR(V_OLD.NO_AKCIZ) || ' :NEW.NO_AKCIZ=' || TO_CHAR(V_NEW.NO_AKCIZ) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PERECH_GUARD_DATE<>V_NEW.PERECH_GUARD_DATE THEN
            WriteStr:=':OLD.PERECH_GUARD_DATE=' || TO_CHAR(V_OLD.PERECH_GUARD_DATE,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.PERECH_GUARD_DATE=' || TO_CHAR(V_NEW.PERECH_GUARD_DATE,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PERECH_GUARD_NUM||' '<>V_NEW.PERECH_GUARD_NUM||' ' THEN
            WriteStr:=':OLD.PERECH_GUARD_NUM=' || (V_OLD.PERECH_GUARD_NUM) || ' :NEW.PERECH_GUARD_NUM=' || (V_NEW.PERECH_GUARD_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.TTN_ID<>V_NEW.TTN_ID THEN
            WriteStr:=':OLD.TTN_ID=' || TO_CHAR(V_OLD.TTN_ID) || ' :NEW.TTN_ID=' || TO_CHAR(V_NEW.TTN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_DOVER<>V_NEW.DATE_DOVER THEN
            WriteStr:=':OLD.DATE_DOVER=' || TO_CHAR(V_OLD.DATE_DOVER,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_DOVER=' || TO_CHAR(V_NEW.DATE_DOVER,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.FIO_DRIVER||' '<>V_NEW.FIO_DRIVER||' ' THEN
            WriteStr:=':OLD.FIO_DRIVER=' || (V_OLD.FIO_DRIVER) || ' :NEW.FIO_DRIVER=' || (V_NEW.FIO_DRIVER) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.IS_LOADED<>V_NEW.IS_LOADED THEN
            WriteStr:=':OLD.IS_LOADED=' || TO_CHAR(V_OLD.IS_LOADED) || ' :NEW.IS_LOADED=' || TO_CHAR(V_NEW.IS_LOADED) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.AXES<>V_NEW.AXES THEN
            WriteStr:=':OLD.AXES=' || TO_CHAR(V_OLD.AXES) || ' :NEW.AXES=' || TO_CHAR(V_NEW.AXES) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.CTLV<>V_NEW.CTLV THEN
            WriteStr:=':OLD.CTLV=' || TO_CHAR(V_OLD.CTLV) || ' :NEW.CTLV=' || TO_CHAR(V_NEW.CTLV) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DEFI_MASS_ID<>V_NEW.DEFI_MASS_ID THEN
            WriteStr:=':OLD.DEFI_MASS_ID=' || TO_CHAR(V_OLD.DEFI_MASS_ID) || ' :NEW.DEFI_MASS_ID=' || TO_CHAR(V_NEW.DEFI_MASS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VOLUME<>V_NEW.VOLUME THEN
            WriteStr:=':OLD.VOLUME=' || TO_CHAR(V_OLD.VOLUME) || ' :NEW.VOLUME=' || TO_CHAR(V_NEW.VOLUME) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.VOLUME15<>V_NEW.VOLUME15 THEN
            WriteStr:=':OLD.VOLUME15=' || TO_CHAR(V_OLD.VOLUME15) || ' :NEW.VOLUME15=' || TO_CHAR(V_NEW.VOLUME15) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ZPU_TYPE1<>V_NEW.ZPU_TYPE1 THEN
            WriteStr:=':OLD.ZPU_TYPE1=' || TO_CHAR(V_OLD.ZPU_TYPE1) || ' :NEW.ZPU_TYPE1=' || TO_CHAR(V_NEW.ZPU_TYPE1) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.ZPU_TYPE2<>V_NEW.ZPU_TYPE2 THEN
            WriteStr:=':OLD.ZPU_TYPE2=' || TO_CHAR(V_OLD.ZPU_TYPE2) || ' :NEW.ZPU_TYPE2=' || TO_CHAR(V_NEW.ZPU_TYPE2) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.PL15<>V_NEW.PL15 THEN
            WriteStr:=':OLD.PL15=' || TO_CHAR(V_OLD.PL15) || ' :NEW.PL15=' || TO_CHAR(V_NEW.PL15) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;
          IF V_OLD.DATE_IN<>V_NEW.DATE_IN THEN
            WriteStr:=':OLD.DATE_IN=' || TO_CHAR(V_OLD.DATE_IN,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_IN=' || TO_CHAR(V_NEW.DATE_IN,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
          END IF;*/
          
          IF WritePos=1 THEN
            DELETE FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG WHERE ID = LogId;
          END IF;  
          
        END IF;
      END IF;
    END IF;

    -- После добавления
    IF INSERTING() THEN
      NULL;
      -- Запись в лог
      IF 1=1 THEN
        SELECT seq_table_activity_log.NEXTVAL INTO LogId FROM dual;
        INSERT INTO MASTER_SHADOW.TABLE_ACTIVITY_LOG (ID,TABLE_NAME,TABLE_ID,OSUSER,TERMINAL,MODULE,EVENT_TYPE,WhatWasDone)
          SELECT LogId,'KVIT',TO_CHAR(V_NEW.ID) || TO_CHAR(V_NEW.FLG_OPERDATA),osuser,terminal,MODULE,'I',EMPTY_CLOB()
            FROM sys.V_$SESSION WHERE audsid=USERENV('sessionid');

        SELECT WhatWasDone INTO cl_WhatWasDone
            FROM MASTER_SHADOW.TABLE_ACTIVITY_LOG
            WHERE ID = LogId
            FOR UPDATE;

        WritePos:=1;

            WriteStr:=':OLD.ID=' || TO_CHAR(V_OLD.ID) || ' :NEW.ID=' || TO_CHAR(V_NEW.ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.FLG_OPERDATA=' || TO_CHAR(V_OLD.FLG_OPERDATA) || ' :NEW.FLG_OPERDATA=' || TO_CHAR(V_NEW.FLG_OPERDATA) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.MESTO_ID=' || TO_CHAR(V_OLD.MESTO_ID) || ' :NEW.MESTO_ID=' || TO_CHAR(V_NEW.MESTO_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.NOM_ZD=' || (V_OLD.NOM_ZD) || ' :NEW.NOM_ZD=' || (V_NEW.NOM_ZD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.PROD_ID_NPR=' || (V_OLD.PROD_ID_NPR) || ' :NEW.PROD_ID_NPR=' || (V_NEW.PROD_ID_NPR) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.NUM_CIST=' || (V_OLD.NUM_CIST) || ' :NEW.NUM_CIST=' || (V_NEW.NUM_CIST) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_OTGR=' || TO_CHAR(V_OLD.DATE_OTGR,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OTGR=' || TO_CHAR(V_NEW.DATE_OTGR,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.VES_BRUTTO=' || TO_CHAR(V_OLD.VES_BRUTTO) || ' :NEW.VES_BRUTTO=' || TO_CHAR(V_NEW.VES_BRUTTO) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.NUM_KVIT=' || TO_CHAR(V_OLD.NUM_KVIT) || ' :NEW.NUM_KVIT=' || TO_CHAR(V_NEW.NUM_KVIT) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_KVIT=' || TO_CHAR(V_OLD.DATE_KVIT,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_KVIT=' || TO_CHAR(V_NEW.DATE_KVIT,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.BILL_ID=' || TO_CHAR(V_OLD.BILL_ID) || ' :NEW.BILL_ID=' || TO_CHAR(V_NEW.BILL_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.SVED_ID=' || (V_OLD.SVED_ID) || ' :NEW.SVED_ID=' || (V_NEW.SVED_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_OFORML=' || TO_CHAR(V_OLD.DATE_OFORML,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_OFORML=' || TO_CHAR(V_NEW.DATE_OFORML,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.SVED_NUM=' || TO_CHAR(V_OLD.SVED_NUM) || ' :NEW.SVED_NUM=' || TO_CHAR(V_NEW.SVED_NUM) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.PASP_ID=' || (V_OLD.PASP_ID) || ' :NEW.PASP_ID=' || (V_NEW.PASP_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.SUM_PROD=' || TO_CHAR(V_OLD.SUM_PROD) || ' :NEW.SUM_PROD=' || TO_CHAR(V_NEW.SUM_PROD) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.BILL_POS_ID=' || TO_CHAR(V_OLD.BILL_POS_ID) || ' :NEW.BILL_POS_ID=' || TO_CHAR(V_NEW.BILL_POS_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.TTN_ID=' || TO_CHAR(V_OLD.TTN_ID) || ' :NEW.TTN_ID=' || TO_CHAR(V_NEW.TTN_ID) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.IS_LOADED=' || TO_CHAR(V_OLD.IS_LOADED) || ' :NEW.IS_LOADED=' || TO_CHAR(V_NEW.IS_LOADED) || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
            WriteStr:=':OLD.DATE_IN=' || TO_CHAR(V_OLD.DATE_IN,'dd.mm.yyyy hh24:mi:ss') || ' :NEW.DATE_IN=' || TO_CHAR(V_NEW.DATE_IN,'dd.mm.yyyy hh24:mi:ss') || CHR(13);
            dbms_lob.WRITE(cl_WhatWasDone, LENGTH(WriteStr),WritePos,WriteStr);
            WritePos:=WritePos+LENGTH(WriteStr);
      END IF;
    END IF;

  END IF;
END;
/


ALTER TRIGGER MASTER.T99_LOG_KVIT DISABLE;


--
-- FOR_BILLS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Bills AS

TYPE CURSTYPE IS REF CURSOR;

-- Возвращает № счета СНП к счету от ЛУКОЙЛа 
FUNCTION NPO_SF$BILLS(AIS_AGENT NUMBER, ADATE_KVIT DATE, ANPO_SF VARCHAR2, ANOM_SF NUMBER) RETURN VARCHAR2;

-- Обновляет BILLS_SNP 
PROCEDURE FIELDS$BILLS_SNP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');

-- Обновляет BILL_POS_SNP 
PROCEDURE FIELDS$BILL_POS_SNP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');

-- Формирование/обновление счетов на предоплату
PROCEDURE ADD_BILL_PREPAY(ANOM_ZD VARCHAR2, ASVED_NUM NUMBER);

--- Начальное заполнение списка квитанций при выставлении счета
-- PROCEDURE FILL_TEMP_BILL_KVIT (DATE_KVIT# VARCHAR2,NUM_KVIT# VARCHAR2);

--- Определение вознаграждения в зависимости от расстояния
--- pKVIT_ID - ID отгрузки
--- pERR_TXT - пояснение к ошибке;
--- ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
-- >=0 - сумма вознаграждения (руб/тн)
-- <0 - код ошибки
VR$BAD_RAST CONSTANT NUMBER := -1;
VR$BAD_RAST_TXT CONSTANT VARCHAR2(100) := 'Расстояние до станции равно 0';
VR$OLD_ALGORITM CONSTANT NUMBER := -2;
VR$OLD_ALGORITM_TXT CONSTANT VARCHAR2(100) := 'Вознаграждение считать по старому (как до 01.07.2003)';
VR$VOZN_NOT_FOUND CONSTANT NUMBER := -3;
VR$VOZN_NOT_FOUND_TXT CONSTANT VARCHAR2(100) := 'Не найдено вознаграждение в таблице вознаграждений';
VR$KVIT_NOT_FOUND CONSTANT NUMBER := -4;
VR$KVIT_NOT_FOUND_TXT CONSTANT VARCHAR2(100) := 'Отгрузка не найдена';

VR$OK_0_TXT CONSTANT VARCHAR2(100) := 'Вознаграждение за организацию транспортировки в вагонах МПС';
VR$OK_1_TXT CONSTANT VARCHAR2(100) := 'Вознаграждение за организацию транспортировки в собственных вагонах';
VR$OK_2_TXT CONSTANT VARCHAR2(100) := 'Вознаграждение за организацию транспортировки в арендованных вагонах';
VR$OK_3_TXT CONSTANT VARCHAR2(100) := 'Вознаграждение за организацию транспортировки в вагонах ЛУКОЙЛ''а';

FUNCTION GET_VOZN_RST(pKVIT_ID NUMBER, pERR_TXT OUT VARCHAR2) RETURN NUMBER;

--- Начальное заполнение списка квитанций при выставлении счета
PROCEDURE FILL_TEMP_BILL_KVIT (DATE_KVIT# VARCHAR2,NUM_KVIT# VARCHAR2,NOM_DOK# NUMBER);

--- Расчет сумм в списке квитанций при выставлении счета
PROCEDURE CALC_TEMP_BILL_KVIT (CENA_ID# NUMBER);

--- Определение размера налога НДС на заданную дату в %
FUNCTION GetNDSValue(DATE# DATE) RETURN FLOAT;

--- Определение размера налога НДС на заданную дату в %
FUNCTION GetNDSValueSTR(pDATE VARCHAR2) RETURN FLOAT;

-- Получаем текст о вознаграждении по страрому
FUNCTION GET_VOZN_OLD(pKVIT_ID NUMBER) RETURN VARCHAR2;
-- Определение вознаграждения в вагонах МПС и не МПС 
FUNCTION GET_VOZN_FOR_A_KVIT(pKVIT_ID NUMBER,KINDA_VOZN NUMBER) RETURN NUMBER;

-- Определение страховки
FUNCTION GET_STRH_FOR_A_KVIT(pKVIT_ID NUMBER) RETURN NUMBER;
   
-- Определение страховки на предмет исчисления оной с полной суммы
FUNCTION GET_STRH_KOEF_FOR_A_KVIT(pKVIT_ID NUMBER) RETURN NUMBER;

-- Проставление цены по продукту
PROCEDURE SET_TEMP_BILL_KVIT_PRICE(ID_NPR# VARCHAR2,CENA_ID# NUMBER);

-- Запись нового счета, возвращает NOM_DOK
FUNCTION NEW_BILL(CDATE_VYP_SF# VARCHAR2,CDATE_BUXG# VARCHAR2,NOM_DOK_ED# NUMBER, STORNO# NUMBER) RETURN NUMBER;

-- Удаление счета
FUNCTION DEL_BILL(NOM_DOK# NUMBER) RETURN NUMBER;

-- Добавление квитанции в счет
FUNCTION ADD_KVIT(NUM_KVIT# NUMBER) RETURN NUMBER;

-- Удаление квитанции из счета
FUNCTION DEL_KVIT(NUM_KVIT# NUMBER) RETURN NUMBER;

-- Получить новый номер счет фактуры 
FUNCTION GET_NOM_SF(DATE_VYP_SF# DATE) RETURN NUMBER;

FUNCTION Place_Payments_on_Bills (dog_id# NUMBER, nom_dok# NUMBER, 
  payments_id# NUMBER, realiz_d VARCHAR2)
RETURN VARCHAR2;

FUNCTION Del_Payments_from_Bill
 (nom_dok# NUMBER, payment_id# NUMBER)
RETURN VARCHAR2;

FUNCTION Del_Payments_from_Bill_Period
  (date1# VARCHAR2, date2# VARCHAR2)
RETURN VARCHAR2;

-- Запись счета-фактуры на услуги
FUNCTION NEW_BILL_NO_OTGR(date_vyp_sf# VARCHAR2,dog_id# NUMBER,usl_number# NUMBER,nom_dok_ed# NUMBER, STORNO# NUMBER) RETURN NUMBER; 

-- Очистка TEMP_BILL_POS
PROCEDURE CLEAR_TEMP_BILL_POS(ed_nom_dok# NUMBER);

-- заполнение BILL_POS по определенным алгоритмам
PROCEDURE FILL_TEMP_BILL_POS(date_vyp_sf# VARCHAR2,dog_id# NUMBER,usl_number# NUMBER,ALG_ID# NUMBER); 
   
END;

/

--
-- FOR_CRYSTAL2  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Crystal2 AS

TYPE CURSTYPE IS REF CURSOR;


PROCEDURE CR_SF_PRINT(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,DOG_ID VARCHAR2,
  NUM_SF1 VARCHAR2,NUM_SF2 VARCHAR2,
  CRS IN OUT CURSTYPE);
END;

/

--
-- FOR_DISP_AZS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Disp_Azs AS

-- Подготовка данных для отчета "Контроль АЗС" по неавтоматизированным АЗС
PROCEDURE manual_azs(pDATE_BEG VARCHAR2, pDATE_END VARCHAR2, pPARUS_DEPARTMENT VARCHAR2);

-- Остаток на утро
FUNCTION GET_OST_BEGIN_MAS1(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER;
FUNCTION GET_OST_BEGIN_VOL1(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER;
        
END;

/

--
-- FOR_KVIT  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_KVIT AS

/* Заполнить KVIT_DATE_VIR из SFDBF.MOVEPROD */
PROCEDURE FillDateVir(pBEGIN_DATE DATE, pEND_DATE DATE);


END;

/

--
-- FOR_NAKLPRINT  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_NAKLPRINT
AS
/******************************************************************************
   NAME:       FOR_NAKLPRINT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27.12.2005             1. Created this package.
******************************************************************************/

/*****************************************************************************
   Для всех подпрограмм p_nakl=reestr.nakl_id или p_nakl=nakl.id 
******************************************************************************/

/*Реквизиты о погрузке вагона*/
   FUNCTION rekv_zagr (p_nakl NUMBER) RETURN VARCHAR2;
/*Выбор строки № NN из строкового выражения. Cтроки разделены ;       */
   FUNCTION StrokaN (stroka VARCHAR2,nn NUMBER,smb VARCHAR2) RETURN VARCHAR2;
   /*Возвращает параметры S1-Отметка таможни/Номер транспорта,S2-Разрешение МПС,S3-Разрешение на продукт,S4-Экспорт*/
   FUNCTION Get_S(p_nakl NUMBER, n NUMBER) RETURN VARCHAR2;
/*№ аварийной карты*/
   FUNCTION AV_KART(AV_KART NUMBER,KOD VARCHAR2,KOD_GR VARCHAR2,PASP_ID VARCHAR2) RETURN VARCHAR2;
/*Дополнительная информация под наименованием груза*/
   FUNCTION Dop_gr_inf(p_nakl NUMBER,cnt NUMBER,KOD_NPR VARCHAR2,KOD_GD VARCHAR2,DATE_OFORML DATE) RETURN VARCHAR2;
   /*Возвращает 'собственник' или 'арендатор'*/
   FUNCTION SobsTitle(p_nakl NUMBER,TIP_SOBS NUMBER) RETURN VARCHAR2;
   /*Возвращает имя собственника вагона, если его нет - '', если собственников несколько то 'см. доп лист накладной'*/
   FUNCTION SobsName(p_nakl NUMBER,VAGOWNER_NAME VARCHAR2) RETURN VARCHAR2;
   /*функция возвращает переменные SobstExist(собствееник существует) и SobstOne(собственник только 1 у всех цист.) 
   Эти переменные определяются в результате анализа всех вагонов накладных
   поэтому и пришлось вынести код в отдельную процедуру т.к. обычно достаточно
   обработать только первую запись. Info='SobstExist' или Info='SobstOne'*/
   FUNCTION SobsInfo(p_nakl NUMBER,info VARCHAR2) return BOOLEAN;
   /* Дополнителные взыскания. cnt-порядковый номер взыска*/
   FUNCTION Dop_vzisk(p_nakl NUMBER,cnt NUMBER) RETURN VARCHAR2;

/*  Функция возвращает один из пунктов дополнительной информации о грузе или взыск название которго передается через
аргумент ident:vzisk1,vzisk2,vzisk3,vzisk4,gr1_txt,gr2_txt,gr3_txt,gr4_txt.Если накладная экспортная, то в vzisk1,vzisk2
возвращаются их экспортные значения */
   FUNCTION Dop_nakl(p_nakl NUMBER, ident VARCHAR2) RETURN VARCHAR2;
   /* Возвращает значение Итого мест для одиночных накладных */
   FUNCTION Itog_mest(rodv NUMBER,shab_form NUMBER,p_nakl NUMBER,forma NUMBER) RETURN VARCHAR2;
   /* Возвращает кол-во цистерн для одиночных накладных */
   FUNCTION all_cnt(p_nakl NUMBER,forma NUMBER) RETURN NUMBER;
   /*Возвращает число прописью. Глобальная PROPIS_S немного не подходит. Это адаптироанная PROPIS_S*/
   FUNCTION propis(cc VARCHAR2, atr NUMBER) RETURN VARCHAR2;
   /* метод замера массы*/
   FUNCTION Defi_mass(p_nakl NUMBER,RODV NUMBER,IS_RUS NUMBER,FORMA NUMBER,KOD_NPR VARCHAR2,
                      VZLIV NUMBER,DEFI_MASS NUMBER) RETURN VARCHAR2;
   /* Возвращает название пломбы по типу ZPU,forma-тип накладной, dop-призн. доп.листа*/
   FUNCTION Zag_plomba(forma NUMBER,p_typ NUMBER,dop NUMBER) RETURN VARCHAR2;
   /* Возвращает номер пломбы по переданному значению reestr.plomba1 или reestr.plomba2, dop-призн. доп.листа*/
   FUNCTION plomba(plomba VARCHAR2,dop NUMBER) RETURN VARCHAR2;
   /*Параграф правил погрузки для печати на обр. стороне накладной зависит от типа вагона и НПР*/
   FUNCTION nakl_para(rodv NUMBER, kod_npr VARCHAR2) RETURN VARCHAR2;
   /*Глава правил погрузки для печати на обр. стороне накладной зависит от типа вагона и НПР*/
   FUNCTION nakl_glav(rodv NUMBER, kod_npr VARCHAR2) RETURN VARCHAR2;
   /*Считает читый вес всех цистерн входящих в накладную*/
   FUNCTION all_ves(p_nakl NUMBER, forma NUMBER) return NUMBER;
   /*Считает вес брутто всех цистерн входящих в накладную*/
   FUNCTION all_brutto(p_nakl NUMBER) return NUMBER;
   /*Считает вес всей тары(цистерн) входящих в накладную*/
   FUNCTION all_tara(p_nakl NUMBER) return NUMBER;
   /*Считает вес упаковки всех цистерн входящих в накладную*/
   FUNCTION bag_ves(p_nakl NUMBER) return NUMBER;
   /*Функция печати атрибутов обратной стороны */
   FUNCTION sertif(p_nakl NUMBER, str_fakt VARCHAR2) return VARCHAR2;
   /* список пломб Росинспектората если таковые имеются*/
   FUNCTION RosInsList(p_nakl NUMBER) RETURN VARCHAR2;
   /* Кол-во пломб Росинспектората*/
   FUNCTION RosInsCnt(p_nakl NUMBER) RETURN NUMBER;
   /*Список паспортов продуктов входящих в накладную*/
   FUNCTION PaspList(p_nakl NUMBER) RETURN VARCHAR2;
   /*Функция нереализована!!! Возвращает имя оператора УНП*/
   FUNCTION fu_fam(oper_id number,is_neft number,add_post number) RETURN VARCHAR2;
   /*Возвращает имя файла с подписью оператора*/
   FUNCTION get_file_sign(oper_id number,is_neft number,add_post number) RETURN VARCHAR2;
   /*Возвращает количество вагонов в накладной на возврат*/
   FUNCTION kol_vag(p_nakl NUMBER) RETURN NUMBER;
   /*Возвращает признак одного собственника вагона или признак существование совственника
     взависимости от значения info: info='SobsOne' или info='SobsExist'*/
   FUNCTION SobsInfo_voz(p_nakl NUMBER,info VARCHAR2) return NUMBER;
   
END for_naklprint;
/

--
-- FOR_REPORTS  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.FOR_REPORTS AS
  
-- Определить номер отчета
FUNCTION GetNumRep (pREP_ID NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pIS_CRT NUMBER DEFAULT 0) RETURN NUMBER;

-- Сохранить номер отчета
PROCEDURE SetNumRep (pREP_ID NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pIS_CRT NUMBER DEFAULT 0, pNum_Rep NUMBER DEFAULT 0);

-- Заполнить Отчет о реализации
PROCEDURE FILL_REALIZ (pBEGIN_DATE VARCHAR2, pEND_DATE VARCHAR2, pIS_CRT NUMBER);
 
END;

/

--
-- FOR_BILLS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Bills AS

-- Возвращает № счета СНП к счету от ЛУКОЙЛа 
FUNCTION NPO_SF$BILLS(AIS_AGENT NUMBER, ADATE_KVIT DATE, ANPO_SF VARCHAR2, ANOM_SF NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF AIS_AGENT=0 THEN
    IF ADATE_KVIT>TO_DATE('10.04.2002','dd.mm.yyyy') THEN
	  RETURN ANPO_SF;
	ELSE
	  RETURN '02003К/'||TO_CHAR((ANOM_SF-6009000)*2-1);
	END IF;
  ELSE
    RETURN ANPO_SF;
  END IF;	
END;

-- Обновляет BILLS_SNP 
PROCEDURE FIELDS$BILLS_SNP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  -- Обновление из процедуры RENEW_BILLS_SNP
    UPDATE BILLS_SNP C SET 
      (KOL_DN, DOG_ID, USL_NUMBER, CAT_CEN_ID) = 
      (SELECT NPO_USL_OPL.KOL_DN,MONTH.NPODOG_ID,1,npo_usl.NPOCAT_CEN_ID
       FROM BILLS,MONTH,USL_DOG npo_usl,KLS_USL_OPL NPO_USL_OPL,KLS_DOG NPO_DOG
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
		AND MONTH.NPODOG_ID = NPO_DOG.ID
		AND NPO_DOG.USL_OPL_ID = NPO_USL_OPL.ID  
	    AND BILLS.NOM_DOK = C.NOM_DOK)
    WHERE EXISTS (SELECT BILLS.NOM_DOK
       FROM BILLS,MONTH,USL_DOG npo_usl
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
	    AND BILLS.NOM_DOK = C.NOM_DOK);
    COMMIT;

  -- Обновление из тригера
/*  IF AFIELD='MAINDOG_ID' THEN
  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.MAINDOG_ID по договорам комиссии и поставки
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT FOR_BILLS.NPO_SF$BILLS_LUK(KLS_VIDDOG.IS_AGENT,B.DATE_KVIT,B.NPO_SF,B.NOM_SF),
	            B.PROD_SUM, B.PROD_NDS, B.PROD_GSM, B.PROD_AKCIZ,
	            p_new.MAINDOG_ID, DECODE(p_new.ID,p_new.MAINDOG_ID,B.USL_NUMBER,1)
         FROM bills B,kls_dog_shadow luk_dog,kls_viddog
         WHERE B.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
	       AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow luk_dog,kls_viddog
         WHERE С.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
           AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.MAINDOG_ID по агентскому договору
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT B.NPO_SF,B.SUMMA_DOK, B.NDS_DOK, B.GSM_DOK, B.AKCIZ_DOK,
	            B.DOG_ID, B.USL_NUMBER
         FROM bills B,kls_dog_shadow luk_dog,kls_viddog
         WHERE B.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
	       AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow luk_dog,kls_viddog
         WHERE С.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
           AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;
  END IF;  

  -- Обновление из тригера
  IF AFIELD='VIDDOG_ID' THEN
  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.VIDDOG_ID по договорам комиссии и поставки
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT FOR_BILLS.NPO_SF$BILLS_LUK(KLS_VIDDOG.IS_AGENT,B.DATE_KVIT,B.NPO_SF,B.NOM_SF),
	            B.PROD_SUM, B.PROD_NDS, B.PROD_GSM, B.PROD_AKCIZ,
	            dog.MAINDOG_ID, DECODE(dog.ID,dog.MAINDOG_ID,B.USL_NUMBER,1)
         FROM bills B,kls_dog_shadow dog,kls_viddog
         WHERE B.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
	       AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow dog,kls_viddog
         WHERE С.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
           AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.MAINDOG_ID по агентскому договору
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT B.NPO_SF,B.SUMMA_DOK, B.NDS_DOK, B.GSM_DOK, B.AKCIZ_DOK,
	            B.DOG_ID, B.USL_NUMBER
         FROM bills B,kls_dog_shadow dog,kls_viddog
         WHERE B.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
	       AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow dog,kls_viddog
         WHERE С.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
           AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --    WHEN OTHERS THEN
  --	  NULL;
  --  END;
  END IF;*/
  
END;


-- Обновляет BILL_POS_SNP
PROCEDURE FIELDS$BILL_POS_SNP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

    -- Обновление позиций - отгрузка
    UPDATE BILL_POS_SNP C SET
      (KVIT_VES,SVED_NUM,DATE_OTGR) =
	  (SELECT SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,NVL(KVIT.VES,0),0)) AS KVIT_VES, 
		    MAX(KVIT.SVED_NUM) AS SVED_NUM, 
		    MAX(KVIT.DATE_OTGR) AS DATE_OTGR
       FROM BILL_POS,KVIT
      WHERE BILL_POS.NOM_DOK = KVIT.BILL_ID
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID)
     WHERE EXISTS (SELECT BILL_POS.NOM_DOK
       FROM BILL_POS,KVIT
      WHERE BILL_POS.NOM_DOK = KVIT.BILL_ID
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID);
  --  COMMIT;

    -- Проставление сумм и цен 
    UPDATE BILL_POS_SNP C SET 
      (NPR_PRICES_ID,CENA_BN,CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20,SUMMA_GSM25, SUMMA) = 
      (SELECT NVL(PRICES.ID,0),
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.CENA_BN,NVL(PRICES.CENA_NPO,0)),BILL_POS.CENA_BN) AS CENA_BN, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.CENA,NVL(PRICES.CENA_OTP_NPO,0)),BILL_POS.CENA) AS CENA, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_BN,ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES,2)),BILL_POS.SUMMA_BN) AS SUMMA_BN, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_AKCIZ,0),BILL_POS.SUMMA_AKCIZ) AS SUMMA_AKCIZ, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_NDS20,ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES*FOR_BILLS.GetNDSValue(bills.date_kvit),2)),BILL_POS.SUMMA_NDS20) AS SUMMA_NDS20, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_GSM25,0),BILL_POS.SUMMA_GSM25) AS SUMMA_GSM25, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA,ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES,2)+ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES*FOR_BILLS.GetNDSValue(bills.date_kvit),2)),BILL_POS.SUMMA) AS SUMMA 
       FROM BILL_POS,BILLS,MONTH,USL_DOG npo_usl,V_NPR_PRICES_SNP prices
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
        AND npo_usl.NPOCAT_CEN_ID = prices.CAT_CEN_ID   
        AND BILLS.PROD_ID_NPR = prices.PROD_ID_NPR 
        AND BILLS.DATE_KVIT >= prices.BEGIN_DATE  
        AND BILLS.DATE_KVIT <= prices.END_DATE 
	    AND BILL_POS.NOM_DOK = BILLS.NOM_DOK
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID)
     WHERE EXISTS (SELECT BILL_POS.NOM_DOK
       FROM BILL_POS,BILLS,MONTH,USL_DOG npo_usl,V_NPR_PRICES_SNP prices
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
        AND npo_usl.NPOCAT_CEN_ID = prices.CAT_CEN_ID   
        AND BILLS.PROD_ID_NPR = prices.PROD_ID_NPR 
        AND BILLS.DATE_KVIT >= prices.BEGIN_DATE  
        AND BILLS.DATE_KVIT <= prices.END_DATE 
	    AND BILL_POS.NOM_DOK = BILLS.NOM_DOK
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID);
    COMMIT;

/*  -- Обновление из тригера
  IF AFIELD='MAINDOG_ID' THEN
  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.MAINDOG_ID по договорам комиссии и поставки
  --  BEGIN
      DELETE FROM bill_pos_snp C
      WHERE exists
        (SELECT a.NOM_DOK 
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW LUK_DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=p_new.ID AND p_new.MAINDOG_ID=LUK_DOG.ID AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT<>1 AND a.bill_pos_id>=10 AND A.nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_SNP_ID);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.MAINDOG_ID по агентскому договору
    BEGIN
      INSERT INTO BILL_POS_SNP
	    (NOM_DOK,BILL_POS_SNP_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
         SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
         ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID)
        SELECT A.NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
           SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
           ID_OLD,A.PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW LUK_DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=p_new.ID AND p_new.MAINDOG_ID=LUK_DOG.ID AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT=1 AND a.bill_pos_id>=10;
    EXCEPTION
  	  WHEN OTHERS THEN
  	    NULL;
    END;
  END IF;  

  -- Обновление из тригера
  IF AFIELD='VIDDOG_ID' THEN
  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.VIDDOG_ID по договорам комиссии и поставки
  --  BEGIN
      DELETE FROM bill_pos_snp C
      WHERE exists
        (SELECT a.NOM_DOK 
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=DOG.ID AND DOG.MAINDOG_ID=p_new.ID AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT<>1 AND a.bill_pos_id>=10 AND A.nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_SNP_ID);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.VIDDOG_ID по агентскому договору
    BEGIN
      INSERT INTO BILL_POS_SNP
	    (NOM_DOK,BILL_POS_SNP_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
         SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
         ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID)
        SELECT A.NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
           SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
           ID_OLD,A.PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=dog.ID AND dog.MAINDOG_ID=p_new.ID AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT=1 AND a.bill_pos_id>=10;
    EXCEPTION
      WHEN OTHERS THEN
   	    NULL;
    END;
  END IF;*/
  
END;

-- Формирование/обновление счетов на предоплату
PROCEDURE ADD_BILL_PREPAY(ANOM_ZD VARCHAR2, ASVED_NUM NUMBER) AS

 /* -- Курсор: ЗАЯВКИ
  CURSOR tmp_cur_m IS    
      SELECT MONTH.DATE_PLAN, -- Дата плана
	         MONTH.DATE)RAZN, -- Дата разнарядки 
	         MONTH.NOM_ZD, -- Номер разнарядки
			 NVL(KLS_VIDDOG.ID,3) AS IS_AGENT, -- Принадлежность к договорам ЛУОКЙЛ (0-комиссия, 1-агент, 2-поставка, 3-собственный договор НПО)
			 NVL(LUK_DOG.ID,0) AS LUK_DOG_ID, -- Договор ЛУКОЙЛ-НПО, в рамках которого осуществляется отгрузка
			 NVL(LUK_DOG.DOG_NUMBER,'') AS LUK_DOG_NUMBER, -- Договор ЛУКОЙЛ-НПО, в рамках которого осуществляется отгрузка
			 NVL(LUK_DOG.PREDPR_ID,0) AS LUK_PLAT_ID, -- Покупатель по договору ЛУКОЙЛ-НПО, в рамках которого осуществляется отгрузка
			 KLS_DOG.ID AS DOG_ID, -- Договор разнарядки
			 KLS_DOG.DOG_NUMBER AS DOG_NUMBER, -- Договор разнарядки
			 KLS_DOG.PREDPR_ID AS PLAT_ID, -- Покупатель по договору разнарядки
			 NVL(NPO_DOG.ID,0) AS NPO_DOG_ID, -- Договор НПО-Клиент (по поставке)
			 NVL(NPO_DOG.DOG_NUMBER,'') AS NPO_DOG_NUMBER, -- Договор НПО-Клиент (по поставке)
			 NVL(NPO_DOG.PREDPR_ID,0) AS NPO_PLAT_ID, -- Покупатель по договору НПО-Клиент (по поставке)
			 MONTH.GROTP_ID, -- Грузоотправитель
			 MONTH.STANOTP_ID, -- Станция отправления
			 STAN_OTP.STAN_KOD AS STANOTP_KOD, 
			 MONTH.STAN_ID,
			 STAN.STAN_KOD,
			 MONTH.POLUCH_ID,
			 MONTH.POTREB_ID,
			 MONTH.PROD_ID_NPR,
			 USL_DOG.CAT_CEN_ID,
			 USL_DOG.NPOCAT_CEN_ID,
			 USL_DOG.PROC_INSURE, 
			 
			   
        FROM MONTH, KLS_DOG, KLS_DOG LUK_DOG, KLS_DOG NPO_DOG, KLS_VIDDOG  
		WHERE MONTH.DOG_ID=KLS_DOG.ID
		  AND MONTH.NPODOG_ID=NPO_DOG.ID(+)
		  AND KLS_DOG.MAINDOG_ID=LUK_DOG.ID(+)
		  AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
		  
		  AND A.kst = ST.KOD
		  AND ST.KSTRAN = S.KOD
		  AND A.KOD_NPR = P.KOD;
*/
BEGIN
  -- Проверка наличия
  NULL;   
END;
/*
PROCEDURE FILL_TEMP_BILL_KVIT (DATE_KVIT# VARCHAR2,NUM_KVIT# VARCHAR2) IS
BEGIN
  DELETE FROM TEMP_BILL_KVIT WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  INSERT INTO TEMP_BILL_KVIT (kvit_id,num_kvit)
    (SELECT id,num_kvit FROM KVIT WHERE (sved_id)=
	  (SELECT MAX(sved_id) FROM KVIT WHERE date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') AND num_kvit=TO_NUMBER(num_kvit#) AND bill_id=0));
	  
  COMMIT;
END FILL_TEMP_BILL_KVIT;
*/
--- Определение вознаграждения в зависимости от расстояния
FUNCTION GET_VOZN_RST(pKVIT_ID NUMBER, pERR_TXT OUT VARCHAR2) RETURN NUMBER IS
  DateKvit DATE;
  IsAgent NUMBER;
  ProdGrp KLS_PROD.ID_GROUP_NPR_GD%TYPE;
  ProdId KLS_PROD.ID_NPR%TYPE;
  OwnType NUMBER;
  StanKod NUMBER;
  StanName KLS_STAN.STAN_NAME%TYPE;
  Rast NUMBER;
  CenaVozn NUMBER;
BEGIN
  -- поиск отгрузки
  BEGIN
    -- Затычка
    pERR_TXT:=For_Bills.VR$OLD_ALGORITM_TXT;
    RETURN For_Bills.VR$OLD_ALGORITM;
    -- Затычка  
    SELECT DECODE(KVIT.FLG_OPERDATA,1,KVIT.DATE_OTGR,KVIT.DATE_KVIT) AS DATE_KVIT,
	       KLS_DOG.IS_AGENT,
		   KLS_PROD.ID_GROUP_NPR_GD,
		   KVIT.PROD_ID_NPR,
		   KLS_VAGOWNER.VAGOWN_TYP_ID,
		   KLS_STAN.STAN_KOD,
		   KLS_STAN.STAN_NAME,
		   NVL(KLS_STAN.RAST,0) AS RAST
	  INTO DateKvit,IsAgent,ProdGrp,ProdId,OwnType,StanKod,StanName,Rast	   
      FROM KVIT,MONTH,KLS_STAN,KLS_DOG,KLS_PROD,KLS_VAGOWNER
	 WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	   AND MONTH.STAN_ID=KLS_STAN.ID
	   AND MONTH.DOG_ID=KLS_DOG.ID
	   AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR
	   AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID
	   AND KVIT.ID=pKVIT_ID; 			  
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
	  pERR_TXT:=For_Bills.VR$KVIT_NOT_FOUND_TXT;
	  RETURN For_Bills.VR$KVIT_NOT_FOUND;
  END;
  
  -- проверки
  -- дата
  IF DateKvit<TO_DATE('01.07.2003','dd.mm.yyyy') THEN
    pERR_TXT:=For_Bills.VR$OLD_ALGORITM_TXT;
	RETURN For_Bills.VR$OLD_ALGORITM;
  END IF;  	  
  
  -- договор
  IF IsAgent<>1 THEN
    pERR_TXT:=For_Bills.VR$OLD_ALGORITM_TXT;
	RETURN For_Bills.VR$OLD_ALGORITM;
  END IF;
  
  -- расстояние
  IF Rast=0 AND StanKod>100 AND StanKod<>285706 THEN
    pERR_TXT:=For_Bills.VR$BAD_RAST_TXT;
	RETURN For_Bills.VR$BAD_RAST;
  END IF;	

  -- поиск вознаграждения
  BEGIN
    SELECT CENA_VOZN
	  INTO CenaVozn	   
      FROM KLS_VOZN_RST
	 WHERE DateKvit BETWEEN BEGIN_DATE AND END_DATE
	   AND IS_AGENT = IsAgent
	   AND ID_GROUP_NPR = ProdGrp  
	   AND VAGOWN_TYP_ID = OwnType
	   AND Rast BETWEEN RAST_MIN AND RAST_MAX;
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
	  pERR_TXT:=For_Bills.VR$VOZN_NOT_FOUND_TXT;
	  RETURN For_Bills.VR$VOZN_NOT_FOUND;
  END;
  
  pERR_TXT:=' ';
  IF OwnType=0 THEN
    pERR_TXT:=VR$OK_0_TXT;
  END IF;
  IF OwnType=1 THEN
    pERR_TXT:=VR$OK_1_TXT;
  END IF;
  IF OwnType=2 THEN
    pERR_TXT:=VR$OK_2_TXT;
  END IF;
  IF OwnType=3 THEN
    pERR_TXT:=VR$OK_3_TXT;
  END IF;
  RETURN NVL(CenaVozn,0);    	  
END;

PROCEDURE FILL_TEMP_BILL_KVIT (DATE_KVIT# VARCHAR2,NUM_KVIT# VARCHAR2,NOM_DOK# NUMBER) IS
BEGIN
  DELETE FROM TEMP_BILL_KVIT WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  DELETE FROM TEMP_BILL_KVIT_POSSIBLE WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  COMMIT;
  IF nom_dok#=0 THEN -- Выставляем новый счет
    INSERT INTO TEMP_BILL_KVIT 
    (kvit_id,num_kvit,NUM_CIST,VES,TARIF,TARIF19,SVED_NUM, 
     SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11, 
     SUM_VOZN11_NDS,SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH, 
     CENA,CENA_OTP,DATE_CENA,DATE_KVIT,TARIF_GUARD,
	 TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ  
    )
      (SELECT 
	     id,num_kvit,NUM_CIST,VES,TARIF,TARIF19, 
         SVED_NUM,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS, 
         TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,SUM_VOZN12, 
         SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,DATE_KVIT,
		 TARIF_GUARD,TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ     
	     FROM KVIT WHERE
		 date_kvit=TO_DATE(DATE_KVIT#,'dd.mm.yyyy') and  
		 (sved_id=(SELECT MAX(sved_id) FROM KVIT,month WHERE kvit.nom_zd=month.nom_zd
		          AND date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') 
  	              AND num_kvit=TO_NUMBER(num_kvit#) 
				  AND month.nazn_otg_id<>5 AND bill_id=0) or
		  id in (SELECT id FROM kvit,month WHERE kvit.nom_zd=month.nom_zd 
		          AND date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy')
				  AND month.nazn_otg_id=(SELECT MAX(nazn_otg_id) FROM kvit,month WHERE kvit.nom_zd=month.nom_zd 
				  	                                                             AND date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') 
                                                               	                 AND num_kvit=TO_NUMBER(num_kvit#))
		          AND month.nazn_otg_id=5 AND bill_id=0
				  AND kvit.prod_id_npr<>'90000')));
	  
    INSERT INTO TEMP_BILL_KVIT_POSSIBLE 
    (kvit_id,num_kvit,NUM_CIST,VES,TARIF,TARIF19,SVED_NUM, 
     SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11, 
     SUM_VOZN11_NDS,SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH, 
     CENA,CENA_OTP,DATE_CENA,DATE_KVIT,TARIF_GUARD,
	 TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ  
    )
      (SELECT 
	     id,num_kvit,NUM_CIST,VES,TARIF,TARIF19, 
         SVED_NUM,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS, 
         TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,SUM_VOZN12, 
         SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,DATE_KVIT,
		 TARIF_GUARD,TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ     
	     FROM KVIT WHERE 
		   date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') 
		   AND bill_id=0
	       AND nom_zd IN (SELECT nom_zd FROM KVIT WHERE id IN (SELECT kvit_id FROM v_temp_bill_kvit)));
    COMMIT;
  ELSE -- Корректируем счет
    INSERT INTO TEMP_BILL_KVIT 
    (kvit_id,num_kvit,NUM_CIST,VES,TARIF,TARIF19,SVED_NUM, 
     SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11, 
     SUM_VOZN11_NDS,SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH, 
     CENA,CENA_OTP,DATE_CENA,DATE_KVIT,TARIF_GUARD,
	 TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ  
    )
      (SELECT 
	     id,num_kvit,NUM_CIST,VES,TARIF,TARIF19, 
         SVED_NUM,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS, 
         TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,SUM_VOZN12, 
         SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,DATE_KVIT,
		 TARIF_GUARD,TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ     
	     FROM KVIT WHERE bill_id=nom_dok#);
  END IF;
END FILL_TEMP_BILL_KVIT;

PROCEDURE SET_TEMP_BILL_KVIT_PRICE(ID_NPR# VARCHAR2,CENA_ID# NUMBER) IS
BEGIN
	
  UPDATE TEMP_BILL_KVIT SET
    (CENA,CENA_OTP,DATE_CENA,PROTO_NUM,PROTO_DATE,NO_AKCIZ,NPR_PRICES_ID,CAT_CEN_ID)=
	(SELECT CENA,CENA_OTP,INPUT_DATE,PROTOKOL_NUM,PROTOKOL_DATE,NO_AKCIZ,ID,CAT_CEN_ID FROM npr_prices WHERE id=CENA_id#)
  	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit) AND 
	      (SELECT prod_id_npr FROM kvit WHERE id=kvit_id)=id_npr#;
  COMMIT;
END;

PROCEDURE CALC_TEMP_BILL_KVIT (CENA_ID# NUMBER) IS
/*
CENA# NUMBER;
AKCIZ# NUMBER;
PROTO_NUM# VARCHAR2(15);
PROTO_DATE# DATE;
NO_AKCIZ# NUMBER(1);
*/
BEGIN

/*  SELECT
    NPR_PRICES.CENA,
	NPR_PRICES.AKCIZ,
	NPR_PRICES.PROTOKOL_NUM,
	NPR_PRICES.PROTOKOL_DATE,
	NPR_PRICES.NO_AKCIZ
	INTO CENA#,AKCIZ#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#
	FROM NPR_PRICES
	WHERE ID=CENA_ID#;
*/
	
  UPDATE TEMP_BILL_KVIT SET
    TEMP_BILL_KVIT.SUM_PROD=ROUND((CENA)*TEMP_BILL_KVIT.VES,2),
    --TEMP_BILL_KVIT.SUM_AKCIZ=ROUND((AKCIZ#)*TEMP_BILL_KVIT.VES,2),
    TEMP_BILL_KVIT.SUM_AKCIZ=0,
	TEMP_BILL_KVIT.SUM_VOZN11=GET_VOZN_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID,1),
	TEMP_BILL_KVIT.SUM_VOZN12=GET_VOZN_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID,2),
	TEMP_BILL_KVIT.CENA_VOZN=GET_VOZN_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID,3)
	/*TEMP_BILL_KVIT.PROTO_NUM=PROTO_NUM#,
	TEMP_BILL_KVIT.PROTO_DATE=PROTO_DATE#,
	TEMP_BILL_KVIT.NO_AKCIZ=NO_AKCIZ#*/
	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit);

  UPDATE TEMP_BILL_KVIT SET
    TEMP_BILL_KVIT.SUM_PROD_NDS=ROUND(TEMP_BILL_KVIT.SUM_PROD*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),
	TEMP_BILL_KVIT.TARIF_NDS=ROUND(TEMP_BILL_KVIT.TARIF*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),	
	TEMP_BILL_KVIT.SUM_VOZN11_NDS=ROUND(TEMP_BILL_KVIT.SUM_VOZN11*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),	
	TEMP_BILL_KVIT.SUM_VOZN12_NDS=ROUND(TEMP_BILL_KVIT.SUM_VOZN12*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),
	TEMP_BILL_KVIT.TARIF_GUARD_NDS=ROUND(TEMP_BILL_KVIT.TARIF_GUARD*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2)		
	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit);

  UPDATE TEMP_BILL_KVIT SET
    TEMP_BILL_KVIT.SUM_STRAH=ROUND((
	    TEMP_BILL_KVIT.SUM_PROD+
		TEMP_BILL_KVIT.SUM_AKCIZ+
        GET_STRH_KOEF_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID)*TEMP_BILL_KVIT.SUM_PROD_NDS)
		*GET_STRH_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID)/100,2),
	TEMP_BILL_KVIT.NACENKA=GET_STRH_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID)	
	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit);
  COMMIT; 
END;

FUNCTION GetNDSValue(DATE# DATE) RETURN FLOAT IS
BEGIN
  IF DATE#>=TO_DATE('01.01.2004','dd.mm.yyyy') THEN
    RETURN 18;
  ELSE	
    RETURN 20;
  END IF;	  
END;

FUNCTION GetNDSValueSTR(pDATE VARCHAR2) RETURN FLOAT IS
  dat DATE;
BEGIN
  dat:=TO_DATE(pDATE,'dd.mm.yyyy');
  RETURN GetNDSValue(dat);
END;

-- Определение вознаграждения в вагонах МПС
FUNCTION GET_VOZN_FOR_A_KVIT(pKVIT_ID NUMBER,KINDA_VOZN NUMBER) RETURN NUMBER IS
 -- KINDA_VOZN 1-МПС, 2-не МПС, 3-возвратить цену вознаграждения
 ERR_TXT VARCHAR(150);
 VOZN_VALUE NUMBER;
 UslSum NUMBER;
 OwnType NUMBER;
 VagVes NUMBER;
 Trf NUMBER;
 Trf19 NUMBER;
 DopCist NUMBER;
BEGIN
  VOZN_VALUE:=GET_VOZN_RST(pKVIT_ID,ERR_TXT);

  IF vozn_value=VR$BAD_RAST THEN -- Расстояние до станции равно 0
    RETURN 0;
  END IF;
  
  BEGIN
    SELECT
      USL_DOG.USL_SUM, 
	  KLS_VAGOWNER.VAGOWN_TYP_ID,	
	  KVIT.Ves,
	  KVIT.Tarif,
	  KVIT.Tarif19,
	  KVIT.FLG_DOP_CIST
	   INTO UslSum,OwnType,VagVes,Trf,Trf19,DopCist	   
       FROM KVIT,MONTH,USL_DOG,KLS_VAGOWNER
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=USL_DOG.DOG_ID 
	    AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
	    AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 0;
  END;

  IF vozn_value=VR$OLD_ALGORITM THEN -- Вознаграждение считать по старому (как до 01.07.2003)
    IF (OwnType=0) AND (KINDA_VOZN=1) THEN -- МПС
	  IF DopCist=0 THEN
  	    RETURN ROUND(UslSum*vagVes*2,2);
	  ELSE
  	    RETURN ROUND(UslSum*vagVes,2);
	  END IF;
 	END IF;
    IF (OwnType<>0) AND (KINDA_VOZN=2) AND (Trf19>Trf) THEN -- не МПС
	  RETURN Trf19-Trf;
 	END IF;
  END IF;

  IF (vozn_value>=0) AND (ERR_TXT=VR$OK_0_TXT) AND (KINDA_VOZN=1) THEN
    RETURN ROUND(vozn_value*VagVes,2);
  END IF;

  IF (vozn_value>=0) AND (ERR_TXT IN (VR$OK_1_TXT,VR$OK_2_TXT,VR$OK_3_TXT)) AND (KINDA_VOZN=2) THEN
    RETURN ROUND(vozn_value*VagVes,2);
  END IF;

  IF (vozn_value>=0) AND (KINDA_VOZN=3) THEN
    RETURN ROUND(vozn_value,2);
  END IF;
  RETURN 0; -- На всякий случай
END;


-- Определение страховки
FUNCTION GET_STRH_FOR_A_KVIT(pKVIT_ID NUMBER) RETURN NUMBER IS
 StrhValue NUMBER;
 LoadType NUMBER;
BEGIN
  BEGIN
    SELECT
      USL_DOG.PROC_INSURE,
	  KLS_VID_OTGR.LOAD_TYPE_ID 
	   INTO StrhValue,LoadType	   
       FROM KVIT,MONTH,USL_DOG,KLS_VID_OTGR
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=USL_DOG.DOG_ID 
	    AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
	    AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 0;
  END;

  IF LoadType IN (1,6) THEN
    RETURN StrhValue;
  END IF;
  RETURN 0; -- На всякий случай
END;

-- Определение страховки на предмет исчисления оной с полной суммы
FUNCTION GET_STRH_KOEF_FOR_A_KVIT(pKVIT_ID NUMBER) RETURN NUMBER IS
 StrhValue NUMBER;
BEGIN
  BEGIN
    SELECT
	  KLS_INSURE.FULL_SUM
	   INTO StrhValue	   
       FROM KVIT,MONTH,KLS_DOG,KLS_INSURE
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=KLS_DOG.ID 
	    AND KLS_DOG.INSURE_ID=KLS_INSURE.ID
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 1;
  END;

  RETURN StrhValue;
END;

-- Запись нового счета, возвращает NOM_DOK + BONUS - запись редактированного счета :)
FUNCTION NEW_BILL(CDATE_VYP_SF# VARCHAR2,CDATE_BUXG# VARCHAR2,NOM_DOK_ED# NUMBER, STORNO# NUMBER) RETURN NUMBER IS
NOM_DOK# NUMBER;
NOM_SF# NUMBER;
DATE_KVIT# DATE;
SUMMA_DOK# NUMBER;
NDS_DOK# NUMBER;
GSM_DOK# NUMBER;
AKCIZ_DOK# NUMBER;
PRIM# VARCHAR2(100);
FIO_ISPOL# VARCHAR2(50);       
KOL_DN# NUMBER;
OLD_NOM_DOK# NUMBER;
NOM_ZD# VARCHAR2(12);
OWNER_ID# NUMBER;
DOG_ID# NUMBER;
USL_NUMBER# NUMBER;      
PROD_ID_NPR# VARCHAR2(5);
PROD_ID_NPR_ORIG# VARCHAR2(5);
PROD_SUM# NUMBER;
PROD_NDS# NUMBER;
PROD_GSM# NUMBER;
PROD_AKCIZ# NUMBER;
DATE_MOS# DATE;
NPO_SF# VARCHAR2(50);
OLD_NOM_SF# NUMBER;
IS_AGENT# NUMBER;
NUM_5_DAY# NUMBER;
LUK_DOG_ID# NUMBER;
LUK_USL_NUMBER# NUMBER;
LUK_SUMMA_DOK# NUMBER;
LUK_NDS_DOK# NUMBER;
SNP_DOG_ID# NUMBER;
SNP_USL_NUMBER# NUMBER;
LUK_KOL_DN# NUMBER;
SNP_KOL_DN# NUMBER;
NAZN_OTG_ID# NUMBER;     
KORR_5_DAY# NUMBER;
PROTO_NUM# VARCHAR2(30);
PROTO_DATE# DATE;
NO_AKCIZ# NUMBER;
DATE_VYP_SF# DATE;
DATE_BUXG# DATE;
VES# NUMBER;
CENA# NUMBER;
CENA_BN# NUMBER;
TARIF# NUMBER;
TARIF_NDS# NUMBER;
SUM_VOZN11# NUMBER;
SUM_VOZN11_NDS# NUMBER;
SUM_VOZN12# NUMBER;
SUM_VOZN12_NDS# NUMBER;
SUM_STRH# NUMBER;
TARIF_GUARD# NUMBER;
TARIF_GUARD_NDS# NUMBER;
NUM_AKT# NUMBER;
BEGIN
  COMMIT;
  RETURN 0;


  OWNER_ID#:=0;
  DATE_VYP_SF#:=TO_DATE(CDATE_VYP_SF#,'dd.mm.yyyy');
  DATE_BUXG#:=TO_DATE(CDATE_BUXG#,'dd.mm.yyyy');
  IF nom_dok_ed#=0 THEN
    SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
  ELSE
    nom_dok#:=nom_dok_ed#;
  END IF;
  
  SELECT
    KVIT.DATE_KVIT INTO DATE_KVIT# FROM KVIT WHERE KVIT.ID= 
      (SELECT MIN(v_temp_bill_kvit.KVIT_ID) FROM v_temp_bill_kvit);
  
  SELECT
    SUM(SUM_PROD+TARIF+SUM_VOZN11+SUM_VOZN12+SUM_STRAH+TARIF_GUARD),
	SUM(SUM_PROD_NDS+TARIF_NDS+SUM_VOZN11_NDS+SUM_VOZN12_NDS+TARIF_GUARD_NDS),
    SUM(SUM_AKCIZ),
	SUM(SUM_PROD),
	SUM(SUM_PROD_NDS),
    SUM(SUM_AKCIZ),
	MAX(PROTO_NUM),
	MAX(PROTO_DATE),
	SUM(VES),
	MAX(CENA),
	MAX(CENA_OTP),
	SUM(TARIF),
	SUM(TARIF_NDS),
	SUM(SUM_VOZN11),
	SUM(SUM_VOZN11_NDS),
	SUM(SUM_VOZN12),
	SUM(SUM_VOZN12_NDS),
	SUM(SUM_STRAH),
	SUM(TARIF_GUARD),
	SUM(TARIF_GUARD_NDS)
	INTO SUMMA_DOK#,NDS_DOK#,AKCIZ_DOK#,
	  PROD_SUM#,PROD_NDS#,PROD_AKCIZ#,PROTO_NUM#,PROTO_DATE#,VES#,CENA_BN#,CENA#,TARIF#,TARIF_NDS#,
	  SUM_VOZN11#,SUM_VOZN11_NDS#,SUM_VOZN12#,SUM_VOZN12_NDS#,SUM_STRH#,TARIF_GUARD#,TARIF_GUARD_NDS#
	FROM v_temp_bill_kvit;
	
	SUMMA_DOK#:=SUMMA_DOK#+NDS_DOK#+AKCIZ_DOK#;	
  GSM_DOK#:=0;
  PROD_GSM#:=0;
  prim#:='';
  fio_ispol#:=For_Init.GetCurrUser;
  OLD_NOM_DOK#:=0;
  OLD_NOM_SF#:=0;
  DATE_MOS#:=DATE_KVIT#;
  NPO_SF#:='';
  IF TO_NUMBER(TO_CHAR(DATE_MOS#,'DD'))=31 THEN
    NUM_5_DAY#:=6;
  ELSE
    NUM_5_DAY#:=TRUNC(TO_NUMBER(TO_CHAR(DATE_MOS#,'DD'))-1)/5+1;
  END IF;
  
  BEGIN
    -- Считаем, что если заполнен POKUP_DOG_ID значит это отгрузка Лукойлу
    SELECT
      USL_DOG.KOL_DN,
      DECODE(MONTH.POKUP_DOG_ID,NULL,KVIT.NOM_ZD,'?'),
	  USL_DOG.DOG_ID,
	  USL_DOG.USL_NUMBER,
	  DECODE(MONTH.POKUP_DOG_ID,NULL,KVIT.PROD_ID_NPR,'10080'),
	  KVIT.PROD_ID_NPR,
	  MONTH.NPR_SOBSTV_ID,
	  KLS_DOG.IS_AGENT,
	  DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.NAZN_OTG_ID,1)	  
	   INTO Kol_DN#,nom_zd#,dog_id#,usl_number#,PROD_ID_NPR#,PROD_ID_NPR_ORIG#,OWNER_ID#,is_agent#,NAZN_OTG_ID#	   
       FROM KVIT,MONTH,USL_DOG,KLS_DOG
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
        AND USL_DOG.DOG_ID=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.DOG_ID,MONTH.POKUP_DOG_ID)
        AND USL_DOG.USL_NUMBER=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.USL_NUMBER,MONTH.POKUP_USL_NUMBER)
        AND KLS_DOG.ID=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.DOG_ID,MONTH.POKUP_DOG_ID)	    
		AND KVIT.ID=(SELECT MIN(v_temp_bill_kvit.KVIT_ID) FROM v_temp_bill_kvit); 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 0;
  END;
  IF PROD_ID_NPR#='10080' THEN
    PROTO_NUM#:=NULL;
    PROTO_DATE#:=NULL;
    SELECT seq_num_akt.NEXTVAL INTO NUM_AKT# FROM dual;
  END IF;
  LUK_DOG_ID#:=DOG_ID#;
  LUK_USL_NUMBER#:=USL_NUMBER#;
  IF IS_AGENT# IN (1,3) THEN 
     LUK_SUMMA_DOK#:=SUMMA_DOK#;
	 LUK_NDS_DOK#:=NDS_DOK#;
  ELSE
    LUK_SUMMA_DOK#:=PROD_SUM#+PROD_NDS#+PROD_AKCIZ#;
    LUK_NDS_DOK#:=PROD_NDS#;
  END IF;
  SNP_DOG_ID#:=0;
  SNP_USL_NUMBER#:=0;
  LUK_KOL_DN#:=KOL_DN#;
  SNP_KOL_DN#:=999;
  KORR_5_DAY#:=0;
  NO_AKCIZ#:=0; -- исправить

  IF nom_dok_ed#=0 THEN
    NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  
    INSERT INTO BILLS 
      (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,
	   PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,
	   PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	   LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,SNP_DOG_ID,SNP_USL_NUMBER,
	   LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
    VALUES (
       NOM_DOK#,NOM_SF#,DATE_VYP_SF#,DATE_KVIT#,DATE_BUXG#,SUMMA_DOK#,NDS_DOK#,GSM_DOK#,AKCIZ_DOK#,
	   PRIM#,FIO_ISPOL#,KOL_DN#,OLD_NOM_DOK#,NOM_ZD#,OWNER_ID#,DOG_ID#,USL_NUMBER#,PROD_ID_NPR#,
	   PROD_SUM#,PROD_NDS#,PROD_GSM#,PROD_AKCIZ#,DATE_MOS#,NPO_SF#,OLD_NOM_SF#,IS_AGENT#,NUM_5_DAY#,
	   LUK_DOG_ID#,LUK_USL_NUMBER#,LUK_SUMMA_DOK#,LUK_NDS_DOK#,SNP_DOG_ID#,SNP_USL_NUMBER#,
	   LUK_KOL_DN#,SNP_KOL_DN#,NAZN_OTG_ID#,KORR_5_DAY#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,DATE_KVIT#+KOL_DN#);
  ELSE
    IF STORNO#=0 THEN -- Сторно нет.
      UPDATE BILLS SET 
        (DATE_VYP_SF,DATE_KVIT,DATE_BUXG,
	     SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,
	     DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,
         SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)=
  	   ( SELECT 
         DATE_VYP_SF#,DATE_KVIT#,DATE_BUXG#,
   	     SUMMA_DOK#,NDS_DOK#,GSM_DOK#,AKCIZ_DOK#,PRIM#,FIO_ISPOL#,       
         KOL_DN#,OLD_NOM_DOK#,NOM_ZD#,OWNER_ID#,DOG_ID#,USL_NUMBER#,      
         PROD_ID_NPR#,PROD_SUM#,PROD_NDS#,PROD_GSM#,PROD_AKCIZ#,
	     DATE_MOS#,NPO_SF#,OLD_NOM_SF#,IS_AGENT#,NUM_5_DAY#,
	     LUK_DOG_ID#,LUK_USL_NUMBER#,LUK_SUMMA_DOK#,LUK_NDS_DOK#,
	     SNP_DOG_ID#,SNP_USL_NUMBER#,LUK_KOL_DN#,SNP_KOL_DN#,NAZN_OTG_ID#,     
         KORR_5_DAY#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,DATE_KVIT#+KOL_DN# FROM dual) WHERE nom_dok=nom_dok_ed#;
      -- Это криво, а что делать?
      IF nom_dok_ed#<>0 THEN
        DELETE FROM BILL_POS WHERE nom_dok=nom_dok_ed#;
      END IF;
	ELSE -- Сторно есть
      SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  SELECT nom_sf,nom_dok INTO old_nom_sf#,old_nom_dok# FROM BILLS WHERE nom_dok=nom_dok_ed#;
      INSERT INTO BILLS -- Вставляем минусовой счет 
        (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,
	     SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,
	     DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,
         SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
  	   ( SELECT 
         NOM_DOK#,OLD_NOM_SF#,DATE_VYP_SF,DATE_KVIT,DATE_BUXG#,
   	     -SUMMA_DOK,-NDS_DOK,-GSM_DOK,-AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK#,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,-PROD_SUM,-PROD_NDS,-PROD_GSM,-PROD_AKCIZ,
	     DATE_VYP_SF#,NPO_SF#,OLD_NOM_SF#,IS_AGENT,NUM_5_DAY,
	     LUK_DOG_ID,LUK_USL_NUMBER,-LUK_SUMMA_DOK,-LUK_NDS_DOK,
	     SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT FROM BILLS WHERE nom_dok=nom_dok_ed#);	  	  

      INSERT INTO BILL_POS ( -- Вставляем минусовые позиции
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP, IS_POKUP)
      (SELECT 
        NOM_DOK#,BILL_POS_ID,-VES,CENA_BN,CENA,-SUMMA_BN,-SUMMA_AKCIZ,-SUMMA_NDS20, 
        -SUMMA_GSM25,-SUMMA,CENA_POKUP,-SUMMA_BN_POKUP,-SUMMA_NDS20_POKUP,-SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP,IS_POKUP FROM BILL_POS WHERE nom_dok=nom_dok_ed#);
	  
	  INSERT INTO DOP_KVIT -- Это будут минусовые позиции
 	    (SELECT * FROM KVIT WHERE bill_id=nom_dok_ed#);
	  
	  UPDATE KVIT SET -- вот они ими становяться         
		 BILL_ID=nom_dok#,
		 SUM_PROD=-SUM_PROD,
		 SUM_AKCIZ=-SUM_AKCIZ,
		 SUM_PROD_NDS=-SUM_PROD_NDS,
		 TARIF_NDS=-TARIF_NDS,
		 SUM_VOZN11=-SUM_VOZN11,
		 SUM_VOZN11_NDS=-SUM_VOZN11_NDS,
         SUM_VOZN12=-SUM_VOZN12,
		 SUM_VOZN12_NDS=-SUM_VOZN12_NDS,
		 SUM_STRAH=-SUM_STRAH,
		 CENA_VOZN=-CENA_VOZN
	    WHERE bill_id=nom_dok_ed#;	    
	  
	  INSERT INTO DOP_KVIT -- Это будут плюсовые старые позиции
 	    (SELECT * FROM KVIT WHERE bill_id=nom_dok_ed#);

      SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
      NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  
      INSERT INTO BILLS -- Вставляем плюсовой счет 
        (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,
	     PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,
	     PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
   	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,SNP_DOG_ID,SNP_USL_NUMBER,
	     LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
      VALUES (
         NOM_DOK#,NOM_SF#,DATE_VYP_SF#,DATE_KVIT#,DATE_BUXG#,SUMMA_DOK#,NDS_DOK#,GSM_DOK#,AKCIZ_DOK#,
	     PRIM#,FIO_ISPOL#,KOL_DN#,OLD_NOM_DOK#,NOM_ZD#,OWNER_ID#,DOG_ID#,USL_NUMBER#,PROD_ID_NPR#,
	     PROD_SUM#,PROD_NDS#,PROD_GSM#,PROD_AKCIZ#,DATE_MOS#,NPO_SF#,OLD_NOM_SF#,IS_AGENT#,NUM_5_DAY#,
	     LUK_DOG_ID#,LUK_USL_NUMBER#,LUK_SUMMA_DOK#,LUK_NDS_DOK#,SNP_DOG_ID#,SNP_USL_NUMBER#,
	     LUK_KOL_DN#,SNP_KOL_DN#,NAZN_OTG_ID#,KORR_5_DAY#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,DATE_KVIT#+KOL_DN#);
	END IF;
  END IF;
  -- Вставляем продукт 
  INSERT INTO BILL_POS (
      NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
      SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	  DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
	  NACENKA,PROTO_NUM,PROTO_DATE,NO_AKCIZ,NUM_AKT)
  VALUES (
    NOM_DOK#,1,VES#,CENA_BN#,CENA#,PROD_SUM#-PROD_AKCIZ#-PROD_NDS#-PROD_GSM#,PROD_AKCIZ#,PROD_NDS#,
	PROD_GSM#,PROD_SUM#,0,0,0,0,
	DATE_VYP_SF#,0,PROD_ID_NPR_ORIG#,1,1,IS_AGENT#,1,0,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,NUM_AKT#);
  -- Вставляем тариф
  IF TARIF#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,10,0,0,0,TARIF#,0,TARIF_NDS#,
	  0,TARIF#+TARIF_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10010',13,68,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем возн МПС
  IF SUM_VOZN11#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,11,0,0,0,SUM_VOZN11#,0,SUM_VOZN11_NDS#,
	  0,SUM_VOZN11#+SUM_VOZN11_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10011',13,48,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем возн не МПС
  IF SUM_VOZN12#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,12,0,0,0,SUM_VOZN12#,0,SUM_VOZN11_NDS#,
	  0,SUM_VOZN12#+SUM_VOZN12_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10012',13,48,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем охрану МПС
  IF TARIF_GUARD#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,13,0,0,0,TARIF_GUARD#,0,TARIF_GUARD_NDS#,
	  0,TARIF_GUARD#+TARIF_GUARD_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10013',13,48,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем страховку
  IF SUM_STRH#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,20,0,0,0,SUM_STRH#,0,0,
	  0,SUM_STRH#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10020',13,69,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  
  UPDATE KVIT
    SET (BILL_ID,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,
      SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,CENA_VOZN,
	  tarif_guard,tarif_guard_nds,nacenka,num_akt,bill_pos_id,no_akciz,PROTO_NUM,PROTO_DATE) =
    (SELECT NOM_DOK#,a.SUM_PROD,a.SUM_AKCIZ,a.SUM_PROD_NDS,a.TARIF_NDS,a.SUM_VOZN11,a.SUM_VOZN11_NDS,
  a.SUM_VOZN12,a.SUM_VOZN12_NDS,a.SUM_STRAH,a.CENA,a.CENA_OTP,a.DATE_CENA,a.cena_vozn,
  a.tarif_guard,a.tarif_guard_nds,a.nacenka,NUM_AKT#,a.bill_pos_id,a.no_akciz,a.PROTO_NUM,a.PROTO_DATE
  FROM v_temp_bill_kvit a WHERE a.KVIT_ID=KVIT.ID)
--  WHERE EXISTS (SELECT b.kvit_id FROM v_temp_bill_kvit b WHERE b.kvit_id=KVIT.id);	  
  WHERE kvit.id in (SELECT b.kvit_id FROM v_temp_bill_kvit b /*WHERE b.kvit_id = kvit.ID*/);
  COMMIT;
  RETURN nom_dok#;
END;

-- Удаление счета
FUNCTION DEL_BILL(NOM_DOK# NUMBER) RETURN NUMBER IS
BEGIN
/*  UPDATE kvit SET bill_id=0 WHERE bill_id=nom_dok#;
  DELETE FROM bill_pos WHERE nom_dok=nom_dok#;
  DELETE FROM bills WHERE nom_dok=nom_dok#;*/
  COMMIT; 
  RETURN 0;
END;

-- Добавление квитанции в счет
FUNCTION ADD_KVIT(NUM_KVIT# NUMBER) RETURN NUMBER IS
KvitCount NUMBER;
BEGIN
  SELECT COUNT(*) INTO KvitCount FROM v_temp_bill_kvit_possible WHERE
    v_temp_bill_kvit_possible.NUM_KVIT=NUM_KVIT# AND
    NOT EXISTS (SELECT num_kvit FROM v_temp_bill_kvit WHERE num_kvit=num_kvit#);
  IF KvitCount>0 THEN
    INSERT INTO TEMP_BILL_KVIT 
	  SELECT * FROM v_temp_bill_kvit_possible WHERE
        v_temp_bill_kvit_possible.NUM_KVIT=NUM_KVIT#;
	COMMIT;
  END IF;
  RETURN KvitCount;
END;

-- Удаление квитанции из счета
FUNCTION DEL_KVIT(NUM_KVIT# NUMBER) RETURN NUMBER IS
BEGIN
  DELETE FROM TEMP_BILL_KVIT WHERE num_kvit=num_kvit#;
  COMMIT;
  RETURN 0;
END;

FUNCTION GET_VOZN_OLD(pKVIT_ID NUMBER) RETURN VARCHAR2 IS
UslSum  NUMBER;
OwnType NUMBER;
DopCist NUMBER;
VidOtgr NUMBER;
BEGIN
  BEGIN
    SELECT
      USL_DOG.USL_SUM, 
	  KLS_VAGOWNER.VAGOWN_TYP_ID,	
	  KVIT.FLG_DOP_CIST,
 	  KLS_VID_OTGR.LOAD_TYPE_ID 
	   INTO UslSum,OwnType,DopCist,VidOtgr	   
       FROM KVIT,MONTH,USL_DOG,KLS_VAGOWNER,KLS_VID_OTGR
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=USL_DOG.DOG_ID 
	    AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
	    AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID
		AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 'Нет квитанции';
  END;
  IF VidOtgr<>1 AND VidOtgr<>6 THEN
    RETURN 'Нет вознаграждения';
  END IF; 
  IF OwnType=0 THEN
    RETURN TO_CHAR(USLSUM,'999,99') || 'руб/тн';
  ELSE
    RETURN 'Сх19-Сх20';
  END IF; 
  RETURN 'Не понятно...';
END;

-- Получить новый номер счет фактуры 
FUNCTION GET_NOM_SF(DATE_VYP_SF# DATE) RETURN NUMBER IS
NOM_SF# NUMBER;
BEGIN
  BEGIN
    SELECT Curr_Num INTO NOM_SF# FROM SF_NUMBERS
	  WHERE DATE_VYP_SF# BETWEEN FROM_DATE AND TO_DATE;
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20000, 'Номер счета-фактуры не определен!');
  END;  
  UPDATE SF_NUMBERS SET Curr_Num=Curr_Num+1
	  WHERE DATE_VYP_SF# BETWEEN FROM_DATE AND TO_DATE;
  RETURN NOM_SF#;
END;

FUNCTION Place_Payments_on_Bills (dog_id# NUMBER, nom_dok# NUMBER, 
  payments_id# NUMBER, realiz_d VARCHAR2)
RETURN VARCHAR2
AS
  sum_to_close# FLOAT;
  sum_to_close_now# FLOAT;
  nds_to_close_now# FLOAT;
  akciz_to_close_now# FLOAT;
  ves_to_close_now# FLOAT;
  koef# FLOAT;
  realiz_date# DATE;

  CURSOR temp_pay IS -- неразнесенные оплаты
    SELECT id,date_post,summa,dest_id
	FROM 
	  V_PAYMENTS_UNUSED WHERE DOG_ID=dog_id# AND 
	  (summa<>0 /*or EXISTS (SELECT * FROM v_payments_to_bills WHERE 
	                         v_payments_to_bills.payments_id=V_PAYMENTS_UNUSED.id)*/) AND 
	  ID=DECODE(payments_id#,0,id,null,id,payments_id#) 	
	ORDER BY date_plat;
	
  dest_pay temp_pay%ROWTYPE;

  -- неоплаченные счета
  CURSOR temp_bill (dest_id# NUMBER) IS 
    SELECT nom_dok,luk_summa_dok,date_vyp_sf
	FROM V_PAYMENTS_UNCLOSED_BILLS 
	  WHERE DOG_ID=dog_id# 
	    AND luk_summa_dok<>0 
	    AND nom_dok=DECODE(nom_dok#,0,nom_dok,nom_dok#) 
 	    AND (prod_bill_pos=DECODE(dest_id#,0,prod_bill_pos,dest_id#) or
		     prod_bill_pos in (10,11,12,13) and dest_id#=21)  
	  ORDER BY pay_date,nom_sf;
  	
  -- отбираем счета по признаку оплаты DEST_ID	
  
  CURSOR temp_bill2 (payments_id# IN NUMBER, dest_id# NUMBER) IS -- неоплаченные счета привязанные к оплате
    SELECT nom_dok,luk_summa_dok,date_vyp_sf
	FROM V_PAYMENTS_UNCLOSED_BILLS_PAY WHERE DOG_ID=dog_id# AND 
      nom_dok=DECODE(nom_dok#,0,nom_dok,nom_dok#) AND 
	  (prod_bill_pos=DECODE(dest_id#,0,prod_bill_pos,dest_id#) or	  
       prod_bill_pos in (10,11,12,13) and dest_id#=21) AND -- отбираем счета по признаку оплаты DEST_ID 
	  luk_summa_dok<>0 AND payments_id=payments_id# ORDER BY pay_date,nom_sf;
  
  dest_bill temp_bill%ROWTYPE;  

  CURSOR temp_bill_pos (nom_dok# IN NUMBER) IS -- неоплаченные позиции
     SELECT bill_pos_id,summa_nds20,summa_akciz,summa,ves FROM V_PAYMENTS_UNCLOSED_BILL_POS
	 WHERE nom_dok=nom_dok# ORDER BY bill_pos_id;	

  dest_bill_pos temp_bill_pos%ROWTYPE;  

BEGIN
  OPEN temp_pay;
  FETCH temp_pay INTO dest_pay;
  OPEN temp_bill(dest_pay.DEST_ID);
  IF (dest_pay.summa IS NOT NULL) THEN
    OPEN temp_bill2 (dest_pay.ID,dest_pay.DEST_ID);
    FETCH temp_bill2 INTO dest_bill;
    IF (dest_bill.luk_summa_dok IS NULL) THEN
      FETCH temp_bill INTO dest_bill;
	END IF;
  END IF;
  IF (dest_pay.summa IS NOT NULL) AND (dest_bill.luk_summa_dok IS NOT NULL) THEN
    IF dest_pay.summa>=dest_bill.luk_summa_dok THEN
	  -- хватает оплаты на весь счет
      sum_to_close#:=dest_bill.luk_summa_dok;
  	  koef#:=1;
    ELSE
	  -- оплаты НЕ хватает на счет
      sum_to_close#:=dest_pay.summa;
	  koef#:=dest_pay.summa/dest_bill.luk_summa_dok;
    END IF;
    OPEN temp_bill_pos(dest_bill.nom_dok);
    LOOP
      FETCH temp_bill_pos INTO dest_bill_pos;
      EXIT WHEN temp_bill_pos%NOTFOUND;

	  sum_to_close_now#:=ROUND(dest_bill_pos.summa*koef#,2);
	  nds_to_close_now#:=ROUND(dest_bill_pos.summa_nds20*koef#,2);
	  akciz_to_close_now#:=ROUND(dest_bill_pos.summa_akciz*koef#,2);
	  ves_to_close_now#:=ROUND(dest_bill_pos.ves*koef#,3);
	  sum_to_close#:=sum_to_close#-sum_to_close_now#;
	  IF (ABS(sum_to_close#)<0.03) and (koef#<>1) THEN
	    -- оставшаяся сумма менее 3-х копеек. приклеиваем ее к последней позиции
	    sum_to_close_now#:=sum_to_close_now#+sum_to_close#;
	    sum_to_close#:=0;
	  END IF;
	  IF dest_pay.date_post>=dest_bill.date_vyp_sf THEN 
	    realiz_date#:=dest_pay.date_post;
	  ELSE
	    realiz_date#:=dest_bill.date_vyp_sf;
	  END IF;
	  INSERT INTO payments_on_bills (NOM_DOK,BILL_POS_ID,PAYMENTS_ID,SUMMA,DATE_REALIZ,SUMMA_NDS,SUMMA_AKCIZ,VES) 
	    VALUES (dest_bill.nom_dok,dest_bill_pos.bill_pos_id,dest_pay.id,sum_to_close_now#,realiz_date# /*TO_DATE(realiz_d,'dd.mm.yyyy')*/,nds_to_close_now#,akciz_to_close_now#,ves_to_close_now#);	
    END LOOP;
    COMMIT;
    CLOSE temp_bill_pos;
    CLOSE temp_bill;
    CLOSE temp_bill2;
    CLOSE temp_pay;
    RETURN 'OK';
  ELSE
    CLOSE temp_bill;
    CLOSE temp_pay;
    RETURN 'ERROR';
  END IF;
END Place_Payments_on_Bills;

FUNCTION Del_Payments_from_Bill
 (nom_dok# NUMBER, payment_id# NUMBER)
RETURN VARCHAR2   
AS
BEGIN
  DELETE FROM Payments_on_bills WHERE nom_dok=nom_dok# and payments_id=payment_id#;
  COMMIT;
  RETURN 'GOOD';
END;

FUNCTION Del_Payments_from_Bill_Period
  (date1# VARCHAR2, date2# VARCHAR2)
RETURN VARCHAR2
AS
BEGIN
  DELETE FROM payments_on_bills WHERE
    nom_dok in (select nom_dok from bills where date_vyp_sf between TO_DATE(date1#,'dd.mm.yyyy') and TO_DATE(date2#,'dd.mm.yyyy'));
  COMMIT;
  RETURN 'GOOD';
END;

FUNCTION NEW_BILL_NO_OTGR(date_vyp_sf# VARCHAR2,dog_id# NUMBER,usl_number# NUMBER,nom_dok_ed# NUMBER, STORNO# NUMBER) RETURN NUMBER 
AS
NOM_DOK# NUMBER;
NOM_SF# NUMBER;
OLD_NOM_DOK# NUMBER;
OLD_NOM_SF# NUMBER;
BEGIN

  IF nom_dok_ed#=0 THEN
	  SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  	
	  INSERT INTO BILLS (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,DATE_MOS,summa_dok,nds_dok,fio_ispol,
	    kol_dn,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,is_agent,NUM_5_DAY,LUK_DOG_ID, 
	    LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,LUK_KOL_DN,NAZN_OTG_ID,DATE_PLAT)    
		SELECT 
		  NOM_DOK# AS NOM_DOK, 
		  NOM_SF# AS NOM_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_VYP_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_KVIT, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_BUXG,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_MOS, 
		  v_temp_bill_pos_sum.SUMMA AS summa_dok,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS nds_dok,
		  For_Init.GetCurrUser AS fio_ispol,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS kol_dn,
		  8 as OWNER_ID,  
		  DOG_ID# AS DOG_ID, 
		  USL_NUMBER# AS USL_NUMBER,   
		  v_temp_bill_pos_sum.PROD_ID_NPR AS PROD_ID_NPR,
		  (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS is_agent,
		  DECODE(TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2)),31,6,
		    TRUNC((TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2))-1)/5)+1) AS NUM_5_DAY,
		  DOG_ID# AS LUK_DOG_ID, 
		  USL_NUMBER# AS LUK_USL_NUMBER, 
		  v_temp_bill_pos_sum.SUMMA AS LUK_SUMMA_DOK,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS LUK_NDS_DOK,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS LUK_KOL_DN,
		  1 AS NAZN_OTG_ID,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy')+
		    (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS DATE_PLAT
		  FROM v_temp_bill_pos_sum;
  ELSE -- ed_nom_dok<>0
    IF storno#=0 THEN
	  UPDATE BILLS SET(DATE_VYP_SF,DATE_KVIT,DATE_BUXG,DATE_MOS,summa_dok,nds_dok,fio_ispol,
	    kol_dn,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,is_agent,NUM_5_DAY,LUK_DOG_ID, 
	    LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,LUK_KOL_DN,NAZN_OTG_ID,DATE_PLAT)=    
		(SELECT 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_VYP_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_KVIT, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_BUXG,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_MOS, 
		  v_temp_bill_pos_sum.SUMMA AS summa_dok,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS nds_dok,
		  For_Init.GetCurrUser AS fio_ispol,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS kol_dn,
		  8 as OWNER_ID,  
		  DOG_ID# AS DOG_ID, 
		  USL_NUMBER# AS USL_NUMBER,   
		  v_temp_bill_pos_sum.PROD_ID_NPR AS PROD_ID_NPR,
		  (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS is_agent,
		  DECODE(TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2)),31,6,
		    TRUNC((TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2))-1)/5)+1) AS NUM_5_DAY,
		  DOG_ID# AS LUK_DOG_ID, 
		  USL_NUMBER# AS LUK_USL_NUMBER, 
		  v_temp_bill_pos_sum.SUMMA AS LUK_SUMMA_DOK,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS LUK_NDS_DOK,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS LUK_KOL_DN,
		  1 AS NAZN_OTG_ID,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy')+
		    (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS DATE_PLAT
		  FROM v_temp_bill_pos_sum) WHERE bills.nom_dok=nom_dok_ed#;
      NOM_DOK#:=nom_dok_ed#;
      DELETE FROM BILL_POS WHERE nom_dok=nom_dok_ed#;
	ELSE --storno<>0
      SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  SELECT nom_sf,nom_dok INTO old_nom_sf#,old_nom_dok# FROM BILLS WHERE nom_dok=nom_dok_ed#;
      INSERT INTO BILLS -- Вставляем минусовой счет 
        (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,
	     SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,
	     DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,
         SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
  	   ( SELECT 
         NOM_DOK#,OLD_NOM_SF#,DATE_VYP_SF,DATE_KVIT,TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy'),
   	     -SUMMA_DOK,-NDS_DOK,-GSM_DOK,-AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK#,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,-PROD_SUM,-PROD_NDS,-PROD_GSM,-PROD_AKCIZ,
	     DATE_VYP_SF#,NPO_SF,OLD_NOM_SF#,IS_AGENT,NUM_5_DAY,
	     LUK_DOG_ID,LUK_USL_NUMBER,-LUK_SUMMA_DOK,-LUK_NDS_DOK,
	     SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT FROM BILLS WHERE nom_dok=nom_dok_ed#);	  	  

      INSERT INTO BILL_POS ( -- Вставляем минусовые позиции
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP, IS_POKUP)
      (SELECT 
        NOM_DOK#,BILL_POS_ID,-VES,CENA_BN,CENA,-SUMMA_BN,-SUMMA_AKCIZ,-SUMMA_NDS20, 
        -SUMMA_GSM25,-SUMMA,CENA_POKUP,-SUMMA_BN_POKUP,-SUMMA_NDS20_POKUP,-SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP,IS_POKUP FROM BILL_POS WHERE nom_dok=nom_dok_ed#);
	  
	  SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  	
	  INSERT INTO BILLS (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,DATE_MOS,summa_dok,nds_dok,fio_ispol,
	    kol_dn,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,is_agent,NUM_5_DAY,LUK_DOG_ID, 
	    LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,LUK_KOL_DN,NAZN_OTG_ID,DATE_PLAT,OLD_NOM_SF,OLD_NOM_DOK)    
		SELECT 
		  NOM_DOK# AS NOM_DOK, 
		  NOM_SF# AS NOM_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_VYP_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_KVIT, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_BUXG,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_MOS, 
		  v_temp_bill_pos_sum.SUMMA AS summa_dok,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS nds_dok,
		  For_Init.GetCurrUser AS fio_ispol,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS kol_dn,
		  8 as OWNER_ID,  
		  DOG_ID# AS DOG_ID, 
		  USL_NUMBER# AS USL_NUMBER,   
		  v_temp_bill_pos_sum.PROD_ID_NPR AS PROD_ID_NPR,
		  (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS is_agent,
		  DECODE(TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2)),31,6,
		    TRUNC((TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2))-1)/5)+1) AS NUM_5_DAY,
		  DOG_ID# AS LUK_DOG_ID, 
		  USL_NUMBER# AS LUK_USL_NUMBER, 
		  v_temp_bill_pos_sum.SUMMA AS LUK_SUMMA_DOK,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS LUK_NDS_DOK,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS LUK_KOL_DN,
		  1 AS NAZN_OTG_ID,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy')+
		    (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS DATE_PLAT,
		  OLD_NOM_SF# AS OLD_NOM_SF,
		  OLD_NOM_DOK# AS OLD_NOM_DOK
		  FROM v_temp_bill_pos_sum;						
	END IF;
  END IF; -- ed_nom_dok=0

INSERT INTO BILL_POS
	(NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA_GSM25, SUMMA, CENA_POKUP, 
	SUMMA_BN_POKUP, SUMMA_NDS20_POKUP, SUMMA_GSM25_POKUP, DATE_REALIZ, ID_OLD, PROD_ID_NPR, OWNERSHIP_ID, 
	ANALIT_ID, IS_AGENT, IS_LUK, NACENKA, NUM_AKT, PROTO_NUM, PROTO_DATE, NO_AKCIZ, SUPPLIER_ID, NOM_SF_POKUP, 
	NOM_DOK_POKUP, IS_POKUP)
SELECT
   NOM_DOK# AS nom_dok,
   (SELECT bill_pos FROM kls_prod WHERE id_npr=v_temp_bill_pos.prod_id_npr) AS bill_pos_id,
   v_temp_bill_pos.VES,
   v_temp_bill_pos.CENA_BN,
   v_temp_bill_pos.CENA,
   v_temp_bill_pos.SUMMA_BN,
   v_temp_bill_pos.SUMMA_AKCIZ,
   v_temp_bill_pos.SUMMA_NDS20,
   0 AS summa_gsm25,
   v_temp_bill_pos.SUMMA,
   0 AS cena_pokup,
   0 as summa_bn_pokup,
   0 as SUMMA_NDS20_POKUP, 
   0 as SUMMA_GSM25_POKUP, 
   DATE_VYP_SF# AS DATE_REALIZ, 
   0 AS ID_OLD, 
   v_temp_bill_pos.PROD_ID_NPR AS PROD_ID_NPR, 
   (SELECT ownership_id FROM kls_vid_usl,kls_prod WHERE kls_prod.id_npr=v_temp_bill_pos.prod_id_npr AND kls_prod.vid_usl_id=kls_vid_usl.id) AS OWNERSHIP_ID, 
   0 AS ANALIT_ID, 
   (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS IS_AGENT, 
   1 AS IS_LUK, 
   0 AS NACENKA, 
   0 AS NUM_AKT, 
   '' AS PROTO_NUM, 
   NULL AS PROTO_DATE, 
   0 AS NO_AKCIZ, 
   0 AS SUPPLIER_ID, 
   NULL AS NOM_SF_POKUP, 
   0 AS NOM_DOK_POKUP, 
   0 AS IS_POKUP
   FROM v_temp_bill_pos;
	  
  COMMIT;
  RETURN NOM_DOK#;
END;

PROCEDURE CLEAR_TEMP_BILL_POS(ed_nom_dok# NUMBER) IS
BEGIN
  DELETE FROM TEMP_BILL_POS WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  IF ed_nom_dok#=0 THEN
    INSERT INTO temp_bill_pos (NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, PROD_ID_NPR)
      VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, '10001');
  ELSE
    INSERT INTO temp_bill_pos (NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, PROD_ID_NPR)
      SELECT NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, PROD_ID_NPR FROM bill_pos WHERE nom_dok=ed_nom_dok#;    
  END IF;
  COMMIT;
END;

PROCEDURE FILL_TEMP_BILL_POS(date_vyp_sf# VARCHAR2,dog_id# NUMBER,usl_number# NUMBER,ALG_ID# NUMBER)  
AS
BEGIN
  DELETE FROM TEMP_BILL_POS WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;
  IF alg_id#=1 THEN -- ЖД тариф общий
    INSERT INTO temp_bill_pos (PROD_ID_NPR,SUMMA_BN,SUMMA_NDS20,SUMMA)
      SELECT '10006',SUM(kvit.tarif),SUM(kvit.tarif_nds),SUM(kvit.tarif+kvit.tarif_nds) 
	    FROM kvit,month WHERE kvit.nom_zd=month.nom_zd AND
		  month.dog_id=dog_id# AND
		  TRUNC(kvit.date_kvit,'Month')=TRUNC(TO_DATE(date_vyp_sf#,'dd.mm.yyyy'),'Month');
  END IF;
  COMMIT;  
END;
END; 
/

--
-- FOR_CRYSTAL2  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Crystal2 AS
PROCEDURE CR_SF_PRINT(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,DOG_ID VARCHAR2,
  NUM_SF1 VARCHAR2,NUM_SF2 VARCHAR2,
  CRS IN OUT CURSTYPE) IS
BEGIN
  OPEN CRS FOR
    SELECT * FROM V_SF_PRINT
	  WHERE TO_NUMBER(sf_no) BETWEEN TO_NUMBER(NUM_SF1) AND TO_NUMBER(NUM_SF2);
END;
END;

/

--
-- FOR_DISP_AZS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Disp_Azs AS

-- Подготовка данных для отчета "Контроль АЗС" по неавтоматизированным АЗС
PROCEDURE manual_azs(pDATE_BEG VARCHAR2, pDATE_END VARCHAR2, pPARUS_DEPARTMENT VARCHAR2) IS
  nFILIAL NUMBER;
  nFILIAL_2 NUMBER;
  cFILIAL_NAME VARCHAR2(200);
  dDATE_BEG DATE;
  dDATE_END DATE;
  dPREV_BEG DATE;
  dPREV_END DATE;
  cnt1 NUMBER;
  Koef FLOAT;
  dMON_END DATE;
BEGIN

  dDATE_END:=TO_DATE(pDate_end,'dd.mm.yyyy');
  dDATE_BEG:=TRUNC(TO_DATE(pDate_beg,'dd.mm.yyyy'),'MONTH');
  dPREV_END:=dDATE_BEG-1;
  dPREV_BEG:=TRUNC(dPREV_END,'MONTH');

  IF pPARUS_DEPARTMENT<>'*' AND pPARUS_DEPARTMENT IS NOT NULL THEN
	BEGIN
	  SELECT ID,NAME INTO nFILIAL,cFILIAL_NAME FROM ORG_STRUCTURE WHERE PARUS_DEPARTMENT=NLS_UPPER(pPARUS_DEPARTMENT);
	EXCEPTION
	  WHEN OTHERS THEN
	    nFILIAL:=NULL;
	    cFILIAL_NAME:='';
	END;
  ELSE
    nFILIAL:=NULL;
	cFILIAL_NAME:='';
  END IF;
  
  nFILIAl_2:=0;

/*  IF nFILIAL=31 THEN
    nFILIAL_2:=22;
  END IF;
  
  IF nFILIAL=30 THEN
    nFILIAL_2:=59;
  END IF;*/
  	
  -- Очистка таблицы DISP_AZS_MANUAL
  DELETE FROM V_DISP_AZS_MANUAL;
  COMMIT;

  -- Реализации за прошлый месяц по дням недели
  INSERT INTO DISP_AZS_MANUAL
    (BEG_DATE, END_DATE, ORG_STRU_ID, PROD_ID_NPR,  
	 OUT_O_1_VOL, OUT_O_1_MAS, OUT_O_2_VOL, OUT_O_2_MAS, OUT_O_3_VOL, OUT_O_3_MAS, 
	 OUT_O_4_VOL, OUT_O_4_MAS, OUT_O_5_VOL, OUT_O_5_MAS, OUT_O_6_VOL, OUT_O_6_MAS, 
	 OUT_O_7_VOL, OUT_O_7_MAS)
  SELECT
    dDATE_BEG, 
	dDATE_END, 
	A.ORG_STRU_ID, 
	A.PROD_ID_NPR, 
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),1,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_1,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),1,A.VES/1000,0)) as MAS_1,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),2,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_2,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),2,A.VES/1000,0)) as MAS_2,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),3,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_3,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),3,A.VES/1000,0)) as MAS_3,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),4,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_4,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),4,A.VES/1000,0)) as MAS_4,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),5,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_5,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),5,A.VES/1000,0)) as MAS_5,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),6,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_6,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),6,A.VES/1000,0)) as MAS_6,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),7,DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME),0)) as VOL_7,
    SUM(DECODE(TO_NUMBER(TO_CHAR(A.DATE_OPER,'D')),7,A.VES/1000,0)) as MAS_7
  FROM AZC_OPERATION A,AZC_TYPE_OPERATION B,V_ORG_STRUCTURE C,KLS_PROD D
  WHERE A.TYPE_OPER_ID=B.ID
    AND B.KIND_OPER=2
    AND A.ORG_STRU_ID=C.ID
    AND A.DATE_OPER BETWEEN dPREV_BEG AND dPREV_END
    AND C.ORG_KIND_ID IN (5,12)
	AND C.IS_AUTO_FOR_DISP_AZS=0
	AND C.NO_WORK=0
	AND A.PROD_ID_NPR<>'80020'
	AND A.PROD_ID_NPR=D.ID_NPR
	AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID) OR C.FILIAL_ID=NVL(nFILIAL_2,C.FILIAL_ID))
	AND (A.VOLUME<>0 OR A.VES<>0)
  GROUP BY
    A.ORG_STRU_ID, A.PROD_ID_NPR;

  COMMIT;

  -- Факт реализации за текущий месяц
  INSERT INTO DISP_AZS_MANUAL
    (BEG_DATE, END_DATE, ORG_STRU_ID, PROD_ID_NPR, OUT_O_VOL, OUT_O_MAS, LAST_DAY)
  SELECT
    dDATE_BEG, 
	dDATE_END, 
	A.ORG_STRU_ID, 
	A.PROD_ID_NPR, 
	SUM(DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME)),
	SUM(A.VES/1000),
	MAX(A.DATE_OPER)
  FROM AZC_OPERATION A,AZC_TYPE_OPERATION B,V_ORG_STRUCTURE C, KLS_PROD D
  WHERE A.TYPE_OPER_ID=B.ID
    AND B.KIND_OPER=2
    AND A.ORG_STRU_ID=C.ID
    AND A.DATE_OPER BETWEEN dDATE_BEG AND dDATE_END
    AND C.ORG_KIND_ID IN (5,12)
	AND C.IS_AUTO_FOR_DISP_AZS=0
	AND C.NO_WORK=0
	AND A.PROD_ID_NPR<>'80020'
	AND A.PROD_ID_NPR=D.ID_NPR
	AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID) OR C.FILIAL_ID=NVL(nFILIAL_2,C.FILIAL_ID))
	AND (A.VOLUME<>0 OR A.VES<>0)
  GROUP BY
    A.ORG_STRU_ID, A.PROD_ID_NPR;

  COMMIT;

  -- Факт поступления за текущий месяц
  INSERT INTO DISP_AZS_MANUAL
    (BEG_DATE, END_DATE, ORG_STRU_ID, PROD_ID_NPR, IN_O_VOL, IN_O_MAS, LAST_DAY)
  SELECT
    dDATE_BEG, 
	dDATE_END, 
	A.ORG_STRU_ID, 
	A.PROD_ID_NPR, 
	SUM(DECODE(NVL(A.VOLUME,0),0,A.VES/D.AVG_FACT_PL,A.VOLUME)),
	SUM(A.VES/1000),
	MAX(A.DATE_OPER)
  FROM AZC_OPERATION A,AZC_TYPE_OPERATION B,V_ORG_STRUCTURE C, KLS_PROD D
  WHERE A.TYPE_OPER_ID=B.ID
    AND B.KIND_OPER=1
    AND A.ORG_STRU_ID=C.ID
    AND A.DATE_OPER BETWEEN dDATE_BEG AND dDATE_END
    AND C.ORG_KIND_ID IN (5,12)
	AND C.IS_AUTO_FOR_DISP_AZS=0
	AND C.NO_WORK=0
	AND A.PROD_ID_NPR<>'80020'
	AND A.PROD_ID_NPR=D.ID_NPR
	AND (C.FILIAL_ID=NVL(nFILIAL,C.FILIAL_ID) OR C.FILIAL_ID=NVL(nFILIAL_2,C.FILIAL_ID))
	AND (A.VOLUME<>0 OR A.VES<>0)
  GROUP BY
    A.ORG_STRU_ID, A.PROD_ID_NPR;

  COMMIT;

  -- Остатки на конец периода 
  INSERT INTO DISP_AZS_MANUAL
    (BEG_DATE, END_DATE, ORG_STRU_ID, PROD_ID_NPR, END_VOLUME, END_MASSA)
  SELECT BEG_DATE, END_DATE, ORG_STRU_ID, PROD_ID_NPR, 
   DECODE(NVL(END_VOLUME,0),0,END_MASSA/AVG_FACT_PL,END_VOLUME), 
   END_MASSA/1000
  FROM
  (	
  SELECT
    dDATE_BEG as BEG_DATE, 
	dDATE_END as END_DATE, 
	A.ID as ORG_STRU_ID, 
	KLS_PROD.ID_NPR as PROD_ID_NPR,
	KLS_PROD.AVG_FACT_PL, 
    NVL(SUM(FOR_FILIAL.GET_OST_END_VOL(A.ID,KLS_PROD.ID_NPR,dDATE_END)),0) AS END_VOLUME, -- Остаток в л
    NVL(SUM(FOR_FILIAL.GET_OST_END_MAS(A.ID,KLS_PROD.ID_NPR,dDATE_END)),0) AS END_MASSA -- Остаток в тоннах
  FROM V_ORG_STRUCTURE A, KLS_PROD 
  WHERE KLS_PROD.AZC_PR_GRP_ID IS NOT NULL
    AND A.ORG_KIND_ID IN (5,12)
	AND A.IS_AUTO_FOR_DISP_AZS=0
	AND A.NO_WORK=0
	AND KLS_PROD.ID_NPR<>'80020'
	AND (A.FILIAL_ID=NVL(nFILIAL,A.FILIAL_ID) OR A.FILIAL_ID=NVL(nFILIAL_2,A.FILIAL_ID))
  GROUP BY
    A.ID, KLS_PROD.ID_NPR,
	KLS_PROD.AVG_FACT_PL
  ) 
  WHERE nvl(END_VOLUME,0)<>0 or NVL(END_MASSA,0)<>0;

  COMMIT;

  -- Округление
  UPDATE V_DISP_AZS_MANUAL SET
    OUT_O_VOL=ROUND(OUT_O_VOL),
	OUT_O_MAS=ROUND(OUT_O_MAS,3),
	END_VOLUME=ROUND(END_VOLUME),
	END_MASSA=ROUND(END_MASSA,3),
	OUT_O_1_VOL=ROUND(OUT_O_1_VOL),
	OUT_O_1_MAS=ROUND(OUT_O_1_MAS,3),
	OUT_O_2_VOL=ROUND(OUT_O_2_VOL),
	OUT_O_2_MAS=ROUND(OUT_O_2_MAS,3),
	OUT_O_3_VOL=ROUND(OUT_O_3_VOL),
	OUT_O_3_MAS=ROUND(OUT_O_3_MAS,3),
	OUT_O_4_VOL=ROUND(OUT_O_4_VOL),
	OUT_O_4_MAS=ROUND(OUT_O_4_MAS,3),
	OUT_O_5_VOL=ROUND(OUT_O_5_VOL),
	OUT_O_5_MAS=ROUND(OUT_O_5_MAS,3),
	OUT_O_6_VOL=ROUND(OUT_O_6_VOL),
	OUT_O_6_MAS=ROUND(OUT_O_6_MAS,3),
	OUT_O_7_VOL=ROUND(OUT_O_7_VOL),
	OUT_O_7_MAS=ROUND(OUT_O_7_MAS,3);

  COMMIT;
END;

-- Остаток на утро (т)
FUNCTION GET_OST_BEGIN_MAS1(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER IS
  v_lastost DATE;
  v_lastoper DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату последней операции (по любому продукту)
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastoper
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
--	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER<=pDATE_OPER
	   AND (B.KIND_OPER=1 OR B.KIND_OPER=2);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastoper:=NULL;
  END;
  
  IF v_lastoper IS NOT NULL THEN

    -- Находим дату ввода последнего остатка
    BEGIN
      SELECT MAX(A.DATE_OPER) INTO v_lastost
	    FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
       WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
	     AND A.TYPE_OPER_ID=B.ID
	     AND A.DATE_OPER<=pDATE_OPER
		 AND A.DATE_OPER>=TRUNC(v_lastoper,'MONTH')
	     AND B.KIND_OPER=0;
    EXCEPTION
       WHEN OTHERS THEN
	     v_lastost:=NULL;
    END;

    -- Начальный остаток  
    IF v_lastost IS NOT NULL THEN
      SELECT SUM(VES) INTO v_ost
	    FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
  	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
	     AND A.TYPE_OPER_ID=B.ID
	     AND B.KIND_OPER=0
	     AND A.DATE_OPER=v_lastost;
	ELSE	 
      v_ost:=0;
  	  v_lastost:=TRUNC(v_lastoper,'MONTH');
    END IF;
  ELSE
    v_ost:=0;
    v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  END IF;

  -- Приход - Расход
  v_prih_rash:=0;
  IF v_lastost<pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VES,2,-A.VES,0)) INTO v_prih_rash 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
  	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2) 
	     AND A.DATE_OPER>=v_lastost
	     AND A.DATE_OPER<pDATE_OPER;
  END IF;		 

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;

-- Остаток на утро (л)
FUNCTION GET_OST_BEGIN_VOL1(pORG_STRU_ID NUMBER, pPROD_ID_NPR VARCHAR2, pDATE_OPER DATE DEFAULT SYSDATE) RETURN NUMBER IS
  v_lastost DATE;
  v_lastoper DATE;
  v_ost NUMBER;
  v_prih_rash NUMBER;
BEGIN

  IF pORG_STRU_ID IS NULL THEN
    RETURN 0;
  END IF;	

  IF pPROD_ID_NPR IS NULL THEN
    RETURN 0;
  END IF;	

  -- Находим дату последней операции (по любому продукту)
  BEGIN
    SELECT MAX(A.DATE_OPER) INTO v_lastoper
	  FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	 WHERE A.ORG_STRU_ID=pORG_STRU_ID
--	   AND A.PROD_ID_NPR=pPROD_ID_NPR
	   AND A.TYPE_OPER_ID=B.ID
	   AND A.DATE_OPER<=pDATE_OPER
	   AND (B.KIND_OPER=1 OR B.KIND_OPER=2);
  EXCEPTION
     WHEN OTHERS THEN
	   v_lastoper:=NULL;
  END;
  
  IF v_lastoper IS NOT NULL THEN

    -- Находим дату ввода последнего остатка
    BEGIN
      SELECT MAX(A.DATE_OPER) INTO v_lastost
	    FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
       WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
	     AND A.TYPE_OPER_ID=B.ID
	     AND A.DATE_OPER<=pDATE_OPER
		 AND A.DATE_OPER>=TRUNC(v_lastoper,'MONTH')
	     AND B.KIND_OPER=0;
    EXCEPTION
       WHEN OTHERS THEN
	     v_lastost:=NULL;
    END;

    -- Начальный остаток  
    IF v_lastost IS NOT NULL THEN
      SELECT SUM(VOLUME) INTO v_ost
	    FROM AZC_OPERATION A,	 AZC_TYPE_OPERATION B
  	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
	     AND A.TYPE_OPER_ID=B.ID
	     AND B.KIND_OPER=0
         AND A.DATE_OPER=v_lastost;
    ELSE
      v_ost:=0;
  	  v_lastost:=TRUNC(v_lastoper,'MONTH');
    END IF;
  ELSE
    v_ost:=0;
    v_lastost:=TO_DATE('01.01.1900','dd.mm.yyyy');
  END IF;

  -- Приход - Расход
  v_prih_rash:=0;
  IF v_lastost<pDATE_OPER THEN
    SELECT SUM(DECODE(B.KIND_OPER,1,A.VOLUME,2,-A.VOLUME,0)) INTO v_prih_rash 
       FROM AZC_OPERATION A, AZC_TYPE_OPERATION B	
	   WHERE A.ORG_STRU_ID=pORG_STRU_ID
	     AND A.PROD_ID_NPR=pPROD_ID_NPR
  	     AND A.TYPE_OPER_ID=B.ID
	     AND (B.KIND_OPER=1 OR B.KIND_OPER=2) 
	     AND A.DATE_OPER>=v_lastost
	     AND A.DATE_OPER<pDATE_OPER;
  END IF;		 

  RETURN NVL(v_ost,0)+NVL(v_prih_rash,0);	   	     			
END;


END;

/

--
-- FOR_KVIT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_kvit
AS

/* Заполнить KVIT_DATE_VIR из SFDBF.MOVEPROD */
PROCEDURE FillDateVir(pBEGIN_DATE DATE, pEND_DATE DATE) AS
  vBILL_ID NUMBER;
  vKVIT_ID NUMBER;
  vSOBS_ID NUMBER;
  vID NUMBER;
  vLAST_ID NUMBER;
  vVES_OST NUMBER;
  vVES_BRUTTO_OST NUMBER;
  vVES_CIST_OST NUMBER;
  vVZLIV_OST NUMBER;
  vKOL_NET_OST NUMBER;
  vSUM_PROD_OST NUMBER;
  vSUM_PROD_NDS_OST NUMBER;
  vSUM_AKCIZ_OST NUMBER;
  vTARIF_ORIG_OST NUMBER;
  vTARIF_ALT_OST NUMBER;
  vTARIF_OST NUMBER;
  vTARIF19_OST NUMBER;
  vTARIF_NDS_OST NUMBER;
  vTARIF_GUARD_OST NUMBER;
  vTARIF_GUARD_NDS_OST NUMBER;
  vSUM_VOZN11_OST NUMBER;
  vSUM_VOZN11_NDS_OST NUMBER;
  vSUM_VOZN12_OST NUMBER;
  vSUM_VOZN12_NDS_OST NUMBER;
  vSUM_STRAH_OST NUMBER;
  vSOBS_DATE_VIR DATE;
  vBILL_POS_ID NUMBER;
BEGIN
  -- Очищаем KVIT_DATE_VIR 
  DELETE FROM kvit_date_vir a WHERE a.date_plan BETWEEN pBEGIN_DATE AND pEND_DATE;

  -- Очищаем BILL_POS
  DELETE FROM BILL_POS a WHERE a.date_realiz BETWEEN pBEGIN_DATE AND pEND_DATE AND a.IS_POKUP=1;

  -- Заполняем KVIT_DATE_VIR
  vBILL_ID:=0;
  vKVIT_ID:=0;
  vSOBS_ID:=0;
  vID:=0;
  vLAST_ID:=0;

  FOR lcur IN (SELECT * FROM v_renew_kvit_date_vir a
                WHERE a.date_plan BETWEEN pBEGIN_DATE AND pEND_DATE
				ORDER BY a.BILL_ID,a.KVIT_ID,a.NOM_SF_POKUP NULLS FIRST,a.DATE_VIR,a.NOM_DOK_POKUP NULLS FIRST) LOOP

	IF vKVIT_ID<>lcur.KVIT_ID OR vBILL_ID<>lcur.BILL_ID THEN
	  -- Сменился вагон или счет
	  IF vKVIT_ID<>0 AND vLAST_ID<>0 AND
	     (vVES_OST<>0 OR vVES_BRUTTO_OST<>0 OR vVES_CIST_OST<>0 OR
		  vVZLIV_OST<>0 OR vKOL_NET_OST<>0 OR
	      vSUM_PROD_OST<>0 OR vSUM_PROD_NDS_OST<>0 OR vSUM_AKCIZ_OST<>0 OR
		  vTARIF_ORIG_OST<>0 OR vTARIF_ALT_OST<>0 OR vTARIF_OST<>0 OR vTARIF19_OST<>0 OR vTARIF_NDS_OST<>0 OR
		  vTARIF_GUARD_OST<>0 OR vTARIF_GUARD_NDS_OST<>0 OR
		  vSUM_VOZN11_OST<>0 OR vSUM_VOZN11_NDS_OST<>0 OR
		  vSUM_VOZN12_OST<>0 OR vSUM_VOZN12_NDS_OST<>0 OR
		  vSUM_STRAH_OST<>0) THEN
		-- Если остался остаток - прибавляем к последней позиции
		UPDATE KVIT_DATE_VIR SET  
		  VES=VES+vVES_OST, 
		  VES_BRUTTO=VES_BRUTTO+vVES_BRUTTO_OST, 
		  VES_CIST=VES_CIST+vVES_CIST_OST, 
		  VZLIV=VZLIV+vVZLIV_OST, 
		  KOL_NET=KOL_NET+vKOL_NET_OST, 
		  SUM_PROD=SUM_PROD+vSUM_PROD_OST, 
		  SUM_PROD_NDS=SUM_PROD_NDS+vSUM_PROD_NDS_OST, 
		  SUM_AKCIZ=SUM_AKCIZ+vSUM_AKCIZ_OST,  
	      TARIF_ORIG=TARIF_ORIG+vTARIF_ORIG_OST, 
		  TARIF_ALT=TARIF_ALT+vTARIF_ALT_OST, 
		  TARIF=TARIF+vTARIF_OST, 
		  TARIF19=TARIF19+vTARIF19_OST, 
		  TARIF_NDS=TARIF_NDS+vTARIF_NDS_OST, 
		  TARIF_GUARD=TARIF_GUARD+vTARIF_GUARD_OST, 
		  TARIF_GUARD_NDS=TARIF_GUARD_NDS+vTARIF_GUARD_NDS_OST, 
		  SUM_VOZN11=SUM_VOZN11+vSUM_VOZN11_OST, 
		  SUM_VOZN11_NDS=SUM_VOZN11_NDS+vSUM_VOZN11_NDS_OST, 
	      SUM_VOZN12=SUM_VOZN12+vSUM_VOZN12_OST, 
		  SUM_VOZN12_NDS=SUM_VOZN12_NDS+vSUM_VOZN12_NDS_OST, 
		  SUM_STRAH=vSUM_STRAH_OST
		WHERE ID=vLAST_ID;
--  COMMIT;				
	  END IF;	  
		  
      vVES_OST:=lcur.VES_ALL;
      vVES_BRUTTO_OST:=lcur.VES_BRUTTO_ALL;
      vVES_CIST_OST:=lcur.VES_CIST_ALL;
      vVZLIV_OST:=lcur.VZLIV_ALL;
      vKOL_NET_OST:=lcur.KOL_NET_ALL;
      vSUM_PROD_OST:=lcur.SUM_PROD_ALL;
      vSUM_PROD_NDS_OST:=lcur.SUM_PROD_NDS_ALL;
      vSUM_AKCIZ_OST:=lcur.SUM_AKCIZ_ALL;
      vTARIF_ORIG_OST:=lcur.TARIF_ORIG_ALL;
      vTARIF_ALT_OST:=lcur.TARIF_ALT_ALL;
      vTARIF_OST:=lcur.TARIF_ALL;
      vTARIF19_OST:=lcur.TARIF19_ALL;
      vTARIF_NDS_OST:=lcur.TARIF_NDS_ALL;
      vTARIF_GUARD_OST:=lcur.TARIF_GUARD_ALL;
      vTARIF_GUARD_NDS_OST:=lcur.TARIF_GUARD_NDS_ALL;
      vSUM_VOZN11_OST:=lcur.SUM_VOZN11_ALL;
      vSUM_VOZN11_NDS_OST:=lcur.SUM_VOZN11_NDS_ALL;
      vSUM_VOZN12_OST:=lcur.SUM_VOZN12_ALL;
      vSUM_VOZN12_NDS_OST:=lcur.SUM_VOZN12_NDS_ALL;
      vSUM_STRAH_OST:=lcur.SUM_STRAH_ALL;
	  
	  vKVIT_ID:=lcur.KVIT_ID;
	  vSOBS_ID:=0;
	  vID:=0;
	  vBILL_ID:=lcur.BILL_ID;
	  vLAST_ID:=0;
	END IF;

	IF lcur.NOM_SF_POKUP||' '=' ' THEN
	  -- Разбиение по дате выработки
	  SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
	  vSOBS_ID:=vID;
	  vSOBS_DATE_VIR:=lcur.DATE_VIR;

      INSERT INTO kvit_date_vir (
        ID, KVIT_ID, BILL_ID, DATE_VIR, BILL_POS_ID, VES, VES_BRUTTO, VES_CIST, VZLIV, KOL_NET, SUM_PROD, SUM_PROD_NDS, SUM_AKCIZ,  
	    TARIF_ORIG, TARIF_ALT, TARIF, TARIF19, TARIF_NDS, TARIF_GUARD, TARIF_GUARD_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
	    SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, NOM_SF_POKUP, NOM_DOK_POKUP, DATE_PLAN, OWNERSHIP_ID)
      VALUES (vID, vKVIT_ID, vBILL_ID, lcur.DATE_VIR, lcur.BILL_POS_ID, lcur.VES, lcur.VES_BRUTTO, lcur.VES_CIST, lcur.VZLIV, lcur.KOL_NET, 
	    lcur.SUM_PROD, lcur.SUM_PROD_NDS, lcur.SUM_AKCIZ, lcur.TARIF_ORIG, lcur.TARIF_ALT, lcur.TARIF, lcur.TARIF19, lcur.TARIF_NDS, 
		lcur.TARIF_GUARD, lcur.TARIF_GUARD_NDS, lcur.SUM_VOZN11, lcur.SUM_VOZN11_NDS, 
     	lcur.SUM_VOZN12, lcur.SUM_VOZN12_NDS, lcur.SUM_STRAH, lcur.NOM_SF_POKUP, lcur.NOM_DOK_POKUP, lcur.DATE_PLAN,1); 
--  COMMIT;				
	ELSE
	  -- Выделение приобретенного продукта
	  IF vSOBS_ID<>0 THEN
	    -- Если в этом вагоне уже есть позиция - собственный продукт
		UPDATE KVIT_DATE_VIR SET  
		  VES=VES+lcur.VES, 
		  VES_BRUTTO=VES_BRUTTO+lcur.VES_BRUTTO, 
		  VES_CIST=VES_CIST+lcur.VES_CIST, 
		  VZLIV=VZLIV+lcur.VZLIV, 
		  KOL_NET=KOL_NET+lcur.KOL_NET, 
		  SUM_PROD=SUM_PROD+lcur.SUM_PROD, 
		  SUM_PROD_NDS=SUM_PROD_NDS+lcur.SUM_PROD_NDS, 
		  SUM_AKCIZ=SUM_AKCIZ+lcur.SUM_AKCIZ,  
	      TARIF_ORIG=TARIF_ORIG+lcur.TARIF_ORIG, 
		  TARIF_ALT=TARIF_ALT+lcur.TARIF_ALT, 
		  TARIF=TARIF+lcur.TARIF, 
		  TARIF19=TARIF19+lcur.TARIF19, 
		  TARIF_NDS=TARIF_NDS+lcur.TARIF_NDS, 
		  TARIF_GUARD=TARIF_GUARD+lcur.TARIF_GUARD, 
		  TARIF_GUARD_NDS=TARIF_GUARD_NDS+lcur.TARIF_GUARD_NDS, 
		  SUM_VOZN11=SUM_VOZN11+lcur.SUM_VOZN11, 
		  SUM_VOZN11_NDS=SUM_VOZN11_NDS+lcur.SUM_VOZN11_NDS, 
	      SUM_VOZN12=SUM_VOZN12+lcur.SUM_VOZN12, 
		  SUM_VOZN12_NDS=SUM_VOZN12_NDS+lcur.SUM_VOZN12_NDS, 
		  SUM_STRAH=lcur.SUM_STRAH
		WHERE ID=vSOBS_ID;
	  ELSE
		-- Добавляем "плюс", BILL_POS_ID=1
	    SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
  	    vSOBS_ID:=vID;
	    vSOBS_DATE_VIR:=lcur.DATE_VIR;
        INSERT INTO kvit_date_vir (
          ID, KVIT_ID, BILL_ID, DATE_VIR, BILL_POS_ID, VES, VES_BRUTTO, VES_CIST, VZLIV, KOL_NET, SUM_PROD, SUM_PROD_NDS, SUM_AKCIZ,  
	      TARIF_ORIG, TARIF_ALT, TARIF, TARIF19, TARIF_NDS, TARIF_GUARD, TARIF_GUARD_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
  	      SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, NOM_SF_POKUP, NOM_DOK_POKUP, DATE_PLAN,OWNERSHIP_ID)
        VALUES (vID, vKVIT_ID, vBILL_ID, lcur.DATE_VIR, lcur.BILL_POS_ID, lcur.VES, lcur.VES_BRUTTO, lcur.VES_CIST, lcur.VZLIV, lcur.KOL_NET, 
	      lcur.SUM_PROD, lcur.SUM_PROD_NDS, lcur.SUM_AKCIZ, lcur.TARIF_ORIG, lcur.TARIF_ALT, lcur.TARIF, lcur.TARIF19, lcur.TARIF_NDS, 
		  lcur.TARIF_GUARD, lcur.TARIF_GUARD_NDS, lcur.SUM_VOZN11, lcur.SUM_VOZN11_NDS, 
     	  lcur.SUM_VOZN12, lcur.SUM_VOZN12_NDS, lcur.SUM_STRAH, NULL, NULL, lcur.DATE_PLAN,1); 
	  END IF;	
--  COMMIT;				
      -- Добавляем "минус", BILL_POS_ID=0
	  SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
      INSERT INTO kvit_date_vir (
          ID, KVIT_ID, BILL_ID, DATE_VIR, BILL_POS_ID, VES, VES_BRUTTO, VES_CIST, VZLIV, KOL_NET, SUM_PROD, SUM_PROD_NDS, SUM_AKCIZ,  
	      TARIF_ORIG, TARIF_ALT, TARIF, TARIF19, TARIF_NDS, TARIF_GUARD, TARIF_GUARD_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
  	      SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, NOM_SF_POKUP, NOM_DOK_POKUP, DATE_PLAN,OWNERSHIP_ID)
      VALUES (vID, vKVIT_ID, vBILL_ID, vSOBS_DATE_VIR, 0, -lcur.VES, -lcur.VES_BRUTTO, -lcur.VES_CIST, -lcur.VZLIV, -lcur.KOL_NET, 
	      -lcur.SUM_PROD, -lcur.SUM_PROD_NDS, -lcur.SUM_AKCIZ, -lcur.TARIF_ORIG, -lcur.TARIF_ALT, -lcur.TARIF, -lcur.TARIF19, -lcur.TARIF_NDS, 
		  -lcur.TARIF_GUARD, -lcur.TARIF_GUARD_NDS, -lcur.SUM_VOZN11, -lcur.SUM_VOZN11_NDS, 
     	  -lcur.SUM_VOZN12, -lcur.SUM_VOZN12_NDS, -lcur.SUM_STRAH, NULL, NULL, lcur.DATE_PLAN,1); 
--  COMMIT;				
	  -- Добавляем "плюс", BILL_POS_ID=0	  
      SELECT SEQ_ID.NEXTVAL INTO vID FROM DUAL;
      INSERT INTO kvit_date_vir (
          ID, KVIT_ID, BILL_ID, DATE_VIR, BILL_POS_ID, VES, VES_BRUTTO, VES_CIST, VZLIV, KOL_NET, SUM_PROD, SUM_PROD_NDS, SUM_AKCIZ,  
	      TARIF_ORIG, TARIF_ALT, TARIF, TARIF19, TARIF_NDS, TARIF_GUARD, TARIF_GUARD_NDS, SUM_VOZN11, SUM_VOZN11_NDS, 
  	      SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH, NOM_SF_POKUP, NOM_DOK_POKUP, DATE_PLAN, OWNERSHIP_ID)
        VALUES (vID, vKVIT_ID, vBILL_ID, lcur.DATE_VIR, 0, lcur.VES, lcur.VES_BRUTTO, lcur.VES_CIST, lcur.VZLIV, lcur.KOL_NET, 
	      lcur.SUM_PROD, lcur.SUM_PROD_NDS, lcur.SUM_AKCIZ, lcur.TARIF_ORIG, lcur.TARIF_ALT, lcur.TARIF, lcur.TARIF19, lcur.TARIF_NDS, 
		  lcur.TARIF_GUARD, lcur.TARIF_GUARD_NDS, lcur.SUM_VOZN11, lcur.SUM_VOZN11_NDS, 
     	  lcur.SUM_VOZN12, lcur.SUM_VOZN12_NDS, lcur.SUM_STRAH, lcur.NOM_SF_POKUP, lcur.NOM_DOK_POKUP, lcur.DATE_PLAN,2); 
--  COMMIT;				
	END IF;
	
	-- Уменьшаем остатки
    vVES_OST:=vVES_OST-lcur.VES;
    vVES_BRUTTO_OST:=vVES_BRUTTO_OST-lcur.VES_BRUTTO;
    vVES_CIST_OST:=vVES_CIST_OST-lcur.VES_CIST;
    vVZLIV_OST:=vVZLIV_OST-lcur.VZLIV;
    vKOL_NET_OST:=vKOL_NET_OST-lcur.KOL_NET;
    vSUM_PROD_OST:=vSUM_PROD_OST-lcur.SUM_PROD;
    vSUM_PROD_NDS_OST:=vSUM_PROD_NDS_OST-lcur.SUM_PROD_NDS;
    vSUM_AKCIZ_OST:=vSUM_AKCIZ_OST-lcur.SUM_AKCIZ;
    vTARIF_ORIG_OST:=vTARIF_ORIG_OST-lcur.TARIF_ORIG;
    vTARIF_ALT_OST:=vTARIF_ALT_OST-lcur.TARIF_ALT;
    vTARIF_OST:=vTARIF_OST-lcur.TARIF;
    vTARIF19_OST:=vTARIF19_OST-lcur.TARIF19;
    vTARIF_NDS_OST:=vTARIF_NDS_OST-lcur.TARIF_NDS;
    vTARIF_GUARD_OST:=vTARIF_GUARD_OST-lcur.TARIF_GUARD;
    vTARIF_GUARD_NDS_OST:=vTARIF_GUARD_NDS_OST-lcur.TARIF_GUARD_NDS;
    vSUM_VOZN11_OST:=vSUM_VOZN11_OST-lcur.SUM_VOZN11;
    vSUM_VOZN11_NDS_OST:=vSUM_VOZN11_NDS_OST-lcur.SUM_VOZN11_NDS;
    vSUM_VOZN12_OST:=vSUM_VOZN12_OST-lcur.SUM_VOZN12;
    vSUM_VOZN12_NDS_OST:=vSUM_VOZN12_NDS_OST-lcur.SUM_VOZN12_NDS;
    vSUM_STRAH_OST:=vSUM_STRAH_OST-lcur.SUM_STRAH;

    vLAST_ID:=vID;
  END LOOP;
  
--  COMMIT;				
  
  -- Заполняем BILL_POS
  vBILL_ID:=0;
  vBILL_POS_ID:=0;
  FOR lcur IN (SELECT 
                 a.BILL_ID as NOM_DOK, 
				 SUM(a.VES_BRUTTO) as VES, 
				 MAX(b.CENA) as CENA_BN, 
				 MAX(b.CENA_OTP) as CENA, 
				 SUM(a.SUM_PROD) as SUMMA_BN, 
				 SUM(a.SUM_AKCIZ) as SUMMA_AKCIZ, 
				 0 as SUMMA_GSM25, 
				 SUM(a.SUM_PROD_NDS) as SUMMA_NDS20, 
				 SUM(a.SUM_PROD+a.SUM_AKCIZ+a.SUM_PROD_NDS) as SUMMA, 
				 c.DATE_BUXG as DATE_REALIZ, 
				 0 as ID_OLD, 
				 c.PROD_ID_NPR, 
				 a.OWNERSHIP_ID, 
				 c.IS_AGENT, 
				 1 as IS_LUK, 
				 MAX(b.NACENKA) as NACENKA, 
				 c.PROTO_NUM, 
				 c.PROTO_DATE, 
				 c.NO_AKCIZ, 
				 DECODE(SIGN(a.VES_BRUTTO),-1,NULL,1) as SUPPLIER_ID, 
				 a.NOM_SF_POKUP, 
				 a.NOM_DOK_POKUP, 
				 1 as IS_POKUP,
                 MAX(NVL((SELECT MAX(NVL(BILL_POS.BILL_POS_ID,1)) FROM BILL_POS WHERE NOM_DOK=a.BILL_ID AND BILL_POS_ID<10),1)) as MAX_BILL_POS_ID
			   FROM kvit_date_vir a,kvit b,bills c
			  WHERE a.kvit_id=b.id AND a.bill_id=b.bill_id AND a.bill_id=c.nom_dok
			    AND date_plan BETWEEN pBEGIN_DATE AND pEND_DATE
				AND a.BILL_POS_ID=0 AND (a.NOM_SF_POKUP||' '<>' ' OR a.VES_BRUTTO<0) 
			  GROUP BY a.BILL_ID,a.OWNERSHIP_ID,c.DATE_BUXG,c.PROD_ID_NPR,c.IS_AGENT,c.PROTO_NUM,c.PROTO_DATE,c.NO_AKCIZ,a.NOM_SF_POKUP,a.NOM_DOK_POKUP,DECODE(SIGN(a.VES_BRUTTO),-1,NULL,1)
			  ORDER BY a.BILL_ID,a.OWNERSHIP_ID,a.NOM_SF_POKUP,a.NOM_DOK_POKUP,DECODE(SIGN(a.VES_BRUTTO),-1,NULL,1)) LOOP

    IF vBILL_ID<>lcur.NOM_DOK THEN
	  -- Изменился счет
	  vBILL_ID:=lcur.NOM_DOK;
	  vBILL_POS_ID:=lcur.MAX_BILL_POS_ID;
	END IF;
	
	vBILL_POS_ID:=vBILL_POS_ID+1;
	
	-- Добавить позицию  
   	INSERT INTO BILL_POS (NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA_GSM25, SUMMA, 
	    DATE_REALIZ, PROD_ID_NPR, OWNERSHIP_ID, IS_AGENT, IS_LUK, NACENKA, PROTO_NUM, PROTO_DATE, NO_AKCIZ, SUPPLIER_ID, NOM_SF_POKUP, NOM_DOK_POKUP, IS_POKUP, ID_OLD)
     VALUES(lcur.NOM_DOK, vBILL_POS_ID, lcur.VES, lcur.CENA_BN, lcur.CENA, lcur.SUMMA_BN, lcur.SUMMA_AKCIZ, 
	    lcur.SUMMA_NDS20, lcur.SUMMA_GSM25, lcur.SUMMA, lcur.DATE_REALIZ, lcur.PROD_ID_NPR, lcur.OWNERSHIP_ID, 
		lcur.IS_AGENT, lcur.IS_LUK, lcur.NACENKA, lcur.PROTO_NUM, lcur.PROTO_DATE, lcur.NO_AKCIZ, lcur.SUPPLIER_ID, 
		lcur.NOM_SF_POKUP, lcur.NOM_DOK_POKUP, lcur.IS_POKUP,DECODE(SIGN(lcur.VES),-1,lcur.MAX_BILL_POS_ID,NULL));
--  COMMIT;				
		
	-- Обновить ссылку на позицию
	UPDATE KVIT_DATE_VIR SET BILL_POS_ID=vBILL_POS_ID WHERE BILL_ID=vBILL_ID AND NOM_SF_POKUP||' '=lcur.NOM_SF_POKUP||' ' AND OWNERSHIP_ID=lcur.OWNERSHIP_ID and BILL_POS_ID=0;
--  COMMIT;				
  END LOOP;

  COMMIT;				
END;

END;
/

--
-- FOR_NAKLPRINT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_NAKLPRINT
AS

FUNCTION rekv_zagr (p_nakl  NUMBER ) RETURN VARCHAR2
AS
  s VARCHAR2(1024);
BEGIN
s:='';
FOR lcur IN (SELECT  
		 		REESTR.VAGONTYPE_ID as RODV,REESTR.FORMNAKL_ID as FORMA,NVL(KLS_FORMSHAB.IS_RUS,0) as IS_RUS,
				SVED.PROD_ID_NPR as KOD_NPR, KLS_UPAK.NAME as BAG_NAME,REESTR.SHIELDS,REESTR.KOL_ED,REESTR.VES_ED,
				REESTR.VZLIV,REESTR.VOLUME15,REESTR.FAKT_PL as XPL,REESTR.GOST_ID as GOST,REESTR.KALIBR_ID as TIP, 
				REESTR.UPAK_ID as BAG_ID,KLS_UPAK.NAME as BAG_GD,SVED.PASP_NUM as NUM_PASP,REESTR.TEMPER,
				FOR_SVED.GET_PASP_VALUE_AS_NUM(SVED.ID,1,NULL) AS PL,
  				FOR_SVED.GET_PASP_VALUE_AS_NUM(SVED.ID,602,NULL) AS PL15
			 FROM REESTR, SVED, MONTH, NAKL, KLS_PROD,
				KLS_CIST,KLS_VAGONTYPE,KLS_FORMSHAB,KLS_UPAK
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
	  			AND SVED.PROD_ID_NPR=KLS_PROD.ID_NPR
	  			AND REESTR.UPAK_ID=KLS_UPAK.ID(+)
	  			AND NAKL.SHABNAKL_ID=KLS_FORMSHAB.ID(+)
	  			AND REESTR.NUM_CIST=KLS_CIST.NUM_CIST(+)
	  			AND KLS_CIST.VAGONTYPE_ID=KLS_VAGONTYPE.ID(+)
	  			AND ROWNUM=1
 	  			AND NAKL.ID=p_nakl)
LOOP

IF lcur.rodv=2 OR lcur.rodv=5 THEN /* КРЫТЫЙ ВАГОН или ПОЛУВАГОН*/
    IF SUBSTR(lcur.kod_npr,1,3)='242' THEN
      s:=s||'НАВАЛОМ'||'       '||'.';
    ELSE 
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN/* Одиночная на ЭКСПОРТ*/
        IF lcur.bag_id<>0 THEN 
		   s:=s||lcur.bag_name;
		ELSE
			s:=s||'     '||'.';
		END IF; 
      ELSE
        IF lcur.bag_id<>0 THEN
		   s:=s||lcur.bag_gd;
		ELSE
			s:=s||'     '||'.';
		END IF;	
      END IF;
      s:=s||';'||'       ПАСПОРТ:'||TRIM(lcur.num_pasp);
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN/*Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN/* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
	  s:=s||';'||'    КОЛ-ВО ЕД.:';
	  IF lcur.kol_ed<>0 THEN
	  	 s:=s||LPAD(TRIM(TO_CHAR(lcur.kol_ed)),7);
	  ELSE 
	  	   s:=s||'     '||'.';
	  END IF;	   
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN/* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||' ВЕС 1 ЕД.(КГ):';
	  IF lcur.ves_ed<>0 THEN 
	  	 s:=s||LPAD(TRIM(TO_CHAR(lcur.ves_ed,'9999.999')),7); 
	  ELSE
	  	  s:=s||'     '||'.';
	  END IF;  
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN/* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;      
	  s:=s||';'||'  КОЛ-ВО ЩИТОВ:';
	  IF lcur.shields=0 THEN
	  	 s:=s||'     '||'.';
	  ELSE
	  	  s:=s||LPAD(TRIM(TO_CHAR(lcur.shields)),7);
	  END IF;  
    END IF;
END IF;
   IF (lcur.rodv=6 OR lcur.rodv=1) AND (lcur.vzliv IS NULL) THEN/*&& tracks.defi_mass=2     /* Замер ЦИСТЕРН на ВАГОННЫХ ВЕСАХ*/
    IF lcur.is_rus=1 THEN
      IF SUBSTR(lcur.kod_npr,1,3)='242' THEN
        s:=s||'НАВАЛОМ'||'       '||'.';
      ELSE 
        s:=s||'НАЛИВОМ'||'       '||'.';
      END IF;
    END IF;
    IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
      s:=s||';'||'  ТИП ЦИСТЕРНЫ:'||LPAD(TRIM(lcur.tip),7)||';;';
    END IF;
    IF SUBSTR(lcur.kod_npr,1,3)<>'242' THEN
      s:=s||';'||CONCAT('       ПАСПОРТ:',lcur.num_pasp);
    END IF;
    IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
      s:=s||';';
    END IF;
    IF (lcur.pl IS NOT NULL) AND (lcur.gost=0) AND (SUBSTR(lcur.kod_npr,1,3)<>'242') THEN
      s:=s||';'||'ПЛОТН. ПРИ 20''C:'||LPAD(TRIM(TO_CHAR(lcur.pl,'90.9999')),7);
    END IF;
    IF (lcur.pl15 IS NOT NULL) AND (lcur.gost=1) AND (SUBSTR(lcur.kod_npr,1,3)<>'242') THEN
      s:=s||';'||'ПЛОТН. ПРИ 15''C:'||LPAD(TRIM(TO_CHAR(lcur.pl15,'90.9999')),7);
    END IF;
END IF;  
   IF (lcur.rodv=6 OR lcur.rodv=1) AND (lcur.vzliv IS NOT NULL) THEN/*(EMPTY(tracks.defi_mass) OR tracks.defi_mass=1) /* Замер ЦИСТЕРН МЕТР-ШТОКОМ*/
    IF lcur.is_rus=1 THEN 
      IF SUBSTR(lcur.kod_npr,1,3)='242' THEN
        s:=s||'НАВАЛОМ'||'       '||'.';
      ELSE 
        s:=s||'НАЛИВОМ'||'       '||'.';
      END IF;
    END IF;
    IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
      s:=s||';'||'  ТИП ЦИСТЕРНЫ:'||LPAD(TRIM(lcur.tip),7)||';;';
    END IF;
    s:=s||';'||'         ВЗЛИВ:'||LPAD(TRIM(TO_CHAR(lcur.vzliv,'999')),7);
    IF (lcur.pl IS NOT NULL) AND (lcur.gost=0) AND (SUBSTR(lcur.kod_npr,1,3)<>'242') THEN
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||'ПЛОТН. ПРИ 20''C:'||LPAD(TRIM(TO_CHAR(lcur.pl,'90.9999')),7);
    END IF;
    IF (lcur.pl15 IS NOT NULL ) AND (lcur.gost=1) AND (SUBSTR(lcur.kod_npr,1,3)<>'242') THEN
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||'ПЛОТН. ПРИ 15''C:'||LPAD(TRIM(TO_CHAR(lcur.pl15,'90.9999')),7);
    end if;
    IF lcur.gost=1 THEN
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||'   ТЕМПЕРАТУРА:'||LPAD(TRIM(TO_CHAR(lcur.temper,'9999.9'))||'''C',7);
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /*Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||' ОБЪЕМ ПРИ 15''C:'||LPAD(TRIM(TO_CHAR(lcur.volume15)),7);
    END IF;
    IF lcur.gost=0 THEN
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||'   ТЕМПЕРАТУРА:'||LPAD(TRIM(TO_CHAR(lcur.temper,'9999.9'))||'''C',7);
      IF (lcur.forma=5) AND (lcur.is_rus=0) THEN/* Одиночная на ЭКСПОРТ*/
        s:=s||';';
      END IF;
      s:=s||';'||'   ФАКТ. ПЛОТН.:'||LPAD(TRIM(TO_CHAR(lcur.xpl,'90.9999')),7);
    END IF;
	IF (lcur.forma=5) AND (lcur.is_rus=0) THEN /* Одиночная на ЭКСПОРТ*/
       s:=s||';';
    END IF;
    s:=s||';'||'       ПАСПОРТ:'||TRIM(lcur.num_pasp);
END IF;
EXIT;
END LOOP;
RETURN s;	 
END;/*rekv_zagr*/

/*Выбор строки № NN из строкового выражения. Cтроки разделены ;       */
FUNCTION StrokaN (stroka in VARCHAR2,nn in NUMBER,smb in VARCHAR2) RETURN VARCHAR2
AS
  res VARCHAR2(1024);
  str VARCHAR2(1024);
  i INTEGER;
  cur INTEGER;
  prev INTEGER;
  n INTEGER;
  dl VARCHAR2(1);
BEGIN
  if stroka IS NULL THEN
  	 RETURN stroka;
  END IF;	 
  IF (Smb IS NULL) THEN
    dl:=';';
  ELSE
    dl:=Smb;
  END IF;
  if (INSTR(stroka,dl)=0) OR (INSTR(stroka,dl) IS NULL) THEN 
  	 RETURN stroka;
  END IF;	 

  n:=nn;
  str:=TRIM(Stroka)||dl;
  str:=REPLACE(str,dl||dl,dl);
  IF n<=1 THEN
    n:=1;
  END IF;
  cur:=1;
  i:=1;
  WHILE (i<=n) AND (cur<>0)
  LOOP
	  cur:=INSTR(str,dl);
	  IF NOT (cur=0) THEN
	  	 res:=SUBSTR(str,1,cur-1);
		 str:=SUBSTR(str,cur+1);
	  END IF;
	  i:=i+1;	  
  END LOOP;     
  IF cur is null then
  	 return null;
  end if;	 
  RETURN trim(res);

END;/*StrokaN*/

/*Возвращает параметры S1-Отметка таможни/Номер транспорта,S2-Разрешение МПС,S3-Разрешение на продукт,S4-Экспорт*/
FUNCTION Get_S(p_nakl NUMBER, n NUMBER) RETURN VARCHAR2
AS
  s1 VARCHAR2(50);  /*Отметка таможни/Номер транспорта*/
  s2 VARCHAR2(50);  /*Разрешение МПС*/
  s3 VARCHAR2(50);  /*Разрешение на продукт*/
  s4 VARCHAR2(50);  /*Экспорт*/
BEGIN
s1:='';s2:='';s3:='';s4:='';
FOR lcur IN (SELECT  
		 	 MONTH.TRANSPORT as TRANSP,KLS_FORMSHAB.P_RAZR_MPS,KLS_FORMSHAB.IS_RUS,NAKL.FORMNAKL_ID as FORMA,
			 SVED.PROD_ID_NPR as KOD_NPR,KLS_CIST.VAGOWNER_ID as TIPV,GU12_A.NOM_Z as N_PLAN,KLS_VAGOWNER.RAZR_MPS,
			 KLS_PROD.RAZRESH,KLS_SHABEXP.TAM1,KLS_VAGOWNER.ID,KLS_VAGOWNER.VAGOWNER_NAME,KLS_FORMSHAB.IS_OPD	
			 FROM REESTR, SVED, MONTH, NAKL, KLS_PROD,
				KLS_CIST,KLS_VAGONTYPE,KLS_FORMSHAB,GU12_A,KLS_SHABEXP,KLS_VAGOWNER
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
	  			AND SVED.PROD_ID_NPR=KLS_PROD.ID_NPR
				AND MONTH.GU12_A_ID=GU12_A.ID(+)
	  			AND NAKL.SHABNAKL_ID=KLS_FORMSHAB.ID(+)
				AND NAKL.SHABEXP_ID=KLS_SHABEXP.ID(+)
	  			AND REESTR.NUM_CIST=KLS_CIST.NUM_CIST(+)
	  			AND KLS_CIST.VAGONTYPE_ID=KLS_VAGONTYPE.ID(+)
				AND KLS_CIST.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
	  			AND ROWNUM=1
 	  			AND NAKL.ID=p_nakl)
LOOP
      IF NVL(lcur.is_rus,0)=1 AND (lcur.transp IS NOT NULL)then
        s1:='Транспорт '||Trim(lcur.transp);
      END IF;
      IF NOT((lcur.forma=5) OR (lcur.forma=7)) then
        IF lcur.p_razr_mps=1 then
          IF lcur.tipv<>3 OR ((substr(lcur.kod_npr,1,3)='130') OR (substr(lcur.kod_npr,1,3)='131')) then
            /* Печать разрешения МПС*/
            s2:=Trim(lcur.razr_mps);
          end if;
        end if;
      ELSE
        IF NVL(lcur.is_rus,0)=1 then
          s1:='';s4:='';
		  if (NVL(lcur.is_opd,0)<>1) then
			 s1:=TRIM(lcur.tam1);
		  end if;	 
		  if (NVL(lcur.is_opd,0)<>1) then
			 s4:='ЭКСПОРТ';
		  end if;	 
        end if;
      end if;
      
	  IF (lcur.n_plan is null) AND lcur.tipv<>3 then
        s3:=Trim(lcur.razresh);
      end if;
	  EXIT;
END LOOP;
case n
	when 1 then return s1;
	when 2 then return s2;
	when 3 then return s3;
	when 4 then return s4;
end case;		   
END;

/*№ аварийной карты*/
FUNCTION AV_KART(AV_KART NUMBER,KOD VARCHAR2,KOD_GR VARCHAR2,PASP_ID VARCHAR2) RETURN VARCHAR2
AS
  TVsp_61 BOOLEAN;
  t_vsp NUMBER;
BEGIN
  IF kod='90000' then
    RETURN '';
  end if;
  t_vsp:=FOR_PASP.GET_PASP_VALUE_BY_TAG(PASP_ID, 't_vsp');
  TVsp_61:= (t_vsp>61);  
  IF (av_kart is not null) then
    IF av_kart>0 AND Trim(kod_gr)='10400' AND TVsp_61 then
      RETURN 'Ав.карта N 901';
    ELSE  
      IF av_kart<0 then
        RETURN '';
      ELSE
        RETURN 'Ав.карта N '||trim(To_char(av_kart));
      end if;
    end if;
  end if;
  RETURN 'Аварийная карта прилагается';
END;
/*Дополнительная информация под наименованием груза*/
/*По сравнению с фоксом: 1.убран параметро gr0_txt тк. он всегда пустой
                         2.убран перенос на вторую сторону т.к. в накладной все помещается на 1
						 3.вместо reestr_d.np_data_o используется sved.date_oforml*/
FUNCTION Dop_gr_inf(p_nakl NUMBER,cnt NUMBER,KOD_NPR VARCHAR2,KOD_GD VARCHAR2,DATE_OFORML DATE) RETURN VARCHAR2
AS
TYPE LIST_TYPE IS VARRAY (7) of VARCHAR2(60);
final_list LIST_TYPE:=list_type(null,null,null,null,null,null,null);
to_list LIST_TYPE:=list_type(null,null,null,null,null,null,null);
i INTEGER;
j INTEGER;
gr1_txt VARCHAR2(50);gr2_txt VARCHAR2(50);gr3_txt VARCHAR2(50);gr4_txt VARCHAR2(50); 
BEGIN
i:=0;
  gr1_txt:=dop_nakl(p_nakl,'gr1_txt');
  gr2_txt:=dop_nakl(p_nakl,'gr2_txt');
  gr3_txt:=dop_nakl(p_nakl,'gr3_txt');
  gr4_txt:=dop_nakl(p_nakl,'gr4_txt');
  IF substr(kod_npr,1,3)='242' then
    i:=1;  
    to_list(i):='Договор грузоотправителя с СевЖД от 27/12/04 нр 29/Д-8/38'; 
    i:=2;
    to_list(i):='Основание:тел. ОАО РЖД от 02.03.05г. НР СБ-2045'; 
  end if;  
  i:=i+1;
  to_list(i):=Trim(gr1_txt);
  i:=i+1;
  to_list(i):=Trim(gr2_txt);
  i:=i+1;
  to_list(i):=Trim(gr3_txt);
  i:=i+1;
  to_list(i):=Trim(gr4_txt);

  j:=0;
  FOR i  in 1..7
  LOOP
    IF (to_list(i) is not null) then
      j:=j+1;
      final_list(j):=to_list(i);
    end if;  
  end loop;

  IF substr(kod_gd,1,3)='211' then 
    IF date_oforml>=TO_DATE('01.10.2003','dd.mm.yyyy') then
      final_list(j+1):='Ведомственная охрана МПС России';
      final_list(j+2):='Договор N 5/HOP-3/23 от 24.09.2003';
    end if; 
  end if;

  IF cnt>7 then
    RETURN '';
  else
  	IF (final_list(cnt) is null)then
	   final_list(cnt):='';
	end if;  
  	RETURN final_list(cnt);
  end if;

END;

FUNCTION SobsTitle(p_nakl NUMBER,TIP_SOBS NUMBER) RETURN VARCHAR2
AS
  SobsExist BOOLEAN;
  Res VARCHAR2(15);
BEGIN
	SobsExist:=SobsInfo(p_nakl,'SobsExist');
	if SobsExist then
   	   if tip_sobs=2 then
   	   	  return'АРЕНДАТОР';
   	   else 
   	   	  return 'СОБСТВЕННИК';
       end if;
	else
		return '';
	end if;   
END;

/* 
Возвращает признак Единтсвенного собственника или признак существования собственника в зависимости от параметра info.
   info='SobstExist' или info='SobstOne'. 
*/
FUNCTION SobsInfo(p_nakl NUMBER,info VARCHAR2) return BOOLEAN
AS
CURSOR vagons_cur(NaklId NUMBER) IS 
	   		 SELECT  
			 	 KLS_VAGOWNER.VAGOWN_TYP_ID as TIP_SOBS,KLS_VAGOWNER.ID as TIPV
			 FROM REESTR, SVED, MONTH, NAKL, KLS_CIST,KLS_VAGOWNER
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
	  			AND REESTR.NUM_CIST=KLS_CIST.NUM_CIST(+)
				AND KLS_CIST.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
				AND NAKL.ID=NaklId;
vagons_row vagons_cur%ROWTYPE;
SobsExist BOOLEAN;
SobsOne BOOLEAN;
m_tipv NUMBER;
BEGIN
   SobsExist:=false;
   SobsOne:=true;
   OPEN vagons_cur(p_nakl);
/* Необходимо задать начальное значение m_tipv, поэтому первую запись просмотрим вне цикла*/
   FETCH vagons_cur INTO vagons_row;
   if vagons_row.tipv<>3 then
	  	 SobsExist:=true;
   end if;

   m_tipv:=NVL(vagons_row.tipv,0);
   LOOP
   	  FETCH vagons_cur INTO vagons_row;
      EXIT WHEN vagons_cur%NOTFOUND;
	  if NVL(vagons_row.tipv,0)<>3 then
	  	 SobsExist:=true;
	  end if;
	  if NVL(vagons_row.tipv,0)<>m_tipv then 
      	 SobsOne:=false;
      end if;		 	 
   END LOOP;
   CLOSE vagons_cur;
   case 
		when info='SobsExist' then return SobsExist;
		when info='SobsOne' then return SobsOne;
   end case;		   
END;

/*IIF(SobsExist,IIF(SobsOne,types.prn_name,'СМ.ДОП.ЛИСТ К НАКЛАДНОЙ'),'')*/
FUNCTION SobsName(p_nakl NUMBER,VAGOWNER_NAME VARCHAR2) RETURN VARCHAR2
AS
  SobsExist BOOLEAN;
  SobsOne BOOLEAN;
  Res VARCHAR2(15);
BEGIN
	SobsExist:=SobsInfo(p_nakl,'SobsExist');
	SobsOne:=SobsInfo(p_nakl,'SobsOne');

	if SobsExist then
   	   if SobsOne then
   	   	  return Trim(VAGOWNER_NAME);
   	   else 
   	   	  return 'СМ.ДОП.ЛИСТ К НАКЛАДНОЙ';
       end if;
	else
		return '';
	end if;   

END;

/*  Функция возвращает один из пунктов дополнительной информации о грузе или взыск название которго передается через
аргумент ident:vzisk1,vzisk2,vzisk3,vzisk4,gr1_txt,gr2_txt,gr3_txt,gr4_txt.Если накладная экспортная, то в vzisk1,vzisk2
возвращаются их экспортные значения */
FUNCTION Dop_nakl(p_nakl NUMBER, ident VARCHAR2) RETURN VARCHAR2
AS
vzisk1 VARCHAR2(50);vzisk2 VARCHAR2(50);vzisk3 VARCHAR2(50);vzisk4 VARCHAR2(50);
vzisk1_ex VARCHAR2(50);vzisk2_ex VARCHAR2(50);
gr1_txt VARCHAR2(50);gr2_txt VARCHAR2(50);gr3_txt VARCHAR2(50);gr4_txt VARCHAR2(50);
gr1_txt_ex VARCHAR2(50);gr2_txt_ex VARCHAR2(50);
k_tar_txt VARCHAR2(50);
BEGIN
FOR lcur IN (SELECT  
			 /* взыски из разных таблиц*/
			 KLS_VAGOWNER.VZISK1,KLS_VAGOWNER.VZISK2,KLS_VZISKTXT.VZISK1 as VZISK1_TXT,KLS_VZISKTXT.VZISK2 as VZISK2_TXT,
			 KLS_ISKL_TAR.VZISK3,KLS_ISKL_TAR.VZISK4,KLS_VAGOWNER.VZISK1_EX,KLS_VAGOWNER.VZISK2_EX,
			 /* дополнительная информация о грузе*/
			 KLS_VAGOWNER.GR1_TXT,KLS_VAGOWNER.GR2_TXT,KLS_VAGOWNER.GR1_TXT_EX,KLS_VAGOWNER.GR2_TXT_EX,KLS_CIST.GR1_TXT as GR1_CIST,
			 KLS_CIST.GR2_TXT as GR2_CIST,KLS_ISKL_TAR.GR4_TXT,KLS_ISKL_TAR.GR3_TXT,KLS_VZISKTXT.GR1,KLS_VZISKTXT.GR2,
			 KLS_SHABEXP.GR1_TXT_EX as GR1_TXT_SHABEX,KLS_SHABEXP.GR2_TXT_EX as GR2_TXT_SHABEX,
			 /*Прочая информация*/
			 KLS_VID_OTGR.LOAD_TYPE_ID as TIP_OTGR,KLS_VZISKTXT.ID as VZISK_ID,
			 KLS_VAGOWNER.ID as TIPV,KLS_ISKL_TAR.K_TAR,MONTH.K_TAR as MONTH_K_TAR,MONTH.IS_EXP,
			 KLS_ISKL_TAR.K_TAR_TXT,MONTH.FLG_FORMA_2 as FORMA_2, SVED.PROD_ID_NPR as KOD_NPR
			 FROM REESTR, SVED, MONTH, NAKL, KLS_CIST,KLS_VID_OTGR,KLS_ISKL_TAR,KLS_VAGOWNER,KLS_VZISKTXT,KLS_SHABEXP
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
				AND NAKL.SHABEXP_ID=KLS_SHABEXP.ID(+)
	  			AND REESTR.NUM_CIST=KLS_CIST.NUM_CIST(+)
				AND KLS_CIST.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
				AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR(+)
				AND MONTH.K_TAR=KLS_ISKL_TAR.K_TAR(+)
				AND MONTH.VZISK_ID=KLS_VZISKTXT.ID(+)
	  			AND ROWNUM=1
				AND NAKL.ID=p_nakl)
LOOP
	if lcur.tip_otgr=2 then
	   return '';
	end if;
/* допинформация согласно собственника */	
/* если поле TIPV будет пустым, то соответствующие переменные также будут пустыми иначе - заполненятся значениями */
	vzisk1:=lcur.vzisk1;
	vzisk2:=lcur.vzisk2;
	vzisk1_ex:=lcur.vzisk1_ex;
	vzisk2_ex:=lcur.vzisk2_ex;
	gr1_txt:=lcur.gr1_txt;
	gr2_txt:=lcur.gr2_txt;
	gr1_txt_ex:=lcur.gr1_txt_ex;
	gr2_txt_ex:=lcur.gr2_txt_ex;	 
	if lcur.tipv is null then
	   vzisk1:='Без акцепта через ТЕХ ПД';
	end if;   
/* допинформация согласно искл. тарифа */
	k_tar_txt:=lcur.k_tar_txt;
	gr3_txt:=lcur.gr3_txt;
	gr4_txt:=lcur.gr4_txt;
	vzisk3:=lcur.vzisk3;
	vzisk4:=lcur.vzisk4;
	/* если непустое поле k_tar из kls_iskl_tar значит есть соответствие в справочнике(kls_iskl_tar)*/
	if lcur.k_tar is not null then
	   vzisk1:='';
	   vzisk2:='';
	else
/* если пустое поле k_tar из kls_iskl_tar, а непустое k_tar из month значит нет соответствия в справочнике(kls_iskl_tar)*/
		if lcur.month_k_tar is not null then
		   vzisk3:='ТАРИФ НА СТ.НАЗНАЧЕНИЯ';
		   vzisk1:='';
	       vzisk2:='';
		else
			vzisk1:=lcur.vzisk1;
    		vzisk2:=lcur.vzisk2;
			if lcur.vzisk_id is not null then
			   vzisk1:=lcur.vzisk1_txt;
        	   vzisk2:=lcur.vzisk2_txt;
			   gr1_txt:=lcur.gr1;
        	   gr2_txt:=lcur.gr2;
			end if;
		end if;
	end if;
/*записи в KLS_CIST являются приоритетными*/
	if lcur.gr1_cist is not null then
	   gr1_txt:=lcur.gr1_cist; 
	end if;
	if lcur.gr2_cist is not null then
	   gr2_txt:=lcur.gr2_cist; 
	end if;
	   
    if lcur.forma_2=1 then
   	   vzisk1:='Форма N2 тариф на станции назначения';
   	   vzisk2:='';
   	   vzisk3:='';
   	   vzisk4:='';
    end if;
    if lcur.kod_npr='90000' then
       vzisk1:=Trim(vzisk1_ex);
       vzisk2:=Trim(vzisk2_ex);
    end if;
/* Для экспортных накладных записи беруться из KLS_SHABEX(шаблон экспортных накладных)*/
	if lcur.is_exp=1 then
	   gr1_txt:=lcur.gr1_txt_shabex;
	   gr2_txt:=lcur.gr2_txt_shabex;
	   gr1_txt_ex:=lcur.gr1_txt_shabex;
	   gr2_txt_ex:=lcur.gr2_txt_shabex;
	end if;  
	EXIT;/*loop*/
END LOOP;

case
	when ident='vzisk1' then return vzisk1;
	when ident='vzisk2' then return vzisk2;
	when ident='vzisk1_ex' then return vzisk1_ex;
	when ident='vzisk2_ex' then return vzisk2_ex;
	when ident='vzisk3' then return vzisk3;
	when ident='vzisk4' then return vzisk4;
	when ident='gr1_txt' then return gr1_txt;
	when ident='gr2_txt' then return gr2_txt;
	when ident='gr3_txt' then return gr3_txt;
	when ident='gr4_txt' then return gr4_txt;
	when ident='gr1_txt_ex' then return gr1_txt_ex;
	when ident='gr2_txt_ex' then return gr2_txt_ex;
end case;    

END;

FUNCTION Itog_mest(rodv NUMBER,shab_form NUMBER,p_nakl NUMBER,forma NUMBER) RETURN VARCHAR2
AS
BEGIN
if (shab_form=2) or (shab_form=5) then
   case rodv
   		when 1 then return 'ОДИН БУНКЕР';
  		when 2 then return 'ОДИН КРЫТЫЙ';
  		when 3 then return 'ОДИН ХОППЕР';
  		when 4 then return 'ОДНА ПЛАТФОРМА';
  		when 5 then return 'ОДИН ПОЛУВАГОН';
  		when 6 then return 'ОДНА ЦИСТЕРНА';
  		when 9 then return 'ОДИН КОНТЕЙНЕР';
   end case;
else
   return UPPER(FOR_NAKLPRINT.propis(LPAD(TO_CHAR(FOR_NAKLPRINT.all_cnt(p_nakl,forma)),3,'0'),0)); 
end if;
END;

FUNCTION all_cnt(p_nakl NUMBER,forma NUMBER) RETURN NUMBER
AS
  all_cnt NUMBER;
BEGIN
CASE 
	WHEN (forma=5) OR (forma=2) THEN all_cnt:=1;
	ELSE SELECT COUNT(NUM_CIST)INTO all_cnt FROM REESTR WHERE reestr.NAKL_ID=p_nakl;
END CASE;
	RETURN all_cnt;
END;

FUNCTION propis(cc VARCHAR2, atr NUMBER) RETURN VARCHAR2
AS
  s NUMBER;
  d NUMBER;
  o NUMBER;
  Err NUMBER;
  res VARCHAR2(50);
  sto VARCHAR2(50);
  des VARCHAR2(50);
  ons VARCHAR2(50);
  ending VARCHAR2(50);
BEGIN
  S:=TO_NUMBER(SUBSTR(cc,1,1));
  D:=TO_NUMBER(SUBSTR(cc,2,1));
  O:=TO_NUMBER(SUBSTR(cc,3,1));
  if atr=1 then
    ending:='рублей';
  else if atr=2 then
          ending:='тысяч';
	   else if atr=3 then
               ending:='миллионов';
			else if atr=0 then
			     	ending:='';
				 else	
               	 	ending:='миллиардов';
				 end if;	
			end if;
	   end if;
  end if;
  if s=0 then
     sto := '';
  else if s=1 then
          sto := 'сто';
	   else if s=2 then
	           sto := 'двести';
			else if s=3 then
                    sto := 'триста';
				 else if s=4 then
                         sto := 'четыреста';
                      else if s=5 then
                              sto := 'пятьсот';
				           else if s=6 then
                                   sto := 'шестьсот';
				                else if s=7 then
                                        sto := 'семьсот';
				                     else if s=8 then
                                             sto := 'восемьсот';
				                          else
                                             sto := 'девятьсот';
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  if d=0 then
    des := '';
  else if d=1 then
          IF o = 0 Then
		     des := 'десять';
          ELSE
		     des := 'надцать';
		  END IF;
	   else if d=2 then
               des := 'двадцать';
			else if d=3 then
                    des := 'тридцать';
				 else if d=4 then
                         des := 'сорок';
					  else if d=5 then
                              des := 'пятьдесят';
						   else if d=6 then
                                   des := 'шестьдесят';
								else if d=7 then
                                        des := 'семьдесят';
									 else if d=8 then
                                             des := 'восемьдесят';
										  else
                                             des := 'девяносто';
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  if o=0 then
    ons := '';
  else if o=1 then
         IF (atr = 2) AND (d <> 1) Then
		   ons := 'одна';
         ELSE
		   ons := 'один';
		 END IF;
         if d<>1 then
           if atr=1 then
              ending:='рубль';
		   else if atr=2 then
                   ending:='тысяча';
				else if atr=3 then
                        ending:='миллион';
					 else if atr=0 then
					 	  	 ending:='';
						  else	  
                          	 ending:='миллиард';
						  end if;	 
					 end if;
  			    end if;
		   end if;
         end if;
       else if o=2 then
               IF (atr = 2) OR (d = 1) Then
			     ons := 'две';
               ELSE
			     ons := 'два';
			   END IF;
               if d<>1 then
                 if atr=1 then
                    ending:='рубля';
                 else if atr=2 then
                         ending:='тысячи';
				      else if atr=3 then
                              ending:='миллиона';
					       else if atr=0 then
						      	   ending:='';
								else   
                              	   ending:='миллиарда';
								end if;   
 					       end if;
  			          end if;
		         end if;
               end if;
			else if o=3 then
                    ons := 'три';
                    if d<>1 then
                      if atr=1 then
                         ending:='рубля';
                      else if atr=2 then
                              ending:='тысячи';
				           else if atr=3 then
                                   ending:='миллиона';
					            else if atr=0 then
									 	ending:='';
									 else	
                                   	 	ending:='миллиарда';
									 end if;	
 					            end if;
  			               end if;
		              end if;
                    end if;
 			     else if o=4 then
                         ons := 'четыр';
                         IF (d <> 1) Then
                           ons := ons || 'е';
                           if atr=1 then
                              ending:='рубля';
                           else if atr=2 then
                                   ending:='тысячи';
				                else if atr=3 then
                                        ending:='миллиона';
					                 else if atr=0 then
									 	  	 ending:='';
										  else	 	 
                                          	 ending:='миллиарда';
										  end if;	 
       					             end if;
  			                    end if;
		                   end if;
						 END IF;
    			      else if o=5 then
                              ons := 'пят';
                              IF (d <> 1) Then
							    ons := ons || 'ь';
							  END IF;
    			           else if o=6 then
                                   ons := 'шест';
                                   IF (d <> 1) Then
								     ons := ons || 'ь';
								   END IF;
                                else if o=7 then
                                        ons := 'сем';
                                        IF (d <> 1) Then
										   ons := ons || 'ь';
										END IF;
									 else if o=8 then
                                             ons := 'восем';
                                             IF (d <> 1) Then
											    ons := ons || 'ь';
											 END IF;
										  else
                                             ons := 'девят';
                                             IF (d <> 1) Then
											    ons := ons || 'ь';
											 END IF;
										  end if;
  								     end if;
							    end if;
  			  		       end if;
				      end if;
			     end if;
		    end if;
	   end if;
  end if;
  IF d = 1 Then
    res := LTRIM(RTRIM(sto || ' ' || ons || des)) || ' ';
  ELSE
    res := LTRIM(RTRIM(sto || ' ' || des || ' ' || ons)) || ' ';
  END IF;
  IF res=' ' Then
    IF atr=1 then
	  RETURN ending;
    Else
	  RETURN '';
	END IF;
  ELSE
    RETURN (res || ending);
  END IF;
END;

FUNCTION Dop_vzisk(p_nakl NUMBER,cnt NUMBER) RETURN VARCHAR2
AS
TYPE LIST_TYPE IS VARRAY (4) of VARCHAR2(50);
final_list LIST_TYPE:=list_type(null,null,null,null);
to_list LIST_TYPE:=list_type(null,null,null,null);
i INTEGER;
j INTEGER;

BEGIN
  to_list(1):=Trim(Dop_nakl(p_nakl,'vzisk1'));
  to_list(2):=Trim(Dop_nakl(p_nakl,'vzisk2'));
  to_list(3):=Trim(Dop_nakl(p_nakl,'vzisk3'));
  to_list(4):=Trim(Dop_nakl(p_nakl,'vzisk4'));
  j:=0;

  FOR i  in 1..4
  LOOP
    IF (to_list(i) is not null) then
      j:=j+1;
      final_list(j):=to_list(i);
    end if;  
  end loop;

  IF cnt>4 then
    RETURN '';
  else
  	IF (final_list(cnt) is null)then
	   final_list(cnt):='';
	end if;  
  	RETURN final_list(cnt);
  end if;
END;

FUNCTION Defi_mass(p_nakl NUMBER,RODV NUMBER,IS_RUS NUMBER,FORMA NUMBER,KOD_NPR VARCHAR2,
                   VZLIV NUMBER,DEFI_MASS NUMBER) RETURN VARCHAR2
AS
s VARCHAR2(100);
BEGIN
s:='';
if ((rodv=6) OR (rodv=1)) AND (vzliv is not null) then
    if ((forma=5)or(forma=7)) AND (nvl(is_rus,0)=0) then
      s:=s||'ЗАМЕРОМ';
    else
      if kod_npr='90000' then
        s:=s||'ПО ОБМЕРУ, РАСЧЕТНЫМ ПУТЕМ';
      else    
        s:=s||'ЗАМЕРОМ МЕТР-ШТОКОМ';    
      end if;
    end if;  
end if;
if (((rodv=1) or (rodv=6)) AND (vzliv is null)) or (rodv=2) or (rodv=5) then
    if ((forma=5)or(forma=7)) AND (nvl(is_rus,0)=0) then
      IF defi_mass=3 then  
        s:=s||'ЗА ВЕСОМ "ЛУКОЙЛ-УНП"';
      ELSE
        s:=s||'HА ВЕСАХ, +-1.5%';
      end if;
    ELSE
      IF defi_mass=3 then  
        s:=s||'ЗА ВЕСОМ ОАО "ЛУКОЙЛ-УНП"';
      ELSE
        s:=s||'HА ВАГОННЫХ ВЕСАХ "ЛУКОЙЛ-УНП", +-1.5%';
      end if;
    end if;  
end if;
RETURN s;
END;

FUNCTION Zag_plomba(forma NUMBER,p_typ NUMBER,dop NUMBER) RETURN VARCHAR2
AS
s VARCHAR2(50);
is_dop NUMBER;
BEGIN
  s:='';
  IF dop is null then
    is_dop:=0;
  ELSE
    is_dop:=1;
  end if;

  if (forma=7) AND (is_dop=0) then
    s:='-СМ.ДОП.ЛИСТ К НАКЛАДНОЙ';
  ELSE
    CASE p_typ
      when 1 then s:='2СЕВ СПРУТ-777';
      when 2 then s:='"ЛАВР-ГАРАНТ 2М"';
      when 3 then s:='"ЛАВР 2000 2СЕВ"';
      when 4 then s:='"ЛАВР 2000 3СЕВ"';
      when 5 then s:='"ЛАВР 2000 4СЕВ"';
      when 6 then s:='"ЛАВР 2000 5СЕВ"';
	  else s:='';
    END CASE;
  end if;

RETURN S;

END;

FUNCTION plomba(plomba VARCHAR2,dop NUMBER) RETURN VARCHAR2
AS
is_dop NUMBER;
BEGIN
  if dop is null then
    is_dop:=0;
  ELSE
    is_dop:=1;
  end if;
if (plomba is null) OR (plomba='Сев.0') then
   return '';
else
   return Trim(plomba);
end if;
END;
/*Параграф согласно которому закреплен груз */
FUNCTION nakl_para(rodv NUMBER, kod_npr VARCHAR2) RETURN VARCHAR2
AS
BEGIN
/*  IIF((rodv=6 or rodv=1) and .F.,IIF(LEFT(kod_npr,3)='130','30,32','30   '),IIF(rodv=2,' ',IIF(rodv=5,' ','     ')))*/
  IF((rodv=6) or (rodv=1)) and FALSE then
  	 IF SUBSTR(kod_npr,1,3)='130' then
	 	return'30,32';
	 else
	 	 return '30   ';
	 end if;
  else
  	  IF rodv=2 then
	  	return ' ';
	  else
	   IF rodv=5 then
	   	  return ' ';
	   else
	   	  return '     ';
	   end if;
	  end if; 	   
  end if;	 
END;

FUNCTION nakl_glav(rodv NUMBER, kod_npr VARCHAR2) RETURN VARCHAR2
AS
BEGIN
  IF SUBSTR(kod_npr,1,4)='2421' then
  	return '1 р 5';
  else
    IF(rodv=6) or (rodv=1) then 
		return '     ';
	else
		IF rodv=2 then
			return '       ';
		else
		   IF rodv=5 then
		   		return '     ';
		   else
		     return	'     ';
		   end if;
		end if;
	end if;
  end if;		    
END;

FUNCTION all_ves(p_nakl NUMBER, forma NUMBER) return NUMBER
as
res NUMBER;
BEGIN
CASE 
	WHEN (forma=5) OR (forma=2) THEN SELECT SUM(VES+UPAK_VES)INTO res FROM REESTR WHERE reestr.NAKL_ID=p_nakl;
	ELSE SELECT SUM(VES)INTO res FROM REESTR WHERE reestr.NAKL_ID=p_nakl;
END CASE;
RETURN res;
END;

FUNCTION all_brutto(p_nakl NUMBER) return NUMBER
as
res NUMBER;
BEGIN
	 SELECT SUM(ves_all) INTO res FROM REESTR WHERE reestr.NAKL_ID=p_nakl;
	 RETURN res;
END;

FUNCTION all_tara(p_nakl NUMBER) return NUMBER
as
res NUMBER;
BEGIN
	 SELECT SUM(ves_cist) INTO res FROM REESTR WHERE reestr.NAKL_ID=p_nakl;
	 RETURN res;
END;

/*Печать атрибутов обратной стороны */
FUNCTION sertif(p_nakl NUMBER, str_fakt VARCHAR2) return VARCHAR2
AS
s VARCHAR2(1024);
str_list VARCHAR2(255);
stor_sele VARCHAR2(255);
r1 VARCHAR2(255);
r2 VARCHAR2(255);
r3 VARCHAR2(255);
i1 INTEGER;
i2 INTEGER;
RosInsCnt NUMBER;
BEGIN
s:='';
FOR lcur IN (SELECT  
			 REESTR.FORMNAKL_ID as FORMA,KLS_CIST.VAGONTYPE_ID as RODV,KLS_FORMSHAB.IS_RUS,KLS_PROD.AV_KART,
			 SVED.PROD_ID_NPR as KOD_NPR,REESTR.UPAK_VES as BAG_VES,SVED.DEFI_MASS_ID as DEFI_MASS,KLS_DOG.DOG_NUMBER as LONG_NUM,
			 KLS_CIST.VAGOWNER_ID as TIPV,KLS_PROD.NAME_NPR as NAIM_PR,KLS_PROD.GOST_NPR as GOST,REESTR.ROSINSPL1,
			 REESTR.ROSINSPL2,KLS_PREDPR.PREDPR_NAME as SOBSTV_NAIM,MONTH.K_TAR,KLS_ISKL_TAR.K_TAR_TXT,MONTH.NOM_ZD,
			 REESTR.ID as NUM_OTGR, SVED.PASP_NUM as NUM_PASP
			 FROM REESTR, SVED, MONTH, NAKL, KLS_CIST,KLS_VAGOWNER,KLS_FORMSHAB,KLS_DOG,KLS_PROD,KLS_PREDPR,KLS_ISKL_TAR
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
	  			AND REESTR.NUM_CIST=KLS_CIST.NUM_CIST(+)
				AND KLS_CIST.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
				AND SVED.PROD_ID_NPR=KLS_PROD.ID_NPR(+)
				AND NAKL.SHABNAKL_ID=KLS_FORMSHAB.ID(+)
				AND MONTH.DOG_ID=KLS_DOG.ID(+)
				AND MONTH.NPR_SOBSTV_ID=KLS_PREDPR.ID(+)
				AND MONTH.K_TAR=KLS_ISKL_TAR.K_TAR(+)
	  			AND ROWNUM=1
				AND NAKL.ID=p_nakl)
LOOP
s:='';
RosInsCnt:=0;
IF (lcur.forma=2) or (lcur.forma=6) then
  s:=s||'ДОГОВОР ';
  if lcur.long_num is not null then
  s:=s||trim(lcur.long_num)||' ЗАДАНИЕ '||trim(lcur.nom_zd);
  end if;
  CASE  
    when (lcur.rodv=2) or (lcur.rodv=5) then s:=s||';Вагон очищен полностью,;под погрузку годен';
    when (lcur.rodv=6) or (lcur.rodv=1) then s:=s||';Вагон(котел) и арматура исправны и ;соответствуют установленным требованиям';
  END CASE;
  s:=s||';ПРОДУКТ: '||Trim(lcur.naim_pr);
  s:=s||';         '||Trim(lcur.gost);
  IF (lcur.bag_ves is not null) then
    s:=s||';Чистый вес: '||Trim(str_fakt);
  end if;    

  IF (lcur.forma=2) AND (lcur.rosinspl1 is not null) AND (Trim(lcur.rosinspl1)<>'0') then 
    s:=s||';'||'Независимый инспектор ЗАО "РОСИНСПЕКТОРАТ"'||';';
	IF(lcur.rosinspl2 is null) then
		s:=s||'пломба ';
	else
		s:=s||'пломбы ';
	end if;
	s:=s||Trim(lcur.rosinspl1);
	IF(lcur.rosinspl2 is not null) then
		s:=s||' и '||Trim(lcur.rosinspl2);
	end if;	
  end if;
  str_list:=RosInsList(p_nakl);
  /* аналогично RosInsList*/
  IF lcur.forma=6 AND NVL(str_list,'')<>'' then
    IF FOR_NAKLPRINT.RosInsCnt(p_nakl)<=7 then
      i1:=instr(',',str_list,1,1);
      i2:=instr(',',str_list,1,4);
      IF i1>0 then
        r1:=SUBSTR(str_list,1,i1-1);
        IF i2>0 then 
          r2:=SUBSTR(str_list,i1+1,i2-i1-1);  
          r3:=SUBSTR(str_list,i2+1,250);    
        ELSE
          r2:=SUBSTR(str_list,i1+1,250);  
          r3:='';
        end if;
      ELSE
        r1:=str_list;
        r2:='';
        r3:=''; 
      end if;  
      s:=s||';'||'Пломбы ЗАО "РОСИНСПЕКТОРАТ": ';
	  IF (r2<>'')then
	  	 s:=s||';'||r2;
	  end if;
	  IF (r3<>'') then
	  	 s:=s||';'||r3;
	  end if;	 
    ELSE
      s:=s||';'||'Пломбы ЗАО "РОСИНСПЕКТОРАТ": '||'СМ.ДОП.ЛИСТ К НАКЛАДНОЙ';
    end if; 
  end if;
  
  
  s:=s||';'||'Собственник груза: '||lcur.sobstv_naim;
  IF (lcur.k_tar is not null) then
    s:=s||';КИТ '||Trim(lcur.k_tar)||' '||Trim(lcur.k_tar_txt);
  end if;
end if;  
if (lcur.forma=6) or(lcur.forma=7) then
--   Групповая накладная
  s:=s||';'||'ПРИЛАГАЕТСЯ ПАСПОРТ N '||Trim(PaspList(p_nakl));
else  
-- Одиночная накладная
  s:=s||';'||'ПРИЛАГАЕТСЯ ПАСПОРТ N '||Trim(lcur.num_pasp);
end if;  
/*IF (lcur.tipv=33) AND ((lcur.forma=6) or(lcur.forma=2))
--   МНОС на внутренний рынок
--  s=s+';'+ESC_SetCond(IsPrinter)+'Инструкция МНОС о возврате порожних вагонов'+ESC_UnSetCond(IsPrinter)
end if;*/
IF (substr(lcur.kod_npr,1,3)='130') AND (lcur.rodv=5) then
--   Битум в полувагонах
  s:=s||';'||'Погрузка в соотв. с актом N 70 от 08.06.04';
  s:=s||';'||fu_fam(FOR_TEMP.GET_AS_NUM('USER_ID',null,null),0,1);
end if;
/*IF form_lst.sobs_gr4 then
  s=s+';'+SobsTitle()+' '+SobsName()
end if;*/
EXIT;
END LOOP;

RETURN s;
END;
/* список пломб Росинспектората если таковые имеются*/
FUNCTION RosInsList(p_nakl NUMBER) RETURN VARCHAR2
AS
s VARCHAR2(255);
BEGIN
s:=',';
FOR lcur IN (SELECT  
			 REESTR.ID as NUM_OTGR,REESTR.ROSINSPL1,REESTR.ROSINSPL2
			 FROM REESTR, SVED, MONTH, NAKL
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
				AND NAKL.ID=p_nakl)
LOOP
	IF (lcur.rosinspl1 is not null) AND Trim(lcur.rosinspl1)<>'0' then
      s:= s||To_char(lcur.num_otgr)||' - '||Trim(lcur.rosinspl1); 
    end if;
    IF (lcur.rosinspl2 is not null) AND Trim(lcur.rosinspl2)<>'0' then
      s:= s||' '||Trim(lcur.rosinspl2);
    end if;
    IF (lcur.rosinspl1 is not null) AND Trim(lcur.rosinspl1)<>'0' then
      s:= s||',';
    end if; 
END LOOP;
RETURN SUBSTR(s,2,LENGTH(s)-2);
END;

FUNCTION RosInsCnt(p_nakl NUMBER) RETURN NUMBER
AS
cnt NUMBER;
BEGIN
CNT:=0;
FOR lcur IN (SELECT  
			 REESTR.ROSINSPL1,REESTR.ROSINSPL2
			 FROM REESTR, SVED, MONTH, NAKL
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
				AND NAKL.ID=p_nakl)
LOOP
	IF (lcur.rosinspl1 is not null) AND Trim(lcur.rosinspl1)<>'0' then
      CNT:=CNT+1; 
    end if;
    IF (lcur.rosinspl2 is not null) AND Trim(lcur.rosinspl2)<>'0' then
      CNT:=CNT+1;
    end if;
END LOOP;
RETURN cnt;
END;

FUNCTION fu_fam(oper_id number,is_neft number,add_post number) RETURN VARCHAR2
AS
s VARCHAR(255);
p VARCHAR(255);
BEGIN
select trim(name),trim(post) into s,p from app_users where app_users.ID=oper_id;
IF is_neft=1 then
    IF add_post=1 then
      IF NLS_UPPER(s)='БИРЮКОВ Р.Е.' then
        s:='Начальник УП '||s;
      ELSE  
        IF NLS_UPPER(s)='ЗАХВАТКИНА Е.А.' then
          s:='Зам.ген.директора '||s;
        ELSE  
          s:=p||' '||s;
        end if;
      end if;
    end if;
ELSE
  IF add_post=1 then 
    s:=p||' '||s;
  end if;  
end if;
RETURN Trim(s);
END;

FUNCTION get_file_sign(oper_id number,is_neft number,add_post number) RETURN VARCHAR2
AS
s VARCHAR(255);
p VARCHAR(255);
BEGIN
select trim(file_sign) into s from app_users where app_users.ID=oper_id;
RETURN Trim(s);
END;

FUNCTION PaspList(p_nakl NUMBER) RETURN VARCHAR2
AS
s VARCHAR2(255);
BEGIN
FOR lcur IN (SELECT  
			 SVED.PASP_NUM as NUM_PASP
			 FROM REESTR, SVED, MONTH, NAKL
			 WHERE REESTR.NAKL_ID=NAKL.ID 
				AND REESTR.SVED_ID=SVED.ID
				AND SVED.NOM_ZD=MONTH.NOM_ZD
				AND NAKL.ID=p_nakl)
LOOP
    IF INSTR(','||Trim(lcur.num_pasp)||',',s)=0 then
      s:=s||Trim(lcur.num_pasp)||',';
    end if;
END LOOP;	
	return s;
END;
/*Считает вес упаковки всех цистерн входящих в накладную*/
FUNCTION bag_ves(p_nakl NUMBER) return NUMBER
AS
res NUMBER;
BEGIN
	 SELECT SUM(upak_ves) INTO res FROM REESTR WHERE reestr.NAKL_ID=p_nakl;
	 RETURN res;
END;
   
FUNCTION kol_vag(p_nakl NUMBER) RETURN NUMBER
AS
  all_cnt NUMBER;
BEGIN
	SELECT COUNT(NUM_CIST)INTO all_cnt FROM REESTR_IN WHERE reestr_in.NAKL_ID=p_nakl;
	RETURN all_cnt;
END;

FUNCTION SobsInfo_voz(p_nakl NUMBER,info VARCHAR2) return NUMBER
AS
CURSOR vagons_cur(NaklId NUMBER) IS 
	   		 SELECT  
			 	 KLS_VAGOWNER.VAGOWN_TYP_ID as TIP_SOBS,REESTR_IN.VAGOWNER_ID as TIPV
			 FROM REESTR_IN,KLS_VAGOWNER
			 WHERE REESTR_IN.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
			 	   AND REESTR_IN.NAKL_ID=NaklId;
vagons_row vagons_cur%ROWTYPE;
SobsExist NUMBER;
SobsOne NUMBER;
m_tipv NUMBER;
BEGIN
   SobsExist:=0;
   SobsOne:=1;
   OPEN vagons_cur(p_nakl);
/* Необходимо задать начальное значение m_tipv, поэтому первую запись просмотрим вне цикла*/
   FETCH vagons_cur INTO vagons_row;
   if vagons_row.tipv<>3 then
	  	 SobsExist:=1;
   end if;

   m_tipv:=NVL(vagons_row.tipv,0);
   LOOP
   	  FETCH vagons_cur INTO vagons_row;
      EXIT WHEN vagons_cur%NOTFOUND;
	  if NVL(vagons_row.tipv,0)<>3 then
	  	 SobsExist:=1;
	  end if;
	  if NVL(vagons_row.tipv,0)<>m_tipv then 
      	 SobsOne:=0;
      end if;		 	 
   END LOOP;
   CLOSE vagons_cur;
   case 
		when info='SobsExist' then return SobsExist;
		when info='SobsOne' then return SobsOne;
   end case;		   
END;

END;/* PAKAGE BODY FOR_NAKLPRINT*/
/

--
-- FOR_REPORTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_REPORTS AS

-- Определить номер отчета
FUNCTION GetNumRep (pREP_ID NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pIS_CRT NUMBER DEFAULT 0) RETURN NUMBER AS
  vNUM_REP NUMBER;
BEGIN
  BEGIN
    SELECT NUM_REP INTO vNUM_REP
	  FROM REPORTS_NUM_REP
	 WHERE rep_id=pREP_ID
	   AND BEGIN_DATE=pBEGIN_DATE
	   AND END_DATE=pEND_DATE
	   AND IS_CRT=pIS_CRT;
  EXCEPTION
    WHEN OTHERS THEN
	  -- Отчет за данный период не формировался
      SELECT NVL(MAX(NUM_REP),0) INTO vNUM_REP
	    FROM REPORTS_NUM_REP
	   WHERE rep_id=pREP_ID
	     AND BEGIN_DATE>=DECODE(pREP_ID,146,TRUNC(pBEGIN_DATE,'MONTH'),TRUNC(pBEGIN_DATE,'YEAR'))
		 AND END_DATE<=pEND_DATE;
	  vNUM_REP:=vNUM_REP+1;
  END;
  RETURN vNUM_REP;	  	 
END;

-- Сохранить номер отчета
PROCEDURE SetNumRep (pREP_ID NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pIS_CRT NUMBER DEFAULT 0, pNum_Rep NUMBER DEFAULT 0) AS
BEGIN
  UPDATE REPORTS_NUM_REP SET NUM_REP=pNum_Rep
   WHERE REP_ID=pRep_ID AND BEGIN_DATE=pBEGIN_DATE
     AND END_DATE=pEND_DATE AND IS_CRT=pIS_CRT;
  IF SQL%NOTFOUND THEN
    INSERT INTO REPORTS_NUM_REP (REP_ID,BEGIN_DATE,END_DATE,IS_CRT,NUM_REP)
	VALUES (pREP_ID,pBEGIN_DATE,pEND_DATE,pIS_CRT,pNUM_REP);
  END IF;
  COMMIT;		   
END;

-- Заполнить Отчет о реализации
PROCEDURE FILL_REALIZ (pBEGIN_DATE VARCHAR2, pEND_DATE VARCHAR2, pIS_CRT NUMBER) AS
  vBEGIN_DATE DATE;
  vEND_DATE DATE;
BEGIN
  vBEGIN_DATE:=TO_DATE(pBEGIN_DATE,'dd.mm.yyyy');
  vEND_DATE:=TO_DATE(pEND_DATE,'dd.mm.yyyy');
  
  -- Очистить предыдущий
  DELETE FROM REPORTS_REALIZ WHERE BEGIN_DATE=vBEGIN_DATE AND END_DATE=vEND_DATE AND IS_CRT=pIS_CRT;
  
  -- Заполнить новый
  INSERT INTO REPORTS_REALIZ (BEGIN_DATE, END_DATE, IS_CRT, NUM_REP, INN_SRC, SRC, REP_ROW, REP_CRT, 
    KVIT_NUM, KV_DATA, CNTR, INN_CNTR, DOG_NUM, DOG_ID, PLT_NUM, PLT_DATA, PROT_NUM, TOVAR, TOVAR_ID, 
    PACK, PACK_ID, TOV_SRC, TOV_CLS, WEGHT, CLR_PRC, NDS, AKCIZ, FULL_PRC, CLR_CST, FULL_CST, INN_RES, 
    RES, STANTION, REG_ID, REG, USERCREATE, DATECREATE, BILL_ID, INCO1_ID, INCO1, INCO2_ID, INCO2)
  SELECT BEGIN_DATE, END_DATE, IS_CRT, NUM_REP, INN_SRC, SRC, rownum, REP_CRT, 
    KVIT_NUM, KV_DATA, CNTR, INN_CNTR, DOG_NUM, DOG_ID, PLT_NUM, PLT_DATA, PROT_NUM, TOVAR, TOVAR_ID, 
    PACK, PACK_ID, TOV_SRC, TOV_CLS, WEGHT, CLR_PRC, NDS, AKCIZ, FULL_PRC, CLR_CST, FULL_CST, INN_RES, 
    RES, STANTION, REG_ID, REG, USERCREATE, DATECREATE, BILL_ID, INCO1_ID, INCO1, INCO2_ID, INCO2
  FROM ( 	 
  SELECT 
    vBEGIN_DATE as BEGIN_DATE,
	vEND_DATE as END_DATE,
	pIS_CRT as IS_CRT,  
    0 as NUM_REP,
    MAX(TO_NUMBER(NVL(POST.INN,'0'))) as INN_SRC,
    MAX(POST.SF_NAME) as SRC,
    0 as REP_ROW,
    MAX(NVL((SELECT NUM_REP FROM REPORTS_REALIZ 
            WHERE END_DATE<vBEGIN_DATE
	          AND IS_CRT=0
		      AND BILL_ID=a.BILL_ID
		      AND NUM_KVIT=NVL(a.NUM_KVIT,0)
		      AND TOV_SRC=(a.OWNERSHIP_ID-1)),0)) as REP_CRT,
    NVL(DECODE(b.PROD_ID_NPR,'10080',a.NUM_AKT,a.NUM_KVIT),0) as KVIT_NUM,
    b.DATE_KVIT as KV_DATA,
    MAX(PLAT.SF_NAME) as CNTR,
    MAX(TO_NUMBER(NVL(PLAT.INN,'0'))) as INN_CNTR,
    MAX(d.DOG_NUMBER) as DOG_NUM,
    MAX(d.ID) as DOG_ID,
    b.NOM_SF as PLT_NUM,
    MAX(b.DATE_VYP_SF) as PLT_DATA,
    MAX(NVL(b.PROTO_NUM,a.PROTO_NUM)) as PROT_NUM,
    KLS_PROD.SF_NAME as TOVAR,
    MAX(TO_NUMBER(KLS_PROD.ID_NPR)) as TOVAR_ID,
    '' as pack,
    0 as PACK_ID,
    MAX(a.OWNERSHIP_ID-1) as TOV_SRC,
    0 as TOV_CLS,
    SUM(a.VES) as WEGHT,
    MAX(NVL(a.CENA,0)) as CLR_PRC,
    MAX(ROUND(NVL(a.CENA,0)*FOR_BILLS.GetNDSValue(b.date_kvit)/100,2)) as NDS,
	MAX(CASE
	   WHEN b.NO_AKCIZ=0 OR (b.PROD_ID_NPR='10080' AND a.NO_AKCIZ=0) THEN 0
	   ELSE (NVL((SELECT VALUE FROM KLS_PROD_AKCIZ WHERE b.DATE_KVIT BETWEEN FROM_DATE AND TO_DATE AND PROD_GROUPS_ID=grp.PROD_GROUPS_ID),0))
	 END) as AKCIZ,
    MAX(NVL(a.CENA,0)+ROUND(NVL(a.CENA,0)*FOR_BILLS.GetNDSValue(b.date_kvit)/100,2)) as FULL_PRC,
    SUM(NVL(A.SUM_PROD,0)) AS CLR_CST,
    SUM(NVL(A.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0)) AS FULL_CST,
    MAX(TO_NUMBER(NVL(poluch.INN,0))) as INN_RES,
    MAX(poluch.SF_NAME) as RES,
    MAX(KLS_STAN.STAN_NAME) as STANTION,
    MAX(NVL(KLS_REGION.ID,0)) as REG_ID,
    MAX(kls_region.REGION_NAME) as REG,
	SUBSTR(FOR_INIT.GetCurrUser,1,30) as USERCREATE,
	SYSDATE as DATECREATE,
    a.BILL_ID,
	MAX(NVL(stan_per.ID,2250)) as INCO1_ID, -- по умолчанию Ветласян
	MAX((CASE WHEN stan_per.stan_kod>=10000 THEN 'СТАНЦИЯ ' ELSE '' END) || stan_per.STAN_NAME) as INCO1,
	MAX(NVL(inco.ID,1)) as INCO2_ID, -- по умолчанию FCA
	MAX(inco.NAME) as INCO2 
  FROM BILLS b,V_KVIT_DATE_VIR_ALL A, KLS_DOG d, KLS_PREDPR plat, KLS_PREDPR post, KLS_PROD, MONTH m, KLS_PREDPR poluch,KLS_STAN,kls_region,
       (SELECT PROD_ID_NPR,PROD_GROUPS_ID FROM KLS_PROD_GROUPS_DESC WHERE PROD_TYPE_GRP_ID=6) grp,
	   KLS_STAN stan_per, KLS_INCOTERM inco 
  WHERE B.DATE_MOS BETWEEN vBEGIN_DATE AND vEND_DATE
    AND B.DATE_KVIT <= (CASE WHEN pIS_CRT=1 THEN vBEGIN_DATE-1 ELSE vEND_DATE END)
    AND B.DATE_KVIT >= (CASE WHEN pIS_CRT=1 THEN TO_DATE('01.01.2005','dd.mm.yyyy') ELSE vBEGIN_DATE END)
    AND b.nom_dok=a.bill_id
    AND b.OWNER_ID=post.ID
    AND b.DOG_ID=d.ID
    AND d.PREDPR_ID=plat.ID
    AND a.PROD_ID_NPR=KLS_PROD.ID_NPR
    AND KLS_PROD.ID_NPR=grp.PROD_ID_NPR(+)
    AND a.nom_zd=m.nom_zd
    AND m.poluch_id=poluch.ID(+)
    AND m.STAN_ID=kls_stan.ID
    AND kls_stan.REGION_ID=kls_region.id(+)
	AND m.STAN_PER_ID=stan_per.ID(+)
	AND m.INCOTERM_ID=inco.ID(+)
  GROUP BY
    (a.OWNERSHIP_ID-1),
	a.BILL_ID,
    KLS_PROD.SF_NAME,
	b.NOM_SF,
	b.DATE_KVIT,
    NVL(DECODE(b.PROD_ID_NPR,'10080',a.NUM_AKT,a.NUM_KVIT),0)
  HAVING SUM(NVL(A.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0))<>0	
  ORDER BY TOV_SRC,PLT_NUM,BILL_ID,KV_DATA,KVIT_NUM,TOVAR_ID	
  );
   				   
  
  COMMIT;
END;    


END; 
/

--
-- RENEW_BILL_POS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Bill_Pos (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='', no_commit INTEGER DEFAULT 0) IS

CURSOR temp IS
 SELECT old_nom,nom_dok FROM load_buffer.TO_SS ORDER BY 1,2;
CURSOR temp2 IS
 SELECT nom_sf,nom_dok,k_dokum FROM load_buffer.sf_pr ORDER BY 1,2,3;
CURSOR temp3 IS
 SELECT DISTINCT A.nom_dok,B.prod_id_npr 
 FROM v_kvit_all B,load_buffer.out_plat A
 WHERE A.nom_dok=B.bill_id 
   AND A.kod_nfp='10080'
 ORDER BY 1,2;

 dest temp%ROWTYPE;
 dest2 temp2%ROWTYPE;
 dest3 temp3%ROWTYPE;
 num_pos NUMBER(1);
 IsFull NUMBER(1);
 last_old_nom NUMBER(7);
 last_nom_sf NUMBER(7);
 last_nom NUMBER;
  v_dat DATE;
 
BEGIN
  return;
  IF param1 || ' ' = ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

    -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

  UPDATE load_buffer.TO_SS a
      SET old_nom=(SELECT old_nom FROM load_buffer.TO_SS b WHERE a.old_nom=b.nom_dok)
      WHERE a.old_nom IN (SELECT nom_dok FROM load_buffer.TO_SS);
--  COMMIT;

  --- Нумеруем позиции счетов по продуктц в TO_SS
  OPEN temp;
  last_old_nom:=0;
  LOOP
    FETCH temp INTO dest;
    EXIT WHEN temp%NOTFOUND;
	IF last_old_nom<>dest.old_nom THEN
      num_pos:=2;
	ELSE
	  num_pos:=num_pos+1;
	END IF;
	UPDATE load_buffer.TO_SS SET BILL_POS=num_pos WHERE nom_dok=dest.nom_dok;
	last_old_nom:=dest.old_nom;
  END LOOP;
  CLOSE temp;
--  COMMIT;

  --- Нумеруем позиции счетов по продуктц в SF_PR
  OPEN temp2;
  last_nom_sf:=0;
  LOOP
    FETCH temp2 INTO dest2;
    EXIT WHEN temp2%NOTFOUND;
	IF last_nom_sf<>dest2.nom_sf THEN
      num_pos:=0;
	ELSE
	  num_pos:=num_pos+1;
	END IF;
	UPDATE load_buffer.sf_pr SET BILL_POS=num_pos+30 WHERE nom_dok=dest2.nom_dok AND k_dokum=dest2.k_dokum;
	last_nom_sf:=dest2.nom_sf;
  END LOOP;
  CLOSE temp2;
--  COMMIT;

  --- Нумеруем позиции в счетах по продаже ЛУКОЙЛу
  OPEN temp3;
  last_nom:=0;
  LOOP
    FETCH temp3 INTO dest3;
    EXIT WHEN temp3%NOTFOUND;
	IF last_nom<>dest3.nom_dok THEN
      num_pos:=1;
	ELSE
	  num_pos:=num_pos+1;
	END IF;
	UPDATE KVIT SET BILL_POS_ID=num_pos WHERE bill_id=dest3.nom_dok and prod_id_npr=dest3.prod_id_npr;
	UPDATE DOP_KVIT SET BILL_POS_ID=num_pos WHERE bill_id=dest3.nom_dok and prod_id_npr=dest3.prod_id_npr;
	last_nom:=dest3.nom_dok;
  END LOOP;
  CLOSE temp3;
--  COMMIT;

  --- Переводим ссылки из TO_SS -> OUT_PLAT
  UPDATE load_buffer.TO_SS a SET old_nom=
    (SELECT old_nom FROM load_buffer.TO_SS b WHERE b.nom_dok=a.old_nom)
	WHERE a.old_nom IN (SELECT nom_dok FROM load_buffer.TO_SS c);
--  COMMIT;



  UPDATE BILL_POS
    SET (IS_LUK, IS_AGENT, PROD_ID_NPR, VES, CENA_BN,
         CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,
         SUMMA_GSM25, SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,
		 SUMMA_GSM25_POKUP, OWNERSHIP_ID, DATE_REALIZ,ANALIT_ID,NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ) =
	(SELECT DECODE(SIGN(A.bill_pos_id-10),-1,
	     -- Если позиция - продукт
		 DECODE(NVL(BILLS.OLD_NOM_DOK,0),0,1,BILLS.KORR_PROD),
		 -- Если позиция - услуги
		 (CASE
		    WHEN BILLS.DATE_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN
  		       DECODE(BILLS.IS_AGENT,1,1,3,1,2,a.IS_LUK_SNP,0)
			ELSE
			   a.IS_LUK_SNP
		  END)),
	     BILLS.IS_AGENT, a.PROD_ID_NPR, a.VES, a.CENA_BN,
         a.CENA, a.SUMMA_BN, a.SUMMA_NDS20, a.SUMMA_AKCIZ,
         a.SUMMA_GSM25, a.SUMMA, a.CENA_POKUP, a.SUMMA_BN_POKUP,a.SUMMA_NDS20_POKUP,
		 a.SUMMA_GSM25_POKUP, a.OWNERSHIP_ID, a.DATE_REALIZ,A.buhanal,a.NACENKA,a.NUM_AKT,a.PROTO_NUM,a.PROTO_DATE,a.NO_AKCIZ
		 FROM load_buffer.out_plat_pos A, BILLS 
		 WHERE A.bills_nom_dok=BILL_POS.nom_dok 
		   AND A.bills_nom_dok=BILLS.nom_dok
		   AND a.bill_pos_id=BILL_POS.BILL_POS_ID)
    WHERE EXISTS (SELECT NULL FROM load_buffer.out_plat_pos B
	  WHERE B.bills_nom_dok=BILL_POS.nom_dok AND b.bill_pos_id=BILL_POS.BILL_POS_ID)
	    AND IS_POKUP=0
	    AND BILL_POS.DATE_REALIZ BETWEEN date_beg AND date_end
		AND BILL_POS.DATE_REALIZ>v_dat
	    AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE);
		
  UPDATE BILL_POS
    SET (IS_LUK,IS_AGENT,PROD_ID_NPR, VES, CENA_BN,
         CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,
         SUMMA_GSM25, SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,
		 SUMMA_GSM25_POKUP, OWNERSHIP_ID, DATE_REALIZ) =
	(SELECT 1,NVL(KLS_VIDDOG.IS_AGENT,3),a.PROD_ID_NPR, a.VES, a.CENA_BN,
         a.CENA, a.SUMMA_BN, a.SUMMA_NDS20, a.SUMMA_AKCIZ,
         a.SUMMA_GSM25, a.SUMMA, a.CENA_POKUP, a.SUMMA_BN_POKUP,a.SUMMA_NDS20_POKUP,
		 a.SUMMA_GSM25_POKUP, a.OWNERSHIP_ID, a.DATE_REALIZ
		 FROM load_buffer.sf_pr_pos A, KLS_DOG, KLS_DOG LUK_DOG, KLS_VIDDOG 
		 WHERE A.bills_nom_dok=BILL_POS.nom_dok 
		   AND a.bill_pos_id=BILL_POS.BILL_POS_ID
		   AND A.NOM_DOG = KLS_DOG.SHORT_NUMBER(+) 
		   AND KLS_DOG.MAINDOG_ID=LUK_DOG.ID(+)
		   AND LUK_DOG.VIDDOG_ID = KLS_VIDDOG.ID(+) )
    WHERE EXISTS (SELECT * FROM load_buffer.sf_pr_pos B
	  WHERE B.bills_nom_dok=BILL_POS.nom_dok AND b.bill_pos_id=BILL_POS.BILL_POS_ID)
	    AND IS_POKUP=0
	    AND BILL_POS.DATE_REALIZ BETWEEN date_beg AND date_end
		AND BILL_POS.DATE_REALIZ>v_dat
   	    AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE);

-- Добавляем позиции счетов  
  INSERT INTO BILL_POS
    (IS_LUK,IS_AGENT,NOM_DOK,BILL_POS_ID, PROD_ID_NPR, VES, CENA_BN,
     CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,SUMMA_GSM25,
	 SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP, SUMMA_GSM25_POKUP,
	 OWNERSHIP_ID, DATE_REALIZ,ANALIT_ID,NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ)
	(SELECT /*+ ORDERED USE_NL(A,BILLS) */ DECODE(SIGN(A.bill_pos_id-10),-1,
	     -- Если позиция - продукт
		 DECODE(NVL(BILLS.OLD_NOM_DOK,0),0,1,BILLS.KORR_PROD),
		 -- Если позиция - услуги
		 (CASE
		    WHEN BILLS.DATE_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN
  		       DECODE(BILLS.IS_AGENT,1,1,3,1,2,a.IS_LUK_SNP,0)
			ELSE
			   a.IS_LUK_SNP
		  END)),
	 BILLS.IS_AGENT,a.BILLS_NOM_DOK,a.BILL_POS_ID, a.PROD_ID_NPR, a.VES, a.CENA_BN,
     a.CENA, a.SUMMA_BN, a.SUMMA_NDS20, a.SUMMA_AKCIZ,a.SUMMA_GSM25,
	 a.SUMMA, a.CENA_POKUP, a.SUMMA_BN_POKUP,a.SUMMA_NDS20_POKUP, a.SUMMA_GSM25_POKUP,
	 a.OWNERSHIP_ID, a.DATE_REALIZ,a.buhanal,a.NACENKA,a.NUM_AKT,a.PROTO_NUM,a.PROTO_DATE,a.NO_AKCIZ 
	 FROM load_buffer.out_plat_pos A,BILLS
     WHERE NOT EXISTS (SELECT * FROM BILL_POS C WHERE A.bills_nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_ID)
	   AND A.BILLS_NOM_DOK=BILLS.NOM_DOK
	   AND A.BILLS_NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE));

--  COMMIT;

  INSERT INTO BILL_POS
    (IS_LUK,IS_AGENT,NOM_DOK,BILL_POS_ID, PROD_ID_NPR, VES, CENA_BN,
     CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,SUMMA_GSM25,
	 SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP, SUMMA_GSM25_POKUP,
	 OWNERSHIP_ID, DATE_REALIZ)
	(SELECT 1,NVL(KLS_VIDDOG.IS_AGENT,3),a.BILLS_NOM_DOK,a.BILL_POS_ID, a.PROD_ID_NPR, a.VES, a.CENA_BN,
     a.CENA, a.SUMMA_BN, a.SUMMA_NDS20, a.SUMMA_AKCIZ,a.SUMMA_GSM25,
	 a.SUMMA, a.CENA_POKUP, a.SUMMA_BN_POKUP,a.SUMMA_NDS20_POKUP, a.SUMMA_GSM25_POKUP,
	 a.OWNERSHIP_ID, a.DATE_REALIZ FROM load_buffer.sf_pr_pos A, KLS_DOG, KLS_DOG LUK_DOG, KLS_VIDDOG
  WHERE NOT EXISTS (SELECT * FROM BILL_POS C WHERE A.bills_nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_ID)
	   AND A.NOM_DOG = KLS_DOG.SHORT_NUMBER(+) 
	   AND KLS_DOG.MAINDOG_ID=LUK_DOG.ID(+)
	   AND LUK_DOG.VIDDOG_ID = KLS_VIDDOG.ID(+) 
	   AND A.BILLS_NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE) );
 
  IF IsFull=1 THEN
    DELETE FROM BILL_POS WHERE IS_POKUP=0 AND NOT EXISTS
      (SELECT nom_dok FROM load_buffer.out_plat a WHERE a.nom_dok=BILL_POS.nom_dok
      UNION ALL
      SELECT nom_dok FROM load_buffer.sf_pr_bills b WHERE b.nom_dok=BILL_POS.nom_dok)
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE)
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS WHERE
          (date_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (prod_id_npr>='10100' or prod_id_npr='10080')));
    DELETE FROM BILL_POS WHERE IS_POKUP=0 AND NOT EXISTS
      (SELECT nom_dok FROM load_buffer.out_plat_pos a WHERE a.BILLS_NOM_DOK=BILL_POS.nom_dok AND a.bill_pos_id=BILL_POS.BILL_POS_ID
      UNION ALL
      SELECT nom_dok FROM load_buffer.sf_pr_pos b WHERE b.BILLS_NOM_DOK=BILL_POS.nom_dok AND b.bill_pos_id=BILL_POS.BILL_POS_ID)
 	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE)
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS WHERE
          (date_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (prod_id_npr>='10100' or prod_id_npr='10080')));
  ELSE
    DELETE FROM BILL_POS WHERE IS_POKUP=0 AND NOT EXISTS
      (SELECT nom_dok FROM load_buffer.out_plat a WHERE a.nom_dok=BILL_POS.nom_dok
	  UNION ALL
      SELECT nom_dok FROM load_buffer.sf_pr_bills b WHERE b.nom_dok=BILL_POS.nom_dok)
	  AND BILL_POS.DATE_REALIZ BETWEEN date_beg AND date_end
      AND BILL_POS.DATE_REALIZ>v_dat
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE)
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS WHERE
          (date_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (prod_id_npr>='10100' or prod_id_npr='10080')));
    DELETE  FROM BILL_POS WHERE IS_POKUP=0 AND NOT EXISTS
      (SELECT nom_dok FROM load_buffer.out_plat_pos a WHERE a.BILLS_NOM_DOK=BILL_POS.nom_dok AND a.bill_pos_id=BILL_POS.BILL_POS_ID
	  UNION ALL
      SELECT nom_dok FROM load_buffer.sf_pr_pos b WHERE b.BILLS_NOM_DOK=BILL_POS.nom_dok AND b.bill_pos_id=BILL_POS.BILL_POS_ID)
	  AND BILL_POS.DATE_REALIZ BETWEEN date_beg AND date_end
	  AND BILL_POS.DATE_REALIZ>v_dat
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE)
	  AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS WHERE
          (date_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (prod_id_npr>='10100' or prod_id_npr='10080')));
  END IF;

  IF no_commit=0 THEN
    COMMIT; 
  END IF;	

END Renew_Bill_Pos; 
/

--
-- RENEW_BILL_POS_SNP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_BILL_POS_SNP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
 IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' = ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

--- Обновление позиций счетов
  UPDATE bill_pos_snp
    set (IS_AGENT, PROD_ID_NPR, VES, CENA_BN,
         CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,
         SUMMA_GSM25, SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,
		 SUMMA_GSM25_POKUP, OWNERSHIP_ID, DATE_REALIZ,ID_OLD,NPR_PRICES_ID) =
	(SELECT IS_AGENT, PROD_ID_NPR, VES, CENA_BN,
            CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,
            SUMMA_GSM25, SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,
		    SUMMA_GSM25_POKUP, OWNERSHIP_ID, DATE_REALIZ,ID_OLD,0
		 FROM master.bill_pos A 
		 WHERE A.nom_dok=bill_pos_snp.nom_dok 
		   AND a.bill_pos_id=bill_pos_snp.BILL_POS_SNP_ID)
    where exists (SELECT nom_dok FROM master.bill_pos B
	  WHERE B.nom_dok=bill_pos_snp.nom_dok AND b.bill_pos_id=bill_pos_snp.BILL_POS_SNP_ID);
--  COMMIT;

-- Добавляем позиции счетов  
  INSERT INTO bill_pos_snp
    (NOM_DOK,BILL_POS_SNP_ID, IS_AGENT, PROD_ID_NPR, KVIT_VES, VES, CENA_BN,
         CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,
         SUMMA_GSM25, SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,
		 SUMMA_GSM25_POKUP, OWNERSHIP_ID, DATE_REALIZ,ID_OLD,NPR_PRICES_ID)
	(SELECT NOM_DOK,BILL_POS_ID, IS_AGENT, PROD_ID_NPR, 0, VES, CENA_BN,
         CENA, SUMMA_BN, SUMMA_NDS20, SUMMA_AKCIZ,
         SUMMA_GSM25, SUMMA, CENA_POKUP, SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,
		 SUMMA_GSM25_POKUP, OWNERSHIP_ID, DATE_REALIZ,ID_OLD,0
	 FROM master.bill_pos A
     WHERE not exists (SELECT nom_dok FROM bill_pos_snp C WHERE A.nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_SNP_ID) );

  -- Обновление позиций - отгрузка
  -- Проставление сумм и цен 
  FOR_BILLS.FIELDS$BILL_POS_SNP(DATE_BEG,DATE_END,param1,param2,param3);  

  -- Обновление сумм счетов 
  UPDATE bills_snp
    set (SUMMA_DOK,NDS_DOK,AKCIZ_DOK,GSM_DOK) =
	(SELECT SUM(A.SUMMA),SUM(SUMMA_NDS20),SUM(SUMMA_AKCIZ),SUM(A.SUMMA_GSM25)
       FROM master.bill_pos_snp A 
	  WHERE A.nom_dok=bills_snp.nom_dok
	  GROUP BY A.nom_dok)
    where exists (SELECT nom_dok FROM master.bill_pos_snp B WHERE B.nom_dok=bills_snp.nom_dok);
  COMMIT;
  
  -- Удаление позиций  
  IF IsFull=1 THEN
    DELETE FROM bill_pos_snp WHERE not exists
      (SELECT nom_dok FROM master.bills a WHERE a.nom_dok=bill_pos_snp.nom_dok);
	COMMIT;
    DELETE FROM bill_pos_snp WHERE not exists
      (SELECT nom_dok FROM master.bill_pos a WHERE a.NOM_DOK=bill_pos_snp.nom_dok AND a.bill_pos_id=bill_pos_snp.BILL_POS_SNP_ID);
	COMMIT;
  ELSE
    DELETE FROM bill_pos_snp WHERE not exists
      (SELECT nom_dok FROM master.bills a WHERE a.nom_dok=bill_pos_snp.nom_dok)
	  AND bill_pos_snp.DATE_REALIZ BETWEEN date_beg AND date_end;
	COMMIT;
    DELETE FROM bill_pos_snp WHERE not exists
      (SELECT nom_dok FROM master.bill_pos a WHERE a.NOM_DOK=bill_pos_snp.nom_dok AND a.bill_pos_id=bill_pos_snp.BILL_POS_SNP_ID)
	  AND bill_pos_snp.DATE_REALIZ BETWEEN date_beg AND date_end;
	COMMIT;
  END IF;

  COMMIT;

END RENEW_BILL_POS_SNP;

/

--
-- RENEW_BILLS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Bills (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
  IsFull NUMBER(1);
  v_dat DATE;
BEGIN
  return;

  IF param1 || ' ' = ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
	DELETE FROM load_buffer.to_ss_tmp;
	INSERT INTO load_buffer.to_ss_tmp
  	  SELECT * FROM load_buffer.TO_SS WHERE DATA_BUXG BETWEEN date_beg AND date_end;  
  END IF;

  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='BILLS';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

  
  UPDATE load_buffer.out_plat  SET nom_zd='?' WHERE nom_zd IS NULL;
  DELETE FROM load_buffer.out_plat 
   WHERE (data_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (kod_nfp>='10100' or kod_nfp='10080'))  
	  OR nom_dok in (6142554,6142555,6142556);
  COMMIT;

-- Обновление № счетов
  UPDATE KTU_2_NPO_SF
    SET (NOM_SF,NPO_SF) =
	(SELECT a.NOM_SF,'02003К/'||TO_CHAR((a.NOM_SF-6009000)*2-1) FROM load_buffer.out_plat A, load_buffer.dog
	  WHERE A.NOM_DOG=dog.NUM_DOG AND dog.NUM_DOG2='0210218' AND A.nom_dok=KTU_2_NPO_SF.nom_dok AND A.DATA_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy') AND A.DATA_KVIT<=TO_DATE('10.04.2002','dd.mm.yyyy'))
    WHERE EXISTS (SELECT nom_dok FROM load_buffer.out_plat B, load_buffer.dog
	               WHERE B.NOM_DOG=dog.NUM_DOG AND dog.NUM_DOG2='0210218' AND B.nom_dok=KTU_2_NPO_SF.nom_dok AND B.DATA_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy') AND B.DATA_KVIT<=TO_DATE('10.04.2002','dd.mm.yyyy'));

  INSERT INTO KTU_2_NPO_SF
    (NOM_DOK,NOM_SF,NPO_SF)
	(SELECT a.nom_dok,a.NOM_SF,'02003К/'||TO_CHAR((a.NOM_SF-6009000)*2-1) FROM load_buffer.out_plat A, load_buffer.dog
  WHERE A.NOM_DOG=dog.NUM_DOG AND dog.NUM_DOG2='0210218' AND A.DATA_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy') AND A.DATA_KVIT<=TO_DATE('10.04.2002','dd.mm.yyyy') AND NOT EXISTS (SELECT nom_dok FROM KTU_2_NPO_SF C WHERE A.nom_dok=C.nom_dok));
  COMMIT;

-- Обновление счетов 
  UPDATE /*+ RULE */ BILLS 
    SET (IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,
         NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,PROD_SUM,
         PROD_NDS,PROD_AKCIZ,PROD_GSM,DATE_MOS,OLD_NOM_SF,NUM_5_DAY,KORR_5_DAY,
		 LUK_DOG_ID,LUK_USL_NUMBER,LUK_KOL_DN,LUK_SUMMA_DOK,LUK_NDS_DOK,
		 SNP_DOG_ID,SNP_USL_NUMBER,SNP_KOL_DN,NAZN_OTG_ID,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT) =
	(SELECT 
	   IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
       NDS_DOK,AKCIZ_DOK,GSM_DOK,PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,
       NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,PROD_SUM,
	   PROD_NDS,PROD_AKCIZ,PROD_GSM,DATE_MOS,OLD_NOM_SF,NUM_5_DAY,KORR_5_DAY,
       LUK_DOG_ID,LUK_USL_NUMBER,LUK_KOL_DN,LUK_SUMMA_DOK,LUK_NDS_DOK,
  	   SNP_DOG_ID,SNP_USL_NUMBER,SNP_KOL_DN,KOD_OTGR,PROTO_NUM,PROTO_DATE,NO_AKCIZ,
	   GET_DATE_OTSRPLAT(A.DATE_KVIT,A.KOL_DN,/*(CASE WHEN A.PROD_ID_NPR<'10100' AND A.PROD_ID_NPR not IN ('10080','10093','10094') THEN 1 ELSE*/ 0/* END)*/)
     FROM v_renew_bills A 
    WHERE A.nom_dok=BILLS.nom_dok) 
   WHERE EXISTS (SELECT nom_dok FROM load_buffer.out_plat B WHERE B.nom_dok=BILLS.nom_dok)
     AND BILLS.DATE_BUXG BETWEEN date_beg AND date_end
	 AND BILLS.DATE_KVIT>v_dat
	 AND BILLS.NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE);

  UPDATE /*+ RULE */ BILLS
    SET (IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,KOL_DN,FIO_ISPOL,PRIM,OLD_NOM_DOK,
         NOM_ZD,USL_NUMBER,OWNER_ID,DOG_ID,PROD_ID_NPR,PROD_SUM,
         PROD_NDS,PROD_AKCIZ,PROD_GSM,DATE_MOS) =
	(SELECT NVL(KLS_VIDDOG.IS_AGENT,3),a.NOM_SF,'',a.DATA_DOK,a.DATA_BUXG,a.data_buxg,a.SUMMA_DOK,
      a.sum_nds,a.SUM_AKCIZ,a.sum_ndf,0,a.ISPOLN,'',a.OLD_NOM,
      'прочая',1,0,NVL(KLS_DOG.ID,0),'',a.SUMMA_DOK,
      a.sum_nds,a.SUM_AKCIZ,a.sum_ndf,a.DATA_BUXG
  FROM load_buffer.sf_pr_bills A,KLS_DOG, KLS_DOG LUK_DOG, KLS_VIDDOG
  WHERE A.nom_dok=BILLS.nom_dok AND A.NOM_DOG=KLS_DOG.SHORT_NUMBER(+)
  	    AND KLS_DOG.MAINDOG_ID=LUK_DOG.ID(+)
		AND LUK_DOG.VIDDOG_ID = KLS_VIDDOG.ID(+) )
    WHERE EXISTS (SELECT nom_dok FROM load_buffer.sf_pr_bills B WHERE B.nom_dok=BILLS.nom_dok)
     AND BILLS.DATE_BUXG BETWEEN date_beg AND date_end
	 AND BILLS.DATE_KVIT>v_dat
	 AND BILLS.NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE);

-- Добавление оригинальных счетов   
  INSERT INTO BILLS
    (NOM_DOK,IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,
         NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,PROD_SUM,
         PROD_NDS,PROD_AKCIZ,PROD_GSM,DATE_MOS,OLD_NOM_SF,NUM_5_DAY,KORR_5_DAY,
		 LUK_DOG_ID,LUK_USL_NUMBER,LUK_KOL_DN,LUK_SUMMA_DOK,LUK_NDS_DOK,
		 SNP_DOG_ID,SNP_USL_NUMBER,SNP_KOL_DN,NAZN_OTG_ID,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
	(SELECT NOM_DOK,IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,
         NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,PROD_SUM,
         PROD_NDS,PROD_AKCIZ,PROD_GSM,DATE_MOS,OLD_NOM_SF,NUM_5_DAY,KORR_5_DAY,
		 LUK_DOG_ID,LUK_USL_NUMBER,LUK_KOL_DN,LUK_SUMMA_DOK,LUK_NDS_DOK,
		 SNP_DOG_ID,SNP_USL_NUMBER,SNP_KOL_DN,KOD_OTGR,PROTO_NUM,PROTO_DATE,NO_AKCIZ,
		 GET_DATE_OTSRPLAT(A.DATE_KVIT,A.KOL_DN,/*(CASE WHEN A.PROD_ID_NPR<'10100' AND A.PROD_ID_NPR not IN ('10080','10093','10094') THEN 1 ELSE*/ 0/* END)*/) 
     FROM v_renew_bills A
     WHERE NOT EXISTS (SELECT nom_dok FROM BILLS C WHERE A.nom_dok=C.nom_dok)
	   AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE));

  INSERT INTO BILLS
    (NOM_DOK,IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,KOL_DN,FIO_ISPOL,PRIM,OLD_NOM_DOK,
         NOM_ZD,USL_NUMBER,OWNER_ID,DOG_ID,PROD_ID_NPR,PROD_SUM,
         PROD_NDS,PROD_AKCIZ,PROD_GSM,DATE_MOS)
	(SELECT a.nom_dok,NVL(KLS_VIDDOG.IS_AGENT,3),a.NOM_SF,'',a.DATA_DOK,a.DATA_BUXG,a.data_buxg,a.SUMMA_DOK,
      a.sum_nds,a.SUM_AKCIZ,a.sum_ndf,0,a.ISPOLN,'',a.OLD_NOM,
      'прочая',1,0,NVL(KLS_DOG.ID,0),'',a.SUMMA_DOK,
      a.sum_nds,a.SUM_AKCIZ,a.sum_ndf,a.DATA_BUXG 
	  FROM load_buffer.sf_pr_bills A, KLS_DOG, KLS_DOG LUK_DOG, KLS_VIDDOG
     WHERE A.NOM_DOG=KLS_DOG.SHORT_NUMBER(+) 
	   AND KLS_DOG.MAINDOG_ID=LUK_DOG.ID(+)
	   AND LUK_DOG.VIDDOG_ID = KLS_VIDDOG.ID(+) 
	   AND NOT EXISTS (SELECT nom_dok FROM BILLS C WHERE A.nom_dok=C.nom_dok)
	   AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE));
--  COMMIT;

-- Обновление № счетов
  UPDATE /*+ RULE */ BILLS
    SET (NPO_SF) =
	(SELECT '02003К/'||TO_CHAR((a.NOM_SF-6009000)*2-1) FROM load_buffer.out_plat A, load_buffer.dog
	  WHERE A.NOM_DOG=dog.NUM_DOG AND dog.NUM_DOG2='0210218' AND A.nom_dok=BILLS.nom_dok AND A.DATA_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy') AND A.DATA_KVIT<=TO_DATE('10.04.2002','dd.mm.yyyy'))
    WHERE EXISTS (SELECT nom_dok FROM load_buffer.out_plat B, load_buffer.dog
	               WHERE B.NOM_DOG=dog.NUM_DOG AND dog.NUM_DOG2='0210218' AND B.nom_dok=BILLS.nom_dok AND B.DATA_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy') AND B.DATA_KVIT<=TO_DATE('10.04.2002','dd.mm.yyyy'))
     AND BILLS.DATE_BUXG BETWEEN date_beg AND date_end
	 AND BILLS.DATE_KVIT>v_dat
     AND BILLS.NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE);
  
-- Обновление признака корректировки продукта
  UPDATE /*+ RULE */ BILLS SET KORR_PROD=0 WHERE (OLD_NOM_DOK IS NULL OR OLD_NOM_DOK=0)
     AND BILLS.DATE_BUXG BETWEEN date_beg AND date_end
	 AND BILLS.DATE_KVIT>v_dat;
  
  FOR lcur IN (SELECT old_nom_dok, DOG_ID, SUM(A.PROD_SUM) as PROD_SUM 
               FROM BILLS A 
			   WHERE A.old_nom_dok IS NOT NULL AND A.OLD_NOM_DOK<>0
			     AND A.DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy')
                 AND A.DATE_BUXG BETWEEN date_beg AND date_end
	             AND A.DATE_KVIT>v_dat
			   GROUP BY A.OLD_NOM_DOK, DOG_ID) LOOP
    UPDATE BILLS SET korr_prod=DECODE(lcur.PROD_SUM,0,0,1) WHERE BILLS.old_nom_dok=lcur.old_nom_dok;
  END LOOP;

-- Обновление позиций счетов  
  Renew_Bill_Pos(DATE_BEG,DATE_END,PARAM1,PARAM2,PARAM3,1);

-- Обновление сумм LUK_*
  UPDATE /*+ RULE */ BILLS A SET (LUK_SUMMA_DOK, LUK_NDS_DOK)=
     (SELECT SUM(SUMMA), SUM(SUMMA_NDS20)
	    FROM BILL_POS B
       WHERE IS_LUK=1 AND B.NOM_DOK=A.NOM_DOK)
  WHERE EXISTS	   
     (SELECT NULL
	    FROM BILL_POS B
       WHERE IS_LUK=1 AND B.NOM_DOK=A.NOM_DOK)
	AND EXISTS   
     (SELECT NULL 
        FROM load_buffer.out_plat B WHERE B.nom_dok=A.nom_dok)
     AND a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat
	 AND NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE);
  
-- Удаление счетов  
  IF IsFull=1 THEN
    DELETE /*+ RULE */ FROM BILLS WHERE NOT EXISTS
      (SELECT nom_dok FROM load_buffer.out_plat a WHERE a.nom_dok=BILLS.nom_dok
	  UNION ALL
      SELECT nom_dok FROM load_buffer.sf_pr_bills b WHERE b.nom_dok=BILLS.nom_dok)
	 AND BILLS.NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE)
	 AND NOT (date_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (prod_id_npr>='10100' or prod_id_npr='10080'));
  ELSE
    DELETE /*+ RULE */ FROM BILLS WHERE NOT EXISTS
      (SELECT nom_dok FROM load_buffer.out_plat a WHERE a.nom_dok=BILLS.nom_dok
	  UNION ALL
      SELECT nom_dok FROM load_buffer.sf_pr_bills b WHERE b.nom_dok=BILLS.nom_dok)
     AND BILLS.DATE_BUXG BETWEEN date_beg AND date_end
	 AND BILLS.DATE_KVIT>v_dat
	 AND BILLS.NOM_DOK NOT IN (SELECT NOM_DOK FROM BILLS_NO_UPDATE)
	 AND NOT (date_kvit>=TO_DATE('14.07.2006','dd.mm.yyyy') and (prod_id_npr>='10100' or prod_id_npr='10080'));
  END IF;

  IF IsFull=0 THEN
    -- Проставим IS_KORR и TO_KORR
    --Оригинальные счета
    update /*+ RULE */ bills a set is_korr=0, to_korr=0 
     where a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;

    --Счета которые корректируют другие
    update /*+ RULE */ bills a set to_korr=1 where a.old_nom_dok in ( 
      select /*+ RULE */ nom_dok from bills
      )
     and a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;

    --Счета которые были откорректированы другими
    update /*+ RULE */ bills a set is_korr=1 where a.nom_dok in ( 
      select /*+ RULE */ old_nom_dok from bills
      )
     and a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;

    -- Счета которые были сторнированы
    update /*+ RULE */ bills a set is_korr=2 where a.is_korr=1 and a.nom_dok not in ( 
      select b.old_nom_dok from bills b where b.to_korr=1 and b.summa_dok>0
      )
     and a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;

    -- Счета которые сторнируют
    update /*+ RULE */ bills a set to_korr=2 where a.to_korr=1 and a.old_nom_dok in ( 
      select b.nom_dok from bills b where b.is_korr=2 and b.summa_dok>0
      )
     and a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;

    -- Выделение "минусовых"
    update /*+ RULE */ bills a set to_korr=sign(summa_dok)*abs(to_korr) where to_korr<>0
     and a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;

    update /*+ RULE */ bills a set is_korr=sign(summa_dok)*abs(is_korr) where is_korr<>0
     and a.DATE_BUXG BETWEEN date_beg AND date_end
	 AND a.DATE_KVIT>v_dat;
  END IF;
  
  COMMIT;

END Renew_Bills; 
/

--
-- RENEW_BILLS_SNP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_BILLS_SNP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') AS
  IsFull NUMBER(1);
  v_new kls_dog%ROWTYPE;
BEGIN

  IF param1 || ' ' = ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

-- Обновление счетов 
  UPDATE bills_snp
    set (IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,KOL_DN,FIO_ISPOL,PRIM,OLD_NOM_DOK,
         NOM_ZD,USL_NUMBER,OWNER_ID,DOG_ID,PROD_ID_NPR,DATE_MOS,OLD_NOM_SF,CAT_CEN_ID) =
	(SELECT A.IS_AGENT,A.NOM_SF,A.NPO_SF,A.DATE_VYP_SF,A.DATE_BUXG,A.DATE_KVIT,A.SUMMA_DOK,
            A.NDS_DOK,A.AKCIZ_DOK,A.GSM_DOK,A.KOL_DN,A.FIO_ISPOL,A.PRIM,A.OLD_NOM_DOK,
            A.NOM_ZD,A.USL_NUMBER,A.OWNER_ID,A.DOG_ID,A.PROD_ID_NPR,A.DATE_MOS,A.OLD_NOM_SF,NVL(B.CAT_CEN_ID,0)
       FROM master.bills A, master.USL_DOG B 
	  WHERE A.nom_dok=bills_snp.nom_dok
	    AND A.DOG_ID = B.DOG_ID (+)
		AND A.USL_NUMBER = B.USL_NUMBER (+))
    where exists (SELECT nom_dok FROM master.bills B WHERE B.nom_dok=bills_snp.nom_dok);
  COMMIT;

-- Добавление счетов   
  INSERT INTO bills_snp
    (NOM_DOK,IS_AGENT,NOM_SF,NPO_SF,DATE_VYP_SF,DATE_BUXG,DATE_KVIT,SUMMA_DOK,
         NDS_DOK,AKCIZ_DOK,GSM_DOK,KOL_DN,FIO_ISPOL,PRIM,OLD_NOM_DOK,
         NOM_ZD,USL_NUMBER,OWNER_ID,DOG_ID,PROD_ID_NPR,DATE_MOS,OLD_NOM_SF,CAT_CEN_ID)
	SELECT A.nom_dok,A.IS_AGENT,A.NOM_SF,A.NPO_SF,A.DATE_VYP_SF,A.DATE_BUXG,A.DATE_KVIT,A.SUMMA_DOK,
           A.NDS_DOK,A.AKCIZ_DOK,A.GSM_DOK,A.KOL_DN,A.FIO_ISPOL,A.PRIM,A.OLD_NOM_DOK,
           A.NOM_ZD,A.USL_NUMBER,A.OWNER_ID,A.DOG_ID,A.PROD_ID_NPR,A.DATE_MOS,A.OLD_NOM_SF,NVL(B.CAT_CEN_ID,0) 
     FROM master.bills A, master.USL_DOG B
	WHERE A.DOG_ID = B.DOG_ID (+)
  	  AND A.USL_NUMBER = B.USL_NUMBER (+)
      AND not exists (SELECT nom_dok FROM bills_snp C WHERE A.nom_dok=C.nom_dok);
	  
  COMMIT;

  -- Обновление реквизитов из заявок
  FOR_BILLS.FIELDS$BILLS_SNP(DATE_BEG,DATE_END,param1,param2,param3);  
  
-- Обновление позиций счетов  
  RENEW_BILL_POS_SNP(DATE_BEG,DATE_END,PARAM1,PARAM2,PARAM3);

-- Удаление счетов  
  IF IsFull=1 THEN
    DELETE FROM bills_snp WHERE not exists
      (SELECT nom_dok FROM master.bills a WHERE a.nom_dok=bills_snp.nom_dok);
  ELSE
    DELETE FROM bills_snp WHERE not exists
      (SELECT nom_dok FROM master.bills a WHERE a.nom_dok=bills_snp.nom_dok)
	  AND bills_snp.DATE_BUXG BETWEEN date_beg AND date_end;
  END IF;

  COMMIT;

END RENEW_BILLS_SNP;

/

--
-- RENEW_KVIT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.Renew_Kvit (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  v_dat DATE;
  cnt1 NUMBER;
BEGIN

UPDATE load_buffer.KVIT SET np_timep='00:00' WHERE SUBSTR(np_timep,1,1)=' ' OR np_timep IS NULL;
UPDATE load_buffer.KVIT SET time_e='00:00' WHERE SUBSTR(time_e,1,1)=' ' OR time_e IS NULL;
UPDATE load_buffer.KVIT SET np_data_o=date_otgr WHERE np_data_o IS NULL;
UPDATE load_buffer.KVIT SET date_e=date_otgr WHERE date_e IS NULL;
UPDATE load_buffer.KVIT SET kod_perer=0 WHERE kod_perer IS NULL;

  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='KVIT';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

UPDATE MASTER.KVIT SET
  (FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
   VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
   NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
   VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
   VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
   /*BILL_ID,*/NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
   DATE_EDIT,JKCOMMIT,GROTP_ID,PERECH_TEXPD_NUM, PERECH_TEXPD_DATE,
   /*SUM_PROD, SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH,
   DATE_CENA,CENA,CENA_OTP,*/CENA_VOZN,TARIF_GUARD,/*TARIF_GUARD_NDS,*/TARIF_ALT,CAPACITY,NACENKA,SHIELDS,PODDONS,
   UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,/*NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,*/PERECH_GUARD_NUM,PERECH_GUARD_DATE,
   AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,/*ZPU_TYPE1,ZPU_TYPE2,*/NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
 = (SELECT 0,k.mesto,k.nom_zd,k.kod_npr,k.plat_tarif,k.num_cist,k.date_otgr,
   k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
   LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
   k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
   k.VZLIV,k.TEMPER,k.XPL,0,k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
   /*k.n_plat,*/k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.KODPASP,p_r.PREDPR_ID,
   TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),1,k.KOD_GROTP,k.NUM_PERECH,k.DAT_PERECH,
   /*k.D_41, k.SUM_AKCIZ, k.D_191, k.D_194, k.SUM_NALIV, k.NDC_NAL20, k.D_442, k.NDC_TR20, k.SUM_NACEN,*/
   /*k.date_cen,k.cena,k.cena_otp,*/NVL(k.cena_vozn,0),NVL(k.dop_tarif,0),/*NVL(k.ndc_doptar,0),*/NVL(k.tarif_alt,0),
   k.WES,k.NACENKA,k.shields,k.poddons,
   u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,/*k.reestr,k.PROTO_NUM,k.PROTO_DATE,IIF(k.NO_AKCIZ,1,0),*/
   k.n_per_ohr,k.d_per_ohr,
   k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,/*k.ZPU_TYPE1,k.ZPU_TYPE2,*/k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
          FROM load_buffer.KVIT k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
		  WHERE k.ID=MASTER.KVIT.ID AND E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 
		    AND p_r.FOX_KOD=k.KOD_PERER AND k.NOM_ZD=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+))
  WHERE EXISTS (SELECT load_buffer.KVIT.ID FROM load_buffer.KVIT WHERE load_buffer.KVIT.ID=MASTER.KVIT.ID)
    AND master.kvit.date_otgr BETWEEN date_beg AND date_end
	and master.kvit.date_kvit>v_dat;

UPDATE MASTER.KVIT SET
  (BILL_ID,SUM_PROD, SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH,
   DATE_CENA,CENA,CENA_OTP,TARIF_GUARD_NDS,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ)
 = (SELECT k.n_plat,k.D_41, k.SUM_AKCIZ, k.D_191, k.D_194, k.SUM_NALIV, k.NDC_NAL20, k.D_442, k.NDC_TR20, k.SUM_NACEN,
    k.date_cen,k.cena,k.cena_otp,NVL(k.ndc_doptar,0),k.reestr,k.PROTO_NUM,k.PROTO_DATE,IIF(k.NO_AKCIZ,1,0)
          FROM load_buffer.KVIT k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
		  WHERE k.ID=MASTER.KVIT.ID AND E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 
		    AND p_r.FOX_KOD=k.KOD_PERER AND k.NOM_ZD=MONTH.nom_zd(+) AND k.BAG_ID=u.BAG_ID(+))
  WHERE EXISTS (SELECT load_buffer.KVIT.ID FROM load_buffer.KVIT WHERE load_buffer.KVIT.ID=MASTER.KVIT.ID)
    AND master.kvit.date_otgr BETWEEN date_beg AND date_end
	AND master.kvit.date_kvit<TO_DATE('14.07.2006','dd.mm.yyyy')
	and master.kvit.date_kvit>v_dat;

INSERT INTO MASTER.KVIT
     (ID,FLG_OPERDATA,MESTO_ID,NOM_ZD,PROD_ID_NPR,TEX_PD_ID,NUM_CIST,DATE_OTGR,
      VES,VES_BRUTTO,VES_ED,KOL_ED,TARIF,TARIF19,TARIF_ORIG,NUM_KVIT,DATE_KVIT,
      NUM_MILITARY,FLG_DOP_CIST,FLG_VAG_KLIENT,VAGOWNER_ID,VAGONTYPE_ID,KALIBR_ID,
      VES_CIST,DATE_VOZ,KVIT_VOZ,SUM_VOZ,DATE_OTV,PLOMBA1,PLOMBA2,ROSINSPL1,ROSINSPL2,
      VZLIV,TEMPER,FAKT_PL,FORMNAKL_ID,SHABEXP_ID,GTD,EXPED_ID,VETKA_OTP_ID,
	  BILL_ID,NUM_EXP_MAR,DATE_OFORML,SVED_NUM,SVED_ID,PASP_ID,PERER_ID,
      DATE_EDIT,JKCOMMIT,GROTP_ID,PERECH_TEXPD_NUM, PERECH_TEXPD_DATE,
	  SUM_PROD, SUM_AKCIZ, SUM_PROD_NDS, TARIF_NDS, SUM_VOZN11, SUM_VOZN11_NDS, SUM_VOZN12, SUM_VOZN12_NDS, SUM_STRAH,
	  DATE_CENA,CENA,CENA_OTP,CENA_VOZN,TARIF_GUARD,TARIF_GUARD_NDS,TARIF_ALT,CAPACITY,NACENKA,SHIELDS,PODDONS,
	  UPAK_ID,UPAK_VES,UPAK_VES_ED,SHIELD_VES,PODDON_VES,KOL_NET,PL,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,PERECH_GUARD_NUM,PERECH_GUARD_DATE,
      AXES,CTLV,DEFI_MASS_ID,VOLUME,VOLUME15,PL15,/*ZPU_TYPE1,ZPU_TYPE2,*/NUM_NAR,NUM_DOVER,DATE_DOVER,FIO_DRIVER)
      (SELECT k.ID,0,k.mesto,k.nom_zd,k.kod_npr,k.plat_tarif,k.num_cist,k.date_otgr,
          k.ves,DECODE(MONTH.NAZN_OTG_ID,4,k.ves_brutto,k.ves),k.wes_ed,k.kol_ed,k.TARIF,k.TARIF19,k.TARIF_ORIG,k.num_kvit,k.date_kvit,
          LTRIM(RTRIM(k.transp)),Iif(k.DOP_CIST,1,0),Iif(k.VAG_KLIENT,1,0),NVL(k.tipv,0),NVL(k.rodv,0),NVL(k.tip,'0'),
          k.tara_all,k.date_voz,k.KVIT_VOZ,k.SUM_VOZ,k.date_otv,k.PLOMBA1,k.PLOMBA2,k.ROSINSPL1,k.ROSINSPL2,
          k.VZLIV,k.TEMPER,k.XPL,0,k.rexp,NVL(k.GTD,''),E.KOD_PREDPR,k.gd_track,
		  k.n_plat,k.n_mar,TO_DATE(TO_CHAR(np_data_o,'dd.mm.yyyy ') || SUBSTR(np_timep,1,5),'dd.mm.yyyy hh24:mi'),k.NP,k.sved_id,k.kodpasp,p_r.PREDPR_ID,
          TO_DATE(TO_CHAR(date_e,'dd.mm.yyyy ') || SUBSTR(time_e,1,5),'dd.mm.yyyy hh24:mi'),1,k.KOD_GROTP,k.NUM_PERECH,k.DAT_PERECH,
		  k.D_41, k.SUM_AKCIZ, k.D_191, k.D_194, k.SUM_NALIV, k.NDC_NAL20, k.D_442, k.NDC_TR20, k.SUM_NACEN,
  	      k.date_cen,k.cena,k.cena_otp,NVL(k.cena_vozn,0),NVL(k.dop_tarif,0),NVL(k.ndc_doptar,0),NVL(k.tarif_alt,0),
		  k.wes,k.NACENKA,k.shields,k.poddons,
		  u.ID,k.bag_ves,k.bag1_ves,k.shld_ves,k.podd_ves,k.kol_net,k.pl,k.reestr,k.PROTO_NUM,k.PROTO_DATE,IIF(k.NO_AKCIZ,1,0),
		  k.n_per_ohr,k.d_per_ohr,
          k.osc,k.ctlv,k.defi_mass,k.volume,k.volume15,k.pl15,/*k.ZPU_TYPE1,k.ZPU_TYPE2,*/k.NARIAD,k.DOVEREN,k.DATE_DOVER,k.FIO_DRIVER
        FROM load_buffer.KVIT k, load_buffer.exped e, MASTER.PREDPR_ROLE p_r, MASTER.MONTH, MASTER.KLS_UPAK u
        WHERE E.kod=K.EXPED AND p_r.KLS_ROLE_ID=2 AND p_r.FOX_KOD=k.KOD_PERER AND k.BAG_ID=u.BAG_ID(+)
		  AND k.nom_zd=MONTH.nom_zd(+) 
  	      AND NOT EXISTS (SELECT MASTER.KVIT.ID FROM MASTER.KVIT WHERE MASTER.KVIT.ID=k.ID));

UPDATE KVIT SET BILL_POS_ID=1 WHERE  BILL_POS_ID IS NULL AND date_otgr BETWEEN date_beg AND date_end;

--- Удаляем записи из KVIT (только в том случае, если в буфере есть записи)
begin
  select count(*) into cnt1 from load_buffer.kvit k;
exception
  when others then
    cnt1:=0;
end;  
if cnt1>0 then
  DELETE FROM MASTER.KVIT A WHERE A.FLG_OPERDATA=0 AND NVL(A.BILL_ID,0)=0 AND
    NOT EXISTS (SELECT k.ID FROM load_buffer.KVIT k WHERE k.ID = A.ID) AND
    A.date_otgr BETWEEN date_beg AND date_end
	and A.date_kvit>v_dat;
end if;

Renew_Reestr_kvit(DATE_BEG,DATE_END,param1,param2,param3);

-- проставляем признак внеплановых вагонов (с 01.01.2008)
update kvit A set FLG_DOP_CIST=0 
where A.date_otgr BETWEEN date_beg AND date_end
and A.date_otgr>=to_date('01.01.2008','dd.mm.yyyy')
and A.date_kvit>v_dat
and A.FLG_DOP_CIST=1;

update kvit A set FLG_DOP_CIST=0
where exists
(
select null from kvit, kvit_vneplan, month, gu12_a
where kvit.num_kvit=kvit_vneplan.NUM_KVIT
  and kvit.ID=A.id
  and kvit.nom_zd=month.nom_zd
  and month.gu12_a_id=gu12_a.id
  and kvit_vneplan.NOM_Z=gu12_a.NOM_Z
  and kvit_vneplan.IS_VNEPLAN=0
) 
and A.date_otgr BETWEEN date_beg AND date_end
and A.date_otgr>=to_date('01.01.2008','dd.mm.yyyy')
and A.date_kvit>v_dat;

update kvit A set FLG_DOP_CIST=1
where exists
(
select null from kvit, kvit_vneplan, month, gu12_a
where kvit.num_kvit=kvit_vneplan.NUM_KVIT
  and kvit.ID=A.id
  and kvit.nom_zd=month.nom_zd
  and month.gu12_a_id=gu12_a.id
  and kvit_vneplan.NOM_Z=gu12_a.NOM_Z
  and kvit_vneplan.IS_VNEPLAN=1
) 
and A.date_otgr BETWEEN date_beg AND date_end
and A.date_otgr>=to_date('01.01.2008','dd.mm.yyyy')
and A.date_kvit>v_dat;

COMMIT;

END Renew_Kvit; 
/

--
-- RENEW_SVED_ALL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.RENEW_SVED_ALL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  date_inc DATE;
  v_dat DATE;
BEGIN

UPDATE load_buffer.SVED SET timep='00:00' WHERE substr(timep,1,1)=' ' or timep is NULL OR TIMEP='24:00';
UPDATE load_buffer.SVED SET data_o=DATA WHERE data_o is NULL;
UPDATE load_buffer.SVED SET N_NAL='00:00' WHERE substr(N_NAL,1,1)=' ' or N_NAL is NULL OR n_nal='24:00' OR substr(N_NAL,1,1)='1';
UPDATE load_buffer.SVED SET N_NALD=DATA WHERE N_NALD is NULL;
UPDATE load_buffer.SVED SET K_NAL='00:00' WHERE substr(K_NAL,1,1)=' ' or K_NAL is NULL OR k_nal='24:00';
UPDATE load_buffer.SVED SET K_NALD=DATA WHERE K_NALD is NULL;
UPDATE load_buffer.SVED SET GOTOV='00:00' WHERE substr(GOTOV,1,1)=' ' or GOTOV is NULL OR gotov='24:00';
UPDATE load_buffer.SVED SET GOTOVD=DATA WHERE GOTOVD is NULL;

  -- Определение архивной даты  
  BEGIN
    SELECT ARH_DATE.LAST_DATE INTO v_dat
	  FROM ARH_DATE WHERE ARH_DATE.TABLENAME='KVIT';
  EXCEPTION 
    WHEN OTHERS THEN
	  v_dat:=TO_DATE('31.12.1899','dd.mm.yyyy');
  END;	  	    

UPDATE /*+ RULE */ master.SVED m_s SET
  (FLG_OPERDATA,SVED_NUM,SVED_DATE,SVED_VES,SVED_CNT,
   GOTOV_TIME,
   BEG_NALIV_TIME,
   END_NALIV_TIME,
   DATE_OFORML,
   PASP_ID,PROD_ID_NPR,MESTO_ID,NARIAD_ID) =
  (SELECT 0,S.NP,S.DATA,S.VES,S.KOL,
    TO_DATE(TO_CHAR(S.GOTOVD,'dd.mm.yyyy ') || SUBSTR(S.GOTOV,1,5),'dd.mm.yyyy hh24:mi'),
    TO_DATE(TO_CHAR(S.N_NALD,'dd.mm.yyyy ') || SUBSTR(S.N_NAL,1,5),'dd.mm.yyyy hh24:mi'),
    TO_DATE(TO_CHAR(S.K_NALD,'dd.mm.yyyy ') || SUBSTR(S.K_NAL,1,5),'dd.mm.yyyy hh24:mi'),
    TO_DATE(TO_CHAR(S.DATA_O,'dd.mm.yyyy ') || SUBSTR(S.TIMEP,1,5),'dd.mm.yyyy hh24:mi'),
	S.KODPASP,S.KOD_NPR,S.MESTO,S.NARIAD_ID 
   FROM load_buffer.SVED S WHERE S.SVED_ID=m_s.id)
  WHERE flg_operdata=0 AND FROM_DBF=1 AND
    exists (SELECT NULL FROM load_buffer.SVED l_s where l_s.SVED_ID=m_s.id)
    AND m_s.SVED_DATE BETWEEN date_beg AND date_end
	and m_s.SVED_DATE>v_dat;

INSERT INTO master.SVED
     (ID,FLG_OPERDATA,FROM_DBF,SVED_NUM,SVED_DATE,SVED_VES,SVED_CNT,
      GOTOV_TIME,
      BEG_NALIV_TIME,
      END_NALIV_TIME,
      DATE_OFORML,
      PASP_ID,PROD_ID_NPR,MESTO_ID,NARIAD_ID)
     (SELECT S.SVED_ID,0,1,S.NP,S.DATA,S.VES,S.KOL,
      TO_DATE(TO_CHAR(S.GOTOVD,'dd.mm.yyyy ') || SUBSTR(S.GOTOV,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.N_NALD,'dd.mm.yyyy ') || SUBSTR(S.N_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.K_NALD,'dd.mm.yyyy ') || SUBSTR(S.K_NAL,1,5),'dd.mm.yyyy hh24:mi'),
      TO_DATE(TO_CHAR(S.DATA_O,'dd.mm.yyyy ') || SUBSTR(S.TIMEP,1,5),'dd.mm.yyyy hh24:mi'),
      S.KODPASP,S.KOD_NPR,S.MESTO,S.NARIAD_ID FROM load_buffer.SVED S
	WHERE not exists (SELECT NULL FROM master.SVED m_s WHERE m_s.id=S.SVED_ID AND m_s.flg_operdata=0));

DELETE FROM master.SVED A WHERE A.FLG_OPERDATA=0 AND A.FROM_DBF=1 AND
   NOT EXISTS (SELECT S.SVED_ID from load_buffer.SVED S WHERE S.SVED_ID = A.id) AND
   A.SVED_DATE BETWEEN date_beg AND date_end
	and A.SVED_DATE>v_dat;
	
COMMIT;   
   
RENEW_KLS_VALSVED(DATE_BEG,DATE_END,param1,param2,param3);

RENEW_SVED_REESTR(DATE_BEG,DATE_END,param1,param2,param3);

UPDATE master.SVED m_s SET
  (DATE_EDIT) =
  (SELECT MAX(K.DATE_EDIT) FROM master.KVIT K WHERE K.SVED_ID=m_s.id AND K.FLG_OPERDATA=m_s.FLG_OPERDATA)
 WHERE m_s.flg_operdata=0 AND from_dbf=1 
    and exists (SELECT null FROM master.KVIT m_k where m_k.SVED_ID=m_s.id AND m_k.FLG_OPERDATA=m_s.FLG_OPERDATA)
    AND m_s.SVED_DATE BETWEEN date_beg AND date_end
	and m_s.SVED_DATE>v_dat;

COMMIT;

END RENEW_SVED_ALL;
/

--
-- GET_LIST_NAKL_NUM  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_List_Nakl_Num
 (nom_dok# NUMBER)
RETURN VARCHAR2
AS
  val# VARCHAR2(512);

  CURSOR temp IS
    SELECT DISTINCT TO_CHAR(NVL(NUM_KVIT,0)) AS NUM_KVIT
	FROM V_KVIT_ALL WHERE BILL_ID=nom_dok# ORDER BY num_kvit;

  dest temp%ROWTYPE;

BEGIN

  val#:='';
  OPEN temp;
  LOOP
    FETCH temp INTO dest;
    EXIT WHEN temp%NOTFOUND;

    val#:=val#||' '||dest.num_kvit;
  END LOOP;
  
  RETURN SUBSTR(LTRIM(RTRIM(val#)),1,220);
END Get_List_Nakl_Num; 
/

--
-- GET_SF_DOPOLN2  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.Get_Sf_Dopoln2  (pBill_IdNpr VARCHAR2, pBill_NameNpr VARCHAR2, pBillPos_IdNpr VARCHAR2, pBillPos_NameNpr VARCHAR2,
 pDogNumber VARCHAR2, pDogDate DATE, pNomDok NUMBER, pDateKvit DATE, pDateMos DATE, pNumAkt VARCHAR2, pNaznOtg NUMBER) RETURN VARCHAR2 AS
BEGIN
  -- Возвращает Дополнение для СФ
  -- pBill_IdNpr - н/пр в СФ
  -- pBillPos_IdNpr - н/пр в позиции СФ
  -- pDogNumber - договор 
  -- pDogDate - дата договора 
  -- pNomDok - BILLS.NOM_DOK
  -- pNumAkt - N акта
  -- pDateKvit - дата квитанции  
  IF pBill_IdNpr IN ('10090','10091','10092','10062','10063','10055','10095','10097','10098','10058') THEN 
    RETURN 'Согласно договору '|| pDogNumber || ' от ' || TO_CHAR(pDogDate,'dd.mm.yyyy') ||'г. ';
  ELSE
    IF pBill_IdNpr IN ('10093','10094','10096') THEN 
	  RETURN pBillPos_NameNpr || ' за '||NLS_LOWER(Rusmonth(pDateKvit)) || ' согласно договору '|| pDogNumber || ' от ' || TO_CHAR(pDogDate,'dd.mm.yyyy') ||'г. ';
	ELSE   
      IF pNaznOtg=9  THEN 
--        RETURN 'Акт приема-передачи № ' || Get_List_Nakl_Num(pNomDok) || ' от ' || TO_CHAR(pDateKvit,'dd.mm.yyyy') ||' г. ';
	    RETURN 'Акт приема-передачи № ' || pNumAkt || ' от ' || TO_CHAR(pDateKvit,'dd.mm.yyyy') ||'г. ';
	  ELSE
        IF pBill_IdNpr='10080'  THEN 
	      RETURN 'Акт приема-передачи № ' || pNumAkt || ' от ' || TO_CHAR(pDateKvit,'dd.mm.yyyy') ||'г. ';
	    ELSE
          IF pBill_IdNpr<'10100' AND pBill_IdNpr<>'10080' THEN 
		    RETURN 'Согласно отчета агента от ' || TO_CHAR(pDateMos,'dd.mm.yyyy') ||'г. ' ;
    	  ELSE 
	  	    RETURN 'Квит. № ' || Get_List_Nakl_Num(pNomDok) || ' от ' || TO_CHAR(pDateKvit,'dd.mm.yyyy') ||' г. ';
		  END IF;
	    END IF;
	  END IF;	
	END IF;
  END IF;	  	   
END Get_Sf_Dopoln2;

/

--
-- SF_F_GET_PROPISI_VES  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.sf_f_get_propisi_ves
 (kod_prod# number)
return varchar2
as
  sum# number;
  sum_propis varchar2 (4000);
--  propis# varchar2(4000);
begin
  select sum(ves) into sum# from v_kvit_all 
   where bill_id = kod_prod#;
  if nvl(sum#,0)=0 then
  	 sum_propis:=' ';
  else 
  	 sum_propis:=ves_pr(sum#);  
  end if;
  return sum_propis;
end sf_f_get_propisi_ves; 
/

--
-- MASTER_V_MREE_REESTR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.MASTER_V_MREE_REESTR
(ORDER_NPR, PROD_PLAN_ID, NAME_NPR, DOG_ID, DOG_NUMBER, 
 PLAT_NAME, FOR_ID, FOR_NAME, LOAD_TYPE_ID, TYPE_OTGR_NAME, 
 NOM_ZD, TONN_DECLARED, TONN_LOADED, PRIM, POLUCH_NAME, 
 STAN_NAME, PLANMOSCOWDOG, PLANMOSCOWDOGWITHFOR, PLANMOSCOWPROD, PLANOURDOG, 
 PLANOURDOGWITHFOR, PLANOURPROD)
AS 
SELECT
  kls_prod_plan.ORDER_NPR,
  A.PROD_PLAN_ID,
  kls_prod_plan.NAME_NPR,
  A.DOG_ID,
  kls_dog.DOG_NUMBER,
  kls_predpr.PREDPR_NAME AS plat_name,
  A.FOR_ID,
  A.FOR_NAME,
  v_mree_month.LOAD_TYPE_ID,
  v_mree_month.TYPE_OTGR_NAME,
  v_mree_month.NOM_ZD,
  v_mree_month.TONN_DECLARED,
  v_mree_month.TONN_LOADED,
  v_mree_month.PRIM,
  v_mree_month.POLUCH_NAME,
  v_mree_month.STAN_NAME,
  A.PLANMOSCOWDOG,
  (SELECT SUM(B.PLANMOSCOWDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE 
    a.dog_id=b.dog_id AND a.prod_plan_id=b.prod_plan_id) AS PlanMoscowDogWithFor,
  (SELECT SUM(B.PLANMOSCOWDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE 
    a.prod_plan_id=b.prod_plan_id) AS PlanMoscowProd,
  A.PLANOURDOG,
  (SELECT SUM(B.PLANOURDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE 
    a.dog_id=b.dog_id AND a.prod_plan_id=b.prod_plan_id) AS PlanOurDogWithFor,
  (SELECT SUM(B.PLANOURDOG) FROM V_MREE_PLANBYDOGDETAIL B WHERE 
    a.prod_plan_id=b.prod_plan_id) AS PlanOurProd
  FROM V_MREE_PLANBYDOGDETAIL A,kls_prod_plan,kls_dog,v_mree_month,kls_predpr
  WHERE
    kls_prod_plan.ID=A.PROD_PLAN_ID AND
	kls_dog.id=a.dog_id AND
	kls_dog.PREDPR_ID=kls_predpr.ID AND
	a.dog_id=v_mree_month.dog_id(+) AND
	a.for_id=v_mree_month.for_id(+) AND
	a.prod_plan_id=v_mree_month.prod_plan_id(+)
  ORDER BY ORDER_NPR,DOG_NUMBER,FOR_ID,load_type_id,nom_zd;


--
-- V_FUCKING_AKCIZ_BY_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FUCKING_AKCIZ_BY_SF
(PRODUCE_YEAR, PRODUCE_MONTH, DATE_VYR, AKCIZ_SVID, ITWASPRODICEDBYLUKOIL, 
 PREDPR_NAME, DOG_NUMBER, DOG_DATE, NOM_DOK, NOM_SF, 
 DATE_VYP_SF, NAKL_NUM, DATE_KVIT, GROUP_ID, GROUP_NAME, 
 LONG_NAME_NPR, VES_GAS80, SUM_GAS80, VES_GASNO80, SUM_GASNO80, 
 VES_DT, SUM_DT, VES_OIL, SUM_OIL, VES_GASPRYAM, 
 SUM_GASPRYAM)
AS 
SELECT  
  to_char(sf_poz_vyr.DATEVYR,'YYYY') AS produce_year,
  to_char(sf_poz_vyr.DATEVYR,'MM.YYYY') AS produce_month,
  sf_poz_vyr.DATEVYR AS DATE_VYR,
  Get_Akciz_Svid(kls_predpr.ID,kls_prod_groups.ID,bills.DATE_KVIT,bills.NO_AKCIZ) AS akciz_svid,
  '1' AS ItWasProdicedByLukoil,
  kls_predpr.PREDPR_NAME,
  kls_dog.DOG_NUMBER,
  kls_dog.DOG_DATE,
  bills.NOM_DOK,
  bills.NOM_SF,
  bills.DATE_VYP_SF,
  get_list_nakl_num(bills.NOM_DOK) AS nakl_num,
  bills.DATE_KVIT,
  kls_prod_groups.ID AS GROUP_ID,
  kls_prod_groups.GROUP_NAME,
  kls_prod.LONG_NAME_NPR,
  DECODE(kls_prod_groups.ID,114,sf_poz_vyr.KOL,0) AS ves_gas80,
  DECODE(kls_prod_groups.ID,114,sf_poz_vyr.SUMMA,0) AS sum_gas80,
  DECODE(kls_prod_groups.ID,115,sf_poz_vyr.KOL,0) AS ves_gasNo80,
  DECODE(kls_prod_groups.ID,115,sf_poz_vyr.SUMMA,0) AS sum_gasNo80,
  DECODE(kls_prod_groups.ID,116,sf_poz_vyr.KOL,0) AS ves_DT,
  DECODE(kls_prod_groups.ID,116,sf_poz_vyr.SUMMA,0) AS sum_DT,
  DECODE(kls_prod_groups.ID,117,sf_poz_vyr.KOL,0) AS ves_OIL,
  DECODE(kls_prod_groups.ID,117,sf_poz_vyr.SUMMA,0) AS sum_OIL,
  DECODE(kls_prod_groups.ID,118,sf_poz_vyr.KOL,0) AS ves_gasPryam,
  DECODE(kls_prod_groups.ID,118,sf_poz_vyr.SUMMA,0) AS sum_gasPryam
  FROM kls_predpr,kls_dog,bills,
    (SELECT 
	  TRUNC(kvit_date_vir.DATE_ViR,'Month') AS datevyr,
	  SUM(kvit_date_vir.VES) AS kol,
	  SUM(kvit_date_vir.SUM_PROD+kvit_date_vir.SUM_PROD_NDS+kvit_date_vir.SUM_AKCIZ) AS summa,
	  kvit_date_vir.bill_id AS KOD_PROD,
	  kvit.prod_id_npr AS ID_NFPROD 
	  FROM kvit_date_vir,kvit
	  WHERE  kvit_date_vir.kvit_id=kvit.id
	  GROUP BY TRUNC(kvit_date_vir.DATE_ViR,'Month'),kvit_date_vir.bill_id,kvit.prod_id_npr) sf_poz_vyr,
	kls_prod,kls_prod_groups_desc,kls_prod_groups
  WHERE
    kls_predpr.ID=kls_dog.PREDPR_ID and
	bills.NOM_DOK=sf_poz_vyr.KOD_PROD and
	kls_prod.ID_NPR=sf_poz_vyr.ID_NFPROD and
	bills.DOG_ID=kls_dog.ID and
	kls_prod_groups_desc.PROD_ID_NPR=kls_prod.ID_NPR and
	kls_prod_groups_desc.PROD_GROUPS_ID=kls_prod_groups.ID and
	kls_prod_groups.PROD_TYPE_GRP_ID=6 and
	bills.DATE_VYP_SF between
	  (SELECT MAX(begin_date) FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='AKCIZ_BY_SF.XLS') and
	  (SELECT MAX(end_date) FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='AKCIZ_BY_SF.XLS')
  ORDER BY produce_year,akciz_svid,ItWasProdicedByLukoil,PREDPR_NAME,dog_number,nom_sf;


--
-- V_FUCKING_AKCIZ_BY_SF_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_FUCKING_AKCIZ_BY_SF_OLD
(PRODUCE_YEAR, PRODUCE_MONTH, DATE_VYR, AKCIZ_SVID, ITWASPRODICEDBYLUKOIL, 
 PREDPR_NAME, DOG_NUMBER, DOG_DATE, NOM_DOK, NOM_SF, 
 DATE_VYP_SF, NAKL_NUM, DATE_KVIT, GROUP_ID, GROUP_NAME, 
 LONG_NAME_NPR, VES_GAS80, SUM_GAS80, VES_GASNO80, SUM_GASNO80, 
 VES_DT, SUM_DT, VES_OIL, SUM_OIL, VES_GASPRYAM, 
 SUM_GASPRYAM)
AS 
SELECT  
  to_char(sf_poz_vyr.DATEVYR,'YYYY') AS produce_year,
  to_char(sf_poz_vyr.DATEVYR,'MM.YYYY') AS produce_month,
  sf_poz_vyr.DATEVYR AS DATE_VYR,
  Get_Akciz_Svid(kls_predpr.ID,kls_prod_groups.ID,bills.DATE_VYP_SF,bills.NO_AKCIZ) AS akciz_svid,
  '1' AS ItWasProdicedByLukoil,
  kls_predpr.PREDPR_NAME,
  kls_dog.DOG_NUMBER,
  kls_dog.DOG_DATE,
  bills.NOM_DOK,
  bills.NOM_SF,
  bills.DATE_VYP_SF,
  get_list_nakl_num(bills.NOM_DOK) AS nakl_num,
  bills.DATE_KVIT,
  kls_prod_groups.ID AS GROUP_ID,
  kls_prod_groups.GROUP_NAME,
  kls_prod.LONG_NAME_NPR,
  DECODE(kls_prod_groups.ID,114,sf_poz_vyr.KOL,0) AS ves_gas80,
  DECODE(kls_prod_groups.ID,114,sf_poz_vyr.SUMMA,0) AS sum_gas80,
  DECODE(kls_prod_groups.ID,115,sf_poz_vyr.KOL,0) AS ves_gasNo80,
  DECODE(kls_prod_groups.ID,115,sf_poz_vyr.SUMMA,0) AS sum_gasNo80,
  DECODE(kls_prod_groups.ID,116,sf_poz_vyr.KOL,0) AS ves_DT,
  DECODE(kls_prod_groups.ID,116,sf_poz_vyr.SUMMA,0) AS sum_DT,
  DECODE(kls_prod_groups.ID,117,sf_poz_vyr.KOL,0) AS ves_OIL,
  DECODE(kls_prod_groups.ID,117,sf_poz_vyr.SUMMA,0) AS sum_OIL,
  DECODE(kls_prod_groups.ID,118,sf_poz_vyr.KOL,0) AS ves_gasPryam,
  DECODE(kls_prod_groups.ID,118,sf_poz_vyr.SUMMA,0) AS sum_gasPryam
  FROM kls_predpr,kls_dog,bills,
    (SELECT 
	  MAX(sveta.sf_poz_vyr.DATEVYR) AS datevyr,
	  SUM(sveta.sf_poz_vyr.KOL) AS kol,
	  SUM(sveta.sf_poz_vyr.ALLNDS) AS summa,
	  sveta.sf_poz_vyr.KOD_PROD,
	  sveta.sf_poz_vyr.ID_NFPROD 
	  FROM sveta.sf_poz_vyr 
	  GROUP BY sveta.sf_poz_vyr.KOD_PROD,sveta.sf_poz_vyr.ID_NFPROD) sf_poz_vyr,
	kls_prod,kls_prod_groups_desc,kls_prod_groups
  WHERE
    kls_predpr.ID=kls_dog.PREDPR_ID and
	bills.NOM_DOK=sf_poz_vyr.KOD_PROD and
	kls_prod.ID_NPR=sf_poz_vyr.ID_NFPROD and
	bills.DOG_ID=kls_dog.ID and
	kls_prod_groups_desc.PROD_ID_NPR=kls_prod.ID_NPR and
	kls_prod_groups_desc.PROD_GROUPS_ID=kls_prod_groups.ID and
	kls_prod_groups.PROD_TYPE_GRP_ID=6 and
	bills.DATE_VYP_SF between
	  (SELECT MAX(begin_date) FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='AKCIZ_BY_SF.XLS') and
	  (SELECT MAX(end_date) FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='AKCIZ_BY_SF.XLS')
  ORDER BY produce_year,akciz_svid,ItWasProdicedByLukoil,PREDPR_NAME,dog_number,nom_sf;


--
-- V_GD_AGENT_2006_MONTH_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_MONTH_ALL
(FROM_DATE, BEGIN_DATE, END_DATE, RAZN_NUM, RAZN_DATE, 
 INPUT_DATE, STAN_OLD_ID, STAN_OLD_NAME, STAN_ID, STAN_NAME, 
 POLUCH_ID, POLUCH_NAME, PROD_ID, PROD_NAME, KOL, 
 VES, SPEED_KOL, SPEED_VES, PRIM, STATUS_ZAKAZ_ID, 
 MAIN_RAZN_NUM, MAIN_RAZN_DATE, MAIN_INPUT_DATE)
AS 
SELECT 
  FROM_DATE, 
  BEGIN_DATE, 
  END_DATE, 
  RAZN_NUM, 
  RAZN_DATE, 
  INPUT_DATE, 
  STAN_OLD_ID, 
  STAN_OLD_NAME, 
  STAN_ID, 
  STAN_NAME, 
  POLUCH_ID, 
  POLUCH_NAME, 
  PROD_ID, 
  PROD_NAME, 
  KOL, 
  VES, 
  SPEED_KOL, 
  SPEED_VES, 
  PRIM, 
  STATUS_ZAKAZ_ID, 
  MAIN_RAZN_NUM, 
  MAIN_RAZN_DATE, 
  MAIN_INPUT_DATE 
FROM 
( 
SELECT /*+ RULE */ 
  /* Предоставлено разнарядок */ 
  -- Основные заявки 
  z.FROM_DATE, 
  c.BEGIN_DATE, 
  c.END_DATE, 
  mon.client_number as RAZN_NUM, 
  mon.client_date as RAZN_DATE, 
  mon.input_date, 
  old_mon.STAN_ID as STAN_OLD_ID, 
  old_STAN.STAN_NAME as STAN_OLD_NAME, 
  mon.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  mon.POLUCH_ID, 
  poluch.SF_NAME as POLUCH_NAME, 
  KLS_PROD.ID_NPR as PROD_ID, 
  kls_prod.NAME_NPR as PROD_NAME, 
  SUM(z.KOL) as KOL, 
  SUM(z.REQUEST) as VES, 
  SUM(z.FACT_KOL) as SPEED_KOL, 
  SUM(z.FACT_VES) as SPEED_VES, 
  ''  as PRIM, 
  10 as STATUS_ZAKAZ_ID, 
  mon.client_number as MAIN_RAZN_NUM, 
  mon.client_date as MAIN_RAZN_DATE, 
  mon.input_date as MAIN_INPUT_DATE 
FROM month_all mon,v_gd_agent_2006_zakaz z, kls_dog,v_master_reports C, kls_stan,kls_prod,month_all old_mon,kls_stan old_stan, kls_predpr poluch 
WHERE mon.ID=z.ID 
  AND mon.KLS_dog_id=kls_dog.id 
  AND mon.ZAKAZ_OLD_ID=old_mon.ID(+) 
  AND old_mon.stan_id=old_stan.ID (+) 
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT_2006.XLS') 
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER 
--  AND mon.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE 
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2006.XLS' 
  AND mon.KLS_PROD_ID<>'90000' -- Без НЕФТИ 
  AND mon.PARUS_RN is null -- Без СНП 
  AND mon.IS_AGENT=1 -- Только агентские 
  AND mon.STAN_ID=KLS_STAN.ID 
  and mon.kls_prod_id=kls_prod.id_npr 
  and mon.POLUCH_ID=poluch.ID(+) 
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА 
GROUP BY 
  z.FROM_DATE, 
  c.BEGIN_DATE, 
  c.END_DATE, 
  mon.client_number, 
  mon.client_date, 
  mon.input_date, 
  old_mon.STAN_ID, 
  old_STAN.STAN_NAME, 
  mon.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  mon.POLUCH_ID, 
  poluch.SF_NAME, 
  KLS_PROD.ID_NPR, 
  kls_prod.NAME_NPR, 
  DECODE(mon.ZAKAZ_OLD_ID,NULL,'','В счет заказа № '||old_mon.CLIENT_NUMBER||' ст.'||old_stan.STAN_NAME || ' ') 
-- 
UNION ALL 
-- 
SELECT /*+ RULE */ 
  -- Отказы 
  z.FROM_DATE, 
  c.BEGIN_DATE, 
  c.END_DATE, 
  mon.client_number as RAZN_NUM, 
  mon.client_date as RAZN_DATE, 
  mon.input_date, 
  NULL as STAN_OLD_ID, 
  NULL as STAN_OLD_NAME, 
  mon.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  mon.POLUCH_ID, 
  poluch.SF_NAME as POLUCH_NAME, 
  KLS_PROD.ID_NPR as PROD_ID, 
  kls_prod.NAME_NPR as PROD_NAME, 
  SUM(ABS(NVL(mon.KOL,0))) as KOL, 
  SUM(ABS(NVL(mon.REQUEST,0))) as VES, 
  SUM(ABS(NVL(mon.SPEED_KOL,0))) as SPEED_KOL, 
  SUM(ABS(NVL(mon.SPEED_VES,0))) as SPEED_VES, 
  ''  as PRIM, 
  mon.STATUS_ZAKAZ_ID, 
  month_all.client_number as MAIN_RAZN_NUM, 
  month_all.client_date as MAIN_RAZN_DATE, 
  month_all.input_date as MAIN_INPUT_DATE 
FROM month_all_row mon,v_gd_agent_2006_zakaz z,month_all,kls_dog,v_master_reports C, kls_stan,kls_prod,kls_predpr poluch 
WHERE month_all.KLS_dog_id=kls_dog.id 
  AND mon.month_all_id=month_all.id AND month_all.id=z.id 
--  AND KLS_DOG.PREDPR_ID=FOR_TEMP.GET_AS_NUM('LC_PLAT','MASTER','GD_AGENT_2006.XLS') 
  AND KLS_DOG.DOG_NUMBER LIKE C.DOG_NUMBER 
--  AND month_all.date_plan BETWEEN C.BEGIN_DATE AND C.END_DATE 
  AND NLS_UPPER(C.REPORT_FILE)='GD_AGENT_2006.XLS' 
  AND month_all.KLS_PROD_ID<>'90000' -- Без НЕФТИ 
  AND month_all.PARUS_RN is null -- Без СНП 
  AND month_all.IS_AGENT=1 -- Только агентские 
  AND month_all.STAN_ID=KLS_STAN.ID 
  and month_all.kls_prod_id=kls_prod.id_npr 
  and mon.status_zakaz_id in (50) 
  and month_all.POLUCH_ID=poluch.ID(+) 
  and mon.STAN_ID<>2595 -- без АВТОНАЛИВА 
GROUP BY 
  z.FROM_DATE, 
  c.BEGIN_DATE, 
  c.END_DATE, 
  mon.client_number, 
  mon.client_date, 
  mon.input_date, 
  mon.STAN_ID, 
  KLS_STAN.STAN_NAME, 
  mon.POLUCH_ID, 
  poluch.SF_NAME, 
  KLS_PROD.ID_NPR, 
  kls_prod.NAME_NPR, 
  mon.STATUS_ZAKAZ_ID, 
  month_all.client_number, 
  month_all.client_date, 
  month_all.input_date 
) 
ORDER BY 
  razn_date, 
  razn_num, 
  prod_id, 
  STAN_NAME;


--
-- V_GD_AGENT_2006_MONTH_ALL_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_MONTH_ALL_1
(FROM_DATE, BEGIN_DATE, END_DATE, RAZN_NUM, RAZN_DATE, 
 INPUT_DATE, STAN_OLD_ID, STAN_OLD_NAME, STAN_ID, STAN_NAME, 
 POLUCH_ID, POLUCH_NAME, PROD_ID, PROD_NAME, KOL, 
 VES, SPEED_KOL, SPEED_VES, PRIM, STATUS_ZAKAZ_ID, 
 MAIN_RAZN_NUM, MAIN_RAZN_DATE, MAIN_INPUT_DATE)
AS 
SELECT "FROM_DATE","BEGIN_DATE","END_DATE","RAZN_NUM","RAZN_DATE","INPUT_DATE","STAN_OLD_ID","STAN_OLD_NAME","STAN_ID","STAN_NAME","POLUCH_ID","POLUCH_NAME","PROD_ID","PROD_NAME","KOL","VES","SPEED_KOL","SPEED_VES","PRIM","STATUS_ZAKAZ_ID","MAIN_RAZN_NUM","MAIN_RAZN_DATE","MAIN_INPUT_DATE" FROM V_GD_AGENT_2006_MONTH_ALL
WHERE FROM_DATE<BEGIN_DATE;


--
-- V_GD_AGENT_2006_MONTH_ALL_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_AGENT_2006_MONTH_ALL_2
(FROM_DATE, BEGIN_DATE, END_DATE, RAZN_NUM, RAZN_DATE, 
 INPUT_DATE, STAN_OLD_ID, STAN_OLD_NAME, STAN_ID, STAN_NAME, 
 POLUCH_ID, POLUCH_NAME, PROD_ID, PROD_NAME, KOL, 
 VES, SPEED_KOL, SPEED_VES, PRIM, STATUS_ZAKAZ_ID, 
 MAIN_RAZN_NUM, MAIN_RAZN_DATE, MAIN_INPUT_DATE)
AS 
SELECT "FROM_DATE","BEGIN_DATE","END_DATE","RAZN_NUM","RAZN_DATE","INPUT_DATE","STAN_OLD_ID","STAN_OLD_NAME","STAN_ID","STAN_NAME","POLUCH_ID","POLUCH_NAME","PROD_ID","PROD_NAME","KOL","VES","SPEED_KOL","SPEED_VES","PRIM","STATUS_ZAKAZ_ID","MAIN_RAZN_NUM","MAIN_RAZN_DATE","MAIN_INPUT_DATE" FROM V_GD_AGENT_2006_MONTH_ALL
WHERE FROM_DATE>=BEGIN_DATE;


--
-- V_GDTARIF_PLAT_DATE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GDTARIF_PLAT_DATE
(TARIF, DATE_KVIT, TEX_PD_NAME, DOG_NUMBER, TARNDS, 
 MAIN_DOG, YEAR, MONTH)
AS 
SELECT k.tarif, k.date_kvit, kls.tex_pd_name, d.dog_number,k.tarif*(100+FOR_BILLS.GetNDSValue(k.date_kvit))/100 as tarnds,
       maindog.dog_number as main_dog,EXTRACT(YEAR FROM k.date_kvit) as year,EXTRACT(MONTH FROM k.date_kvit) as month
  FROM kls_dog d, kvit k, MONTH m, kls_tex_pd kls, kls_dog_main, kls_dog maindog
 WHERE (d.ID = m.dog_id)
        AND (m.nom_zd = k.nom_zd)
        AND (k.tex_pd_id = kls.ID)
		AND d.is_agent=kls_dog_main.is_agent
		and k.date_kvit between kls_dog_main.from_date and kls_dog_main.to_date
        AND (kls_dog_main.dog_id = maindog.ID)
        AND (k.grotp_id = kls.grotp_id)
        AND (k.tarif > 0)
		and k.date_kvit>='01-jan-2003'
order by k.date_kvit;


--
-- V_GD_VYP_GDPLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_VYP_GDPLAN
(TIP_OTGR_1, KOD_NPR_1, EXPORT_1, PLAN_CIST, PLAN_VES, 
 PLAN_CSOB, PLAN_VSOB, N_PL_C, N_PL_V, N_PL_CS, 
 N_PL_VS, D_PL_C, D_PL_V, D_PL_CS, D_PL_VS, 
 NORM_TOT, NORM_MPS, NORM_SOB, KOD_GDPL)
AS 
SELECT /*+ RULE */ 
  1 AS tip_otgr_1, 
  NVL(GU12_BR.ID_NPR,V_GD_VYP_PRODRECODE.ID_NPR) AS kod_npr_1, -- NVL(A,B): if A<>null then Result := A else Result := B  
  DECODE(NVL(gu12_a.EXPED_ID,0),0,1,2) AS export_1, 
  SUM(GU12_BR.KOL_VAG) AS PLAN_CIST, 
  SUM(GU12_BR.VES) AS plan_ves, 
  SUM(CASE WHEN GU12_B.PRINVAG_ID<>207 THEN GU12_BR.KOL_VAG ELSE 0 END) AS PLAN_CSOB, 
  SUM(CASE WHEN GU12_B.PRINVAG_ID<>207 THEN GU12_BR.VES ELSE 0 END) AS PLAN_VSOB, 
  SUM(CASE WHEN gu12_br.DATE_R<=V_TEMP_VYP_GD_PARAMS.END_DATE THEN gu12_br.kol_vag ELSE 0 END) AS n_pl_c, 
  SUM(CASE WHEN gu12_br.DATE_R<=V_TEMP_VYP_GD_PARAMS.END_DATE THEN gu12_br.ves ELSE 0 END) AS n_pl_v, 
  SUM(CASE WHEN gu12_br.DATE_R<=V_TEMP_VYP_GD_PARAMS.END_DATE AND GU12_B.PRINVAG_ID<>207 THEN gu12_br.kol_vag ELSE 0 END) AS n_pl_cs, 
  SUM(CASE WHEN gu12_br.DATE_R<=V_TEMP_VYP_GD_PARAMS.END_DATE AND GU12_B.PRINVAG_ID<>207 THEN gu12_br.ves ELSE 0 END) AS n_pl_vs, 
  SUM(CASE WHEN gu12_br.DATE_R=V_TEMP_VYP_GD_PARAMS.END_DATE THEN gu12_br.kol_vag ELSE 0 END) AS d_pl_c, 
  SUM(CASE WHEN gu12_br.DATE_R=V_TEMP_VYP_GD_PARAMS.END_DATE THEN gu12_br.ves ELSE 0 END) AS d_pl_v, 
  SUM(CASE WHEN gu12_br.DATE_R=V_TEMP_VYP_GD_PARAMS.END_DATE AND GU12_B.PRINVAG_ID<>207 THEN gu12_br.kol_vag ELSE 0 END) AS d_pl_cs, 
  SUM(CASE WHEN gu12_br.DATE_R=V_TEMP_VYP_GD_PARAMS.END_DATE AND GU12_B.PRINVAG_ID<>207 THEN gu12_br.ves ELSE 0 END) AS d_pl_vs, 
  SUM(0) AS norm_tot, 
  SUM(0) AS norm_mps, 
  SUM(0) AS norm_sob, 
  NVL(p1.GD_KOD_NPR,p2.GD_KOD_NPR) AS kod_gdpl 
  FROM gu12_a,gu12_b,GU12_BR,V_GD_VYP_PRODRECODE,V_TEMP_VYP_GD_PARAMS,KLS_PROD p1,KLS_PROD p2 
  WHERE 
    gu12_br.ID_B=gu12_b.ID AND 
    gu12_b.ID_A=gu12_a.ID and 
    gu12_a.PROD_ID=V_GD_VYP_PRODRECODE.PROD_GU12_ID and 
    GU12_BR.DATE_R>=TRUNC(V_TEMP_VYP_GD_PARAMS.END_DATE,'MM') AND 
 GU12_BR.DATE_R<=LAST_DAY(V_TEMP_VYP_GD_PARAMS.END_DATE) AND 
-- GU12_B.ISCOR<>2 AND 
 GU12_BR.ID_NPR=p1.ID_NPR(+) AND 
 V_GD_VYP_PRODRECODE.ID_NPR=p2.ID_NPR(+) 
  GROUP BY 
    NVL(GU12_BR.ID_NPR,V_GD_VYP_PRODRECODE.ID_NPR), 
 NVL(p1.GD_KOD_NPR,p2.GD_KOD_NPR), 
 DECODE(NVL(gu12_a.EXPED_ID,0),0,1,2)
UNION ALL

SELECT /* RULE */ 
  2 AS tip_otgr_1, -- 2  
  P1.ID_NPR AS kod_npr_1, --- P1.ID_NPR
  1 AS export_1, --- 1 EXPED_ID=Null -> 1 else 2 - Экспедитор
  0 AS PLAN_CIST, ---0
  SUM(ZAKAZ.VES) AS PLAN_VES, -- ZAKAZ.VES
  0 AS PLAN_CSOB,   --0
  SUM(ZAKAZ.VES) AS PLAN_VSOB, -- ZAKAZ.VES
  0 AS n_pl_c, --0
  0 AS n_pl_v, --0
  0 AS n_pl_cs,--0 
  SUM(CASE WHEN ZAKAZ.BEGIN_DATE<=V_TEMP_VYP_GD_PARAMS.END_DATE THEN ZAKAZ.VES ELSE 0 END) AS n_pl_vs, --ZAKAZ.VES
  0 AS d_pl_c,--0 
  0 AS d_pl_v,--0 
  0 AS d_pl_cs,--0 
  SUM(CASE WHEN ZAKAZ.BEGIN_DATE<=V_TEMP_VYP_GD_PARAMS.END_DATE THEN ZAKAZ.VES ELSE 0 END) AS d_pl_vs, --ZAKAZ.VES
  0 AS norm_tot, 
  0 AS norm_mps, 
  0 AS norm_sob, 
  '' AS kod_gdpl 
FROM ZAKAZ, V_TEMP_VYP_GD_PARAMS, KLS_PROD P1 
  WHERE 
    zakaz.IS_AGENT=1 AND -- заказы УНП 
--    ZAKAZ.PERIOD_ID=0 AND  -- период планирования - месяц
    ZAKAZ.BEGIN_DATE>=TRUNC(V_TEMP_VYP_GD_PARAMS.END_DATE,'MM') AND 
    ZAKAZ.BEGIN_DATE<=LAST_DAY(V_TEMP_VYP_GD_PARAMS.END_DATE) AND 
    ZAKAZ.PROD_ID_NPR=p1.ID_NPR(+) AND
    ZAKAZ.LOAD_ABBR='САМ'  -- самовывоз
  GROUP BY 
    P1.ID_NPR;


--
-- V_GD_VYP_READY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GD_VYP_READY
(NAIM_GR, NAIM_PR, NORMOTGR, KOD_GR, TIP_OTGR, 
 KOD_NPR, EXPORT, TIP_OTGR_1, KOD_NPR_1, EXPORT_1, 
 PLAN_CIST, PLAN_VES, PLAN_CSOB, PLAN_VSOB, N_PL_C, 
 N_PL_V, N_PL_CS, N_PL_VS, D_PL_C, D_PL_V, 
 D_PL_CS, D_PL_VS, NORM_TOT, NORM_MPS, NORM_SOB, 
 KOD_GDPL, TIP_OTGR_2, KOD_NPR_2, EXPORT_2, KOD_GROTP, 
 GROTP, FACT_MON_C, FACT_MON_T, FACT_SUT_C, F_SOBC_SUT, 
 F_SOBC_MON, F_SOBV_MON, FACT_SUT_T)
AS 
SELECT /*+ RULE */
  kls_prod_gu12.NAME_GDPL AS naim_gr,
  kls_prod.ABBR_NPR as naim_pr,
  kls_prod.NORMOTGR,
  kls_prod_gu12.ID AS kod_gr, 
  a."TIP_OTGR",a."KOD_NPR",a."EXPORT",
  nvl(V_GD_VYP_GDPLAN.TIP_OTGR_1,0) AS TIP_OTGR_1, 
  nvl(V_GD_VYP_GDPLAN.KOD_NPR_1,0) AS KOD_NPR_1, 
  nvl(V_GD_VYP_GDPLAN.EXPORT_1,0) AS EXPORT_1, 
  nvl(V_GD_VYP_GDPLAN.PLAN_CIST,0) AS plan_cist, 
  nvl(V_GD_VYP_GDPLAN.PLAN_VES,0)AS PLAN_VES, 
  nvl(V_GD_VYP_GDPLAN.PLAN_CSOB,0) As PLAN_CSOB, 
  nvl(V_GD_VYP_GDPLAN.PLAN_VSOB,0) as PLAN_VSOB, 
  nvl(V_GD_VYP_GDPLAN.N_PL_C,0) as N_PL_C, 
  nvl(V_GD_VYP_GDPLAN.N_PL_V,0) As N_PL_V, 
  nvl(V_GD_VYP_GDPLAN.N_PL_CS,0) AS N_PL_CS, 
  nvl(V_GD_VYP_GDPLAN.N_PL_VS,0) AS N_PL_VS, 
  nvl(V_GD_VYP_GDPLAN.D_PL_C,0) AS D_PL_C, 
  nvl(V_GD_VYP_GDPLAN.D_PL_V,0) AS D_PL_V, 
  nvl(V_GD_VYP_GDPLAN.D_PL_CS,0) AS D_PL_CS, 
  nvl(V_GD_VYP_GDPLAN.D_PL_VS,0) AS D_PL_VS, 
  nvl(V_GD_VYP_GDPLAN.NORM_TOT,0) AS NORM_TOT, 
  nvl(V_GD_VYP_GDPLAN.NORM_MPS,0) as NORM_MPS, 
  nvl(V_GD_VYP_GDPLAN.NORM_SOB,0) AS NORM_SOB, 
  nvl(V_GD_VYP_GDPLAN.KOD_GDPL,0) As KOD_GDPL, 
  nvl(V_GD_VYP.TIP_OTGR_2,0) AS TIP_OTGR_2, 
  nvl(V_GD_VYP.KOD_NPR_2,0) AS KOD_NPR_2, 
  nvl(V_GD_VYP.EXPORT_2,0) AS EXPORT_2, 
  V_GD_VYP.KOD_GROTP AS KOD_GROTP, 
  V_GD_VYP.GROTP AS GROTP, 
  nvl(V_GD_VYP.FACT_MON_C,0) AS FACT_MON_C, 
  nvl(V_GD_VYP.FACT_MON_T,0) AS FACT_MON_T, 
  nvl(V_GD_VYP.FACT_SUT_C,0) AS FACT_SUT_C, 
  nvl(V_GD_VYP.F_SOBC_SUT,0) AS F_SOBC_SUT, 
  nvl(V_GD_VYP.F_SOBC_MON,0) AS F_SOBC_MON, 
  nvl(V_GD_VYP.F_SOBV_MON,0) AS F_SOBV_MON, 
  nvl(V_GD_VYP.FACT_SUT_T,0) AS FACT_SUT_T
  FROM
(SELECT DISTINCT * FROM
(SELECT tip_otgr_2 AS tip_otgr,kod_npr_2 AS kod_npr, export_2 AS export FROM V_GD_VYP
 UNION ALL
 SELECT tip_otgr_1,kod_npr_1,export_1 FROM V_GD_VYP_GDPLAN)) a,V_GD_VYP_GDPLAN,V_GD_VYP,kls_prod,kls_prod_gu12
 WHERE 
   a.tip_otgr=V_GD_VYP_GDPLAN.tip_otgr_1(+) and
   a.kod_npr=V_GD_VYP_GDPLAN.kod_npr_1(+) and
   a.export=V_GD_VYP_GDPLAN.export_1(+) and
   a.tip_otgr=V_GD_VYP.tip_otgr_2(+) and
   a.kod_npr=V_GD_VYP.kod_npr_2(+) and
   a.export=V_GD_VYP.export_2(+) and
   a.kod_npr=kls_prod.ID_NPR and
   kls_prod.PROD_GU12_ID=kls_prod_gu12.ID
ORDER BY
  TIP_OTGR,ORDER_GDPL,EXPORT;


--
-- V_GU12_CARD_DATE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_DATE
(DATE_O, SOBVAG, KOL_PLAN, VES_PLAN, KOL_FAKT, 
 VES_FAKT)
AS 
SELECT
DATE_O
,SOBVAG
,SUM(A.KOL_PLAN) AS KOL_PLAN
,SUM(A.VES_PLAN) AS VES_PLAN
,SUM(A.KOL_FAKT) AS KOL_FAKT
,SUM(A.VES_FAKT) AS VES_FAKT
FROM V_GU12_CARD_N A
GROUP BY DATE_O,SOBVAG
ORDER BY DATE_O,SOBVAG;


--
-- V_GU12_CARD_DATE_N  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_DATE_N
(DATE_O, KOL_PLAN, VES_PLAN, KOL_FAKT, VES_FAKT, 
 KOL_PLAN_P, KOL_PLAN_S, VES_PLAN_P, VES_PLAN_S, KOL_FAKT_P, 
 KOL_FAKT_S, VES_FAKT_P, VES_FAKT_S)
AS 
SELECT
DATE_O
,SUM(A.KOL_PLAN) AS KOL_PLAN
,SUM(A.VES_PLAN) AS VES_PLAN
,SUM(A.KOL_FAKT) AS KOL_FAKT
,SUM(A.VES_FAKT) AS VES_FAKT
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_PLAN ELSE 0 END) AS KOL_PLAN_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_PLAN END) AS KOL_PLAN_S
,SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_PLAN ELSE 0 END) AS VES_PLAN_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_PLAN END) AS VES_PLAN_S
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_FAKT ELSE 0 END) AS KOL_FAKT_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_FAKT END) AS KOL_FAKT_S
,SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_FAKT ELSE 0 END) AS VES_FAKT_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_FAKT END) AS VES_FAKT_S
FROM V_GU12_CARD_N A
GROUP BY DATE_O
ORDER BY DATE_O;


--
-- V_GU12_CARD_DATE_STAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_DATE_STAN
(DATE_O, STAN_ID, SOBVAG, KOL_PLAN, VES_PLAN, 
 KOL_FAKT, VES_FAKT)
AS 
SELECT
DATE_O
,STAN_ID
,SOBVAG
,SUM(A.KOL_PLAN) AS KOL_PLAN
,SUM(A.VES_PLAN) AS VES_PLAN
,SUM(A.KOL_FAKT) AS KOL_FAKT
,SUM(A.VES_FAKT) AS VES_FAKT
FROM V_GU12_CARD_N A
GROUP BY DATE_O,STAN_ID,SOBVAG
ORDER BY DATE_O,STAN_ID,SOBVAG;


--
-- V_GU12_CARD_DATE_STAN_N  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_GU12_CARD_DATE_STAN_N
(DATE_O, STAN_ID, KOL_PLAN, VES_PLAN, KOL_FAKT, 
 VES_FAKT, KOL_PLAN_P, KOL_PLAN_S, VES_PLAN_P, VES_PLAN_S, 
 KOL_FAKT_P, KOL_FAKT_S, VES_FAKT_P, VES_FAKT_S)
AS 
SELECT
DATE_O
,STAN_ID
,SUM(A.KOL_PLAN) AS KOL_PLAN
,SUM(A.VES_PLAN) AS VES_PLAN
,SUM(A.KOL_FAKT) AS KOL_FAKT
,SUM(A.VES_FAKT) AS VES_FAKT
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_PLAN ELSE 0 END) AS KOL_PLAN_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_PLAN END) AS KOL_PLAN_S
,SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_PLAN ELSE 0 END) AS VES_PLAN_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_PLAN END) AS VES_PLAN_S
,SUM(CASE WHEN A.SOBVAG='П' THEN A.KOL_FAKT ELSE 0 END) AS KOL_FAKT_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.KOL_FAKT END) AS KOL_FAKT_S
,SUM(CASE WHEN A.SOBVAG='П' THEN A.VES_FAKT ELSE 0 END) AS VES_FAKT_P
,SUM(CASE WHEN A.SOBVAG='П' THEN 0 ELSE A.VES_FAKT END) AS VES_FAKT_S
FROM V_GU12_CARD_N A
GROUP BY DATE_O,STAN_ID
ORDER BY DATE_O,STAN_ID;


--
-- V_KTU_UNP_1  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KTU_UNP_1
(YY, MM, KOD_PLAT, NAME_PLAT, KOD_PROD, 
 NAME_PROD, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, 
 VES_KTU, NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, 
 DATE_END, MAX_DATE_NAR, CHECK_DATE)
AS 
SELECT 
  KTU.YY,
  KTU.MM,
  KTU.kod_plat,
  KTU.NAME_PLAT, 
  KTU.kod_prod,
  KTU.NAME_PROD, 
  TipError(ktu.name_prod,unp.name_prod,ktu.nom_zd,unp.nom_zd,ktu.nariad,unp.nariad,ktu.doveren,unp.doveren,ktu.ves,unp.ves,ktu.date_end,unp.date_end) AS TIP_ERROR, 
  KTU.nom_zd AS NOM_ZD_KTU, 
  KTU.NARIAD AS NARIAD_KTU, 
  KTU.DOVEREN AS DOVEREN_KTU, 
  KTU.VES AS VES_KTU, 
  UNP.nom_zd AS NOM_ZD_UNP, 
  UNP.NARIAD AS NARIAD_UNP, 
  UNP.DOVEREN AS DOVEREN_UNP, 
  UNP.VES AS VES_UNP, 
  KTU.date_end, 
  UNP.date_end AS MAX_DATE_NAR, 
  '' AS CHECK_DATE
FROM V_NARIAD_KTU KTU, V_NARIAD_UNP UNP 
WHERE
  KTU.kod_prod = UNP.kod_prod (+) AND 
  KTU.DOVEREN = UNP.DOVEREN (+) AND 
  KTU.NARIAD = UNP.NARIAD (+) AND 
  KTU.kod_plat = UNP.kod_plat (+) AND 
  KTU.nom_zd = UNP.nom_zd (+) AND
  KTU.YY = UNP.YY (+) AND
  KTU.MM = UNP.MM (+) AND
  (KTU.VES Is NOT Null OR KTU.VES<>0) AND 
  (UNP.VES Is Null OR UNP.VES=0);


--
-- V_KTU_UNP_2  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KTU_UNP_2
(YY, MM, KOD_PLAT, NAME_PLAT, KOD_PROD, 
 NAME_PROD, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, 
 VES_KTU, NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, 
 DATE_END, MAX_DATE_NAR, CHECK_DATE)
AS 
SELECT 
  UNP.YY,
  UNP.MM,
  UNP.kod_plat,
  UNP.name_plat, 
  UNP.kod_prod, 
  UNP.name_prod,
  TipError(ktu.name_prod,unp.name_prod,ktu.nom_zd,unp.nom_zd,ktu.nariad,unp.nariad,ktu.doveren,unp.doveren,ktu.ves,unp.ves,ktu.date_end,unp.date_end) AS TIP_ERROR, 
  KTU.nom_zd AS NOM_ZD_KTU, 
  KTU.NARIAD AS NARIAD_KTU, 
  KTU.DOVEREN AS DOVEREN_KTU, 
  KTU.VES AS VES_KTU, 
  UNP.nom_zd AS NOM_ZD_UNP, 
  UNP.NARIAD AS NARIAD_UNP, 
  UNP.DOVEREN AS DOVEREN_UNP, 
  UNP.VES AS VES_UNP, 
  KTU.date_end, 
  UNP.date_end AS MAX_DATE_NAR, 
  '' AS CHECK_DATE
FROM V_NARIAD_KTU KTU, V_NARIAD_UNP UNP 
WHERE
  KTU.DOVEREN (+) = UNP.DOVEREN AND 
  KTU.NARIAD (+) = UNP.NARIAD AND 
  KTU.kod_plat (+) = UNP.kod_plat AND 
  KTU.nom_zd (+) = UNP.nom_zd AND
  KTU.YY (+) = UNP.YY AND
  KTU.MM (+) = UNP.MM 
ORDER BY UNP.YY, UNP.MM, UNP.kod_plat, UNP.kod_prod, UNP.nom_zd, UNP.doveren, UNP.nariad;


--
-- V_LUKREP_KVIT_REES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_KVIT_REES
(IS_AGENT, SOBSTV, PLAT_ID, PLAT_INN, PLAT_NAME, 
 PLAT_ADDR, DOG_ID, DOG_NUMBER, DOG_DATE, NOM_DOK, 
 NOM_SF, ORIG_NOM_SF, NPO_SF, DATE_VYP_SF, PROD_ID_NPR, 
 PROD_NAME, VES, PROD_EDIZ, NUM_KVIT, DATE_KVIT, 
 DATE_MOS, SUMMA_TARIF, SUMMA_TARIF_NDS)
AS 
SELECT
  v_bills.IS_AGENT,
  DECODE(KLS_DOG.DOG_NUMBER,'01М1254',2,1) AS SOBSTV,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID) AS PLAT_ID,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.INN,PLAT.INN) AS PLAT_INN,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME) AS PLAT_NAME,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.CITY_J || ',' || SNP_PLAT.ADDRESS_J,PLAT.CITY_J || ',' || PLAT.ADDRESS_J) AS PLAT_ADDR,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',v_bills.SNP_DOG_ID,v_bills.DOG_ID),
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_NUMBER,KLS_DOG.DOG_NUMBER),
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_DATE,KLS_DOG.DOG_DATE),
  v_bills.NOM_DOK,
  v_bills.NOM_SF,
  v_bills.ORIG_NOM_SF,
  v_bills.NPO_SF,
  v_bills.DATE_VYP_SF AS DATE_VYP_SF,
  v_bills.PROD_ID_NPR,
  KLS_PROD.NAME_NPR AS PROD_NAME,
  KV.VES,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KV.NUM_KVIT,
  v_bills.DATE_KVIT,
  v_bills.DATE_MOS,
  KV.TARIF+ROUND(KV.TARIF * FOR_BILLS.GetNDSValue(v_bills.DATE_KVIT)/100,2),
  ROUND(KV.TARIF * FOR_BILLS.GetNDSValue(v_bills.DATE_KVIT)/100,2)
FROM v_bills, KLS_PREDPR PLAT, KLS_DOG, KLS_PROD, KLS_DOG SNP_DOG, KLS_PREDPR SNP_PLAT,
  (SELECT KVIT.BILL_ID,
          KVIT.NUM_KVIT,
		  KVIT.DATE_KVIT,
          SUM(KVIT.VES_BRUTTO) AS VES,
		  SUM(KVIT.TARIF+KVIT.TARIF_GUARD) AS TARIF
 	 FROM KVIT
	WHERE KVIT.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	GROUP BY KVIT.BILL_ID,KVIT.NUM_KVIT,KVIT.DATE_KVIT) KV
WHERE v_bills.NOM_DOK = KV.BILL_ID
  AND v_bills.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND v_bills.SNP_DOG_ID = SNP_DOG.ID
  AND SNP_DOG.PREDPR_ID = SNP_PLAT.ID
  AND v_bills.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND v_bills.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy');


--
-- V_LUKREP_SF_NEW_BEFORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_NEW_BEFORE
(NUM_5_DAY, IS_KORR, IS_AGENT, IS_SILOV, SOBSTV, 
 PLAT_ID, PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, 
 DOG_NUMBER, DOG_DATE, DATE_KVIT, DATE_MOS, DATE_CHN_SOB, 
 NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, OLD_NOM_SF, 
 NPO_SF, DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, PROD_ID_NPR, 
 PROD_NAME, PROD_EDIZ, KVIT_ID, VES, VES_KVIT, 
 CNT_KVIT, SVED_NUM, NUM_KVIT, NOM_AKT, NUM_CIST, 
 STANOTP_ID, STAN_NAME, HRAN_ID, HRAN_NAME, POLUCH_ID, 
 POLUCH_NAME, POLUCH_ADDR, IS_SF, CENA_BN, CENA, 
 SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, 
 SUMMA_VOZN_11_BN, SUMMA_VOZN_12_BN, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, 
 SUMMA_OHRANA, SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, 
 NACENKA, SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, 
 KOL_DN, NAZN_OTG_ID, SNP_PLAT_ID, SNP_PLAT_NAME, RAST, 
 NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, KORR_PROD, STRAH_NOM_SF, 
 STRAH_SUMMA_DOK, VID_USL_ID)
AS 
SELECT /*+ ALL_ROWS INDEX(MONTH MONTH_PK) INDEX(STAN STAN_PK) INDEX(PLAT PREDPR_PK) INDEX(POLUCH PREDPR_PK)
                    INDEX(SNP_PLAT PREDPR_PK) INDEX(KLS_VAGOWNER VAGOWNER_PK) INDEX(USL_DOG USL_DOG_PK)
     INDEX(KLS_DOG DOG_PK) INDEX(SNP_DOG DOG_PK) INDEX (KLS_PROD PROD_PK) INDEX(gr_prod PROD_PK)
     INDEX(KLS_VAGOWNER VAGOWNER_PK) */
  TO_NUMBER(TO_CHAR(v_bills.date_mos,'MM'))*100+v_bills.NUM_5_DAY as NUM_5_DAY,
  DECODE(TRUNC(v_bills.DATE_KVIT,'MONTH'),TRUNC(v_bills.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(v_bills.date_kvit,'MM'))*100+v_bills.KORR_5_DAY) AS IS_KORR,
  v_bills.IS_AGENT,
  0 AS IS_SILOV,
  (CASE
     WHEN KLS_DOG.DOG_NUMBER='01М1254' THEN 2
  WHEN v_bills.PROD_ID_NPR='10001' AND v_bills.DATE_KVIT<TO_DATE('01.01.2004','dd.mm.yyyy') THEN NVL(b_p.SOBSTV,1)
  WHEN v_bills.PROD_ID_NPR='10001' AND v_bills.DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy') THEN 5
  WHEN v_bills.PROD_ID_NPR<'10100' THEN 5
  ELSE NVL(b_p.SOBSTV,1)
   END) AS SOBSTV,
/*  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID) AS PLAT_ID,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.INN,PLAT.INN) AS PLAT_INN,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME) AS PLAT_NAME,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.CITY_J || ',' || SNP_PLAT.ADDRESS_J,PLAT.CITY_J || ',' || PLAT.ADDRESS_J) AS PLAT_ADDR,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',v_bills.SNP_DOG_ID,v_bills.DOG_ID) as DOG_ID,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_NUMBER,KLS_DOG.DOG_NUMBER) as DOG_NUMBER,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_DATE,KLS_DOG.DOG_DATE) as DOG_DATE,*/
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.INN AS PLAT_INN,
  PLAT.PREDPR_NAME AS PLAT_NAME,
  PLAT.CITY_J || ',' || PLAT.ADDRESS_J AS PLAT_ADDR,
  v_bills.DOG_ID as DOG_ID,
  KLS_DOG.DOG_NUMBER as DOG_NUMBER,
  KLS_DOG.DOG_DATE as DOG_DATE,
  v_bills.DATE_KVIT,
  v_bills.DATE_MOS,
  v_bills.DATE_KVIT AS DATE_CHN_SOB,
  v_bills.NOM_DOK,
  v_bills.NOM_SF,
  v_bills.ORIG_NOM_SF,
  NVL(v_bills.OLD_NOM_DOK,0),
  Get_Old_sf(v_bills.NOM_DOK,v_bills.ORIG_NOM_SF,v_bills.OLD_NOM_DOK,v_bills.OLD_NOM_SF) as OLD_SF,
  v_bills.NPO_SF,
  v_bills.DATE_VYP_SF AS DATE_VYP_SF,
  gr_prod.ID_NPR AS gr_npr_id,
  gr_prod.NAME_NPR AS gr_npr_name,
  v_bills.PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  V_KVIT_ALL.ID,
  DECODE(NVL(b_p.VES,0),0,0,V_KVIT_ALL.VES_BRUTTO) AS VES,
  V_KVIT_ALL.VES_BRUTTO AS VES_KVIT,
  1 as CNT_KVIT,
  V_KVIT_ALL.SVED_NUM,
  V_KVIT_ALL.NUM_KVIT,
  (CASE
    WHEN v_bills.IS_AGENT=2 AND v_bills.DATE_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN TO_CHAR(v_bills.ORIG_NOM_SF-6000000)
 WHEN v_bills.IS_AGENT=4 THEN TO_CHAR(v_KVIT_ALL.NUM_AKT)
 ELSE ''
   END) AS NOM_AKT,
  DECODE(MONTH.LOAD_ABBR,'САМ',V_KVIT_ALL.NUM_DOVER,V_KVIT_ALL.NUM_CIST) AS NUM_CIST,
  MONTH.STANOTP_ID,
  DECODE(MONTH.LOAD_ABBR,'САМ','САМОВЫВОЗ',DECODE(STANOTP.ID,1,'РЕЗЕРВУАР',STANOTP.STAN_NAME)) as STAN_NAME,
--  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID),99999),99999) AS HRAN_ID,
--  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME),' '),' ') AS HRAN_NAME,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.ID,8),8) AS HRAN_ID,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.PREDPR_NAME,'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"'),'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"') AS HRAN_NAME,
  MONTH.POLUCH_ID,
  POLUCH.PREDPR_NAME AS POLUCH_NAME,
  POLUCH.CITY_P || ',' || POLUCH.ADDRESS_P AS POLUCH_ADDR,
  0 AS IS_SF,
  NVL(V_KVIT_ALL.CENA,0) AS CENA_BN,
  ROUND(NVL(V_KVIT_ALL.CENA,0)*(100+FOR_BILLS.GetNDSValue(v_bills.date_kvit))/100,2) as CENA,
  NVL(V_KVIT_ALL.SUM_PROD,0) AS SUMMA_PROD_BN,
  NVL(V_KVIT_ALL.SUM_PROD_NDS,0) AS SUMMA_PROD_NDS,
  NVL(V_KVIT_ALL.SUM_PROD_NDS,0)+NVL(V_KVIT_ALL.SUM_PROD,0) AS SUMMA_PROD,
  NVL(V_KVIT_ALL.SUM_VOZN11,0)+NVL(V_KVIT_ALL.SUM_VOZN12,0)+NVL(V_KVIT_ALL.SUM_VOZN11_NDS,0)+NVL(V_KVIT_ALL.SUM_VOZN12_NDS,0) AS SUMMA_AGEN,
  NVL(V_KVIT_ALL.SUM_VOZN11_NDS,0)+NVL(V_KVIT_ALL.SUM_VOZN12_NDS,0) AS SUMMA_AGEN_NDS,
  NVL(V_KVIT_ALL.SUM_VOZN11,0) AS SUMMA_VOZN_11_BN,
  NVL(V_KVIT_ALL.SUM_VOZN12,0) AS SUMMA_VOZN_12_BN,
  DECODE(NVL(V_KVIT_ALL.sum_vozn11,0),0,
      DECODE(NVL(V_KVIT_ALL.sum_vozn12,0),0,0,NVL(V_KVIT_ALL.sum_vozn12,0)-(NVL(V_KVIT_ALL.TARIF_ALT,0)+NVL(V_KVIT_ALL.TARIF,0))),
   NVL(V_KVIT_ALL.sum_vozn11,0)) as SUMMA_VOZN_BN,
  NVL(V_KVIT_ALL.TARIF,0)+NVL(V_KVIT_ALL.TARIF_NDS,0) AS SUMMA_TARIF,
  NVL(V_KVIT_ALL.TARIF_NDS,0) AS SUMMA_TARIF_NDS,
  NVL(V_KVIT_ALL.TARIF_GUARD,0)+NVL(V_KVIT_ALL.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA,
  NVL(V_KVIT_ALL.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA_NDS,
  NVL(V_KVIT_ALL.TARIF_ALT,0) as TARIF_MPS,
  NVL(V_KVIT_ALL.TARIF,0) AS TARIF_KVIT,
  DECODE(NVL(V_KVIT_ALL.sum_vozn12,0),0,0,NVL(V_KVIT_ALL.TARIF_ALT,0)-NVL(V_KVIT_ALL.TARIF,0)) as SUMMA_RAZN_BN,
  NVL(b_p.NACENKA,0) as NACENKA,
  NVL(V_KVIT_ALL.SUM_STRAH,0) AS SUMMA_STRAH,
  NVL(V_KVIT_ALL.SUM_PROD_NDS,0)+NVL(V_KVIT_ALL.SUM_PROD,0)+
    NVL(V_KVIT_ALL.SUM_VOZN11,0)+NVL(V_KVIT_ALL.SUM_VOZN12,0)+NVL(V_KVIT_ALL.SUM_VOZN11_NDS,0)+NVL(V_KVIT_ALL.SUM_VOZN12_NDS,0)+
 NVL(V_KVIT_ALL.TARIF,0)+NVL(V_KVIT_ALL.TARIF_NDS,0)+
 NVL(V_KVIT_ALL.TARIF_GUARD,0)+NVL(V_KVIT_ALL.TARIF_GUARD_NDS,0)+
 NVL(V_KVIT_ALL.SUM_STRAH,0) AS SUMMA_DOK,
  NVL(V_KVIT_ALL.SUM_PROD_NDS,0)+
    NVL(V_KVIT_ALL.SUM_VOZN11_NDS,0)+NVL(V_KVIT_ALL.SUM_VOZN12_NDS,0)+
 NVL(V_KVIT_ALL.TARIF_NDS,0)+
 NVL(V_KVIT_ALL.TARIF_GUARD_NDS,0) AS SUMMA_DOK_NDS,
  DECODE(v_bills.PROTO_NUM,NULL,SUBSTR(Get_Price_Protokol_Fast(v_bills.nom_dok,v_bills.PROD_ID_NPR,v_bills.date_kvit,v_bills.orig_dog_id,v_bills.orig_usl_number,v_bills.date_vyp_sf,v_bills.nom_sf,v_bills.old_nom_sf),1,100),v_bills.PROTO_NUM || ' от ' || TO_CHAR(v_bills.PROTO_DATE,'dd.mm.yy') || 'г.') as PROTO_NUM,
  v_bills.KOL_DN,
  MONTH.NAZN_OTG_ID,
  SNP_DOG.PREDPR_ID,
  SNP_PLAT.PREDPR_NAME,
  STAN.RAST,
  DECODE(NVL(V_KVIT_ALL.SUM_STRAH,0),0,' ',TO_CHAR(v_bills.ORIG_NOM_SF-6000000)) as NUM_STRAH,
  NVL(DECODE(v_bills.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) as USL_SUM,
  TO_NUMBER(DECODE(MONTH.LOAD_ABBR,'САМ',NULL,'РЕЗ',NULL,'ТРУ',NULL,KLS_VAGOWNER.VAGOWN_TYP_ID)) as VAGOWN_TYP_ID,
  v_bills.KORR_PROD,
  strah_info.NOM_SF,
  strah_info.SUMMA_DOK,
  USL_DOG.VID_USL_ID
FROM v_bills, KLS_PREDPR PLAT, KLS_PREDPR POLUCH, KLS_DOG, KLS_PROD, KLS_PROD gr_prod, V_KVIT_ALL, MONTH, KLS_STAN STANOTP, KLS_STAN STAN, KLS_DOG SNP_DOG, KLS_PREDPR SNP_PLAT, KLS_PREDPR POTREB, USL_DOG, KLS_VAGOWNER,
  (
  SELECT a.BILL_ID,COUNT(*) AS CNT
     FROM (
    SELECT /*+ ALL_ROWS INDEX(KVIT KVIT_DATE_KVIT_BILLS_I) */ BILL_ID,ID FROM KVIT
       WHERE KVIT.DATE_KVIT>=TO_DATE('01.06.2005','dd.mm.yyyy')
       UNION ALL
       SELECT /*+ ALL_ROWS INDEX(DOP_KVIT DOP_KVIT_DATE_KVIT_BILLS_I) */ BILL_ID,ID FROM DOP_KVIT
       WHERE DOP_KVIT.DATE_KVIT>=TO_DATE('01.01.2005','dd.mm.yyyy')
   ) a GROUP BY a.BILL_ID HAVING COUNT(*)<>1
  ) KV,
  (
  SELECT
     v_bill_pos.NOM_DOK,
  DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,DECODE(v_bill_pos.OWNERSHIP_ID,1,1,3),1) AS SOBSTV,
--  1 AS SOBSTV,
  MAX(v_bill_pos.NACENKA) as NACENKA,
  SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.VES,0)) AS ves
   FROM v_bill_pos
   WHERE summa<>0
   GROUP BY
     v_bill_pos.NOM_DOK
  ,DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,DECODE(v_bill_pos.OWNERSHIP_ID,1,1,3),1)
  ) b_p,
  ( /* Справочная информация - счета на страховку */
   select /*+  */
     a.nom_dok, -- СФ на вознаграждение по страховке
     b.nom_sf, -- Счет на страховку
     b.summa_dok
   from bills a /* Вознаграждение */ , bills b /* Страховка */
   where a.prod_id_npr='10042'
     and b.prod_id_npr='10041'
     and a.dog_id=b.dog_id
     and a.date_kvit=b.date_kvit
 ) strah_info
WHERE V_KVIT_ALL.BILL_ID(+) = v_bills.NOM_DOK
  AND V_KVIT_ALL.NOM_ZD = MONTH.NOM_ZD
  AND v_bills.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND KLS_PROD.ID_GROUP_NPR = gr_prod.ID_NPR
  AND v_bills.SNP_DOG_ID = SNP_DOG.ID(+)
  AND SNP_DOG.PREDPR_ID = SNP_PLAT.ID(+)
  AND MONTH.POLUCH_ID = POLUCH.ID
  AND MONTH.STANOTP_ID = STANOTP.ID
  AND MONTH.STAN_ID = STAN.ID
  AND v_bills.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND v_bills.DATE_KVIT>=TO_DATE('01.06.2005','dd.mm.yyyy')
  AND v_bills.NOM_DOK=KV.BILL_ID
  AND KV.CNT<>1
  AND v_bills.nom_dok = b_p.nom_dok (+)
  AND MONTH.POTREB_ID = POTREB.ID (+)
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  AND V_KVIT_ALL.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
--  AND (v_BILLS.PROD_ID_NPR<>'10001' OR v_BILLS.DATE_KVIT<=TO_DATE('31.12.2003','dd.mm.yyyy'))
  AND v_BILLS.PROD_ID_NPR<>'10041'
  AND v_bills.NOM_DOK=strah_info.nom_dok (+)
--  and v_bills.nom_sf=107084

UNION ALL
SELECT /*+ INDEX(MONTH MONTH_PK) INDEX(STAN STAN_PK) INDEX(PLAT PREDPR_PK) INDEX(POLUCH PREDPR_PK)
                    INDEX(SNP_PLAT PREDPR_PK) INDEX(KLS_VAGOWNER VAGOWNER_PK) INDEX(USL_DOG USL_DOG_PK)
     INDEX(KLS_DOG DOG_PK) INDEX(SNP_DOG DOG_PK) INDEX (KLS_PROD PROD_PK) INDEX(gr_prod PROD_PK)
     INDEX(KLS_VAGOWNER VAGOWNER_PK) */
  TO_NUMBER(TO_CHAR(v_bills.date_mos,'MM'))*100+v_bills.NUM_5_DAY,
  DECODE(TRUNC(v_bills.DATE_KVIT,'MONTH'),TRUNC(v_bills.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(v_bills.date_kvit,'MM'))*100+v_bills.KORR_5_DAY) AS IS_KORR,
  v_bills.IS_AGENT,
  0,
  (CASE
     WHEN KLS_DOG.DOG_NUMBER='01М1254' THEN 2
  WHEN v_bills.PROD_ID_NPR='10001' AND v_bills.DATE_KVIT<TO_DATE('01.01.2004','dd.mm.yyyy') THEN NVL(b_p.SOBSTV,1)
  WHEN v_bills.PROD_ID_NPR='10001' AND v_bills.DATE_KVIT>=TO_DATE('01.01.2004','dd.mm.yyyy') THEN 5
  WHEN v_bills.PROD_ID_NPR<'10100' THEN 5
  ELSE NVL(b_p.SOBSTV,1)
   END) AS SOBSTV,
/*  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID) AS PLAT_ID,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.INN,PLAT.INN) AS PLAT_INN,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME) AS PLAT_NAME,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.CITY_J || ',' || SNP_PLAT.ADDRESS_J,PLAT.CITY_J || ',' || PLAT.ADDRESS_J) AS PLAT_ADDR,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',v_bills.SNP_DOG_ID,v_bills.DOG_ID),
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_NUMBER,KLS_DOG.DOG_NUMBER),
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_DATE,KLS_DOG.DOG_DATE),*/
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.INN AS PLAT_INN,
  PLAT.PREDPR_NAME AS PLAT_NAME,
  PLAT.CITY_J || ',' || PLAT.ADDRESS_J AS PLAT_ADDR,
  v_bills.DOG_ID as DOG_ID,
  KLS_DOG.DOG_NUMBER as DOG_NUMBER,
  KLS_DOG.DOG_DATE as DOG_DATE,
  v_bills.DATE_KVIT,
  v_bills.DATE_MOS,
  v_bills.DATE_KVIT,
  v_bills.NOM_DOK,
  v_bills.NOM_SF,
  v_bills.ORIG_NOM_SF,
--  DECODE(SIGN(v_bills.SUMMA_DOK),-1,'',v_bills.OLD_NOM_SF),
  NVL(v_bills.OLD_NOM_DOK,0),
  Get_Old_sf(v_bills.NOM_DOK,v_bills.ORIG_NOM_SF,v_bills.OLD_NOM_DOK,v_bills.OLD_NOM_SF),
  v_bills.NPO_SF,
  v_bills.DATE_VYP_SF,
  NVL(gr_prod.ID_NPR,' ') AS gr_npr_id,
  NVL(gr_prod.NAME_NPR,' ') AS gr_npr_name,
  v_bills.PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ,
  NVL(DECODE(KV.CNT,1,KV.ID,0),0),
  NVL(b_p.ves,0),
  NVL(KV.VES,0) AS VES_KVIT,
  NVL(KV.CNT,0),
  NVL(DECODE(KV.CNT,1,KV.SVED_NUM,0),0),
  NVL(DECODE(KV.CNT,1,KV.NUM_KVIT,0),0),
  (CASE
    WHEN v_bills.IS_AGENT=2 AND v_bills.DATE_KVIT<TO_DATE('01.01.2005','dd.mm.yyyy') THEN TO_CHAR(v_bills.ORIG_NOM_SF-6000000)
 WHEN v_bills.IS_AGENT=4 THEN TO_CHAR(kv.NUM_AKT)
 ELSE ''
   END) AS NOM_AKT,
  NVL(DECODE(KV.CNT,1,DECODE(MONTH.LOAD_ABBR,'САМ',KV.NUM_DOVER,KV.NUM_CIST),' '),' '),
  NVL(MONTH.STANOTP_ID,0),
  NVL(DECODE(MONTH.LOAD_ABBR,'САМ','САМОВЫВОЗ',DECODE(STANOTP.ID,1,'РЕЗЕРВУАР',STANOTP.STAN_NAME)),' '),
--  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID),99999),99999) AS HRAN_ID,
--  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME),' '),' ') AS HRAN_NAME,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.ID,8),8) AS HRAN_ID,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.PREDPR_NAME,'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"'),'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"') AS HRAN_NAME,
  NVL(MONTH.POLUCH_ID,0),
  NVL(POLUCH.PREDPR_NAME,' '),
  DECODE(NVL(MONTH.POLUCH_ID,0),0,' ',POLUCH.CITY_P || ',' || POLUCH.ADDRESS_P) AS POLUCH_ADDR,
  1 AS IS_SF,
  NVL(b_p.cena_bn,0),
  ROUND(NVL(b_p.cena_bn,0)*(100+FOR_BILLS.GetNDSValue(v_bills.date_kvit))/100,2),
  NVL(b_p.summa_prod_bn,0),
  NVL(b_p.summa_prod_nds,0),
  NVL(b_p.summa_prod,0),
  NVL(b_p.summa_agen,0),
  NVL(b_p.summa_agen_nds,0),
  NVL(b_p.summa_vozn_11_bn,0),
  NVL(b_p.summa_vozn_12_bn,0),
  DECODE(NVL(b_p.summa_vozn_11_bn,0),0,
      DECODE(NVL(b_p.summa_vozn_12_bn,0),0,0,NVL(b_p.summa_vozn_12_bn,0)-(NVL(kv.TARIF_MPS,0)+NVL(kv.TARIF_KVIT,0))),
   NVL(b_p.summa_vozn_11_bn,0)) as SUMMA_VOZN_BN,
  NVL(b_p.summa_tarif,0),
  NVL(b_p.summa_tarif_nds,0),
  NVL(b_p.summa_ohrana,0),
  NVL(b_p.summa_ohrana_nds,0),
  NVL(kv.TARIF_MPS,0) as TARIF_MPS,
  NVL(kv.TARIF_KVIT,0) as TARIF_KVIT,
  DECODE(NVL(b_p.summa_vozn_12_bn,0),0,0,NVL(kv.TARIF_MPS,0)-NVL(kv.TARIF_KVIT,0)) as SUMMA_RAZN_BN,
  NVL(b_p.NACENKA,0) as NACENKA,
  NVL(b_p.summa_strah,0),
  NVL(b_p.summa_dok,0),
  NVL(b_p.summa_dok_nds,0),
  DECODE(v_bills.PROTO_NUM,NULL,SUBSTR(Get_Price_Protokol_Fast(v_bills.nom_dok,v_bills.PROD_ID_NPR,v_bills.date_kvit,v_bills.orig_dog_id,v_bills.orig_usl_number,v_bills.date_vyp_sf,v_bills.nom_sf,v_bills.old_nom_sf),1,100),v_bills.PROTO_NUM || ' от ' || TO_CHAR(v_bills.PROTO_DATE,'dd.mm.yy') || 'г.') as PROTO_NUM,
  v_bills.kol_dn,
  MONTH.NAZN_OTG_ID,
  SNP_DOG.PREDPR_ID,
  SNP_PLAT.PREDPR_NAME,
  STAN.RAST,
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(v_bills.ORIG_NOM_SF-6000000)) as NUM_STRAH,
  NVL(DECODE(v_bills.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) as USL_SUM,
  TO_NUMBER(DECODE(MONTH.LOAD_ABBR,'САМ',NULL,'РЕЗ',NULL,'ТРУ',NULL,KV.VAGOWN_TYP_ID)) as VAGOWN_TYP_ID,
  v_bills.KORR_PROD,
  strah_info.NOM_SF,
  strah_info.SUMMA_DOK,
  USL_DOG.VID_USL_ID
FROM v_bills, KLS_PREDPR PLAT, KLS_PREDPR POLUCH, KLS_DOG, KLS_PROD, KLS_PROD gr_prod, MONTH, KLS_STAN STANOTP, KLS_STAN STAN,KLS_DOG SNP_DOG, KLS_PREDPR SNP_PLAT, KLS_PREDPR POTREB, USL_DOG,
  (
  SELECT
     v_bill_pos.NOM_DOK,
  DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,DECODE(v_bill_pos.OWNERSHIP_ID,1,1,3),1) AS SOBSTV,
--     1 AS SOBSTV,
  MAX(v_bill_pos.NACENKA) as NACENKA,
  MAX(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.CENA_BN,0)) AS cena_bn,
  SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.SUMMA-v_bill_pos.SUMMA_NDS20,0)) AS summa_prod_bn,
  SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.SUMMA_NDS20,0)) AS summa_prod_nds,
  SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.SUMMA,0)) AS summa_prod,
  SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.VES,0)) AS ves,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA,12,v_bill_pos.SUMMA,0)) AS summa_agen,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA_NDS20,12,v_bill_pos.SUMMA_NDS20,0)) AS summa_agen_nds,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA-v_bill_pos.SUMMA_NDS20,0)) AS summa_vozn_11_bn,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA,0)) AS summa_vozn_11,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA_NDS20,0)) AS summa_vozn_11_nds,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,12,v_bill_pos.SUMMA-v_bill_pos.SUMMA_NDS20,0)) AS summa_vozn_12_bn,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,12,v_bill_pos.SUMMA,0)) AS summa_vozn_12,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,12,v_bill_pos.SUMMA_NDS20,0)) AS summa_vozn_12_nds,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,10,v_bill_pos.SUMMA,0)) AS summa_tarif,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,10,v_bill_pos.SUMMA_NDS20,0)) AS summa_tarif_nds,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,13,v_bill_pos.SUMMA,0)) AS summa_ohrana,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,13,v_bill_pos.SUMMA_NDS20,0)) AS summa_ohrana_nds,
  SUM(DECODE(v_bill_pos.BILL_POS_ID,20,v_bill_pos.SUMMA,0)) AS summa_strah,
  SUM(v_bill_pos.SUMMA_NDS20) AS summa_dok_nds,
  SUM(v_bill_pos.SUMMA) AS summa_dok
    FROM v_bill_pos
    WHERE summa<>0
 GROUP BY
   v_bill_pos.NOM_DOK
   ,DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,DECODE(v_bill_pos.OWNERSHIP_ID,1,1,3),1)
    ) b_p,
  ( /* Справочная информация - счета на страховку */
   select /*+  */
     a.nom_dok, -- СФ на вознаграждение по страховке
     b.nom_sf, -- Счет на страховку
     b.summa_dok
   from bills a /* Вознаграждение */ , bills b /* Страховка */
   where a.prod_id_npr='10042'
     and b.prod_id_npr='10041'
     and a.dog_id=b.dog_id
     and a.date_kvit=b.date_kvit
  ) strah_info,
  V_LUKREP_KVIT KV
WHERE v_bills.NOM_ZD = MONTH.NOM_ZD(+)
  AND v_bills.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND v_bills.SNP_DOG_ID = SNP_DOG.ID(+)
  AND KLS_PROD.ID_GROUP_NPR = gr_prod.ID_NPR (+)
  AND SNP_DOG.PREDPR_ID = SNP_PLAT.ID(+)
  AND MONTH.POLUCH_ID = POLUCH.ID(+)
  AND MONTH.STANOTP_ID = STANOTP.ID(+)
  AND MONTH.STAN_ID = STAN.ID(+)
  AND v_bills.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND v_bills.NOM_DOK = b_p.NOM_DOK(+)
  AND v_bills.DATE_KVIT>=TO_DATE('01.06.2005','dd.mm.yyyy')
  AND v_bills.NOM_DOK=KV.BILL_ID(+)
  AND MONTH.POTREB_ID = POTREB.ID (+)
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
--  AND (v_BILLS.PROD_ID_NPR<>'10001' OR v_BILLS.DATE_KVIT<=TO_DATE('31.12.2003','dd.mm.yyyy'))
  AND v_BILLS.PROD_ID_NPR<>'10041'
  AND v_bills.NOM_DOK=strah_info.nom_dok (+);


--
-- V_LUKREP_SF_REES_NEW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_REES_NEW
(NUM_5_DAY, IS_KORR, IS_AGENT, SOBSTV, PLAT_ID, 
 PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, DOG_NUMBER, 
 DOG_DATE, NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_SF, 
 NPO_SF, NOM_SCH, DATE_VYP_SF, NOM_AKT, DATE_AKT, 
 PROD_ID_NPR, PROD_NAME, VES, PROD_EDIZ, NUM_KVIT, 
 NUM_DOVER, NUM_KVIT_STR, DATE_KVIT, DATE_MOS, NUM_PASP, 
 NUM_STRAH, CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, 
 SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11, SUMMA_VOZN_11_NDS, 
 SUMMA_VOZN_12, SUMMA_VOZN_12_NDS, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_STRAH, 
 SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, HRAN_ID, HRAN_NAME, 
 KOL_DN, RAST, LUK_PLAT_ID, LUK_PLAT_NAME, LUK_DOG_ID, 
 LUK_DOG_NUMBER, LUK_DOG_DATE, TYPE_DOCUMENT)
AS 
SELECT /*+ ALL_ROWS */
  TO_NUMBER(TO_CHAR(v_bills.date_mos,'MM'))*100+v_bills.NUM_5_DAY,
  DECODE(TRUNC(v_bills.DATE_KVIT,'MONTH'),TRUNC(v_bills.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(v_bills.date_kvit,'MM'))*100+v_bills.KORR_5_DAY) AS IS_KORR,
  V_BILLS.IS_AGENT,
  DECODE(KLS_DOG.DOG_NUMBER,'01М1254',2,
     DECODE(v_bills.PROD_ID_NPR,'10001',DECODE(SIGN(v_bills.DATE_KVIT-TO_DATE('01.01.2004','dd.mm.yyyy')),-1,NVL(b_p.SOBSTV,1),5),
	                            '10009',5,'10003',5,'10006',5,'10041',5,'10042',5,NVL(b_p.SOBSTV,1)
		   )
		) AS SOBSTV,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID) AS PLAT_ID,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.INN,PLAT.INN) AS PLAT_INN,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME) AS PLAT_NAME,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.CITY_J || ',' || SNP_PLAT.ADDRESS_J,PLAT.CITY_J || ',' || PLAT.ADDRESS_J) AS PLAT_ADDR,
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',v_bills.SNP_DOG_ID,v_bills.DOG_ID),
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_NUMBER,KLS_DOG.DOG_NUMBER),
  DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.DOG_DATE,KLS_DOG.DOG_DATE),
  v_bills.NOM_DOK,
  v_bills.NOM_SF,
  v_bills.ORIG_NOM_SF,
  DECODE(SIGN(v_bills.SUMMA_DOK),-1,'',v_bills.OLD_NOM_SF),
  v_bills.NPO_SF,
  TO_CHAR(v_bills.ORIG_NOM_SF-6000000) AS NOM_SCH,
  v_bills.DATE_VYP_SF AS DATE_VYP_SF,
  DECODE(v_bills.IS_AGENT,2,TO_CHAR(v_bills.ORIG_NOM_SF-6000000),'') AS NOM_AKT,
  DECODE(v_bills.IS_AGENT,2,TO_CHAR(v_bills.DATE_KVIT,'dd.mm.yyyy'),'') AS DATE_AKT,
  v_bills.PROD_ID_NPR,
  DECODE(v_bills.PROD_ID_NPR,'10001','Вознаграждение за выполнение поручения по организации транспортировки продукции',
                             '10006','Расходы по организации транспортировки продукции',
                             '10003','Вознаграждение за выполнение поручения по организации транспортировки продукции',
							 '10009','Стоимость услуг по предоставлению жд цистерн',
							 '10042','Вознаграждение за выполнение поручения по страхованию отгруженной продукции',
							 KLS_PROD.NAME_NPR) AS PROD_NAME,
  NVL(KV.ves,0) AS VES,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  NVL(KV.NUM_KVIT,0),
  NVL(KV.NUM_DOVER,' '),
  NVL(DECODE(KV.LOAD_ABBR,'САМ',TO_CHAR(KV.NUM_KVIT)||' (Дов.N_'||KV.NUM_DOVER||')',TO_CHAR(KV.NUM_KVIT)),' ') AS NUM_KVIT_STR,
  v_bills.DATE_KVIT,
  v_bills.DATE_MOS,
  NVL(KV.PASP_NUM,'               '),
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(v_bills.ORIG_NOM_SF-6000000)),
  NVL(b_p.cena_bn,0),
  NVL(b_p.cena,0),
  NVL(b_p.summa_prod_bn,0),
  NVL(b_p.summa_prod_nds,0),
  NVL(b_p.summa_prod,0),
  NVL(b_p.summa_agen,0),
  NVL(b_p.summa_agen_nds,0),
  NVL(b_p.summa_vozn_11,0),
  NVL(b_p.summa_vozn_11_nds,0),
  NVL(b_p.summa_vozn_12,0),
  NVL(b_p.summa_vozn_12_nds,0),
  NVL(b_p.summa_tarif,0),
  NVL(b_p.summa_tarif_nds,0),
  NVL(b_p.summa_strah,0),
  NVL(b_p.summa_dok,0),
  NVL(b_p.summa_dok_nds,0),
  DECODE(v_bills.PROTO_NUM,NULL,Get_Price_Protokol_Fast(v_bills.nom_dok,v_bills.PROD_ID_NPR,v_bills.date_kvit,v_bills.orig_dog_id,v_bills.orig_usl_number,v_bills.date_vyp_sf,v_bills.nom_sf,v_bills.old_nom_sf),v_bills.PROTO_NUM || ' от ' || TO_CHAR(v_bills.PROTO_DATE,'dd.mm.yy') || 'г.'),
  DECODE(KV.LOAD_ABBR,'РЕЗ',DECODE(v_bills.NAZN_OTG_ID,9,DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_DOG.PREDPR_ID,KLS_DOG.PREDPR_ID),99999),99999) AS HRAN_ID,
  DECODE(KV.LOAD_ABBR,'РЕЗ',DECODE(v_bills.NAZN_OTG_ID,9,DECODE(KLS_DOG.DOG_NUMBER,'0210218',SNP_PLAT.PREDPR_NAME,PLAT.PREDPR_NAME),' '),' ') AS HRAN_NAME,
  v_bills.KOL_DN,
  NVL(KV.RAST,0),
  LUK_PLAT.ID AS LUK_PLAT_ID,
  LUK_PLAT.PREDPR_NAME AS LUK_PLAT_NAME,
  LUK_DOG.ID AS LUK_DOG_ID,
  LUK_DOG.DOG_NUMBER AS LUK_DOG_NUMBER,
  LUK_DOG.DOG_DATE AS LUK_DOG_DATE,
  DECODE(NVL(KV.ves,0),0,'',DECODE(v_bills.IS_AGENT,2,'АКТ','Ж/Д КВИТАНЦИЯ')) AS TYPE_DOCUMENT
FROM v_bills,
  (
   SELECT
     V_KVIT_ALL.BILL_ID,
     V_KVIT_ALL.NUM_KVIT,
	 V_KVIT_ALL.DATE_KVIT,
     V_KVIT_ALL.NUM_DOVER,
     MONTH.LOAD_ABBR,
	 MAX(KLS_PASP.PASP_NUM) AS PASP_NUM,
     MONTH.POTREB_ID,
     STANOTP.STAN_KOD AS STAN_OTP_KOD,
	 MAX(STAN.RAST) AS RAST,
	 POTREB.PREDPR_NAME AS POTREB_NAME,
	 SUM(V_KVIT_ALL.VES_BRUTTO) AS VES
   FROM V_KVIT_ALL, MONTH, KLS_PASP, KLS_STAN STANOTP, KLS_PREDPR POTREB, KLS_STAN STAN
   WHERE V_KVIT_ALL.NOM_ZD = MONTH.NOM_ZD
  	 AND V_KVIT_ALL.DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy')
	 AND V_KVIT_ALL.BILL_ID<>0
     AND V_KVIT_ALL.PASP_ID = KLS_PASP.ID (+)
	 AND MONTH.POTREB_ID = POTREB.ID(+)
	 AND MONTH.STANOTP_ID = STANOTP.ID
	 AND MONTH.STAN_ID = STAN.ID
   GROUP BY
	 V_KVIT_ALL.BILL_ID,
	 V_KVIT_ALL.NUM_KVIT,
	 V_KVIT_ALL.DATE_KVIT,
	 V_KVIT_ALL.NUM_DOVER,
	 MONTH.LOAD_ABBR,
--	 KLS_PASP.PASP_NUM,
	 MONTH.POTREB_ID,
     STANOTP.STAN_KOD,
     POTREB.PREDPR_NAME
	  ) KV,
  (SELECT
     v_bill_pos.NOM_DOK,
	 DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,DECODE(v_bill_pos.OWNERSHIP_ID,1,1,3),1) AS SOBSTV,
--     1 AS SOBSTV,
	 MAX(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.CENA_BN,0)) AS cena_bn,
	 MAX(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,ROUND(NVL(v_bill_pos.CENA_BN,0)*(100+FOR_BILLS.GetNDSValue(v_bill_pos.DATE_REALIZ))/100,2),0)) AS cena,
	 SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.SUMMA-v_bill_pos.SUMMA_NDS20,0)) AS summa_prod_bn,
	 SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.SUMMA_NDS20,0)) AS summa_prod_nds,
	 SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.SUMMA,0)) AS summa_prod,
	 SUM(DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,v_bill_pos.VES,0)) AS ves,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA,12,v_bill_pos.SUMMA,0)) AS summa_agen,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA_NDS20,12,v_bill_pos.SUMMA_NDS20,0)) AS summa_agen_nds,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA,0)) AS summa_vozn_11,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,11,v_bill_pos.SUMMA_NDS20,0)) AS summa_vozn_11_nds,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,12,v_bill_pos.SUMMA,0)) AS summa_vozn_12,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,12,v_bill_pos.SUMMA_NDS20,0)) AS summa_vozn_12_nds,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,10,v_bill_pos.SUMMA,13,v_bill_pos.SUMMA,0)) AS summa_tarif,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,10,v_bill_pos.SUMMA_NDS20,13,v_bill_pos.SUMMA_NDS20,0)) AS summa_tarif_nds,
	 SUM(DECODE(v_bill_pos.BILL_POS_ID,20,v_bill_pos.SUMMA,0)) AS summa_strah,
	 SUM(v_bill_pos.SUMMA_NDS20) AS summa_dok_nds,
	 SUM(v_bill_pos.SUMMA) AS summa_dok
    FROM v_bill_pos
	WHERE v_bill_pos.SUMMA<>0
	GROUP BY
	  v_bill_pos.NOM_DOK
	  ,DECODE(SIGN(v_bill_pos.BILL_POS_ID-10),-1,DECODE(v_bill_pos.OWNERSHIP_ID,1,1,3),1)
    ) b_p,
	KLS_PREDPR PLAT, KLS_PREDPR SNP_PLAT, KLS_DOG, KLS_DOG SNP_DOG, KLS_PROD, KLS_PREDPR LUK_PLAT, KLS_DOG LUK_DOG, kls_dog_main
WHERE v_BILLS.NOM_DOK = KV.BILL_ID(+)
  AND v_BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND V_BILLS.SNP_DOG_ID = SNP_DOG.ID
  AND SNP_DOG.PREDPR_ID = SNP_PLAT.ID
  AND v_BILLS.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND v_BILLS.DATE_KVIT>=TO_DATE('01.01.2003','dd.mm.yyyy')
  AND v_BILLS.NOM_DOK = b_p.NOM_DOK(+)
  and v_bills.is_agent=kls_dog_main.is_agent
  and v_bills.date_kvit between kls_dog_main.from_date and kls_dog_main.to_date
  AND KLS_DOG_MAIN.DOG_ID=LUK_DOG.ID
  AND LUK_DOG.PREDPR_ID=LUK_PLAT.ID
--  AND (v_BILLS.PROD_ID_NPR<>'10001' OR v_BILLS.DATE_KVIT<=TO_DATE('31.12.2003','dd.mm.yyyy'))
  AND v_BILLS.PROD_ID_NPR<>'10041';


--
-- V_LUKREP_SF_2005_BEFORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_2005_BEFORE
(NUM_5_DAY, IS_KORR, IS_AGENT, SOBSTV, PLAT_ID, 
 PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, DATE_CHN_SOB, NOM_DOK, 
 NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, OLD_NOM_SF, NPO_SF, 
 DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, VES_KVIT, CNT_KVIT, 
 SVED_NUM, NUM_KVIT, NOM_AKT, NUM_CIST, STANOTP_ID, 
 STAN_NAME, HRAN_ID, HRAN_NAME, POLUCH_ID, POLUCH_NAME, 
 POLUCH_ADDR, IS_SF, CENA_BN, CENA, SUMMA_PROD_BN, 
 SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11_BN, 
 SUMMA_VOZN_12_BN, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, 
 SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, 
 SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, KOL_DN, 
 NAZN_OTG_ID, RAST, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, 
 KORR_PROD, VID_USL_ID, DATE_VIR)
AS 
SELECT /* ORDERED  INDEX(BILLS)  USE_NL(BILL,MONTH,KLS_DOG,KVIT,KV,STAN,STANOTP,POTREB,PLAT,POLUCH,KLS_PROD,GR_PROD,USL_DOG,KLS_VAGOWNER) */
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY,
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR,
  BILLS.IS_AGENT,
  (CASE
  WHEN BILLS.PROD_ID_NPR<'10100' AND BILLS.PROD_ID_NPR<>'10080' THEN 5
  ELSE 1 /*NVL(KV.SOBSTV,1)*/
   END) AS SOBSTV,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.INN AS PLAT_INN,
  PLAT.SF_NAME AS PLAT_NAME,
  PLAT.CITY_J || ',' || PLAT.ADDRESS_J AS PLAT_ADDR,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.DATE_KVIT AS DATE_CHN_SOB,
  BILLS.NOM_DOK,
  BILLS.NOM_SF,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.NPO_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  gr_prod.ID_NPR AS gr_npr_id,
  gr_prod.NAME_NPR AS gr_npr_name,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.VES_BRUTTO AS VES_KVIT,
  1 AS CNT_KVIT,
  KVIT.SVED_NUM,
  KVIT.NUM_KVIT,
  (CASE
 WHEN BILLS.IS_AGENT=4 THEN TO_CHAR(KVIT.NUM_AKT)
 ELSE ''
   END) AS NOM_AKT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  MONTH.STANOTP_ID,
  DECODE(MONTH.LOAD_ABBR,'САМ','САМОВЫВОЗ',DECODE(STANOTP.ID,1,'РЕЗЕРВУАР',STANOTP.STAN_NAME)) AS STAN_NAME,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.ID,8),8) AS HRAN_ID,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.SF_NAME,'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"'),'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"') AS HRAN_NAME,
  MONTH.POLUCH_ID,
  POLUCH.SF_NAME AS POLUCH_NAME,
  POLUCH.CITY_P || ',' || POLUCH.ADDRESS_P AS POLUCH_ADDR,
  0 AS IS_SF,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD_BN,
  NVL(KVIT.SUM_PROD_NDS,0) AS SUMMA_PROD_NDS,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD,
  NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN,
  NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN_NDS,
  NVL(KVIT.SUM_VOZN11,0) AS SUMMA_VOZN_11_BN,
  NVL(KVIT.SUM_VOZN12,0) AS SUMMA_VOZN_12_BN,
  (CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END) AS SUMMA_VOZN_BN,
  NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF,
  NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF_NDS,
  NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA,
  NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA_NDS,
  NVL(KVIT.TARIF_ALT,0) AS TARIF_MPS,
  NVL(KVIT.TARIF,0) AS TARIF_KVIT,
  DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0)) AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  NVL(KVIT.SUM_STRAH,0) AS SUMMA_STRAH,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+
 NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)+
 NVL(KVIT.SUM_STRAH,0) AS SUMMA_DOK,
  NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_DOK_NDS,
  DECODE(BILLS.PROD_ID_NPR,'10080',KV.PROTO_NUM,BILLS.PROTO_NUM) || ' от ' || TO_CHAR(DECODE(BILLS.PROD_ID_NPR,'10080',KV.PROTO_DATE,BILLS.PROTO_DATE),'dd.mm.yy') || 'г.' AS PROTO_NUM,
  BILLS.KOL_DN,
  MONTH.NAZN_OTG_ID,
  STAN.RAST,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  BILLS.KORR_PROD,
  USL_DOG.VID_USL_ID,
--  KVIT.DATE_VIR
  BILLS.DATE_KVIT AS DATE_VIR
FROM BILLS, KLS_DOG, KLS_PREDPR PLAT,
  (
   SELECT /*  */
       a.BILL_ID,
    a.PROD_ID_NPR,
--    a.DATE_VIR,
--      DECODE(a.OWNERSHIP_ID,1,1,3) AS SOBSTV,
    MAX(a.PROTO_NUM) AS PROTO_NUM,
    MAX(a.PROTO_DATE) AS PROTO_DATE,
    COUNT(*) AS CNT,
    SUM(VES_BRUTTO) AS VES
     FROM
  (SELECT /*+ INDEX(kvit KVIT_DATE_KVIT_BILLS_I) */ BILL_ID,PROD_ID_NPR,PROTO_NUM,PROTO_DATE,VES_BRUTTO FROM KVIT
   WHERE DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
   UNION ALL
   SELECT /*+ INDEX(dop_kvit) */ BILL_ID,PROD_ID_NPR,PROTO_NUM,PROTO_DATE,VES_BRUTTO FROM DOP_KVIT
   WHERE DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
  ) a
    GROUP BY a.BILL_ID,a.PROD_ID_NPR/*,a.DATE_VIR,DECODE(a.OWNERSHIP_ID,1,1,3)*/
 HAVING COUNT(*)>1 AND SUM(VES_BRUTTO)<>0
  ) KV,
  ( SELECT /*+ INDEX(kvit KVIT_DATE_KVIT_BILLS_I) */ * FROM KVIT
   WHERE DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
 UNION ALL
 SELECT /*+ INDEX(dop_kvit) */ * FROM DOP_KVIT
   WHERE DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
   )  KVIT,
  KLS_PROD, KLS_PROD gr_prod, MONTH, KLS_PREDPR POLUCH, KLS_STAN STANOTP, KLS_STAN STAN, KLS_PREDPR POTREB, USL_DOG, KLS_VAGOWNER
WHERE BILLS.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
  AND BILLS.PROD_ID_NPR NOT IN ('10041')
  AND BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KV.BILL_ID
  AND KV.BILL_ID = KVIT.BILL_ID
  AND KV.PROD_ID_NPR = KVIT.PROD_ID_NPR
--  AND KV.DATE_VIR=KVIT.DATE_VIR
--  AND KV.SOBSTV=DECODE(KVIT.OWNERSHIP_ID,1,1,3)
  AND KV.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KV.CNT<>1
  AND KLS_PROD.ID_GROUP_NPR = gr_prod.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.POLUCH_ID = POLUCH.ID
  AND NVL(MONTH.POTREB_ID,MONTH.POLUCH_ID) = POTREB.ID
  AND MONTH.STANOTP_ID = STANOTP.ID
  AND MONTH.STAN_ID = STAN.ID
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
--  and kvit.bill_id=6124876
--  and bills.nom_sf='100129'
--
UNION ALL
--
SELECT /*+ ORDERED INDEX(bills) USE_NL(b_p,KV,bills,PLAT, POLUCH, KLS_DOG, KLS_PROD, gr_prod, MONTH,STANOTP,STAN,POTREB, USL_DOG) */
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY,
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR,
  BILLS.IS_AGENT,
  (CASE
  WHEN BILLS.PROD_ID_NPR<'10100' AND BILLS.PROD_ID_NPR<>'10080' THEN 5
  ELSE 1 /*NVL(KV.SOBSTV,1)*/
   END) AS SOBSTV,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.INN AS PLAT_INN,
  PLAT.SF_NAME AS PLAT_NAME,
  PLAT.CITY_J || ',' || PLAT.ADDRESS_J AS PLAT_ADDR,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.DATE_KVIT AS DATE_CHN_SOB,
  BILLS.NOM_DOK,
  BILLS.NOM_SF,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.NPO_SF,
  BILLS.DATE_VYP_SF,
  NVL(gr_prod.ID_NPR,' ') AS gr_npr_id,
  NVL(gr_prod.NAME_NPR,' ') AS gr_npr_name,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ,
  NVL(DECODE(NVL(KV.CNT,0),1,KV.ID,0),0) AS ID,
  NVL(KV.VES,NVL(b_p.ves,0)) AS VES,
  NVL(KV.VES,0) AS VES_KVIT,
  NVL(KV.CNT,0) AS CNT_KVIT,
  NVL(DECODE(NVL(KV.CNT,0),1,KV.SVED_NUM,0),0) AS SVED_NUM,
  NVL(DECODE(NVL(KV.CNT,0),1,KV.NUM_KVIT,0),0) AS NUM_KVIT,
  (CASE
 WHEN BILLS.IS_AGENT=4 THEN TO_CHAR(KV.NUM_AKT)
 ELSE ''
   END) AS NOM_AKT,
  NVL(DECODE(NVL(KV.CNT,0),1,DECODE(MONTH.LOAD_ABBR,'САМ',KV.NUM_DOVER,KV.NUM_CIST),' '),' ') AS NUM_CIST,
  NVL(MONTH.STANOTP_ID,0) AS STANOTP_ID,
  NVL(DECODE(MONTH.LOAD_ABBR,'САМ','САМОВЫВОЗ',DECODE(STANOTP.ID,1,'РЕЗЕРВУАР',STANOTP.STAN_NAME)),' ') AS STAN_NAME,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.ID,8),8) AS HRAN_ID,
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.SF_NAME,'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"'),'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"') AS HRAN_NAME,
  NVL(MONTH.POLUCH_ID,0) AS POLUCH_ID,
  NVL(POLUCH.SF_NAME,' ') AS POLUCH_NAME,
  DECODE(NVL(MONTH.POLUCH_ID,0),0,' ',POLUCH.CITY_P || ',' || POLUCH.ADDRESS_P) AS POLUCH_ADDR,
  1 AS IS_SF,
  NVL(b_p.cena_bn,0) AS CENA_BN,
  ROUND(NVL(b_p.cena_bn,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(KV.SUMMA_PROD_BN,NVL(b_p.summa_prod_bn,0)) AS SUMMA_PROD_BN,
  NVL(KV.SUMMA_PROD_NDS,NVL(b_p.summa_prod_nds,0)) AS SUMMA_PROD_NDS,
  NVL(KV.SUMMA_PROD,NVL(b_p.summa_prod,0)) AS SUMMA_PROD,
  NVL(KV.SUMMA_AGEN,NVL(b_p.summa_agen,0)) AS SUMMA_AGEN,
  NVL(KV.SUMMA_AGEN_NDS,NVL(b_p.summa_agen_nds,0)) AS SUMMA_AGEN_NDS,
  NVL(KV.summa_vozn_11_bn,0) AS SUMMA_VOZN_11_BN,
  NVL(KV.summa_vozn_12_bn,0) AS SUMMA_VOZN_12_BN,
  (CASE
     WHEN NVL(KV.summa_vozn_11_bn,0)=0 AND NVL(KV.summa_vozn_12_bn,0)=0 THEN 0
  WHEN NVL(KV.summa_vozn_11_bn,0)=0 AND NVL(KV.summa_vozn_12_bn,0)<>0 THEN NVL(KV.summa_vozn_12_bn,0)-(NVL(kv.TARIF_MPS,0)+NVL(kv.TARIF_KVIT,0))
  ELSE NVL(KV.summa_vozn_11_bn,0)
   END) AS SUMMA_VOZN_BN,
  NVL(KV.summa_tarif,NVL(b_p.summa_tarif,0)) AS SUMMA_TARIF,
  NVL(KV.summa_tarif_nds,NVL(b_p.summa_tarif_nds,0)) AS SUMMA_TARIF_NDS,
  NVL(KV.summa_ohrana,NVL(b_p.summa_ohrana,0)) AS SUMMA_OHRANA,
  NVL(KV.summa_ohrana_nds,NVL(b_p.summa_ohrana_nds,0)) AS SUMMA_OHRANA_NDS,
  NVL(kv.TARIF_MPS,0) AS TARIF_MPS,
  NVL(kv.TARIF_KVIT,0) AS TARIF_KVIT,
  DECODE(NVL(KV.summa_vozn_12_bn,0),0,0,NVL(kv.TARIF_MPS,0)-NVL(kv.TARIF_KVIT,0)) AS SUMMA_RAZN_BN,
  NVL(b_p.NACENKA,0) AS NACENKA,
  NVL(KV.summa_strah,NVL(b_p.summa_strah,0)) AS SUMMA_STRAH,
  NVL(KV.summa_dok,NVL(b_p.summa_dok,0)) AS SUMMA_DOK,
  NVL(KV.summa_dok_nds,NVL(b_p.summa_dok_nds,0)) AS SUMMA_DOK_NDS,
  DECODE(BILLS.PROD_ID_NPR,'10080',KV.PROTO_NUM,BILLS.PROTO_NUM) || ' от ' || TO_CHAR(DECODE(BILLS.PROD_ID_NPR,'10080',KV.PROTO_DATE,BILLS.PROTO_DATE),'dd.mm.yy') || 'г.' AS PROTO_NUM,
  BILLS.kol_dn,
  MONTH.NAZN_OTG_ID,
  STAN.RAST,
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
--  TO_NUMBER(DECODE(MONTH.LOAD_ABBR,'САМ',NULL,'РЕЗ',NULL,'ТРУ',NULL,KV.VAGOWN_TYP_ID)) AS VAGOWN_TYP_ID,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KV.VAGOWN_TYP_ID=0 THEN KV.VAGOWN_TYP_ID
     WHEN KV.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  BILLS.KORR_PROD,
  USL_DOG.VID_USL_ID,
--  KV.DATE_VIR
  BILLS.DATE_KVIT AS DATE_VIR
FROM
  (
  SELECT /*+ ORDERED INDEX(bill_pos BILL_POS_DATE_REALIZ) USE_NL(bills,bill_pos) */
     BILL_POS.NOM_DOK,
  DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR) AS PROD_ID_NPR,
  MAX(BILL_POS.NACENKA) AS NACENKA,
  MAX(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.CENA_BN,0)) AS cena_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_prod_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA_NDS20,0)) AS summa_prod_nds,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA,0)) AS summa_prod,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.VES,0)) AS ves,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,12,BILL_POS.SUMMA,0)) AS summa_agen,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,12,BILL_POS.SUMMA_NDS20,0)) AS summa_agen_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,0)) AS summa_vozn_11,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA,0)) AS summa_vozn_12,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA,0)) AS summa_tarif,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA_NDS20,0)) AS summa_tarif_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA,0)) AS summa_ohrana,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA_NDS20,0)) AS summa_ohrana_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,20,BILL_POS.SUMMA,0)) AS summa_strah,
  SUM(BILL_POS.SUMMA_NDS20) AS summa_dok_nds,
  SUM(BILL_POS.SUMMA) AS summa_dok
    FROM BILL_POS,BILLS
    WHERE BILL_POS.NOM_DOK=BILLS.nom_dok
   AND BILL_POS.DATE_REALIZ>=TO_DATE('01.01.2006','dd.mm.yyyy')
 GROUP BY
   BILL_POS.NOM_DOK
   ,DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR)
    ) b_p,
    (
  SELECT
    a.BILL_ID,
    a.PROD_ID_NPR,
--    a.DATE_VIR,
--      DECODE(a.OWNERSHIP_ID,1,1,3) AS SOBSTV,
    MIN(KLS_VAGOWNER.VAGOWN_TYP_ID) AS VAGOWN_TYP_ID,
    MIN(KLS_VAGOWNER.OWNER_ID) as OWNER_ID,
    COUNT(*) AS CNT,
    SUM(a.VES_BRUTTO) AS VES,
       SUM(NVL(a.SUM_PROD,0)) AS SUMMA_PROD_BN,
       SUM(NVL(a.SUM_PROD_NDS,0)) AS SUMMA_PROD_NDS,
       SUM(NVL(a.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0)) AS SUMMA_PROD,
       SUM(NVL(a.SUM_VOZN11,0)+NVL(a.SUM_VOZN12,0)+NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)) AS SUMMA_AGEN,
       SUM(NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)) AS SUMMA_AGEN_NDS,
       SUM(NVL(a.SUM_VOZN11,0)) AS SUMMA_VOZN_11_BN,
       SUM(NVL(a.SUM_VOZN12,0)) AS SUMMA_VOZN_12_BN,
       SUM(NVL(a.TARIF,0)+NVL(a.TARIF_NDS,0)) AS SUMMA_TARIF,
       SUM(NVL(a.TARIF_NDS,0)) AS SUMMA_TARIF_NDS,
       SUM(NVL(a.TARIF_GUARD,0)+NVL(a.TARIF_GUARD_NDS,0)) AS SUMMA_OHRANA,
       SUM(NVL(a.TARIF_GUARD_NDS,0)) AS SUMMA_OHRANA_NDS,
       SUM(NVL(a.TARIF_ALT,0)) AS TARIF_MPS,
       SUM(NVL(a.TARIF,0)) AS TARIF_KVIT,
       SUM(NVL(a.SUM_STRAH,0)) AS SUMMA_STRAH,
       SUM(NVL(a.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0)+
           NVL(a.SUM_VOZN11,0)+NVL(a.SUM_VOZN12,0)+NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)+
        NVL(a.TARIF,0)+NVL(a.TARIF_NDS,0)+
        NVL(a.TARIF_GUARD,0)+NVL(a.TARIF_GUARD_NDS,0)+
        NVL(a.SUM_STRAH,0)) AS SUMMA_DOK,
       SUM(NVL(a.SUM_PROD_NDS,0)+
           NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)+
           NVL(a.TARIF_NDS,0)+
           NVL(a.TARIF_GUARD_NDS,0)) AS SUMMA_DOK_NDS,
    MAX(a.ID) AS ID,
       MAX(a.SVED_NUM) AS SVED_NUM,
    MAX(a.NUM_KVIT) AS NUM_KVIT,
    MAX(a.NUM_DOVER) AS NUM_DOVER,
    MAX(a.NUM_CIST) AS NUM_CIST,
    MAX(a.PROTO_NUM) AS PROTO_NUM,
    MAX(a.PROTO_DATE) AS PROTO_DATE,
    MAX(a.NUM_AKT) AS NUM_AKT
     FROM
    (
    SELECT /*+ INDEX(kvit KVIT_DATE_KVIT_BILLS_I) */ * FROM KVIT
      WHERE DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
      UNION ALL
     SELECT /*+ INDEX(dop_kvit) */ * FROM DOP_KVIT
       WHERE DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
        ) a ,KLS_VAGOWNER
  WHERE a.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  GROUP BY a.BILL_ID,a.PROD_ID_NPR/*,a.DATE_VIR,DECODE(a.OWNERSHIP_ID,1,1,3)*/
    ) KV,
    BILLS, KLS_PROD, KLS_PROD gr_prod, KLS_DOG, KLS_PREDPR PLAT, MONTH, KLS_PREDPR POLUCH, KLS_STAN STANOTP, KLS_STAN STAN, KLS_PREDPR POTREB, USL_DOG
WHERE b_p.nom_dok=KV.BILL_ID(+)
  AND b_p.PROD_ID_NPR=KV.PROD_ID_NPR(+)
--  AND b_p.SOBSTV=KV.SOBSTV(+)
  AND b_p.NOM_DOK=BILLS.NOM_DOK
  AND b_p.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KLS_PROD.ID_GROUP_NPR = gr_prod.ID_NPR (+)
  AND bills.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy')
  AND BILLS.PROD_ID_NPR NOT IN ('10041')
  AND BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_ZD = MONTH.NOM_ZD(+)
  AND NVL(MONTH.POLUCH_ID,KLS_DOG.PREDPR_ID) = POLUCH.ID
  AND NVL(MONTH.POTREB_ID,NVL(MONTH.POLUCH_ID,KLS_DOG.PREDPR_ID)) = POTREB.ID
  AND MONTH.STANOTP_ID = STANOTP.ID(+)
  AND MONTH.STAN_ID = STAN.ID(+)
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
--  and bills.nom_dok=6124876
  --  and bills.nom_sf='100129'
;


--
-- V_LUKREP_SF_2005_MON_BEFORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_2005_MON_BEFORE
(NUM_5_DAY, IS_KORR, IS_AGENT, SOBSTV, PLAT_ID, 
 PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, DATE_CHN_SOB, NOM_DOK, 
 NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, OLD_NOM_SF, NPO_SF, 
 DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, VES_KVIT, CNT_KVIT, 
 SVED_NUM, NUM_KVIT, NOM_AKT, NUM_CIST, STANOTP_ID, 
 STAN_NAME, HRAN_ID, HRAN_NAME, POLUCH_ID, POLUCH_NAME, 
 POLUCH_ADDR, IS_SF, CENA_BN, CENA, SUMMA_PROD_BN, 
 SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11_BN, 
 SUMMA_VOZN_12_BN, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, 
 SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, 
 SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, KOL_DN, 
 NAZN_OTG_ID, RAST, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, 
 KORR_PROD, VID_USL_ID, DATE_VIR)
AS 
SELECT /*  */ 
  TO_NUMBER(TO_CHAR(bills.date_mos,'MM'))*100+bills.NUM_5_DAY as NUM_5_DAY, 
  DECODE(TRUNC(bills.DATE_KVIT,'MONTH'),TRUNC(bills.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(bills.date_kvit,'MM'))*100+bills.KORR_5_DAY) AS IS_KORR, 
  bills.IS_AGENT, 
  (CASE 
  WHEN bills.PROD_ID_NPR<'10100' AND bills.PROD_ID_NPR<>'10080' THEN 5 
  ELSE NVL(KV.SOBSTV,1) 
   END) AS SOBSTV, 
  KLS_DOG.PREDPR_ID AS PLAT_ID, 
  PLAT.INN AS PLAT_INN, 
  PLAT.SF_NAME AS PLAT_NAME, 
  PLAT.CITY_J || ',' || PLAT.ADDRESS_J AS PLAT_ADDR, 
  bills.DOG_ID as DOG_ID, 
  KLS_DOG.DOG_NUMBER as DOG_NUMBER, 
  KLS_DOG.DOG_DATE as DOG_DATE, 
  bills.DATE_KVIT, 
  bills.DATE_MOS, 
  bills.DATE_KVIT AS DATE_CHN_SOB, 
  bills.NOM_DOK, 
  bills.NOM_SF, 
  bills.NOM_SF AS ORIG_NOM_SF, 
  NVL(bills.OLD_NOM_DOK,0) as OLD_NOM_DOK, 
  Get_Old_sf(bills.NOM_DOK,bills.NOM_SF,bills.OLD_NOM_DOK,bills.OLD_NOM_SF) as OLD_NOM_SF, 
  bills.NPO_SF, 
  bills.DATE_VYP_SF AS DATE_VYP_SF, 
  gr_prod.ID_NPR AS gr_npr_id, 
  gr_prod.NAME_NPR AS gr_npr_name, 
  KLS_PROD.ID_NPR as PROD_ID_NPR, 
  KLS_PROD.SF_NAME AS PROD_NAME, 
  KLS_PROD.ED_IZ AS PROD_EDIZ, 
  KVIT.ID, 
  KVIT.VES_BRUTTO AS VES, 
  KVIT.VES_BRUTTO AS VES_KVIT, 
  1 as CNT_KVIT, 
  KVIT.SVED_NUM, 
  KVIT.NUM_KVIT, 
  (CASE 
 WHEN bills.IS_AGENT=4 THEN TO_CHAR(KVIT.NUM_AKT) 
 ELSE '' 
   END) AS NOM_AKT, 
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST, 
  MONTH.STANOTP_ID, 
  DECODE(MONTH.LOAD_ABBR,'САМ','САМОВЫВОЗ',DECODE(STANOTP.ID,1,'РЕЗЕРВУАР',STANOTP.STAN_NAME)) as STAN_NAME, 
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.ID,8),8) AS HRAN_ID, 
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.SF_NAME,'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"'),'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"') AS HRAN_NAME, 
  MONTH.POLUCH_ID, 
  POLUCH.SF_NAME AS POLUCH_NAME, 
  POLUCH.CITY_P || ',' || POLUCH.ADDRESS_P AS POLUCH_ADDR, 
  0 AS IS_SF, 
  NVL(KVIT.CENA,0) AS CENA_BN, 
  ROUND(NVL(KVIT.CENA,0)*(100+FOR_BILLS.GetNDSValue(bills.date_kvit))/100,2) as CENA, 
  NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD_BN, 
  NVL(KVIT.SUM_PROD_NDS,0) AS SUMMA_PROD_NDS, 
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD, 
  NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN, 
  NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN_NDS, 
  NVL(KVIT.SUM_VOZN11,0) AS SUMMA_VOZN_11_BN, 
  NVL(KVIT.SUM_VOZN12,0) AS SUMMA_VOZN_12_BN, 
  (CASE 
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0 
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0)) 
  ELSE NVL(KVIT.sum_vozn11,0) 
   END) as SUMMA_VOZN_BN, 
  NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF, 
  NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF_NDS, 
  NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA, 
  NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA_NDS, 
  NVL(KVIT.TARIF_ALT,0) as TARIF_MPS, 
  NVL(KVIT.TARIF,0) AS TARIF_KVIT, 
  DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0)) as SUMMA_RAZN_BN, 
  NVL(KVIT.NACENKA,0) as NACENKA, 
  NVL(KVIT.SUM_STRAH,0) AS SUMMA_STRAH, 
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+ 
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+ 
 NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+ 
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)+ 
 NVL(KVIT.SUM_STRAH,0) AS SUMMA_DOK, 
  NVL(KVIT.SUM_PROD_NDS,0)+ 
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+ 
 NVL(KVIT.TARIF_NDS,0)+ 
 NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_DOK_NDS, 
  DECODE(bills.PROD_ID_NPR,'10080',KV.PROTO_NUM,bills.PROTO_NUM) || ' от ' || TO_CHAR(DECODE(bills.PROD_ID_NPR,'10080',KV.PROTO_DATE,bills.PROTO_DATE),'dd.mm.yy') || 'г.' as PROTO_NUM, 
  bills.KOL_DN, 
  MONTH.NAZN_OTG_ID, 
  STAN.RAST, 
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(bills.NOM_SF-100000)) as NUM_STRAH, 
  NVL(DECODE(bills.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) as USL_SUM, 
--  TO_NUMBER(DECODE(MONTH.LOAD_ABBR,'САМ',NULL,'РЕЗ',NULL,'ТРУ',NULL,KLS_VAGOWNER.VAGOWN_TYP_ID)) as VAGOWN_TYP_ID, 
  TO_NUMBER(CASE 
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL 
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID 
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1 
     ELSE 2 
   END) AS VAGOWN_TYP_ID, 
  bills.KORR_PROD, 
  USL_DOG.VID_USL_ID, 
--  KVIT.DATE_VIR 
  bills.DATE_KVIT as DATE_VIR 
FROM bills, KLS_DOG, KLS_PREDPR PLAT, 
  ( 
   SELECT 
       a.BILL_ID, 
    a.PROD_ID_NPR, 
--    a.DATE_VIR, 
      DECODE(a.OWNERSHIP_ID,1,1,3) AS SOBSTV, 
    MAX(a.PROTO_NUM) as PROTO_NUM, 
    MAX(a.PROTO_DATE) as PROTO_DATE, 
    COUNT(*) AS CNT, 
    SUM(VES_BRUTTO) as VES 
     FROM V_KVIT_DATE_VIR_ALL a 
 WHERE a.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy') 
    GROUP BY a.BILL_ID,a.PROD_ID_NPR,/*a.DATE_VIR,*/DECODE(a.OWNERSHIP_ID,1,1,3) 
 HAVING COUNT(*)>1 AND SUM(VES_BRUTTO)<>0 
  ) KV, 
  V_KVIT_DATE_VIR_ALL kvit, KLS_PROD, KLS_PROD gr_prod, MONTH, KLS_PREDPR POLUCH, KLS_STAN STANOTP, KLS_STAN STAN, KLS_PREDPR POTREB, USL_DOG, KLS_VAGOWNER 
WHERE bills.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy') 
  AND BILLS.PROD_ID_NPR not IN ('10041') 
  AND BILLS.DOG_ID = KLS_DOG.ID 
  AND KLS_DOG.PREDPR_ID = PLAT.ID 
  AND BILLS.NOM_DOK = KV.BILL_ID 
  AND KV.BILL_ID = KVIT.BILL_ID 
  AND KV.PROD_ID_NPR = KVIT.PROD_ID_NPR 
--  AND KV.DATE_VIR=KVIT.DATE_VIR 
  AND KV.SOBSTV=DECODE(KVIT.OWNERSHIP_ID,1,1,3) 
  AND KV.PROD_ID_NPR = KLS_PROD.ID_NPR 
  AND KV.CNT<>1 
  AND KLS_PROD.ID_GROUP_NPR = gr_prod.ID_NPR 
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+) 
  AND BILLS.NOM_ZD = MONTH.NOM_ZD 
  AND MONTH.POLUCH_ID = POLUCH.ID 
  AND NVL(MONTH.POTREB_ID,MONTH.POLUCH_ID) = POTREB.ID 
  AND MONTH.STANOTP_ID = STANOTP.ID 
  AND MONTH.STAN_ID = STAN.ID 
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+) 
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+) 
--  and kvit.bill_id=6124876 
--  and bills.nom_sf='100129' 
-- 
UNION ALL 
-- 
SELECT /*+ ORDERED USE_NL(b_p,KV,bills,PLAT, POLUCH, KLS_DOG, KLS_PROD, gr_prod, MONTH,STANOTP,STAN,POTREB, USL_DOG) */ 
  TO_NUMBER(TO_CHAR(bills.date_mos,'MM'))*100+bills.NUM_5_DAY as NUM_5_DAY, 
  DECODE(TRUNC(bills.DATE_KVIT,'MONTH'),TRUNC(bills.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(bills.date_kvit,'MM'))*100+bills.KORR_5_DAY) AS IS_KORR, 
  bills.IS_AGENT, 
  (CASE 
  WHEN bills.PROD_ID_NPR<'10100' AND bills.PROD_ID_NPR<>'10080' THEN 5 
  ELSE NVL(KV.SOBSTV,1) 
   END) AS SOBSTV, 
  KLS_DOG.PREDPR_ID AS PLAT_ID, 
  PLAT.INN AS PLAT_INN, 
  PLAT.SF_NAME AS PLAT_NAME, 
  PLAT.CITY_J || ',' || PLAT.ADDRESS_J AS PLAT_ADDR, 
  bills.DOG_ID as DOG_ID, 
  KLS_DOG.DOG_NUMBER as DOG_NUMBER, 
  KLS_DOG.DOG_DATE as DOG_DATE, 
  bills.DATE_KVIT, 
  bills.DATE_MOS, 
  bills.DATE_KVIT AS DATE_CHN_SOB, 
  bills.NOM_DOK, 
  bills.NOM_SF, 
  bills.NOM_SF as ORIG_NOM_SF, 
  NVL(bills.OLD_NOM_DOK,0) as OLD_NOM_DOK, 
  Get_Old_sf(bills.NOM_DOK,bills.NOM_SF,bills.OLD_NOM_DOK,bills.OLD_NOM_SF) as OLD_NOM_SF, 
  bills.NPO_SF, 
  bills.DATE_VYP_SF, 
  NVL(gr_prod.ID_NPR,' ') AS gr_npr_id, 
  NVL(gr_prod.NAME_NPR,' ') AS gr_npr_name, 
  KLS_PROD.ID_NPR as PROD_ID_NPR, 
  KLS_PROD.SF_NAME AS PROD_NAME, 
  KLS_PROD.ED_IZ, 
  NVL(DECODE(NVL(KV.CNT,0),1,KV.ID,0),0) as ID, 
  NVL(KV.VES,NVL(b_p.ves,0)) as VES, 
  NVL(KV.VES,0) AS VES_KVIT, 
  NVL(KV.CNT,0) as CNT_KVIT, 
  NVL(DECODE(NVL(KV.CNT,0),1,KV.SVED_NUM,0),0) as SVED_NUM, 
  NVL(DECODE(NVL(KV.CNT,0),1,KV.NUM_KVIT,0),0) as NUM_KVIT, 
  (CASE 
 WHEN bills.IS_AGENT=4 THEN TO_CHAR(KV.NUM_AKT) 
 ELSE '' 
   END) AS NOM_AKT, 
  NVL(DECODE(NVL(KV.CNT,0),1,DECODE(MONTH.LOAD_ABBR,'САМ',KV.NUM_DOVER,KV.NUM_CIST),' '),' ') as NUM_CIST, 
  NVL(MONTH.STANOTP_ID,0) as STANOTP_ID, 
  NVL(DECODE(MONTH.LOAD_ABBR,'САМ','САМОВЫВОЗ',DECODE(STANOTP.ID,1,'РЕЗЕРВУАР',STANOTP.STAN_NAME)),' ') as STAN_NAME, 
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.ID,8),8) AS HRAN_ID, 
  DECODE(MONTH.LOAD_ABBR,'РЕЗ',DECODE(MONTH.NAZN_OTG_ID,9,POLUCH.SF_NAME,'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"'),'ОАО "ЛУКОЙЛ-УХТАНЕФТЕПЕРЕРАБОТКА"') AS HRAN_NAME, 
  NVL(MONTH.POLUCH_ID,0) as POLUCH_ID, 
  NVL(POLUCH.SF_NAME,' ') as POLUCH_NAME, 
  DECODE(NVL(MONTH.POLUCH_ID,0),0,' ',POLUCH.CITY_P || ',' || POLUCH.ADDRESS_P) AS POLUCH_ADDR, 
  1 AS IS_SF, 
  NVL(b_p.cena_bn,0) as CENA_BN, 
  ROUND(NVL(b_p.cena_bn,0)*(100+FOR_BILLS.GetNDSValue(bills.date_kvit))/100,2) as CENA, 
  NVL(KV.SUMMA_PROD_BN,NVL(b_p.summa_prod_bn,0)) as SUMMA_PROD_BN, 
  NVL(KV.SUMMA_PROD_NDS,NVL(b_p.summa_prod_nds,0)) as SUMMA_PROD_NDS, 
  NVL(KV.SUMMA_PROD,NVL(b_p.summa_prod,0)) as SUMMA_PROD, 
  NVL(KV.SUMMA_AGEN,NVL(b_p.summa_agen,0)) as SUMMA_AGEN, 
  NVL(KV.SUMMA_AGEN_NDS,NVL(b_p.summa_agen_nds,0)) as SUMMA_AGEN_NDS, 
  NVL(KV.summa_vozn_11_bn,0) as SUMMA_VOZN_11_BN, 
  NVL(KV.summa_vozn_12_bn,0) as SUMMA_VOZN_12_BN, 
  (CASE 
     WHEN NVL(KV.summa_vozn_11_bn,0)=0 AND NVL(KV.summa_vozn_12_bn,0)=0 THEN 0 
  WHEN NVL(KV.summa_vozn_11_bn,0)=0 AND NVL(KV.summa_vozn_12_bn,0)<>0 THEN NVL(KV.summa_vozn_12_bn,0)-(NVL(kv.TARIF_MPS,0)+NVL(kv.TARIF_KVIT,0)) 
  ELSE NVL(KV.summa_vozn_11_bn,0) 
   END) as SUMMA_VOZN_BN, 
  NVL(KV.summa_tarif,NVL(b_p.summa_tarif,0)) AS SUMMA_TARIF, 
  NVL(KV.summa_tarif_nds,NVL(b_p.summa_tarif_nds,0)) AS SUMMA_TARIF_NDS, 
  NVL(KV.summa_ohrana,NVL(b_p.summa_ohrana,0)) AS SUMMA_OHRANA, 
  NVL(KV.summa_ohrana_nds,NVL(b_p.summa_ohrana_nds,0)) AS SUMMA_OHRANA_NDS, 
  NVL(kv.TARIF_MPS,0) as TARIF_MPS, 
  NVL(kv.TARIF_KVIT,0) as TARIF_KVIT, 
  DECODE(NVL(KV.summa_vozn_12_bn,0),0,0,NVL(kv.TARIF_MPS,0)-NVL(kv.TARIF_KVIT,0)) as SUMMA_RAZN_BN, 
  NVL(b_p.NACENKA,0) as NACENKA, 
  NVL(KV.summa_strah,NVL(b_p.summa_strah,0)) AS SUMMA_STRAH, 
  NVL(KV.summa_dok,NVL(b_p.summa_dok,0)) as SUMMA_DOK, 
  NVL(KV.summa_dok_nds,NVL(b_p.summa_dok_nds,0)) as SUMMA_DOK_NDS, 
  DECODE(bills.PROD_ID_NPR,'10080',KV.PROTO_NUM,bills.PROTO_NUM) || ' от ' || TO_CHAR(DECODE(bills.PROD_ID_NPR,'10080',KV.PROTO_DATE,bills.PROTO_DATE),'dd.mm.yy') || 'г.' as PROTO_NUM, 
  bills.kol_dn, 
  MONTH.NAZN_OTG_ID, 
  STAN.RAST, 
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(bills.NOM_SF-100000)) as NUM_STRAH, 
  NVL(DECODE(bills.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) as USL_SUM, 
--  TO_NUMBER(DECODE(MONTH.LOAD_ABBR,'САМ',NULL,'РЕЗ',NULL,'ТРУ',NULL,KV.VAGOWN_TYP_ID)) as VAGOWN_TYP_ID, 
  TO_NUMBER(CASE 
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL 
     WHEN KV.VAGOWN_TYP_ID=0 THEN KV.VAGOWN_TYP_ID 
     WHEN KV.OWNER_ID IN (2,33) THEN 1 
     ELSE 2 
   END) AS VAGOWN_TYP_ID, 
  bills.KORR_PROD, 
  USL_DOG.VID_USL_ID, 
--  KV.DATE_VIR 
  bills.DATE_KVIT as DATE_VIR 
FROM 
  ( 
  SELECT /*+ ORDERED INDEX(bill_pos) USE_NL(bill_pos,bills) */ 
     bill_pos.NOM_DOK, 
  DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.PROD_ID_NPR,bills.PROD_ID_NPR) AS PROD_ID_NPR, 
  DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,DECODE(bill_pos.OWNERSHIP_ID,1,1,3),1) AS SOBSTV, 
  MAX(bill_pos.NACENKA) as NACENKA, 
  MAX(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.CENA_BN,0)) AS cena_bn, 
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.SUMMA-bill_pos.SUMMA_NDS20,0)) AS summa_prod_bn, 
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.SUMMA_NDS20,0)) AS summa_prod_nds, 
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.SUMMA,0)) AS summa_prod, 
  SUM(DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.VES,0)) AS ves, 
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA,12,bill_pos.SUMMA,0)) AS summa_agen, 
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA_NDS20,12,bill_pos.SUMMA_NDS20,0)) AS summa_agen_nds, 
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA-bill_pos.SUMMA_NDS20,0)) AS summa_vozn_11_bn, 
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA,0)) AS summa_vozn_11, 
  SUM(DECODE(bill_pos.BILL_POS_ID,11,bill_pos.SUMMA_NDS20,0)) AS summa_vozn_11_nds, 
  SUM(DECODE(bill_pos.BILL_POS_ID,12,bill_pos.SUMMA-bill_pos.SUMMA_NDS20,0)) AS summa_vozn_12_bn, 
  SUM(DECODE(bill_pos.BILL_POS_ID,12,bill_pos.SUMMA,0)) AS summa_vozn_12, 
  SUM(DECODE(bill_pos.BILL_POS_ID,12,bill_pos.SUMMA_NDS20,0)) AS summa_vozn_12_nds, 
  SUM(DECODE(bill_pos.BILL_POS_ID,10,bill_pos.SUMMA,0)) AS summa_tarif, 
  SUM(DECODE(bill_pos.BILL_POS_ID,10,bill_pos.SUMMA_NDS20,0)) AS summa_tarif_nds, 
  SUM(DECODE(bill_pos.BILL_POS_ID,13,bill_pos.SUMMA,0)) AS summa_ohrana, 
  SUM(DECODE(bill_pos.BILL_POS_ID,13,bill_pos.SUMMA_NDS20,0)) AS summa_ohrana_nds, 
  SUM(DECODE(bill_pos.BILL_POS_ID,20,bill_pos.SUMMA,0)) AS summa_strah, 
  SUM(bill_pos.SUMMA_NDS20) AS summa_dok_nds, 
  SUM(bill_pos.SUMMA) AS summa_dok 
    FROM bill_pos,bills 
    WHERE bill_pos.NOM_DOK=bills.nom_dok 
   AND bill_pos.DATE_REALIZ>=TO_DATE('01.01.2006','dd.mm.yyyy') 
 GROUP BY 
   bill_pos.NOM_DOK, 
   DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,bill_pos.PROD_ID_NPR,bills.PROD_ID_NPR), 
   DECODE(SIGN(bill_pos.BILL_POS_ID-10),-1,DECODE(bill_pos.OWNERSHIP_ID,1,1,3),1) 
    ) b_p, 
    ( 
  SELECT 
    a.BILL_ID, 
    a.PROD_ID_NPR, 
--    a.DATE_VIR, 
      DECODE(a.OWNERSHIP_ID,1,1,3) AS SOBSTV, 
    MIN(KLS_VAGOWNER.VAGOWN_TYP_ID) as VAGOWN_TYP_ID, 
    MIN(KLS_VAGOWNER.OWNER_ID) as OWNER_ID, 
    COUNT(*) AS CNT, 
    SUM(a.VES_BRUTTO) AS VES, 
       SUM(NVL(a.SUM_PROD,0)) AS SUMMA_PROD_BN, 
       SUM(NVL(a.SUM_PROD_NDS,0)) AS SUMMA_PROD_NDS, 
       SUM(NVL(a.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0)) AS SUMMA_PROD, 
       SUM(NVL(a.SUM_VOZN11,0)+NVL(a.SUM_VOZN12,0)+NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)) AS SUMMA_AGEN, 
       SUM(NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)) AS SUMMA_AGEN_NDS, 
       SUM(NVL(a.SUM_VOZN11,0)) AS SUMMA_VOZN_11_BN, 
       SUM(NVL(a.SUM_VOZN12,0)) AS SUMMA_VOZN_12_BN, 
       SUM(NVL(a.TARIF,0)+NVL(a.TARIF_NDS,0)) AS SUMMA_TARIF, 
       SUM(NVL(a.TARIF_NDS,0)) AS SUMMA_TARIF_NDS, 
       SUM(NVL(a.TARIF_GUARD,0)+NVL(a.TARIF_GUARD_NDS,0)) AS SUMMA_OHRANA, 
       SUM(NVL(a.TARIF_GUARD_NDS,0)) AS SUMMA_OHRANA_NDS, 
       SUM(NVL(a.TARIF_ALT,0)) as TARIF_MPS, 
       SUM(NVL(a.TARIF,0)) AS TARIF_KVIT, 
       SUM(NVL(a.SUM_STRAH,0)) AS SUMMA_STRAH, 
       SUM(NVL(a.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0)+ 
           NVL(a.SUM_VOZN11,0)+NVL(a.SUM_VOZN12,0)+NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)+ 
        NVL(a.TARIF,0)+NVL(a.TARIF_NDS,0)+ 
        NVL(a.TARIF_GUARD,0)+NVL(a.TARIF_GUARD_NDS,0)+ 
        NVL(a.SUM_STRAH,0)) AS SUMMA_DOK, 
       SUM(NVL(a.SUM_PROD_NDS,0)+ 
           NVL(a.SUM_VOZN11_NDS,0)+NVL(a.SUM_VOZN12_NDS,0)+ 
           NVL(a.TARIF_NDS,0)+ 
           NVL(a.TARIF_GUARD_NDS,0)) AS SUMMA_DOK_NDS, 
    MAX(a.ID) AS ID, 
       MAX(a.SVED_NUM) AS SVED_NUM, 
    MAX(a.NUM_KVIT) AS NUM_KVIT, 
    MAX(a.NUM_DOVER) AS NUM_DOVER, 
    MAX(a.NUM_CIST) AS NUM_CIST, 
    MAX(a.PROTO_NUM) as PROTO_NUM, 
    MAX(a.PROTO_DATE) as PROTO_DATE, 
    MAX(a.NUM_AKT) AS NUM_AKT 
     FROM V_KVIT_DATE_VIR_ALL a ,KLS_VAGOWNER 
  WHERE a.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy') 
    AND a.VAGOWNER_ID=KLS_VAGOWNER.ID(+) 
  GROUP BY a.BILL_ID,a.PROD_ID_NPR,/*a.DATE_VIR,*/DECODE(a.OWNERSHIP_ID,1,1,3) 
    ) KV, 
    bills, KLS_PROD, KLS_PROD gr_prod, KLS_DOG, KLS_PREDPR PLAT, MONTH, KLS_PREDPR POLUCH, KLS_STAN STANOTP, KLS_STAN STAN, KLS_PREDPR POTREB, USL_DOG 
WHERE b_p.nom_dok=KV.BILL_ID(+) 
  AND b_p.PROD_ID_NPR=KV.PROD_ID_NPR(+) 
  AND b_p.SOBSTV=KV.SOBSTV(+) 
  AND b_p.NOM_DOK=bills.NOM_DOK 
  AND b_p.PROD_ID_NPR = KLS_PROD.ID_NPR 
  AND KLS_PROD.ID_GROUP_NPR = gr_prod.ID_NPR (+) 
  AND bills.DATE_KVIT>=TO_DATE('01.01.2006','dd.mm.yyyy') 
  AND BILLS.PROD_ID_NPR not IN ('10041') 
  AND bills.DOG_ID = KLS_DOG.ID 
  AND KLS_DOG.PREDPR_ID = PLAT.ID 
  AND bills.NOM_ZD = MONTH.NOM_ZD(+) 
  AND NVL(MONTH.POLUCH_ID,KLS_DOG.PREDPR_ID) = POLUCH.ID 
  AND NVL(MONTH.POTREB_ID,NVL(MONTH.POLUCH_ID,KLS_DOG.PREDPR_ID)) = POTREB.ID 
  AND MONTH.STANOTP_ID = STANOTP.ID(+) 
  AND MONTH.STAN_ID = STAN.ID(+) 
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+) 
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+) 
--  and bills.nom_dok=6124876 
  --  and bills.nom_sf='100129'
;


--
-- V_OTGR_ARX  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_OTGR_ARX
(NPODOG_ID, DOG_NUMBER, DATE_KVIT, D_PAY, TARIF, 
 VOZNAGR, SUM_PROD, STRAH, VES)
AS 
SELECT   /*+ RULE */
            M.Npodog_id, D.dog_number, K.Date_kvit,
            K.Date_kvit + M.Kol_dn_npo AS D_pay,
            SUM(ROUND((ROUND(DECODE(K.Flg_operdata,1, NVL (M.Tarif1tonn, 0)* K.Ves_brutto,K.Tarif),2)+ K.Tarif_guard)* (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100,2)) AS Tarif,-- Ж/д тариф
            SUM(ROUND(ROUND(DECODE (K.Vagowner_id,3, USL_DOG.Usl_sum * K.Ves_brutto,DECODE (K.Flg_vag_klient,1, USL_DOG.Usl_sum* K.Ves_brutto,DECODE(K.Tarif,0, USL_DOG.Usl_sum* K.Ves_brutto,K.Tarif19 - K.Tarif))),2)* (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100,2)) AS Voznagr,-- Вознаграждение
            SUM(ROUND(K.Ves * M.Cena_otp_npo * (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100, 2)) AS Sum_prod,
            SUM(ROUND((ROUND (K.Ves * M.Cena_otp_npo * (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100, 2))* USL_DOG.Proc_insure/ 100,2)) AS Strah,
			SUM(k.ves) AS ves
       FROM KVIT K, MONTH M, KLS_PLANSTRU Ps, KLS_DOG D, USL_DOG
      WHERE K.Nom_zd = M.Nom_zd
        AND M.Planstru_id = Ps.ID
        AND M.Npodog_id = D.ID
        AND (M.Dog_id = USL_DOG.Dog_id AND M.Usl_number = USL_DOG.Usl_number
            )
        AND Ps.Region_id = 21
        AND K.Date_kvit >= TO_DATE ('01.09.2003', 'dd.mm.yyyy')
   GROUP BY M.Npodog_id,
            D.dog_number,
            K.Date_kvit,
            K.Date_kvit + M.Kol_dn_npo
   ORDER BY M.Npodog_id, K.Date_kvit;


--
-- V_PF_RUB  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PF_RUB
(LEVEL_POS, NP_NAME, PLANSTRU_ID, PLAN_VES, PLAN_SUM, 
 PLANOBR_VES, FACT_VES, FACT_SUM)
AS 
select T1.LEVEL_POS,
       SUBSTR('                          ',1,T1.LEVEL_POS*3) || T1.NAME as NAME,
       A."PLANSTRU_ID",A."PLAN_VES",A."PLAN_SUM",A."PLANOBR_VES",A."FACT_VES",A."FACT_SUM"
from V_MASTER_REPORTS R, KLS_PLANSTRU T1, V_PF_RUB_DATA A 
where (nls_upper(R.REPORT_FILE) = 'PF_RUB.XLS') and
      (T1.BEGIN_DATE <= R.END_DATE) and
      (T1.END_DATE >= R.BEGIN_DATE) and
      (T1.ID = A.PLANSTRU_ID(+))
order by KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR;


--
-- V_PRIL_CIST_ALL_BEFORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PRIL_CIST_ALL_BEFORE
(BEG_DATE, END_DATE, MON_KVIT, NUM_5_DAY, IS_KORR, 
 IS_AGENT, PLAT_ID, PLAT_NAME, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, NOM_DOK, ORIG_NOM_SF, 
 OLD_NOM_DOK, OLD_NOM_SF, DATE_VYP_SF, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, NUM_KVIT, NUM_CIST, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11_BN, SUMMA_VOZN_12_BN, SUMMA_VOZN_BN, 
 SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, SUMMA_OHRANA_NDS, TARIF_MPS, 
 TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, SUMMA_STRAH, SUMMA_DOK, 
 SUMMA_DOK_NDS, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, VID_USL_ID)
AS 
SELECT
  -- Счета без отгрузки
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT, 
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ as PROD_EDIZ,
  0 AS KVIT_ID,
  NVL(b_p.ves,0) AS VES,
  0 AS NUM_KVIT,
  ' ' AS NUM_CIST,
  NVL(b_p.cena_bn,0) AS CENA_BN,
  ROUND(NVL(b_p.cena_bn,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(b_p.summa_prod_bn,0) AS SUMMA_PROD_BN,
  NVL(b_p.summa_prod_nds,0) AS SUMMA_PROD_NDS,
  NVL(b_p.summa_prod,0) AS SUMMA_PROD,
  NVL(b_p.summa_agen,0) AS SUMMA_AGEN,
  NVL(b_p.summa_agen_nds,0) AS SUMMA_AGEN_NDS,
  0 AS SUMMA_VOZN_11_BN,
  0 AS SUMMA_VOZN_12_BN,
  0 AS SUMMA_VOZN_BN,
  NVL(b_p.summa_tarif,0) AS SUMMA_TARIF,
  NVL(b_p.summa_tarif_nds,0) AS SUMMA_TARIF_NDS,
  NVL(b_p.summa_ohrana,0) AS SUMMA_OHRANA,
  NVL(b_p.summa_ohrana_nds,0) AS SUMMA_OHRANA_NDS,
  0 AS TARIF_MPS,
  0 AS TARIF_KVIT,
  0 AS SUMMA_RAZN_BN,
  NVL(b_p.NACENKA,0) AS NACENKA,
  NVL(b_p.summa_strah,0) AS SUMMA_STRAH,
  NVL(b_p.summa_dok,0) AS SUMMA_DOK,
  NVL(b_p.summa_dok_nds,0) AS SUMMA_DOK_NDS,
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  NULL AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
  BILLS,
  (
   SELECT /*+ RULE */
     BILL_POS.NOM_DOK,
  DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR) AS PROD_ID_NPR,
  MAX(BILL_POS.NACENKA) AS NACENKA,
  MAX(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.CENA_BN,0)) AS cena_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_prod_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA_NDS20,0)) AS summa_prod_nds,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA,0)) AS summa_prod,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.VES,0)) AS ves,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,12,BILL_POS.SUMMA,0)) AS summa_agen,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,12,BILL_POS.SUMMA_NDS20,0)) AS summa_agen_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,0)) AS summa_vozn_11,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA,0)) AS summa_vozn_12,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA,0)) AS summa_tarif,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA_NDS20,0)) AS summa_tarif_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA,0)) AS summa_ohrana,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA_NDS20,0)) AS summa_ohrana_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,20,BILL_POS.SUMMA,0)) AS summa_strah,
  SUM(BILL_POS.SUMMA_NDS20) AS summa_dok_nds,
  SUM(BILL_POS.SUMMA) AS summa_dok
    FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
       BILLS,BILL_POS
    WHERE BILL_POS.NOM_DOK=BILLS.nom_dok
   AND BILLS.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
   AND BILLS.PROD_ID_NPR NOT IN ('10003','10006','10009','10041','10042')
   AND BILLS.PROD_ID_NPR<='10100' AND BILLS.PROD_ID_NPR<>'10080' 
 GROUP BY
   BILL_POS.NOM_DOK
   ,DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR)
    ) b_p,
  KLS_PROD, KLS_DOG, KLS_PREDPR PLAT, USL_DOG
WHERE b_p.NOM_DOK=BILLS.NOM_DOK
  AND b_p.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.DOG_ID=USL_DOG.DOG_ID (+)
  AND BILLS.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  -- Условия отбора
  AND BILLS.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND BILLS.PROD_ID_NPR NOT IN ('10003','10006','10009','10041','10042')
  AND BILLS.PROD_ID_NPR='10001'  
  AND BILLS.IS_AGENT IN (2,4,5)
--  AND KLS_DOG.DOG_NUMBER LIKE r.DOG_NUMBER
--
UNION ALL

-- Вознаграждение + продукт + страховка (по DATE_KVIT)
SELECT /*+ RULE */
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID as KVIT_ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.NUM_KVIT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD_BN,
  NVL(KVIT.SUM_PROD_NDS,0) AS SUMMA_PROD_NDS,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD,
  NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN,
  NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN_NDS,
  NVL(KVIT.SUM_VOZN11,0) AS SUMMA_VOZN_11_BN,
  NVL(KVIT.SUM_VOZN12,0) AS SUMMA_VOZN_12_BN,
  (CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END) AS SUMMA_VOZN_BN,
  0 /*NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)*/ AS SUMMA_TARIF,
  0 /*NVL(KVIT.TARIF_NDS,0)*/ AS SUMMA_TARIF_NDS,
  0 /*NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_OHRANA,
  0 /*NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_OHRANA_NDS,
  NVL(KVIT.TARIF_ALT,0) AS TARIF_MPS,
  NVL(KVIT.TARIF,0) AS TARIF_KVIT,
  DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0)) AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  NVL(KVIT.SUM_STRAH,0) AS SUMMA_STRAH,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+
 /*NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)+*/
 NVL(KVIT.SUM_STRAH,0) AS SUMMA_DOK,
  NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)/*+
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_DOK_NDS,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
  BILLS, KVIT, KLS_DOG, KLS_PREDPR PLAT,
  KLS_PROD, MONTH, USL_DOG, KLS_VAGOWNER, KLS_VID_OTGR
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  -- Условия отбора
  AND KVIT.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND BILLS.IS_AGENT IN (2,4,5)
--  AND KLS_DOG.DOG_NUMBER LIKE r.DOG_NUMBER
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR  
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6)
  
--
UNION ALL

-- Тариф (по дате счета от РЖД)
SELECT /*+ RULE */
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID as KVIT_ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.NUM_KVIT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  0 /*NVL(KVIT.SUM_PROD,0)*/ AS SUMMA_PROD_BN,
  0 /*NVL(KVIT.SUM_PROD_NDS,0) */ AS SUMMA_PROD_NDS,
  0 /*NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)*/ AS SUMMA_PROD,
  0 /*NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)*/ AS SUMMA_AGEN,
  0 /*NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)*/ AS SUMMA_AGEN_NDS,
  0 /*NVL(KVIT.SUM_VOZN11,0)*/ AS SUMMA_VOZN_11_BN,
  0 /*NVL(KVIT.SUM_VOZN12,0)*/ AS SUMMA_VOZN_12_BN,
  0 /*(CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END)*/ AS SUMMA_VOZN_BN,
  NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF,
  NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF_NDS,
  NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA,
  NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA_NDS,
  0 /*NVL(KVIT.TARIF_ALT,0)*/ AS TARIF_MPS,
  0 /*NVL(KVIT.TARIF,0)*/ AS TARIF_KVIT,
  0 /*DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0))*/ AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  0 /*NVL(KVIT.SUM_STRAH,0)*/ AS SUMMA_STRAH,
  /*NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+*/
 NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)/*+
 NVL(KVIT.SUM_STRAH,0)*/ AS SUMMA_DOK,
  /*NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+*/
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_DOK_NDS,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
  BILLS, KVIT, KLS_DOG, KLS_PREDPR PLAT,
  KLS_PROD, MONTH, USL_DOG, KLS_VAGOWNER, KLS_VID_OTGR,
(SELECT distinct nom_perech,dat_perech 
   FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,REESTR_RAIL_RGD_SF 
  WHERE DATE_SCH BETWEEN r.BEGIN_DATE AND r.END_DATE -- По дате счета РЖД
    AND r21=95) rail_sf  
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  AND KVIT.PERECH_TEXPD_DATE=rail_sf.dat_perech
  AND KVIT.PERECH_TEXPD_NUM=rail_sf.nom_perech
  -- Условия отбора
  AND BILLS.IS_AGENT IN (2,4,5)
--  AND KLS_DOG.DOG_NUMBER LIKE r.DOG_NUMBER
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR  
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6);


--
-- V_PRIL_CIST_BEFORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PRIL_CIST_BEFORE
(BEG_DATE, END_DATE, MON_KVIT, NUM_5_DAY, IS_KORR, 
 IS_AGENT, PLAT_ID, PLAT_NAME, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, NOM_DOK, ORIG_NOM_SF, 
 OLD_NOM_DOK, OLD_NOM_SF, DATE_VYP_SF, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, NUM_KVIT, NUM_CIST, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11_BN, SUMMA_VOZN_12_BN, SUMMA_VOZN_BN, 
 SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, SUMMA_OHRANA_NDS, TARIF_MPS, 
 TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, SUMMA_STRAH, SUMMA_DOK, 
 SUMMA_DOK_NDS, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, VID_USL_ID)
AS 
SELECT
  -- Счета без отгрузки
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT, 
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ as PROD_EDIZ,
  0 AS KVIT_ID,
  NVL(b_p.ves,0) AS VES,
  0 AS NUM_KVIT,
  ' ' AS NUM_CIST,
  NVL(b_p.cena_bn,0) AS CENA_BN,
  ROUND(NVL(b_p.cena_bn,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(b_p.summa_prod_bn,0) AS SUMMA_PROD_BN,
  NVL(b_p.summa_prod_nds,0) AS SUMMA_PROD_NDS,
  NVL(b_p.summa_prod,0) AS SUMMA_PROD,
  NVL(b_p.summa_agen,0) AS SUMMA_AGEN,
  NVL(b_p.summa_agen_nds,0) AS SUMMA_AGEN_NDS,
  0 AS SUMMA_VOZN_11_BN,
  0 AS SUMMA_VOZN_12_BN,
  0 AS SUMMA_VOZN_BN,
  NVL(b_p.summa_tarif,0) AS SUMMA_TARIF,
  NVL(b_p.summa_tarif_nds,0) AS SUMMA_TARIF_NDS,
  NVL(b_p.summa_ohrana,0) AS SUMMA_OHRANA,
  NVL(b_p.summa_ohrana_nds,0) AS SUMMA_OHRANA_NDS,
  0 AS TARIF_MPS,
  0 AS TARIF_KVIT,
  0 AS SUMMA_RAZN_BN,
  NVL(b_p.NACENKA,0) AS NACENKA,
  NVL(b_p.summa_strah,0) AS SUMMA_STRAH,
  NVL(b_p.summa_dok,0) AS SUMMA_DOK,
  NVL(b_p.summa_dok_nds,0) AS SUMMA_DOK_NDS,
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  NULL AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
  BILLS,
  (
   SELECT /*+ RULE */
     BILL_POS.NOM_DOK,
  DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR) AS PROD_ID_NPR,
  MAX(BILL_POS.NACENKA) AS NACENKA,
  MAX(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.CENA_BN,0)) AS cena_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_prod_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA_NDS20,0)) AS summa_prod_nds,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA,0)) AS summa_prod,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.VES,0)) AS ves,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,12,BILL_POS.SUMMA,0)) AS summa_agen,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,12,BILL_POS.SUMMA_NDS20,0)) AS summa_agen_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,0)) AS summa_vozn_11,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA,0)) AS summa_vozn_12,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA,0)) AS summa_tarif,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA_NDS20,0)) AS summa_tarif_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA,0)) AS summa_ohrana,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA_NDS20,0)) AS summa_ohrana_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,20,BILL_POS.SUMMA,0)) AS summa_strah,
  SUM(BILL_POS.SUMMA_NDS20) AS summa_dok_nds,
  SUM(BILL_POS.SUMMA) AS summa_dok
    FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
       BILLS,BILL_POS
    WHERE BILL_POS.NOM_DOK=BILLS.nom_dok
   AND BILLS.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
   AND BILLS.PROD_ID_NPR NOT IN ('10003','10006','10009','10041','10042')
   AND BILLS.PROD_ID_NPR<='10100' AND BILLS.PROD_ID_NPR<>'10080' 
 GROUP BY
   BILL_POS.NOM_DOK
   ,DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR)
    ) b_p,
  KLS_PROD, KLS_DOG, KLS_PREDPR PLAT, USL_DOG
WHERE b_p.NOM_DOK=BILLS.NOM_DOK
  AND b_p.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.DOG_ID=USL_DOG.DOG_ID (+)
  AND BILLS.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  -- Условия отбора
  AND BILLS.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND BILLS.PROD_ID_NPR NOT IN ('10003','10006','10009','10041','10042')
  AND BILLS.PROD_ID_NPR='10001'  
  AND BILLS.IS_AGENT IN (2,4,5)
  AND KLS_DOG.DOG_NUMBER LIKE r.DOG_NUMBER
--
UNION ALL

-- Вознаграждение + продукт + страховка (по DATE_KVIT)
SELECT /*+ RULE */
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID as KVIT_ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.NUM_KVIT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD_BN,
  NVL(KVIT.SUM_PROD_NDS,0) AS SUMMA_PROD_NDS,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD,
  NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN,
  NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN_NDS,
  NVL(KVIT.SUM_VOZN11,0) AS SUMMA_VOZN_11_BN,
  NVL(KVIT.SUM_VOZN12,0) AS SUMMA_VOZN_12_BN,
  (CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END) AS SUMMA_VOZN_BN,
  0 /*NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)*/ AS SUMMA_TARIF,
  0 /*NVL(KVIT.TARIF_NDS,0)*/ AS SUMMA_TARIF_NDS,
  0 /*NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_OHRANA,
  0 /*NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_OHRANA_NDS,
  NVL(KVIT.TARIF_ALT,0) AS TARIF_MPS,
  NVL(KVIT.TARIF,0) AS TARIF_KVIT,
  DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0)) AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  NVL(KVIT.SUM_STRAH,0) AS SUMMA_STRAH,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+
 /*NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)+*/
 NVL(KVIT.SUM_STRAH,0) AS SUMMA_DOK,
  NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)/*+
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_DOK_NDS,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
  BILLS, KVIT, KLS_DOG, KLS_PREDPR PLAT,
  KLS_PROD, MONTH, USL_DOG, KLS_VAGOWNER, KLS_VID_OTGR
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  -- Условия отбора
  AND KVIT.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND BILLS.IS_AGENT IN (2,4,5)
  AND KLS_DOG.DOG_NUMBER LIKE r.DOG_NUMBER
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR  
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6)
  
--
UNION ALL

-- Тариф (по дате счета от РЖД)
SELECT /*+ RULE */
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID as KVIT_ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.NUM_KVIT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  0 /*NVL(KVIT.SUM_PROD,0)*/ AS SUMMA_PROD_BN,
  0 /*NVL(KVIT.SUM_PROD_NDS,0) */ AS SUMMA_PROD_NDS,
  0 /*NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)*/ AS SUMMA_PROD,
  0 /*NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)*/ AS SUMMA_AGEN,
  0 /*NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)*/ AS SUMMA_AGEN_NDS,
  0 /*NVL(KVIT.SUM_VOZN11,0)*/ AS SUMMA_VOZN_11_BN,
  0 /*NVL(KVIT.SUM_VOZN12,0)*/ AS SUMMA_VOZN_12_BN,
  0 /*(CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END)*/ AS SUMMA_VOZN_BN,
  NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF,
  NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF_NDS,
  NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA,
  NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA_NDS,
  0 /*NVL(KVIT.TARIF_ALT,0)*/ AS TARIF_MPS,
  0 /*NVL(KVIT.TARIF,0)*/ AS TARIF_KVIT,
  0 /*DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0))*/ AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  0 /*NVL(KVIT.SUM_STRAH,0)*/ AS SUMMA_STRAH,
  /*NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+*/
 NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)/*+
 NVL(KVIT.SUM_STRAH,0)*/ AS SUMMA_DOK,
  /*NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+*/
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_DOK_NDS,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,
  BILLS, KVIT, KLS_DOG, KLS_PREDPR PLAT,
  KLS_PROD, MONTH, USL_DOG, KLS_VAGOWNER, KLS_VID_OTGR,
(SELECT distinct nom_perech,dat_perech 
   FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='PRIL_AGENT_2006.XLS') r,REESTR_RAIL_RGD_SF 
  WHERE DATE_SCH BETWEEN r.BEGIN_DATE AND r.END_DATE -- По дате счета РЖД
    AND r21=95) rail_sf  
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  AND KVIT.PERECH_TEXPD_DATE=rail_sf.dat_perech
  AND KVIT.PERECH_TEXPD_NUM=rail_sf.nom_perech
  -- Условия отбора
  AND BILLS.IS_AGENT IN (2,4,5)
  AND KLS_DOG.DOG_NUMBER LIKE r.DOG_NUMBER
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR  
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6);


--
-- V_RASCH_VOZN_BEFORE  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RASCH_VOZN_BEFORE
(BEG_DATE, END_DATE, MON_KVIT, NUM_5_DAY, IS_KORR, 
 IS_AGENT, PLAT_ID, PLAT_NAME, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, NOM_DOK, ORIG_NOM_SF, 
 OLD_NOM_DOK, OLD_NOM_SF, DATE_VYP_SF, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, NUM_KVIT, NUM_CIST, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11_BN, SUMMA_VOZN_12_BN, SUMMA_VOZN_BN, 
 SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, SUMMA_OHRANA_NDS, TARIF_MPS, 
 TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, SUMMA_STRAH, SUMMA_DOK, 
 SUMMA_DOK_NDS, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, VID_USL_ID)
AS 
SELECT
  -- Счета без отгрузки
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT, 
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ as PROD_EDIZ,
  0 AS KVIT_ID,
  NVL(b_p.ves,0) AS VES,
  0 AS NUM_KVIT,
  ' ' AS NUM_CIST,
  NVL(b_p.cena_bn,0) AS CENA_BN,
  ROUND(NVL(b_p.cena_bn,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(b_p.summa_prod_bn,0) AS SUMMA_PROD_BN,
  NVL(b_p.summa_prod_nds,0) AS SUMMA_PROD_NDS,
  NVL(b_p.summa_prod,0) AS SUMMA_PROD,
  NVL(b_p.summa_agen,0) AS SUMMA_AGEN,
  NVL(b_p.summa_agen_nds,0) AS SUMMA_AGEN_NDS,
  0 AS SUMMA_VOZN_11_BN,
  0 AS SUMMA_VOZN_12_BN,
  0 AS SUMMA_VOZN_BN,
  NVL(b_p.summa_tarif,0) AS SUMMA_TARIF,
  NVL(b_p.summa_tarif_nds,0) AS SUMMA_TARIF_NDS,
  NVL(b_p.summa_ohrana,0) AS SUMMA_OHRANA,
  NVL(b_p.summa_ohrana_nds,0) AS SUMMA_OHRANA_NDS,
  0 AS TARIF_MPS,
  0 AS TARIF_KVIT,
  0 AS SUMMA_RAZN_BN,
  NVL(b_p.NACENKA,0) AS NACENKA,
  NVL(b_p.summa_strah,0) AS SUMMA_STRAH,
  NVL(b_p.summa_dok,0) AS SUMMA_DOK,
  NVL(b_p.summa_dok_nds,0) AS SUMMA_DOK_NDS,
  DECODE(NVL(b_p.summa_strah,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  NULL AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='RASCH_VOZN2006.XLS') r,
  BILLS,
  (
   SELECT /*+ RULE */
     BILL_POS.NOM_DOK,
  DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR) AS PROD_ID_NPR,
  MAX(BILL_POS.NACENKA) AS NACENKA,
  MAX(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.CENA_BN,0)) AS cena_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_prod_bn,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA_NDS20,0)) AS summa_prod_nds,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.SUMMA,0)) AS summa_prod,
  SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.VES,0)) AS ves,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,12,BILL_POS.SUMMA,0)) AS summa_agen,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,12,BILL_POS.SUMMA_NDS20,0)) AS summa_agen_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA,0)) AS summa_vozn_11,
  SUM(DECODE(BILL_POS.BILL_POS_ID,11,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_11_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA-BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_bn,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA,0)) AS summa_vozn_12,
  SUM(DECODE(BILL_POS.BILL_POS_ID,12,BILL_POS.SUMMA_NDS20,0)) AS summa_vozn_12_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA,0)) AS summa_tarif,
  SUM(DECODE(BILL_POS.BILL_POS_ID,10,BILL_POS.SUMMA_NDS20,0)) AS summa_tarif_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA,0)) AS summa_ohrana,
  SUM(DECODE(BILL_POS.BILL_POS_ID,13,BILL_POS.SUMMA_NDS20,0)) AS summa_ohrana_nds,
  SUM(DECODE(BILL_POS.BILL_POS_ID,20,BILL_POS.SUMMA,0)) AS summa_strah,
  SUM(BILL_POS.SUMMA_NDS20) AS summa_dok_nds,
  SUM(BILL_POS.SUMMA) AS summa_dok
    FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='RASCH_VOZN2006.XLS') r,
       BILLS,BILL_POS
    WHERE BILL_POS.NOM_DOK=BILLS.nom_dok
   AND BILLS.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
   AND BILLS.PROD_ID_NPR NOT IN ('10003','10006','10009','10041','10042')
   AND BILLS.PROD_ID_NPR<='10100' AND BILLS.PROD_ID_NPR<>'10080' 
 GROUP BY
   BILL_POS.NOM_DOK
   ,DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,BILL_POS.PROD_ID_NPR,BILLS.PROD_ID_NPR)
    ) b_p,
  KLS_PROD, KLS_DOG, KLS_PREDPR PLAT, USL_DOG
WHERE b_p.NOM_DOK=BILLS.NOM_DOK
  AND b_p.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.DOG_ID=USL_DOG.DOG_ID (+)
  AND BILLS.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  -- Условия отбора
  AND BILLS.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND BILLS.PROD_ID_NPR NOT IN ('10003','10006','10009','10041','10042')
  AND BILLS.PROD_ID_NPR='10001'  
  AND BILLS.IS_AGENT IN (2,4,5)
--
UNION ALL
-- Вознаграждение + продукт + страховка (по DATE_KVIT)
SELECT /*+ RULE */
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID as KVIT_ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.NUM_KVIT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD_BN,
  NVL(KVIT.SUM_PROD_NDS,0) AS SUMMA_PROD_NDS,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0) AS SUMMA_PROD,
  NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN,
  NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0) AS SUMMA_AGEN_NDS,
  NVL(KVIT.SUM_VOZN11,0) AS SUMMA_VOZN_11_BN,
  NVL(KVIT.SUM_VOZN12,0) AS SUMMA_VOZN_12_BN,
  (CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END) AS SUMMA_VOZN_BN,
  0 /*NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)*/ AS SUMMA_TARIF,
  0 /*NVL(KVIT.TARIF_NDS,0)*/ AS SUMMA_TARIF_NDS,
  0 /*NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_OHRANA,
  0 /*NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_OHRANA_NDS,
  NVL(KVIT.TARIF_ALT,0) AS TARIF_MPS,
  NVL(KVIT.TARIF,0) AS TARIF_KVIT,
  DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0)) AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  NVL(KVIT.SUM_STRAH,0) AS SUMMA_STRAH,
  NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+
 /*NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)+*/
 NVL(KVIT.SUM_STRAH,0) AS SUMMA_DOK,
  NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)/*+
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0)*/ AS SUMMA_DOK_NDS,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='RASCH_VOZN2006.XLS') r,
  BILLS, KVIT, KLS_DOG, KLS_PREDPR PLAT,
  KLS_PROD, MONTH, USL_DOG, KLS_VAGOWNER, KLS_VID_OTGR
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  -- Условия отбора
  AND KVIT.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND BILLS.IS_AGENT IN (2,4,5)
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR  
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6)
--
UNION ALL
-- Тариф (по дате счета от РЖД)
SELECT /*+ RULE */
  r.BEGIN_DATE AS BEG_DATE, -- Отетный период
  r.END_DATE AS END_DATE, -- Отчетный период
  TRUNC(BILLS.DATE_KVIT,'MONTH') as MON_KVIT, -- месяц отгрузки 
  TO_NUMBER(TO_CHAR(BILLS.date_mos,'MM'))*100+BILLS.NUM_5_DAY AS NUM_5_DAY, -- Отчетная пятидневка
  DECODE(TRUNC(BILLS.DATE_KVIT,'MONTH'),TRUNC(BILLS.DATE_MOS,'MONTH'),0,TO_NUMBER(TO_CHAR(BILLS.date_kvit,'MM'))*100+BILLS.KORR_5_DAY) AS IS_KORR, -- Какая пятидневка корректируется
  BILLS.IS_AGENT,
  KLS_DOG.PREDPR_ID AS PLAT_ID,
  PLAT.SF_NAME AS PLAT_NAME,
  BILLS.DOG_ID AS DOG_ID,
  KLS_DOG.DOG_NUMBER AS DOG_NUMBER,
  KLS_DOG.DOG_DATE AS DOG_DATE,
  BILLS.DATE_KVIT,
  BILLS.DATE_MOS,
  BILLS.NOM_DOK,
  BILLS.NOM_SF AS ORIG_NOM_SF,
  NVL(BILLS.OLD_NOM_DOK,0) AS OLD_NOM_DOK,
  Get_Old_Sf(BILLS.NOM_DOK,BILLS.NOM_SF,BILLS.OLD_NOM_DOK,BILLS.OLD_NOM_SF) AS OLD_NOM_SF,
  BILLS.DATE_VYP_SF AS DATE_VYP_SF,
  KLS_PROD.ID_NPR AS PROD_ID_NPR,
  KLS_PROD.SF_NAME AS PROD_NAME,
  KLS_PROD.ED_IZ AS PROD_EDIZ,
  KVIT.ID as KVIT_ID,
  KVIT.VES_BRUTTO AS VES,
  KVIT.NUM_KVIT,
  DECODE(MONTH.LOAD_ABBR,'САМ',KVIT.NUM_DOVER,KVIT.NUM_CIST) AS NUM_CIST,
  NVL(KVIT.CENA,0) AS CENA_BN,
  ROUND(NVL(KVIT.CENA,0)*(100+For_Bills.GetNDSValue(BILLS.date_kvit))/100,2) AS CENA,
  0 /*NVL(KVIT.SUM_PROD,0)*/ AS SUMMA_PROD_BN,
  0 /*NVL(KVIT.SUM_PROD_NDS,0) */ AS SUMMA_PROD_NDS,
  0 /*NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)*/ AS SUMMA_PROD,
  0 /*NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)*/ AS SUMMA_AGEN,
  0 /*NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)*/ AS SUMMA_AGEN_NDS,
  0 /*NVL(KVIT.SUM_VOZN11,0)*/ AS SUMMA_VOZN_11_BN,
  0 /*NVL(KVIT.SUM_VOZN12,0)*/ AS SUMMA_VOZN_12_BN,
  0 /*(CASE
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)=0 THEN 0
     WHEN NVL(KVIT.sum_vozn11,0)=0 AND NVL(KVIT.sum_vozn12,0)<>0 THEN NVL(KVIT.sum_vozn12,0)-(NVL(KVIT.TARIF_ALT,0)+NVL(KVIT.TARIF,0))
  ELSE NVL(KVIT.sum_vozn11,0)
   END)*/ AS SUMMA_VOZN_BN,
  NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF,
  NVL(KVIT.TARIF_NDS,0) AS SUMMA_TARIF_NDS,
  NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA,
  NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_OHRANA_NDS,
  0 /*NVL(KVIT.TARIF_ALT,0)*/ AS TARIF_MPS,
  0 /*NVL(KVIT.TARIF,0)*/ AS TARIF_KVIT,
  0 /*DECODE(NVL(KVIT.sum_vozn12,0),0,0,NVL(KVIT.TARIF_ALT,0)-NVL(KVIT.TARIF,0))*/ AS SUMMA_RAZN_BN,
  NVL(KVIT.NACENKA,0) AS NACENKA,
  0 /*NVL(KVIT.SUM_STRAH,0)*/ AS SUMMA_STRAH,
  /*NVL(KVIT.SUM_PROD_NDS,0)+NVL(KVIT.SUM_PROD,0)+
    NVL(KVIT.SUM_VOZN11,0)+NVL(KVIT.SUM_VOZN12,0)+NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+*/
 NVL(KVIT.TARIF,0)+NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD,0)+NVL(KVIT.TARIF_GUARD_NDS,0)/*+
 NVL(KVIT.SUM_STRAH,0)*/ AS SUMMA_DOK,
  /*NVL(KVIT.SUM_PROD_NDS,0)+
    NVL(KVIT.SUM_VOZN11_NDS,0)+NVL(KVIT.SUM_VOZN12_NDS,0)+*/
 NVL(KVIT.TARIF_NDS,0)+
 NVL(KVIT.TARIF_GUARD_NDS,0) AS SUMMA_DOK_NDS,
  DECODE(NVL(KVIT.SUM_STRAH,0),0,' ',TO_CHAR(BILLS.NOM_SF-100000)) AS NUM_STRAH,
  NVL(DECODE(BILLS.IS_AGENT,2,USL_DOG.USL_SUM_AREND,USL_DOG.USL_SUM),0) AS USL_SUM,
  TO_NUMBER(CASE
              WHEN MONTH.LOAD_ABBR In ('САМ','РЕЗ','ТРУ') THEN NULL
     WHEN KLS_VAGOWNER.VAGOWN_TYP_ID=0 THEN KLS_VAGOWNER.VAGOWN_TYP_ID
     WHEN KLS_VAGOWNER.OWNER_ID IN (2,33) THEN 1
     ELSE 2
   END) AS VAGOWN_TYP_ID,
  USL_DOG.VID_USL_ID
FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='RASCH_VOZN2006.XLS') r,
  BILLS, KVIT, KLS_DOG, KLS_PREDPR PLAT,
  KLS_PROD, MONTH, USL_DOG, KLS_VAGOWNER, KLS_VID_OTGR,
(SELECT distinct nom_perech,dat_perech 
   FROM (select * from V_MASTER_REPORTS where UPPER(REPORT_FILE)='RASCH_VOZN2006.XLS') r,REESTR_RAIL_RGD_SF 
  WHERE DATE_SCH BETWEEN r.BEGIN_DATE AND r.END_DATE -- По дате счета РЖД
    AND r21=95) rail_sf  
WHERE BILLS.DOG_ID = KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID = PLAT.ID
  AND BILLS.NOM_DOK = KVIT.BILL_ID
  AND KVIT.PROD_ID_NPR = KLS_PROD.ID_NPR
  AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID(+)
  AND BILLS.NOM_ZD = MONTH.NOM_ZD
  AND MONTH.DOG_ID=USL_DOG.DOG_ID (+)
  AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)
  AND KVIT.PERECH_TEXPD_DATE=rail_sf.dat_perech
  AND KVIT.PERECH_TEXPD_NUM=rail_sf.nom_perech
  -- Условия отбора
  AND BILLS.IS_AGENT IN (2,4,5)
  AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR  
  AND KLS_VID_OTGR.LOAD_TYPE_ID IN (1,4,6);


--
-- V_REE_MONTH_GRAFIK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_REE_MONTH_GRAFIK
(ORDER_NPR, KIND_NPR, PLAT_NAME, PLATSNP_NAME, FILIAL_NAME, 
 FILIAL_TRANSIT, KINDPROD_NAME, DOG_NUMBER, ABBR_NPR, INPUT_DATE, 
 NOM_ZD, TONN_DECLARED, TONN_LOADED, CIST_LOADED, POLU_NAME, 
 NAIM_REGION, STAN_NAME, GDOR_NAME, FLG_ALLOW_8_AXES, LOAD_ABBR, 
 NORMOTGR, CENA_OTP, PRIM, OST, PLANMOSCOWDOG, 
 PLANMOSCOWDOGWITHFOR, PLANOURDOG, PLANOURDOGWITHFOR, PLANMOSCOWPROD, PLANMOSCOWPRODOPT, 
 PLANOURPROD, PLANOURPRODOPT, FACTDOG, FACTDOGWITHFOR, FACTPROD, 
 ETRAN_NUM, ETRAN_DATE, ETRAN_SOGL, GU12_A_ID, STAN_ID, 
 PROD_ID_NPR, KOD_ISU, TONN_REE, PRIORITY, GU12_GRAFIK, 
 GU12_LOAD_ABBR)
AS 
select /*+ RULE */ a."ORDER_NPR",a."KIND_NPR",a."PLAT_NAME",a."PLATSNP_NAME",a."FILIAL_NAME",a."FILIAL_TRANSIT",a."KINDPROD_NAME",a."DOG_NUMBER",a."ABBR_NPR",a."INPUT_DATE",a."NOM_ZD",a."TONN_DECLARED",a."TONN_LOADED",a."CIST_LOADED",a."POLU_NAME",a."NAIM_REGION",a."STAN_NAME",a."GDOR_NAME",a."FLG_ALLOW_8_AXES",a."LOAD_ABBR",a."NORMOTGR",a."CENA_OTP",a."PRIM",a."OST",a."PLANMOSCOWDOG",a."PLANMOSCOWDOGWITHFOR",a."PLANOURDOG",a."PLANOURDOGWITHFOR",a."PLANMOSCOWPROD",a."PLANMOSCOWPRODOPT",a."PLANOURPROD",a."PLANOURPRODOPT",a."FACTDOG",a."FACTDOGWITHFOR",a."FACTPROD",a."ETRAN_NUM",a."ETRAN_DATE",a."ETRAN_SOGL",a."GU12_A_ID",a."STAN_ID",a."PROD_ID_NPR",a."KOD_ISU",a."TONN_REE",a."PRIORITY",a."GU12_GRAFIK",a."GU12_LOAD_ABBR"
from V_REE_MONTH_UHTA a, V_TEMP_REESTR_PARAMS b
where
  -- Ограничение по графику отгрузки
/*  exists (select null from zakaz_hist c, zakaz_grafik d
           where c.id=d.zakaz_hist_id
		     AND c.nom_zd=a.nom_zd
			 AND d.date_load BETWEEN b.GRAFIK_FROM AND b.GRAFIK_TO)*/
  exists (/* График */
           SELECT nom_zd, SUM(gu12_br.KOL_VAG) as KOL_VAG , SUM(gu12_br.VES) as VES
                 FROM month,gu12_a,gu12_b,gu12_br,V_TEMP_REESTR_PARAMS b
                WHERE month.GU12_A_ID=gu12_a.id
				  AND nom_zd=a.nom_zd
                  AND gu12_a.id=gu12_b.id_a
                  AND gu12_b.STAN_ID=month.STAN_ID
                  AND gu12_b.id=gu12_br.id_b
                  AND gu12_br.date_r<=b.GRAFIK_TO
				  AND month.nom_zd=a.nom_zd
				  AND gu12_b.ISCOR<>2
		  GROUP BY nom_zd HAVING SUM(gu12_br.KOL_VAG)-a.CIST_LOADED>0 /*AND SUM(gu12_br.VES)-a.TONN_LOADED>=40*/
		 )
  or a.load_abbr in (select load_abbr from kls_vid_otgr where load_type_id<>1)
  or a.kind_npr>='90000';


--
-- V_RITM_POST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RITM_POST
(BEGIN_DATE, END_DATE, PERIOD_NAME, PLAT_ID, PLAT_NAME, 
 PLAN, GRAF_1, FACT_1, GRAF_2, FACT_2, 
 GRAF_3, FACT_3)
AS 
SELECT 
  --Анализ ритмичности: План/Факт поставок 
  r.BEGIN_DATE, 
  r.END_DATE, 
  RusMonth(r.END_DATE) AS Period_Name, 
  a.PLAT_ID,a.PLAT_NAME, 
  SUM(PLAN_VES) AS PLAN, 
  SUM(GRAF_1) AS GRAF_1, 
  SUM(FACT_1) AS FACT_1, 
  SUM(GRAF_2) AS GRAF_2, 
  SUM(FACT_2) AS FACT_2, 
  SUM(GRAF_3) AS GRAF_3, 
  SUM(FACT_3) AS FACT_3 
FROM 
( 
  SELECT 
    PLAT_ID,PLAT_NAME,PLAN_VES, 
    0 AS GRAF_1, 
    0 AS FACT_1, 
    0 AS GRAF_2, 
    0 AS FACT_2, 
    0 AS GRAF_3, 
    0 AS FACT_3 
  FROM V_RITM_POST_PLAN 
  UNION ALL 
  SELECT 
    PLAT_ID, 
	PLAT_NAME, 
	0 AS PLAN_VES, 
    DECODE(NUM_DECADA,1,GRAF_VES,0) AS GRAF_1, 
    0 AS FACT_1, 
    DECODE(NUM_DECADA,2,GRAF_VES,0) AS GRAF_2, 
    0 AS FACT_2, 
    DECODE(NUM_DECADA,3,GRAF_VES,0) AS GRAF_3, 
    0 AS FACT_3 
  FROM V_RITM_POST_GRAFIK 
  UNION ALL 
  SELECT 
    PLAT_ID, 
	PLAT_NAME, 
	0 AS PLAN_VES, 
    0 AS GRAF_1, 
    DECODE(NUM_DECADA,1,FACT_VES,0) AS FACT_1, 
    0 AS GRAF_2, 
    DECODE(NUM_DECADA,2,FACT_VES,0) AS FACT_2, 
    0 AS GRAF_3, 
    DECODE(NUM_DECADA,3,FACT_VES,0) AS FACT_3 
  FROM V_RITM_POST_FACT 
) a, (SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='RITM_POST.XLS') r 
GROUP BY 
  r.BEGIN_DATE, 
  r.END_DATE, 
  a.PLAT_ID, 
  a.PLAT_NAME;


--
-- V_SF_PRINT_WITH_KVIT_MASTER  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT_WITH_KVIT_MASTER
(KOD_PROD, KOD_TU, SCHETF, SCHETUSL, SF_NO, 
 ORIG_SF_NO, ID_POZ_PROD, DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, 
 FULL_ADDR_PRED_POST, ADDR_PRED_POST, PHONE_POST, INN_NPOST, PLRDOC, 
 DATA_PLRD, PLRDOC_AND_DATE, DOGOVOR, FULL_NAME_PLAT, FULL_ADDR_PRED_PLAT, 
 ADDR_PRED_PLAT, PHONE_PLAT, KORS_PRED_POST, RS_PRED_POST, BIK_PRED_POST, 
 BANK_PRED_POST, KORS_PRED_PLAT, RS_PRED_PLAT, BIK_PRED_PLAT, BANK_PRED_PLAT, 
 INN_PLAT, GROTPR, GROTPR_ADDR, GRPOL, GRPOL_ADDR, 
 DOPOLN1, DOPOLN2, NAIM_TOV, EDIZM, KOL, 
 CENA, AKCIZ1, SUMMA, AKCIZ2, STNDS, 
 SUMNDS, STGSM, SUMGSM, SUMNPR, ALLNDS, 
 PROISX, GTD, ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, 
 WITH_STNDS, WITH_STNDS_TXT, BUHANAL, DATE_OTGR, DATE_DOG, 
 BOSS, GLAVBUH, NUM_PROTOKOL, PLAT_OKPO, NAKL_NUM, 
 VES_PROPIS, DOVER_NUM, KVIT_ID, NUM_CIST, AKCIZ_TXT, 
 DATE_MOS, KPP_PLAT, KPP_POST, DATE_PROPIS, NUM_AKT, 
 F_AKCIZ, POST_COMPANY, POST_DOLJ, POST_FIO, POST_DOVER, 
 POKUP_COMPANY, POKUP_DOLJ, POKUP_FIO, POKUP_DOVER, POST_DOLJ_SIGN, 
 POST_FIO_SIGN, POKUP_DOLJ_SIGN, POKUP_FIO_SIGN, POKUP_COMPANY_SIGN, SHORT_NAIM_TOV)
AS 
SELECT /*+ */
  b.nom_dok AS KOD_PROD
  ,6 AS KOD_TU
  ,SUBSTR(Get_Nom_Sf(0,b.nom_dok,b.nom_sf,b.old_nom_dok,b.old_nom_sf,b.summa_dok,b.date_vyp_sf,b.date_kvit),1,100) AS  SCHETF -- номер СФ + номер корректируемого счета (через дробь) + дата СФ
  ,SUBSTR(Get_Nom_Sf(3,b.nom_dok,b.nom_sf,b.old_nom_dok,b.old_nom_sf,b.summa_dok,b.date_vyp_sf,b.date_kvit),1,100) AS  SCHETUSL -- номер СФ + дата СФ + г.
  ,TO_CHAR(b.nom_sf) AS  SF_NO -- номер СФ
  ,b.nom_sf AS ORIG_SF_NO
  ,DECODE(bp.BILL_POS_ID,12,11,13,10,bp.BILL_POS_ID)*(CASE WHEN bp.npp<>0 THEN 100 ELSE 1 END)+bp.npp AS id_poz_prod
  ,b.date_vyp_sf AS data_vyp_sf
  ,p0.sf_name AS full_name_npost
  ,'РУБ' AS vystval
  ,(case
  when b.date_vyp_sf>=to_date('01.06.2006','dd.mm.yyyy') and p0.full_address_j is NULL then Get_Addr(r0.id,p0.postindex_j,p0.city_j,p0.address_j,r0.region_name)  
  when b.date_vyp_sf>=to_date('01.06.2006','dd.mm.yyyy') and p0.full_address_j is not NULL then p0.full_address_j  
  else Get_Addr(r0.id,p0.postindex_j,p0.city_j,p0.address_j,r0.region_name)
    end) AS full_addr_pred_post 
  ,Get_Addr(r0.id,p0.postindex_j,p0.city_j,p0.address_j,r0.region_name) AS addr_pred_post
  ,p0.phone AS phone_post
  ,p0.inn AS inn_npost
  ,'' AS plrdoc
  ,TO_DATE(NULL) AS DATA_PLRD
  ,'' AS PLRDOC_AND_DATE
  ,d.dog_number AS dogovor
  ,p1.sf_name AS FULL_NAME_PLAT
  ,(case
  when b.date_vyp_sf>=to_date('01.06.2006','dd.mm.yyyy') and p1.full_address_j is NULL then Get_Addr(r1.id,p1.postindex_j,p1.city_j,p1.address_j,r1.region_name)  
  when b.date_vyp_sf>=to_date('01.06.2006','dd.mm.yyyy') and p1.full_address_j is not NULL then p1.full_address_j  
  else Get_Addr(r1.id,p1.postindex_j,p1.city_j,p1.address_j,r1.region_name)
    end) AS full_addr_pred_plat 
  ,Get_Addr(r1.id,p1.postindex_j,p1.city_j,p1.address_j,r1.region_name) AS ADDR_PRED_PLAT
  ,p1.phone AS phone_plat
  ,p0.BANK_KORS AS kors_pred_post
  ,Get_Sf_Post_Rs(p0.ID,p0.RS,d.dog_number) AS rs_pred_post
  ,bk0.BIK AS bik_pred_post
  ,bk0.BANK_NAME AS bank_pred_post
  ,p1.BANK_KORS AS kors_pred_plat
  ,p1.RS AS rs_pred_plat
  ,bk1.BIK AS bik_pred_plat
  ,bk1.BANK_NAME AS bank_pred_plat
  ,TRIM(p1.inn) AS inn_plat
  ,(CASE
      WHEN b_pr.SF_GROTP_VIEW=0 THEN '-'
      ELSE p4.sf_name
 END) AS grotpr
  ,(CASE
      WHEN b_pr.SF_GROTP_VIEW=0 THEN '-'
      WHEN p4.full_address_j is NULL THEN Get_Addr(r4.id,p4.postindex_p,p4.city_p,p4.address_p,r4.region_name)
   ELSE p4.full_address_j
 END) AS grotpr_addr
  ,(CASE
      WHEN b_pr.SF_POLUCH_VIEW=0 THEN '-'
      ELSE p2.sf_name
 END) AS grpol
  ,(CASE
      WHEN b_pr.SF_POLUCH_VIEW=0 THEN '-'
   WHEN p2.full_address_j IS NULL THEN Get_Addr(r2.id,p2.postindex_p,p2.city_p,p2.address_p,r2.region_name)
   ELSE p2.full_address_j
 END) AS GRPOL_ADDR
  ,'' AS dopoln1
  ,Get_Sf_Dopoln2(b.PROD_ID_NPR,b_pr.SF_NAME,bp.PROD_ID_NPR,bp_pr.SF_NAME,d.DOG_NUMBER,d.DOG_DATE,b.nom_dok,b.date_kvit,b.date_mos,DECODE(b.PROD_ID_NPR,'10080',bp.NUM_AKT,b.NOM_SF-100000),NVL(m.NAZN_OTG_ID,0)) AS dopoln2
  ,Get_Sf_Prodname(b.PROD_ID_NPR,b_pr.SF_NAME,bp.PROD_ID_NPR,bp_pr.SF_NAME,b.date_kvit) AS naim_tov
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN DECODE(NVL(bp.ves,0),0,'-',NLS_LOWER(TRIM(bp_pr.ED_IZ)))
   ELSE DECODE(NVL(kv.ves_brutto,0),0,'-',NLS_LOWER(TRIM(bp_pr.ED_IZ)))
 END) AS edizm
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN NVL(bp.ves,0)
   ELSE NVL(kv.ves_brutto,0)
 END) AS kol
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN DECODE(NVL(BP.CENA_BN,0),0,'-',TO_CHAR(bp.cena_bn,'999999.99'))
   ELSE DECODE(NVL(KV.CENA,0),0,'-',TO_CHAR(kv.cena,'999999.99'))
 END) AS cena
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN bp.summa_akciz
   ELSE kv.sum_akciz
 END) AS akciz1
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa_bn
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa_bn
   ELSE kv.sum_prod
 END) AS summa
  ,0 AS akciz2
  ,(CASE WHEN bp_pr.SF_NDS_VIEW=0 THEN 0 ELSE For_Bills.GetNDSValue(b.date_kvit) END) AS stnds
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa_nds20
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa_nds20
   ELSE kv.sum_prod_nds
 END) AS sumnds
  ,0 AS stgsm
  ,0 AS sumgsm
  ,0 AS sumnpr
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa
   ELSE kv.sum_prod+kv.sum_prod_nds
 END) AS allnds
  ,'-' AS proisx
  ,'-' AS gtd
  ,master.Sf_F_Get_Propisi_Sfprod_Kvit(b.LUK_SUMMA_DOK) AS ALLNDS_PROPIS
  ,master.Sf_F_Get_Propisi_Sfprod_Kvit(b.LUK_NDS_DOK) AS NDS_PROPIS
  ,master.Sf_F_Get_Propisi_Sfprod_Kvit(b.LUK_SUMMA_DOK-b.LUK_NDS_DOK) AS NONDS_PROPIS
  ,'+' AS with_stnds
  ,'Y' AS with_stnds_txt
  ,bp_pr.analit AS buhanal
  ,b.date_kvit AS DATE_OTGR
  ,(CASE
      WHEN d.PREDPR_ID=1 AND d.PLAT_DOG_NUMBER<>'' THEN 'от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||' г. '|| ' ('||d.PLAT_DOG_NUMBER||')'
   ELSE 'от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||' г. '
 END) AS DATE_DOG
  ,s.boss
  ,s.blavbuh AS glavbuh
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN ''
      WHEN b.PROD_ID_NPR='10080' THEN bp.PROTO_NUM || ' от ' || TO_CHAR(bp.PROTO_DATE,'dd.mm.yy') || 'г.'
   ELSE b.PROTO_NUM || ' от ' || TO_CHAR(b.PROTO_DATE,'dd.mm.yy') || 'г.'
 END) AS NUM_PROTOKOL
  ,Get_Plat_Okpo(b.nom_dok) AS PLAT_OKPO
  ,Get_Nakl_Num(b.nom_dok) AS NAKL_NUM
  ,master.Sf_F_Get_Propisi_Ves(b.nom_dok) AS VES_PROPIS
  ,Get_Dover_Num(b.nom_dok) AS dover_num
  ,kv.ID AS kvit_id
  ,kv.NUM_CIST
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN '-'
      WHEN b.PROD_ID_NPR='10080' THEN (CASE WHEN bp_pr.akciz=1 THEN 'БЕЗ АКЦИЗА' ELSE '-' END)
      WHEN bp_pr.akciz=1 THEN 'БЕЗ АКЦИЗА'
     ELSE '-'
 END) AS akciz_txt
  ,B.DATE_MOS
  ,TRIM(p1.KPP) AS KPP_PLAT
  ,p0.kpp AS kpp_post
  ,SUBSTR(Rusdate(b.date_kvit),1,30) AS date_propis
  ,DECODE(b.PROD_ID_NPR,'10080',bp.NUM_AKT,b.NOM_SF-100000) as NUM_AKT
  ,bp_pr.akciz AS f_akciz
  ,p0.sf_name AS POST_COMPANY,
   sd.POST_DOLJ, sd.POST_FIO, sd.POST_DOVER,
   p1.sf_name AS POKUP_COMPANY,
   sd.POKUP_DOLJ, sd.POKUP_FIO, sd.POKUP_DOVER
  ,sd.POST_DOLJ_SIGN,sd.POST_FIO_SIGN,sd.POKUP_DOLJ_SIGN, sd.POKUP_FIO_SIGN, sd.POKUP_COMPANY_SIGN
  ,bp_pr.NAME_NPR AS short_naim_tov
FROM
  MASTER.BILLS b
  ,(
  SELECT 
      bp.NOM_DOK, 
   bp.BILL_POS_ID,
   NVL(bpr.npp,0) as NPP, 
   NVL(bpr.VES,bp.VES) as VES,
   NVL(bpr.CENA_BN,bp.CENA_BN) as CENA_BN,
   NVL(bpr.CENA,bp.CENA) as CENA, 
   NVL(bpr.SUMMA_BN,bp.SUMMA_BN) as SUMMA_BN, 
   NVL(bpr.SUMMA_AKCIZ,bp.SUMMA_AKCIZ) as SUMMA_AKCIZ, 
   NVL(bpr.SUMMA_NDS20,bp.SUMMA_NDS20) as SUMMA_NDS20,
   NVL(bpr.SUMMA,bp.SUMMA) as SUMMA,
   bp.DATE_REALIZ,
   NVL(bpr.PROD_ID_NPR,bp.PROD_ID_NPR) as PROD_ID_NPR,
   bp.OWNERSHIP_ID, 
   bp.ANALIT_ID, 
   bp.IS_AGENT, 
   bp.IS_LUK, 
   bp.NACENKA, 
   bp.NUM_AKT, 
   bp.PROTO_NUM, 
   bp.PROTO_DATE, 
   bp.NO_AKCIZ, 
   bp.SUPPLIER_ID
    FROM MASTER.BILL_POS bp, MASTER.BILLS b, MASTER.BILL_POS_ROW bpr
  WHERE bp.nom_dok=b.nom_dok
    AND bp.is_luk+0=1
    AND bp.is_pokup<>1
    AND (bp.bill_pos_id<10 OR b.prod_id_npr<'10100')
 AND bp.nom_dok=bpr.nom_dok(+)
 AND bp.bill_pos_id=bpr.bill_pos_id(+)
 ) bp
  ,MASTER.KLS_DOG d
  ,MASTER.KLS_PREDPR p0 --продавец
  ,MASTER.KLS_PREDPR p1 --плательщик
  ,MASTER.KLS_PREDPR p2 --получатель
  ,MASTER.KLS_PREDPR p4 --отправитель
  ,MASTER.KLS_REGION r0 --продавец
  ,MASTER.KLS_REGION r1 --плательщик
  ,MASTER.KLS_REGION r2 --получатель
  ,MASTER.KLS_REGION r4 --отправитель
  ,MASTER.KLS_BANKS bk0 --продавец
  ,MASTER.KLS_BANKS bk1 --плательщик
  ,MASTER.KLS_PROD b_pr -- нефтепродукт в СФ
  ,MASTER.KLS_PROD bp_pr -- нефтепродукт в позиции СФ
  ,(SELECT  /*+ INDEX(BILLS BILLS_PK) */ KVIT.*
      FROM MASTER.KVIT,MASTER.BILLS
     WHERE KVIT.bill_id=BILLS.nom_dok
    AND BILLS.prod_id_npr<>'10080'
 UNION ALL
    SELECT /*+ INDEX(BILLS BILLS_PK) */ DOP_KVIT.*
      FROM MASTER.DOP_KVIT,MASTER.BILLS
     WHERE DOP_KVIT.bill_id=BILLS.nom_dok
    AND BILLS.prod_id_npr<>'10080' ) kv
  ,V_SF_SIGNS s
  ,V_SF_DOVER sd
  ,MASTER.MONTH m
WHERE b.dog_id=d.id
  AND b.nom_dok=bp.nom_dok
  AND bp.nom_dok=kv.bill_id(+)
  AND bp.bill_pos_id=kv.bill_pos_id(+)
  AND d.predpr_id=p1.id
  AND b.nom_zd=m.nom_zd(+)
  AND b.owner_id = p0.id
  AND (CASE
         WHEN NVL(m.potreb_id,0)>0 THEN m.potreb_id
   ELSE p1.id
    END) = p2.id
  AND (CASE
         WHEN NVL(m.grotp_id,0)>0 THEN m.grotp_id
   ELSE 8
    END) = p4.id
  AND p0.region_id=r0.id(+)
  AND p1.region_id=r1.id(+)
  AND p2.region_p_id=r2.id(+)
  AND p4.region_p_id=r4.id(+)
  AND p0.BANKS_ID=bk0.ID(+)
  AND p1.BANKS_ID=bk1.ID(+)
  AND b.prod_id_npr=b_pr.id_npr
  AND bp.PROD_ID_NPR=bp_pr.id_npr
--  AND( b.nom_dok in (6142554,6142555,6142556)  )
;


--
-- V_SF_PRINT_WITH_KVIT_MASTEROLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT_WITH_KVIT_MASTEROLD
(KOD_PROD, KOD_TU, SCHETF, SCHETUSL, SF_NO, 
 ORIG_SF_NO, ID_POZ_PROD, DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, 
 ADDR_PRED_POST, PHONE_POST, INN_NPOST, PLRDOC, DATA_PLRD, 
 PLRDOC_AND_DATE, DOGOVOR, FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, 
 KORS_PRED_POST, RS_PRED_POST, BIK_PRED_POST, BANK_PRED_POST, KORS_PRED_PLAT, 
 RS_PRED_PLAT, BIK_PRED_PLAT, BANK_PRED_PLAT, INN_PLAT, GROTPR, 
 GROTPR_ADDR, GRPOL, GRPOL_ADDR, DOPOLN1, DOPOLN2, 
 NAIM_TOV, EDIZM, KOL, CENA, AKCIZ1, 
 SUMMA, AKCIZ2, STNDS, SUMNDS, STGSM, 
 SUMGSM, SUMNPR, ALLNDS, PROISX, GTD, 
 ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, WITH_STNDS_TXT, 
 BUHANAL, DATE_OTGR, DATE_DOG, BOSS, GLAVBUH, 
 NUM_PROTOKOL, PLAT_OKPO, NAKL_NUM, VES_PROPIS, DOVER_NUM, 
 KVIT_ID, NUM_CIST, AKCIZ_TXT, DATE_MOS, KPP_PLAT, 
 KPP_POST, DATE_PROPIS, NUM_AKT, F_AKCIZ, POST_COMPANY, 
 POST_DOLJ, POST_FIO, POST_DOVER, POKUP_COMPANY, POKUP_DOLJ, 
 POKUP_FIO, POKUP_DOVER, POST_DOLJ_SIGN, POST_FIO_SIGN, POKUP_DOLJ_SIGN, 
 POKUP_FIO_SIGN, POKUP_COMPANY_SIGN, SHORT_NAIM_TOV)
AS 
SELECT /*+ */
  b.nom_dok AS KOD_PROD
  ,6 AS KOD_TU
  ,SUBSTR(Get_Nom_Sf(0,b.nom_dok,b.nom_sf,b.old_nom_dok,b.old_nom_sf,b.summa_dok,b.date_vyp_sf,b.date_kvit),1,100) AS  SCHETF -- номер СФ + номер корректируемого счета (через дробь) + дата СФ
  ,SUBSTR(Get_Nom_Sf(3,b.nom_dok,b.nom_sf,b.old_nom_dok,b.old_nom_sf,b.summa_dok,b.date_vyp_sf,b.date_kvit),1,100) AS  SCHETUSL -- номер СФ + дата СФ + г.
  ,TO_CHAR(b.nom_sf) AS  SF_NO -- номер СФ
  ,b.nom_sf AS ORIG_SF_NO
  ,DECODE(bp.BILL_POS_ID,12,11,13,10,bp.BILL_POS_ID) AS id_poz_prod
  ,b.date_vyp_sf AS data_vyp_sf
  ,p0.sf_name AS full_name_npost
  ,'РУБ' AS vystval
  ,Get_Addr(r0.id,p0.postindex_j,p0.city_j,p0.address_j,r0.region_name) AS addr_pred_post
  ,p0.phone AS phone_post
  ,p0.inn AS inn_npost
  ,'' AS plrdoc
  ,TO_DATE(NULL) AS DATA_PLRD
  ,'' AS PLRDOC_AND_DATE
  ,d.dog_number AS dogovor
  ,p1.sf_name AS FULL_NAME_PLAT
  ,Get_Addr(r1.id,p1.postindex_j,p1.city_j,p1.address_j,r1.region_name) AS ADDR_PRED_PLAT
  ,p1.phone AS phone_plat
  ,p0.BANK_KORS AS kors_pred_post
  ,Get_Sf_Post_Rs(p0.ID,p0.RS,d.dog_number) AS rs_pred_post
  ,bk0.BIK AS bik_pred_post
  ,bk0.BANK_NAME AS bank_pred_post
  ,p1.BANK_KORS AS kors_pred_plat
  ,p1.RS AS rs_pred_plat
  ,bk1.BIK AS bik_pred_plat
  ,bk1.BANK_NAME AS bank_pred_plat
  ,TRIM(p1.inn) AS inn_plat
  ,(CASE
      WHEN b_pr.SF_GROTP_VIEW=0 THEN '-'
      ELSE p4.sf_name
 END) AS grotpr
  ,(CASE
      WHEN b_pr.SF_GROTP_VIEW=0 THEN '-'
      ELSE Get_Addr(r4.id,p4.postindex_p,p4.city_p,p4.address_p,r4.region_name)
 END) AS grotpr_addr
  ,(CASE
      WHEN b_pr.SF_POLUCH_VIEW=0 THEN '-'
      ELSE p2.sf_name
 END) AS grpol
  ,(CASE
      WHEN b_pr.SF_POLUCH_VIEW=0 THEN '-'
      ELSE Get_Addr(r2.id,p2.postindex_p,p2.city_p,p2.address_p,r2.region_name)
 END) AS GRPOL_ADDR
  ,'' AS dopoln1
  ,Get_Sf_Dopoln2(b.PROD_ID_NPR,b_pr.SF_NAME,bp.PROD_ID_NPR,bp_pr.SF_NAME,d.DOG_NUMBER,d.DOG_DATE,b.nom_dok,b.date_kvit,b.date_mos,DECODE(b.PROD_ID_NPR,'10080',bp.NUM_AKT,b.NOM_SF-100000),NVL(m.NAZN_OTG_ID,0)) AS dopoln2
  ,Get_Sf_Prodname(b.PROD_ID_NPR,b_pr.SF_NAME,bp.PROD_ID_NPR,bp_pr.SF_NAME,b.date_kvit) AS naim_tov
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN DECODE(NVL(bp.ves,0),0,'-',NLS_LOWER(TRIM(bp_pr.ED_IZ)))
   ELSE DECODE(NVL(kv.ves_brutto,0),0,'-',NLS_LOWER(TRIM(bp_pr.ED_IZ)))
 END) AS edizm
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN NVL(bp.ves,0)
   ELSE NVL(kv.ves_brutto,0)
 END) AS kol
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN DECODE(NVL(BP.CENA_BN,0),0,'-',TO_CHAR(bp.cena_bn,'999999.99'))
   ELSE DECODE(NVL(KV.CENA,0),0,'-',TO_CHAR(kv.cena,'999999.99'))
 END) AS cena
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN bp.summa_akciz
   ELSE kv.sum_akciz
 END) AS akciz1
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa_bn
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa_bn
   ELSE kv.sum_prod
 END) AS summa
  ,0 AS akciz2
  ,(CASE WHEN bp_pr.SF_NDS_VIEW=0 THEN 0 ELSE For_Bills.GetNDSValue(b.date_kvit) END) AS stnds
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa_nds20
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa_nds20
   ELSE kv.sum_prod_nds
 END) AS sumnds
  ,0 AS stgsm
  ,0 AS sumgsm
  ,0 AS sumnpr
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa
   ELSE kv.sum_prod+kv.sum_prod_nds
 END) AS allnds
  ,'-' AS proisx
  ,'-' AS gtd
  ,master.Sf_F_Get_Propisi_Sfprod_Kvit(b.LUK_SUMMA_DOK) AS ALLNDS_PROPIS
  ,master.Sf_F_Get_Propisi_Sfprod_Kvit(b.LUK_NDS_DOK) AS NDS_PROPIS
  ,master.Sf_F_Get_Propisi_Sfprod_Kvit(b.LUK_SUMMA_DOK-b.LUK_NDS_DOK) AS NONDS_PROPIS
  ,'+' AS with_stnds
  ,'Y' AS with_stnds_txt
  ,bp_pr.analit AS buhanal
  ,b.date_kvit AS DATE_OTGR
  ,(CASE
      WHEN d.PREDPR_ID=1 AND d.PLAT_DOG_NUMBER<>'' THEN 'от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||' г. '|| ' ('||d.PLAT_DOG_NUMBER||')'
   ELSE 'от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||' г. '
 END) AS DATE_DOG
  ,s.boss
  ,s.blavbuh AS glavbuh
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN ''
      WHEN b.PROD_ID_NPR='10080' THEN bp.PROTO_NUM || ' от ' || TO_CHAR(bp.PROTO_DATE,'dd.mm.yy') || 'г.'
   ELSE b.PROTO_NUM || ' от ' || TO_CHAR(b.PROTO_DATE,'dd.mm.yy') || 'г.'
 END) AS NUM_PROTOKOL
  ,Get_Plat_Okpo(b.nom_dok) AS PLAT_OKPO
  ,Get_Nakl_Num(b.nom_dok) AS NAKL_NUM
  ,master.Sf_F_Get_Propisi_Ves(b.nom_dok) AS VES_PROPIS
  ,Get_Dover_Num(b.nom_dok) AS dover_num
  ,kv.ID AS kvit_id
  ,kv.NUM_CIST
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN '-'
      WHEN b.PROD_ID_NPR='10080' THEN (CASE WHEN bp_pr.akciz=1 THEN 'БЕЗ АКЦИЗА' ELSE '-' END)
      WHEN bp_pr.akciz=1 THEN 'БЕЗ АКЦИЗА'
     ELSE '-'
 END) AS akciz_txt
  ,B.DATE_MOS
  ,TRIM(p1.KPP) AS KPP_PLAT
  ,p0.kpp AS kpp_post
  ,SUBSTR(Rusdate(b.date_kvit),1,30) AS date_propis
  ,DECODE(b.PROD_ID_NPR,'10080',bp.NUM_AKT,b.NOM_SF-100000) as NUM_AKT
  ,bp_pr.akciz AS f_akciz
  ,p0.sf_name AS POST_COMPANY,
   sd.POST_DOLJ, sd.POST_FIO, sd.POST_DOVER,
   p1.sf_name AS POKUP_COMPANY,
   sd.POKUP_DOLJ, sd.POKUP_FIO, sd.POKUP_DOVER
  ,sd.POST_DOLJ_SIGN,sd.POST_FIO_SIGN,sd.POKUP_DOLJ_SIGN, sd.POKUP_FIO_SIGN, sd.POKUP_COMPANY_SIGN
  ,bp_pr.NAME_NPR AS short_naim_tov
FROM
  MASTER.BILLS b
  ,(SELECT BILL_POS.*
      FROM MASTER.BILL_POS, MASTER.BILLS
  WHERE BILL_POS.nom_dok=BILLS.nom_dok
    AND BILL_POS.is_luk+0=1
    AND BILL_POS.is_pokup<>1
    AND (BILL_POS.bill_pos_id<10 OR BILLS.prod_id_npr<'10100')) bp
  ,MASTER.KLS_DOG d
  ,MASTER.KLS_PREDPR p0 --продавец
  ,MASTER.KLS_PREDPR p1 --плательщик
  ,MASTER.KLS_PREDPR p2 --получатель
  ,MASTER.KLS_PREDPR p4 --отправитель
  ,MASTER.KLS_REGION r0 --продавец
  ,MASTER.KLS_REGION r1 --плательщик
  ,MASTER.KLS_REGION r2 --получатель
  ,MASTER.KLS_REGION r4 --отправитель
  ,MASTER.KLS_BANKS bk0 --продавец
  ,MASTER.KLS_BANKS bk1 --плательщик
  ,MASTER.KLS_PROD b_pr -- нефтепродукт в СФ
  ,MASTER.KLS_PROD bp_pr -- нефтепродукт в позиции СФ
  ,(SELECT  /*+ INDEX(BILLS BILLS_PK) */ KVIT.*
      FROM MASTER.KVIT,MASTER.BILLS
     WHERE KVIT.bill_id=BILLS.nom_dok
    AND BILLS.prod_id_npr<>'10080'
 UNION ALL
    SELECT /*+ INDEX(BILLS BILLS_PK) */ DOP_KVIT.*
      FROM MASTER.DOP_KVIT,MASTER.BILLS
     WHERE DOP_KVIT.bill_id=BILLS.nom_dok
    AND BILLS.prod_id_npr<>'10080' ) kv
  ,V_SF_SIGNS s
  ,V_SF_DOVER sd
  ,MASTER.MONTH m
WHERE b.dog_id=d.id
  AND b.nom_dok=bp.nom_dok
  AND bp.nom_dok=kv.bill_id(+)
  AND bp.bill_pos_id=kv.bill_pos_id(+)
  AND d.predpr_id=p1.id
  AND b.nom_zd=m.nom_zd(+)
  AND b.owner_id = p0.id
  AND (CASE
         WHEN NVL(m.potreb_id,0)>0 THEN m.potreb_id
   ELSE p1.id
    END) = p2.id
  AND (CASE
         WHEN NVL(m.grotp_id,0)>0 THEN m.grotp_id
   ELSE 8
    END) = p4.id
  AND p0.region_id=r0.id(+)
  AND p1.region_id=r1.id(+)
  AND p2.region_p_id=r2.id(+)
  AND p4.region_p_id=r4.id(+)
  AND p0.BANKS_ID=bk0.ID(+)
  AND p1.BANKS_ID=bk1.ID(+)
  AND b.prod_id_npr=b_pr.id_npr
  AND bp.PROD_ID_NPR=bp_pr.id_npr
--  AND( b.nom_DOK IN (6124734,6124733,6123489) );
;


--
-- V_SF_PRINT_WITH_KVIT_OLD  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_SF_PRINT_WITH_KVIT_OLD
(KOD_PROD, KOD_TU, SCHETF, SCHETUSL, SF_NO, 
 ORIG_SF_NO, ID_POZ_PROD, DATA_VYP_SF, FULL_NAME_NPOST, VYSTVAL, 
 ADDR_PRED_POST, PHONE_POST, INN_NPOST, PLRDOC, DATA_PLRD, 
 PLRDOC_AND_DATE, DOGOVOR, FULL_NAME_PLAT, ADDR_PRED_PLAT, PHONE_PLAT, 
 KORS_PRED_POST, RS_PRED_POST, BIK_PRED_POST, BANK_PRED_POST, KORS_PRED_PLAT, 
 RS_PRED_PLAT, BIK_PRED_PLAT, BANK_PRED_PLAT, INN_PLAT, GROTPR, 
 GROTPR_ADDR, GRPOL, GRPOL_ADDR, DOPOLN1, DOPOLN2, 
 NAIM_TOV, EDIZM, KOL, CENA, AKCIZ1, 
 SUMMA, AKCIZ2, STNDS, SUMNDS, STGSM, 
 SUMGSM, SUMNPR, ALLNDS, PROISX, GTD, 
 ALLNDS_PROPIS, NDS_PROPIS, NONDS_PROPIS, WITH_STNDS, WITH_STNDS_TXT, 
 BUHANAL, DATE_OTGR, DATE_DOG, BOSS, GLAVBUH, 
 NUM_PROTOKOL, PLAT_OKPO, NAKL_NUM, VES_PROPIS, DOVER_NUM, 
 KVIT_ID, NUM_CIST, AKCIZ_TXT, DATE_MOS, KPP_PLAT, 
 KPP_POST, DATE_PROPIS, NUM_AKT, F_AKCIZ, POST_COMPANY, 
 POST_DOLJ, POST_FIO, POST_DOVER, POKUP_COMPANY, POKUP_DOLJ, 
 POKUP_FIO, POKUP_DOVER, POST_DOLJ_SIGN, POST_FIO_SIGN, POKUP_DOLJ_SIGN, 
 POKUP_FIO_SIGN, POKUP_COMPANY_SIGN, SHORT_NAIM_TOV)
AS 
SELECT /*+ */
  b.nom_dok AS KOD_PROD
  ,6 AS KOD_TU
  ,DECODE(NVL(b.old_nom_sf,0), 0, TO_CHAR(b.nom_sf),DECODE(SIGN(b.summa_dok),-1,TO_CHAR(b.nom_sf),TO_CHAR(b.nom_sf) || '/' || LTRIM(TO_CHAR(b.old_nom_sf)))) || '     от  ' || TO_CHAR(DECODE(SIGN(b.date_vyp_sf-b.date_kvit),-1,b.date_kvit,b.date_vyp_sf), 'DD.MM.RRRR') AS SCHETF
  ,TRIM(b.nom_sf) || ' от ' ||  TO_CHAR(b.date_vyp_sf, 'DD.MM.YYYY') || 'г.' AS SCHETUSL
  ,TO_CHAR(b.nom_sf) AS SF_NO
  ,b.nom_sf AS ORIG_SF_NO
  ,DECODE(bp.BILL_POS_ID,12,11,13,10,bp.BILL_POS_ID) AS id_poz_prod
  ,b.date_vyp_sf AS data_vyp_sf
  ,DECODE(d.PREDPR_ID,1,'ОАО "ЛУКОЙЛ-УНП"',p0.sf_name) AS full_name_npost
  ,'РУБ' AS vystval
  ,GET_ADDR(r0.id,p0.postindex_j,p0.city_j,p0.address_j,r0.region_name) AS addr_pred_post
  ,p0.phone AS phone_post
  ,p0.inn AS inn_npost
  ,'' AS plrdoc
  ,TO_DATE(NULL) AS DATA_PLRD
  ,'' AS PLRDOC_AND_DATE
--  ,DECODE(SIGN(b.nom_sf-6000000),-1,'',b.nom_sf-6000000) AS plrdoc
--  ,b.date_vyp_sf AS dataplrd
--  ,DECODE(SIGN(b.nom_sf-6000000),-1,'',TO_CHAR(b.nom_sf-6000000) || ' от ' || TO_CHAR(b.date_vyp_sf)) AS PLRDOC_AND_DATE
  ,d.dog_number AS dogovor
  ,p1.sf_name AS FULL_NAME_PLAT
  ,GET_ADDR(r1.id,p1.postindex_j,p1.city_j,p1.address_j,r1.region_name) AS ADDR_PRED_PLAT
  ,p1.phone AS phone_plat
--
  ,p0.BANK_KORS AS kors_pred_post
  ,(CASE
      WHEN d.dog_number IN ('0411498/721/13/2004','0411565/737/13/2004') THEN '40702810700000000335'
	  ELSE p0.RS
	END) AS rs_pred_post
  ,bk0.BIK AS bik_pred_post
  ,bk0.BANK_NAME AS bank_pred_post
--
  ,p1.BANK_KORS AS kors_pred_plat
  ,p1.RS AS rs_pred_plat
  ,bk1.BIK AS bik_pred_plat
  ,bk1.BANK_NAME AS bank_pred_plat
--
  ,TRIM(p1.inn) AS inn_plat
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10090','10091','10092','10093','10094') THEN '-'
      ELSE DECODE(d.PREDPR_ID,1,'ОАО "ЛУКОЙЛ-УНП"',p4.sf_name)
	END) AS grotpr
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10090','10091','10092','10093','10094') THEN ' '
      ELSE GET_ADDR(r4.id,p4.postindex_p,p4.city_p,p4.address_p,r4.region_name)
	END) AS grotpr_addr
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10090','10091','10092','10093','10094') THEN '-'
      ELSE p2.sf_name
	END) AS grpol
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10090','10091','10092','10093','10094') THEN ' '
      ELSE GET_ADDR(r2.id,p2.postindex_p,p2.city_p,p2.address_p,r2.region_name)
	END) AS GRPOL_ADDR
  ,'' AS dopoln1
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10090','10091','10092') THEN 'Согласно договору '|| d.dog_number || ' от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||'г. '
      WHEN b.PROD_ID_NPR IN ('10093','10094') THEN bp.PROD_NAME || ' за '||NLS_LOWER(RUSMONTH(b.DATE_KVIT)) || ' согласно договору '|| d.dog_number || ' от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||'г. '
      WHEN b.PROD_ID_NPR='10080' THEN 'Акт приема-передачи № ' || bp.NUM_AKT || ' от ' || TO_CHAR(b.date_kvit,'dd.mm.yyyy') ||'г. '
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN 'Согласно отчета агента от ' || TO_CHAR(b.date_kvit,'dd.mm.yyyy') ||'г. '
	  ELSE 'Квит. № ' || GET_LIST_NAKL_NUM(b.nom_dok) || ' от ' || TO_CHAR(b.date_kvit,'dd.mm.yyyy') ||' г. '
	END) AS dopoln2
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10090','10091','10092') THEN bp.PROD_NAME || ' за '||NLS_LOWER(RUSMONTH(b.DATE_KVIT)) || ' (ДЗ)'
      WHEN b.PROD_ID_NPR IN ('10093','10094') THEN bp.PROD_NAME || ' за '||NLS_LOWER(RUSMONTH(b.DATE_KVIT))
      WHEN b.PROD_ID_NPR<'10100' THEN bp.PROD_NAME
	  ELSE pr.sf_name
	END) AS naim_tov
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN DECODE(NVL(bp.ves,0),0,'-',NLS_LOWER(TRIM(pr.ED_IZ)))
	  ELSE DECODE(NVL(kv.ves_brutto,0),0,'-',NLS_LOWER(TRIM(pr.ED_IZ)))
	END) AS edizm
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN NVL(bp.ves,0)
	  ELSE NVL(kv.ves_brutto,0)
	END) AS kol
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN DECODE(NVL(BP.CENA_BN,0),0,'-',TO_CHAR(bp.cena_bn,'999999.99'))
	  ELSE DECODE(NVL(KV.CENA,0),0,'-',TO_CHAR(kv.cena,'999999.99'))
	END) AS cena
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' THEN bp.summa_akciz
	  ELSE kv.sum_akciz
	END) AS akciz1
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa_bn
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa_bn
	  ELSE kv.sum_prod
	END) AS summa
  ,0 AS akciz2
  ,(CASE WHEN b.PROD_ID_NPR IN ('10060','10061') THEN 0 ELSE 18 END) AS stnds
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa_nds20
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa_nds20
	  ELSE kv.sum_prod_nds
	END) AS sumnds
  ,0 AS stgsm
  ,0 AS sumgsm
  ,0 AS sumnpr
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN bp.summa
      WHEN b.PROD_ID_NPR='10080' THEN bp.summa
	  ELSE kv.sum_prod+kv.sum_prod_nds
	END) AS allnds
  ,'-' AS proisx
  ,'-' AS gtd
  ,master.Sf_F_Get_Propisi_Sfprod_kvit(b.LUK_SUMMA_DOK) AS ALLNDS_PROPIS
  ,master.Sf_F_Get_Propisi_Sfprod_kvit(b.LUK_NDS_DOK) AS NDS_PROPIS
  ,master.Sf_F_Get_Propisi_Sfprod_kvit(b.LUK_SUMMA_DOK-b.LUK_NDS_DOK) AS NONDS_PROPIS
  ,'+' AS with_stnds
  ,'Y' AS with_stnds_txt
  ,pr.analit AS buhanal
  ,b.date_kvit AS DATE_OTGR
  ,(CASE
      WHEN d.PREDPR_ID=1 AND d.PLAT_DOG_NUMBER<>'' THEN 'от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||' г. '|| ' ('||d.PLAT_DOG_NUMBER||')'
	  ELSE 'от ' || TO_CHAR(d.dog_date,'dd.mm.yyyy') ||' г. '
	END) AS DATE_DOG
  ,s.boss
  ,s.blavbuh AS glavbuh
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN ''
      WHEN b.PROD_ID_NPR='10080' THEN bp.PROTO_NUM || ' от ' || TO_CHAR(bp.PROTO_DATE,'dd.mm.yy') || 'г.'
	  ELSE b.PROTO_NUM || ' от ' || TO_CHAR(b.PROTO_DATE,'dd.mm.yy') || 'г.'
	END) AS NUM_PROTOKOL
  ,Get_Plat_Okpo(b.nom_dok) AS PLAT_OKPO
  ,Get_Nakl_Num(b.nom_dok) AS NAKL_NUM
  ,master.sf_f_get_propisi_ves(b.nom_dok) AS VES_PROPIS
  ,Get_Dover_Num(b.nom_dok) AS dover_num
  ,kv.ID AS kvit_id
  ,kv.NUM_CIST
  ,(CASE
      WHEN b.PROD_ID_NPR<'10100' AND b.PROD_ID_NPR<>'10080' THEN '-'
      WHEN b.PROD_ID_NPR='10080' THEN (CASE WHEN bp.akciz=1 THEN 'БЕЗ АКЦИЗА' ELSE '-' END)
      WHEN pr.akciz=1 THEN 'БЕЗ АКЦИЗА'
  	  ELSE '-'
	END) AS akciz_txt
  ,B.DATE_MOS
  ,TRIM(p1.KPP) AS KPP_PLAT
  ,p0.kpp AS kpp_post
  ,SUBSTR(rusdate(b.date_kvit),1,30) AS date_propis
  ,bp.NUM_AKT
  ,bp.akciz AS f_akciz
  ,DECODE(d.PREDPR_ID,1,'ОАО "ЛУКОЙЛ-УНП"',p0.sf_name) AS POST_COMPANY,
   sd.POST_DOLJ, sd.POST_FIO, sd.POST_DOVER,
   p1.sf_name AS POKUP_COMPANY,
   sd.POKUP_DOLJ, sd.POKUP_FIO, sd.POKUP_DOVER
  ,sd.POST_DOLJ_SIGN,sd.POST_FIO_SIGN,sd.POKUP_DOLJ_SIGN, sd.POKUP_FIO_SIGN, sd.POKUP_COMPANY_SIGN
  ,pr.NAME_NPR AS short_naim_tov
FROM
  MASTER.BILLS b
  ,(SELECT BILL_POS.*,KLS_PROD.SF_NAME AS PROD_NAME,KLS_PROD.AKCIZ
      FROM MASTER.BILL_POS, MASTER.BILLS,MASTER.KLS_PROD
	 WHERE BILL_POS.nom_dok=BILLS.nom_dok
--	   AND bills.prod_id_npr='10080'
	   AND BILL_POS.PROD_ID_NPR=KLS_PROD.ID_NPR
	   AND BILL_POS.is_luk=1
	   AND BILL_POS.is_pokup<>1
	   AND (BILL_POS.bill_pos_id<10 OR BILLS.prod_id_npr<'10100')) bp
  ,MASTER.KLS_DOG d
  ,MASTER.KLS_PREDPR p0 --продавец
  ,MASTER.KLS_PREDPR p1 --плательщик
  ,MASTER.KLS_PREDPR p2 --получатель
  ,MASTER.KLS_PREDPR p4 --отправитель
  ,MASTER.KLS_REGION r0 --продавец
  ,MASTER.KLS_REGION r1 --плательщик
  ,MASTER.KLS_REGION r2 --получатель
  ,MASTER.KLS_REGION r4 --отправитель
  ,MASTER.KLS_BANKS bk0 --продавец
  ,MASTER.KLS_BANKS bk1 --плательщик
  ,MASTER.KLS_PROD pr
  ,(SELECT  /*+ INDEX(BILLS BILLS_PK) */ KVIT.*
      FROM MASTER.KVIT,MASTER.BILLS
     WHERE KVIT.bill_id=BILLS.nom_dok
	   AND BILLS.prod_id_npr<>'10080'
	UNION ALL
    SELECT /*+ INDEX(BILLS BILLS_PK) */ DOP_KVIT.*
      FROM MASTER.DOP_KVIT,MASTER.BILLS
     WHERE DOP_KVIT.bill_id=BILLS.nom_dok
	   AND BILLS.prod_id_npr<>'10080' ) kv
  ,V_SF_SIGNS s
  ,V_SF_DOVER sd
  ,MASTER.MONTH m
WHERE /*b.DATE_KVIT>=TO_DATE('01.10.2004','dd.mm.yyyy')
  and*/ b.dog_id=d.id
  AND b.nom_dok=bp.nom_dok
  AND bp.nom_dok=kv.bill_id(+)
  AND bp.bill_pos_id=kv.bill_pos_id(+)
  AND d.predpr_id=p1.id
  AND b.nom_zd=m.nom_zd(+)
  AND b.owner_id = p0.id
  AND (CASE
         WHEN NVL(m.potreb_id,0)>0 THEN m.potreb_id
		 ELSE p1.id
	   END) = p2.id
  AND (CASE
         WHEN NVL(m.grotp_id,0)>0 THEN m.grotp_id
		 ELSE 8
	   END) = p4.id
  AND p0.region_id=r0.id(+)
  AND p1.region_id=r1.id(+)
  AND p2.region_p_id=r2.id(+)
  AND p4.region_p_id=r4.id(+)
  AND p0.BANKS_ID=bk0.ID(+)
  AND p1.BANKS_ID=bk1.ID(+)
  AND b.prod_id_npr=pr.id_npr(+)
--  and( b.nom_DOK in (6128908) )
;


--
-- V_TRIADA_FACT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_TRIADA_FACT
(VID_DOC, GRPROD, PROD, PLAT, TRIADA, 
 TRI_VES_FACT)
AS 
SELECT vid_doc,GRPROD,PROD,PLAT,TRIADA,SUM(VES_FAKT) as TRI_VES_FACT FROM V_TRIADA_RAZNAR
WHERE VID_DOC='fact'GROUP BY vid_doc,GRPROD,PROD,PLAT,TRIADA 
ORDER BY GRPROD,PROD,PLAT,TRIADA;


--
-- V_UNP_BUDJET_NPR_PLAN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_BUDJET_NPR_PLAN
(BEGIN_DATE, END_DATE, GROUP_ORDER, GROUP_NAME, PLAT_NAME, 
 BEGIN_DEB, BEGIN_DEB_PROSR, BEGIN_DEB_CUR, BEGIN_DEB_NEXT, BEGIN_KRED, 
 SUMMA_DOK_CUR, SUMMA_DOK_NEXT, SUMMA_PAYED, SUMMA_TOPAY, END_DEB, 
 END_DEB_PROSR, END_DEB_CUR, END_KRED)
AS 
SELECT /*+ RULE */
--  max(kol_dn) as kol_dn,
  a.begin_date,
  a.end_date,
  KLS_PROD_GROUPS.GROUP_ORDER,
  KLS_PROD_GROUPS.GROUP_NAME,
  KLS_PREDPR.SF_NAME as PLAT_NAME,
  0 AS begin_deb, -- Задолженность в предыдущем периоде
  0 AS begin_deb_prosr, -- Просрочена задолженность в предыдущем периоде
  0 AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  0 AS begin_deb_next, -- Задолженность прошлого периода к погашению в текущем
  0 AS begin_kred, -- Кредиторка в предыдущем периоде
  SUM(summa) AS summa_dok_cur, -- Планируется отгрузить в текущем периоде, к погашению в текущем периоде
  0 AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  0 AS summa_payed, -- Оплачено в текущем периоде
  0 AS summa_topay, -- Не разнесены оплаты в текущем периоде
  SUM(summa) AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  SUM(summa) AS end_deb_prosr, -- Просрочена задолженность на конец текущего периода (для ПРОВЕРКИ)
  0 AS end_deb_cur, -- Текущая задолженность на конец текущего периода (для ПРОВЕРКИ)
  0 AS end_kred -- Кредиторка на конец текущего периода (для ПРОВЕРКИ)
FROM
(
SELECT
  aaaaa.begin_date,
  aaaaa.end_date,
  aaaaa.prod_id_npr,
  aaaaa.DOG_ID,
  kol_dn,
  (CASE
     WHEN KOL_OST>=KOL_DN THEN ROUND(summa * (KOL_OST-KOL_DN+1) / KOL_OST,2)
	 ELSE 0
   END) AS summa -- Планируется отгрузить в текущем периоде, к погашению в текущем периоде
FROM
(
SELECT /*+ RULE */
  aaaa.begin_date,
  aaaa.end_date,
  aaaa.prod_id_npr,
  aaaa.DOG_ID,
  SUM(aaaa.summa) AS summa, -- Осталось отгрузить в текущем месяце (РУБ)
  GET_KOL_DN(aaaa.DOG_ID,aaaa.begin_date,aaaa.end_date,aaaa.PROD_ID_NPR) as KOL_DN, -- Кол-во дней отсрочки
  LAST_DAY(aaaa.end_date) - aaaa.end_date as KOL_OST -- Кол-во дней осталось до конца месяца
FROM
(
SELECT --+ RULE
  -- Факт отгрузки с минусом (РУБ)
  r.begin_date,
  r.end_date,
  bills.prod_id_npr,
  bills.DOG_ID,
  -bills.LUK_SUMMA_DOK AS summa -- Отгружено в текущем месяце (РУБ)
FROM bills,
	(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
where
  bills.DATE_KVIT>=r.begin_date and
  bills.date_kvit<=r.end_date
UNION ALL
SELECT
  -- План отгрузки с плюсом (РУБ)
  aaa.begin_date,
  aaa.end_date,
  aaa.prod_id_npr,
  aaa.DOG_ID,
  ROUND((CASE
     WHEN aaa.CENA_BN=0 THEN NVL(aaa.PLAN_CENA,0)
	 ELSE aaa.CENA_BN
   END) * aaa.NDS * aaa.PLAN_VES,2) as summa -- Запалнировано к отгрузке в текущем месяце (РУБ)
FROM
(
SELECT
  aa.begin_date,
  aa.end_date,
  aa.prod_id_npr,
  aa.DOG_ID,
  aa.PLAN_VES,
  aa.PLAN_CENA as PLAN_CENA,
  GET_CENA_BN(aa.DOG_ID,aa.end_date,aa.prod_id_npr) as CENA_BN,
  (100+FOR_BILLS.GetNDSValue(aa.end_date))/100 as NDS
FROM
(
SELECT
  -- План отгрузки с плюсом (ТН)
  r.begin_date,
  r.end_date,
  a.prod_id_npr,
  a.DOG_ID,
  MAX(a.PLAN_CENA) as PLAN_CENA,
  SUM(a.PLAN_VES) as PLAN_VES-- Запланировано к отгрузке в текущем месяце (ТН)
FROM plan_periods b,plan_post a,
	(SELECT * FROM V_MASTER_REPORTS WHERE NLS_UPPER(REPORT_FILE)='UNP_FIN_BUDGET.XLS') r
where b.PLAN_ID in (2,3) and
  b.DATE_PLAN=TRUNC(r.end_date,'MONTH') and
  a.PLAN_PER_ID=b.ID
GROUP BY
  r.begin_date,
  r.end_date,
  a.prod_id_npr,
  a.DOG_ID
) aa
) aaa
) aaaa
GROUP BY
  aaaa.begin_date,
  aaaa.end_date,
  aaaa.prod_id_npr,
  aaaa.DOG_ID
HAVING sum(summa)<>0
) aaaaa
) A, KLS_DOG,KLS_PREDPR,
	KLS_PROD_GROUPS_DESC,KLS_PROD_GROUPS
WHERE A.DOG_ID=KLS_DOG.ID
  AND KLS_DOG.PREDPR_ID=KLS_PREDPR.ID
  AND KLS_DOG.AGENT_ID in (8,4175) AND KLS_DOG.PREDPR_ID<>8 AND KLS_DOG.PREDPR_ID<>4175
  AND A.PROD_ID_NPR=KLS_PROD_GROUPS_DESC.PROD_ID_NPR and
  KLS_PROD_GROUPS_DESC.PROD_GROUPS_ID=KLS_PROD_GROUPS.ID and
  KLS_PROD_GROUPS.PROD_TYPE_GRP_ID=10
GROUP BY
  A.begin_date,
  A.end_date,
  KLS_PROD_GROUPS.GROUP_ORDER,
  KLS_PROD_GROUPS.GROUP_NAME,
  KLS_PREDPR.SF_NAME
HAVING  SUM(summa)>0;


--
-- V_UNP_GRAFIK_PLAN_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK_PLAN_SF
(DOG_ID, DATE_PRED, KOL_DN, SUMMA_PRED)
AS 
SELECT
  -- Плнируемая отгрузка по дням в РУБ
  b.DOG_ID,
  KLS_DATES.VALUE as date_pred,
  MAX(kol_dn) as KOL_DN,
  SUM(ROUND(b.summa_pred/b.kol_ost,2)) as summa_pred
FROM
(
SELECT
  aaaaa.DOG_ID,
  aaaaa.begin_date,
  aaaaa.end_date,
  kol_dn,kol_ost,
  aaaaa.end_date+1 as from_date, -- Дата начала плановой отгрузки
  (CASE
     WHEN KOL_OST>=KOL_DN THEN aaaaa.end_date+KOL_OST-KOL_DN
	 ELSE aaaaa.end_date
   END) as to_date,	 -- Дата окончания плановой отгрузки
  (CASE
     WHEN KOL_OST>=KOL_DN AND KOL_OST>0 THEN ROUND(summa_pred / KOL_OST,2)
	 ELSE 0
   END) AS summa_pred -- Планируемая отгрузка за сутки
FROM
(
SELECT
  aaaa.begin_date,
  aaaa.end_date,
  aaaa.DOG_ID,
  SUM(aaaa.summa_pred) AS summa_pred, -- Осталось отгрузить в текущем месяце (РУБ)
  MAX(GET_KOL_DN(aaaa.DOG_ID,aaaa.begin_date,aaaa.end_date,aaaa.PROD_ID_NPR)) as KOL_DN, -- Кол-во дней отсрочки
  LAST_DAY(aaaa.end_date) - aaaa.end_date as KOL_OST -- Кол-во дней осталось до конца месяца
FROM
(
SELECT /*+ ORDERED INDEX(b BILLS_DATE_KVIT) USE_NL(b,bp,kls_dog) */
  -- Факт предъявления с минусом (РУБ)
  r.begin_date,
  r.end_date,
  bp.PROD_ID_NPR,
  b.dog_id,
  sum(-bp.summa) AS summa_pred -- Фактически отгружено (РУБ)
FROM V_TEMP_UNP_GARFIK_PARAMS r, bills b, bill_pos bp, kls_prod
WHERE b.DATE_KVIT BETWEEN r.BEGIN_DATE AND r.END_DATE
  AND b.nom_dok=bp.nom_dok
  AND bp.PROD_ID_NPR=KLS_PROD.ID_NPR
  AND kls_prod.ID_GROUP_NPR>=DECODE(r.GRP_ID_NPR,'*','00000',r.GRP_ID_NPR)
  AND kls_prod.ID_GROUP_NPR<=DECODE(r.GRP_ID_NPR,'10100','99999','*','99999',r.GRP_ID_NPR)
  AND bp.IS_LUK+0=1
GROUP BY
  r.begin_date,
  r.end_date,
  bp.PROD_ID_NPR,
  b.dog_id
UNION ALL
SELECT
  -- План отгрузки с плюсом (РУБ)
  aaa.begin_date,
  aaa.end_date,
  aaa.PROD_ID_NPR,
  aaa.DOG_ID,
  ROUND((CASE
     WHEN aaa.CENA_BN=0 THEN NVL(aaa.PLAN_CENA,0)
	 ELSE aaa.CENA_BN
   END) * aaa.NDS * aaa.PLAN_VES,2) as summa_pred -- Запалнировано к отгрузке в текущем месяце (РУБ)
FROM
(
SELECT
  aa.begin_date,
  aa.end_date,
  aa.PROD_ID_NPR,
  aa.DOG_ID,
  aa.PLAN_VES,
  aa.PLAN_CENA as PLAN_CENA,
  GET_CENA_BN(aa.DOG_ID,aa.end_date,aa.prod_id_npr) as CENA_BN,
  (100+FOR_BILLS.GetNDSValue(aa.end_date))/100 as NDS
FROM
(
SELECT
  -- План отгрузки с плюсом (ТН)
  r.begin_date,
  r.end_date,
  a.PROD_ID_NPR,
  a.DOG_ID,
  MAX(a.PLAN_CENA) as PLAN_CENA,
  SUM(a.PLAN_VES) as PLAN_VES-- Запланировано к отгрузке в текущем месяце (ТН)
FROM plan_periods b,plan_post a,V_TEMP_UNP_GARFIK_PARAMS r, kls_prod
where b.PLAN_ID in (2,3) and
  b.DATE_PLAN=TRUNC(r.end_date,'MONTH') and
  a.PLAN_PER_ID=b.ID
  AND a.PROD_ID_NPR=KLS_PROD.ID_NPR
  AND kls_prod.ID_GROUP_NPR>=DECODE(r.GRP_ID_NPR,'*','00000',r.GRP_ID_NPR)
  AND kls_prod.ID_GROUP_NPR<=DECODE(r.GRP_ID_NPR,'10100','99999','*','99999',r.GRP_ID_NPR)
GROUP BY
  r.begin_date,
  r.end_date,
  a.PROD_ID_NPR,
  a.DOG_ID
) aa
) aaa
) aaaa
GROUP BY
  aaaa.begin_date,
  aaaa.end_date,
  aaaa.DOG_ID
HAVING sum(summa_pred)<>0
) aaaaa
) b, kls_dates,kls_dog,V_TEMP_UNP_GARFIK_PARAMS r
WHERE KLS_DATES.VALUE>=b.from_date
  AND KLS_DATES.VALUE<=b.to_date
  AND b.dog_id=kls_dog.id
  AND kls_dog.predpr_id=DECODE(r.PLAT_ID,0,kls_dog.predpr_id,r.PLAT_ID)
  AND kls_dog.dog_number like r.DOG_NUMBER
  AND KLS_DOG.AGENT_ID+0 in (8,4175) AND KLS_DOG.PREDPR_ID+0<>8 AND KLS_DOG.PREDPR_ID+0<>4175 -- только договора УНП
GROUP BY
  b.DOG_ID,
  KLS_DATES.VALUE;


--
-- V_USER_MONTH_SNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_USER_MONTH_SNP
(NOM_ZD, STANOTP_ID, NPR_SOBSTV_ID, STAN_ID, VETKA_ID, 
 POLUCH_ID, TEX_PD_ID, NAZN_OTG_ID, LOAD_ABBR, DOG_ID, 
 USL_NUMBER, GOSPROG_ID, PROD_ID_NPR, TONN_DECLARED, TONN_LOADED, 
 CIST_DECLARED, CIST_LOADED, FLG_ALLOW_8_AXES, FLG_UPPER_SLIV, FLG_DOP_CIST, 
 FLG_FORMA_2, FLG_OBOGR, DATE_PLAN, PRIM, CENA, 
 CENA_OTP, SUM_ZD, GR4, K_TAR, INPUT_DATE, 
 UPDATE_DATE, TARIF1TONN, POTREB_ID, PLANSTRU_ID, NPODOG_ID, 
 GROTP_ID, DATE_CEN, GP_NAPR_ID, TONN_R, CIST_R, 
 TRANSPORT, IS_EXP, SUPPLIER_ID, APPL_TAG, CENA_NPO, 
 CENA_OTP_NPO, KOL_DN_NPO, TONN_RAZNAR, CIST_RAZNAR, ZAKAZ_ID, 
 EXPED_ID, GU12_A_ID, ZAKAZ_HIST_ID, POKUP_DOG_ID, POKUP_USL_NUMBER, 
 AFTER_2005, IS_AGENT, ZAKAZ_VES)
AS 
SELECT /*+ ordered use_nl(mon,unp,snp,KLS_USL_OPL) */
  MON.NOM_ZD,
  MON.STANOTP_ID,
  MON.NPR_SOBSTV_ID,
  mon.STAN_ID,
  mon.VETKA_ID,
  mon.POLUCH_ID,
  MON.TEX_PD_ID,
  MON.NAZN_OTG_ID,
  MON.LOAD_ABBR,
  MON.DOG_ID,
  MON.USL_NUMBER,
  DECODE(AFTER_2005,1,snp.GOSPROG_ID,mon.GOSPROG_ID) as GOSPROG_ID,
  mon.PROD_ID_NPR,
  MON.TONN_DECLARED,
  MON.TONN_LOADED,
  MON.CIST_DECLARED,
  MON.CIST_LOADED,
  MON.FLG_ALLOW_8_AXES,
  MON.FLG_UPPER_SLIV,
  MON.FLG_DOP_CIST,
  MON.FLG_FORMA_2,
  MON.FLG_OBOGR,
  MON.DATE_PLAN,
  MON.PRIM,
  MON.CENA,
  MON.CENA_OTP,
  MON.SUM_ZD,
  MON.GR4,
  MON.K_TAR,
  MON.INPUT_DATE,
  MON.UPDATE_DATE,
  MON.TARIF1TONN,
  mon.POTREB_ID,
  DECODE(AFTER_2005,1,snp.PLANSTRU_ID,mon.PLANSTRU_ID) as PLANSTRU_ID,
  DECODE(AFTER_2005,1,NVL(snp.DOG_ID,0),NVL(mon.NPODOG_ID,0)) as NPODOG_ID,
  MON.GROTP_ID,
  MON.DATE_CEN,
  DECODE(AFTER_2005,1,snp.GP_NAPR_ID,mon.GP_NAPR_ID) as GP_NAPR_ID,
  MON.TONN_R,
  MON.CIST_R,
  MON.TRANSPORT,
  MON.IS_EXP,
  MON.SUPPLIER_ID,
  MON.APPL_TAG,
  DECODE(AFTER_2005,1,snp.PRICE,mon.CENA_NPO) as CENA_NPO,
  DECODE(AFTER_2005,1,ROUND(snp.PRICE*FOR_BILLS.GetNDSValue(mon.DATE_PLAN),2),mon.CENA_OTP_NPO) as CENA_OTP_NPO,
  DECODE(AFTER_2005,1,NVL(KLS_USL_OPL.KOL_DN,0),mon.KOL_DN_NPO) as KOL_DN_NPO,
  MON.TONN_RAZNAR,
  MON.CIST_RAZNAR,
  DECODE(AFTER_2005,1,SNP.ID,UNP.ID) as ZAKAZ_ID,
  MON.EXPED_ID,
  MON.GU12_A_ID,
  DECODE(AFTER_2005,1,TO_NUMBER(NULL),MON.ZAKAZ_HIST_ID) as ZAKAZ_HIST_ID,
  MON.POKUP_DOG_ID,
  MON.POKUP_USL_NUMBER,
  mon.AFTER_2005,
  mon.IS_AGENT,
  DECODE(AFTER_2005,1,snp.VES,unp.VES) as ZAKAZ_VES
FROM V_USER_MONTH mon,ZAKAZ unp,ZAKAZ snp,KLS_USL_OPL
WHERE mon.ZAKAZ_ID=unp.ID(+) AND unp.LINK_ID=snp.ID(+) AND snp.USL_OPL_ID=KLS_USL_OPL.ID(+);


--
-- V_USER_MONTH_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_USER_MONTH_UNP
(NOM_ZD, STANOTP_ID, NPR_SOBSTV_ID, STAN_ID, VETKA_ID, 
 POLUCH_ID, TEX_PD_ID, NAZN_OTG_ID, LOAD_ABBR, DOG_ID, 
 USL_NUMBER, GOSPROG_ID, PROD_ID_NPR, TONN_DECLARED, TONN_LOADED, 
 CIST_DECLARED, CIST_LOADED, FLG_ALLOW_8_AXES, FLG_UPPER_SLIV, FLG_DOP_CIST, 
 FLG_FORMA_2, FLG_OBOGR, DATE_PLAN, PRIM, CENA, 
 CENA_OTP, SUM_ZD, GR4, K_TAR, INPUT_DATE, 
 UPDATE_DATE, TARIF1TONN, POTREB_ID, PLANSTRU_ID, NPODOG_ID, 
 GROTP_ID, DATE_CEN, GP_NAPR_ID, TONN_R, CIST_R, 
 TRANSPORT, IS_EXP, SUPPLIER_ID, APPL_TAG, CENA_NPO, 
 CENA_OTP_NPO, KOL_DN_NPO, TONN_RAZNAR, CIST_RAZNAR, ZAKAZ_ID, 
 EXPED_ID, GU12_A_ID, ZAKAZ_HIST_ID, POKUP_DOG_ID, POKUP_USL_NUMBER, 
 AFTER_2005, IS_AGENT)
AS 
SELECT /*+ ordered use_nl(mon,unp,snp,KLS_USL_OPL) */
  MON.NOM_ZD,
  MON.STANOTP_ID,
  MON.NPR_SOBSTV_ID,
  mon.STAN_ID,
  mon.VETKA_ID,
  mon.POLUCH_ID,
  MON.TEX_PD_ID,
  MON.NAZN_OTG_ID,
  MON.LOAD_ABBR,
  MON.DOG_ID,
  MON.USL_NUMBER,
  mon.GOSPROG_ID,
  mon.PROD_ID_NPR,
  MON.TONN_DECLARED,
  MON.TONN_LOADED,
  MON.CIST_DECLARED,
  MON.CIST_LOADED,
  MON.FLG_ALLOW_8_AXES,
  MON.FLG_UPPER_SLIV,
  MON.FLG_DOP_CIST,
  MON.FLG_FORMA_2,
  MON.FLG_OBOGR,
  MON.DATE_PLAN,
  MON.PRIM,
  MON.CENA,
  MON.CENA_OTP,
  MON.SUM_ZD,
  MON.GR4,
  MON.K_TAR,
  MON.INPUT_DATE,
  MON.UPDATE_DATE,
  MON.TARIF1TONN,
  mon.POTREB_ID,
  mon.PLANSTRU_ID,
  DECODE(AFTER_2005,1,NVL(snp.DOG_ID,0),NVL(mon.NPODOG_ID,0)) as NPODOG_ID,
  MON.GROTP_ID,
  MON.DATE_CEN,
  mon.GP_NAPR_ID,
  MON.TONN_R,
  MON.CIST_R,
  MON.TRANSPORT,
  MON.IS_EXP,
  MON.SUPPLIER_ID,
  MON.APPL_TAG,
  DECODE(AFTER_2005,1,snp.PRICE,mon.CENA_NPO) as CENA_NPO,
  DECODE(AFTER_2005,1,ROUND(snp.PRICE*FOR_BILLS.GetNDSValue(mon.DATE_PLAN),2),mon.CENA_OTP_NPO) as CENA_OTP_NPO,
  DECODE(AFTER_2005,1,NVL(KLS_USL_OPL.KOL_DN,0),mon.KOL_DN_NPO) as KOL_DN_NPO,
  MON.TONN_RAZNAR,
  MON.CIST_RAZNAR,
  mon.ZAKAZ_ID,
  MON.EXPED_ID,
  MON.GU12_A_ID,
  mon.ZAKAZ_HIST_ID,
  MON.POKUP_DOG_ID,
  MON.POKUP_USL_NUMBER,
  mon.AFTER_2005,
  mon.IS_AGENT
FROM V_USER_MONTH mon,ZAKAZ unp,ZAKAZ snp,KLS_USL_OPL
WHERE mon.ZAKAZ_ID=unp.ID(+) AND unp.LINK_ID=snp.ID(+) AND snp.USL_OPL_ID=KLS_USL_OPL.ID(+);


--
-- V_1FIPP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_1FIPP
(DOG_NUMBER, DOG_ID, DATE_BUXG, DATE_TO_PLAT, VES, 
 SUMMA_DOK, SUMMA_OPL)
AS 
SELECT o.dog_number
  , o.npodog_id AS dog_id
  , o.date_kvit
  , o.d_pay
  , o.ves
  , o.strah + o.sum_prod + o.tarif + o.voznagr AS summa_dok
  , 0 AS summa_opl
FROM (SELECT /*+ rule use_hash (d) */
        m.npodog_id
        , d.dog_number
        , k.date_kvit
        , k.date_kvit + m.kol_dn_npo AS d_pay
        , SUM(ROUND((
              ROUND(
              DECODE(k.flg_operdata, 1, NVL(m.tarif1tonn, 0) * k.ves_brutto
              , k.tarif), 2) + k.tarif_guard) * (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100 , 2)) AS tarif
        , /* Ж/д тариф */ SUM(ROUND(
                              ROUND(
                              DECODE(k.vagowner_id
                              , 3, USL_DOG.usl_sum * k.ves_brutto
                              ,
                              DECODE(k.flg_vag_klient
                              , 1, USL_DOG.usl_sum * k.ves_brutto
                              ,
                              DECODE(k.tarif
                              , 0, USL_DOG.usl_sum * k.ves_brutto
                              , k.tarif19 - k.tarif))), 2) * (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100, 2)) AS
        voznagr
        , /* Вознаграждение */ SUM(ROUND(k.ves * m.cena_otp_npo * (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100, 2)) AS
        sum_prod
        , SUM(ROUND((
              ROUND(k.ves * m.cena_otp_npo * (100+FOR_BILLS.GetNDSValue(k.date_kvit))/100, 2)) * USL_DOG.proc_insure /
              100, 2)) AS strah
        , SUM(k.ves) AS ves
      FROM MASTER.KVIT k
        , MASTER.MONTH m
        , MASTER.KLS_PLANSTRU ps
        , MASTER.KLS_DOG d
        , MASTER.USL_DOG
      WHERE k.nom_zd = m.nom_zd
        AND m.planstru_id = ps.ID
        AND m.npodog_id = d.ID
        AND (m.dog_id = USL_DOG.dog_id
             AND m.usl_number = USL_DOG.usl_number)
        AND ps.region_id = 21
        AND k.date_kvit >= TO_DATE('01.09.2003', 'dd.mm.yyyy')
      GROUP BY m.npodog_id, d.dog_number, k.date_kvit
        , k.date_kvit + m.kol_dn_npo
      ORDER BY m.npodog_id
        , k.date_kvit) o
UNION
SELECT /*+ INDEX (opl OPL_DOG_ID) */
  KLS_DOG.dog_number
  , OPL.dog_id
  , OPL.data_por
  , OPL.data_por
  , 0 AS ves
  , 0 AS summa_dok
  , SUM(OPL.summa) AS summa_opl
FROM MASTER.OPL
  , MASTER.KLS_DOG
WHERE OPL.dog_id = KLS_DOG.ID
  AND OPL.dog_id IN (SELECT /*+ all_rows */
                       DISTINCT m.npodog_id
                     FROM MASTER.KVIT k
                       , MASTER.MONTH m
                       , MASTER.KLS_PLANSTRU ps
                       , MASTER.KLS_DOG d
                     WHERE k.nom_zd = m.nom_zd
                       AND m.planstru_id = ps.ID
                       AND m.npodog_id = d.ID
                       AND ps.region_id = 21
                       AND k.date_kvit >=
                            TO_DATE('01.09.2003', 'dd.mm.yyyy'))
GROUP BY KLS_DOG.dog_number, OPL.dog_id, OPL.data_por, OPL.data_por;


--
-- FOR_REPORTS  (Synonym) 
--
CREATE PUBLIC SYNONYM FOR_REPORTS FOR MASTER.FOR_REPORTS;


--
-- P_SEND_SF  (Procedure) 
--
CREATE OR REPLACE PROCEDURE MASTER.P_SEND_SF (D1 DATE, D2 DATE) IS
  N_FIVE NUMBER; 
  CHISLO NUMBER;
  S_DOPOLN VARCHAR2(250);
  TIPDOK VARCHAR(30);
  NUMDOK VARCHAR(200);
  DATEDOK VARCHAR2(30);
BEGIN

N_FIVE:=0;
CHISLO:=TO_NUMBER(SUBSTR(TO_CHAR(D1),1,2));
IF CHISLO=1 THEN
  N_FIVE:=2;
END IF;
IF CHISLO=11 THEN
  N_FIVE:=4;
END IF;
IF CHISLO=21 THEN
  N_FIVE:=6;
END IF;
  
DELETE FROM SVETA.SEND_SFAK_POKUP;
DELETE FROM SVETA.SEND_POZ_POKUP;
DELETE FROM SVETA.SEND_OTGR_POKUP;
DELETE FROM SVETA.SEND_SFAK_POKUP_USL;
DELETE FROM SVETA.SEND_POZ_POKUP_USL;

FOR rec1 IN (
SELECT
  6 AS NPZ
  ,B.NOM_DOK AS KOD_POKUP
  ,P1.KSSS_PREDPR_ID AS ID_PLAT
  ,P0.KSSS_PREDPR_ID AS ID_POST
  ,TRIM(P1.INN) AS INN_NPLAT
  ,TRIM(P0.INN) AS INN_POST
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10093','10094') THEN '-'
      ELSE 'ОАО "ЛУКОЙЛ-УНП"'
	END) as grotpr
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10093','10094') THEN '-'
      ELSE GET_ADDR(R4.ID,P4.POSTINDEX_P,P4.CITY_P,P4.ADDRESS_P,R4.REGION_NAME)
	END) as GROTPR_AD
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10093','10094') THEN '-'
      ELSE p2.sf_name
	END) as grpol
  ,(CASE
      WHEN b.PROD_ID_NPR IN ('10093','10094') THEN '-'
      ELSE GET_ADDR(R2.ID,P2.POSTINDEX_P,P2.CITY_P,P2.ADDRESS_P,R2.REGION_NAME)
	END) as GRPOL_AD
/*
  ,(CASE
      WHEN b.PROD_ID_NPR='10080' THEN 'Акт приема-передачи № ' || bp.NUM_AKT || ' от ' || TO_CHAR(b.date_kvit,'dd.mm.yyyy')
	  ELSE 'Квит. № ' || GET_LIST_NAKL_NUM(b.nom_dok) || ' от ' || TO_CHAR(b.date_kvit,'dd.mm.yyyy')
	END) as DOPOLN1
*/
--  ,'КВИТ. № ' || GET_LIST_NAKL_NUM(B.NOM_DOK) || ' ОТ ' || TO_CHAR(B.DATE_KVIT,'DD.MM.YYYY') AS DOPOLN1
  ,(CASE
       WHEN NVL(B.OLD_NOM_DOK,0)=0 THEN 0
	   ELSE (CASE
	             WHEN B.SUMMA_DOK <0 THEN 4
				 ELSE 5
			 END)
	END) AS STATUS
  ,B.OLD_NOM_DOK AS KOD_STORN
  ,D.DOG_NUMBER AS DOGOVOR
  ,D.DOG_DATE AS DATADOG
--  ,P0.SF_NAME AS NAME_POST
  ,'ОАО "ЛУКОЙЛ-УНП"' AS NAME_POST
  ,GET_ADDR(R0.ID,P0.POSTINDEX_J,P0.CITY_J,P0.ADDRESS_J,R0.REGION_NAME) AS ADDR_POST
  ,TRIM(P0.KPP) AS KPP_POST
  ,P1.SF_NAME AS NAME_NPLAT
  ,TRIM(P1.KPP) AS KPP_PLAT
  ,B.DATE_VYP_SF AS DATA_SF
  ,TO_CHAR(B.NOM_SF) AS SCHETF
--  ,B.NUM_5_DAY AS N_5
  ,N_FIVE AS N_5
  ,LT.SF_POKUP_VTR AS VTR
  ,b.PROD_ID_NPR
  ,b.DATE_KVIT
  ,PR.SF_NAME as PROD_NAME
FROM
  MASTER.BILLS B
/*
  ,(SELECT MAX(MASTER.BILL_POS.NUM_AKT) AS NUM_AKT 
   FROM MASTER.BILL_POS 
   WHERE MASTER.BILL_POS.DATE_REALIZ>=D1 AND MASTER.BILL_POS.DATE_REALIZ<=D2  
   GROUP BY MASTER.BILL_POS.NOM_DOK) BP
*/
  ,MASTER.KLS_DOG D
  ,MASTER.KLS_PREDPR P0 --ПРОДАВЕЦ
  ,MASTER.KLS_PREDPR P1 --ПЛАТЕЛЬЩИК
  ,MASTER.KLS_PREDPR P2 --ПОЛУЧАТЕЛЬ
  ,MASTER.KLS_PREDPR P4 --ОТПРАВИТЕЛЬ
  ,MASTER.KLS_REGION R0 --ПРОДАВЕЦ
  ,MASTER.KLS_REGION R1 --ПЛАТЕЛЬЩИК
  ,MASTER.KLS_REGION R2 --ПОЛУЧАТЕЛЬ
  ,MASTER.KLS_REGION R4 --ОТПРАВИТЕЛЬ
  ,MASTER.MONTH M
  ,MASTER.KLS_VID_OTGR VO
  ,MASTER.KLS_LOAD_TYPE LT
  ,KLS_PROD PR
WHERE B.DOG_ID=D.ID
  AND D.PREDPR_ID=P1.ID
  AND B.NOM_ZD=M.NOM_ZD(+)
  AND M.LOAD_ABBR=VO.LOAD_ABBR(+)
  AND VO.LOAD_TYPE_ID=LT.ID(+)
--  AND M.NPR_SOBSTV_ID=P0.ID(+)
--  AND M.POTREB_ID=P2.ID(+)
--  AND M.GROTP_ID=P4.ID(+)
  AND B.OWNER_ID = P0.ID
  AND (CASE
         WHEN NVL(M.POTREB_ID,0)>0 THEN M.POTREB_ID
		 ELSE P1.ID
	   END) = P2.ID
  AND (CASE
         WHEN NVL(M.GROTP_ID,0)>0 THEN M.GROTP_ID
		 ELSE 8
	   END) = P4.ID
  AND P0.REGION_ID=R0.ID(+)
  AND P1.REGION_ID=R1.ID(+)
  AND P2.REGION_P_ID=R2.ID(+)
  AND P4.REGION_P_ID=R4.ID(+)
  AND D.AGENT_ID=8 -- Договора УНП
  AND D.PREDPR_ID=1 -- Плательщик ЛУКОЙЛ
--  AND B.DOG_ID=2519
--  AND B.DOG_ID=2481 --ДЛЯ ПРОБЫ
--  AND B.NOM_DOK=6124887 --ДЛЯ ПРОБЫ
--  AND B.DATE_VYP_SF>=D1
--  AND B.DATE_VYP_SF<=D2
  AND B.DATE_MOS>=D1 
  AND B.DATE_MOS<=D2 
  AND B.PROD_ID_NPR=PR.ID_NPR
)
LOOP

--ДОПОЛНЕНИЕ
S_DOPOLN:='';
TIPDOK:='';
NUMDOK:='';
DATEDOK:='';

FOR rec5 IN (
	SELECT 
	  (CASE
          WHEN rec1.PROD_ID_NPR IN ('10090','10091','10092') THEN 'Договор'
          WHEN rec1.PROD_ID_NPR IN ('10093','10094') THEN 'Договор'
          WHEN rec1.PROD_ID_NPR='10080' THEN 'Акт приема-передачи'
          WHEN rec1.PROD_ID_NPR<'10100' AND rec1.PROD_ID_NPR<>'10080' THEN 'Отчет агента'
	      ELSE 'Квитанция'
	     END) as TIPDOK2,
	  (CASE
          WHEN rec1.PROD_ID_NPR IN ('10090','10091','10092') THEN 'Согласно договору '|| rec1.dogovor || 'от ' || TO_CHAR(rec1.datadog,'dd.mm.yyyy') ||' г. '
          WHEN rec1.PROD_ID_NPR IN ('10093','10094') THEN rec1.PROD_NAME || ' за '||NLS_LOWER(RUSMONTH(rec1.DATE_KVIT)) || ' согласно договору '|| rec1.dogovor || ' от ' || TO_CHAR(rec1.datadog,'dd.mm.yyyy') ||'г. '
          WHEN rec1.PROD_ID_NPR='10080' THEN 'Акт приема-передачи № ' || MBP.NUM_AKT || ' от ' || TO_CHAR(rec1.date_kvit,'dd.mm.yyyy') ||' г. '
          WHEN rec1.PROD_ID_NPR<'10100' AND rec1.PROD_ID_NPR<>'10080' THEN 'Согласно отчета агента от ' || TO_CHAR(rec1.date_kvit,'dd.mm.yyyy') ||' г. '
	      ELSE 'Квит. № ' || GET_LIST_NAKL_NUM(rec1.KOD_POKUP) || ' от ' || TO_CHAR(rec1.date_kvit,'dd.mm.yyyy') ||' г. '
	     END) as dopoln2,
	  (CASE
          WHEN rec1.PROD_ID_NPR IN ('10090','10091','10092') THEN rec1.dogovor
          WHEN rec1.PROD_ID_NPR IN ('10093','10094') THEN rec1.dogovor
          WHEN rec1.PROD_ID_NPR='10080' THEN TO_CHAR(MBP.NUM_AKT)
          WHEN rec1.PROD_ID_NPR<'10100'  AND rec1.PROD_ID_NPR<>'10080' THEN '-'
	      ELSE GET_LIST_NAKL_NUM(rec1.KOD_POKUP)
	     END) as numdok2,
	  (CASE
          WHEN rec1.PROD_ID_NPR IN ('10090','10091','10092') THEN rec1.datadog
          WHEN rec1.PROD_ID_NPR IN ('10093','10094') THEN rec1.datadog
          WHEN rec1.PROD_ID_NPR='10080' THEN rec1.date_kvit
          WHEN rec1.PROD_ID_NPR<'10100'  AND rec1.PROD_ID_NPR<>'10080' THEN rec1.date_kvit
	      ELSE rec1.DATE_KVIT
	     END) as datedok2
	FROM MASTER.BILL_POS MBP
	WHERE MBP.NOM_DOK=rec1.KOD_POKUP
    	    AND (MBP.BILL_POS_ID<10 OR rec1.PROD_ID_NPR<'10100'))
	LOOP
	  S_DOPOLN:=rec5.dopoln2;
      TIPDOK:=rec5.tipdok2;
      NUMDOK:=rec5.numdok2;
      DATEDOK:=rec5.datedok2;
  	  EXIT;
	END LOOP;

IF rec1.PROD_ID_NPR<'10100' AND rec1.PROD_ID_NPR<>'10080' THEN
-- Услуги  	

INSERT INTO SVETA.SEND_SFAK_POKUP_USL (
  NPZ
  ,KOD_POKUP
  ,ID_PLAT
  ,ID_POST
  ,INN_NPLAT
  ,INN_POST
  ,GROTPR
  ,GROTPR_AD
  ,GRPOL
  ,GRPOL_AD
  ,DOPOLN1
  ,STATUS
  ,KOD_STORN
  ,DOGOVOR
  ,DATADOG
  ,NAME_POST
  ,ADDR_POST
  ,KPP_POST
  ,NAME_NPLAT
  ,KPP_PLAT
  ,DATA_SF
  ,SCHETF )
VALUES
(
  rec1.NPZ
  ,rec1.KOD_POKUP
  ,rec1.ID_PLAT
  ,rec1.ID_POST
  ,rec1.INN_NPLAT
  ,rec1.INN_POST
  ,rec1.GROTPR
  ,rec1.GROTPR_AD
  ,rec1.GRPOL
  ,rec1.GRPOL_AD
  ,S_DOPOLN
--  ,rec1.DOPOLN1
  ,rec1.STATUS
  ,rec1.KOD_STORN
  ,rec1.DOGOVOR
  ,rec1.DATADOG
  ,rec1.NAME_POST
  ,rec1.ADDR_POST
  ,rec1.KPP_POST
  ,rec1.NAME_NPLAT
  ,rec1.KPP_PLAT
  ,rec1.DATA_SF
  ,rec1.SCHETF
   );
--
ELSE
-- Нефтепродукты
INSERT INTO SVETA.SEND_SFAK_POKUP (
  NPZ
  ,KOD_POKUP
  ,ID_PLAT
  ,ID_POST
  ,INN_NPLAT
  ,INN_POST
  ,GROTPR
  ,GROTPR_AD
  ,GRPOL
  ,GRPOL_AD
  ,DOPOLN1
  ,STATUS
  ,KOD_STORN
  ,DOGOVOR
  ,DATADOG
  ,NAME_POST
  ,ADDR_POST
  ,KPP_POST
  ,NAME_NPLAT
  ,KPP_PLAT
  ,DATA_SF
  ,SCHETF )
VALUES
(
  rec1.NPZ
  ,rec1.KOD_POKUP
  ,rec1.ID_PLAT
  ,rec1.ID_POST
  ,rec1.INN_NPLAT
  ,rec1.INN_POST
  ,rec1.GROTPR
  ,rec1.GROTPR_AD
  ,rec1.GRPOL
  ,rec1.GRPOL_AD
  ,S_DOPOLN
--  ,rec1.DOPOLN1
  ,rec1.STATUS
  ,rec1.KOD_STORN
  ,rec1.DOGOVOR
  ,rec1.DATADOG
  ,rec1.NAME_POST
  ,rec1.ADDR_POST
  ,rec1.KPP_POST
  ,rec1.NAME_NPLAT
  ,rec1.KPP_PLAT
  ,rec1.DATA_SF
  ,rec1.SCHETF
   );
end if;

-- Позиции
FOR rec2 IN (
SELECT
  BP.NOM_DOK*100+BP.BILL_POS_ID AS ID_POZ_POK
  ,(CASE
      WHEN rec1.PROD_ID_NPR IN ('10090','10091','10092','10093','10094') THEN rec1.PROD_NAME || ' за '||NLS_LOWER(RUSMONTH(rec1.DATE_KVIT))
	  ELSE pr.sf_name
	END) as naim_tov
  ,'ТН' AS EDIZM
  ,BP.CENA_BN AS CENA
  ,BP.SUMMA_AKCIZ AS AKCIZ
  ,18 AS NDS
  ,BP.VES AS KOL
  ,BP.SUMMA_BN AS SUMMA
  ,BP.SUMMA_NDS20 AS SUMNDS
  ,BP.SUMMA AS ALLNDS
  ,'18' AS STNDS
  ,PR.MATNR AS MATNR
  ,PR.KSSS_PROD_ID AS KSSS_ID
  ,(CASE
      WHEN PR.AKCIZ=1 THEN 'БЕЗ АКЦИЗА'
	  ELSE '' 
    END) AS NO_AKCIZ
  ,BP.BILL_POS_ID	
FROM
  MASTER.BILL_POS BP
  ,MASTER.KLS_PROD PR
WHERE rec1.KOD_POKUP=BP.NOM_DOK
  AND BP.PROD_ID_NPR=PR.ID_NPR
) LOOP


IF rec1.PROD_ID_NPR<'10100' AND rec1.PROD_ID_NPR<>'10080' THEN
-- Услуги  	

    INSERT INTO SVETA.SEND_POZ_POKUP_USL (
      NPZ
      ,KOD_POKUP
      ,ID_POZ_POK
      ,NAIM_TOV
      ,KSSS_USL
      ,CENA
      ,AKCIZ
      ,NDS
      ,KOL
      ,SUMMA
      ,SUMNDS
      ,ALLNDS
      ,STNDS
      ,DATE_OTG
      ,DOC_TYPE
	  ,DOC_NUM
	  ,DOC_DATE
      ,N_5
 )
VALUES
(
  rec1.NPZ
  ,rec1.KOD_POKUP
  ,rec2.ID_POZ_POK
  ,rec2.NAIM_TOV
  ,rec2.KSSS_ID
  ,rec2.CENA
  ,rec2.AKCIZ
  ,rec2.NDS
  ,rec2.KOL
  ,rec2.SUMMA
  ,rec2.SUMNDS
  ,rec2.ALLNDS
  ,rec2.STNDS
  ,rec1.DATE_KVIT
  ,NULL
  ,NULL
--  ,TIPDOK
--  ,NUMDOK
  ,DATEDOK
  ,rec1.N_5
);

ELSE
-- Нефтепродукты
    INSERT INTO SVETA.SEND_POZ_POKUP (
      NPZ
      ,KOD_POKUP
      ,ID_POZ_POK
      ,NAIM_TOV
      ,EDIZM
      ,CENA
      ,AKCIZ
      ,NDS
      ,KOL
      ,SUMMA
      ,SUMNDS
      ,ALLNDS
      ,STNDS
      ,MATNR
      ,KSSS_ID
      ,N_5
	  ,NO_AKCIZ
 )
VALUES
(
  rec1.NPZ
  ,rec1.KOD_POKUP
  ,rec2.ID_POZ_POK
  ,rec2.NAIM_TOV
  ,rec2.EDIZM
  ,rec2.CENA
  ,rec2.AKCIZ
  ,rec2.NDS
  ,rec2.KOL
  ,rec2.SUMMA
  ,rec2.SUMNDS
  ,rec2.ALLNDS
  ,rec2.STNDS
  ,rec2.MATNR
  ,rec2.KSSS_ID
  ,rec1.N_5
  ,rec2.NO_AKCIZ
);

END IF;

FOR rec3 IN (
SELECT
--REC1  6 AS NPZ
  KV.DATE_KVIT AS DATE_OTG
  ,TIPDOK AS DOC_TYPE
--  ,'АКТ' AS DOC_TYPE
  ,NUMDOK AS DOC_NUM	
--  ,KV.NUM_KVIT AS DOC_NUM
  ,DATEDOK AS DOC_DATE
  ,KV.VES_BRUTTO AS KOL
--REC1  ,LT.SF_POKUP_VTR AS VTR
  ,KV.NUM_CIST AS NOMVAG
--REC1  ,B.NOM_SF AS SCHETF
--REC1  ,B.NOM_DOK AS KOD_POKUP
  ,rec2.ID_POZ_POK AS ID_POZ_POK
--  ,KV.BILL_POS_ID AS ID_POZ_POK
--REC1  ,B.DATE_VYP_SF AS DSCH
  ,PR.KSSS_PROD_ID AS NP_KOD
  ,PR.MATNR AS MATNR
  ,943 AS TARA_KOD
  ,kv.PROD_ID_NPR
FROM
  MASTER.KLS_PROD PR
  ,MASTER.V_KVIT_ALL KV
WHERE
  rec1.KOD_POKUP=KV.BILL_ID(+)
  AND rec2.BILL_POS_ID=KV.BILL_POS_ID(+)
  AND kv.PROD_ID_NPR=PR.ID_NPR
)
LOOP

INSERT INTO SVETA.SEND_OTGR_POKUP (
  NPZ
  ,DATE_OTG
  ,DOC_TYPE
  ,DOC_NUM
  ,DOC_DATE
  ,KOL
  ,VTR
  ,NOMVAG
  ,SCHETF
  ,KOD_POKUP
  ,ID_POZ_POK
  ,DSCH
  ,NP_KOD
  ,MATNR
  ,TARA_KOD
)
VALUES
(
  rec1.NPZ
  ,rec3.DATE_OTG
  ,rec3.DOC_TYPE
  ,rec3.DOC_NUM
  ,rec3.DOC_DATE
  ,rec3.KOL
  ,rec1.VTR
  ,rec3.NOMVAG
  ,rec1.SCHETF
  ,rec1.KOD_POKUP
  ,rec3.ID_POZ_POK
  ,rec1.DATA_SF --DSCH
  ,rec3.NP_KOD
  ,rec3.MATNR
  ,rec3.TARA_KOD
);

END LOOP;
END LOOP;
END LOOP;

COMMIT;

END P_SEND_SF;

/

--
-- V_KTU_UNP  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KTU_UNP
(YY, MM, KOD_PLAT, NAME_PLAT, KOD_PROD, 
 NAME_PROD, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, 
 VES_KTU, NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, 
 DATE_END, MAX_DATE_NAR, CHECK_DATE)
AS 
SELECT YY, MM, kod_plat, name_plat, kod_prod, name_prod, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, VES_KTU, 
  NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, date_end, MAX_DATE_NAR, CHECK_DATE
FROM V_KTU_UNP_1 
UNION ALL
SELECT YY, MM, kod_plat, name_plat, kod_prod, name_prod, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, VES_KTU, 
  NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, date_end, MAX_DATE_NAR, CHECK_DATE
FROM V_KTU_UNP_2;


--
-- V_KTU_UNP_READY  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_KTU_UNP_READY
(YY, MM, KOD_PLAT, NAME_PLAT, KOD_PROD, 
 NAME_PROD, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, 
 VES_KTU, NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, 
 DATE_END, MAX_DATE_NAR, CHECK_DATE)
AS 
SELECT YY, MM, kod_plat, name_plat, kod_prod, name_prod, TIP_ERROR, NOM_ZD_KTU, NARIAD_KTU, DOVEREN_KTU, VES_KTU, 
  NOM_ZD_UNP, NARIAD_UNP, DOVEREN_UNP, VES_UNP, date_end, MAX_DATE_NAR, CHECK_DATE
FROM V_KTU_UNP 
ORDER BY YY,MM,NAME_PLAT,NAME_PROD,NOM_ZD_KTU,DOVEREN_KTU,NARIAD_KTU,NOM_ZD_UNP,DOVEREN_UNP,NARIAD_UNP;


--
-- V_LUKREP_SF_AKCIZ  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_AKCIZ
(NUM_5_DAY, IS_KORR, IS_AGENT, SOBSTV, PLAT_ID, 
 PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, DOG_NUMBER, 
 DOG_DATE, NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_SF, 
 NPO_SF, NOM_SCH, DATE_VYP_SF, NOM_AKT, DATE_AKT, 
 PROD_ID_NPR, PROD_NAME, VES, PROD_EDIZ, NUM_KVIT, 
 NUM_DOVER, NUM_KVIT_STR, DATE_KVIT, DATE_MOS, NUM_PASP, 
 NUM_STRAH, CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, 
 SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_TARIF, SUMMA_TARIF_NDS, 
 SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, HRAN_ID, 
 HRAN_NAME, KOL_DN, RAST, LUK_PLAT_ID, LUK_PLAT_NAME, 
 LUK_DOG_ID, LUK_DOG_NUMBER, LUK_DOG_DATE, TYPE_DOCUMENT, PROD_GROUP_ORDER, 
 EX_SVID, EX_SVID_PREF, EX_SVID_NUMB, VIR_EXIST, VIR_DATE, 
 VIR_PERIOD, VIR_SUM_PROD_BN, VIR_VES)
AS 
SELECT
  A.NUM_5_DAY,
  A.IS_KORR,
  A.IS_AGENT,
  A.SOBSTV,
  A.PLAT_ID,
  A.PLAT_INN,
  A.PLAT_NAME,
  A.PLAT_ADDR,
  A.DOG_ID,
  A.DOG_NUMBER,
  A.DOG_DATE,
  A.NOM_DOK,
  A.NOM_SF,
  A.ORIG_NOM_SF,
  A.OLD_NOM_SF,
  A.NPO_SF,
  A.NOM_SCH,
  A.DATE_VYP_SF,
  A.NOM_AKT,
  A.DATE_AKT,
  A.PROD_ID_NPR,
  A.PROD_NAME,
  A.VES,
  A.PROD_EDIZ,
  A.NUM_KVIT,
  A.NUM_DOVER,
  A.NUM_KVIT_STR,
  A.DATE_KVIT,
  A.DATE_MOS,
  A.NUM_PASP,
  A.NUM_STRAH,
  A.CENA_BN,
  A.CENA,
  A.SUMMA_PROD_BN,
  A.SUMMA_PROD_NDS,
  A.SUMMA_PROD,
  A.SUMMA_AGEN,
  A.SUMMA_AGEN_NDS,
  A.SUMMA_TARIF,
  A.SUMMA_TARIF_NDS,
  A.SUMMA_STRAH,
  A.SUMMA_DOK,
  A.SUMMA_DOK_NDS,
  A.PRICE_PROTOKOL,
  A.HRAN_ID,
  A.HRAN_NAME,
  A.KOL_DN,
  A.RAST,
  A.LUK_PLAT_ID,
  A.LUK_PLAT_NAME,
  A.LUK_DOG_ID,
  A.LUK_DOG_NUMBER,
  A.LUK_DOG_DATE,
  A.TYPE_DOCUMENT,
  prod_akciz.GROUP_ORDER AS PROD_GROUP_ORDER,
  NVL(svid_akciz.EX_SVID,0) AS EX_SVID,
  NVL(svid_akciz.EX_SVID_PREF,'') AS EX_SVID_PREF,
  NVL(svid_akciz.EX_SVID_NUMB,'') AS EX_SVID_NUMB,
  DECODE(bills_vir.DATE_VIR,NULL,0,1) AS VIR_EXIST,
  DECODE(bills_vir.DATE_VIR,NULL,A.DATE_KVIT,bills_vir.DATE_VIR)AS VIR_DATE,
  RusMonth(DECODE(bills_vir.DATE_VIR,NULL,A.DATE_KVIT,bills_vir.DATE_VIR)) AS VIR_PERIOD,
  DECODE(bills_vir.DATE_VIR,NULL,A.SUMMA_PROD_BN,bills_vir.SUM_PROD) AS VIR_SUM_PROD_BN,
  NVL(bills_vir.VES,0) AS VIR_VES
FROM V_LUKREP_SF_REES_NEW A,
(
SELECT A.PROD_ID_NPR,B.GROUP_ORDER
  FROM KLS_PROD_GROUPS_DESC A, KLS_PROD_GROUPS B
 WHERE A.PROD_GROUPS_ID=B.ID
   AND B.PROD_TYPE_GRP_ID=6
) prod_akciz, -- Подакцизные продукты
(
SELECT PLAT_ID,EX_SVID,EX_SVID_PREF,EX_SVID_NUMB
  FROM KLS_PREDPR_AKCIZ
 WHERE EX_SVID=1
) svid_akciz, -- Акцизные свидетельства
(
SELECT
  KVIT.BILL_ID,
  A.DATE_VIR,
  SUM(A.VES) AS VES,
  SUM(A.SUM_PROD) AS SUM_PROD
  FROM KVIT_DATE_VIR A,KVIT
 WHERE A.KVIT_ID=KVIT.ID
   AND KVIT.DATE_KVIT >= TO_DATE('01.01.2003','dd.mm.yyyy')
GROUP BY KVIT.BILL_ID,A.DATE_VIR
) bills_vir -- Деление СФ по дате выработки
WHERE A.DATE_VYP_SF >= TO_DATE('01.01.2003','dd.mm.yyyy')
  AND A.PROD_ID_NPR = prod_akciz.PROD_ID_NPR
  AND A.PLAT_ID=svid_akciz.PLAT_ID(+)
  AND A.NOM_DOK=bills_vir.BILL_ID(+)
  AND A.IS_AGENT=1;


--
-- V_LUKREP_SF_MON  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_MON
(NEW_NOM_DOK, NUM_5_DAY, IS_KORR, IS_AGENT, IS_SILOV, 
 SOBSTV, PLAT_ID, PLAT_INN, PLAT_NAME, PLAT_ADDR, 
 DOG_ID, DOG_NUMBER, DOG_DATE, DATE_KVIT, DATE_MOS, 
 DATE_CHN_SOB, NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, 
 OLD_NOM_SF, NPO_SF, DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, 
 PROD_ID_NPR, PROD_NAME, PROD_EDIZ, KVIT_ID, VES, 
 VES_KVIT, CNT_KVIT, SVED_NUM, NUM_KVIT, NOM_AKT, 
 NUM_CIST, STANOTP_ID, STAN_NAME, HRAN_ID, HRAN_NAME, 
 POLUCH_ID, POLUCH_NAME, POLUCH_ADDR, IS_SF, CENA_BN, 
 CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, 
 SUMMA_AGEN_NDS, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, 
 SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, 
 SUMMA_STRAH, SUMMA_STRAH_NEW, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, 
 KOL_DN, NAZN_OTG_ID, SNP_PLAT_ID, SNP_PLAT_NAME, RAST, 
 NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, DATE_VYR, KORR_PROD, 
 STRAH_NOM_SF, STRAH_SUMMA_DOK, VID_USL_ID)
AS 
SELECT /*+ ALL_ROWS */ 
 TO_CHAR(NOM_DOK) || TO_CHAR(B.DATEVYR,'YYYYMMDD') as NEW_NOM_DOK, 
 NUM_5_DAY, 
 IS_KORR, 
 IS_AGENT, 
 IS_SILOV, 
 SOBSTV, 
 PLAT_ID, 
 PLAT_INN, 
 PLAT_NAME, 
 PLAT_ADDR, 
 DOG_ID, 
 DOG_NUMBER, 
 DOG_DATE, 
 DATE_KVIT, 
 DATE_MOS, 
 DATE_CHN_SOB, 
 NOM_DOK, 
 NOM_SF, 
 ORIG_NOM_SF, 
 OLD_NOM_DOK, 
 OLD_NOM_SF, 
 NPO_SF, 
 DATE_VYP_SF, 
 GR_NPR_ID, 
 GR_NPR_NAME, 
 PROD_ID_NPR, 
 PROD_NAME, 
 PROD_EDIZ, 
 KVIT_ID, 
 DECODE(A.VES,0,0,NVL(B.KOL,A.VES)) as VES, 
 VES_KVIT, 
 CNT_KVIT, 
 SVED_NUM, 
 NUM_KVIT, 
 NOM_AKT, 
 NUM_CIST, 
 STANOTP_ID, 
 STAN_NAME, 
 HRAN_ID, 
 HRAN_NAME, 
 POLUCH_ID, 
 POLUCH_NAME, 
 POLUCH_ADDR, 
 IS_SF, 
 A.CENA_BN, 
 A.CENA, 
 DECODE(A.VES,0,0,NVL(B.SUMMA,A.SUMMA_PROD_BN)) as SUMMA_PROD_BN, 
 DECODE(A.VES,0,0,NVL(B.SUMNDS,A.SUMMA_PROD_NDS)) as SUMMA_PROD_NDS, 
 DECODE(A.VES,0,0,NVL(B.ALLNDS,A.SUMMA_PROD)) as SUMMA_PROD, 
 SUMMA_AGEN, 
 SUMMA_AGEN_NDS, 
 SUMMA_VOZN_BN, 
 SUMMA_TARIF, 
 SUMMA_TARIF_NDS, 
 SUMMA_OHRANA, 
 SUMMA_OHRANA_NDS, 
 TARIF_MPS, 
 TARIF_KVIT, 
 SUMMA_RAZN_BN, 
 NACENKA, 
 SUMMA_STRAH, 
 ROUND(SUMMA_STRAH*DECODE(B.KOL,NULL,1,DECODE(A.VES,0,1,B.KOL/A.VES)),2) as SUMMA_STRAH_NEW, 
 SUMMA_DOK, 
 SUMMA_DOK_NDS, 
 PRICE_PROTOKOL, 
 KOL_DN, 
 NAZN_OTG_ID, 
 SNP_PLAT_ID, 
 SNP_PLAT_NAME, 
 RAST, 
 NUM_STRAH, 
 DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES_KVIT,0),0,0,ROUND(SUMMA_VOZN_BN/VES_KVIT,0))),USL_SUM) as USL_SUM, 
 VAGOWN_TYP_ID, 
 B.DATEVYR, KORR_PROD, STRAH_NOM_SF, STRAH_SUMMA_DOK,VID_USL_ID 
FROM MASTER.V_LUKREP_SF_NEW_BEFORE A, 
( 
SELECT 
   KOD_PROD, 
   DATEVYR, 
   SUM(KOL) as KOL, 
   SUM(SUMMA) as SUMMA, 
   SUM(SUMNDS) as SUMNDS, 
   SUM(ALLNDS) as ALLNDS 
  FROM SVETA.SF_POZ_VYR 
  GROUP BY 
   KOD_PROD, 
   DATEVYR 
) B 
WHERE A.NOM_DOK=B.KOD_PROD(+);


--
-- V_LUKREP_SF_NEW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_NEW
(NEW_NOM_DOK, NUM_5_DAY, IS_KORR, IS_AGENT, IS_SILOV, 
 SOBSTV, PLAT_ID, PLAT_INN, PLAT_NAME, PLAT_ADDR, 
 DOG_ID, DOG_NUMBER, DOG_DATE, DATE_KVIT, DATE_MOS, 
 DATE_CHN_SOB, NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, 
 OLD_NOM_SF, NPO_SF, DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, 
 PROD_ID_NPR, PROD_NAME, PROD_EDIZ, KVIT_ID, VES, 
 VES_KVIT, CNT_KVIT, SVED_NUM, NUM_KVIT, NOM_AKT, 
 NUM_CIST, STANOTP_ID, STAN_NAME, HRAN_ID, HRAN_NAME, 
 POLUCH_ID, POLUCH_NAME, POLUCH_ADDR, IS_SF, CENA_BN, 
 CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, 
 SUMMA_AGEN_NDS, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, 
 SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, 
 SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, KOL_DN, 
 NAZN_OTG_ID, SNP_PLAT_ID, SNP_PLAT_NAME, RAST, NUM_STRAH, 
 USL_SUM, VAGOWN_TYP_ID, KORR_PROD, STRAH_NOM_SF, STRAH_SUMMA_DOK, 
 VID_USL_ID)
AS 
SELECT /*+ ALL_ROWS */
 TO_CHAR(NOM_DOK) as NEW_NOM_DOK,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 IS_SILOV,
 SOBSTV,
 PLAT_ID,
 PLAT_INN,
 PLAT_NAME,
 PLAT_ADDR,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 DATE_CHN_SOB,
 NOM_DOK,
 NOM_SF,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 NPO_SF,
 DATE_VYP_SF,
 GR_NPR_ID,
 GR_NPR_NAME,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 VES,
 VES_KVIT,
 CNT_KVIT,
 SVED_NUM,
 NUM_KVIT,
 NOM_AKT,
 NUM_CIST,
 STANOTP_ID,
 STAN_NAME,
 HRAN_ID,
 HRAN_NAME,
 POLUCH_ID,
 POLUCH_NAME,
 POLUCH_ADDR,
 IS_SF,
 CENA_BN,
 CENA,
 SUMMA_PROD_BN,
 SUMMA_PROD_NDS,
 SUMMA_PROD,
 SUMMA_AGEN,
 SUMMA_AGEN_NDS,
 SUMMA_VOZN_BN,
 SUMMA_TARIF,
 SUMMA_TARIF_NDS,
 SUMMA_OHRANA,
 SUMMA_OHRANA_NDS,
 TARIF_MPS,
 TARIF_KVIT,
 SUMMA_RAZN_BN,
 NACENKA,
 SUMMA_STRAH,
 SUMMA_DOK,
 SUMMA_DOK_NDS,
 PRICE_PROTOKOL,
 KOL_DN,
 NAZN_OTG_ID,
 SNP_PLAT_ID,
 SNP_PLAT_NAME,
 RAST,
 NUM_STRAH,
 DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES_KVIT,0),0,0,ROUND(SUMMA_VOZN_BN/VES_KVIT,0))),USL_SUM) as USL_SUM,
 VAGOWN_TYP_ID,
 KORR_PROD, STRAH_NOM_SF, STRAH_SUMMA_DOK,VID_USL_ID
FROM MASTER.V_LUKREP_SF_NEW_BEFORE
--where nom_dok=6111317 or nom_dok=6111304 or nom_dok=6111307 or nom_dok=6111426
;


--
-- V_LUKREP_SF_REES  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_REES
(NUM_5_DAY, IS_AGENT, SOBSTV, PLAT_ID, PLAT_INN, 
 PLAT_NAME, PLAT_ADDR, DOG_ID, DOG_NUMBER, DOG_DATE, 
 NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_SF, NPO_SF, 
 NOM_SCH, DATE_VYP_SF, NOM_AKT, DATE_AKT, PROD_ID_NPR, 
 PROD_NAME, VES, PROD_EDIZ, NUM_KVIT, NUM_DOVER, 
 NUM_KVIT_STR, DATE_KVIT, DATE_MOS, NUM_PASP, NUM_STRAH, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11, SUMMA_VOZN_11_NDS, SUMMA_VOZN_12, 
 SUMMA_VOZN_12_NDS, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_STRAH, SUMMA_DOK, 
 SUMMA_DOK_NDS, PRICE_PROTOKOL, HRAN_ID, HRAN_NAME, KOL_DN)
AS 
SELECT "NUM_5_DAY","IS_AGENT","SOBSTV","PLAT_ID","PLAT_INN","PLAT_NAME","PLAT_ADDR","DOG_ID","DOG_NUMBER","DOG_DATE","NOM_DOK","NOM_SF","ORIG_NOM_SF","OLD_NOM_SF",
"NPO_SF","NOM_SCH","DATE_VYP_SF","NOM_AKT","DATE_AKT","PROD_ID_NPR","PROD_NAME","VES","PROD_EDIZ","NUM_KVIT","NUM_DOVER",
"NUM_KVIT_STR","DATE_KVIT","DATE_MOS","NUM_PASP","NUM_STRAH","CENA_BN","CENA","SUMMA_PROD_BN","SUMMA_PROD_NDS",
"SUMMA_PROD","SUMMA_AGEN","SUMMA_AGEN_NDS",
"SUMMA_VOZN_11", "SUMMA_VOZN_11_NDS", "SUMMA_VOZN_12", "SUMMA_VOZN_12_NDS",
"SUMMA_TARIF","SUMMA_TARIF_NDS","SUMMA_STRAH","SUMMA_DOK","SUMMA_DOK_NDS","PRICE_PROTOKOL","HRAN_ID","HRAN_NAME","KOL_DN" FROM V_LUKREP_SF_REES_NEW;


--
-- V_LUKREP_SF_REES_MON  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_REES_MON
(NUM_5_DAY, IS_AGENT, SOBSTV, PLAT_ID, PLAT_INN, 
 PLAT_NAME, PLAT_ADDR, DOG_ID, DOG_NUMBER, DOG_DATE, 
 NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_SF, NPO_SF, 
 NOM_SCH, DATE_VYP_SF, NOM_AKT, DATE_AKT, PROD_ID_NPR, 
 PROD_NAME, VES, PROD_EDIZ, NUM_KVIT, NUM_DOVER, 
 NUM_KVIT_STR, DATE_KVIT, DATE_MOS, NUM_PASP, NUM_STRAH, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_11, SUMMA_VOZN_11_NDS, SUMMA_VOZN_12, 
 SUMMA_VOZN_12_NDS, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_STRAH, SUMMA_DOK, 
 SUMMA_DOK_NDS, PRICE_PROTOKOL, HRAN_ID, HRAN_NAME, KOL_DN)
AS 
SELECT "NUM_5_DAY","IS_AGENT","SOBSTV","PLAT_ID","PLAT_INN","PLAT_NAME","PLAT_ADDR","DOG_ID","DOG_NUMBER","DOG_DATE",
"NOM_DOK","NOM_SF","ORIG_NOM_SF","OLD_NOM_SF","NPO_SF","NOM_SCH","DATE_VYP_SF","NOM_AKT","DATE_AKT","PROD_ID_NPR",
"PROD_NAME","VES","PROD_EDIZ","NUM_KVIT","NUM_DOVER","NUM_KVIT_STR","DATE_KVIT","DATE_MOS","NUM_PASP","NUM_STRAH",
"CENA_BN","CENA","SUMMA_PROD_BN","SUMMA_PROD_NDS","SUMMA_PROD","SUMMA_AGEN","SUMMA_AGEN_NDS",
"SUMMA_VOZN_11", "SUMMA_VOZN_11_NDS", "SUMMA_VOZN_12", "SUMMA_VOZN_12_NDS",
"SUMMA_TARIF","SUMMA_TARIF_NDS","SUMMA_STRAH","SUMMA_DOK","SUMMA_DOK_NDS","PRICE_PROTOKOL","HRAN_ID","HRAN_NAME","KOL_DN" FROM V_LUKREP_SF_REES_NEW;


--
-- V_LUKREP_SF_2005  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_2005
(NEW_NOM_DOK, NUM_5_DAY, IS_KORR, IS_AGENT, SOBSTV, 
 PLAT_ID, PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, 
 DOG_NUMBER, DOG_DATE, DATE_KVIT, DATE_MOS, DATE_CHN_SOB, 
 NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, OLD_NOM_SF, 
 NPO_SF, DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, PROD_ID_NPR, 
 PROD_NAME, PROD_EDIZ, KVIT_ID, VES, VES_KVIT, 
 CNT_KVIT, SVED_NUM, NUM_KVIT, NOM_AKT, NUM_CIST, 
 STANOTP_ID, STAN_NAME, HRAN_ID, HRAN_NAME, POLUCH_ID, 
 POLUCH_NAME, POLUCH_ADDR, IS_SF, CENA_BN, CENA, 
 SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, 
 SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, SUMMA_OHRANA_NDS, 
 TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, SUMMA_STRAH, 
 SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, KOL_DN, NAZN_OTG_ID, 
 RAST, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, KORR_PROD, 
 VID_USL_ID)
AS 
SELECT
 -- Без выделения Приобретенки и Разбиения по дате выработки
 TO_CHAR(NOM_DOK) as NEW_NOM_DOK,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 1 as SOBSTV,
 PLAT_ID,
 PLAT_INN,
 PLAT_NAME,
 PLAT_ADDR,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 DATE_CHN_SOB,
 NOM_DOK,
 NOM_SF,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 NPO_SF,
 DATE_VYP_SF,
 GR_NPR_ID,
 GR_NPR_NAME,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 (VES) as VES,
 (VES_KVIT) as VES_KVIT,
 (CNT_KVIT) as CNT_KVIT,
 SVED_NUM,
 NUM_KVIT,
 NOM_AKT,
 NUM_CIST,
 STANOTP_ID,
 STAN_NAME,
 HRAN_ID,
 HRAN_NAME,
 POLUCH_ID,
 POLUCH_NAME,
 POLUCH_ADDR,
 IS_SF,
 CENA_BN,
 CENA,
 (SUMMA_PROD_BN) as SUMMA_PROD_BN,
 (SUMMA_PROD_NDS) as SUMMA_PROD_NDS,
 (SUMMA_PROD) as SUMMA_PROD,
 (SUMMA_AGEN) as SUMMA_AGEN,
 (SUMMA_AGEN_NDS) as SUMMA_AGEN_NDS,
 (SUMMA_VOZN_BN) as SUMMA_VOZN_BN,
 (SUMMA_TARIF) as SUMMA_TARIF,
 (SUMMA_TARIF_NDS) as SUMMA_TARIF_NDS,
 (SUMMA_OHRANA) as SUMMA_OHRANA,
 (SUMMA_OHRANA_NDS) as SUMMA_OHRANA_NDS,
 (TARIF_MPS) as TARIF_MPS,
 (TARIF_KVIT) as TARIF_KVIT,
 (SUMMA_RAZN_BN) as SUMMA_RAZN_BN,
 NACENKA,
 (SUMMA_STRAH) as SUMMA_STRAH,
 (SUMMA_DOK) as SUMMA_DOK,
 (SUMMA_DOK_NDS) as SUMMA_DOK_NDS,
 PRICE_PROTOKOL,
 KOL_DN,
 NAZN_OTG_ID,
 RAST,
 NUM_STRAH,
 DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES_KVIT,0),0,0,ROUND(SUMMA_VOZN_BN/VES_KVIT,0))),USL_SUM) as USL_SUM,
 VAGOWN_TYP_ID,
 KORR_PROD,
 VID_USL_ID
FROM MASTER.V_LUKREP_SF_2005_BEFORE
WHERE SUMMA_DOK<>0;


--
-- V_LUKREP_SF_2005_MON  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF_2005_MON
(NEW_NOM_DOK, NUM_5_DAY, IS_KORR, IS_AGENT, SOBSTV, 
 PLAT_ID, PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, 
 DOG_NUMBER, DOG_DATE, DATE_KVIT, DATE_MOS, DATE_CHN_SOB, 
 NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_DOK, OLD_NOM_SF, 
 NPO_SF, DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, PROD_ID_NPR, 
 PROD_NAME, PROD_EDIZ, KVIT_ID, VES, VES_KVIT, 
 CNT_KVIT, SVED_NUM, NUM_KVIT, NOM_AKT, NUM_CIST, 
 STANOTP_ID, STAN_NAME, HRAN_ID, HRAN_NAME, POLUCH_ID, 
 POLUCH_NAME, POLUCH_ADDR, IS_SF, CENA_BN, CENA, 
 SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, 
 SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, SUMMA_OHRANA, SUMMA_OHRANA_NDS, 
 TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, NACENKA, SUMMA_STRAH, 
 SUMMA_STRAH_NEW, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, KOL_DN, 
 NAZN_OTG_ID, RAST, NUM_STRAH, USL_SUM, VAGOWN_TYP_ID, 
 DATE_VYR, KORR_PROD, VID_USL_ID)
AS 
SELECT
 -- С выделение Даты выработки и Приобретенки
 TO_CHAR(NOM_DOK) /*|| TO_CHAR(DATE_VIR,'YYYYMMDD')*/ as NEW_NOM_DOK,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 SOBSTV,
 PLAT_ID,
 PLAT_INN,
 PLAT_NAME,
 PLAT_ADDR,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 DATE_CHN_SOB,
 NOM_DOK,
 NOM_SF,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 NPO_SF,
 DATE_VYP_SF,
 GR_NPR_ID,
 GR_NPR_NAME,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 VES,
 VES_KVIT,
 CNT_KVIT,
 SVED_NUM,
 NUM_KVIT,
 NOM_AKT,
 NUM_CIST,
 STANOTP_ID,
 STAN_NAME,
 HRAN_ID,
 HRAN_NAME,
 POLUCH_ID,
 POLUCH_NAME,
 POLUCH_ADDR,
 IS_SF,
 A.CENA_BN,
 A.CENA,
 SUMMA_PROD_BN,
 SUMMA_PROD_NDS,
 SUMMA_PROD,
 SUMMA_AGEN,
 SUMMA_AGEN_NDS,
 SUMMA_VOZN_BN,
 SUMMA_TARIF,
 SUMMA_TARIF_NDS,
 SUMMA_OHRANA,
 SUMMA_OHRANA_NDS,
 TARIF_MPS,
 TARIF_KVIT,
 SUMMA_RAZN_BN,
 NACENKA,
 SUMMA_STRAH,
 SUMMA_STRAH as SUMMA_STRAH_NEW,
 SUMMA_DOK,
 SUMMA_DOK_NDS,
 PRICE_PROTOKOL,
 KOL_DN,
 NAZN_OTG_ID,
 RAST,
 NUM_STRAH,
 DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES_KVIT,0),0,0,ROUND(SUMMA_VOZN_BN/VES_KVIT,0))),USL_SUM) as USL_SUM,
 VAGOWN_TYP_ID,
 DATE_VIR as DATEVYR,
 KORR_PROD,
 VID_USL_ID
FROM MASTER.V_LUKREP_SF_2005_MON_BEFORE A
WHERE SUMMA_DOK<>0;


--
-- V_PRIL_CIST  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PRIL_CIST
(BEG_DATE, END_DATE, MON_KVIT, NUM_5_DAY, IS_KORR, 
 IS_AGENT, PLAT_ID, PLAT_NAME, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, NOM_DOK, ORIG_NOM_SF, 
 OLD_NOM_DOK, OLD_NOM_SF, DATE_VYP_SF, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, NUM_KVIT, NUM_CIST, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, 
 SUMMA_OHRANA, SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, 
 NACENKA, SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, NUM_STRAH, 
 USL_SUM, VAGOWN_TYP_ID, VID_USL_ID)
AS 
SELECT
 BEG_DATE,
 END_DATE,
 MON_KVIT,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 PLAT_ID,
 PLAT_NAME,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 NOM_DOK,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 DATE_VYP_SF,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 MAX(VES) as VES,
 NUM_KVIT,
 NUM_CIST,
 MAX(CENA_BN) as CENA_BN,
 MAX(CENA) as CENA,
 SUM(SUMMA_PROD_BN) as SUMMA_PROD_BN,
 SUM(SUMMA_PROD_NDS) as SUMMA_PROD_NDS,
 SUM(SUMMA_PROD) as SUMMA_PROD,
 SUM(SUMMA_AGEN) as SUMMA_AGEN,
 SUM(SUMMA_AGEN_NDS) as SUMMA_AGEN_NDS,
 SUM(SUMMA_VOZN_BN) as SUMMA_VOZN_BN,
 SUM(SUMMA_TARIF) as SUMMA_TARIF,
 SUM(SUMMA_TARIF_NDS) as SUMMA_TARIF_NDS,
 SUM(SUMMA_OHRANA) as SUMMA_OHRANA,
 SUM(SUMMA_OHRANA_NDS) as SUMMA_OHRANA_NDS,
 SUM(TARIF_MPS) as TARIF_MPS,
 SUM(TARIF_KVIT) as TARIF_KVIT,
 SUM(SUMMA_RAZN_BN) as SUMMA_RAZN_BN,
 MAX(NACENKA) as NACENKA,
 SUM(SUMMA_STRAH) as SUMMA_STRAH,
 SUM(SUMMA_DOK) as SUMMA_DOK,
 SUM(SUMMA_DOK_NDS) as SUMMA_DOK_NDS,
 NUM_STRAH,
 MAX(DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES,0),0,0,ROUND(SUMMA_VOZN_BN/VES,0))),USL_SUM)) as USL_SUM,
 VAGOWN_TYP_ID,
 VID_USL_ID
FROM MASTER.V_PRIL_CIST_BEFORE
GROUP BY
 BEG_DATE,
 END_DATE,
 MON_KVIT,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 PLAT_ID,
 PLAT_NAME,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 NOM_DOK,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 DATE_VYP_SF,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 NUM_KVIT,
 NUM_CIST,
 NUM_STRAH,
 VAGOWN_TYP_ID,
 VID_USL_ID
--HAVING SUM(SUMMA_DOK)<>0
;


--
-- V_PRIL_CIST_ALL  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_PRIL_CIST_ALL
(BEG_DATE, END_DATE, MON_KVIT, NUM_5_DAY, IS_KORR, 
 IS_AGENT, PLAT_ID, PLAT_NAME, DOG_ID, DOG_NUMBER, 
 DOG_DATE, DATE_KVIT, DATE_MOS, NOM_DOK, ORIG_NOM_SF, 
 OLD_NOM_DOK, OLD_NOM_SF, DATE_VYP_SF, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, NUM_KVIT, NUM_CIST, 
 CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, SUMMA_PROD, 
 SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_VOZN_BN, SUMMA_TARIF, SUMMA_TARIF_NDS, 
 SUMMA_OHRANA, SUMMA_OHRANA_NDS, TARIF_MPS, TARIF_KVIT, SUMMA_RAZN_BN, 
 NACENKA, SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, NUM_STRAH, 
 USL_SUM, VAGOWN_TYP_ID, VID_USL_ID)
AS 
SELECT
 BEG_DATE,
 END_DATE,
 MON_KVIT,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 PLAT_ID,
 PLAT_NAME,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 NOM_DOK,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 DATE_VYP_SF,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 MAX(VES) as VES,
 NUM_KVIT,
 NUM_CIST,
 MAX(CENA_BN) as CENA_BN,
 MAX(CENA) as CENA,
 SUM(SUMMA_PROD_BN) as SUMMA_PROD_BN,
 SUM(SUMMA_PROD_NDS) as SUMMA_PROD_NDS,
 SUM(SUMMA_PROD) as SUMMA_PROD,
 SUM(SUMMA_AGEN) as SUMMA_AGEN,
 SUM(SUMMA_AGEN_NDS) as SUMMA_AGEN_NDS,
 SUM(SUMMA_VOZN_BN) as SUMMA_VOZN_BN,
 SUM(SUMMA_TARIF) as SUMMA_TARIF,
 SUM(SUMMA_TARIF_NDS) as SUMMA_TARIF_NDS,
 SUM(SUMMA_OHRANA) as SUMMA_OHRANA,
 SUM(SUMMA_OHRANA_NDS) as SUMMA_OHRANA_NDS,
 SUM(TARIF_MPS) as TARIF_MPS,
 SUM(TARIF_KVIT) as TARIF_KVIT,
 SUM(SUMMA_RAZN_BN) as SUMMA_RAZN_BN,
 MAX(NACENKA) as NACENKA,
 SUM(SUMMA_STRAH) as SUMMA_STRAH,
 SUM(SUMMA_DOK) as SUMMA_DOK,
 SUM(SUMMA_DOK_NDS) as SUMMA_DOK_NDS,
 NUM_STRAH,
 MAX(DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES,0),0,0,ROUND(SUMMA_VOZN_BN/VES,0))),USL_SUM)) as USL_SUM,
 VAGOWN_TYP_ID,
 VID_USL_ID
FROM MASTER.V_PRIL_CIST_ALL_BEFORE
GROUP BY
 BEG_DATE,
 END_DATE,
 MON_KVIT,
 NUM_5_DAY,
 IS_KORR,
 IS_AGENT,
 PLAT_ID,
 PLAT_NAME,
 DOG_ID,
 DOG_NUMBER,
 DOG_DATE,
 DATE_KVIT,
 DATE_MOS,
 NOM_DOK,
 ORIG_NOM_SF,
 OLD_NOM_DOK,
 OLD_NOM_SF,
 DATE_VYP_SF,
 PROD_ID_NPR,
 PROD_NAME,
 PROD_EDIZ,
 KVIT_ID,
 NUM_KVIT,
 NUM_CIST,
 NUM_STRAH,
 VAGOWN_TYP_ID,
 VID_USL_ID
--HAVING SUM(SUMMA_DOK)<>0
;


--
-- V_RASCH_VOZN  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_RASCH_VOZN
(BEG_DATE, END_DATE, MON_KVIT, PLAT_NAME, VES, 
 SOBS_NAME, SUMMA_TARIF_BN, SUMMA_TARIF_NDS, SUMMA_TARIF, USL_SUM, 
 SUMMA_VOZN_BN, TARIF_MPS, SUMMA_RAZN_BN, SUMMA_AGEN_BN, SUMMA_AGEN_NDS, 
 SUMMA_AGEN)
AS 
SELECT
  BEG_DATE,
  END_DATE,
  MON_KVIT,
  PLAT_NAME,
  SUM(VES) as VES,
  SOBS_NAME,
  SUM(SUMMA_TARIF_BN) as SUMMA_TARIF_BN,    
  SUM(SUMMA_TARIF_NDS) as SUMMA_TARIF_NDS,    
  SUM(SUMMA_TARIF) as SUMMA_TARIF,    
  MAX(USL_SUM) as USL_SUM,
  SUM(SUMMA_VOZN_BN) as SUMMA_VOZN_BN,
  SUM(CASE
        WHEN SUMMA_RAZN_BN<>0 THEN TARIF_MPS
       ELSE 0
  END) as TARIF_MPS, 
  SUM(SUMMA_RAZN_BN) as SUMMA_RAZN_BN,
  SUM(SUMMA_AGEN_BN) as SUMMA_AGEN_BN,
  SUM(SUMMA_AGEN_NDS) as SUMMA_AGEN_NDS,
  SUM(SUMMA_AGEN) as SUMMA_AGEN
FROM
(
SELECT
  BEG_DATE,
  END_DATE,
  (CASE 
    WHEN MON_KVIT=BEG_DATE THEN MON_KVIT
 ELSE TRUNC(BEG_DATE-1,'MONTH')
   END) as MON_KVIT,
  PLAT_NAME,
  NOM_DOK,
  KVIT_ID,
  MAX(VES) as VES,
  MAX(CASE
     WHEN VAGOWN_TYP_ID=2 THEN 'Собст.'
     WHEN VAGOWN_TYP_ID=1 THEN 'Аренд.'
     ELSE 'ОАО "РЖД"'
   END) as SOBS_NAME,
  SUM(SUMMA_TARIF-SUMMA_TARIF_NDS+SUMMA_OHRANA-SUMMA_OHRANA_NDS) as SUMMA_TARIF_BN,    
  SUM(SUMMA_TARIF_NDS+SUMMA_OHRANA_NDS) as SUMMA_TARIF_NDS,    
  SUM(SUMMA_TARIF+SUMMA_OHRANA) as SUMMA_TARIF,    
  MAX(DECODE(SUMMA_VOZN_11_BN,0,DECODE(SUMMA_VOZN_12_BN,0,0,DECODE(NVL(VES,0),0,0,ROUND(SUMMA_VOZN_BN/VES,0))),USL_SUM)) as USL_SUM,
  SUM(SUMMA_VOZN_BN) as SUMMA_VOZN_BN,
  SUM(CASE
        WHEN SUMMA_RAZN_BN<>0 THEN TARIF_MPS
       ELSE 0
  END) as TARIF_MPS, 
  SUM(SUMMA_RAZN_BN) as SUMMA_RAZN_BN,
  SUM(SUMMA_AGEN-SUMMA_AGEN_NDS) as SUMMA_AGEN_BN,
  SUM(SUMMA_AGEN_NDS) as SUMMA_AGEN_NDS,
  SUM(SUMMA_AGEN) as SUMMA_AGEN
FROM V_RASCH_VOZN_BEFORE
GROUP BY
 BEG_DATE,
 END_DATE,
 (CASE 
    WHEN MON_KVIT=BEG_DATE THEN MON_KVIT
 ELSE TRUNC(BEG_DATE-1,'MONTH')
   END),
 PLAT_NAME,
 NOM_DOK,
 KVIT_ID
)
GROUP BY
  BEG_DATE,
  END_DATE,
  MON_KVIT,
  PLAT_NAME,
  SOBS_NAME
HAVING SUM(SUMMA_TARIF)>0 OR  SUM(SUMMA_AGEN)>0  
ORDER BY MON_KVIT,SOBS_NAME,PLAT_NAME;


--
-- V_UNP_BUDJET_NPR_NEW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_BUDJET_NPR_NEW
(BEGIN_DATE, END_DATE, GROUP_ORDER, GROUP_NAME, PLAT_NAME, 
 BEGIN_DEB, BEGIN_DEB_PROSR, BEGIN_DEB_CUR, BEGIN_DEB_NEXT, BEGIN_KRED, 
 SUMMA_DOK_CUR, SUMMA_DOK_NEXT, SUMMA_PAYED, SUMMA_TOPAY, END_DEB, 
 END_DEB_PROSR, END_DEB_CUR, END_KRED)
AS 
SELECT /*+ RULE */
  a.begin_date,
  a.end_date,
  a.GROUP_ORDER,
  a.GROUP_NAME,
  a.PLAT_NAME,
  NVL(SUM(A.begin_deb),0) AS begin_deb, -- Задолженность в предыдущем периоде
  NVL(SUM(A.begin_deb_prosr),0) AS begin_deb_prosr, -- Просрочена задолженность в предыдущем периоде
  NVL(SUM(A.begin_deb_cur),0) AS begin_deb_cur, -- Задолженность прошлого периода к погашению в текущем
  NVL(SUM(A.begin_deb_next),0) AS begin_deb_next, -- Задолженность прошлого периода к погашению в текущем
  NVL(SUM(A.begin_kred),0) AS begin_kred, -- Кредиторка в предыдущем периоде
  NVL(SUM(A.summa_dok_cur),0) AS summa_dok_cur, -- Отгружено в текущем периоде, к погашению в текущем периоде
  NVL(SUM(A.summa_dok_next),0) AS summa_dok_next, -- Отгружено в текущем периоде, к погашению в следующем периоде
  NVL(SUM(A.summa_payed),0) AS summa_payed, -- Оплачено в текущем периоде
  NVL(SUM(A.summa_topay),0) AS summa_topay, -- Не разнесены оплаты в текущем периоде
  NVL(SUM(A.end_deb),0) AS end_deb, -- Задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_deb_prosr),0) AS end_deb_prosr, -- Просрочена задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_deb_cur),0) AS end_deb_cur, -- Текущая задолженность на конец текущего периода (для ПРОВЕРКИ)
  NVL(SUM(A.end_kred),0) AS end_kred -- Кредиторка на конец текущего периода (для ПРОВЕРКИ)
FROM
(
SELECT * FROM V_UNP_BUDJET_NPR_FACT
UNION ALL
SELECT * FROM V_UNP_BUDJET_NPR_PLAN
) a
GROUP BY
  a.begin_date,
  a.end_date,
  a.GROUP_ORDER,
  a.GROUP_NAME,
  a.PLAT_NAME;


--
-- V_UNP_GRAFIK_NEW  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_UNP_GRAFIK_NEW
(PROD_NAME, BEGIN_DATE, END_DATE, PREDPR_NAME, DOG_NUMBER, 
 DOG_ID, KOL_DN, DATE_PLAT, SUMMA_PRED, SUMMA_PLAN, 
 SUMMA_FACT)
AS 
SELECT
  KLS_PROD.LONG_NAME_NPR as PROD_NAME,
  r.BEGIN_DATE,
  LAST_DAY(r.END_DATE) as END_DATE,
  KLS_PREDPR.SF_NAME as  PREDPR_NAME,
  a.DOG_NUMBER,
  a.DOG_ID,
  GET_KOL_DN(a.DOG_ID,r.BEGIN_DATE,r.END_DATE,r.PROD_ID_NPR) as KOL_DN,
  a.DATE_PLAT,
  a.SUMMA_PRED,
  a.SUMMA_PLAN,
  a.SUMMA_FACT
FROM
  (
    SELECT
	  KLS_DOG.PREDPR_ID,
	  KLS_DOG.DOG_NUMBER,
	  a.DOG_ID,
	  DATE_PLAT,
	  SUM(SUMMA_PRED) as SUMMA_PRED,
	  SUM(SUMMA_PLAN) as SUMMA_PLAN,
	  SUM(SUMMA_FACT) as SUMMA_FACT
	FROM
      (
	   -- Просроченная задолженность 
       SELECT
         plan.DOG_ID,
         plan.DATE_PLAT as DATE_PLAT,
         0 as SUMMA_PRED,
         plan.SUMMA_PLAT as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PROSR plan
       --
       UNION ALL
	   -- Предъявлено
       SELECT
         sf.DOG_ID,
         sf.DATE_PRED as DATE_PLAT,
         sf.SUMMA_PRED as SUMMA_PRED,
         0 as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PRED_SF sf
	   --
       UNION ALL
       -- Планируемая отгрузка
       SELECT
         sf.DOG_ID,
         sf.DATE_PRED as DATE_PLAT,
         sf.SUMMA_PRED as SUMMA_PRED,
         0 as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PLAN_SF sf
	   --
       UNION ALL
       -- Планируемая оплата планируемой отгрузки
       SELECT
         sf.DOG_ID,
         sf.DATE_PRED+sf.KOL_DN as DATE_PLAT,
         0 as SUMMA_PRED,
         sf.SUMMA_PRED as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PLAN_SF sf
	   --
       UNION ALL
       -- Планируется оплата
       SELECT
         plan.DOG_ID,
         plan.DATE_PLAT as DATE_PLAT,
         0 as SUMMA_PRED,
         plan.SUMMA_PLAT as SUMMA_PLAN,
         0 as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_PLAN_PAY plan
       --
       UNION ALL
       -- Оплачено
       SELECT
         fact.DOG_ID,
         fact.DATE_PLAT as DATE_PLAT,
         0 as SUMMA_PRED,
         0 as SUMMA_PLAN,
         fact.SUMMA_PLAT as SUMMA_FACT
       FROM MASTER.V_UNP_GRAFIK_FACT_PAY fact
      ) a, KLS_DOG
	WHERE a.DOG_ID=KLS_DOG.ID
	  AND kls_dog.AGENT_ID in (8,4175)
	GROUP BY
	  KLS_DOG.PREDPR_ID,
	  KLS_DOG.DOG_NUMBER,
	  a.DOG_ID,
	  DATE_PLAT
	) a,V_TEMP_UNP_GARFIK_PARAMS r,KLS_PROD,KLS_PREDPR
WHERE r.GRP_ID_NPR=KLS_PROD.ID_NPR(+)
  AND a.PREDPR_ID=KLS_PREDPR.ID
ORDER BY
  KLS_PREDPR.SF_NAME,
  a.DOG_NUMBER,
  a.DOG_ID,
  a.DATE_PLAT;


--
-- FOR_CRYSTAL  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_Crystal AS

TYPE CURSTYPE IS REF CURSOR;

PROCEDURE CRYSTAL_SVED_GD(ASVEDNUM VARCHAR2, ANOMZD VARCHAR2,
  CRS IN OUT CURSTYPE);
PROCEDURE CRYSTAL_SVED_SAM(ASVEDNUM VARCHAR2, ANOMZD VARCHAR2,
  CRS IN OUT CURSTYPE);
PROCEDURE CRYSTAL_PASP(APASP_ID VARCHAR2, AMESTO_ID NUMBER,
  CRS IN OUT CURSTYPE);

PROCEDURE CR_DISP_COMMON(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_ROSINSP(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);
  
PROCEDURE CR_lukoma(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_FIN_PRED(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_DOG VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  CAT_CEN VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);
  
PROCEDURE CR_ISP_ZD(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_IVR_REP(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_LIST_ZAD_IN_NAR(ANARIAD_ID NUMBER,
  CRS IN OUT CURSTYPE);

PROCEDURE CR_KTU_UNP(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_NPR_CEN(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_SF_PRINT(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,DOG_ID VARCHAR2,
  NUM_SF1 VARCHAR2,NUM_SF2 VARCHAR2,
  CRS IN OUT CURSTYPE);

PROCEDURE CR_REZ_REPORT(DATE_BEG VARCHAR2,
  CRS IN OUT CURSTYPE);

PROCEDURE CR_CHECK_PRICES(ACAT_CEN VARCHAR2,
  CRS IN OUT CURSTYPE);

PROCEDURE CR_CHECK_SNP_SF(ACAT_CEN VARCHAR2,
  CRS IN OUT CURSTYPE);

PROCEDURE CR_GKH(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);
  
PROCEDURE CR_REG_POL(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, REGION_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_REGIONS(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, REGION_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_REG_14(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_REG_148(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_REG_1489(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);

PROCEDURE CR_REG_ALL(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE);
  
PROCEDURE CR_PLOTNOST(DATE_BEG VARCHAR2, DATE_END VARCHAR2, 
  CRS IN OUT CURSTYPE);

PROCEDURE CR_R3_BILLS(DATE_BEG VARCHAR2, DATE_END VARCHAR2, 
  IS_AGENT VARCHAR2, CRS IN OUT CURSTYPE);
  
END;

/

--
-- FOR_SAIO  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_SAIO AS

TYPE CURSTYPE IS REF CURSOR;

PROCEDURE LORP_LOAD_BILL(ADATE_BEG VARCHAR2, ADATE_END VARCHAR2);
PROCEDURE LORP_DEL_BILL(ADATE_BEG VARCHAR2, ADATE_END VARCHAR2);
PROCEDURE ADD_VOZN(ADATE_BEG DATE, ADATE_END DATE, ADBCODE NUMBER);

END;

/

--
-- FOR_CRYSTAL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Crystal AS

PROCEDURE CRYSTAL_PASP(APASP_ID VARCHAR2, AMESTO_ID NUMBER,
  CRS IN OUT CURSTYPE) IS
--- Печать паспорта (PSV) 23.01.2002г.
BEGIN
  OPEN CRS FOR
  SELECT
    P.SORTBY,
    P.PASP_ID,
    P.PROD_ID_NPR,
    P.PASP_NUM,
    P.REZ_NUM,
    P.PASP_DATE,
    KLS_PROD.LONG_NAME_NPR,
    KLS_PROD.GOST_NPR,
    P.KODIF_ID,
    P.NAME,
    P.NORMTU,
    V.QUAL
  FROM
  (SELECT 0 AS SORTBY, KLS_PASP.ID AS PASP_ID, KLS_PASP.PROD_ID_NPR, KLS_PASP.PASP_NUM, KLS_PASP.REZ_NUM, KLS_PASP.PASP_DATE,
          1 AS KODIF_ID, 'Плотность при 20 oC, г/см3' AS NAME, 'не норм' AS NORMTU
     FROM KLS_PASP WHERE KLS_PASP.MESTO_ID=AMESTO_ID AND KLS_PASP.ID=APASP_ID
   UNION ALL
   SELECT KLS_TABLPOK.SORTBY, KLS_PASP.ID AS PASP_ID, KLS_PASP.PROD_ID_NPR, KLS_PASP.PASP_NUM, KLS_PASP.REZ_NUM, KLS_PASP.PASP_DATE,
          KLS_TABLPOK.KODIF_ID, KLS_KODIF.NAME, KLS_TABLPOK.NORMTU
     FROM KLS_PASP, KLS_TABLPOK, KLS_KODIF
    WHERE KLS_PASP.PROD_ID_NPR=KLS_TABLPOK.PROD_ID_NPR AND KLS_TABLPOK.KODIF_ID=KLS_KODIF.ID AND
	      KLS_PASP.MESTO_ID=AMESTO_ID AND KLS_PASP.ID=APASP_ID) P, KLS_VALPASP V, KLS_PROD
  WHERE P.PASP_ID=V.PASP_ID(+) AND
	  P.KODIF_ID=V.KODIF_ID(+) AND
	  P.PROD_ID_NPR = KLS_PROD.ID_NPR
  ORDER BY P.SORTBY;
END;

PROCEDURE CRYSTAL_SVED_GD(ASVEDNUM VARCHAR2, ANOMZD VARCHAR2,
  CRS IN OUT CURSTYPE) IS
--- Печать ЖД сведения (PSV) 21.01.2002г.
BEGIN
  OPEN CRS FOR
   SELECT /*+ ordered use_nl(KVIT,MONTH,SVED,V_SVED_VALPASP,KLS_DOVER,KLS_NARIAD,KLS_PASP,KLS_TEX_PD, 
	     otpr,pererab,KLS_DOG,plat,poluch,potreb,sobstv,
		 V_STAN_PREDPR,KLS_GDOR,
	     KLS_VAGOWNER,KLS_PROD,KLS_MESTO) */
	  MONTH.DATE_PLAN,
	  MONTH.NAZN_OTG_ID,
	  KVIT.sved_num,
	  KLS_MESTO.MESTO_SVEDNAME,
	  KVIT.DATE_OTGR AS SVED_DATE,
	  pererab.PREDPR_NAME AS pererab_name,
	  KVIT.NOM_ZD,
	  KLS_DOG.DOG_NUMBER,
	  KLS_DOG.DOG_DATE,
	  plat.PREDPR_NAME AS plat_name,
	  sobstv.PREDPR_NAME AS sobstv_name,
	  KLS_TEX_PD.TEX_PD_NAME,
	  otpr.PREDPR_NAME AS otpr_name,
	  KLS_PROD.LONG_NAME_NPR,
	  poluch.PREDPR_NAME AS poluch_name,
	  V_STAN_PREDPR.PREDPR_GDKOD AS poluch_gdkod,
	  KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME || ' Ж.Д.' AS stan_name,
	  KLS_STAN.STAN_KOD AS stan_gdkod,
	  MONTH.GR4,
	  MONTH.PRIM,
	  SVED.GOTOV_TIME,
	  SVED.BEG_NALIV_TIME,
	  SVED.END_NALIV_TIME,
	  SVED.DATE_OFORML,
	  KVIT.PASP_ID,
	  KLS_PASP.REZ_NUM,
	  KLS_PASP.PASP_NUM,
	  V_SVED_VALPASP.P_SER,
	  V_SVED_VALPASP.P_VOD,
	  V_SVED_VALPASP.T_VSP,
	  V_SVED_VALPASP.U_VES,
	  KVIT.NUM_CIST,
	  KVIT.KALIBR_ID,
	  KVIT.VZLIV,
	  KVIT.TEMPER,
	  KVIT.FAKT_PL,
	  KVIT.NUM_KVIT,
	  KVIT.PLOMBA1,
	  KVIT.PLOMBA2,
      KVIT.VES,
	  KVIT.VES_CIST,
	  KVIT.VES_BRUTTO,
	  KVIT.ROSINSPL1,
	  KVIT.ROSINSPL2,
	  KLS_VAGOWNER.SHORT_NAME AS vag_owner
	FROM KVIT,MONTH,SVED,V_SVED_VALPASP,KLS_DOVER,KLS_NARIAD,KLS_PASP,KLS_TEX_PD, 
	     KLS_PREDPR otpr,KLS_PREDPR pererab,
		 KLS_DOG,KLS_PREDPR plat,
         KLS_PREDPR poluch,KLS_PREDPR potreb,KLS_PREDPR sobstv,
		 V_STAN_PREDPR,KLS_STAN,KLS_GDOR,
	     KLS_VAGOWNER,KLS_PROD,KLS_MESTO
	WHERE
	  (KVIT.sved_num=TO_NUMBER(ASVEDNUM)) AND
	  (KVIT.nom_zd=ANOMZD) AND
	  (KVIT.NOM_ZD=MONTH.NOM_ZD) AND
	  (KVIT.SVED_ID=SVED.ID(+)) AND
	  (SVED.ID=V_SVED_VALPASP.SVED_ID(+)) AND
	  (KLS_NARIAD.ID(+)=SVED.NARIAD_ID) AND
	  (KLS_DOVER.ID(+)=KLS_NARIAD.DOVER_ID) AND
	  (KVIT.PASP_ID=KLS_PASP.ID(+)) AND
	  (KVIT.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (KVIT.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KLS_TEX_PD.GROTP_ID=otpr.ID) AND
	  (KVIT.PERER_ID=pererab.ID(+)) AND
	  (MONTH.DOG_ID=KLS_DOG.ID) AND
	  (KLS_DOG.PREDPR_ID=plat.ID) AND
	  (sobstv.ID=MONTH.NPR_SOBSTV_ID) AND
	  (poluch.ID=MONTH.POLUCH_ID) AND
	  (potreb.ID=MONTH.POTREB_ID) AND
	  (KLS_STAN.ID=MONTH.STAN_ID) AND
	  (KLS_STAN.GDOR_ID=KLS_GDOR.ID) AND
	  (MONTH.POLUCH_ID=V_STAN_PREDPR.PREDPR_ID(+) AND MONTH.STAN_ID=V_STAN_PREDPR.STAN_ID(+)) AND
	  (KLS_MESTO.ID=KVIT.MESTO_ID) AND
	  (KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID) AND
	  (KLS_PROD.ID_NPR=KVIT.PROD_ID_NPR) AND
	  (MONTH.LOAD_ABBR<>'САМ');
END;

PROCEDURE CRYSTAL_SVED_SAM(ASVEDNUM VARCHAR2, ANOMZD VARCHAR2,
  CRS IN OUT CURSTYPE) IS
--- Печать сведения Автоналива (PSV) 21.01.2002г.
BEGIN
  OPEN CRS FOR
   SELECT /*+ ordered use_nl(KVIT,MONTH,poluch,plat,potreb,sobstv,pererab,otpr,
	     KLS_PROD,KLS_DOG,SVED,KLS_TEX_PD,KLS_PASP,V_SVED_VALPASP,KLS_MESTO,KLS_DOVER,KLS_NARIAD) */
	  MONTH.DATE_PLAN,
	  MONTH.NAZN_OTG_ID,
	  KVIT.sved_num,
	  KLS_MESTO.MESTO_SVEDNAME,
	  KVIT.DATE_OTGR AS SVED_DATE,
	  pererab.PREDPR_NAME AS pererab_name,
	  KVIT.NOM_ZD,
	  KLS_DOG.DOG_NUMBER,
	  KLS_DOG.DOG_DATE,
	  plat.PREDPR_NAME AS plat_name,
	  sobstv.PREDPR_NAME AS sobstv_name,
	  KLS_TEX_PD.TEX_PD_NAME,
	  otpr.PREDPR_NAME AS otpr_name,
	  KLS_PROD.LONG_NAME_NPR,
	  poluch.PREDPR_NAME AS poluch_name,
	  potreb.PREDPR_NAME AS potreb_name,
	  '№ ' || KLS_DOVER.NUM_DOVER || ' от ' || TO_CHAR(KLS_DOVER.DATE_DOVER,'dd.mm.yyyy') || ' до ' || TO_CHAR(KLS_DOVER.DATE_END,'dd.mm.yyyy') AS dover,
	  MONTH.PRIM,
	  '№ ' || KLS_NARIAD.NUM_NAR || ' от ' || TO_CHAR(KLS_NARIAD.DATE_NAR,'dd.mm.yyyy') || ' до ' || TO_CHAR(KLS_NARIAD.DATE_END,'dd.mm.yyyy') AS nariad,
	  SVED.GOTOV_TIME,
	  SVED.BEG_NALIV_TIME,
	  SVED.END_NALIV_TIME,
	  SVED.DATE_OFORML,
	  KVIT.PASP_ID,
	  KLS_PASP.REZ_NUM,
	  KLS_PASP.PASP_NUM,
	  V_SVED_VALPASP.P_SER,
	  V_SVED_VALPASP.P_VOD,
	  V_SVED_VALPASP.T_VSP,
	  V_SVED_VALPASP.U_VES,
	  KVIT.NUM_CIST,
	  KVIT.VZLIV,
	  KVIT.TEMPER,
	  KVIT.FAKT_PL,
	  KVIT.NUM_KVIT,
	  KVIT.PLOMBA1,
	  KVIT.PLOMBA2,
      KVIT.VES,
	  KVIT.VES_CIST,
	  KVIT.VES_BRUTTO
	FROM KVIT,MONTH,SVED,V_SVED_VALPASP,KLS_DOVER,KLS_NARIAD,KLS_PASP,KLS_TEX_PD, 
	     KLS_PREDPR otpr,KLS_PREDPR pererab,
		 KLS_DOG,KLS_PREDPR plat,
         KLS_PREDPR poluch,KLS_PREDPR potreb,KLS_PREDPR sobstv,
	     KLS_PROD,KLS_MESTO
	WHERE
	  (KVIT.sved_num=TO_NUMBER(ASVEDNUM)) AND
	  (KVIT.nom_zd=ANOMZD) AND
	  (KVIT.NOM_ZD=MONTH.NOM_ZD) AND
	  (KVIT.SVED_ID=SVED.ID(+)) AND
	  (SVED.ID=V_SVED_VALPASP.SVED_ID(+)) AND
	  (KLS_NARIAD.ID(+)=SVED.NARIAD_ID) AND
	  (KLS_DOVER.ID(+)=KLS_NARIAD.DOVER_ID) AND
	  (KVIT.PASP_ID=KLS_PASP.ID(+)) AND
	  (KVIT.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (KVIT.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KLS_TEX_PD.GROTP_ID=otpr.ID) AND
	  (KVIT.PERER_ID=pererab.ID(+)) AND
	  (MONTH.DOG_ID=KLS_DOG.ID) AND
	  (KLS_DOG.PREDPR_ID=plat.ID) AND
	  (sobstv.ID=MONTH.NPR_SOBSTV_ID) AND
	  (poluch.ID=MONTH.POLUCH_ID) AND
	  (potreb.ID=MONTH.POTREB_ID) AND
	  (KLS_MESTO.ID=KVIT.MESTO_ID) AND
	  (KLS_PROD.ID_NPR=KVIT.PROD_ID_NPR) AND
	  (MONTH.LOAD_ABBR='САМ');

END;

PROCEDURE CR_DISP_COMMON(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2, 
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Общая выборка для отчетов диспетчера (VEV) 11.08.2001г.

DATE0_1 DATE;
DATE0_2 DATE;
DATE1_1 DATE;
DATE1_2 DATE;
DATE2_1 DATE;
DATE2_2 DATE;
no_hran NUMBER(1);
NUM_PLAT_ID NUMBER;
NUM_POLUCH_ID NUMBER;
NUM_STAN_ID NUMBER;
NUM_LOAD_TYPE_ID NUMBER;
GROUP_NPR VARCHAR2(5);
NPR VARCHAR2(5);
NUM_NAZN_OTG_ID NUMBER;
NUM_TIP_DATE NUMBER;
NUM_OTPR_ID NUMBER;
NUM_TEX_PD_ID NUMBER;
NUM_SOBSTV_ID NUMBER;
CHR_SNP_OR_NOT VARCHAR2(3);
CHR_N_ZAD VARCHAR2(20);
INFO VARCHAR2(4000);
BEGIN
  IF SNP_OR_NOT IS NULL THEN
    CHR_SNP_OR_NOT:='LUK';
  ELSE
    CHR_SNP_OR_NOT:=SNP_OR_NOT;
  END IF;	
  
  IF N_ZAD IS NULL THEN
    CHR_N_ZAD:='%';
  ELSE
    CHR_N_ZAD:=N_ZAD;
  END IF;	

  IF plat_id<>'*' AND plat_id IS NOT NULL THEN
    NUM_PLAT_ID:=TO_NUMBER(plat_id);
  ELSE
    NUM_PLAT_ID:=NULL;
  END IF;

  IF poluch_id<>'*' AND poluch_id IS NOT NULL THEN
    NUM_POLUCH_ID:=TO_NUMBER(poluch_id);
  ELSE
    NUM_POLUCH_ID:=NULL;
  END IF;

  IF sobstv_id<>'*' AND sobstv_id IS NOT NULL THEN
    NUM_SOBSTV_ID:=TO_NUMBER(sobstv_id);
  ELSE
    NUM_SOBSTV_ID:=NULL;
  END IF;

  IF stan_id<>'*' AND stan_id IS NOT NULL THEN
    NUM_stan_ID:=TO_NUMBER(stan_id);
  ELSE
    NUM_stan_ID:=NULL;
  END IF;

  IF group_npr_id<>'*' AND group_npr_id IS NOT NULL THEN
    group_npr:=group_npr_id;
  ELSE
    group_npr:=NULL;
  END IF;

  IF npr_id<>'*' AND npr_id IS NOT NULL THEN
    npr:=npr_id;
  ELSE
    npr:=NULL;
  END IF;

  IF load_type_id<>'*' AND load_type_id IS NOT NULL THEN
    num_load_type_id:=load_type_id;
  ELSE
    num_load_type_id:=NULL;
  END IF;

  IF nazn_otg_id<>'*' AND nazn_otg_id IS NOT NULL AND nazn_otg_id<>'-9' THEN
    num_nazn_otg_id:=nazn_otg_id;
  ELSE
    num_nazn_otg_id:=NULL;
  END IF;

  IF nazn_otg_id='-9' THEN
    no_hran:=1;
  ELSE
    no_hran:=0;
  END IF;
  
  IF tip_date IS NULL THEN
    num_tip_date:=0;
  ELSE	
    num_tip_date:=tip_date;
  END IF;	

  DATE0_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE0_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  
  IF num_tip_date=0 THEN
    DATE0_1:=TO_DATE(DATE_BEG,'dd.mm.yyyy hh24:mi');
    DATE0_2:=TO_DATE(DATE_END,'dd.mm.yyyy hh24:mi');
  ELSE	
    IF num_tip_date=1 THEN
      DATE1_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE1_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    ELSE
      DATE2_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE2_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    END IF;
  END IF;

  IF otpr_id<>'*' AND otpr_id IS NOT NULL THEN
    NUM_OTPR_ID:=TO_NUMBER(otpr_id);
  ELSE
    NUM_OTPR_ID:=NULL;
  END IF;

  IF tex_pd_id<>'*' AND tex_pd_id IS NOT NULL THEN
    NUM_TEX_PD_ID:=TO_NUMBER(tex_pd_id);
  ELSE
    NUM_TEX_PD_ID:=NULL;
  END IF;

  OPEN CRS FOR
    SELECT /*+ ordered */
	  KVIT.sved_num,
	  KLS_PROD.NAME_NPR,
	  KLS_DOG.DOG_NUMBER,
	  plat.PREDPR_NAME AS plat_name,
	  poluch.PREDPR_NAME || ' ОКПО ' || RTRIM(poluch.OKPO) || ' Ж/Д КОД ' || RTRIM(poluch.GD_KOD)  AS poluch_name,
	  poluch.PREDPR_NAME AS short_poluch_name,
	  sobstv.PREDPR_NAME AS sobstv_name,
	  grotpr.PREDPR_NAME || ' ОКПО ' || RTRIM(grotpr.OKPO) || ' Ж/Д КОД ' || RTRIM(grotpr.GD_KOD) AS grotpr_name,
	  grotpr.PREDPR_NAME AS short_grotpr_name,
	  DECODE(SIGN(KLS_STAN.STAN_KOD-9999),1,TO_CHAR(KLS_STAN.STAN_KOD,'000000') || 
	       ' ' || KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME || ' Ж.Д.',KLS_STAN.STAN_NAME) AS stan_name,
	  KLS_TEX_PD.ID AS TEX_PD_ID,
	  KLS_TEX_PD.TEX_PD_NAME,
	  KVIT.NUM_CIST,
	  KVIT.VES_BRUTTO,
	  KVIT.VZLIV,
	  KVIT.VES_CIST,
	  KVIT.TEMPER,
	  KVIT.KALIBR_ID,
	  KVIT.FAKT_PL,
	  KVIT.NOM_ZD,
	  KVIT.NUM_KVIT,
	  KVIT.PLOMBA1,
	  KVIT.PLOMBA2,
	  KVIT.ROSINSPL1,
	  KVIT.ROSINSPL2,
	  MONTH.NAZN_OTG_ID,
	  MONTH.DATE_PLAN,
	  MONTH.TONN_DECLARED,
	  MONTH.TONN_LOADED,
	  MONTH.GR4,
	  SVED.GOTOV_TIME,
	  SVED.BEG_NALIV_TIME,
	  SVED.END_NALIV_TIME,
	  KVIT.DATE_OFORML,
	  KVIT.DATE_OTGR AS SVED_DATE,
	  KLS_NAZN_OTG.NAZN_OTG_NAME,
	  NVL(DECODE(MONTH.NAZN_OTG_ID,5,'Экспорт'),'Россия') AS export,
	  KVIT.NUM_MILITARY,
	  NVL(USL_DOG.CAT_CEN_ID,0) AS CAT_CEN_ID,
	  MONTH.DATE_CEN, 
	  MONTH.CENA,
	  MONTH.CENA_OTP,
	  ROUND(MONTH.CENA * KVIT.VES_BRUTTO,2) AS SUMMA_BN,
	  ROUND(ROUND(MONTH.CENA * KVIT.VES_BRUTTO,2)*FOR_BILLS.GetNDSValue(kvit.DATE_KVIT),2) AS SUMMA_NDS,
	  ROUND(MONTH.CENA * KVIT.VES_BRUTTO,2)+ROUND(ROUND(MONTH.CENA * KVIT.VES_BRUTTO,2)*FOR_BILLS.GetNDSValue(kvit.DATE_KVIT),2) AS SUMMA_PROD,
	  MONTH.LOAD_ABBR,
	  KVIT.ID,
	  Rusmonth(MONTH.DATE_PLAN) AS MON_PLAN,
	  KVIT.UPAK_VES
	FROM KVIT,/*V_USER_MONTH_UNP */MONTH,KLS_PROD,KLS_PREDPR plat,KLS_PREDPR poluch,KLS_PREDPR sobstv,
	     KLS_DOG,KLS_STAN,KLS_GDOR,SVED,KLS_TEX_PD,KLS_VID_OTGR,KLS_NAZN_OTG, KLS_PREDPR grotpr,
		 USL_DOG
	WHERE
	  (MONTH.nom_zd=KVIT.nom_zd) AND
	  (plat.ID=KLS_DOG.PREDPR_ID) AND 
	  (
	    (KLS_DOG.ID=DECODE(CHR_SNP_OR_NOT,'SNP',MONTH.NPODOG_ID,MONTH.DOG_ID)) OR
	    (NVL(MONTH.npodog_id,0)=0 AND CHR_SNP_OR_NOT='SNP' AND KLS_DOG.ID=MONTH.dog_id AND KLS_DOG.IS_AGENT IN (0,2,3)) 
	  ) AND
	  (KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR) AND
	  (MONTH.poluch_id=poluch.ID) AND
	  (MONTH.DOG_ID=USL_DOG.DOG_ID (+)) AND
	  (MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)) AND
	  (MONTH.stan_id=KLS_STAN.ID) AND
	  (sobstv.ID=MONTH.NPR_SOBSTV_ID) AND
	  (KLS_STAN.GDOR_ID=KLS_GDOR.ID) AND
	  (MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR) AND
	  (KVIT.SVED_ID=SVED.ID(+)) AND
	  (KVIT.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (KVIT.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KLS_TEX_PD.GROTP_ID=grotpr.ID) AND
	  (MONTH.NAZN_OTG_ID=KLS_NAZN_OTG.ID) AND
	  ((KVIT.DATE_OFORML>=date0_1 AND KVIT.DATE_OFORML<date0_2) OR
 	   (KVIT.DATE_OTGR>(date1_1-1) AND KVIT.DATE_OTGR<(date1_2+1)) OR
 	   (KVIT.DATE_KVIT>(date2_1-1) AND KVIT.DATE_KVIT<(date2_2+1))) AND
	  (plat.ID=NVL(num_plat_id,plat.ID)) AND
	  (poluch.ID=NVL(num_poluch_id,poluch.ID)) AND
	  (grotpr.ID=NVL(num_otpr_id,grotpr.ID)) AND
	  (sobstv.ID=NVL(num_sobstv_id,sobstv.ID)) AND
	  (KLS_TEX_PD.ID=NVL(num_tex_pd_id,KLS_TEX_PD.ID)) AND
	  (KLS_STAN.ID=NVL(num_stan_id,KLS_STAN.ID)) AND
	  (KLS_VID_OTGR.LOAD_TYPE_ID=NVL(num_load_type_id,KLS_VID_OTGR.LOAD_TYPE_ID)) AND
	  (KLS_NAZN_OTG.ID=NVL(num_nazn_otg_id,KLS_NAZN_OTG.ID)) AND
	  (KLS_NAZN_OTG.ID<>DECODE(no_hran,1,9,0)) AND	  
	  (KVIT.NOM_ZD LIKE CHR_N_ZAD) AND
	  (KLS_PROD.ID_GROUP_NPR=NVL(group_npr,KLS_PROD.ID_GROUP_NPR)) AND
	  (KLS_PROD.ID_NPR=NVL(npr,KLS_PROD.ID_NPR));
END;

PROCEDURE CR_ROSINSP(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2, 
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Общая выборка для отчетов диспетчера (VEV) 11.08.2001г.

ADATE_END VARCHAR2(100);
ATIP_DATE VARCHAR2(100);
BEGIN
  IF tip_date='0' THEN
    ADATE_END:=TO_CHAR(TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy')-1,'dd.mm.yyyy');
	Atip_date:='1';
  END IF;
  	
  CR_DISP_COMMON(DATE_BEG, ADATE_END,
       PLAT_ID,POLUCH_ID,
       STAN_ID,'1',
       GROUP_NPR_ID,NPR_ID,
       N_ZAD, NAZN_OTG_ID, 
       ATIP_DATE,SNP_OR_NOT, 
       OTPR_ID, TEX_PD_ID, SOBSTV_ID, CRS);
END;

PROCEDURE CR_LUKOMA(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2, 
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Общая выборка для отчетов диспетчера (VEV) 11.08.2001г.

ADATE_END VARCHAR2(100);
ATIP_DATE VARCHAR2(100);
BEGIN
  IF tip_date='0' THEN
    ADATE_END:=TO_CHAR(TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy')-1,'dd.mm.yyyy');
	Atip_date:='1';
  END IF;
  	
  CR_DISP_COMMON(DATE_BEG, ADATE_END,
       PLAT_ID,POLUCH_ID,
       STAN_ID,load_type_id,
       GROUP_NPR_ID,NPR_ID,
       N_ZAD, '-9', 
       ATIP_DATE,SNP_OR_NOT, 
       OTPR_ID, TEX_PD_ID, SOBSTV_ID, CRS);
END;

PROCEDURE CR_FIN_PRED(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_DOG VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2, 
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  CAT_CEN VARCHAR2, SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Общая выборка для отчетов по предъявлению - суммарно (PSV) 17.12.2002г.

DATE0_1 DATE;
DATE0_2 DATE;
DATE1_1 DATE;
DATE1_2 DATE;
DATE2_1 DATE;
DATE2_2 DATE;
NUM_PLAT_ID NUMBER;
NUM_POLUCH_ID NUMBER;
NUM_STAN_ID NUMBER;
NUM_LOAD_TYPE_ID NUMBER;
GROUP_NPR VARCHAR2(5);
NPR VARCHAR2(5);
NUM_NAZN_OTG_ID NUMBER;
NUM_TIP_DATE NUMBER;
NUM_OTPR_ID NUMBER;
NUM_TEX_PD_ID NUMBER;
CHR_SNP_OR_NOT VARCHAR2(3);
CHR_N_DOG VARCHAR2(30);
NUM_CAT_CEN NUMBER;
NUM_SOBSTV_ID NUMBER;
BEGIN
  IF SNP_OR_NOT IS NULL THEN
    CHR_SNP_OR_NOT:='LUK';
  ELSE
    CHR_SNP_OR_NOT:=SNP_OR_NOT;
  END IF;	
  
  IF N_DOG IS NULL THEN
    CHR_N_DOG:='%';
  ELSE
    CHR_N_DOG:=N_DOG;
  END IF;	

  IF plat_id<>'*' AND plat_id IS NOT NULL THEN
    NUM_PLAT_ID:=TO_NUMBER(plat_id);
  ELSE
    NUM_PLAT_ID:=NULL;
  END IF;

  IF cat_cen<>'*' AND cat_cen IS NOT NULL THEN
    NUM_CAT_CEN:=TO_NUMBER(cat_cen);
  ELSE
    NUM_CAT_CEN:=NULL;
  END IF;

  IF poluch_id<>'*' AND poluch_id IS NOT NULL THEN
    NUM_POLUCH_ID:=TO_NUMBER(poluch_id);
  ELSE
    NUM_POLUCH_ID:=NULL;
  END IF;

  IF sobstv_id<>'*' AND sobstv_id IS NOT NULL THEN
    NUM_SOBSTV_ID:=TO_NUMBER(sobstv_id);
  ELSE
    NUM_SOBSTV_ID:=NULL;
  END IF;

  IF stan_id<>'*' AND stan_id IS NOT NULL THEN
    NUM_stan_ID:=TO_NUMBER(stan_id);
  ELSE
    NUM_stan_ID:=NULL;
  END IF;

  IF group_npr_id<>'*' AND group_npr_id IS NOT NULL THEN
    group_npr:=group_npr_id;
  ELSE
    group_npr:=NULL;
  END IF;

  IF npr_id<>'*' AND npr_id IS NOT NULL THEN
    npr:=npr_id;
  ELSE
    npr:=NULL;
  END IF;

  IF load_type_id<>'*' AND load_type_id IS NOT NULL THEN
    num_load_type_id:=load_type_id;
  ELSE
    num_load_type_id:=NULL;
  END IF;

  IF nazn_otg_id<>'*' AND nazn_otg_id IS NOT NULL THEN
    num_nazn_otg_id:=nazn_otg_id;
  ELSE
    num_nazn_otg_id:=NULL;
  END IF;
  
  IF tip_date IS NULL THEN
    num_tip_date:=0;
  ELSE	
    num_tip_date:=tip_date;
  END IF;	

  DATE0_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE0_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  
  IF num_tip_date=0 THEN
    DATE0_1:=TO_DATE(DATE_BEG,'dd.mm.yyyy');
    DATE0_2:=TO_DATE(DATE_END,'dd.mm.yyyy');
  ELSE	
    IF num_tip_date=1 THEN
      DATE1_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE1_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    ELSE
      DATE2_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE2_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    END IF;
  END IF;

  IF otpr_id<>'*' AND otpr_id IS NOT NULL THEN
    NUM_OTPR_ID:=TO_NUMBER(otpr_id);
  ELSE
    NUM_OTPR_ID:=NULL;
  END IF;

  IF tex_pd_id<>'*' AND tex_pd_id IS NOT NULL THEN
    NUM_TEX_PD_ID:=TO_NUMBER(tex_pd_id);
  ELSE
    NUM_TEX_PD_ID:=NULL;
  END IF;

  OPEN CRS FOR
    SELECT
	  A.NOM_SF,
	  A.OLD_NOM_SF,
	  A.NPO_SF,
	  A.DATE_KVIT,
	  A.KOL_DN,
	  A.DATE_MOS,
	  A.NUM_5_DAY,
	  A.DATE_VYP_SF,
	  A.DATE_BUXG,
	  KLS_PROD.SF_NAME AS NAME_NPR,
	  B.VES,
	  B.CENA_BN,
	  B.SUMMA_BN,
	  B.SUMMA_AKCIZ,
	  B.SUMMA_PROD_BN,
	  B.SUMMA_PROD_NDS,
	  B.CENA,
	  B.SUMMA_PROD,
	  B.TARIF_BN+B.TARIF_GUARD_BN as TARIF_BN,
	  B.TARIF_NDS+B.TARIF_GUARD_NDS as TARIF_NDS,
	  B.TARIF+B.TARIF_GUARD as TARIF,
	  B.VOZN11_BN+B.VOZN12_BN AS VOZN_BN,
	  B.VOZN11_NDS+B.VOZN12_NDS AS VOZN_NDS,
	  B.VOZN11+B.VOZN12 AS VOZN,
	  B.STRAH,
	  A.ORIG_SUMMA_DOK as SUMMA_DOK,
	  sobstv.PREDPR_NAME AS sobstv_name,
	  plat.PREDPR_NAME AS plat_name,
	  KLS_DOG.DOG_NUMBER,
	  LUK_DOG.DOG_NUMBER AS LUK_DOG_NUMBER,
	  poluch.PREDPR_NAME || ' ОКПО ' || RTRIM(poluch.OKPO) || ' Ж/Д КОД ' || RTRIM(poluch.GD_KOD)  AS poluch_name,
	  poluch.PREDPR_NAME AS short_poluch_name,
	  potreb.PREDPR_NAME || ' ОКПО ' || RTRIM(potreb.OKPO) || ' Ж/Д КОД ' || RTRIM(potreb.GD_KOD)  AS potreb_name,
	  potreb.PREDPR_NAME AS short_potreb_name,
	  grotpr.PREDPR_NAME || ' ОКПО ' || RTRIM(grotpr.OKPO) || ' Ж/Д КОД ' || RTRIM(grotpr.GD_KOD) AS grotpr_name,
	  grotpr.PREDPR_NAME AS short_grotpr_name,
	  DECODE(SIGN(KLS_STAN.STAN_KOD-9999),1,TO_CHAR(KLS_STAN.STAN_KOD,'000000') || 
	       ' ' || KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME || ' Ж.Д.',KLS_STAN.STAN_NAME) AS stan_name,
	  KLS_REGION.REGION_NAME,	   
	  KLS_TEX_PD.ID AS TEX_PD_ID,
	  KLS_TEX_PD.TEX_PD_NAME,
	  KLS_NAZN_OTG.NAZN_OTG_NAME,
	  NVL(USL_DOG.CAT_CEN_ID,0) AS CAT_CEN_ID,
	  MONTH.DATE_CEN, 
	  MONTH.CENA_OTP,
	  MONTH.LOAD_ABBR
    FROM V_BILLS A,V_BILL_POS_FLAT B,KLS_DOG_MAIN,
	  MONTH,KLS_PROD,KLS_PREDPR plat,KLS_PREDPR poluch,KLS_PREDPR potreb,KLS_PREDPR sobstv,KLS_GDOR,
	     KLS_DOG,KLS_DOG LUK_DOG,KLS_STAN,KLS_TEX_PD,KLS_VID_OTGR,KLS_NAZN_OTG,KLS_PREDPR grotpr,USL_DOG,KLS_REGION
	WHERE
	  (A.NOM_DOK=B.NOM_DOK) AND
	  (A.nom_zd=MONTH.nom_zd) AND 
      (KLS_DOG.ID=DECODE(CHR_SNP_OR_NOT,'SNP',A.SNP_DOG_ID,A.ORIG_DOG_ID)) AND 
	  (plat.ID=KLS_DOG.PREDPR_ID) AND 
	  (A.PROD_ID_NPR=KLS_PROD.ID_NPR) AND
	  (MONTH.poluch_id=poluch.ID) AND
	  (MONTH.potreb_id=potreb.ID) AND
	  (MONTH.DOG_ID=USL_DOG.DOG_ID (+)) AND
	  (MONTH.USL_NUMBER=USL_DOG.USL_NUMBER (+)) AND
	  (MONTH.stan_id=KLS_STAN.ID) AND
	  (MONTH.NPR_SOBSTV_ID=sobstv.ID) AND
	  (KLS_STAN.GDOR_ID=KLS_GDOR.ID) AND
	  (KLS_STAN.REGION_ID=KLS_REGION.ID) AND
	  (MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR) AND
	  (MONTH.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (MONTH.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KLS_TEX_PD.GROTP_ID=grotpr.ID) AND
	  (A.NAZN_OTG_ID=KLS_NAZN_OTG.ID) AND
	  ((A.DATE_VYP_SF>(date0_1-1) AND A.DATE_VYP_SF<(date0_2+1)) OR
 	   (A.DATE_KVIT>(date1_1-1) AND A.DATE_KVIT<(date1_2+1)) OR
 	   (A.DATE_BUXG>(date2_1-1) AND A.DATE_BUXG<(date2_2+1))) AND
	  (plat.ID=NVL(num_plat_id,plat.ID)) AND
	  (poluch.ID=NVL(num_poluch_id,poluch.ID)) AND
	  (grotpr.ID=NVL(num_otpr_id,grotpr.ID)) AND
	  (sobstv.ID=NVL(num_sobstv_id,sobstv.ID)) AND
	  (KLS_TEX_PD.ID=NVL(num_tex_pd_id,KLS_TEX_PD.ID)) AND
	  (KLS_STAN.ID=NVL(num_stan_id,KLS_STAN.ID)) AND
	  (KLS_VID_OTGR.LOAD_TYPE_ID=NVL(num_load_type_id,KLS_VID_OTGR.LOAD_TYPE_ID)) AND
	  (KLS_NAZN_OTG.ID=NVL(num_nazn_otg_id,KLS_NAZN_OTG.ID)) AND
	  (KLS_DOG.DOG_NUMBER LIKE CHR_N_DOG) AND
	  (NVL(USL_DOG.CAT_CEN_ID,0)=NVL(num_cat_cen,NVL(USL_DOG.CAT_CEN_ID,0))) AND
	  (KLS_PROD.ID_GROUP_NPR=NVL(group_npr,KLS_PROD.ID_GROUP_NPR)) AND
	  (KLS_PROD.ID_NPR=NVL(npr,KLS_PROD.ID_NPR))
      AND A.IS_AGENT=KLS_DOG_MAIN.IS_AGENT
      AND A.DATE_KVIT BETWEEN KLS_DOG_MAIN.FROM_DATE AND KLS_DOG_MAIN.TO_DATE
	  AND (KLS_DOG_MAIN.DOG_ID=LUK_DOG.ID(+));
END;

PROCEDURE CR_ISP_ZD(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2,
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Общая выборка для отчетов диспетчера (VEV) 27.08.2001г.

anom_zd VARCHAR2(30);

BEGIN

  IF n_zad='%' OR n_zad IS NULL THEN
    --- Иначе вылезут все заявки и это будет очень долго :( VEV
    anom_zd:='XXXX';
  ELSE
    anom_zd:=n_zad;
  END IF;
  OPEN CRS FOR
    SELECT
	  KVIT.sved_num,
	  KLS_PROD.NAME_NPR,
	  month_prod.NAME_NPR AS month_name_npr,
	  KLS_DOG.DOG_NUMBER,
	  plat.PREDPR_NAME AS plat_name,
	  poluch.PREDPR_NAME AS poluch_name,
	  sobstv.PREDPR_NAME AS sobstv_name,
	  KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME || ' Ж.Д.' AS stan_name,
	  KLS_TEX_PD.TEX_PD_NAME,
	  KVIT.NUM_CIST,
	  KVIT.VES_BRUTTO,
	  KVIT.VZLIV,
	  KVIT.VES_CIST,
	  KVIT.TEMPER,
	  KVIT.KALIBR_ID,
	  KVIT.FAKT_PL,
	  KVIT.NOM_ZD,
	  KVIT.NUM_KVIT,
	  KVIT.PLOMBA1,
	  KVIT.PLOMBA2,
	  KVIT.ROSINSPL1,
	  KVIT.ROSINSPL2,
	  MONTH.NAZN_OTG_ID,
	  MONTH.DATE_PLAN,
	  MONTH.TONN_DECLARED,
	  MONTH.TONN_LOADED,
	  MONTH.GR4,
	  SVED.GOTOV_TIME,
	  SVED.BEG_NALIV_TIME,
	  SVED.END_NALIV_TIME,
	  SVED.DATE_OFORML,
	  SVED.SVED_DATE
	FROM MONTH,KVIT,KLS_PROD,KLS_PREDPR plat,KLS_PREDPR poluch,KLS_PREDPR sobstv,
	     KLS_DOG,KLS_STAN,KLS_GDOR,SVED,KLS_TEX_PD,KLS_PROD month_prod
	WHERE
	  (MONTH.nom_zd=KVIT.nom_zd) AND
	  (plat.ID=KLS_DOG.PREDPR_ID) AND
	  (MONTH.DOG_ID=KLS_DOG.ID) AND
	  (MONTH.PROD_ID_NPR=month_prod.ID_NPR) AND
	  (KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR) AND
	  (MONTH.poluch_id=poluch.ID) AND
	  (MONTH.stan_id=KLS_STAN.ID) AND
	  (sobstv.ID=MONTH.NPR_SOBSTV_ID) AND
	  (KLS_STAN.GDOR_ID=KLS_GDOR.ID) AND
	  (KVIT.SVED_ID=SVED.ID(+)) AND
	  (KVIT.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (KVIT.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KVIT.NOM_ZD LIKE anom_zd);
END;

PROCEDURE CR_LIST_ZAD_IN_NAR(ANARIAD_ID NUMBER,
  CRS IN OUT CURSTYPE)
IS
--- Список заданий в наряде (PSV) 21.08.2001г.
BEGIN
  OPEN CRS FOR
    SELECT MONTH.NOM_ZD, KLS_PROD_NAR.ABBR_NPR AS NAR_SHORT
    FROM KLS_NAR_LINE, MONTH, KLS_PROD, KLS_PROD_NAR
    WHERE KLS_NAR_LINE.NOM_ZD=MONTH.NOM_ZD AND
               MONTH.PROD_ID_NPR=KLS_PROD.ID_NPR AND
			   KLS_PROD.PROD_NAR_ID=KLS_PROD_NAR.ID AND
               MONTH.DATE_PLAN>=TO_DATE('01.01.2001','dd.mm.yyyy') AND
               KLS_NAR_LINE.NARIAD_ID = ANARIAD_ID
    ORDER BY MONTH.NOM_ZD;
END;

PROCEDURE CR_IVR_REP(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2,
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE)
IS
--- Отчет по отгрузке для ЖД (VEV) 28.08.2001г.
d_plan DATE;
num_plat_id NUMBER;
BEGIN

  IF plat_id<>'*' AND plat_id IS NOT NULL THEN
    NUM_PLAT_ID:=TO_NUMBER(plat_id);
  ELSE
    NUM_PLAT_ID:=NULL;
  END IF;

  d_plan:=TRUNC(TO_DATE(DATE_END,'dd.mm.yyyy hh24:mi'),'mm');
  OPEN CRS FOR
SELECT
  prod_gr.NAME_NPR,
  0 AS PLAN_POST,
  KLS_DOG.DOG_NUMBER,
  KLS_PREDPR.PREDPR_NAME,
  KLS_PROD.ABBR_NPR,
  KLS_GDOR.short_name || ' Ж.Д.' AS GDOR_NAME,
  KLS_STAN.STAN_NAME,
  MAX(MONTH.TONN_DECLARED) AS tonn_declared,
  KVIT.NOM_ZD,
  MONTH.INPUT_DATE,
  SUM(KVIT.ves) AS ves,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'01',KVIT.ves),0)) AS d01,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'02',KVIT.ves),0)) AS d02,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'03',KVIT.ves),0)) AS d03,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'04',KVIT.ves),0)) AS d04,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'05',KVIT.ves),0)) AS d05,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'06',KVIT.ves),0)) AS d06,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'07',KVIT.ves),0)) AS d07,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'08',KVIT.ves),0)) AS d08,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'09',KVIT.ves),0)) AS d09,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'10',KVIT.ves),0)) AS d10,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'11',KVIT.ves),0)) AS d11,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'12',KVIT.ves),0)) AS d12,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'13',KVIT.ves),0)) AS d13,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'14',KVIT.ves),0)) AS d14,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'15',KVIT.ves),0)) AS d15,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'16',KVIT.ves),0)) AS d16,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'17',KVIT.ves),0)) AS d17,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'18',KVIT.ves),0)) AS d18,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'19',KVIT.ves),0)) AS d19,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'20',KVIT.ves),0)) AS d20,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'21',KVIT.ves),0)) AS d21,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'22',KVIT.ves),0)) AS d22,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'23',KVIT.ves),0)) AS d23,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'24',KVIT.ves),0)) AS d24,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'25',KVIT.ves),0)) AS d25,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'26',KVIT.ves),0)) AS d26,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'27',KVIT.ves),0)) AS d27,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'28',KVIT.ves),0)) AS d28,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'29',KVIT.ves),0)) AS d29,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'30',KVIT.ves),0)) AS d30,
  SUM(NVL(DECODE(TO_CHAR(Gd_Date(KVIT.date_oforml),'DD'),'31',KVIT.ves),0)) AS d31
  FROM KVIT,MONTH,KLS_DOG,KLS_PROD,KLS_PROD prod_gr,KLS_PREDPR,KLS_STAN,KLS_GDOR
  WHERE
    (KVIT.date_oforml<=TO_DATE(DATE_END,'dd.mm.yyyy hh24:mi')) AND
	(MONTH.DATE_PLAN=d_plan) AND
	(KVIT.NOM_ZD=MONTH.NOM_ZD) AND
	(MONTH.DOG_ID=KLS_DOG.ID) AND
	(KLS_PROD.ID_NPR=KVIT.prod_id_npr) AND
	(prod_gr.ID_NPR=KLS_PROD.id_group_npr) AND
	(KLS_PREDPR.ID=KLS_DOG.PREDPR_ID) AND
	(KLS_STAN.ID=MONTH.stan_id) AND
	(KLS_GDOR.ID=KLS_STAN.gdor_id) AND
	(KLS_DOG.PREDPR_ID=NVL(num_plat_id,KLS_DOG.PREDPR_ID))
  GROUP BY
    prod_gr.NAME_NPR,
    0,
    KLS_DOG.DOG_NUMBER,
    KLS_PREDPR.PREDPR_NAME,
    KLS_PROD.ABBR_NPR,
    KLS_GDOR.short_name || ' Ж.Д.',
    KLS_STAN.STAN_NAME,
    KVIT.NOM_ZD,
    0,
    MONTH.INPUT_DATE
  ORDER BY
    prod_gr.NAME_NPR,
    KLS_DOG.DOG_NUMBER,
    KLS_PREDPR.PREDPR_NAME,
    KLS_PROD.ABBR_NPR,
    KLS_GDOR.short_name || ' Ж.Д.',
    KLS_STAN.STAN_NAME,
    KVIT.NOM_ZD,
    MONTH.INPUT_DATE;
END;


PROCEDURE CR_KTU_UNP(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2,
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE)
IS
--- Сравнение нарядов и отгрузки (PSV) 22.11.2001г.
Y1 NUMBER;
Y2 NUMBER;
M1 NUMBER;
M2 NUMBER;
anom_zd VARCHAR2(30);
NUM_PLAT_ID NUMBER;
NPR VARCHAR2(5);

BEGIN
  Y1:=TO_NUMBER(SUBSTR(DATE_BEG,7,4));
  Y2:=TO_NUMBER(SUBSTR(DATE_END,7,4));
  M1:=TO_NUMBER(SUBSTR(DATE_BEG,4,2));
  M2:=TO_NUMBER(SUBSTR(DATE_END,4,2));

  IF plat_id<>'*' AND plat_id IS NOT NULL THEN
    NUM_PLAT_ID:=TO_NUMBER(plat_id);
  ELSE
    NUM_PLAT_ID:=NULL;
  END IF;
  IF npr_id<>'*' AND npr_id IS NOT NULL THEN
    npr:=npr_id;
  ELSE
    npr:=NULL;
  END IF;

  OPEN CRS FOR
    SELECT *
    FROM V_KTU_UNP_READY
    WHERE YY>=Y1 AND
          YY<=Y2 AND
          MM>=M1 AND
          MM<=M2 AND
	      (NOM_ZD_KTU LIKE N_ZAD OR
  		   NOM_ZD_UNP LIKE N_ZAD) AND
	      (KOD_PLAT=NVL(num_plat_id,KOD_PLAT)) AND
   	      (KOD_PROD=NVL(npr,KOD_PROD));
END;


PROCEDURE CR_NPR_CEN(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2,NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2,
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- выборка для отчетов по ценам (VEV) 17.12.2001г.
npr VARCHAR2(5);
group_npr VARCHAR2(5);
BEGIN
  IF npr_id<>'*' AND npr_id IS NOT NULL THEN
    npr:=npr_id;
  ELSE
    npr:=NULL;
  END IF;

  IF group_npr_id<>'*' AND group_npr_id IS NOT NULL THEN
    group_npr:=group_npr_id;
  ELSE
    group_npr:=NULL;
  END IF;

  OPEN CRS FOR
SELECT
  KLS_CAT_CEN.ID,
  LPAD(KLS_CAT_CEN.ID,4,' ') || ' (' || KLS_CAT_CEN.CAT_CEN_NAME || ')' AS CAT_CEN_NAME,
  NPR_PRICES.cena_otp,
  NPR_PRICES.end_date,
  KLS_PROD.LONG_NAME_NPR,
  NVL(KLS_PREDPR.SHORT_NAME,KLS_CAT_CEN.cat_cen_name)
  FROM NPR_PRICES, KLS_CAT_CEN, KLS_PREDPR, KLS_PROD
 WHERE      (NPR_PRICES.cat_cen_id = KLS_CAT_CEN.ID)
        AND (KLS_CAT_CEN.predpr_id = KLS_PREDPR.ID(+))
        AND (NPR_PRICES.end_date IS NULL)
        AND (NPR_PRICES.PROD_ID_NPR = NVL(NPR,NPR_PRICES.PROD_ID_NPR))
        AND (KLS_PROD.ID_GROUP_NPR = NVL(group_npr,KLS_PROD.ID_GROUP_NPR))
        AND (NPR_PRICES.PROD_ID_NPR = KLS_PROD.ID_NPR)
  ORDER BY LONG_NAME_NPR;
END;

PROCEDURE CR_REZ_REPORT(DATE_BEG VARCHAR2,
  CRS IN OUT CURSTYPE) IS
BEGIN
  OPEN CRS FOR
    SELECT
	  DECODE(KLS_PROD_PLAN.ID,90099,TO_NUMBER(KLS_PROD.ID_NPR),KLS_PROD_PLAN.ORDER_NPR) AS ORDER_NPR,
	  TO_CHAR(DECODE(KLS_PROD_PLAN.ID,90099,TO_NUMBER(KLS_PROD.ID_NPR),KLS_PROD_PLAN.ORDER_NPR),'0000') ||
	  KLS_PROD.NAME_NPR AS ORDER_NPR_CH,	  
	  KLS_PROD.NAME_NPR, 
	  KLS_PROD.LONG_NAME_NPR, 
	  ARC_REZ.* 
	FROM ARC_REZ,KLS_PROD,KLS_PROD_PLAN 
	WHERE KLS_PROD.ID_NPR=ARC_REZ.PROD_ID_NPR 
	  AND KLS_PROD.PROD_PLAN_ID=KLS_PROD_PLAN.ID
	  AND dateupload=TO_DATE(DATE_BEG,'dd.mm.yyyy hh24:mi:ss');
END;

PROCEDURE CR_SF_PRINT(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,DOG_ID VARCHAR2,
  NUM_SF1 VARCHAR2,NUM_SF2 VARCHAR2,
  CRS IN OUT CURSTYPE) IS
BEGIN
  OPEN CRS FOR
    SELECT * FROM V_SF_PRINT
	  WHERE TO_NUMBER(sf_no) BETWEEN TO_NUMBER(NUM_SF1) AND TO_NUMBER(NUM_SF2);
END;

PROCEDURE CR_CHECK_PRICES(ACAT_CEN VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
  OPEN CRS FOR
    SELECT * FROM V_CHECK_PRICES
	  WHERE CAT_CEN_ID=TO_NUMBER(ACAT_CEN);
  NULL;	  
END;

PROCEDURE CR_CHECK_SNP_SF(ACAT_CEN VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
/*  OPEN CRS FOR
    SELECT * FROM V_CHECK_SNP_SF
	  WHERE NPOCAT_CEN_ID=TO_NUMBER(ACAT_CEN);*/
  NULL;	  
END;

PROCEDURE CR_GKH(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2, 
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Отгрузка по госпрограмме ЖКН по договорам поставки

DATE0_1 DATE;
DATE0_2 DATE;
DATE1_1 DATE;
DATE1_2 DATE;
DATE2_1 DATE;
DATE2_2 DATE;
NUM_PLAT_ID NUMBER;
NUM_POLUCH_ID NUMBER;
NUM_STAN_ID NUMBER;
NUM_LOAD_TYPE_ID NUMBER;
GROUP_NPR VARCHAR2(5);
NPR VARCHAR2(5);
NUM_NAZN_OTG_ID NUMBER;
NUM_TIP_DATE NUMBER;
NUM_OTPR_ID NUMBER;
NUM_TEX_PD_ID NUMBER;
CHR_SNP_OR_NOT VARCHAR2(3);
CHR_N_ZAD VARCHAR2(20);
NUM_SOBSTV_ID NUMBER;
BEGIN
  IF SNP_OR_NOT IS NULL THEN
    CHR_SNP_OR_NOT:='LUK';
  ELSE
    CHR_SNP_OR_NOT:=SNP_OR_NOT;
  END IF;	
  
  IF N_ZAD IS NULL THEN
    CHR_N_ZAD:='%';
  ELSE
    CHR_N_ZAD:=N_ZAD;
  END IF;	

  IF plat_id<>'*' AND plat_id IS NOT NULL THEN
    NUM_PLAT_ID:=TO_NUMBER(plat_id);
  ELSE
    NUM_PLAT_ID:=NULL;
  END IF;

  IF poluch_id<>'*' AND poluch_id IS NOT NULL THEN
    NUM_POLUCH_ID:=TO_NUMBER(poluch_id);
  ELSE
    NUM_POLUCH_ID:=NULL;
  END IF;

  IF sobstv_id<>'*' AND sobstv_id IS NOT NULL THEN
    NUM_SOBSTV_ID:=TO_NUMBER(sobstv_id);
  ELSE
    NUM_SOBSTV_ID:=NULL;
  END IF;

  IF stan_id<>'*' AND stan_id IS NOT NULL THEN
    NUM_stan_ID:=TO_NUMBER(stan_id);
  ELSE
    NUM_stan_ID:=NULL;
  END IF;

  IF group_npr_id<>'*' AND group_npr_id IS NOT NULL THEN
    group_npr:=group_npr_id;
  ELSE
    group_npr:=NULL;
  END IF;

  IF npr_id<>'*' AND npr_id IS NOT NULL THEN
    npr:=npr_id;
  ELSE
    npr:=NULL;
  END IF;

  IF load_type_id<>'*' AND load_type_id IS NOT NULL THEN
    num_load_type_id:=load_type_id;
  ELSE
    num_load_type_id:=NULL;
  END IF;

  IF nazn_otg_id<>'*' AND nazn_otg_id IS NOT NULL THEN
    num_nazn_otg_id:=nazn_otg_id;
  ELSE
    num_nazn_otg_id:=NULL;
  END IF;
  
  IF tip_date IS NULL THEN
    num_tip_date:=0;
  ELSE	
    num_tip_date:=tip_date;
  END IF;	

  DATE0_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE0_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  
  IF num_tip_date=0 THEN
    DATE0_1:=TO_DATE(DATE_BEG,'dd.mm.yyyy hh24:mi');
    DATE0_2:=TO_DATE(DATE_END,'dd.mm.yyyy hh24:mi');
  ELSE	
    IF num_tip_date=1 THEN
      DATE1_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE1_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    ELSE
      DATE2_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE2_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    END IF;
  END IF;

  IF otpr_id<>'*' AND otpr_id IS NOT NULL THEN
    NUM_OTPR_ID:=TO_NUMBER(otpr_id);
  ELSE
    NUM_OTPR_ID:=NULL;
  END IF;

  IF tex_pd_id<>'*' AND tex_pd_id IS NOT NULL THEN
    NUM_TEX_PD_ID:=TO_NUMBER(tex_pd_id);
  ELSE
    NUM_TEX_PD_ID:=NULL;
  END IF;

  OPEN CRS FOR
    SELECT /*+ ordered use_nl(KVIT,MONTH,KLS_REGION,KLS_PREDPR PLAT,KLS_DOG, KLS_PREDPR POLUCH, KLS_PROD, KLS_STAN, KLS_TEX_PD,sobstv, KLS_VID_OTGR,  grotpr, KLS_NAZN_OTG) */
      PLAT.PREDPR_NAME AS PLAT_NAME,
	  poluch.PREDPR_NAME || ' ОКПО ' || RTRIM(poluch.OKPO) || ' Ж/Д КОД ' || RTRIM(poluch.GD_KOD)  AS poluch_name,
      KLS_PROD.LONG_NAME_NPR AS NAME_NPR,
      SUM(KVIT.VES_BRUTTO) AS VES_BRUTTO,
      COUNT(KVIT.ID) AS KOL,
	  grotpr.PREDPR_NAME as grotpr_name
    FROM KVIT,V_USER_MONTH_SNP month,KLS_REGION,KLS_PREDPR PLAT,KLS_DOG, KLS_PREDPR POLUCH, KLS_PROD, KLS_STAN, KLS_TEX_PD,KLS_PREDPR sobstv, KLS_VID_OTGR, KLS_PREDPR grotpr, KLS_NAZN_OTG 
    WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	  AND MONTH.IS_AGENT=2
      AND month.GOSPROG_ID=50
      AND MONTH.PLANSTRU_ID<>78
      AND month.NPODOG_ID=KLS_DOG.ID
      AND MONTH.POLUCH_ID=POLUCH.ID
      AND KLS_DOG.PREDPR_ID=PLAT.ID
      AND PLAT.REGION_ID=KLS_REGION.ID AND
	  (MONTH.stan_id=KLS_STAN.ID) AND
	  (sobstv.ID=MONTH.NPR_SOBSTV_ID) AND
	  (MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR) AND
	  (KVIT.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (KVIT.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KLS_TEX_PD.GROTP_ID=grotpr.ID) AND
	  (MONTH.NAZN_OTG_ID=KLS_NAZN_OTG.ID) AND
      KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR AND
--	  ((KVIT.DATE_OFORML>=date0_1 AND KVIT.DATE_OFORML<date0_2) OR
-- 	   (KVIT.DATE_OTGR>(date1_1-1) AND KVIT.DATE_OTGR<(date1_2+1)) OR
-- 	   (KVIT.DATE_KVIT>(date2_1-1) AND KVIT.DATE_KVIT<(date2_2+1))) AND
	  (KVIT.DATE_OTGR>(date2_1-1) AND KVIT.DATE_OTGR<(date2_2+1)) AND 
	  (plat.ID=NVL(num_plat_id,plat.ID)) AND
	  (poluch.ID=NVL(num_poluch_id,poluch.ID)) AND
	  (grotpr.ID=NVL(num_otpr_id,grotpr.ID)) AND
	  (sobstv.ID=NVL(num_sobstv_id,sobstv.ID)) AND
	  (KLS_TEX_PD.ID=NVL(num_tex_pd_id,KLS_TEX_PD.ID)) AND
	  (KLS_STAN.ID=NVL(num_stan_id,KLS_STAN.ID)) AND
	  (KLS_VID_OTGR.LOAD_TYPE_ID=NVL(num_load_type_id,KLS_VID_OTGR.LOAD_TYPE_ID)) AND
	  (KLS_NAZN_OTG.ID=NVL(num_nazn_otg_id,KLS_NAZN_OTG.ID)) AND
	  (KLS_PROD.ID_GROUP_NPR=NVL(group_npr,KLS_PROD.ID_GROUP_NPR)) AND
	  (KLS_PROD.ID_NPR=NVL(npr,KLS_PROD.ID_NPR))
    GROUP BY
      PLAT.PREDPR_NAME,
	  poluch.PREDPR_NAME || ' ОКПО ' || RTRIM(poluch.OKPO) || ' Ж/Д КОД ' || RTRIM(poluch.GD_KOD),
      KLS_PROD.LONG_NAME_NPR,
	  grotpr.PREDPR_NAME
    ORDER BY
      PLAT.PREDPR_NAME,
	  poluch.PREDPR_NAME || ' ОКПО ' || RTRIM(poluch.OKPO) || ' Ж/Д КОД ' || RTRIM(poluch.GD_KOD),
      KLS_PROD.LONG_NAME_NPR,
	  grotpr.PREDPR_NAME;

END;

PROCEDURE CR_REG_POL(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, REGION_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
CR_REGIONS(DATE_BEG, DATE_END,
  PLAT_ID,POLUCH_ID,
  STAN_ID,LOAD_TYPE_ID,
  GROUP_NPR_ID,NPR_ID,
  N_ZAD, '1_4_8', 
  TIP_DATE,SNP_OR_NOT, 
  OTPR_ID, TEX_PD_ID, 
  SOBSTV_ID, REGION_ID, CRS);
END;  

PROCEDURE CR_REG_14(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
CR_REGIONS(DATE_BEG, DATE_END,
  PLAT_ID,POLUCH_ID,
  STAN_ID,LOAD_TYPE_ID,
  GROUP_NPR_ID,NPR_ID,
  N_ZAD, '1_4', 
  TIP_DATE,SNP_OR_NOT, 
  OTPR_ID, TEX_PD_ID, 
  SOBSTV_ID, '*', CRS);
END;  

PROCEDURE CR_REG_148(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
CR_REGIONS(DATE_BEG, DATE_END,
  PLAT_ID,POLUCH_ID,
  STAN_ID,LOAD_TYPE_ID,
  GROUP_NPR_ID,NPR_ID,
  N_ZAD, '1_4_8', 
  TIP_DATE,SNP_OR_NOT, 
  OTPR_ID, TEX_PD_ID, 
  SOBSTV_ID, '*', CRS);
END;  
 
PROCEDURE CR_REG_1489(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
CR_REGIONS(DATE_BEG, DATE_END,
  PLAT_ID,POLUCH_ID,
  STAN_ID,LOAD_TYPE_ID,
  GROUP_NPR_ID,NPR_ID,
  N_ZAD, '1_4_8_9', 
  TIP_DATE,SNP_OR_NOT, 
  OTPR_ID, TEX_PD_ID, 
  SOBSTV_ID, '*', CRS);
END;  

PROCEDURE CR_REG_ALL(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2,
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
BEGIN
CR_REGIONS(DATE_BEG, DATE_END,
  PLAT_ID,POLUCH_ID,
  STAN_ID,LOAD_TYPE_ID,
  GROUP_NPR_ID,NPR_ID,
  N_ZAD, 'ALL', 
  TIP_DATE,SNP_OR_NOT, 
  OTPR_ID, TEX_PD_ID, 
  SOBSTV_ID, '*', CRS);
END;  

PROCEDURE CR_REGIONS(DATE_BEG VARCHAR2, DATE_END VARCHAR2,
  PLAT_ID VARCHAR2,POLUCH_ID VARCHAR2,
  STAN_ID VARCHAR2,LOAD_TYPE_ID VARCHAR2,
  GROUP_NPR_ID VARCHAR2,NPR_ID VARCHAR2,
  N_ZAD VARCHAR2, NAZN_OTG_ID VARCHAR2, 
  TIP_DATE VARCHAR2,SNP_OR_NOT VARCHAR2, 
  OTPR_ID VARCHAR2, TEX_PD_ID VARCHAR2, 
  SOBSTV_ID VARCHAR2, REGION_ID VARCHAR2, CRS IN OUT CURSTYPE) IS
--- Отгрузка в регионы РФ

DATE0_1 DATE;
DATE0_2 DATE;
DATE1_1 DATE;
DATE1_2 DATE;
DATE2_1 DATE;
DATE2_2 DATE;
NUM_PLAT_ID NUMBER;
NUM_POLUCH_ID NUMBER;
NUM_STAN_ID NUMBER;
NUM_LOAD_TYPE_ID NUMBER;
GROUP_NPR VARCHAR2(5);
NPR VARCHAR2(5);
--NUM_NAZN_OTG_ID NUMBER;
CHR_NAZN_OTG_ID VARCHAR2(100);
NUM_TIP_DATE NUMBER;
NUM_OTPR_ID NUMBER;
NUM_TEX_PD_ID NUMBER;
CHR_SNP_OR_NOT VARCHAR2(3);
CHR_N_ZAD VARCHAR2(20);
NUM_SOBSTV_ID NUMBER;
NUM_REGION_ID NUMBER;
BEGIN
  IF SNP_OR_NOT IS NULL THEN
    CHR_SNP_OR_NOT:='LUK';
  ELSE
    CHR_SNP_OR_NOT:=SNP_OR_NOT;
  END IF;	
  
  IF N_ZAD IS NULL THEN
    CHR_N_ZAD:='%';
  ELSE
    CHR_N_ZAD:=N_ZAD;
  END IF;	

  IF plat_id<>'*' AND plat_id IS NOT NULL THEN
    NUM_PLAT_ID:=TO_NUMBER(plat_id);
  ELSE
    NUM_PLAT_ID:=NULL;
  END IF;

  IF poluch_id<>'*' AND poluch_id IS NOT NULL THEN
    NUM_POLUCH_ID:=TO_NUMBER(poluch_id);
  ELSE
    NUM_POLUCH_ID:=NULL;
  END IF;

  IF sobstv_id<>'*' AND sobstv_id IS NOT NULL THEN
    NUM_SOBSTV_ID:=TO_NUMBER(sobstv_id);
  ELSE
    NUM_SOBSTV_ID:=NULL;
  END IF;

  IF region_id<>'*' AND region_id IS NOT NULL THEN
    NUM_REGION_ID:=TO_NUMBER(region_id);
  ELSE
    NUM_REGION_ID:=NULL;
  END IF;

  IF stan_id<>'*' AND stan_id IS NOT NULL THEN
    NUM_stan_ID:=TO_NUMBER(stan_id);
  ELSE
    NUM_stan_ID:=NULL;
  END IF;

  IF group_npr_id<>'*' AND group_npr_id IS NOT NULL THEN
    group_npr:=group_npr_id;
  ELSE
    group_npr:=NULL;
  END IF;

  IF npr_id<>'*' AND npr_id IS NOT NULL THEN
    npr:=npr_id;
  ELSE
    npr:=NULL;
  END IF;

  IF load_type_id<>'*' AND load_type_id IS NOT NULL THEN
    num_load_type_id:=load_type_id;
  ELSE
    num_load_type_id:=NULL;
  END IF;

/*  IF nazn_otg_id<>'*' AND nazn_otg_id IS NOT NULL THEN
    num_nazn_otg_id:=nazn_otg_id;
  ELSE
    num_nazn_otg_id:=NULL;
  END IF;*/
  chr_nazn_otg_id:=nazn_otg_id;
  
  IF tip_date IS NULL THEN
    num_tip_date:=0;
  ELSE	
    num_tip_date:=tip_date;
  END IF;	

  DATE0_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE0_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE1_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_1:=TO_DATE('01.01.2050','dd.mm.yyyy');
  DATE2_2:=TO_DATE('01.01.2050','dd.mm.yyyy');
  
  IF num_tip_date=0 THEN
    DATE0_1:=TO_DATE(DATE_BEG,'dd.mm.yyyy hh24:mi');
    DATE0_2:=TO_DATE(DATE_END,'dd.mm.yyyy hh24:mi');
  ELSE	
    IF num_tip_date=1 THEN
      DATE1_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE1_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    ELSE
      DATE2_1:=TO_DATE(SUBSTR(DATE_BEG,1,10),'dd.mm.yyyy');
      DATE2_2:=TO_DATE(SUBSTR(DATE_END,1,10),'dd.mm.yyyy');
    END IF;
  END IF;

  IF otpr_id<>'*' AND otpr_id IS NOT NULL THEN
    NUM_OTPR_ID:=TO_NUMBER(otpr_id);
  ELSE
    NUM_OTPR_ID:=NULL;
  END IF;

  IF tex_pd_id<>'*' AND tex_pd_id IS NOT NULL THEN
    NUM_TEX_PD_ID:=TO_NUMBER(tex_pd_id);
  ELSE
    NUM_TEX_PD_ID:=NULL;
  END IF;

  OPEN CRS FOR
    SELECT /*+ rule */
	  grotpr.PREDPR_NAME as grotpr_name,
	  DECODE(num_sobstv_id,NULL,'По всем владельцам','Владелец ' || sobstv.PREDPR_NAME) || DECODE(CHR_NAZN_OTG_ID,'ALL',' вкл. отгрузку с хранения/на хранение и ЭКСПОРТ','1_4','','1_4_8',' вкл. отгрузку на хранение','1_4_8_9','вкл. отгрузку на хранение и с хранения') AS REPORT_PRIM,
	  poluch_REGION.REGION_NAME AS REGION_NAME,
	  poluch_REGION.OKATO AS OKATO,
      KVIT.VES_BRUTTO AS ALL_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056',KVIT.VES_BRUTTO,0),0) AS AUTOBENZIN_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056',1,0),0) AS AUTOBENZIN_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056',0,KVIT.VES_BRUTTO),0) AS PR_BENZIN_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056',0,1),0) AS PR_BENZIN_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10400',KVIT.VES_BRUTTO,0) AS DIZEL_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10400',1,0) AS DIZEL_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10500',KVIT.VES_BRUTTO,0) AS KER_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10500',1,0) AS KER_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'11500',KVIT.VES_BRUTTO,0) AS MAZUT_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'11500',1,0) AS MAZUT_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'11900',KVIT.VES_BRUTTO,0) AS MASLO_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'11900',1,0) AS MASLO_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'13000',KVIT.VES_BRUTTO,0) AS BITUM_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'13000',1,0) AS BITUM_CNT,
      DECODE(KLS_PROD.ID_GROUP_NPR,'23000',KVIT.VES_BRUTTO,'90099',KVIT.VES_BRUTTO,'21000',KVIT.VES_BRUTTO,'21100',KVIT.VES_BRUTTO,'21200',KVIT.VES_BRUTTO,0) AS PR_VES,
      DECODE(KLS_PROD.ID_GROUP_NPR,'23000',1,'90099',1,'21000',1,'21100',1,'21200',1,0) AS PR_CNT,
	  KVIT.DATE_OFORML,
	  KVIT.SVED_NUM,
	  KVIT.NUM_CIST,
	  KVIT.DATE_OTGR AS SVED_DATE,
	  KVIT.NOM_ZD,
	  MONTH.GR4,
	  KLS_PROD.NAME_NPR,
	  poluch.PREDPR_NAME || ' ОКПО ' || RTRIM(poluch.OKPO) || ' Ж/Д КОД ' || RTRIM(poluch.GD_KOD)  AS poluch_name,
	  DECODE(SIGN(KLS_STAN.STAN_KOD-9999),1,TO_CHAR(KLS_STAN.STAN_KOD,'000000') || 
	       ' ' || KLS_STAN.STAN_NAME || ' ' || KLS_GDOR.SHORT_NAME || ' Ж.Д.',KLS_STAN.STAN_NAME) AS stan_name
    FROM KVIT,MONTH,KLS_PREDPR PLAT,KLS_PREDPR POLUCH,KLS_PREDPR sobstv,KLS_PREDPR grotpr,
	     KLS_REGION poluch_region,KLS_DOG,KLS_STAN,KLS_PROD,KLS_TEX_PD,
	     KLS_VID_OTGR, KLS_NAZN_OTG, KLS_GDOR
    WHERE (KVIT.NOM_ZD=MONTH.NOM_ZD) AND
      (MONTH.DOG_ID=KLS_DOG.ID) AND
      (MONTH.POLUCH_ID=POLUCH.ID) AND
      (MONTH.stan_id=KLS_STAN.ID) AND
	  (KLS_DOG.PREDPR_ID=plat.ID) AND 
	  (poluch.REGION_ID=poluch_region.ID) AND
	  (MONTH.NPR_SOBSTV_ID=sobstv.ID) AND
	  (MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR) AND
	  (KVIT.TEX_PD_ID=KLS_TEX_PD.ID) AND
	  (KVIT.GROTP_ID=KLS_TEX_PD.GROTP_ID) AND
	  (KLS_TEX_PD.GROTP_ID=grotpr.ID) AND
	  (MONTH.NAZN_OTG_ID=KLS_NAZN_OTG.ID) AND
      (KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR) AND
	  (KLS_STAN.GDOR_ID=KLS_GDOR.ID) AND
      ((KVIT.DATE_OFORML>=date0_1 AND KVIT.DATE_OFORML<date0_2) OR
 	   (KVIT.DATE_OTGR>(date1_1-1) AND KVIT.DATE_OTGR<(date1_2+1)) OR
 	   (KVIT.DATE_KVIT>(date2_1-1) AND KVIT.DATE_KVIT<(date2_2+1))) AND
	  (plat.ID=NVL(num_plat_id,plat.ID)) AND
	  (poluch.ID=NVL(num_poluch_id,poluch.ID)) AND
	  (grotpr.ID=NVL(num_otpr_id,grotpr.ID)) AND
	  (sobstv.ID=NVL(num_sobstv_id,sobstv.ID)) AND
	  (KLS_TEX_PD.ID=NVL(num_tex_pd_id,KLS_TEX_PD.ID)) AND
	  (KLS_STAN.ID=NVL(num_stan_id,KLS_STAN.ID)) AND
	  (KLS_VID_OTGR.LOAD_TYPE_ID=NVL(num_load_type_id,KLS_VID_OTGR.LOAD_TYPE_ID)) AND
	  (KLS_PROD.ID_GROUP_NPR=NVL(group_npr,KLS_PROD.ID_GROUP_NPR)) AND
	  (KLS_PROD.ID_NPR=NVL(npr,KLS_PROD.ID_NPR)) AND
	  (MONTH.NAZN_OTG_ID<>5 OR CHR_NAZN_OTG_ID='ALL') AND
	  (MONTH.NAZN_OTG_ID<>9 OR CHR_NAZN_OTG_ID='1_4_8_9' OR CHR_NAZN_OTG_ID='ALL') AND
	  (MONTH.NAZN_OTG_ID<>8 OR CHR_NAZN_OTG_ID='1_4_8' OR CHR_NAZN_OTG_ID='1_4_8_9' OR CHR_NAZN_OTG_ID='ALL') AND
	  MONTH.NAZN_OTG_ID<>50 AND
	  MONTH.NAZN_OTG_ID<>10 AND
	  (poluch.REGION_ID=NVL(num_region_id,poluch.REGION_ID)) AND
	  (POLUCH.REGION_ID<>999 OR MONTH.NAZN_OTG_ID=5) AND
	  (POLUCH.REGION_ID<>998 OR MONTH.NAZN_OTG_ID=5) AND
	  (POLUCH.REGION_ID<>0 OR MONTH.NAZN_OTG_ID=5);
	  
END;

PROCEDURE CR_PLOTNOST(DATE_BEG VARCHAR2, DATE_END VARCHAR2, 
  CRS IN OUT CURSTYPE) IS
DATE0_1 DATE;
DATE0_2 DATE;
BEGIN  
  DATE0_1:=TO_DATE(DATE_BEG,'dd.mm.yyyy');
  DATE0_2:=TO_DATE(DATE_END,'dd.mm.yyyy');

  OPEN CRS FOR
    SELECT 
      KLS_PROD.ID_GROUP_NPR,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056','АВТОБЕНЗИНЫ','ПРОЧИЕ БЕНЗИНЫ'),
         '10400',DECODE(KLS_PROD.ID_KIND_NPR,'10405','ДТ ЗИМНЕЕ','ДТ ЛЕТНЕЕ'),GROUP_PROD.LONG_NAME_NPR) AS NAME, 
      SUM(VES_BRUTTO) AS VES, 
      SUM(VES_BRUTTO)/SUM(VES_BRUTTO/FAKT_PL) AS PLOT,
      SUM(VES_BRUTTO/FAKT_PL) AS VOLUME 
    FROM KVIT,MONTH,KLS_PROD,KLS_PROD GROUP_PROD,KLS_VID_OTGR
    WHERE KVIT.nom_zd=MONTH.nom_zd 
      AND KVIT.prod_id_npr=KLS_PROD.id_npr
      AND KLS_PROD.ID_GROUP_NPR=GROUP_PROD.ID_NPR
      AND KVIT.VES_BRUTTO>0
      AND KVIT.FAKT_PL>0
      AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
      AND KLS_VID_OTGR.LOAD_TYPE_ID=1
 	  AND KVIT.DATE_OTGR>(date0_1-1) AND KVIT.DATE_OTGR<(date0_2+1)
    GROUP BY
      KLS_PROD.ID_GROUP_NPR,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056','АВТОБЕНЗИНЫ','ПРОЧИЕ БЕНЗИНЫ'),
        '10400',DECODE(KLS_PROD.ID_KIND_NPR,'10405','ДТ ЗИМНЕЕ','ДТ ЛЕТНЕЕ'),GROUP_PROD.LONG_NAME_NPR)
    ORDER BY
      KLS_PROD.ID_GROUP_NPR,
      DECODE(KLS_PROD.ID_GROUP_NPR,'10300',DECODE(KLS_PROD.GD_KOD_NPR,'211056','АВТОБЕНЗИНЫ','ПРОЧИЕ БЕНЗИНЫ'),
        '10400',DECODE(KLS_PROD.ID_KIND_NPR,'10405','ДТ ЗИМНЕЕ','ДТ ЛЕТНЕЕ'),GROUP_PROD.LONG_NAME_NPR);
END;

PROCEDURE CR_R3_BILLS(DATE_BEG VARCHAR2, DATE_END VARCHAR2, 
  IS_AGENT VARCHAR2, CRS IN OUT CURSTYPE) IS
DATE0_1 DATE;
DATE0_2 DATE;
NUM_IS_AGENT NUMBER;
BEGIN  
  DATE0_1:=TO_DATE(DATE_BEG,'dd.mm.yyyy');
  DATE0_2:=TO_DATE(DATE_END,'dd.mm.yyyy');

  IF IS_AGENT IS NOT NULL THEN
    NUM_IS_AGENT:=TO_NUMBER(IS_AGENT);
  ELSE
    NUM_IS_AGENT:=NULL;
  END IF;

  OPEN CRS FOR
    SELECT DECODE(NUM_IS_AGENT,0,' (отчет комиссионера)',1,' (отчет агента)',2,' (отчет по поставке)','') AS IS_AGENT_NAME, 
	       A.* FROM V_R3_CHECK_BILLS A
	WHERE A.NPO_DATE_KVIT>(date0_1-1) AND A.NPO_DATE_KVIT<(date0_2+1) 
      AND A.IS_AGENT=NUM_IS_AGENT
    ORDER BY A.NPO_NOM_SF;
END;  

END; 
/

--
-- FOR_SAIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Saio AS

PROCEDURE LORP_LOAD_BILL(ADATE_BEG VARCHAR2, ADATE_END VARCHAR2) IS
DATE_BEG DATE;
DATE_END DATE;
DAY_BEG NUMBER;
DAY_END NUMBER;
REP_TYPE NUMBER;
DB_CODE NUMBER;
BEGIN
  DATE_BEG:=TO_DATE(ADATE_BEG,'dd.mm.yyyy');
  DATE_END:=TO_DATE(ADATE_END,'dd.mm.yyyy');
  DAY_BEG:=TO_NUMBER(TO_CHAR(DATE_BEG,'DD'));
  DAY_END:=TO_NUMBER(TO_CHAR(DATE_END,'DD'));
  
  IF (DAY_BEG=1 AND DAY_END=5) OR 
     (DAY_BEG=6 AND DAY_END=10) OR
     (DAY_BEG=11 AND DAY_END=15) OR
     (DAY_BEG=16 AND DAY_END=20) OR
     (DAY_BEG=21 AND DAY_END=25) OR
     (DAY_BEG=26 AND DAY_END=30) OR
	 (DAY_BEG=31 AND DATE_END=LAST_DAY(DATE_END)) OR
 	 (DAY_BEG=26 AND DATE_END=LAST_DAY(DATE_END)) THEN

--   IF false THEN

	 -- Обновление номеров счетов
	 UPDATE SAIO04.LO_BILL A SET NOTE=(SELECT B.NPO_SF FROM KTU_2_NPO_SF B WHERE B.NOM_DOK=A.ID)
	  WHERE EXISTS (SELECT B.NPO_SF FROM KTU_2_NPO_SF B WHERE B.NOM_DOK=A.ID)
	    AND A.DATABASE_CODE=9
	    AND A.CHECK_DATE BETWEEN DATE_BEG-5 AND DATE_END+5;
		
	 COMMIT;
	 	   
	 -- Очистка буфера
     DELETE FROM SAIO04.LORP_BUF;

	 -- Заполнение буфера - КОМИССИЯ
     INSERT INTO SAIO04.LORP_BUF (CHECK_ID,CHECK_CORP_RESOURCE_ID,ELEMENT_ID) 
       SELECT KVIT_ID,DECODE(SOBSTV,1,1,SOBSTV-1) SOBSTV,NOM_DOK FROM MASTER.V_LUKREP_SF_MON 
        WHERE DATE_MOS BETWEEN DATE_BEG AND DATE_END
          AND IS_AGENT=0 AND CNT_KVIT<=1;
	 COMMIT;

     -- Загрузка из буфера в основные таблицы - КОМИССИЯ
     SAIO04.LORP_LOAD.LOAD(9,2,1,DATE_BEG,DATE_END);

	 -- Очистка буфера
     DELETE FROM SAIO04.LORP_BUF;

	 -- Заполнение буфера - АГЕНТСКИЙ
     INSERT INTO SAIO04.LORP_BUF (CHECK_ID,CHECK_CORP_RESOURCE_ID,ELEMENT_ID) 
       SELECT KVIT_ID,DECODE(SOBSTV,1,1,SOBSTV-1) SOBSTV,NOM_DOK FROM MASTER.V_LUKREP_SF_MON 
        WHERE DATE_MOS BETWEEN DATE_BEG AND DATE_END
          AND IS_AGENT=1 AND CNT_KVIT<=1;
	 COMMIT;

     -- Загрузка из буфера в основные таблицы - АГЕНТСКИЙ
     SAIO04.LORP_LOAD.LOAD(80,1,1,DATE_BEG,DATE_END);

	 -- Очистка буфера
     DELETE FROM SAIO04.LORP_BUF;

	 -- Заполнение буфера - ПОСТАВКА
     INSERT INTO SAIO04.LORP_BUF (CHECK_ID,CHECK_CORP_RESOURCE_ID,ELEMENT_ID) 
       SELECT KVIT_ID,DECODE(SOBSTV,1,1,SOBSTV-1) SOBSTV,NOM_DOK FROM MASTER.V_LUKREP_SF_MON 
        WHERE DATE_MOS BETWEEN DATE_BEG AND DATE_END
          AND IS_AGENT=2 AND CNT_KVIT<=1;
	 COMMIT;

     -- Загрузка из буфера в основные таблицы - ПОСТАВКА
     SAIO04.LORP_LOAD.LOAD(80,4,1,DATE_BEG,DATE_END);

--   END IF; 

	 -- Очистка буфера
     DELETE FROM SAIO04.LORP_BUF;

	 -- Заполнение буфера - АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ по 0210205, 0410889
     INSERT INTO SAIO04.LORP_BUF (CHECK_ID,CHECK_CORP_RESOURCE_ID,ELEMENT_ID) 
       SELECT NULL, 1 , LO_BILL.ID FROM SAIO04.LO_BILL, MASTER.KLS_DOG_MAIN
        WHERE CHECK_DATE BETWEEN DATE_BEG AND DATE_END
		  AND DOGOVOR_ID = KLS_DOG_MAIN.DOG_ID
		  AND KLS_DOG_MAIN.IS_AGENT=1
		  AND PRODUCT_ID IN (24,25,26);
		    
	 COMMIT;

	 -- Загрузка LORP_BUF в основные таблицы
     SAIO04.LORP_LOAD.LOAD(9,6,1,DATE_BEG,DATE_END);
 
  END IF;		  

END;

PROCEDURE LORP_DEL_BILL(ADATE_BEG VARCHAR2, ADATE_END VARCHAR2) IS

DATE_BEG DATE;
DATE_END DATE;
DAY_BEG NUMBER;
DAY_END NUMBER;

 CURSOR tmp_cur IS    
  SELECT ID FROM SAIO04.LORP_REPORT_HEADERS
   WHERE START_DATE=DATE_BEG 
	 AND END_DATE=DATE_END;

BEGIN
  DATE_BEG:=TO_DATE(ADATE_BEG,'dd.mm.yyyy');
  DATE_END:=TO_DATE(ADATE_END,'dd.mm.yyyy');
  DAY_BEG:=TO_NUMBER(TO_CHAR(DATE_BEG,'DD'));
  DAY_END:=TO_NUMBER(TO_CHAR(DATE_END,'DD'));
  
  IF (DAY_BEG=1 AND DAY_END=5) OR 
     (DAY_BEG=6 AND DAY_END=10) OR
     (DAY_BEG=11 AND DAY_END=15) OR
     (DAY_BEG=16 AND DAY_END=20) OR
     (DAY_BEG=21 AND DAY_END=25) OR
     (DAY_BEG=26 AND DAY_END=30) OR
	 (DAY_BEG=31 AND DATE_END=LAST_DAY(DATE_END)) OR
 	 (DAY_BEG=26 AND DATE_END=LAST_DAY(DATE_END)) THEN
	 
    FOR lcur IN tmp_cur 							   
    LOOP
      DELETE FROM SAIO04.LORP_TMP_CHECK WHERE HEADER_ID=lcur.ID;
      DELETE FROM SAIO04.LORP_REPORT_ELEMENTS WHERE HEADER_ID=lcur.ID;
      DELETE FROM SAIO04.LORP_REPORT_HEADERS WHERE ID=lcur.ID;
    END LOOP;
    COMMIT;
  END IF;
END;

PROCEDURE ADD_VOZN(ADATE_BEG DATE, ADATE_END DATE, ADBCODE NUMBER) IS
BEGIN
  INSERT INTO SAIO04.BU_BILL 
    (ID, DATABASE_CODE, BILL_NUM, BILL_DATE, BILL_TOTAL_SUM, WEIGHT, ACCOUNT_DATE, CHECK_DATE, CONTRACT_ID, PRICE_CATEGORY, 
     PRODUCT_ID, PRODUCT_PRICE, CONTRACT_PAYER_ID, CONSUMER_ID, STATION_ID, OLD_ID, OWNER_ID, RESOURCE_ID, DAYS_NUMBER, 
     CURRENCY_ID, PRODUCT_SUM, PRODUCT_NDS, PRODUCT_SP_TAX, PRODUCT_ROAD_TAX, PRODUCT_TOTAL_SUM, SERVICE_SUM, SERVICE_NDS, 
     SERVICE_SP_TAX, SERVICE_TOTAL_SUM, TARIFF_TOTAL_SUM, DATE_FROM, PRICE_CATEGORY_ID, INSURANCE, 
     TBONUSNDS, TBONUS, PRICE_GET, DOGOVOR_ID, CORP_UNIT_ID, CORP_UNIT_QUANTITY, TARIFF_NDS_SUM, BILL_NDS_SUM, IS_DELETED, 
     REWARD_SUM, REWARD_NDS_SUM, NOTE)
  SELECT 
    A.ID, A.DATABASE_CODE, BILL_NUM, BILL_DATE, BILL_TOTAL_SUM, WEIGHT, ACCOUNT_DATE, CHECK_DATE, CONTRACT_ID, PRICE_CATEGORY, 
    B.ID AS PRODUCT_ID, PRODUCT_PRICE, CONTRACT_PAYER_ID, CONSUMER_ID, STATION_ID, OLD_ID, OWNER_ID, RESOURCE_ID, DAYS_NUMBER, 
    CURRENCY_ID, PRODUCT_SUM, PRODUCT_NDS, PRODUCT_SP_TAX, PRODUCT_ROAD_TAX, PRODUCT_TOTAL_SUM, SERVICE_SUM, SERVICE_NDS, 
    SERVICE_SP_TAX, SERVICE_TOTAL_SUM, TARIFF_TOTAL_SUM, A.DATE_FROM, PRICE_CATEGORY_ID, INSURANCE, 
    TBONUSNDS, TBONUS, PRICE_GET, DOGOVOR_ID, CORP_UNIT_ID, CORP_UNIT_QUANTITY, TARIFF_NDS_SUM, BILL_NDS_SUM, IS_DELETED, 
    REWARD_SUM, REWARD_NDS_SUM, NOTE
  FROM 
    (SELECT 
      nom_dok AS ID,
      DECODE(KLS_DOG_MAIN.IS_AGENT,1,9,80) AS database_code,
      TO_NUMBER(nom_sf) AS bill_num,
      DATE_VYP_SF AS bill_date,
      summa_dok AS BILL_TOTAL_SUM,
      0 AS WEIGHT,
      DATE_BUXG AS ACCOUNT_DATE,
      DATE_KVIT AS CHECK_DATE,
      KLS_DOG_MAIN.U_DOG_ID AS contract_id,
      0 AS price_category,
      0 AS product_price,
      2641 AS contract_payer_id,
      2641 AS consumer_id,
      NULL AS STATION_ID,
      NULL AS OLD_ID,
      1 AS OWNER_ID,
      NULL AS RESOURCE_ID,
      0 AS DAYS_NUMBER,
      2 AS CURRENCY_ID,
      SUMMA_AKCIZ+SUMMA_PROD-SUMMA_PROD_NDS AS PRODUCT_SUM,
      SUMMA_PROD_NDS AS PRODUCT_NDS,
      0 AS PRODUCT_SP_TAX,
      SUMMA_GSM AS PRODUCT_ROAD_TAX,
      SUMMA_AKCIZ+SUMMA_PROD AS PRODUCT_TOTAL_SUM,
      SUMMA_VOZN-SUMMA_VOZN_NDS AS SERVICE_SUM,
      SUMMA_VOZN_NDS AS SERVICE_NDS,
      0 AS SERVICE_SP_TAX,
      SUMMA_VOZN AS SERVICE_TOTAL_SUM,
      SUMMA_TARIF AS TARIFF_TOTAL_SUM,
      SYSDATE AS DATE_FROM,
      2201 AS price_category_id,
      SUMMA_STRAH AS INSURANCE,
      SUMMA_VOZN_NDS AS TBONUSNDS,
      SUMMA_VOZN-SUMMA_VOZN_NDS AS TBONUS,
      NULL AS PRICE_GET,
      KLS_DOG_MAIN.DOG_ID AS dogovor_id,
      NULL AS CORP_UNIT_ID,
      NULL AS CORP_UNIT_QUANTITY,
      SUMMA_TARIF_NDS AS TARIFF_NDS_SUM,
      SUMMA_VOZN_NDS+SUMMA_TARIF_NDS AS BILL_NDS_SUM,
      '0' AS IS_DELETED,
      SUMMA_VOZN AS REWARD_SUM,
      SUMMA_VOZN_NDS AS REWARD_NDS_SUM,
      'Счет № '||NPO_SF||' '||PRIM AS NOTE,
      PROD_ID_NPR  
    FROM BILLS_PARUS, MASTER.KLS_DOG_MAIN
    WHERE KLS_DOG_MAIN.IS_AGENT IN (0,1) -- Только Комиссия и Агентский
	  AND num_dog=KLS_DOG_MAIN.DOG_ID
	  AND DATE_VYP_SF BETWEEN ADATE_BEG AND ADATE_END
    ) A, SAIO04.LO_PRODUCT B
  WHERE A.PROD_ID_NPR=B.CODE
    AND A.DATABASE_CODE=B.DATABASE_CODE
    AND A.PROD_ID_NPR<>'10006'
	AND A.DATABASE_CODE=ADBCODE;

  COMMIT;	 
END;

END;

/

--
-- V_LUKREP_SF  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_LUKREP_SF
(NUM_5_DAY, IS_KORR, IS_AGENT, IS_SILOV, SOBSTV, 
 PLAT_ID, PLAT_INN, PLAT_NAME, PLAT_ADDR, DOG_ID, 
 DOG_NUMBER, DOG_DATE, DATE_KVIT, DATE_MOS, DATE_CHN_SOB, 
 NOM_DOK, NOM_SF, ORIG_NOM_SF, OLD_NOM_SF, NPO_SF, 
 DATE_VYP_SF, GR_NPR_ID, GR_NPR_NAME, PROD_ID_NPR, PROD_NAME, 
 PROD_EDIZ, KVIT_ID, VES, VES_KVIT, CNT_KVIT, 
 SVED_NUM, NUM_KVIT, NUM_CIST, STANOTP_ID, STAN_NAME, 
 HRAN_ID, HRAN_NAME, POLUCH_ID, POLUCH_NAME, POLUCH_ADDR, 
 IS_SF, CENA_BN, CENA, SUMMA_PROD_BN, SUMMA_PROD_NDS, 
 SUMMA_PROD, SUMMA_AGEN, SUMMA_AGEN_NDS, SUMMA_TARIF, SUMMA_TARIF_NDS, 
 SUMMA_STRAH, SUMMA_DOK, SUMMA_DOK_NDS, PRICE_PROTOKOL, KOL_DN, 
 NUM_STRAH)
AS 
SELECT "NUM_5_DAY","IS_KORR","IS_AGENT","IS_SILOV","SOBSTV","PLAT_ID","PLAT_INN","PLAT_NAME","PLAT_ADDR","DOG_ID","DOG_NUMBER","DOG_DATE","DATE_KVIT",
"DATE_MOS","DATE_CHN_SOB","NOM_DOK","NOM_SF","ORIG_NOM_SF", "OLD_NOM_SF","NPO_SF","DATE_VYP_SF","GR_NPR_ID",
"GR_NPR_NAME","PROD_ID_NPR","PROD_NAME","PROD_EDIZ","KVIT_ID","VES","VES_KVIT","CNT_KVIT","SVED_NUM","NUM_KVIT",
"NUM_CIST","STANOTP_ID","STAN_NAME","HRAN_ID","HRAN_NAME","POLUCH_ID","POLUCH_NAME","POLUCH_ADDR","IS_SF",
"CENA_BN","CENA","SUMMA_PROD_BN","SUMMA_PROD_NDS","SUMMA_PROD","SUMMA_AGEN","SUMMA_AGEN_NDS",
"SUMMA_TARIF",
"SUMMA_TARIF_NDS","SUMMA_STRAH","SUMMA_DOK","SUMMA_DOK_NDS","PRICE_PROTOKOL","KOL_DN","NUM_STRAH" FROM V_LUKREP_SF_NEW;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BQ_DEPS  (Table) 
--
CREATE TABLE MASTER.EUL_BQ_DEPS
(
  BQD_ID        NUMBER(10)                      NOT NULL,
  BQD_TYPE      VARCHAR2(10 BYTE),
  BQD_BQ_ID     NUMBER(10),
  BFILD_FIL_ID  NUMBER(10),
  BID_IT_ID     NUMBER(10),
  BFUND_FUN_ID  NUMBER(10),
  NOTM          NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_DOMAINS  (Table) 
--
CREATE TABLE MASTER.EUL_DOMAINS
(
  DOM_ID              NUMBER(10)                NOT NULL,
  DOM_NAME            VARCHAR2(100 BYTE),
  DOM_DESCRIPTION     VARCHAR2(240 BYTE),
  DOM_DATA_TYPE       NUMBER(2),
  DOM_LOGICAL_ITEM    NUMBER(1),
  DOM_SYS_GENERATED   NUMBER(1),
  DOM_CARDINALITY     NUMBER(22),
  DOM_LAST_EXEC_TIME  NUMBER(22),
  DOM_IT_ID_LOV       NUMBER(10),
  DOM_IT_ID_RANK      NUMBER(10),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_EXP_DEPS  (Table) 
--
CREATE TABLE MASTER.EUL_EXP_DEPS
(
  ED_ID       NUMBER(10)                        NOT NULL,
  ED_TYPE     VARCHAR2(10 BYTE),
  PD_P_ID     NUMBER(10),
  PED_EXP_ID  NUMBER(10),
  PFD_FUN_ID  NUMBER(10),
  PSD_SQ_ID   NUMBER(10),
  CD_EXP_ID   NUMBER(10),
  CFD_FUN_ID  NUMBER(10),
  CPD_EXP_ID  NUMBER(10),
  CID_EXP_ID  NUMBER(10),
  NOTM        NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_EXPRESSIONS  (Table) 
--
CREATE TABLE MASTER.EUL_EXPRESSIONS
(
  EXP_ID              NUMBER(10)                NOT NULL,
  EXP_TYPE            VARCHAR2(10 BYTE),
  EXP_NAME            VARCHAR2(100 BYTE),
  EXP_DESCRIPTION     VARCHAR2(240 BYTE),
  EXP_FORMULA1        VARCHAR2(250 BYTE),
  EXP_DATA_TYPE       NUMBER(2),
  EXP_SEQUENCE        NUMBER(22),
  ITE_DOM_ID          NUMBER(10),
  ITE_FORMAT_MASK     VARCHAR2(100 BYTE),
  ITE_MAX_DATA_WIDTH  NUMBER(22),
  ITE_OBJ_ID          NUMBER(10),
  ITE_EU_ID           NUMBER(10),
  ITE_ALIGNMENT       NUMBER(2),
  ITE_WORD_WRAP       NUMBER(1),
  ITE_MAX_DISP_WIDTH  NUMBER(22),
  PAR_DEFAULT_VALUE   VARCHAR2(240 BYTE),
  PAR_EXP_ID_ASSOC    NUMBER(10),
  PAR_PROMPT          VARCHAR2(100 BYTE),
  PAR_MULTIPLE_VALS   NUMBER(1),
  IT_SUMMARY_COUNT    NUMBER(22),
  IT_DISP_NULL_VAL    VARCHAR2(100 BYTE),
  IT_EXP_ID_DESC_FOR  NUMBER(10),
  IT_FUN_ID           NUMBER(10),
  IT_HEADING          VARCHAR2(240 BYTE),
  IT_HIDDEN           NUMBER(1),
  IT_KEY_ID_DESC_FOR  NUMBER(10),
  IT_ORD_POSITION     NUMBER(22),
  IT_ORD_DIRECTION    NUMBER(2),
  IT_PLACEMENT        NUMBER(2),
  IT_USER_DEF_FMT     VARCHAR2(100 BYTE),
  IT_CASE_STORAGE     NUMBER(2),
  IT_CASE_DISPLAY     NUMBER(2),
  IT_EXT_COLUMN       VARCHAR2(64 BYTE),
  CI_IT_ID            NUMBER(10),
  CI_AGGREGATE_ITEM   NUMBER(1),
  CO_NULLABLE         NUMBER(1),
  P_CASE_SENSITIVE    NUMBER(1),
  JP_KEY_ID           NUMBER(10),
  NJP_OBJ_ID_OWNER    NUMBER(10),
  NJP_EU_ID           NUMBER(10),
  FIL_MANDATORY       NUMBER(1),
  FIL_EXT_FILTER      VARCHAR2(64 BYTE),
  NOTM                NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_IG_EXP_LINKS  (Table) 
--
CREATE TABLE MASTER.EUL_IG_EXP_LINKS
(
  IEL_ID        NUMBER(10)                      NOT NULL,
  IEL_TYPE      VARCHAR2(10 BYTE),
  HIL_EXP_ID    NUMBER(10),
  HIL_HN_ID     NUMBER(10),
  KIL_EXP_ID    NUMBER(10),
  KIL_KEY_ID    NUMBER(10),
  KIL_SEQUENCE  NUMBER(22),
  NOTM          NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SBO_DSGN_ELEMS  (Table) 
--
CREATE TABLE MASTER.EUL_SBO_DSGN_ELEMS
(
  SDE_ID           NUMBER(10)                   NOT NULL,
  SDE_TYPE         VARCHAR2(10 BYTE),
  SDE_SUMO_ID      NUMBER(10),
  SDE_FORMULA_MOD  NUMBER(1),
  SAIL_EXP_ID      NUMBER(10),
  SMIL_EXP_ID      NUMBER(10),
  SMIL_FUN_ID      NUMBER(10),
  NOTM             NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SEGMENTS  (Table) 
--
CREATE TABLE MASTER.EUL_SEGMENTS
(
  OSS_ID           NUMBER(10)                   NOT NULL,
  OSS_SEG_TYPE     NUMBER(1),
  OSS_SEQUENCE     NUMBER(22),
  OSS_OBJ_ID       NUMBER(10),
  OSS_SUMO_ID      NUMBER(10),
  OSS_CUO_ID       NUMBER(10),
  OSS_BQ_ID        NUMBER(10),
  OSS_EXP_ID       NUMBER(10),
  OSS_OBJECT_SQL1  VARCHAR2(250 BYTE),
  OSS_OBJECT_SQL2  VARCHAR2(250 BYTE),
  OSS_OBJECT_SQL3  VARCHAR2(250 BYTE),
  OSS_OBJECT_SQL4  VARCHAR2(250 BYTE),
  NOTM             NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQ_CRRLTNS  (Table) 
--
CREATE TABLE MASTER.EUL_SQ_CRRLTNS
(
  SQC_ID           NUMBER(10)                   NOT NULL,
  SQC_SQ_ID        NUMBER(10),
  SQC_IT_INNER_ID  NUMBER(10),
  SQC_IT_OUTER_ID  NUMBER(10),
  NOTM             NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SUB_QUERIES  (Table) 
--
CREATE TABLE MASTER.EUL_SUB_QUERIES
(
  SQ_ID      NUMBER(10)                         NOT NULL,
  SQ_NAME    VARCHAR2(100 BYTE),
  SQ_OBJ_ID  NUMBER(10),
  SQ_IT_ID   NUMBER(10),
  SQ_FIL_ID  NUMBER(10),
  NOTM       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SUM_BITMAPS  (Table) 
--
CREATE TABLE MASTER.EUL_SUM_BITMAPS
(
  SB_ID        NUMBER(10)                       NOT NULL,
  SB_BITMAP    RAW(250),
  SB_SEQUENCE  NUMBER(22),
  SB_EXP_ID    NUMBER(10),
  SB_KEY_ID    NUMBER(10),
  SB_FUN_ID    NUMBER(10),
  NOTM         NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SUMO_ITEM_USGS  (Table) 
--
CREATE TABLE MASTER.EUL_SUMO_ITEM_USGS
(
  SIU_ID             NUMBER(10)                 NOT NULL,
  SIU_TYPE           VARCHAR2(10 BYTE),
  SIU_SUMO_ID        NUMBER(10),
  SIU_EXP_ID         NUMBER(10),
  SIU_EXT_COLUMN     VARCHAR2(64 BYTE),
  SIU_ITEM_MODIFIED  NUMBER(1),
  SMIU_FUN_ID        NUMBER(10),
  SMIU_MEASURE_SET   NUMBER(22),
  NOTM               NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KSSS_PREDPR_R3_CUSTOMERS_DESC  (Table) 
--
CREATE TABLE MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC
(
  KSSS_PREDPR_ID  NUMBER(10)                    NOT NULL,
  R3_CUSTOMERS    VARCHAR2(10 BYTE)             NOT NULL,
  IS_AUTO_LINK    NUMBER(1)                     DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC IS 'Связь КССС - Дебитор R3';

COMMENT ON COLUMN MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC.KSSS_PREDPR_ID IS 'Контрагент из КССС';

COMMENT ON COLUMN MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC.R3_CUSTOMERS IS 'Дебитор из R3';

COMMENT ON COLUMN MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC.IS_AUTO_LINK IS 'Признак автоматической привязки';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- KSSS_PREDPR_R3_VENDORS_DESC  (Table) 
--
CREATE TABLE MASTER.KSSS_PREDPR_R3_VENDORS_DESC
(
  KSSS_PREDPR_ID  NUMBER(10)                    NOT NULL,
  R3_VENDORS      VARCHAR2(10 BYTE)             NOT NULL,
  IS_AUTO_LINK    NUMBER(1)                     DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.KSSS_PREDPR_R3_VENDORS_DESC IS 'Связь КССС - Кредитор R3';

COMMENT ON COLUMN MASTER.KSSS_PREDPR_R3_VENDORS_DESC.KSSS_PREDPR_ID IS 'Контрагент из КССС';

COMMENT ON COLUMN MASTER.KSSS_PREDPR_R3_VENDORS_DESC.R3_VENDORS IS 'Кредитор из R3';

COMMENT ON COLUMN MASTER.KSSS_PREDPR_R3_VENDORS_DESC.IS_AUTO_LINK IS 'Признак автоматической привязки';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_CC  (Table) 
--
CREATE TABLE MASTER.R3_CC
(
  EKKO_ZZ021    VARCHAR2(30 BYTE)               NOT NULL,
  EKKO_KDATB    DATE,
  EKKO_KDATE    DATE,
  EKKO_LIFNR    VARCHAR2(10 BYTE),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  DOG_ID        NUMBER(5),
  ZZZZ_STATUS   VARCHAR2(1 BYTE),
  ZZZZ_FILE     VARCHAR2(50 BYTE),
  ZZZZ_DATE     DATE,
  CUSTOMERS_ID  VARCHAR2(10 BYTE),
  EKKO_EBELN    VARCHAR2(20 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_CC.EKKO_ZZ021 IS 'Договор';

COMMENT ON COLUMN MASTER.R3_CC.EKKO_KDATB IS 'С даты';

COMMENT ON COLUMN MASTER.R3_CC.EKKO_KDATE IS 'По дату';

COMMENT ON COLUMN MASTER.R3_CC.EKKO_LIFNR IS 'Поставщик';

COMMENT ON COLUMN MASTER.R3_CC.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.R3_CC.ZZZZ_STATUS IS 'Статус прокачки';

COMMENT ON COLUMN MASTER.R3_CC.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_CC.ZZZZ_DATE IS 'Дата прокачки';

COMMENT ON COLUMN MASTER.R3_CC.CUSTOMERS_ID IS 'Покупатель';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_CUSTOMERS  (Table) 
--
CREATE TABLE MASTER.R3_CUSTOMERS
(
  ID                    VARCHAR2(10 BYTE)       NOT NULL,
  NAME                  VARCHAR2(110 BYTE),
  CITY                  VARCHAR2(50 BYTE),
  POST_CODE             VARCHAR2(10 BYTE),
  STREET                VARCHAR2(100 BYTE),
  HOUSE_NUM             VARCHAR2(20 BYTE),
  CITY_P                VARCHAR2(50 BYTE),
  POST_CODE_P           VARCHAR2(10 BYTE),
  ADREESS_P             VARCHAR2(100 BYTE),
  INN                   VARCHAR2(15 BYTE),
  KVERM                 VARCHAR2(30 BYTE),
  BIK                   VARCHAR2(10 BYTE),
  IS_AUTO_LINK          NUMBER(1)               DEFAULT 1,
  PREDPR_ID             NUMBER(6),
  VENDORS_ID            VARCHAR2(10 BYTE),
  ZZZZ_STATUS           VARCHAR2(1 BYTE),
  ZZZZ_FILE             VARCHAR2(50 BYTE),
  ZZZZ_DATE             DATE,
  BAHNS                 VARCHAR2(15 BYTE),
  EXIST_AKCIZ_SVED_NUM  VARCHAR2(2 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.ID IS 'Покупатель';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.CITY IS 'Город';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.POST_CODE IS 'Почтовый код';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.STREET IS 'Улица';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.HOUSE_NUM IS 'N дома';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.CITY_P IS 'Город (почтовый адрес)';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.POST_CODE_P IS 'Почтовый код (почтовый адрес)';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.ADREESS_P IS 'Почтовый адрес';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.INN IS 'ИНН';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.KVERM IS 'Договор';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.BIK IS 'БИК';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.VENDORS_ID IS 'Поставщик';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.ZZZZ_STATUS IS 'Статус прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.ZZZZ_DATE IS 'Дата прокачки';

COMMENT ON COLUMN MASTER.R3_CUSTOMERS.BAHNS IS 'ЖД код';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_KONV  (Table) 
--
CREATE TABLE MASTER.R3_KONV
(
  KSCHL        VARCHAR2(10 BYTE)                NOT NULL,
  T685T_VTEXT  VARCHAR2(100 BYTE),
  MATCH_ASNUM  VARCHAR2(10 BYTE),
  FOX_ID       NUMBER(10)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_KONV.KSCHL IS 'Условие разнарядки';

COMMENT ON COLUMN MASTER.R3_KONV.T685T_VTEXT IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_KONV.MATCH_ASNUM IS 'Услуга ММ_МО';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_KVIT2SAP  (Table) 
--
CREATE TABLE MASTER.R3_KVIT2SAP
(
  ID_MS         NUMBER(10)                      NOT NULL,
  VSTEL         VARCHAR2(3 BYTE),
  ID_SAP        VARCHAR2(20 BYTE),
  ID_SAP_PSN    VARCHAR2(10 BYTE),
  BEDNR         NUMBER(10),
  VES           NUMBER(15,6)                    DEFAULT 0,
  KVIT_ID       NUMBER(10),
  VBAK_VBELN    VARCHAR2(30 BYTE),
  VBAP_POSNR    VARCHAR2(10 BYTE),
  NOM_ZD        VARCHAR2(12 BYTE),
  OPER          VARCHAR2(1 BYTE),
  LASTOPER      VARCHAR2(1 BYTE),
  SEND_OPER     NUMBER(1),
  DT_OPER       DATE,
  OF_FILE       VARCHAR2(30 BYTE),
  DT_DEL        DATE,
  SEND_DOC      NUMBER(1),
  DT_DOC        DATE,
  OF_FILE_D     VARCHAR2(30 BYTE),
  OS            VARCHAR2(1 BYTE),
  LASTOS        VARCHAR2(1 BYTE),
  SEND_OS       NUMBER(1),
  DT_OS         DATE,
  OS_FILE       VARCHAR2(30 BYTE),
  SU            VARCHAR2(1 BYTE),
  LASTSU        VARCHAR2(1 BYTE),
  SEND_SU       NUMBER(1),
  DT_SU         DATE,
  SU_FILE       VARCHAR2(30 BYTE),
  QQ            VARCHAR2(1 BYTE),
  LASTQQ        VARCHAR2(1 BYTE),
  SEND_QQ       VARCHAR2(240 BYTE),
  DT_QQ         DATE,
  QQ_FILE       VARCHAR2(30 BYTE),
  LOGFILE       VARCHAR2(30 BYTE),
  IS_EXP        NUMBER(1),
  NP            NUMBER(10),
  NUM_KVIT      NUMBER(10),
  NUM_CIST      VARCHAR2(10 BYTE),
  DATE_OTGR     DATE,
  LOAD_TYPE_ID  NUMBER(2),
  PROD_ID_NPR   VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.ID_MS IS 'ID поставки в KERNEL';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.VSTEL IS 'ID пункта отгрузки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.ID_SAP IS 'ID поставки в R3';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.ID_SAP_PSN IS 'ID позиции поставки в R3';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.BEDNR IS 'ID услуги в KERNEL';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.VES IS 'Вес "упавший" на позицию поставки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.VBAK_VBELN IS 'Номер разнарядки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.VBAP_POSNR IS 'Позиция';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.OPER IS 'Операция с поставкой (OF)';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.LASTOPER IS 'Предыдущая операция';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SEND_OPER IS 'Признак отправки оперативной отгрузки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DT_OPER IS 'Дата отправки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.OF_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DT_DEL IS 'Дата удаления';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SEND_DOC IS 'Признак отправки документированной отгрузки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DT_DOC IS 'Дата отправки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.OF_FILE_D IS 'Файл';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.OS IS 'Услуги (OS)';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.LASTOS IS 'Предыдущая операция';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SEND_OS IS 'Признак отправки услуги';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DT_OS IS 'Дата отправки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.OS_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SU IS 'Провозная плата (SU)';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.LASTSU IS 'Предыдущая операция';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SEND_SU IS 'Признак отправки провозной платы';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DT_SU IS 'Дата отправки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SU_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.QQ IS 'Сертификаты (QQ)';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.LASTQQ IS 'Предыдущая операция';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.SEND_QQ IS 'Признак отправки сертификата';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DT_QQ IS 'Дата отправки';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.QQ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.LOGFILE IS 'Файл лога';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.IS_EXP IS '1 - ЭКСПОРТ';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.NP IS 'N сведения';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.NUM_KVIT IS 'N квитанции';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.NUM_CIST IS 'N тр.ср-ва';

COMMENT ON COLUMN MASTER.R3_KVIT2SAP.DATE_OTGR IS 'Дата отгрузки';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_OA  (Table) 
--
CREATE TABLE MASTER.R3_OA
(
  ZZZZ_ID     VARCHAR2(50 BYTE)                 NOT NULL,
  VBAK_VBELN  VARCHAR2(30 BYTE),
  VBAP_POSNR  VARCHAR2(10 BYTE),
  KONV_KSCHL  VARCHAR2(10 BYTE),
  KONV_KBETR  VARCHAR2(30 BYTE),
  KONV_KRECH  VARCHAR2(1 BYTE),
  KONV_WAERS  VARCHAR2(10 BYTE),
  KONV_KPEIN  NUMBER(10),
  KONV_KMEIN  VARCHAR2(5 BYTE),
  ZZZZ_SATUS  VARCHAR2(1 BYTE),
  ZZZZ_FILE   VARCHAR2(50 BYTE),
  ZZZZ_DATE   DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_OA.ZZZZ_ID IS 'Ценовое условие';

COMMENT ON COLUMN MASTER.R3_OA.VBAK_VBELN IS 'Номер разнарядки';

COMMENT ON COLUMN MASTER.R3_OA.VBAP_POSNR IS 'Позиция';

COMMENT ON COLUMN MASTER.R3_OA.KONV_KSCHL IS 'Условие разнарядки';

COMMENT ON COLUMN MASTER.R3_OA.KONV_KBETR IS 'Значение условия';

COMMENT ON COLUMN MASTER.R3_OA.KONV_KRECH IS 'Правило расчета (A-%, C-кол-во)';

COMMENT ON COLUMN MASTER.R3_OA.KONV_WAERS IS 'Валюта';

COMMENT ON COLUMN MASTER.R3_OA.KONV_KPEIN IS 'Ед-ца цены условия';

COMMENT ON COLUMN MASTER.R3_OA.KONV_KMEIN IS 'Ед.изм. условия';

COMMENT ON COLUMN MASTER.R3_OA.ZZZZ_SATUS IS 'Статус прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_OA.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_OA.ZZZZ_DATE IS 'Дата прокачки в KERNEL';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_OD  (Table) 
--
CREATE TABLE MASTER.R3_OD
(
  VBAK_VBELN    VARCHAR2(30 BYTE)               NOT NULL,
  VBAP_POSNR    VARCHAR2(10 BYTE)               NOT NULL,
  ZZZZ_ID       VARCHAR2(50 BYTE),
  VBAP_CHARG    VARCHAR2(20 BYTE),
  VBAP_KWMENG   NUMBER(15,6)                    DEFAULT 0,
  VBAP_VRKME    VARCHAR2(5 BYTE),
  VBAP_UEBTO    NUMBER(7,3)                     DEFAULT 0,
  VBAP_KBMENG   NUMBER(15,6)                    DEFAULT 0,
  VBAP_MATNR    VARCHAR2(10 BYTE),
  VBAP_LPRIO    NUMBER(2),
  ZZZZ_STATUS   VARCHAR2(1 BYTE),
  ZZZZ_FILE     VARCHAR2(50 BYTE),
  ZZZZ_DATE     DATE,
  V_TJ30_TXT04  VARCHAR2(5 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_OD.VBAK_VBELN IS 'Номер разнарядки';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_POSNR IS 'Позиция';

COMMENT ON COLUMN MASTER.R3_OD.ZZZZ_ID IS 'Уникальный ID';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_CHARG IS 'Партия';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_KWMENG IS 'Заявленный объем';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_VRKME IS 'Ед.изм.';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_UEBTO IS '% перегруза';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_KBMENG IS 'Разрешенный объем';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_MATNR IS 'Материал';

COMMENT ON COLUMN MASTER.R3_OD.VBAP_LPRIO IS 'Приоритет';

COMMENT ON COLUMN MASTER.R3_OD.ZZZZ_STATUS IS 'Статус прокачки';

COMMENT ON COLUMN MASTER.R3_OD.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_OD.ZZZZ_DATE IS 'Дата прокачки';

COMMENT ON COLUMN MASTER.R3_OD.V_TJ30_TXT04 IS 'Признак блокировки';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_SC  (Table) 
--
CREATE TABLE MASTER.R3_SC
(
  ASNUM        VARCHAR2(10 BYTE)                NOT NULL,
  ASMDT_ASKTX  VARCHAR2(100 BYTE),
  ASMD_MEINS   VARCHAR2(10 BYTE),
  EKKO_ZZ021   VARCHAR2(30 BYTE),
  KERNEL_ID    NUMBER(18),
  KERNEL_TAG   VARCHAR2(30 BYTE),
  ZZZZ_STATUS  VARCHAR2(1 BYTE),
  ZZZZ_FILE    VARCHAR2(50 BYTE),
  ZZZZ_DATE    DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_SC.ASNUM IS 'Услуга ММ_МО';

COMMENT ON COLUMN MASTER.R3_SC.ASMDT_ASKTX IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_SC.ASMD_MEINS IS 'Ед.изм.';

COMMENT ON COLUMN MASTER.R3_SC.EKKO_ZZ021 IS 'Договор';

COMMENT ON COLUMN MASTER.R3_SC.KERNEL_ID IS 'ID в KERNEL';

COMMENT ON COLUMN MASTER.R3_SC.KERNEL_TAG IS 'TAG в KERNEL';

COMMENT ON COLUMN MASTER.R3_SC.ZZZZ_STATUS IS 'Статус прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_SC.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_SC.ZZZZ_DATE IS 'Дата прокачки в KERNEL';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_VAGOWNER  (Table) 
--
CREATE TABLE MASTER.R3_VAGOWNER
(
  R3_VENDORS_ID  VARCHAR2(10 BYTE)              NOT NULL,
  VAGOWNER_ID    NUMBER(10)                     NOT NULL,
  IS_AUTO_LINK   NUMBER(1)                      DEFAULT 1
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON TABLE MASTER.R3_VAGOWNER IS 'Список владельцев/собственников тр.ср-в';

COMMENT ON COLUMN MASTER.R3_VAGOWNER.R3_VENDORS_ID IS 'Собственник тр. ср-ва из R3';

COMMENT ON COLUMN MASTER.R3_VAGOWNER.VAGOWNER_ID IS 'Собственник тр. ср-ва из ФИН';

COMMENT ON COLUMN MASTER.R3_VAGOWNER.IS_AUTO_LINK IS 'Признак автоматической привязки';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_VBAK  (Table) 
--
CREATE TABLE MASTER.R3_VBAK
(
  VBELN            VARCHAR2(30 BYTE)            NOT NULL,
  VBAK_VKORG       CHAR(3 BYTE),
  VBAK_VTWEG       VARCHAR2(3 BYTE),
  VBAP_VSTEL       VARCHAR2(3 BYTE),
  VBAK_ZZ021       VARCHAR2(30 BYTE),
  VBAK_AUART       VARCHAR2(10 BYTE),
  VBAK_VDATU       DATE,
  VBAK_VSBED       VARCHAR2(3 BYTE),
  VBAP_ROUTE       VARCHAR2(10 BYTE),
  VBAP_WERKS       VARCHAR2(3 BYTE),
  LGORT            VARCHAR2(5 BYTE),
  NP_OWNER         VARCHAR2(10 BYTE),
  NP_PRODR         VARCHAR2(10 BYTE),
  MVRG1            VARCHAR2(4 BYTE),
  TEXT3_Y003       VARCHAR2(100 BYTE),
  NPR_NAME         VARCHAR2(100 BYTE),
  TARIF_CODE       VARCHAR2(10 BYTE),
  TRANSP_NUM       VARCHAR2(20 BYTE),
  CONTRACTOR_ATTR  NUMBER(2),
  GAR_Y007         VARCHAR2(10 BYTE),
  MPS_Y006         VARCHAR2(10 BYTE),
  IS_AUTO_LINK     NUMBER(1)                    DEFAULT 1,
  VBKD_BSTKD       VARCHAR2(20 BYTE),
  OT_LIFNR         VARCHAR2(10 BYTE),
  SH_KUNNR         VARCHAR2(10 BYTE),
  VBPA_KUNNR       VARCHAR2(10 BYTE),
  PO_KNA1_NAME1    VARCHAR2(100 BYTE),
  VBPA_KUNNR_SP    VARCHAR2(10 BYTE),
  ZZZZ_STATUS      VARCHAR2(1 BYTE),
  ZZZZ_FILE        VARCHAR2(50 BYTE),
  ZZZZ_DATE        DATE,
  NOM_ZD           VARCHAR2(12 BYTE),
  VBKD_TRATY       VARCHAR2(5 BYTE),
  VBKD_VSART       VARCHAR2(3 BYTE),
  TEXT1_Y005       VARCHAR2(100 BYTE),
  V_TJ30_TXT04     VARCHAR2(5 BYTE),
  VBAP_MATNR       VARCHAR2(10 BYTE),
  VBAP_KBMENG      NUMBER(15,6)                 DEFAULT 0,
  VBAP_KWMENG      NUMBER(15,6)                 DEFAULT 0,
  VBAP_OICONTNR    VARCHAR2(10 BYTE),
  VEDA_VBEGDAT     DATE,
  VBKD_BSTDK       DATE,
  TVAKT_BEZEI      VARCHAR2(20 BYTE),
  VBAP_LPRIO       VARCHAR2(2 BYTE),
  VBAP_POSNR       VARCHAR2(6 BYTE),
  VBAP_VRKME       VARCHAR2(3 BYTE),
  INCO1            VARCHAR2(3 BYTE),
  INCO2            VARCHAR2(30 BYTE),
  ZLSCH            VARCHAR2(1 BYTE),
  STCEG_L          VARCHAR2(3 BYTE),
  ZTERM            VARCHAR2(4 BYTE),
  VBPA_LIFNR_SP    VARCHAR2(10 BYTE),
  VBAK_STCEG_L     VARCHAR2(3 BYTE),
  SPART            VARCHAR2(2 BYTE),
  MONTH_REESTR_ID  NUMBER(10),
  VBELN_POS        VARCHAR2(30 BYTE)
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_VBAK.VBELN IS 'Номер разнарядки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_VKORG IS 'Сбытовая организация (01-КЦ)';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_VTWEG IS 'Канал сбыта (01-экспорт, 02-внутренний рынок)';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_VSTEL IS 'ID пункта отгрузки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_ZZ021 IS 'Договор';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_AUART IS 'Вид разнарядки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_VDATU IS 'Дата разнарядки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_VSBED IS 'Вид транспортировки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_ROUTE IS 'Маршрут';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_WERKS IS 'Завод';

COMMENT ON COLUMN MASTER.R3_VBAK.LGORT IS 'Склад';

COMMENT ON COLUMN MASTER.R3_VBAK.NP_OWNER IS 'Поставщик';

COMMENT ON COLUMN MASTER.R3_VBAK.NP_PRODR IS 'Поставщик';

COMMENT ON COLUMN MASTER.R3_VBAK.MVRG1 IS 'Отгрузка 8-осными';

COMMENT ON COLUMN MASTER.R3_VBAK.TEXT3_Y003 IS 'Графа 4';

COMMENT ON COLUMN MASTER.R3_VBAK.NPR_NAME IS 'Ветка получателя';

COMMENT ON COLUMN MASTER.R3_VBAK.TARIF_CODE IS 'Код искл. тарифа';

COMMENT ON COLUMN MASTER.R3_VBAK.TRANSP_NUM IS 'N транспорта';

COMMENT ON COLUMN MASTER.R3_VBAK.CONTRACTOR_ATTR IS 'Признак договора';

COMMENT ON COLUMN MASTER.R3_VBAK.GAR_Y007 IS 'Оплата по ф.2';

COMMENT ON COLUMN MASTER.R3_VBAK.MPS_Y006 IS 'ЖД код получателя';

COMMENT ON COLUMN MASTER.R3_VBAK.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.R3_VBAK.VBKD_BSTKD IS 'N разнарядки НПО из R3';

COMMENT ON COLUMN MASTER.R3_VBAK.OT_LIFNR IS 'Поставщик';

COMMENT ON COLUMN MASTER.R3_VBAK.SH_KUNNR IS 'Покупатель';

COMMENT ON COLUMN MASTER.R3_VBAK.VBPA_KUNNR IS 'Покупатель';

COMMENT ON COLUMN MASTER.R3_VBAK.PO_KNA1_NAME1 IS 'Потребитель';

COMMENT ON COLUMN MASTER.R3_VBAK.VBPA_KUNNR_SP IS 'Покупатель';

COMMENT ON COLUMN MASTER.R3_VBAK.ZZZZ_STATUS IS 'Статус прокачки';

COMMENT ON COLUMN MASTER.R3_VBAK.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_VBAK.ZZZZ_DATE IS 'Дата прокачки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBKD_TRATY IS 'Род вагона';

COMMENT ON COLUMN MASTER.R3_VBAK.VBKD_VSART IS 'Собственник вагона';

COMMENT ON COLUMN MASTER.R3_VBAK.TEXT1_Y005 IS 'Примечание';

COMMENT ON COLUMN MASTER.R3_VBAK.V_TJ30_TXT04 IS 'Признак блокировки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_MATNR IS 'Материал';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_KBMENG IS 'Разрешенный объем (без учета блокированных позиций)';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_KWMENG IS 'Заявленный объем (без учета блокированных позиций)';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_OICONTNR IS 'Код договорного документа';

COMMENT ON COLUMN MASTER.R3_VBAK.VEDA_VBEGDAT IS 'Дата начала действия договора';

COMMENT ON COLUMN MASTER.R3_VBAK.TVAKT_BEZEI IS 'Название вида разнарядки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_LPRIO IS 'Приоритет поставки(00-Отгр. по указ-ю рук.,01-Отгр. в 1-ю очередь,02-Отгр. обязательно,03-Отгр. по возможности)';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_POSNR IS '№ позиции разнарядки';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAP_VRKME IS 'Единица измерения';

COMMENT ON COLUMN MASTER.R3_VBAK.INCO1 IS 'Инкотермс. Часть 1.';

COMMENT ON COLUMN MASTER.R3_VBAK.INCO2 IS 'Инкотермс. Часть 2.';

COMMENT ON COLUMN MASTER.R3_VBAK.ZLSCH IS 'Способ платежа.';

COMMENT ON COLUMN MASTER.R3_VBAK.STCEG_L IS 'Страна назначения.';

COMMENT ON COLUMN MASTER.R3_VBAK.ZTERM IS 'Условия платежа.';

COMMENT ON COLUMN MASTER.R3_VBAK.VBPA_LIFNR_SP IS 'Код экспедитора';

COMMENT ON COLUMN MASTER.R3_VBAK.VBAK_STCEG_L IS 'Страна назначения.';

COMMENT ON COLUMN MASTER.R3_VBAK.SPART IS 'Сектор сбыта(10 - нефть,20– нефтепродукты 30 – газ 40 – продукты г.п. 45- нефтехимия 50- прочие ТМЦ)';

COMMENT ON COLUMN MASTER.R3_VBAK.MONTH_REESTR_ID IS 'ID реестра';

COMMENT ON COLUMN MASTER.R3_VBAK.VBELN_POS IS 'Позиция разнарядки';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_VENDORS  (Table) 
--
CREATE TABLE MASTER.R3_VENDORS
(
  ID            VARCHAR2(10 BYTE)               NOT NULL,
  NAME          VARCHAR2(100 BYTE),
  CITY          VARCHAR2(50 BYTE),
  POST_CODE     VARCHAR2(10 BYTE),
  STREET        VARCHAR2(100 BYTE),
  HOUSE_NUM     VARCHAR2(20 BYTE),
  INN           VARCHAR2(20 BYTE),
  IS_AUTO_LINK  NUMBER(1)                       DEFAULT 1,
  PREDPR_ID     NUMBER(6),
  CUSTOMERS_ID  VARCHAR2(10 BYTE),
  ZZZZ_STATUS   VARCHAR2(1 BYTE),
  ZZZZ_FILE     VARCHAR2(50 BYTE),
  ZZZZ_DATE     DATE
)
TABLESPACE USERS2
NOCOMPRESS ;

COMMENT ON COLUMN MASTER.R3_VENDORS.ID IS 'Поставщик';

COMMENT ON COLUMN MASTER.R3_VENDORS.NAME IS 'Наименование';

COMMENT ON COLUMN MASTER.R3_VENDORS.CITY IS 'Город';

COMMENT ON COLUMN MASTER.R3_VENDORS.POST_CODE IS 'Почтовый код';

COMMENT ON COLUMN MASTER.R3_VENDORS.STREET IS 'Улица';

COMMENT ON COLUMN MASTER.R3_VENDORS.HOUSE_NUM IS 'N дома';

COMMENT ON COLUMN MASTER.R3_VENDORS.INN IS 'ИНН';

COMMENT ON COLUMN MASTER.R3_VENDORS.IS_AUTO_LINK IS 'Автоматическая связь';

COMMENT ON COLUMN MASTER.R3_VENDORS.CUSTOMERS_ID IS 'Покупатель';

COMMENT ON COLUMN MASTER.R3_VENDORS.ZZZZ_STATUS IS 'Статус прокачки в KERNEL';

COMMENT ON COLUMN MASTER.R3_VENDORS.ZZZZ_FILE IS 'Файл';

COMMENT ON COLUMN MASTER.R3_VENDORS.ZZZZ_DATE IS 'Дата прокачки в KERNEL';



/* This object may not be sorted properly in the script due to cirular references. */
--
-- CC_CUSTOMERS_FK_I  (Index) 
--
CREATE INDEX MASTER.CC_CUSTOMERS_FK_I ON MASTER.R3_CC
(CUSTOMERS_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- CC_DOG_FK_I  (Index) 
--
CREATE INDEX MASTER.CC_DOG_FK_I ON MASTER.R3_CC
(DOG_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- CC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.CC_PK ON MASTER.R3_CC
(EKKO_ZZ021)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- CC_VENDORS_FK_I  (Index) 
--
CREATE INDEX MASTER.CC_VENDORS_FK_I ON MASTER.R3_CC
(EKKO_LIFNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.CUSTOMERS_PK ON MASTER.R3_CUSTOMERS
(ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- CUSTOMERS_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.CUSTOMERS_PREDPR_FK_I ON MASTER.R3_CUSTOMERS
(PREDPR_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- CUSTOMERS_VENDORS_FK_I  (Index) 
--
CREATE INDEX MASTER.CUSTOMERS_VENDORS_FK_I ON MASTER.R3_CUSTOMERS
(VENDORS_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BFILD_FIL_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BFILD_FIL_FK_I ON MASTER.EUL_BQ_DEPS
(BFILD_FIL_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BFUND_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BFUND_FUN_FK_I ON MASTER.EUL_BQ_DEPS
(BFUND_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BID_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BID_IT_FK_I ON MASTER.EUL_BQ_DEPS
(BID_IT_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BQD_BQD1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQD_BQD1_UK ON MASTER.EUL_BQ_DEPS
(BQD_TYPE, BQD_BQ_ID, BFILD_FIL_ID, BID_IT_ID, BFUND_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BQD_BQ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_BQD_BQ_FK_I ON MASTER.EUL_BQ_DEPS
(BQD_BQ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_BQD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_BQD_PK ON MASTER.EUL_BQ_DEPS
(BQD_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_CD_CI_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_CD_CI_FK_I ON MASTER.EUL_EXP_DEPS
(CD_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_CFD_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_CFD_FUN_FK_I ON MASTER.EUL_EXP_DEPS
(CFD_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_CID_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_CID_IT_FK_I ON MASTER.EUL_EXP_DEPS
(CID_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_CI_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_CI_IT_FK_I ON MASTER.EUL_EXPRESSIONS
(CI_IT_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_CO1_I  (Index) 
--
CREATE INDEX MASTER.EUL_CO1_I ON MASTER.EUL_EXPRESSIONS
(IT_EXT_COLUMN)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_CPD_PAR_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_CPD_PAR_FK_I ON MASTER.EUL_EXP_DEPS
(CPD_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_DOM_DOM2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_DOM_DOM2_UK ON MASTER.EUL_DOMAINS
(DOM_NAME)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_DOM_IT_L_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_DOM_IT_L_FK_I ON MASTER.EUL_DOMAINS
(DOM_IT_ID_LOV)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_DOM_IT_R_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_DOM_IT_R_FK_I ON MASTER.EUL_DOMAINS
(DOM_IT_ID_RANK)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_DOM_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_DOM_PK ON MASTER.EUL_DOMAINS
(DOM_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_ED_ED1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_ED_ED1_UK ON MASTER.EUL_EXP_DEPS
(PSD_SQ_ID, PFD_FUN_ID, CD_EXP_ID, PED_EXP_ID, PD_P_ID, 
CFD_FUN_ID, CPD_EXP_ID, CID_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_ED_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_ED_PK ON MASTER.EUL_EXP_DEPS
(ED_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_EXP_EXP1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_EXP_EXP1_UK ON MASTER.EUL_EXPRESSIONS
(ITE_EU_ID, NJP_EU_ID, JP_KEY_ID, NJP_OBJ_ID_OWNER, ITE_OBJ_ID, 
EXP_NAME)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_EXP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_EXP_PK ON MASTER.EUL_EXPRESSIONS
(EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_HIL_HN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_HIL_HN_FK_I ON MASTER.EUL_IG_EXP_LINKS
(HIL_HN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_HIL_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_HIL_IT_FK_I ON MASTER.EUL_IG_EXP_LINKS
(HIL_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_IEL_IEL1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_IEL_IEL1_UK ON MASTER.EUL_IG_EXP_LINKS
(KIL_EXP_ID, KIL_KEY_ID, HIL_EXP_ID, HIL_HN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_IEL_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_IEL_PK ON MASTER.EUL_IG_EXP_LINKS
(IEL_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_ITE_DOM_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_ITE_DOM_FK_I ON MASTER.EUL_EXPRESSIONS
(ITE_DOM_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_ITE_EU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_ITE_EU_FK_I ON MASTER.EUL_EXPRESSIONS
(ITE_EU_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_ITE_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_ITE_OBJ_FK_I ON MASTER.EUL_EXPRESSIONS
(ITE_OBJ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_IT_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IT_FUN_FK_I ON MASTER.EUL_EXPRESSIONS
(IT_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_IT_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IT_IT_FK_I ON MASTER.EUL_EXPRESSIONS
(IT_EXP_ID_DESC_FOR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_IT_KEY_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_IT_KEY_FK_I ON MASTER.EUL_EXPRESSIONS
(IT_KEY_ID_DESC_FOR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_JP_FK_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_JP_FK_FK_I ON MASTER.EUL_EXPRESSIONS
(JP_KEY_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_KIL_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_KIL_IT_FK_I ON MASTER.EUL_IG_EXP_LINKS
(KIL_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_KIL_KEY_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_KIL_KEY_FK_I ON MASTER.EUL_IG_EXP_LINKS
(KIL_KEY_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_NJP_EU_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_NJP_EU_FK_I ON MASTER.EUL_EXPRESSIONS
(NJP_EU_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_NJP_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_NJP_OBJ_FK_I ON MASTER.EUL_EXPRESSIONS
(NJP_OBJ_ID_OWNER)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_BQ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OSS_BQ_FK_I ON MASTER.EUL_SEGMENTS
(OSS_BQ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_CUO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OSS_CUO_FK_I ON MASTER.EUL_SEGMENTS
(OSS_CUO_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_EXP_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OSS_EXP_FK_I ON MASTER.EUL_SEGMENTS
(OSS_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OSS_OBJ_FK_I ON MASTER.EUL_SEGMENTS
(OSS_OBJ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_OSS2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OSS_OSS2_UK ON MASTER.EUL_SEGMENTS
(OSS_SUMO_ID, OSS_SEG_TYPE, OSS_SEQUENCE, OSS_OBJ_ID, OSS_CUO_ID, 
OSS_BQ_ID, OSS_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_OSS_PK ON MASTER.EUL_SEGMENTS
(OSS_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_OSS_SDO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_OSS_SDO_FK_I ON MASTER.EUL_SEGMENTS
(OSS_SUMO_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_PAR_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_PAR_IT_FK_I ON MASTER.EUL_EXPRESSIONS
(PAR_EXP_ID_ASSOC)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_PD_P_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_PD_P_FK_I ON MASTER.EUL_EXP_DEPS
(PD_P_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_PED_EXP_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_PED_EXP_FK_I ON MASTER.EUL_EXP_DEPS
(PED_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_PFD_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_PFD_FUN_FK_I ON MASTER.EUL_EXP_DEPS
(PFD_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_PSD_SQ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_PSD_SQ_FK_I ON MASTER.EUL_EXP_DEPS
(PSD_SQ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SAIL_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SAIL_IT_FK_I ON MASTER.EUL_SBO_DSGN_ELEMS
(SAIL_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SB_FK_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SB_FK_FK_I ON MASTER.EUL_SUM_BITMAPS
(SB_KEY_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SB_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SB_FUN_FK_I ON MASTER.EUL_SUM_BITMAPS
(SB_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SB_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SB_IT_FK_I ON MASTER.EUL_SUM_BITMAPS
(SB_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SB_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SB_PK ON MASTER.EUL_SUM_BITMAPS
(SB_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SB_SB2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SB_SB2_UK ON MASTER.EUL_SUM_BITMAPS
(SB_EXP_ID, SB_KEY_ID, SB_FUN_ID, SB_SEQUENCE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SDE_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SDE_PK ON MASTER.EUL_SBO_DSGN_ELEMS
(SDE_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SDE_SBO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SDE_SBO_FK_I ON MASTER.EUL_SBO_DSGN_ELEMS
(SDE_SUMO_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SDE_SDE1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SDE_SDE1_UK ON MASTER.EUL_SBO_DSGN_ELEMS
(SDE_SUMO_ID, SAIL_EXP_ID, SMIL_EXP_ID, SMIL_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SIU_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SIU_IT_FK_I ON MASTER.EUL_SUMO_ITEM_USGS
(SIU_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SIU_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SIU_PK ON MASTER.EUL_SUMO_ITEM_USGS
(SIU_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SIU_SIU1_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SIU_SIU1_UK ON MASTER.EUL_SUMO_ITEM_USGS
(SIU_TYPE, SIU_SUMO_ID, SIU_EXP_ID, SMIU_FUN_ID, SMIU_MEASURE_SET)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SIU_SUMO_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SIU_SUMO_FK_I ON MASTER.EUL_SUMO_ITEM_USGS
(SIU_SUMO_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SMIL_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SMIL_FUN_FK_I ON MASTER.EUL_SBO_DSGN_ELEMS
(SMIL_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SMIL_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SMIL_IT_FK_I ON MASTER.EUL_SBO_DSGN_ELEMS
(SMIL_EXP_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SMIU_FUN_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SMIU_FUN_FK_I ON MASTER.EUL_SUMO_ITEM_USGS
(SMIU_FUN_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQC_IT_I_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SQC_IT_I_FK_I ON MASTER.EUL_SQ_CRRLTNS
(SQC_IT_INNER_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQC_IT_O_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SQC_IT_O_FK_I ON MASTER.EUL_SQ_CRRLTNS
(SQC_IT_OUTER_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SQC_PK ON MASTER.EUL_SQ_CRRLTNS
(SQC_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQC_SQC2_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SQC_SQC2_UK ON MASTER.EUL_SQ_CRRLTNS
(SQC_SQ_ID, SQC_IT_INNER_ID, SQC_IT_OUTER_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQC_SQ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SQC_SQ_FK_I ON MASTER.EUL_SQ_CRRLTNS
(SQC_SQ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQ_FIL_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SQ_FIL_FK_I ON MASTER.EUL_SUB_QUERIES
(SQ_FIL_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQ_IT_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SQ_IT_FK_I ON MASTER.EUL_SUB_QUERIES
(SQ_IT_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQ_OBJ_FK_I  (Index) 
--
CREATE INDEX MASTER.EUL_SQ_OBJ_FK_I ON MASTER.EUL_SUB_QUERIES
(SQ_OBJ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_SQ_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.EUL_SQ_PK ON MASTER.EUL_SUB_QUERIES
(SQ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KONV_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KONV_PK ON MASTER.R3_KONV
(KSCHL)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KONV_SC_FK_I  (Index) 
--
CREATE INDEX MASTER.KONV_SC_FK_I ON MASTER.R3_KONV
(MATCH_ASNUM)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KSSS_PREDPR_R3_CUST_DESC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KSSS_PREDPR_R3_CUST_DESC_PK ON MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC
(KSSS_PREDPR_ID, R3_CUSTOMERS)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KSSS_PREDPR_R3_VENDORS_DESC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KSSS_PREDPR_R3_VENDORS_DESC_PK ON MASTER.KSSS_PREDPR_R3_VENDORS_DESC
(KSSS_PREDPR_ID, R3_VENDORS)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KVIT2SAP_LOAD_TYPE_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT2SAP_LOAD_TYPE_FK_I ON MASTER.R3_KVIT2SAP
(LOAD_TYPE_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KVIT2SAP_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT2SAP_MONTH_FK_I ON MASTER.R3_KVIT2SAP
(NOM_ZD)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KVIT2SAP_OD_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT2SAP_OD_FK_I ON MASTER.R3_KVIT2SAP
(VBAK_VBELN, VBAP_POSNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KVIT2SAP_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.KVIT2SAP_PK ON MASTER.R3_KVIT2SAP
(ID_MS)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KVIT2SAP_PROD_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT2SAP_PROD_FK_I ON MASTER.R3_KVIT2SAP
(PROD_ID_NPR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- KVIT2SAP_VSTEL_FK_I  (Index) 
--
CREATE INDEX MASTER.KVIT2SAP_VSTEL_FK_I ON MASTER.R3_KVIT2SAP
(VSTEL)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OA_KONV_FK_I  (Index) 
--
CREATE INDEX MASTER.OA_KONV_FK_I ON MASTER.R3_OA
(KONV_KSCHL)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OA_OD_FK_I  (Index) 
--
CREATE INDEX MASTER.OA_OD_FK_I ON MASTER.R3_OA
(VBAK_VBELN, VBAP_POSNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OA_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OA_PK ON MASTER.R3_OA
(ZZZZ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OD_BLOCKS_FK_I  (Index) 
--
CREATE INDEX MASTER.OD_BLOCKS_FK_I ON MASTER.R3_OD
(V_TJ30_TXT04)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OD_LPRIO_FK_I  (Index) 
--
CREATE INDEX MASTER.OD_LPRIO_FK_I ON MASTER.R3_OD
(VBAP_LPRIO)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OD_MATERIALS_FK_I  (Index) 
--
CREATE INDEX MASTER.OD_MATERIALS_FK_I ON MASTER.R3_OD
(VBAP_MATNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OD_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OD_PK ON MASTER.R3_OD
(VBAK_VBELN, VBAP_POSNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OD_R3_OD_AK_UK  (Index) 
--
CREATE UNIQUE INDEX MASTER.OD_R3_OD_AK_UK ON MASTER.R3_OD
(ZZZZ_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- OD_VBAK_FK_I  (Index) 
--
CREATE INDEX MASTER.OD_VBAK_FK_I ON MASTER.R3_OD
(VBAK_VBELN)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- PK_R3_VAGOWNER  (Index) 
--
CREATE UNIQUE INDEX MASTER.PK_R3_VAGOWNER ON MASTER.R3_VAGOWNER
(R3_VENDORS_ID, VAGOWNER_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_CC_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.R3_CC_ZZZZ_DATE_I ON MASTER.R3_CC
(ZZZZ_DATE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_CUSTOMERS_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.R3_CUSTOMERS_ZZZZ_DATE_I ON MASTER.R3_CUSTOMERS
(ZZZZ_DATE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_KVIT2SAP_KVIT_ID_I  (Index) 
--
CREATE INDEX MASTER.R3_KVIT2SAP_KVIT_ID_I ON MASTER.R3_KVIT2SAP
(KVIT_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_OA_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.R3_OA_ZZZZ_DATE_I ON MASTER.R3_OA
(ZZZZ_DATE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_OD_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.R3_OD_ZZZZ_DATE_I ON MASTER.R3_OD
(ZZZZ_DATE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- R3_VENDORS_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.R3_VENDORS_ZZZZ_DATE_I ON MASTER.R3_VENDORS
(ZZZZ_DATE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- SC_CC_FK_I  (Index) 
--
CREATE INDEX MASTER.SC_CC_FK_I ON MASTER.R3_SC
(EKKO_ZZ021)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- SC_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.SC_PK ON MASTER.R3_SC
(ASNUM)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_AUART_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_AUART_FK_I ON MASTER.R3_VBAK
(VBAK_AUART)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_BLOCKS_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_BLOCKS_FK_I ON MASTER.R3_VBAK
(V_TJ30_TXT04)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_CC_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_CC_FK_I ON MASTER.R3_VBAK
(VBAK_ZZ021)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_MATERIALS_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_MATERIALS_FK_I ON MASTER.R3_VBAK
(VBAP_MATNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_MONTH_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_MONTH_FK_I ON MASTER.R3_VBAK
(NOM_ZD)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_NP_OWNER_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_NP_OWNER_FK_I ON MASTER.R3_VBAK
(NP_OWNER)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_NP_PRODR_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_NP_PRODR_FK_I ON MASTER.R3_VBAK
(NP_PRODR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_OT_LIFNR_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_OT_LIFNR_FK_I ON MASTER.R3_VBAK
(OT_LIFNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VBAK_PK ON MASTER.R3_VBAK
(VBELN)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_ROUTES_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_ROUTES_FK_I ON MASTER.R3_VBAK
(VBAP_ROUTE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_SH_KUNNR_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_SH_KUNNR_FK_I ON MASTER.R3_VBAK
(SH_KUNNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_TRATY_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_TRATY_FK_I ON MASTER.R3_VBAK
(VBKD_TRATY)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_VBPA_KUNNR_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_VBPA_KUNNR_FK_I ON MASTER.R3_VBAK
(VBPA_KUNNR)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_VBPA_KUNNR_SP_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_VBPA_KUNNR_SP_FK_I ON MASTER.R3_VBAK
(VBPA_KUNNR_SP)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_VSART_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_VSART_FK_I ON MASTER.R3_VBAK
(VBKD_VSART)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_VSBED_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_VSBED_FK_I ON MASTER.R3_VBAK
(VBAK_VSBED)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_VSTEL_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_VSTEL_FK_I ON MASTER.R3_VBAK
(VBAP_VSTEL)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_WERK_LGORT_FK_I  (Index) 
--
CREATE INDEX MASTER.VBAK_WERK_LGORT_FK_I ON MASTER.R3_VBAK
(VBAP_WERKS, LGORT)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VBAK_ZZZZ_DATE_I  (Index) 
--
CREATE INDEX MASTER.VBAK_ZZZZ_DATE_I ON MASTER.R3_VBAK
(ZZZZ_DATE)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VENDORS_CUSTOMERS_FK_I  (Index) 
--
CREATE INDEX MASTER.VENDORS_CUSTOMERS_FK_I ON MASTER.R3_VENDORS
(CUSTOMERS_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VENDORS_PK  (Index) 
--
CREATE UNIQUE INDEX MASTER.VENDORS_PK ON MASTER.R3_VENDORS
(ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- VENDORS_PREDPR_FK_I  (Index) 
--
CREATE INDEX MASTER.VENDORS_PREDPR_FK_I ON MASTER.R3_VENDORS
(PREDPR_ID)
TABLESPACE USERSINDX;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- FOR_R3  (Package) 
--
CREATE OR REPLACE PACKAGE MASTER.For_R3 AS

  PROCEDURE RaiseError (pText VARCHAR2);
  PROCEDURE RENEW_VSTEL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_VSBED (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_VSART (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_WERKS_LGORT (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_BLOCKS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_AUART (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_R3_GD (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_PREDPR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_MATERIALS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_MATERIALS_GRP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_CC (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  FUNCTION R2M_PREDPR (R3_KOD VARCHAR2) RETURN NUMBER;
  FUNCTION R2M_DOG (R3_KOD VARCHAR2) RETURN NUMBER;
  PROCEDURE RENEW_SC (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_KONV (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_OA (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_ROUTENODES (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_ROUTES (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_ROUTE_FULL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_LPRIO (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_VBAK (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');
  PROCEDURE RENEW_OD (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='');

  /*Добавление записи в таблицу R3_VBAK при экспорте из текстового файла*/
  procedure AddVbakRow(pCOMMIT NUMBER, pVBAP_VSTEL VARCHAR2,  pVBKD_BSTKD VARCHAR2,pVBKD_BSTDK varchar2,
   pVBAK_VBELN VARCHAR2, pVBAP_POSNR varchar2,pVBAK_VDATU varchar2,pVBAK_VSBED VARCHAR2,pUNKNOWN1 VARCHAR2,
   pVBAP_MATNR VARCHAR2,pOT_LIFNR VARCHAR2,pUNKNOWN2 VARCHAR2,pUNKNOWN3 VARCHAR2,
   pVBAK_VKORG VARCHAR2, pVBAK_VTWEG VARCHAR2, 
    pVBAP_OICONTNR VARCHAR2, pVBAK_ZZ021 VARCHAR2, pVEDA_VBEGDAT varchar2,  
    	pVBAK_AUART VARCHAR2, pTVAKT_BEZEI VARCHAR2,  
	pVBKD_VSART VARCHAR2, pVBKD_TRATY VARCHAR2, pVBAP_LPRIO VARCHAR2, pVBAP_ROUTE VARCHAR2,
	 pVBAP_WERKS VARCHAR2, pLGORT VARCHAR2,  pVBAP_KWMENG varchar2, 
	pVBAP_VRKME VARCHAR2,  pSH_KUNNR VARCHAR2, pINCO1 VARCHAR2, pINCO2 VARCHAR2,
	pZLSCH VARCHAR2, pSTCEG_L VARCHAR2, pZTERM VARCHAR2, pV_TJ30_TXT04 VARCHAR2, pVBPA_KUNNR VARCHAR2, 
	pVBPA_LIFNR_SP VARCHAR2, pVBAK_STCEG_L VARCHAR2, pSPART VARCHAR2);
  
  procedure DelVbakRow(pCOMMIT NUMBER, pVBELN VARCHAR2); 
	 

  /*Добавление записи в таблицу R3_KVIT2SAP при экспорте из текстового файла*/
  procedure AddRCRow(pCOMMIT NUMBER, pID_MS VARCHAR2, pVSTEL VARCHAR2, pID_SAP VARCHAR2, pID_SAP_PSN VARCHAR2); 

  /*Удаление записи из таблицы R3_KVIT2SAP */
  procedure DelRCRow(pCOMMIT NUMBER, pID_SAP VARCHAR2); 
	
  -- Вернуть номер файла для выгрузки поставок
  FUNCTION GET_SEQ_OF RETURN NUMBER;
	
END;

/

/* This object may not be sorted properly in the script due to cirular references. */
--
-- FOR_R3  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_R3 AS
-- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

--
PROCEDURE RENEW_VSTEL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_VSTEL A
--      SET (VTEXT, KERNEL_ID) =
--	  (SELECT B.VTEXT, B.KERNEL_ID FROM R3.VSTEL@UNPO.WORLD B WHERE B.VSTEL=A.VBAP_VSTEL)
--    WHERE EXISTS (SELECT NULL FROM R3.VSTEL@UNPO.WORLD B WHERE B.VSTEL=A.VBAP_VSTEL);

    COMMIT;
  END IF;

--  INSERT INTO R3_VSTEL (VBAP_VSTEL,VTEXT,KERNEL_ID)
--    (SELECT VSTEL,VTEXT,KERNEL_ID FROM R3.VSTEL@UNPO.WORLD B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_VSTEL A WHERE A.VBAP_VSTEL=B.VSTEL));

  COMMIT;

  -- Добавление из OD
--  INSERT INTO R3_VSTEL (VBAP_VSTEL)
--    (SELECT VBAP_VSTEL FROM (SELECT DISTINCT VBAP_VSTEL FROM R3.OD@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_VSTEL A WHERE A.VBAP_VSTEL=B.VBAP_VSTEL)
--	  AND B.VBAP_VSTEL IS NOT NULL);

  COMMIT;

END;

PROCEDURE RENEW_VSBED (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_VSBED A
--      SET (NAME, KERNEL_ID) =
--	  (SELECT B.VTEXT, B.KERNEL_ID FROM R3.VSBED@UNPO.WORLD B WHERE B.VSBED=A.VBAK_VSBED)
--    WHERE EXISTS (SELECT NULL FROM R3.VSBED@UNPO.WORLD B WHERE B.VSBED=A.VBAK_VSBED);

    COMMIT;
  END IF;

--  INSERT INTO R3_VSBED (VBAK_VSBED,NAME,KERNEL_ID)
--    (SELECT VSBED,VTEXT,KERNEL_ID FROM R3.VSBED@UNPO.WORLD B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_VSBED A WHERE A.VBAK_VSBED=B.VSBED));

  COMMIT;

  -- Добавление из OD
--  INSERT INTO R3_VSBED (VBAK_VSBED)
--    (SELECT VBAK_VSBED FROM (SELECT DISTINCT VBAK_VSBED FROM R3.OD@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_VSBED A WHERE A.VBAK_VSBED=B.VBAK_VSBED)
--	  AND B.VBAK_VSBED IS NOT NULL);

  COMMIT;

END;

PROCEDURE RENEW_VSART (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_VSART A
--      SET (NAME, KERNEL_ID) =
--	  (SELECT B.BEZEI, B.KERNEL_ID FROM R3.VSART@UNPO.WORLD B WHERE B.VSART=A.VBKD_VSART)
--    WHERE EXISTS (SELECT NULL FROM R3.VSART@UNPO.WORLD B WHERE B.VSART=A.VBKD_VSART);

    COMMIT;
  END IF;

--  INSERT INTO R3_VSART (VBKD_VSART,NAME,KERNEL_ID)
--    (SELECT VSART,BEZEI,KERNEL_ID FROM R3.VSART@UNPO.WORLD B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_VSART A WHERE A.VBKD_VSART=B.VSART));

  COMMIT;

  -- Добавление из OD
--  INSERT INTO R3_VSART (VBKD_VSART)
--    (SELECT VBKD_VSART FROM (SELECT DISTINCT VBKD_VSART FROM R3.OD@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_VSART A WHERE A.VBKD_VSART=B.VBKD_VSART)
--	  AND B.VBKD_VSART IS NOT NULL);

  COMMIT;
END;

PROCEDURE RENEW_WERKS_LGORT (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_WERKS_LGORT A
--      SET (LGOBE) =
--	  (SELECT LGOBE FROM R3.WERKS_LGORT@UNPO.WORLD B WHERE B.WERKS=A.VBAP_WERKS AND B.LGORT=A.LGORT)
--    WHERE EXISTS (SELECT NULL FROM R3.WERKS_LGORT@UNPO.WORLD B WHERE B.WERKS=A.VBAP_WERKS AND B.LGORT=A.LGORT);

    COMMIT;
  END IF;

--  INSERT INTO R3_WERKS_LGORT (VBAP_WERKS, LGORT, LGOBE)
--    (SELECT WERKS,LGORT,LGOBE FROM R3.WERKS_LGORT@UNPO.WORLD B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_WERKS_LGORT A WHERE A.VBAP_WERKS=B.WERKS AND A.LGORT=B.LGORT)
--	  AND B.WERKS IS NOT NULL
--	  AND B.LGORT IS NOT NULL);

  COMMIT;

  -- Добавление из OD
--  INSERT INTO R3_WERKS_LGORT (VBAP_WERKS, LGORT)
--    (SELECT VBAP_WERKS, LGORT FROM (SELECT DISTINCT VBAP_WERKS, LGORT FROM R3.OD@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_WERKS_LGORT A WHERE A.VBAP_WERKS=B.VBAP_WERKS AND A.LGORT=B.LGORT)
--	  AND B.VBAP_WERKS IS NOT NULL
--	  AND B.LGORT IS NOT NULL);

  COMMIT;

END;

PROCEDURE RENEW_BLOCKS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_BLOCKS A
--      SET (NAME, KERNEL_ID) =
--	  (SELECT NAME, KERNEL_ID FROM R3.J_STMAINT_ANWS@UNPO.WORLD B WHERE B.KOD=A.V_TJ30_TXT04)
--    WHERE EXISTS (SELECT NULL FROM R3.J_STMAINT_ANWS@UNPO.WORLD B WHERE B.KOD=A.V_TJ30_TXT04);

    COMMIT;
  END IF;

--  INSERT INTO R3_BLOCKS (V_TJ30_TXT04,NAME,KERNEL_ID)
--    (SELECT KOD,NAME,KERNEL_ID FROM R3.J_STMAINT_ANWS@UNPO.WORLD B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_BLOCKS A WHERE A.V_TJ30_TXT04=B.KOD));

  COMMIT;

  -- Обновление из OD
--  INSERT INTO R3_BLOCKS (V_TJ30_TXT04)
--    (SELECT V_TJ30_TXT04 FROM (SELECT DISTINCT V_TJ30_TXT04 FROM R3.OD@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_BLOCKS A WHERE A.V_TJ30_TXT04=B.V_TJ30_TXT04)
--	  AND B.V_TJ30_TXT04 IS NOT NULL);

  COMMIT;
  
END;

PROCEDURE RENEW_AUART (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_AUART A
--      SET (TVAKT_BEZEI) =
--	  (SELECT TVAKT_BEZEI FROM (SELECT DISTINCT VBAK_AUART, TVAKT_BEZEI FROM R3.OD@UNPO.WORLD) B WHERE B.VBAK_AUART=A.VBAK_AUART)
--    WHERE EXISTS (SELECT NULL FROM (SELECT DISTINCT VBAK_AUART, TVAKT_BEZEI FROM R3.OD@UNPO.WORLD) B WHERE B.VBAK_AUART=A.VBAK_AUART);

    COMMIT;
  END IF;

--  INSERT INTO R3_AUART (VBAK_AUART,TVAKT_BEZEI)
--    (SELECT B.VBAK_AUART, B.TVAKT_BEZEI FROM (SELECT DISTINCT VBAK_AUART, TVAKT_BEZEI FROM R3.OD@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_AUART A WHERE A.VBAK_AUART=B.VBAK_AUART));

  COMMIT;

END;

PROCEDURE RENEW_R3_GD (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  IF IsFull=1 THEN
--    UPDATE R3_GD A
--      SET (STREKL) =
--	  (SELECT STREKL FROM (SELECT DISTINCT BAHNR, STREKL FROM R3.ROUTENODES@UNPO.WORLD) B WHERE B.BAHNR=A.BAHNR)
--    WHERE EXISTS (SELECT NULL FROM (SELECT DISTINCT BAHNR, STREKL FROM R3.ROUTENODES@UNPO.WORLD) B WHERE B.BAHNR=A.BAHNR);

    COMMIT;
  END IF;

--  INSERT INTO R3_GD (BAHNR, STREKL)
--    (SELECT BAHNR, STREKL FROM (SELECT DISTINCT BAHNR, STREKL FROM R3.ROUTENODES@UNPO.WORLD) B
--    WHERE NOT EXISTS (SELECT NULL FROM R3_GD A WHERE A.BAHNR=B.BAHNR)
--	  AND BAHNR IS NOT NULL);

  COMMIT;

END;

PROCEDURE RENEW_PREDPR (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Обновление CUSTOMERS
/*  UPDATE R3_CUSTOMERS A
      SET (NAME, CITY, POST_CODE, STREET, HOUSE_NUM, BAHNS,
	       CITY_P, POST_CODE_P, ADREESS_P, INN, KVERM, BIK, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
     (SELECT NAME1||' '||NAME2||' '||NAME3, CITY1, POST_CODE1, STREET, HOUSE_NUM1,BAHNS,
	         PO_BOX_LOC, PO_BOX, LOCATION, STCD1, KVERM, STCD2, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
			 FROM R3.CUSTOMERS@UNPO.WORLD B WHERE B.KUNNR=A.ID AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.CUSTOMERS@UNPO.WORLD B WHERE B.KUNNR=A.ID AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));

  -- Обновление VENDORS
  UPDATE R3_VENDORS A
      SET (NAME, CITY, POST_CODE, STREET, HOUSE_NUM, INN, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
     (SELECT NAME1||' '||NAME2||' '||NAME3, CITY1, POST_CODE1, STREET, HOUSE_NUM1,
	         STCD1, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
			 FROM R3.VENDORS@UNPO.WORLD B WHERE B.LIFNR=A.ID AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.VENDORS@UNPO.WORLD B WHERE B.LIFNR=A.ID AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));

    COMMIT;

  -- Добавление в CUSTOMERS
  INSERT INTO R3_CUSTOMERS (ID,NAME, CITY, POST_CODE, STREET, HOUSE_NUM,BAHNS,
	       CITY_P, POST_CODE_P, ADREESS_P, INN, KVERM, BIK, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT KUNNR,NAME1||' '||NAME2||' '||NAME3, CITY1, POST_CODE1, STREET, HOUSE_NUM1,BAHNS,
	         PO_BOX_LOC, PO_BOX, LOCATION, STCD1, KVERM, STCD2, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
			 FROM R3.CUSTOMERS@UNPO.WORLD B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CUSTOMERS A WHERE A.ID=B.KUNNR));

  -- Добавление в VENDORS
  INSERT INTO R3_VENDORS (ID,NAME, CITY, POST_CODE, STREET, HOUSE_NUM, INN, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT LIFNR,NAME1||' '||NAME2||' '||NAME3, CITY1, POST_CODE1, STREET, HOUSE_NUM1,
	         STCD1, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
			 FROM R3.VENDORS@UNPO.WORLD B
     WHERE NOT EXISTS (SELECT NULL FROM R3_VENDORS A WHERE A.ID=B.LIFNR));

  COMMIT;

  -- Добавление в CUSTOMERS из OD
  INSERT INTO R3_CUSTOMERS (ID)
    (SELECT ID FROM (SELECT DISTINCT TO_CHAR(TO_NUMBER(SH_KUNNR)) AS ID FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CUSTOMERS A WHERE A.ID=B.ID)
	   AND B.ID IS NOT NULL);

  INSERT INTO R3_CUSTOMERS (ID)
    (SELECT ID FROM (SELECT DISTINCT TO_CHAR(TO_NUMBER(VBPA_KUNNR)) AS ID FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CUSTOMERS A WHERE A.ID=B.ID)
	   AND B.ID IS NOT NULL);
	   
  INSERT INTO R3_CUSTOMERS (ID)
    (SELECT ID FROM (SELECT DISTINCT TO_CHAR(TO_NUMBER(VBPA_KUNNR_SP)) AS ID FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CUSTOMERS A WHERE A.ID=B.ID)
	   AND B.ID IS NOT NULL);
	   
  -- Добавление в VENDORS из OD
  INSERT INTO R3_VENDORS (ID)
    (SELECT ID FROM (SELECT DISTINCT TO_CHAR(TO_NUMBER(NP_OWNER)) AS ID FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_VENDORS A WHERE A.ID=B.ID)
	   AND B.ID IS NOT NULL);

  INSERT INTO R3_VENDORS (ID)
    (SELECT ID FROM (SELECT DISTINCT TO_CHAR(TO_NUMBER(NP_PRODR)) AS ID FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_VENDORS A WHERE A.ID=B.ID)
	   AND B.ID IS NOT NULL);

  INSERT INTO R3_VENDORS (ID)
    (SELECT ID FROM (SELECT DISTINCT TO_CHAR(TO_NUMBER(OT_LIFNR)) AS ID FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_VENDORS A WHERE A.ID=B.ID)
	   AND B.ID IS NOT NULL);

  COMMIT;
  
  -- Простановка перекрестных связей
  UPDATE R3_CUSTOMERS A
     SET (VENDORS_ID) =
     (SELECT C.LIFNR
  	    FROM R3.CUSTOMERS@UNPO.WORLD B, R3.VENDORS@UNPO.WORLD C WHERE B.KUNNR=A.ID AND B.LIFNR=C.LIFNR)
    WHERE EXISTS (SELECT NULL FROM R3.CUSTOMERS@UNPO.WORLD B, R3.VENDORS@UNPO.WORLD C WHERE B.KUNNR=A.ID AND B.LIFNR=C.LIFNR);

  UPDATE R3_VENDORS A
     SET (CUSTOMERS_ID) =
     (SELECT C.KUNNR
  	    FROM R3.CUSTOMERS@UNPO.WORLD B, R3.VENDORS@UNPO.WORLD C WHERE B.KUNNR=C.KUNNR AND C.LIFNR=A.ID)
    WHERE EXISTS (SELECT NULL FROM R3.CUSTOMERS@UNPO.WORLD B, R3.VENDORS@UNPO.WORLD C WHERE B.KUNNR=C.KUNNR AND C.LIFNR=A.ID);

  COMMIT;

  -- Простановка связей CUSTOMERS с KLS_PREDPR
  FOR lcur IN (SELECT A.KUNNR, A.POST_CODE1 AS POST_CODE, A.PO_BOX AS POST_CODE_P, A.STCD1 AS INN, A.BAHNS
                 FROM R3.CUSTOMERS@UNPO.WORLD A) LOOP
    BEGIN
      v_tmp:=NULL;
	  SELECT ID INTO v_tmp
 	    FROM KLS_PREDPR A
	   WHERE (LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	          LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	          LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE_P,' '))) OR
			  LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE_P,' '))))
	     AND LTRIM(RTRIM(NVL(A.INN,' ')))=LTRIM(RTRIM(NVL(lcur.INN,' ')))
	     AND LTRIM(RTRIM(NVL(A.GD_KOD,' ')))=LTRIM(RTRIM(NVL(lcur.BAHNS,' ')));
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
	    BEGIN
          v_tmp:=NULL;
  	      SELECT ID INTO v_tmp
 	        FROM KLS_PREDPR A
	       WHERE (LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	              LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	              LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE_P,' '))) OR
			      LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE_P,' '))))
	         AND (LTRIM(RTRIM(NVL(A.INN,' ')))=LTRIM(RTRIM(NVL(lcur.INN,' '))) OR
	              LTRIM(RTRIM(NVL(A.GD_KOD,' ')))=LTRIM(RTRIM(NVL(lcur.BAHNS,' '))));
        EXCEPTION
          WHEN TOO_MANY_ROWS THEN
            v_tmp:=NULL;
	        SELECT MAX(ID) INTO v_tmp
 	          FROM KLS_PREDPR A
	         WHERE (LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	                LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	                LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE_P,' '))) OR
		            LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE_P,' '))))
	           AND (LTRIM(RTRIM(NVL(A.INN,' ')))=LTRIM(RTRIM(NVL(lcur.INN,' '))) OR
	                LTRIM(RTRIM(NVL(A.GD_KOD,' ')))=LTRIM(RTRIM(NVL(lcur.BAHNS,' '))));
          WHEN OTHERS THEN
	        v_tmp:=NULL;
		END;
      WHEN OTHERS THEN
        v_tmp:=NULL;
    END;

    UPDATE R3_CUSTOMERS A SET A.PREDPR_ID=v_tmp WHERE A.ID=lcur.KUNNR AND A.IS_AUTO_LINK=1;

  END LOOP;

  -- Простановка связей VENDORS с KLS_PREDPR
  FOR lcur IN (SELECT A.LIFNR, A.POST_CODE1 AS POST_CODE, A.STCD1 AS INN
                 FROM R3.VENDORS@UNPO.WORLD A) LOOP
    BEGIN
      v_tmp:=NULL;
	  SELECT ID INTO v_tmp
 	    FROM KLS_PREDPR A
	   WHERE (LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	          LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))))
	     AND LTRIM(RTRIM(NVL(A.INN,' ')))=LTRIM(RTRIM(NVL(lcur.INN,' ')));
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        v_tmp:=NULL;
        SELECT MAX(ID) INTO v_tmp
          FROM KLS_PREDPR A
	     WHERE (LTRIM(RTRIM(NVL(A.POSTINDEX_J,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))) OR
	            LTRIM(RTRIM(NVL(A.POSTINDEX_P,' ')))=LTRIM(RTRIM(NVL(lcur.POST_CODE,' '))))
	       AND  LTRIM(RTRIM(NVL(A.INN,' ')))=LTRIM(RTRIM(NVL(lcur.INN,' ')));
      WHEN OTHERS THEN
        v_tmp:=NULL;
    END;

    UPDATE R3_VENDORS A SET A.PREDPR_ID=v_tmp WHERE A.ID=lcur.LIFNR AND A.IS_AUTO_LINK=1;

  END LOOP;
*/
  COMMIT;

END;


PROCEDURE RENEW_MATERIALS (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp VARCHAR2(5);
BEGIN

  RENEW_MATERIALS_GRP(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Обновление
/*  UPDATE R3_MATERIALS A
      SET (MAKTX, ATWRT_OKP, ATWRT_TU, ATWRT_GOST, PROD_SIGN, GROUP_S, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
      (SELECT MAKTX, ATWRT_OKP, ATWRT_TU, ATWRT_GOST, PROD_SIGN, GROUP_S, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
    	 FROM R3.MATERIALS@UNPO.WORLD B WHERE B.MATNR=A.VBAP_MATNR AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.MATERIALS@UNPO.WORLD B WHERE B.MATNR=A.VBAP_MATNR AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));

    COMMIT;

  -- Добавление
  INSERT INTO R3_MATERIALS (VBAP_MATNR,MAKTX, ATWRT_OKP, ATWRT_TU, ATWRT_GOST, PROD_SIGN, GROUP_S, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT MATNR,MAKTX, ATWRT_OKP, ATWRT_TU, ATWRT_GOST, PROD_SIGN, GROUP_S, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
			 FROM R3.MATERIALS@UNPO.WORLD B
     WHERE NOT EXISTS (SELECT NULL FROM R3_MATERIALS A WHERE A.VBAP_MATNR=B.MATNR));
  COMMIT;
  
  -- Добавление из OD
  INSERT INTO R3_MATERIALS (VBAP_MATNR)
    (SELECT VBAP_MATNR FROM (SELECT VBAP_MATNR FROM R3.OD@UNPO.WORLD) B
      WHERE NOT EXISTS (SELECT NULL FROM R3_MATERIALS A WHERE A.VBAP_MATNR=B.VBAP_MATNR)
	    AND B.VBAP_MATNR IS NOT NULL);
	 
  COMMIT;

  -- Простановка связей MATERIALS с KLS_PROD
  FOR lcur IN (SELECT A.MATNR, A.ATWRT_OKP FROM R3.MATERIALS@UNPO.WORLD A) LOOP
    BEGIN
      v_tmp:=NULL;
	  SELECT ID_NPR INTO v_tmp
 	    FROM KLS_PROD A
	   WHERE LTRIM(RTRIM(NVL(A.KOD_10,' ')))=LTRIM(RTRIM(NVL(lcur.ATWRT_OKP,' ')));
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        v_tmp:=NULL;
      WHEN OTHERS THEN
        v_tmp:=NULL;
    END;

    UPDATE R3_MATERIALS A SET A.PROD_ID_NPR=v_tmp WHERE A.VBAP_MATNR=lcur.MATNR AND A.IS_AUTO_LINK=1;

  END LOOP;

*/
  COMMIT;

END;

PROCEDURE RENEW_MATERIALS_GRP (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp VARCHAR2(5);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

/*  IF IsFull=1 THEN
    -- Обновление
    UPDATE R3_MATERIALS_GRP A
      SET (ATWTB) =
      (SELECT ATWTB FROM (SELECT DISTINCT GROUP_S,ATWTB FROM R3.MATERIALS@UNPO.WORLD) B WHERE B.GROUP_S=A.GROUP_S)
    WHERE EXISTS (SELECT NULL FROM (SELECT DISTINCT GROUP_S,ATWTB FROM R3.MATERIALS@UNPO.WORLD) B WHERE B.GROUP_S=A.GROUP_S);

    COMMIT;
  END IF;

  -- Добавление
  INSERT INTO R3_MATERIALS_GRP (GROUP_S,ATWTB)
    (SELECT GROUP_S,ATWTB FROM (SELECT DISTINCT GROUP_S,ATWTB FROM R3.MATERIALS@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_MATERIALS_GRP A WHERE A.GROUP_S=B.GROUP_S));
*/
  COMMIT;

END;

FUNCTION R2M_PREDPR (R3_KOD VARCHAR2) RETURN NUMBER IS
  v_tmp NUMBER;
BEGIN
  BEGIN
    v_tmp:=NULL;
    SELECT A.PREDPR_ID INTO v_tmp
 	  FROM R3_CUSTOMERS A
	 WHERE A.ID=R3_KOD;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  BEGIN
        v_tmp:=NULL;
        SELECT A.PREDPR_ID INTO v_tmp
 	      FROM R3_VENDORS A
  	     WHERE A.ID=R3_KOD;
	  EXCEPTION
         WHEN OTHERS THEN
	       v_tmp:=NULL;
	  END;
    WHEN OTHERS THEN
	  v_tmp:=NULL;
  END;
  RETURN v_tmp;
END;

PROCEDURE RENEW_CC (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  RENEW_PREDPR(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление из OD
/*  INSERT INTO R3_CC (EKKO_ZZ021,EKKO_KDATB, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE, CUSTOMERS_ID)
    (SELECT VBAK_ZZ021, VEDA_VBEGDAT, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE, VBPA_KUNNR_SP
	   FROM (SELECT VBAK_ZZ021, MAX(TO_DATE(VEDA_VBEGDAT,'dd.mm.yyyy')) AS VEDA_VBEGDAT,
		              MAX(ZZZZ_STATUS) AS ZZZZ_STATUS, MAX(ZZZZ_NOTE) AS ZZZZ_NOTE,
					  MAX(ZZZZ_DATE) AS ZZZZ_DATE, MAX(VBPA_KUNNR) AS VBPA_KUNNR_SP
                 FROM R3.OD@UNPO.WORLD GROUP BY VBAK_ZZ021) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CC A WHERE A.EKKO_ZZ021=B.VBAK_ZZ021)
	   AND B.VBAK_ZZ021 IS NOT NULL);
  COMMIT;

  -- Добавление из CUSTOMERS
  INSERT INTO R3_CC (EKKO_ZZ021,ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE, CUSTOMERS_ID)
    (SELECT KVERM, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE, KUNNR
	     FROM (SELECT KVERM, MAX(ZZZZ_STATUS) AS ZZZZ_STATUS,
		         MAX(ZZZZ_NOTE) AS ZZZZ_NOTE, MAX(ZZZZ_DATE) AS ZZZZ_DATE,
				 MAX(KUNNR) AS KUNNR
                 FROM R3.CUSTOMERS@UNPO.WORLD WHERE KVERM IS NOT NULL GROUP BY KVERM) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CC A WHERE A.EKKO_ZZ021=B.KVERM)
	   AND B.KVERM IS NOT NULL);
  COMMIT;

  -- Добавление из CC
  INSERT INTO R3_CC (EKKO_ZZ021,EKKO_KDATB, EKKO_KDATE, EKKO_LIFNR, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT EKKO_ZZ021, TO_DATE(EKKO_KDATB,'dd.mm.yyyy'), TO_DATE(EKKO_KDATE,'dd.mm.yyyy'), EKKO_LIFNR, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	     FROM R3.CC@UNPO.WORLD B
     WHERE NOT EXISTS (SELECT NULL FROM R3_CC A WHERE A.EKKO_ZZ021=B.EKKO_ZZ021)
	   AND B.EKKO_ZZ021 IS NOT NULL);

  COMMIT;

  -- Обновление из OD
  UPDATE R3_CC A
      SET (EKKO_KDATB, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE, CUSTOMERS_ID) =
      (SELECT VEDA_VBEGDAT, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE, VBPA_KUNNR_SP
	     FROM (SELECT VBAK_ZZ021, MAX(TO_DATE(VEDA_VBEGDAT,'dd.mm.yyyy')) AS VEDA_VBEGDAT,
		              MAX(ZZZZ_STATUS) AS ZZZZ_STATUS, MAX(ZZZZ_NOTE) AS ZZZZ_NOTE,
					  MAX(ZZZZ_DATE) AS ZZZZ_DATE, MAX(VBPA_KUNNR) AS VBPA_KUNNR_SP
                 FROM R3.OD@UNPO.WORLD GROUP BY VBAK_ZZ021) B WHERE B.VBAK_ZZ021=A.EKKO_ZZ021 AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM (SELECT VBAK_ZZ021, MAX(VEDA_VBEGDAT) AS VEDA_VBEGDAT,
		              MAX(ZZZZ_STATUS) AS ZZZZ_STATUS, MAX(ZZZZ_NOTE) AS ZZZZ_NOTE,
					  MAX(ZZZZ_DATE) AS ZZZZ_DATE, MAX(VBPA_KUNNR) AS VBPA_KUNNR_SP
                 FROM R3.OD@UNPO.WORLD GROUP BY VBAK_ZZ021) B WHERE B.VBAK_ZZ021=A.EKKO_ZZ021 AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));
  COMMIT;

  -- Обновление из CUSTOMERS
  UPDATE R3_CC A
      SET (ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE, CUSTOMERS_ID) =
      (SELECT ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE, KUNNR
	     FROM (SELECT KVERM, MAX(ZZZZ_STATUS) AS ZZZZ_STATUS,
		         MAX(ZZZZ_NOTE) AS ZZZZ_NOTE, MAX(ZZZZ_DATE) AS ZZZZ_DATE,
				 MAX(KUNNR) AS KUNNR
                 FROM R3.CUSTOMERS@UNPO.WORLD WHERE KVERM IS NOT NULL GROUP BY KVERM) B
				 WHERE B.KVERM=A.EKKO_ZZ021 AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM (SELECT KVERM, MAX(ZZZZ_STATUS) AS ZZZZ_STATUS,
		         MAX(ZZZZ_NOTE) AS ZZZZ_NOTE, MAX(ZZZZ_DATE) AS ZZZZ_DATE,
				 MAX(KUNNR) AS KUNNR
                 FROM R3.CUSTOMERS@UNPO.WORLD WHERE KVERM IS NOT NULL GROUP BY KVERM) B
				 WHERE B.KVERM=A.EKKO_ZZ021 AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));
  COMMIT;

  -- Обновление из CC
  UPDATE R3_CC A
      SET (EKKO_KDATB, EKKO_KDATE, EKKO_LIFNR, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
      (SELECT TO_DATE(EKKO_KDATB,'dd.mm.yyyy'), TO_DATE(EKKO_KDATE,'dd.mm.yyyy'), EKKO_LIFNR, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	     FROM R3.CC@UNPO.WORLD B WHERE B.EKKO_ZZ021=A.EKKO_ZZ021 AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.CC@UNPO.WORLD B WHERE B.EKKO_ZZ021=A.EKKO_ZZ021 AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));

    COMMIT;

  -- Простановка связей CC с KLS_DOG
  FOR lcur IN (SELECT A.EKKO_ZZ021, A.CUSTOMERS_ID FROM R3_CC A WHERE A.IS_AUTO_LINK=1) LOOP
    BEGIN
      v_tmp:=NULL;
	  SELECT ID INTO v_tmp
 	    FROM KLS_DOG A
	   WHERE (LTRIM(RTRIM(NVL(A.DOG_NUMBER,' ')))=LTRIM(RTRIM(NVL(lcur.EKKO_ZZ021,' '))) OR
	          LTRIM(RTRIM(NVL(A.SHORT_NUMBER,' ')))=LTRIM(RTRIM(NVL(lcur.EKKO_ZZ021,' '))));
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        v_tmp:=NULL;
      WHEN OTHERS THEN
        v_tmp:=NULL;
    END;

    UPDATE R3_CC A SET A.DOG_ID=v_tmp WHERE A.EKKO_ZZ021=lcur.EKKO_ZZ021 AND A.IS_AUTO_LINK=1;

  END LOOP;

*/
  COMMIT;

END;

FUNCTION R2M_DOG (R3_KOD VARCHAR2) RETURN NUMBER IS
  v_tmp NUMBER;
BEGIN
  BEGIN
    v_tmp:=NULL;
    SELECT A.DOG_ID INTO v_tmp
 	  FROM R3_CC A
	 WHERE A.EKKO_ZZ021=R3_KOD;
  EXCEPTION
    WHEN OTHERS THEN
	  v_tmp:=NULL;
  END;
  RETURN v_tmp;
END;

PROCEDURE RENEW_SC (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  RENEW_CC(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление
/*  INSERT INTO R3_SC (ASNUM,ASMDT_ASKTX, ASMD_MEINS, EKKO_ZZ021, KERNEL_ID, KERNEL_TAG, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT B.ASMD_ASNUM,B.ASMDT_ASKTX, B.ASMD_MEINS, B.EKKO_ZZ021, C.KERNEL_ID, C.TAG, B.ZZZZ_STATUS, B.ZZZZ_NOTE, B.ZZZZ_DATE
	   FROM R3.SC@UNPO.WORLD B, R3.SERVICES@UNPO.WORLD C
     WHERE B.ASMD_ASNUM=C.R3_ID(+)
	   AND NOT EXISTS (SELECT NULL FROM R3_SC A WHERE A.ASNUM=B.ASMD_ASNUM));
  COMMIT;

  -- Обновление
  UPDATE R3_SC A
      SET (ASMDT_ASKTX, ASMD_MEINS, EKKO_ZZ021, KERNEL_ID, KERNEL_TAG, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
      (SELECT B.ASMDT_ASKTX, B.ASMD_MEINS, B.EKKO_ZZ021, C.KERNEL_ID, C.TAG, B.ZZZZ_STATUS, B.ZZZZ_NOTE, B.ZZZZ_DATE
  	     FROM R3.SC@UNPO.WORLD B, R3.SERVICES@UNPO.WORLD C
        WHERE B.ASMD_ASNUM=C.R3_ID(+) AND B.ASMD_ASNUM=A.ASNUM AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.SC@UNPO.WORLD B
        WHERE B.ASMD_ASNUM=A.ASNUM AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));
  COMMIT;
*/
END;

PROCEDURE RENEW_KONV (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  RENEW_SC(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление из OA
/*  INSERT INTO R3_KONV (KSCHL, T685T_VTEXT, MATCH_ASNUM)
    (SELECT KONV_KSCHL, T685T_VTEXT, MATCH_ASNUM
	   FROM (SELECT KONV_KSCHL, MAX(T685T_VTEXT) AS T685T_VTEXT,
		              MAX(MATCH_ASNUM) AS MATCH_ASNUM
                 FROM R3.OA@UNPO.WORLD GROUP BY KONV_KSCHL) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_KONV A WHERE A.KSCHL=B.KONV_KSCHL)
	   AND B.KONV_KSCHL IS NOT NULL);
  COMMIT;

  -- Обновление из OA
  UPDATE R3_KONV A
      SET (T685T_VTEXT, MATCH_ASNUM) =
      (SELECT T685T_VTEXT, MATCH_ASNUM
	     FROM (SELECT KONV_KSCHL, MAX(T685T_VTEXT) AS T685T_VTEXT,
		              MAX(MATCH_ASNUM) AS MATCH_ASNUM
                 FROM R3.OA@UNPO.WORLD GROUP BY KONV_KSCHL) B WHERE B.KONV_KSCHL=A.KSCHL)
    WHERE EXISTS (SELECT NULL FROM (SELECT KONV_KSCHL, MAX(T685T_VTEXT) AS T685T_VTEXT,
		              MAX(MATCH_ASNUM) AS MATCH_ASNUM
                 FROM R3.OA@UNPO.WORLD GROUP BY KONV_KSCHL) B WHERE B.KONV_KSCHL=A.KSCHL);
  COMMIT;
*/
END;

PROCEDURE RENEW_OA (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  RENEW_KONV(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_OD(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление
/*  INSERT INTO R3_OA (ZZZZ_ID, VBAK_VBELN, VBAP_POSNR, KONV_KSCHL, KONV_KBETR, KONV_KRECH, KONV_WAERS, KONV_KPEIN, KONV_KMEIN, ZZZZ_SATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT ZZZZ_ID, VBAK_VBELN, VBAP_POSNR, KONV_KSCHL, KONV_KBETR, KONV_KRECH, KONV_WAERS, KONV_KPEIN, KONV_KMEIN, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	   FROM R3.OA@UNPO.WORLD B
     WHERE NOT EXISTS (SELECT NULL FROM R3_OA A WHERE A.ZZZZ_ID=B.ZZZZ_ID)
	   AND EXISTS (SELECT NULL FROM R3_OD C WHERE C.VBAK_VBELN=B.VBAK_VBELN AND C.VBAP_POSNR=B.VBAP_POSNR));
  COMMIT;

  -- Обновление
  UPDATE R3_OA A
      SET (VBAK_VBELN, VBAP_POSNR, KONV_KSCHL, KONV_KBETR, KONV_KRECH, KONV_WAERS, KONV_KPEIN, KONV_KMEIN, ZZZZ_SATUS, ZZZZ_FILE, ZZZZ_DATE) =
      (SELECT VBAK_VBELN, VBAP_POSNR, KONV_KSCHL, KONV_KBETR, KONV_KRECH, KONV_WAERS, KONV_KPEIN, KONV_KMEIN, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
  	     FROM R3.OA@UNPO.WORLD B WHERE B.ZZZZ_ID=A.ZZZZ_ID)
    WHERE EXISTS (SELECT NULL FROM R3.OA@UNPO.WORLD B WHERE B.ZZZZ_ID=A.ZZZZ_ID);
  COMMIT;
*/
END;

PROCEDURE RENEW_ROUTENODES (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  RENEW_R3_GD(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление
/*  INSERT INTO R3_ROUTENODES (KNOTE, BEZEI)
    (SELECT '000000', '' FROM dual
     WHERE NOT EXISTS (SELECT NULL FROM R3_ROUTENODES A WHERE A.KNOTE='000000'));

  INSERT INTO R3_ROUTENODES (KNOTE, BEZEI)
    (SELECT '000003', 'РЕЗЕРВУАР' FROM dual
     WHERE NOT EXISTS (SELECT NULL FROM R3_ROUTENODES A WHERE A.KNOTE='000003'));

  INSERT INTO R3_ROUTENODES (KNOTE, BEZEI)
    (SELECT '000004', 'САМОВЫВОЗ' FROM dual
     WHERE NOT EXISTS (SELECT NULL FROM R3_ROUTENODES A WHERE A.KNOTE='000004'));
  COMMIT;

  INSERT INTO R3_ROUTENODES (KNOTE, BEZEI, BAHNR)
    (SELECT KNOTE, BEZEI, BAHNR
	   FROM R3.ROUTENODES@UNPO.WORLD B
     WHERE B.KNOTE<>'Автотранспорт (самовывоз)' AND B.KNOTE<>'C' AND NOT EXISTS (SELECT NULL FROM R3_ROUTENODES A WHERE A.KNOTE=B.KNOTE));
  COMMIT;

  -- Обновление
  UPDATE R3_ROUTENODES A
      SET (BEZEI, BAHNR) =
      (SELECT BEZEI, BAHNR
  	     FROM R3.ROUTENODES@UNPO.WORLD B WHERE B.KNOTE=A.KNOTE )
    WHERE EXISTS (SELECT NULL FROM R3.ROUTENODES@UNPO.WORLD B WHERE  B.KNOTE=A.KNOTE);
  COMMIT;
*/
END;

PROCEDURE RENEW_ROUTES (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  RENEW_ROUTENODES(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление
/*  INSERT INTO R3_ROUTES (ROUTE, KNANF, KNEND, BEZEI, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT ROUTE, KNANF,KNEND,BEZEI, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	   FROM R3.V_ROUTES_UHTA@UNPO.WORLD B
     WHERE NOT EXISTS (SELECT NULL FROM R3_ROUTES A WHERE A.ROUTE=B.ROUTE));
  COMMIT;

  -- Добавление из OD
  INSERT INTO R3_ROUTES (ROUTE)
    (SELECT VBAP_ROUTE
	   FROM (SELECT DISTINCT VBAP_ROUTE FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_ROUTES A WHERE A.ROUTE=B.VBAP_ROUTE)
	   AND B.VBAP_ROUTE IS NOT NULL);
  COMMIT;

  -- Обновление
  UPDATE R3_ROUTES A
      SET (KNANF, KNEND, BEZEI, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
      (SELECT KNANF,KNEND,BEZEI, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
  	     FROM R3.V_ROUTES_UHTA@UNPO.WORLD B WHERE B.ROUTE=A.ROUTE AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.V_ROUTES_UHTA@UNPO.WORLD B WHERE B.ROUTE=A.ROUTE  AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1));
  COMMIT;

  RENEW_ROUTE_FULL(DATE_BEG,DATE_END,param1,param2,param3);
*/
END;

PROCEDURE RENEW_ROUTE_FULL (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_Tmp NUMBER;
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление
/*  INSERT INTO R3_ROUTE_FULL (ROUTE, ANFRF, KNANF, KNEND, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT ROUTE, ANFRF, KNANF, KNEND, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	   FROM R3.ROUTES@UNPO.WORLD B
     WHERE B.ROUTE<>'A00000' AND NOT EXISTS (SELECT NULL FROM R3_ROUTE_FULL A WHERE A.ROUTE=B.ROUTE AND A.ANFRF=B.ANFRF));
  COMMIT;

  -- Обновление
  UPDATE R3_ROUTE_FULL A
      SET (KNANF, KNEND, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
      (SELECT KNANF, KNEND, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE
  	     FROM R3.ROUTES@UNPO.WORLD B WHERE B.ROUTE=A.ROUTE AND A.ANFRF=B.ANFRF AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
    WHERE EXISTS (SELECT NULL FROM R3.ROUTES@UNPO.WORLD B WHERE B.ROUTE=A.ROUTE AND A.ANFRF=B.ANFRF AND NVL(B.ZZZZ_DATE,SYSDATE+1)<>NVL(A.ZZZZ_DATE,SYSDATE+1))
	  AND A.ROUTE<>'A00000' ;
  COMMIT;
*/
END;

PROCEDURE RENEW_LPRIO (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

/*  IF IsFull=1 THEN
    UPDATE R3_LPRIO A
      SET (BEZEI, KERNEL_ID) =
	  (SELECT B.BEZEI, B.KERNEL_ID FROM R3.LPRIO@UNPO.WORLD B WHERE B.LPRIO=A.VBAP_LPRIO)
    WHERE EXISTS (SELECT NULL FROM R3.LPRIO@UNPO.WORLD B WHERE B.LPRIO=A.VBAP_LPRIO);

    COMMIT;
  END IF;

  INSERT INTO R3_LPRIO (VBAP_LPRIO,BEZEI,KERNEL_ID)
    (SELECT LPRIO,BEZEI,KERNEL_ID FROM R3.LPRIO@UNPO.WORLD B
    WHERE NOT EXISTS (SELECT NULL FROM R3_LPRIO A WHERE A.VBAP_LPRIO=B.LPRIO));

  COMMIT;

  -- Добавление из OD
  INSERT INTO R3_LPRIO (VBAP_LPRIO)
    (SELECT VBAP_LPRIO
	   FROM (SELECT DISTINCT VBAP_LPRIO FROM R3.OD@UNPO.WORLD) B
     WHERE NOT EXISTS (SELECT NULL FROM R3_LPRIO A WHERE A.VBAP_LPRIO=B.VBAP_LPRIO)
	   AND B.VBAP_LPRIO IS NOT NULL);
  COMMIT;
*/
END;


PROCEDURE RENEW_VBAK (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
  v_tmp VARCHAR2(12);
  v_tmp2 VARCHAR2(12);
BEGIN

  RENEW_VSART(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_VSTEL(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_ROUTES(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_WERKS_LGORT(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_VSBED(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_AUART(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_PREDPR(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Добавление в R3_TRATY
/*  INSERT INTO R3_TRATY (VBKD_TRATY)
    (SELECT VBKD_TRATY FROM (SELECT DISTINCT VBKD_TRATY FROM R3.OD@UNPO.WORLD) B
    WHERE NOT EXISTS (SELECT NULL FROM R3_TRATY A WHERE A.VBKD_TRATY=B.VBKD_TRATY)
	  AND B.VBKD_TRATY IS NOT NULL);
  
  IF IsFull=1 THEN
    UPDATE R3_VBAK A
      SET (VBAK_VKORG, VBAK_VTWEG, VBAP_VSTEL, VBAK_ZZ021, VBAK_AUART, VBAK_VDATU, VBAK_VSBED,
	       VBAP_ROUTE, VBAP_WERKS, LGORT, NP_OWNER, NP_PRODR, TEXT1_Y005, MVRG1, TEXT3_Y003,
		   NPR_NAME, TARIF_CODE, TRANSP_NUM, CONTRACTOR_ATTR, GAR_Y007, MPS_Y006, 
		   OT_LIFNR, SH_KUNNR, VBPA_KUNNR, PO_KNA1_NAME1, VBPA_KUNNR_SP, ZZZZ_STATUS, ZZZZ_FILE,
		   ZZZZ_DATE,VBKD_BSTKD,VBKD_TRATY,VBKD_VSART, V_TJ30_TXT04) =
	  (SELECT B.VBAK_VKORG, B.VBAK_VTWEG, B.VBAP_VSTEL, B.VBAK_ZZ021, B.VBAK_AUART, TO_DATE(B.VBAK_VDATU,'dd.mm.yyyy'),
	          B.VBAK_VSBED, B.VBAP_ROUTE, TO_CHAR(TO_NUMBER(B.VBAP_WERKS)), TO_CHAR(TO_NUMBER(B.LGORT)), TO_CHAR(TO_NUMBER(B.NP_OWNER)),
			  TO_CHAR(TO_NUMBER(B.NP_PRODR)), B.TEXT1_Y005,
			  B.MVGR1, B.TEXT3_Y003, B.NRR_NAME, B.TARIF_CODE, B.TRANSP_NUM, TO_NUMBER(B.CONTRACT_ATTR), B.GAR_Y007,
			  B.MPS_Y006, B.OT_LIFNR, B.SH_KUNNR, B.VBPA_KUNNR, B.PO_KNA1_NAME1,
			  B.VBPA_KUNNR_SP, B.ZZZZ_STATUS, B.ZZZZ_NOTE, B.ZZZZ_DATE,B.VBKD_BSTKD,B.VBKD_TRATY,B.VBKD_VSART, B.V_TJ30_TXT04
	     FROM R3.V_VBAK_UHTA@UNPO.WORLD B 
		 WHERE B.VBAK_VBELN=A.VBELN)
      WHERE EXISTS 
	    (SELECT NULL FROM R3.V_VBAK_UHTA@UNPO.WORLD B WHERE B.VBAK_VBELN=A.VBELN);

    COMMIT;
  END IF;

  INSERT INTO R3_VBAK (VBELN, VBAK_VKORG, VBAK_VTWEG, VBAP_VSTEL, VBAK_ZZ021, VBAK_AUART, VBAK_VDATU, VBAK_VSBED,
	       VBAP_ROUTE, VBAP_WERKS, LGORT, NP_OWNER, NP_PRODR, TEXT1_Y005, MVRG1, TEXT3_Y003,
		   NPR_NAME, TARIF_CODE, TRANSP_NUM, CONTRACTOR_ATTR, GAR_Y007, MPS_Y006, 
		   OT_LIFNR, SH_KUNNR, VBPA_KUNNR, PO_KNA1_NAME1, VBPA_KUNNR_SP, ZZZZ_STATUS, ZZZZ_FILE,
		   ZZZZ_DATE,VBKD_BSTKD,VBKD_TRATY,VBKD_VSART, V_TJ30_TXT04)
    (SELECT B.VBAK_VBELN,B.VBAK_VKORG, B.VBAK_VTWEG, B.VBAP_VSTEL, B.VBAK_ZZ021, B.VBAK_AUART, TO_DATE(B.VBAK_VDATU,'dd.mm.yyyy'),
	          B.VBAK_VSBED, B.VBAP_ROUTE, TO_CHAR(TO_NUMBER(B.VBAP_WERKS)), TO_CHAR(TO_NUMBER(B.LGORT)),
			  TO_CHAR(TO_NUMBER(B.NP_OWNER)), TO_CHAR(TO_NUMBER(B.NP_PRODR)), B.TEXT1_Y005,
			  B.MVGR1, B.TEXT3_Y003, B.NRR_NAME, B.TARIF_CODE, B.TRANSP_NUM, TO_NUMBER(B.CONTRACT_ATTR), B.GAR_Y007,
			  B.MPS_Y006, B.OT_LIFNR, B.SH_KUNNR, B.VBPA_KUNNR, B.PO_KNA1_NAME1,
			  B.VBPA_KUNNR_SP, B.ZZZZ_STATUS, B.ZZZZ_NOTE, B.ZZZZ_DATE, B.VBKD_BSTKD,B.VBKD_TRATY,B.VBKD_VSART, B.V_TJ30_TXT04
	  FROM R3.V_VBAK_UHTA@UNPO.WORLD B
    WHERE NOT EXISTS (SELECT NULL FROM R3_VBAK A WHERE A.VBELN=B.VBAK_VBELN));

  COMMIT;
  
  -- Простановка связей R3_VBAK с MONTH
  FOR lcur IN (SELECT A.VBELN,A.VBKD_BSTKD FROM R3_VBAK A WHERE A.IS_AUTO_LINK=1) LOOP
    BEGIN
      v_tmp:=NULL;
	  -- Есть ли вообще такая разнарядка НПО
	  SELECT nom_zd INTO v_tmp
 	    FROM MONTH A
	   WHERE A.nom_zd=lcur.VBKD_BSTKD;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        v_tmp:=NULL;
      WHEN OTHERS THEN
        v_tmp:=NULL;
    END;
	
	IF v_tmp IS NOT NULL THEN
	  -- Если есть уже ручная привязка этой разнарядки НПО к другой разнарядке R3 
      BEGIN
   	    v_tmp2:=NULL;
	    SELECT nom_zd INTO v_tmp2
   	      FROM R3_VBAK A
  	     WHERE A.nom_zd=v_tmp AND A.IS_AUTO_LINK=0 AND A.VBELN<>lcur.VBELN;
  	    v_tmp:=NULL; -- Есть другая ручная привязка с этой разнарядкой НПО
      EXCEPTION
        WHEN TOO_MANY_ROWS THEN
          v_tmp:=NULL; -- Есть другая ручная привязка с этой разнарядкой НПО
        WHEN NO_DATA_FOUND THEN
          NULL; -- Других ручных привязок на данную разнарядку НПО не найдено
        WHEN OTHERS THEN
          v_tmp:=NULL;
      END;
	END IF;
	
	IF v_tmp IS NOT NULL THEN
	  -- Уберем другие автоматические привязки с этой разнарядкой НПО
      UPDATE R3_VBAK A SET A.NOM_ZD=NULL WHERE A.NOM_ZD=v_tmp AND A.VBELN<>lcur.VBELN AND A.IS_AUTO_LINK=1;
	END IF;   
	
    UPDATE R3_VBAK A SET A.NOM_ZD=v_tmp WHERE A.VBELN=lcur.VBELN AND A.IS_AUTO_LINK=1;
  END LOOP;

  COMMIT;
*/
END;

PROCEDURE RENEW_OD (DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
  IsFull NUMBER(1);
BEGIN

  RENEW_BLOCKS(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_LPRIO(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_MATERIALS(DATE_BEG,DATE_END,param1,param2,param3);
  RENEW_VBAK(DATE_BEG,DATE_END,param1,param2,param3);

  IF param1 || ' ' <> ' ' THEN
    IsFull:=1;
  ELSE
    IsFull:=0;
  END IF;

  -- Обновление 
/*  IF IsFull=1 THEN
    UPDATE R3_OD A
      SET (ZZZZ_ID, VBAP_CHARG, VBAP_KWMENG, VBAP_VRKME, VBAP_UEBTO, VBAP_KBMENG, 
	       VBAP_MATNR, VBAP_LPRIO, V_TJ30_TXT04, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE) =
 	    (SELECT ZZZZ_ID, VBAP_CHARG, VBAP_KWMENG, VBAP_VRKME, VBAP_UEBTO, VBAP_KBMENG, 
		   VBAP_MATNR, VBAP_LPRIO, V_TJ30_TXT04, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	       FROM R3.OD@UNPO.WORLD B WHERE B.VBAK_VBELN=A.VBAK_VBELN AND B.VBAP_POSNR=A.VBAP_POSNR)
      WHERE EXISTS (SELECT NULL FROM R3.OD@UNPO.WORLD B WHERE B.VBAK_VBELN=A.VBAK_VBELN AND B.VBAP_POSNR=A.VBAP_POSNR);

    COMMIT;
  END IF;

  -- Добавление
  INSERT INTO R3_OD (VBAK_VBELN, VBAP_POSNR, ZZZZ_ID, VBAP_CHARG, VBAP_KWMENG, VBAP_VRKME, VBAP_UEBTO, VBAP_KBMENG, 
	       VBAP_MATNR, VBAP_LPRIO, V_TJ30_TXT04, ZZZZ_STATUS, ZZZZ_FILE, ZZZZ_DATE)
    (SELECT VBAK_VBELN, VBAP_POSNR, ZZZZ_ID, VBAP_CHARG, VBAP_KWMENG, VBAP_VRKME, VBAP_UEBTO, VBAP_KBMENG,
	       VBAP_MATNR, VBAP_LPRIO, V_TJ30_TXT04, ZZZZ_STATUS, ZZZZ_NOTE, ZZZZ_DATE
	  FROM R3.OD@UNPO.WORLD B
    WHERE NOT EXISTS (SELECT NULL FROM R3_OD A WHERE A.VBAK_VBELN=B.VBAK_VBELN AND A.VBAP_POSNR=B.VBAP_POSNR));

  COMMIT;

  -- Обновление нек.полей в разнарядке
  UPDATE R3_VBAK A
      SET (VBAP_MATNR,VBAP_KWMENG,VBAP_KBMENG) =
	  (SELECT B.VBAP_MATNR, NVL(B.VBAP_KWMENG,0), NVL(B.VBAP_KBMENG,0)
	     FROM V_VBAK_LAST_POSNR B WHERE B.VBAK_VBELN=A.VBELN)
      WHERE EXISTS (SELECT NULL FROM V_VBAK_LAST_POSNR B WHERE B.VBAK_VBELN=A.VBELN)
	    AND EXISTS (SELECT NULL FROM R3.V_VBAK_UHTA@UNPO.WORLD B WHERE B.VBAK_VBELN=A.VBELN);

    COMMIT;
*/  
END;

procedure AddVbakRow(pCOMMIT NUMBER, pVBAP_VSTEL VARCHAR2,  pVBKD_BSTKD VARCHAR2,pVBKD_BSTDK varchar2,
   pVBAK_VBELN VARCHAR2, pVBAP_POSNR varchar2,pVBAK_VDATU varchar2,pVBAK_VSBED VARCHAR2,pUNKNOWN1 VARCHAR2,
   pVBAP_MATNR VARCHAR2,pOT_LIFNR VARCHAR2,pUNKNOWN2 VARCHAR2,pUNKNOWN3 VARCHAR2,
   pVBAK_VKORG VARCHAR2, pVBAK_VTWEG VARCHAR2, 
    pVBAP_OICONTNR VARCHAR2, pVBAK_ZZ021 VARCHAR2, pVEDA_VBEGDAT varchar2,  
    	pVBAK_AUART VARCHAR2, pTVAKT_BEZEI VARCHAR2,  
	pVBKD_VSART VARCHAR2, pVBKD_TRATY VARCHAR2, pVBAP_LPRIO VARCHAR2, pVBAP_ROUTE VARCHAR2,
	 pVBAP_WERKS VARCHAR2, pLGORT VARCHAR2,  pVBAP_KWMENG varchar2, 
	pVBAP_VRKME VARCHAR2,  pSH_KUNNR VARCHAR2, pINCO1 VARCHAR2, pINCO2 VARCHAR2,
	pZLSCH VARCHAR2, pSTCEG_L VARCHAR2, pZTERM VARCHAR2, pV_TJ30_TXT04 VARCHAR2, pVBPA_KUNNR VARCHAR2, 
	pVBPA_LIFNR_SP VARCHAR2, pVBAK_STCEG_L VARCHAR2, pSPART VARCHAR2) 
	AS
	vMonthReestrID Month_reestr.ID%TYPE;
	vNum_ree VARCHAR2(10);
	vNom_zd  VARCHAR2(12);
	vVBKD_BSTDK DATE;
	vVBAP_KWMENG NUMBER;
BEGIN

/*  IF pVBKD_BSTDK||' '=' ' THEN*/
    vVBKD_BSTDK:=TO_DATE(pVBAK_VDATU,'dd.mm.yyyy');
/*  ELSE	
    vVBKD_BSTDK:=TO_DATE(pVBKD_BSTDK,'dd.mm.yyyy');
  END IF;*/  
  
  vVBAP_KWMENG:=ora_val(pVBAP_KWMENG,'9999999999999.999');

	vNum_ree:=substr(Trim(pVBKD_BSTKD),1,instr(Trim(pVBKD_BSTKD),'/')-1);
	vNom_zd:=substr(Trim(pVBKD_BSTKD),instr(Trim(pVBKD_BSTKD),'/')+1);
	BEGIN
	  SELECT /*+ RULE */ ID
        INTO vMonthReestrID
	 	FROM month_reestr
	  WHERE Num_ree=to_number(vNum_ree);
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vMonthReestrID is null THEN
--          RaiseError('Реестр '||vNum_ree||' не найден, разнарядка '|| pVBAK_VBELN || ' (' || vNom_zd || ') - не загружена!');
          NULL;
		END IF;
	END;
  
-- Обновляем документ
	UPDATE r3_vbak SET (VBAK_VKORG,VBAK_VTWEG,VBAP_VSTEL,
    	VBAP_OICONTNR,VBAK_ZZ021,VEDA_VBEGDAT,VBKD_BSTKD,VBKD_BSTDK,VBAK_AUART,TVAKT_BEZEI,VBAK_VDATU,
		VBAK_VSBED,VBKD_VSART,VBKD_TRATY,VBAP_LPRIO,VBAP_ROUTE,VBAP_POSNR,VBAP_WERKS,LGORT,VBAP_MATNR,VBAP_KWMENG, 
		VBAP_VRKME,OT_LIFNR,SH_KUNNR,INCO1,INCO2,ZLSCH,STCEG_L,ZTERM,V_TJ30_TXT04,VBPA_KUNNR, 
		VBPA_LIFNR_SP,VBAK_STCEG_L,SPART,NOM_ZD,MONTH_REESTR_ID)=
	  (SELECT pVBAK_VKORG,pVBAK_VTWEG,pVBAP_VSTEL,
    	pVBAP_OICONTNR, pVBAK_ZZ021,To_date(pVEDA_VBEGDAT,'dd.mm.yyyy'), pVBKD_BSTKD , vVBKD_BSTDK,
    	pVBAK_AUART, pTVAKT_BEZEI, to_date(pVBAK_VDATU,'dd.mm.yyyy'), pVBAK_VSBED, pVBKD_VSART, pVBKD_TRATY, pVBAP_LPRIO,
		pVBAP_ROUTE, pVBAP_POSNR, pVBAP_WERKS, pLGORT, pVBAP_MATNR, vVBAP_KWMENG, 
		pVBAP_VRKME, pOT_LIFNR, pSH_KUNNR, pINCO1, pINCO2, pZLSCH, pSTCEG_L, pZTERM, pV_TJ30_TXT04, pVBPA_KUNNR, 
		pVBPA_LIFNR_SP, pVBAK_STCEG_L, pSPART,vNom_zd,vMonthReestrID FROM dual)
	WHERE VBELN=pVBAK_VBELN;

	IF SQL%NOTFOUND THEN
 -- Добавляем документ
	    INSERT INTO r3_vbak (VBAK_VKORG,VBAK_VTWEG,VBAP_VSTEL,
		VBAP_OICONTNR,VBAK_ZZ021,VEDA_VBEGDAT,VBKD_BSTKD,VBKD_BSTDK,VBELN,VBAK_AUART,TVAKT_BEZEI,VBAK_VDATU,
		VBAK_VSBED,VBKD_VSART,VBKD_TRATY,VBAP_LPRIO,VBAP_ROUTE,VBAP_POSNR,VBAP_WERKS,LGORT,VBAP_MATNR,VBAP_KWMENG, 
		VBAP_VRKME,OT_LIFNR,SH_KUNNR,INCO1,INCO2,ZLSCH,STCEG_L,ZTERM,V_TJ30_TXT04,VBPA_KUNNR, 
		VBPA_LIFNR_SP,VBAK_STCEG_L,SPART,NOM_ZD,MONTH_REESTR_ID)
  		VALUES (pVBAK_VKORG,pVBAK_VTWEG,pVBAP_VSTEL,
    	pVBAP_OICONTNR, pVBAK_ZZ021,To_date(pVEDA_VBEGDAT,'dd.mm.yyyy'), pVBKD_BSTKD , vVBKD_BSTDK,
    	pVBAK_VBELN, pVBAK_AUART, pTVAKT_BEZEI, to_date(pVBAK_VDATU,'dd.mm.yyyy'), pVBAK_VSBED, pVBKD_VSART, pVBKD_TRATY, pVBAP_LPRIO,
		pVBAP_ROUTE, pVBAP_POSNR, pVBAP_WERKS, pLGORT, pVBAP_MATNR, vVBAP_KWMENG, 
		pVBAP_VRKME, pOT_LIFNR, pSH_KUNNR, pINCO1, pINCO2, pZLSCH, pSTCEG_L, pZTERM, pV_TJ30_TXT04, pVBPA_KUNNR, 
		pVBPA_LIFNR_SP, pVBAK_STCEG_L, pSPART,vNom_zd,vMonthReestrID);
	END IF;
	
	
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
END;

procedure AddRCRow(pCOMMIT NUMBER, pID_MS VARCHAR2, pVSTEL VARCHAR2, pID_SAP VARCHAR2, pID_SAP_PSN VARCHAR2) 
	AS
	vID_MS NUMBER;
BEGIN

  vID_MS:=ora_val(pID_MS);

  -- Обновляем документ
	UPDATE r3_kvit2sap SET (ID_MS, VSTEL, ID_SAP, ID_SAP_PSN, KVIT_ID)=
	  (SELECT vID_MS, pVSTEL, pID_SAP, pID_SAP_PSN,vID_MS FROM dual)
	WHERE ID_MS=vID_MS;

	IF SQL%NOTFOUND THEN
     -- Добавляем документ
	    INSERT INTO r3_kvit2sap (ID_MS, VSTEL, ID_SAP, ID_SAP_PSN, KVIT_ID)
  		VALUES (vID_MS, pVSTEL, pID_SAP, pID_SAP_PSN, vID_MS);
	END IF;
	
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
END;

procedure DelVbakRow(pCOMMIT NUMBER, pVBELN VARCHAR2) AS
BEGIN

  -- Обновляем документ
  DELETE FROM r3_vbak WHERE VBELN=pVBELN;
	
  -- COMMIT
  IF pCOMMIT=1 THEN
    COMMIT;
  END IF;

END;

procedure DelRCRow(pCOMMIT NUMBER, pID_SAP VARCHAR2) AS 
BEGIN

  -- Обновляем документ
  DELETE FROM r3_kvit2sap WHERE ID_SAP=pID_SAP;
	
  -- COMMIT
  IF pCOMMIT=1 THEN
    COMMIT;
  END IF;
END;

-- Вернуть номер файла для выгрузки поставок
FUNCTION GET_SEQ_OF RETURN NUMBER IS
  vTmp NUMBER;  
BEGIN
  select SEQ_OF.NextVal into vTmp from dual;
  RETURN vTmp;
END;  

END;

/

/* This object may not be sorted properly in the script due to cirular references. */
--
-- EUL_GET_OBJECT_NAME  (Function) 
--
CREATE OR REPLACE FUNCTION MASTER.EUL_GET_OBJECT_NAME(USEKEY in VARCHAR2,  TYPEKEY in varchar2) return VARCHAR2 is oname varchar2(2000); startpt NUMBER :=1; endpt NUMBER :=length(USEKEY); pos NUMBER :=1; ctr NUMBER :=0; chklgth NUMBER; objid NUMBER; aggtype NUMBER; objname VARCHAR2(100); cursor folder is select obj_name from eul_objs where obj_id = objid; cursor item is select exp_name from eul_expressions where exp_id = objid; begin while pos <> 0 loop aggtype:=0; ctr:=ctr+1; pos:=instr(USEKEY, '.', 1, ctr); if pos=0 then if upper(TYPEKEY)='F' then objid:= to_number(substr(USEKEY, startpt, (endpt-startpt+1))); else objid:= to_number(substr(USEKEY, startpt, (endpt-startpt-1))); aggtype:= to_number(substr(USEKEY, endpt, 1)); end if; else if upper(TYPEKEY)='F' then objid:= to_number(substr(USEKEY, startpt, (pos-startpt))); else objid:= to_number(substr(USEKEY, startpt, (pos-startpt-2))); aggtype:= to_number(substr(USEKEY, pos-1, 1)); end if; startpt:=pos+1; end if; if upper(TYPEKEY) ='F' then open folder; fetch folder into objname; close folder; end if; if upper(TYPEKEY)='I' then open item; fetch item into objname; close item; end if; if ctr=1 then if aggtype=0 then oname:=objname; elsif aggtype=1 then oname:=objname||' SUM'; elsif aggtype=2 then oname:=objname||' AVG'; elsif aggtype=3 then oname:=objname||' COUNT'; elsif aggtype=4 then oname:=objname||' MAX'; elsif aggtype=5 then oname:=objname||' MIN'; else oname:=objname; end if; else if aggtype=0 then chklgth:= length(oname)+length(objname)+2; elsif aggtype=1 then chklgth:= length(oname)+length(objname)+6; elsif aggtype=2 then chklgth:= length(oname)+length(objname)+6; elsif aggtype=3 then chklgth:= length(oname)+length(objname)+8; elsif aggtype=4 then chklgth:= length(oname)+length(objname)+6; elsif aggtype=5 then chklgth:= length(oname)+length(objname)+6; else chklgth:= length(oname)+length(objname)+2; end if; if chklgth > 1999 then oname:=oname||'*'; exit; else if aggtype = 0 then oname:=oname||',  '||objname; elsif aggtype=1 then oname:=oname||',  '||objname||' SUM'; elsif aggtype=2 then oname:=oname||',  '||objname||' AVG'; elsif aggtype=3 then oname:=oname||',  '||objname||' COUNT'; elsif aggtype=4 then oname:=oname||',  '||objname||' MAX'; elsif aggtype=5 then oname:=oname||',  '||objname||' MIN'; else oname:=oname||',  '||objname; end if; end if; end if; end loop; return oname; end EUL_GET_OBJECT_NAME;
/

/* This object may not be sorted properly in the script due to cirular references. */
--
-- V_NEW_MONTH_MONTH  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NEW_MONTH_MONTH
(ID, VBELN, NOM_ZD, DATE_RAZN, DATE_PLAN, 
 LOCK_STATUS, IS_EXP_NAME, IS_EXP, VBAK_VSBED, LOAD_NAME, 
 VBKD_TRATY, VAGONTYPE_NAME, LOAD_ABBR, LOAD_TYPE_ID, TYPE_OTGR_NAME, 
 VBAP_MATNR, PROD_NAME_NPR, PROD_ID_NPR, LUK_DOG_NUMBER, LUK_DOG_ID, 
 NPO_DOG_NUMBER, NPO_DOG_ID, DOG_NUMBER, DOG_ID, USL_NUMBER, 
 VBPA_KUNNR, PLAT_NAME, PLAT_ID, OT_LIFNR, GROTP_NAME, 
 GROTP_ID, TEX_PD_ID, VBAP_ROUTE, ROUTE_NAME, KNANF, 
 STANOTP_KOD, STANOTP_ID, STANOTP_NAME, KNEND, STAN_KOD, 
 STAN_ID, STAN_NAME, SH_KUNNR, POLUCH_NAME, POLUCH_ID, 
 POLUCH_GD_KOD, POTREB_NAME, POTREB_ID, VETKA_NAME, VETKA_ID, 
 OWNERSHIP_ID, VBAK_AUART, CONTRACTOR_ATTR, NAZN_OTG_ID, NAZN_OTG_NAME, 
 NP_OWNER, OWNER_NAME, OWNER_ID, NP_PRODR, PRODR_NAME, 
 PRODR_ID, SUPPLIER_ID, SUPPLIER_NAME, LGOBE, TARIF_CODE, 
 TRANSP_NUM, FORMA_2, FORMA_2_NAME, PRIM, GR4, 
 OSN_8, SLIV_V, DOP_CIST, OBOGR, VBKD_VSART, 
 VAGOWNER_NAME, TONN_DECLARED, CIST_DECLARED, TONN_ALLOW, CIST_ALLOW, 
 TONN_MIN, CIST_MIN, TONN_R, CIST_R, TONN_LOADED, 
 CIST_LOADED, GOSPROG_ID, GOSPROG_NAME, GP_NAPR_ID, GP_NAPR_NAME, 
 DATE_CEN, CENA, CENA_OTP, SUM_ZD, TARIF1TONN, 
 PLANSTRU_ID, PLANSTRU_NAME, UPDATE_DATE, UPDATE_FILE)
AS 
SELECT
  A.NOM_ZD AS ID, -- ID
  R3.VBELN, -- номер разнарядки R3
  A.NOM_ZD, -- номер разнарядки НПО
  A.INPUT_DATE AS DATE_RAZN, -- дата разнарядки
  A.DATE_PLAN, -- плановая дата
  DECODE(R3.V_TJ30_TXT04,NULL,'0010',R3.V_TJ30_TXT04) AS LOCK_STATUS, -- статус блокировки разнарядки
  DECODE(A.IS_EXP,1,'ЭКСПОРТ','ВНУТРЕННИЙ РЫНОК') AS IS_EXP_NAME, A.IS_EXP, -- направление
  R3.VBAK_VSBED, C.LOAD_NAME, R3.VBKD_TRATY, R3_TRATY.NAME AS VAGONTYPE_NAME, A.LOAD_ABBR AS LOAD_ABBR, C.LOAD_TYPE_ID AS LOAD_TYPE_ID,KLS_LOAD_TYPE.TYPE_OTGR_NAME, -- Тип транспортировки
  R3.VBAP_MATNR, KLS_PROD.NAME_NPR AS PROD_NAME_NPR, A.PROD_ID_NPR, -- продукт
  DECODE(NVL(dog.MAINDOG_ID,0),0,'',DECODE(NVL(dog.LUKDOG_ID,0),0,dog.DOG_NUMBER,luk_dog.DOG_NUMBER)) AS LUK_DOG_NUMBER, DECODE(NVL(dog.MAINDOG_ID,0),0,0,DECODE(NVL(dog.LUKDOG_ID,0),0,dog.ID,dog.LUKDOG_ID)) AS LUK_DOG_ID, -- Договор ЛУКОЙЛ-Клиент
  NPO_DOG.DOG_NUMBER AS NPO_DOG_NUMBER, A.NPODOG_ID AS NPO_DOG_ID, -- Договор НПО-Клиент
  dog.DOG_NUMBER AS DOG_NUMBER, A.DOG_ID, -- Договор разнарядки
  A.USL_NUMBER, -- Номер условия,
  R3.VBPA_KUNNR, plat.PREDPR_NAME AS plat_name, dog.PREDPR_ID AS plat_ID, -- Плательщик по договору разнарядки
  R3.OT_LIFNR, grotp.PREDPR_NAME AS grotp_name, A.GROTP_ID AS grotp_ID, -- грузоотправитель
  A.TEX_PD_ID, -- плательщик тарифа
  R3.VBAP_ROUTE, R3_ROUTES.BEZEI AS ROUTE_NAME, R3_ROUTES.KNANF, STANOTP.STAN_KOD AS STANOTP_KOD, STANOTP.ID AS STANOTP_ID, STANOTP.STAN_NAME AS STANOTP_NAME, R3_ROUTES.KNEND, STAN.STAN_KOD, STAN.ID AS STAN_ID, STAN.STAN_NAME, -- Маршрут
  R3.SH_KUNNR, poluch.PREDPR_NAME AS poluch_name, A.poluch_ID, -- грузополучатель
  poluch.GD_KOD AS POLUCH_GD_KOD,
  potreb.PREDPR_NAME AS POTREB_NAME, A.potreb_ID, -- Потребитель
  KLS_VETKA.VETKA_NAME, A.vetka_id, -- Ветка получателя
  DECODE(NVL(dog.MAINDOG_ID,0),0,2,0) AS OWNERSHIP_ID, -- отношения собственности (0-собс.продукт,1-покупной,2-чужой)
  R3.VBAK_AUART,
  R3.CONTRACTOR_ATTR,
  A.NAZN_OTG_ID, KLS_NAZN_OTG.NAZN_OTG_NAME, -- назначение отгрузки
  R3.NP_OWNER, owner.PREDPR_NAME AS owner_name, A.NPR_SOBSTV_ID AS owner_ID, -- собственник н/п
  R3.NP_PRODR, prodr.NAME AS prodr_name, 0 AS prodr_ID, -- производитель н/п
  A.SUPPLIER_ID, supplier.PREDPR_NAME AS SUPPLIER_NAME, -- поставщик н/п
  D.LGOBE, -- Завод/Склад
  A.K_TAR AS TARIF_CODE, -- Код искл.тарифа
  A.TRANSPORT AS TRANSP_NUM, -- N транспорта
  A.FLG_FORMA_2 AS FORMA_2, KLS_FORMA_2.NAME AS FORMA_2_NAME, -- Оплата по ф.2
  A.PRIM, -- Примечание
  A.GR4, -- Графа 4
  A.FLG_ALLOW_8_AXES AS osn_8, -- можно в 8-осные
  A.FLG_UPPER_SLIV AS sliv_v, -- можно верхний слив
  A.FLG_DOP_CIST AS dop_cist, -- д/ц
  A.FLG_OBOGR AS obogr, -- обогрев
  R3.VBKD_VSART, F.NAME AS VAGOWNER_NAME,
  A.TONN_DECLARED, -- Заявлено
  A.CIST_DECLARED, -- Заявлено цист.
  NVL(R3.VBAP_KBMENG,0) AS TONN_ALLOW, -- Разрешено
  CEIL(NVL(R3.VBAP_KBMENG,0)/60) AS CIST_ALLOW, -- Разрешено цист.
  DECODE(SIGN(A.TONN_R-A.TONN_LOADED),-1,A.TONN_LOADED,A.TONN_R) AS TONN_MIN, -- Минимально
  DECODE(SIGN(A.TONN_R-A.TONN_LOADED),-1,A.CIST_LOADED,A.CIST_R) AS CIST_MIN, -- Минимально цист.
  A.TONN_R, -- К отгрузке
  A.CIST_R, -- К отгрузке цист.
  A.TONN_LOADED, -- Отгружено
  A.CIST_LOADED, -- Отгружено цист.
  A.GOSPROG_ID, KLS_GOSPROG.GOSPROG_NAME, -- Госпрограмма
  A.GP_NAPR_ID, KLS_GP_NAPR.NAME AS GP_NAPR_NAME, -- Получатель по ГП
  A.DATE_CEN, -- Дата цены
  A.CENA, -- цена без НДС
  A.CENA_OTP, -- отпускная цена
  A.SUM_ZD, -- сумма по заданию
  A.TARIF1TONN, -- тариф за 1 тонну
  A.PLANSTRU_ID, KLS_PLANSTRU.NAME AS PLANSTRU_NAME, -- позиция плана поставки
  A.UPDATE_DATE, -- дата последнего обновления
  '' AS UPDATE_FILE -- файл
FROM MONTH A, R3_VBAK R3, KLS_DOG dog, KLS_STAN stan, KLS_STAN stanotp, KLS_DOG MAIN_DOG, KLS_VID_OTGR C, KLS_FORMA_2,
     KLS_NAZN_OTG, KLS_LOAD_TYPE, KLS_PROD, R3_TRATY, KLS_DOG LUK_DOG, KLS_DOG NPO_DOG, KLS_PREDPR plat, KLS_PREDPR grotp,
	 KLS_PREDPR poluch, KLS_PREDPR potreb, R3_ROUTES, KLS_VETKA, KLS_PREDPR owner, R3_VENDORS prodr, KLS_PREDPR supplier,
	 R3_WERKS_LGORT D,R3_VSART F, KLS_GOSPROG, KLS_GP_NAPR, KLS_PLANSTRU
WHERE A.nom_zd=R3.nom_zd(+)
  AND A.DOG_ID=dog.ID
  AND A.STANOTP_ID=stanotp.ID(+)
  AND A.STAN_ID=stan.ID(+)
  AND dog.MAINDOG_ID=MAIN_DOG.ID(+)
  AND A.LOAD_ABBR=C.LOAD_ABBR
  AND A.FLG_FORMA_2=KLS_FORMA_2.ID (+)
  AND A.NAZN_OTG_ID=KLS_NAZN_OTG.ID
  AND C.LOAD_TYPE_ID=KLS_LOAD_TYPE.ID
  AND A.PROD_ID_NPR=KLS_PROD.ID_NPR
  AND R3.VBKD_TRATY=R3_TRATY.VBKD_TRATY(+)
  AND dog.LUKDOG_ID=LUK_DOG.ID(+)
  AND A.NPODOG_ID=NPO_DOG.ID(+)
  AND dog.PREDPR_ID=plat.ID
  AND A.GROTP_ID=grotp.ID
  AND A.POLUCH_ID=poluch.ID
  AND A.POTREB_ID=potreb.ID
  AND R3.VBAP_ROUTE=R3_ROUTES.ROUTE(+)
  AND A.VETKA_ID=KLS_VETKA.ID(+)
  AND A.NPR_SOBSTV_ID=owner.ID(+)
  AND R3.NP_PRODR=prodr.ID(+)
  AND A.SUPPLIER_ID=supplier.ID(+)
  AND R3.VBAP_WERKS=D.VBAP_WERKS(+)
  AND R3.LGORT=D.LGORT(+)
  AND R3.VBKD_VSART=F.VBKD_VSART (+)
  AND A.GOSPROG_ID=KLS_GOSPROG.ID(+)
  AND A.GP_NAPR_ID=KLS_GP_NAPR.ID(+)
  AND A.PLANSTRU_ID=KLS_PLANSTRU.ID(+);


/* This object may not be sorted properly in the script due to cirular references. */
--
-- V_NEW_MONTH_R3_VBAK  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_NEW_MONTH_R3_VBAK
(ID, VBELN, NOM_ZD, DATE_RAZN, DATE_PLAN, 
 LOCK_STATUS, IS_EXP_NAME, IS_EXP, VBAK_VSBED, LOAD_NAME, 
 VBKD_TRATY, VAGONTYPE_NAME, LOAD_ABBR, LOAD_TYPE_ID, TYPE_OTGR_NAME, 
 VBAP_MATNR, PROD_NAME_NPR, PROD_ID_NPR, LUK_DOG_NUMBER, LUK_DOG_ID, 
 NPO_DOG_NUMBER, NPO_DOG_ID, DOG_NUMBER, DOG_ID, USL_NUMBER, 
 VBPA_KUNNR, PLAT_NAME, PLAT_ID, OT_LIFNR, GROTP_NAME, 
 GROTP_ID, TEX_PD_ID, VBAP_ROUTE, ROUTE_NAME, KNANF, 
 STANOTP_KOD, STANOTP_ID, STANOTP_NAME, KNEND, STAN_KOD, 
 STAN_ID, STAN_NAME, SH_KUNNR, POLUCH_NAME, POLUCH_ID, 
 POLUCH_GD_KOD, POTREB_NAME, POTREB_ID, VETKA_NAME, VETKA_ID, 
 OWNERSHIP_ID, VBAK_AUART, CONTRACTOR_ATTR, NAZN_OTG_ID, NAZN_OTG_NAME, 
 NP_OWNER, OWNER_NAME, OWNER_ID, NP_PRODR, PRODR_NAME, 
 PRODR_ID, SUPPLIER_ID, SUPPLIER_NAME, LGOBE, TARIF_CODE, 
 TRANSP_NUM, FORMA_2, FORMA_2_NAME, PRIM, GR4, 
 OSN_8, SLIV_V, DOP_CIST, OBOGR, VBKD_VSART, 
 VAGOWNER_NAME, TONN_DECLARED, CIST_DECLARED, TONN_ALLOW, CIST_ALLOW, 
 TONN_MIN, CIST_MIN, TONN_R, CIST_R, TONN_LOADED, 
 CIST_LOADED, GOSPROG_ID, GOSPROG_NAME, GP_NAPR_ID, GP_NAPR_NAME, 
 DATE_CEN, CENA, CENA_OTP, SUM_ZD, TARIF1TONN, 
 PLANSTRU_ID, PLANSTRU_NAME, UPDATE_DATE, UPDATE_FILE)
AS 
SELECT
  A.VBELN AS ID, -- ID
  A.VBELN, -- номер разнарядки R3
  A.NOM_ZD, -- номер разнарядки НПО
  A.VBAK_VDATU AS DATE_RAZN, -- дата разнарядки
  TRUNC(A.VBAK_VDATU,'MONTH') AS DATE_PLAN, -- плановая дата
  A.V_TJ30_TXT04 AS LOCK_STATUS, -- <>'0010' - наличие хотя-бы одной блокированной позиции
  DECODE(A.VBAK_VTWEG,'01','ЭКСПОРТ','ВНУТРЕННИЙ РЫНОК') AS IS_EXP_NAME, DECODE(A.VBAK_VTWEG,'01',1,0) AS IS_EXP, -- направление 01-экспорт 02-по России
  A.VBAK_VSBED, B.NAME AS LOAD_NAME, A.VBKD_TRATY, C.NAME AS VAGONTYPE_NAME, C.LOAD_ABBR, C.LOAD_TYPE_ID, B.NAME AS TYPE_OTGR_NAME, -- Тип транспортировки
  MM.VBAP_MATNR, MM.MAKTX AS PROD_NAME_NPR, MM.PROD_ID_NPR, -- последний продукт (если NULL - разнарядка блокирована)
  A.VBAK_ZZ021 AS LUK_DOG_NUMBER, NVL(luk_dog.DOG_ID,0) AS LUK_DOG_ID, -- Договор ЛУКОЙЛ-Клиент
  NVL(plat.KVERM, '') AS NPO_DOG_NUMBER, NVL(dog.DOG_ID,0) AS NPO_DOG_ID, -- Договор НПО-Клиент
  NVL(DECODE(plat.KVERM, NULL, A.VBAK_ZZ021, plat.KVERM),'') AS DOG_NUMBER, NVL(DECODE(plat.KVERM, NULL, luk_dog.DOG_ID, dog.DOG_ID),0) AS DOG_ID, -- Договор разнарядки
  0 AS USL_NUMBER, -- Номер условия
  A.VBPA_KUNNR, plat.NAME AS plat_name, NVL(plat.PREDPR_ID,0) AS plat_ID, -- Плательщик по договору разнарядки
  A.OT_LIFNR, grotp.NAME AS grotp_name, NVL(grotp.PREDPR_ID,0) AS grotp_ID, -- грузоотправитель
  0 AS TEX_PD_ID, -- плательщик тарифа
  A.VBAP_ROUTE, G.BEZEI AS ROUTE_NAME, G.KNANF, STANOTP.STAN_KOD AS STANOTP_KOD, NVL(STANOTP.ID,0) AS STANOTP_ID, STANOTP.STAN_NAME as STANOTP_NAME, G.KNEND, STAN.STAN_KOD, NVL(STAN.ID,0) AS STAN_ID, STAN.STAN_NAME, -- Маршрут
  A.SH_KUNNR, poluch.NAME AS poluch_name, NVL(poluch.PREDPR_ID,0) AS poluch_ID, -- грузополучатель
  A.MPS_Y006 AS POLUCH_GD_KOD, -- жд код получателя
  DECODE(A.PO_KNA1_NAME1,NULL,poluch.NAME,A.PO_KNA1_NAME1) AS POTREB_NAME, DECODE(A.PO_KNA1_NAME1,NULL,NVL(poluch.PREDPR_ID,0),0) AS potreb_ID, -- Потребитель
  A.NPR_NAME AS VETKA_NAME, 0 AS VETKA_ID, -- Ветка получателя
  DECODE(A.VBAK_VTWEG,'01',0,DECODE(A.NP_OWNER,'1001090',0,2)) AS OWNERSHIP_ID, -- отношения собственности (0-собс.продукт,1-покупной,2-чужой)
  A.VBAK_AUART, A.CONTRACTOR_ATTR, -- назначение отгрузки
  DECODE(H.NAZN_OTG_ID,NULL,DECODE(A.VBAK_VTWEG,'01',5,DECODE(A.NP_OWNER,'1001090',1,4)),H.NAZN_OTG_ID) AS NAZN_OTG_ID, '' AS NAZN_OTG_NAME, -- назначение отгрузки
  A.NP_OWNER, owner.NAME AS owner_name, NVL(owner.PREDPR_ID,0) AS owner_ID, -- собственник н/п
  A.NP_PRODR, prodr.NAME AS prodr_name, NVL(prodr.PREDPR_ID,0) AS prodr_ID, -- производитель н/п
  1 AS SUPPLIER_ID, 'НЕФТЯНАЯ КОМПАНИЯ "ЛУКОЙЛ"' AS SUPPLIER_NAME, -- поставщик н/п
  D.LGOBE, -- Завод/Склад
  A.TARIF_CODE, -- Код искл.тарифа
  A.TRANSP_NUM, -- N транспорта
  0 AS FORMA_2, GAR_Y007 AS FORMA_2_NAME,-- Оплата по ф.2
  A.TEXT1_Y005 AS PRIM, -- Примечание
  A.TEXT3_Y003 AS GR4, -- Графа 4
  DECODE(A.MVRG1,'РЗР',1,0) AS osn_8, -- можно в 8-осные
  0 AS sliv_v, -- врехний слив
  0 AS dop_cist, -- д/ц
  0 AS obogr, -- обогрев
  A.VBKD_VSART, F.NAME AS VAGOWNER_NAME, -- Собственник т/с
  A.VBAP_KWMENG AS TONN_DECLARED, -- Заявлено
  CEIL(A.VBAP_KWMENG/60) AS CIST_DECLARED, -- Заявлено цист.
  A.VBAP_KBMENG AS TONN_ALLOW, -- Разрешено
  CEIL(A.VBAP_KBMENG/60) AS CIST_ALLOW, -- Разрешено цист.
  0 AS TONN_MIN, -- Минимально
  0 AS CIST_MIN, -- Минимально
  0 AS TONN_R,
  0 AS CIST_R,
  0 AS TONN_LOADED,
  0 AS CIST_LOADED,
  -1 AS GOSPROG_ID, '' AS GOSPROG_NAME, -- Госпрограмма
  0 AS GP_NAPR_ID, '' AS GP_NAPR_NAME, -- Получатель по ГП
  TRUNC(SYSDATE) AS DATE_CEN, -- Дата цены
  0 AS CENA, -- цена без НДС
  0 AS CENA_OTP, -- отпускная цена
  0 AS SUM_ZD, -- сумма по заданию
  0 AS TARIF1TONN, -- тариф за 1 тонну
  0 AS PLANSTRU_ID, '' AS PLANSTRU_NAME, -- позиция плана поставки
  A.ZZZZ_DATE AS UPDATE_DATE,
  A.ZZZZ_FILE AS UPDATE_FILE
FROM R3_VBAK A, R3_VSBED B, R3_TRATY C, R3_VSART F, R3_WERKS_LGORT D,
     R3_VENDORS owner, R3_VENDORS prodr, R3_VENDORS grotp,
	 R3_CUSTOMERS poluch, R3_CUSTOMERS luk_plat, R3_CUSTOMERS plat,
	 R3_ROUTES G, R3_CC luk_dog, R3_CC dog, KLS_STAN STAN, KLS_STAN STANOTP,
     R3_MATERIALS MM, R3_AUART H
WHERE A.VBAP_VSTEL='05'
  AND A.VBAK_VSBED=B.VBAK_VSBED(+)
  AND A.VBKD_TRATY=C.VBKD_TRATY(+)
  AND A.VBAP_WERKS=D.VBAP_WERKS(+)
  AND A.LGORT=D.LGORT(+)
  AND A.OT_LIFNR=grotp.ID(+)
  AND A.NP_OWNER=owner.ID(+)
  AND A.NP_PRODR=prodr.ID(+)
  AND A.SH_KUNNR=poluch.ID(+)
  AND A.VBPA_KUNNR=plat.ID(+)
  AND A.VBPA_KUNNR_SP=luk_plat.ID(+)
  AND A.VBAP_ROUTE=G.ROUTE(+)
  AND A.VBAK_ZZ021=luk_dog.EKKO_ZZ021(+)
  AND plat.KVERM=dog.EKKO_ZZ021(+)
  AND TO_NUMBER(G.KNANF)=STANOTP.STAN_KOD(+)
  AND TO_NUMBER(G.KNEND)=STAN.STAN_KOD(+)
  AND A.VBKD_VSART=F.VBKD_VSART (+)
  AND A.VBAP_MATNR=MM.VBAP_MATNR(+)
  AND A.VBAK_AUART=H.VBAK_AUART(+);


/* This object may not be sorted properly in the script due to cirular references. */
--
-- V_R3_YFRT  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_R3_YFRT
(VBELN, WAERS, KSCHL, MEINS, DOGOVOR, 
 EKKO_EBELN, ASNUM, ASNUM_NAME, KERNEL_ID, KERNEL_TAG, 
 CONTRACT_ATTR)
AS 
SELECT DISTINCT R3_OA.VBAK_VBELN,
	   R3_OA.KONV_WAERS,
	   R3_KONV.KSCHL,
	   R3_SC.ASMD_MEINS,
	   R3_SC.EKKO_ZZ021,
	   R3_CC.EKKO_EBELN,
	   R3_SC.ASNUM,
	   R3_SC.ASMDT_ASKTX,
	   R3_SC.KERNEL_ID,
	   R3_SC.KERNEL_TAG,
	   R3_VBAK.CONTRACTOR_ATTR
FROM R3_OA,R3_SC, R3_CC, R3_VBAK, R3_KONV
WHERE R3_OA.KONV_KSCHL = R3_KONV.KSCHL
  AND R3_KONV.MATCH_ASNUM=R3_SC.ASNUM
  AND R3_SC.KERNEL_TAG = 'OUT_WBILL_RW_OS$PLAT'
  AND R3_SC.EKKO_ZZ021=R3_CC.EKKO_ZZ021
  AND R3_OA.VBAK_VBELN=R3_VBAK.VBELN
  AND R3_VBAK.CONTRACTOR_ATTR=3;


/* This object may not be sorted properly in the script due to cirular references. */
--
-- V_VBAK_LAST_POSNR  (View) 
--
CREATE OR REPLACE FORCE VIEW MASTER.V_VBAK_LAST_POSNR
(VBAK_VBELN, VBAP_MATNR, VBAP_KWMENG, VBAP_KBMENG)
AS 
SELECT R3_VBAK.VBELN, B.VBAP_MATNR, B.VBAP_KWMENG, B.VBAP_KBMENG
FROM R3_VBAK,
   (SELECT R3_OD.VBAK_VBELN, R3_OD.VBAP_MATNR, POS.VBAP_KWMENG, POS.VBAP_KBMENG
    FROM R3_OD,
      (SELECT VBAK_VBELN,
         MAX(VBAP_POSNR) AS VBAP_POSNR,
         SUM(VBAP_KWMENG) AS VBAP_KWMENG,
         SUM(VBAP_KBMENG) AS VBAP_KBMENG
       FROM R3_OD WHERE V_TJ30_TXT04='0010'
       GROUP BY VBAK_VBELN) POS
    WHERE R3_OD.VBAK_VBELN=POS.VBAK_VBELN
      AND R3_OD.VBAP_POSNR=POS.VBAP_POSNR) B
WHERE R3_VBAK.VBELN=B.VBAK_VBELN(+);


-- 
-- Non Foreign Key Constraints for Table APP_USERS 
-- 
ALTER TABLE MASTER.APP_USERS ADD (
  CONSTRAINT APP_USERS_SNP_CC
  CHECK (SNP IN (0, 1))
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CONSTRAINT APP_USERS_UNP_CC
  CHECK (UNP IN (0, 1))
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CHECK ("NETNAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CHECK ("SNP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CHECK ("UNP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CHECK ("IS_ADMIN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CHECK ("MNOS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CONSTRAINT APP_USERS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.APP_USERS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.APP_USERS ADD (
  CONSTRAINT APP_USERS_UK
  UNIQUE (NAME)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table ARH_DATE 
-- 
ALTER TABLE MASTER.ARH_DATE ADD (
  CONSTRAINT ARH_DATE_PK
  PRIMARY KEY
  (TABLENAME)
  USING INDEX MASTER.ARH_DATE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_FROM_PARUS 
-- 
ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CHECK ("REALIZ_ALL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CHECK ("REALIZ_AZC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CHECK ("OSTATOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CHECK ("IS_AZC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_FROM_PARUS ADD (
  CONSTRAINT PK_AZC_FROM_PARUS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_FROM_PARUS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_OPERATION_ARCH 
-- 
ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("DENCITY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("TYPE_OPER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_ARCH ADD (
  CONSTRAINT ARCH_OPERATION_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ARCH_OPERATION_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_OPERATION_TMP 
-- 
ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("DENCITY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("TYPE_OPER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION_TMP ADD (
  CONSTRAINT PK_AZC_OPERATION_TMP
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_OPERATION_TMP
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_OPER_FIELDS 
-- 
ALTER TABLE MASTER.AZC_OPER_FIELDS ADD (
  CHECK ("N_PAGE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPER_FIELDS ADD (
  CHECK ("N_ORDER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPER_FIELDS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPER_FIELDS ADD (
  CHECK ("CAPTION" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPER_FIELDS ADD (
  CONSTRAINT PK_AZC_OPER_FIELDS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_OPER_FIELDS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_OPER_MAIN 
-- 
ALTER TABLE MASTER.AZC_OPER_MAIN ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPER_MAIN ADD (
  CONSTRAINT PK_AZC_OPER_MAIN
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_OPER_MAIN
  ENABLE VALIDATE);

ALTER TABLE MASTER.AZC_OPER_MAIN ADD (
  UNIQUE (NAME)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_OPER_PAGE 
-- 
ALTER TABLE MASTER.AZC_OPER_PAGE ADD (
  CONSTRAINT PK_AZC_OPER_PAGE
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_OPER_PAGE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_PLACE_SEND 
-- 
ALTER TABLE MASTER.AZC_PLACE_SEND ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_PLACE_SEND ADD (
  CONSTRAINT PLACE_SEND_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLACE_SEND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_PROD_GROUP 
-- 
ALTER TABLE MASTER.AZC_PROD_GROUP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_PROD_GROUP ADD (
  CONSTRAINT AZC_PR_GRP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.AZC_PR_GRP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_SYS_FIELDS 
-- 
ALTER TABLE MASTER.AZC_SYS_FIELDS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_SYS_FIELDS ADD (
  CHECK ("ALIAS_" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_SYS_FIELDS ADD (
  CONSTRAINT PK_AZC_SYS_FIELDS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_SYS_FIELDS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_SYS_PAGE 
-- 
ALTER TABLE MASTER.AZC_SYS_PAGE ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_SYS_PAGE ADD (
  CONSTRAINT PK_AZC_SYS_PAGE
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_SYS_PAGE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_TYPE_OPERATION 
-- 
ALTER TABLE MASTER.AZC_TYPE_OPERATION ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_TYPE_OPERATION ADD (
  CHECK ("KIND_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_TYPE_OPERATION ADD (
  CONSTRAINT TYPE_OPER_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TYPE_OPER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_WEEK_PARUS 
-- 
ALTER TABLE MASTER.AZC_WEEK_PARUS ADD (
  CONSTRAINT PK_AZC_WEEK_PARUS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_WEEK_PARUS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZS_REPORTS_TMP 
-- 
ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("TYPE_OPER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("OPER_DAY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("PRICE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("MASSA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZS_REPORTS_TMP ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZS_R_TMP 
-- 
ALTER TABLE MASTER.AZS_R_TMP ADD (
  CONSTRAINT RN_R
  PRIMARY KEY
  (AZS_R, DATE_R, TYPE_R, TRK_R)
  USING INDEX MASTER.RN_R
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILL_POS_ROW 
-- 
ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("BILL_POS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("CENA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("SUMMA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("SUMMA_NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CHECK ("NPP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_ROW ADD (
  CONSTRAINT BILL_POS_ROW_U01
  UNIQUE (NOM_DOK, BILL_POS_ID, NPP)
  USING INDEX MASTER.BILL_POS_ROW_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILLS_PREPAY 
-- 
ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("NOM_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("DATE_VYP_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("DATE_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("DATE_BUXG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("DATE_MOS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("DATE_OTGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_GSM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_VOZN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_VOZN_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("SUMMA_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("OWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CHECK ("KOL_DN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PREPAY ADD (
  CONSTRAINT BILLS_PREP_PK
  PRIMARY KEY
  (NOM_DOK)
  USING INDEX MASTER.BILLS_PREP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILLS_PRIMARY 
-- 
ALTER TABLE MASTER.BILLS_PRIMARY ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PRIMARY ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PRIMARY ADD (
  CHECK ("PRIMARY_APPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PRIMARY ADD (
  CONSTRAINT PK_BILLS_PRIMARY
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_BILLS_PRIMARY
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BUF_V_INT 
-- 
ALTER TABLE MASTER.BUF_V_INT ADD (
  CONSTRAINT BUF_V_INT_PK
  PRIMARY KEY
  (DD_MM_YYYY, SYB_RNK, N_OB, N_FID, MIN_0, MIN_1, N_INTER_RAS, N_GR_TY)
  USING INDEX MASTER.BUF_V_INT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DIAGRAM 
-- 
ALTER TABLE MASTER.DIAGRAM ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DIAGRAM ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table DIS_DOCS_ 
-- 
ALTER TABLE MASTER.DIS_DOCS_ ADD (
  CHECK ("OWNER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DIS_DOCS_ ADD (
  CHECK ("DOCUMENT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DIS_DOCS_ ADD (
  CHECK ("CREATE_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DIS_DOCS_ ADD (
  CHECK ("DOC_LENGTH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DIS_DOCS_ ADD (
  CONSTRAINT DIS_DD_PK
  PRIMARY KEY
  (DOCUMENT_ID)
  USING INDEX MASTER.DIS_DD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DIS_GRANTS_ 
-- 
ALTER TABLE MASTER.DIS_GRANTS_ ADD (
  CHECK ("OWNER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DIS_GRANTS_ ADD (
  CONSTRAINT DIS_DG_PK
  PRIMARY KEY
  (DOCUMENT_ID, GRANTEE)
  USING INDEX MASTER.DIS_DG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DISP_AZS_MANUAL 
-- 
ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OSUSER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("TERMINAL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("IN_O_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("IN_O_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("END_VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("END_MASSA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_1_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_1_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_2_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_2_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_3_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_3_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_4_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_4_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_5_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_5_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_6_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_6_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_7_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CHECK ("OUT_O_7_MAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DISP_AZS_MANUAL ADD (
  CONSTRAINT PK_DISP_AZS_MANUAL
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_DISP_AZS_MANUAL
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOC_STREAM 
-- 
ALTER TABLE MASTER.DOC_STREAM ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOC_STREAM ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOC_STREAM ADD (
  CONSTRAINT PK_DOC_STREAM
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_DOC_STREAM
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOC_STREAM_STAGES 
-- 
ALTER TABLE MASTER.DOC_STREAM_STAGES ADD (
  CHECK ("STREAM_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOC_STREAM_STAGES ADD (
  CHECK ("TABLE_TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOC_STREAM_STAGES ADD (
  CONSTRAINT DOC_STREAM_STAGES_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.DOC_STREAM_STAGES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ENVIRONMENT 
-- 
ALTER TABLE MASTER.ENVIRONMENT ADD (
  CHECK ("ENV_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ENVIRONMENT ADD (
  CHECK ("ENV_TYPES_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ENVIRONMENT ADD (
  CHECK ("APPL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ENVIRONMENT ADD (
  CONSTRAINT ENV_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ENV_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.ENVIRONMENT ADD (
  CONSTRAINT ENV_UK
  UNIQUE (APPL_NAME, ENV_GRP_ID, NETUSER, ENV_NAME)
  USING INDEX MASTER.ENV_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ENVIRONMENT_GRP 
-- 
ALTER TABLE MASTER.ENVIRONMENT_GRP ADD (
  CONSTRAINT ENV_GRP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ENV_GRP_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.ENVIRONMENT_GRP ADD (
  CONSTRAINT ENV_GRP_ENV_GRP_AK_UK
  UNIQUE (GRP_NAME)
  USING INDEX MASTER.ENV_GRP_ENV_GRP_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ENVIRONMENT_TYPES 
-- 
ALTER TABLE MASTER.ENVIRONMENT_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ENVIRONMENT_TYPES ADD (
  CONSTRAINT ENV_TYPES_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ENV_TYPES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_APP_PARAMS 
-- 
ALTER TABLE MASTER.EUL_APP_PARAMS ADD (
  CONSTRAINT EUL_APP_CHECK_1
  CHECK ( app_type IN ( 'PRI' ,  'SP' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_APP_PARAMS ADD (
  CHECK ("APP_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_APP_PARAMS ADD (
  CHECK ("APP_NAME_MN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_APP_PARAMS ADD (
  CHECK ("APP_DESCRIPTION_MN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_APP_PARAMS ADD (
  CONSTRAINT EUL_APP_PK
  PRIMARY KEY
  (APP_ID)
  USING INDEX MASTER.EUL_APP_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_APP_PARAMS ADD (
  CONSTRAINT EUL_APP_APP2_UK
  UNIQUE (APP_NAME_MN)
  USING INDEX MASTER.EUL_APP_APP2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BUSINESS_AREAS 
-- 
ALTER TABLE MASTER.EUL_BUSINESS_AREAS ADD (
  CHECK ("BA_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BUSINESS_AREAS ADD (
  CONSTRAINT EUL_BA_PK
  PRIMARY KEY
  (BA_ID)
  USING INDEX MASTER.EUL_BA_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BUSINESS_AREAS ADD (
  CONSTRAINT EUL_BA_BA1_UK
  UNIQUE (BA_NAME)
  USING INDEX MASTER.EUL_BA_BA1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_EUL_USERS 
-- 
ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CONSTRAINT EUL_EU_CHECK_1
  CHECK ( eu_use_pub_privs IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CONSTRAINT EUL_EU_CHECK_2
  CHECK ( eu_role_flag IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CHECK ("EU_USERNAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CHECK ("EU_USE_PUB_PRIVS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CHECK ("EU_ROLE_FLAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CONSTRAINT EUL_EU_PK
  PRIMARY KEY
  (EU_ID)
  USING INDEX MASTER.EUL_EU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_EUL_USERS ADD (
  CONSTRAINT EUL_EU_EU2_UK
  UNIQUE (EU_USERNAME)
  USING INDEX MASTER.EUL_EU_EU2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_FREQ_UNITS 
-- 
ALTER TABLE MASTER.EUL_FREQ_UNITS ADD (
  CHECK ("RFU_NAME_MN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FREQ_UNITS ADD (
  CHECK ("RFU_SQL_EXPRESSION" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FREQ_UNITS ADD (
  CONSTRAINT EUL_RFU_PK
  PRIMARY KEY
  (RFU_ID)
  USING INDEX MASTER.EUL_RFU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_FREQ_UNITS ADD (
  CONSTRAINT EUL_RFU_RFU2_UK
  UNIQUE (RFU_NAME_MN)
  USING INDEX MASTER.EUL_RFU_RFU2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_FUN_CATEGORIES 
-- 
ALTER TABLE MASTER.EUL_FUN_CATEGORIES ADD (
  CONSTRAINT EUL_FC_CHECK_1
  CHECK ( fc_name_s is not null or fc_name_mn is not null )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_CATEGORIES ADD (
  CONSTRAINT EUL_FC_PK
  PRIMARY KEY
  (FC_ID)
  USING INDEX MASTER.EUL_FC_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_FUN_CATEGORIES ADD (
  CONSTRAINT EUL_FC_FC2_UK
  UNIQUE (FC_NAME_MN, FC_NAME_S)
  USING INDEX MASTER.EUL_FC_FC2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_FUNCTIONS 
-- 
ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_CHECK_1
  CHECK ( nvl(fun_maximum_args, fun_minimum_args) >= fun_minimum_args )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_CHECK_2
  CHECK ( fun_function_type IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_CHECK_3
  CHECK ( fun_hidden IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_CHECK_4
  CHECK ( fun_data_type IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_CHECK_5
  CHECK ( fun_available IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_CHECK_6
  CHECK ( fun_built_in IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_FUNCTION_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_HIDDEN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_DATA_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_AVAILABLE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_MINIMUM_ARGS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CHECK ("FUN_BUILT_IN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUNCTIONS ADD (
  CONSTRAINT EUL_FUN_PK
  PRIMARY KEY
  (FUN_ID)
  USING INDEX MASTER.EUL_FUN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_FUN_FC_LINKS 
-- 
ALTER TABLE MASTER.EUL_FUN_FC_LINKS ADD (
  CHECK ("FFL_FUN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_FC_LINKS ADD (
  CHECK ("FFL_FC_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_FC_LINKS ADD (
  CONSTRAINT EUL_FFL_PK
  PRIMARY KEY
  (FFL_ID)
  USING INDEX MASTER.EUL_FFL_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_FUN_FC_LINKS ADD (
  CONSTRAINT EUL_FFL_FFL2_UK
  UNIQUE (FFL_FUN_ID, FFL_FC_ID)
  USING INDEX MASTER.EUL_FFL_FFL2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_GATEWAYS 
-- 
ALTER TABLE MASTER.EUL_GATEWAYS ADD (
  CONSTRAINT EUL_GW_CHECK_1
  CHECK ( gw_type IN ('EGW',  'BGW') )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_GATEWAYS ADD (
  CONSTRAINT EUL_GW_CHECK_2
  CHECK ( egw_sql_paradigm in ('TABLE', 'OBJECT') )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_GATEWAYS ADD (
  CHECK ("GW_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_GATEWAYS ADD (
  CHECK ("GW_GATEWAY_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_GATEWAYS ADD (
  CHECK ("GW_PRODUCT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_GATEWAYS ADD (
  CONSTRAINT EUL_GW_PK
  PRIMARY KEY
  (GW_ID)
  USING INDEX MASTER.EUL_GW_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_HIERARCHIES 
-- 
ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CONSTRAINT EUL_HI_CHECK_1
  CHECK ( hi_type IN ( 'DBH' ,  'IBH' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CONSTRAINT EUL_HI_CHECK_2
  CHECK ( hi_sys_generated IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CONSTRAINT EUL_HI_CHECK_3
  CHECK ( dbh_default IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CHECK ("HI_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CHECK ("HI_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CHECK ("HI_SYS_GENERATED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CONSTRAINT EUL_HI_PK
  PRIMARY KEY
  (HI_ID)
  USING INDEX MASTER.EUL_HI_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CONSTRAINT EUL_HI_HI1_UK
  UNIQUE (HI_NAME)
  USING INDEX MASTER.EUL_HI_HI1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_HI_NODES 
-- 
ALTER TABLE MASTER.EUL_HI_NODES ADD (
  CHECK ("HN_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_NODES ADD (
  CHECK ("HN_HI_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_NODES ADD (
  CONSTRAINT EUL_HN_PK
  PRIMARY KEY
  (HN_ID)
  USING INDEX MASTER.EUL_HN_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_HI_NODES ADD (
  CONSTRAINT EUL_HN_HN2_UK
  UNIQUE (HN_HI_ID, HN_NAME)
  USING INDEX MASTER.EUL_HN_HN2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_JOIN_COMBS 
-- 
ALTER TABLE MASTER.EUL_JOIN_COMBS ADD (
  CONSTRAINT EUL_JC_CHECK_1
  CHECK ( jc_type IN ( 'HSP' ,  'JC' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_JOIN_COMBS ADD (
  CHECK ("JC_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_JOIN_COMBS ADD (
  CONSTRAINT EUL_JC_PK
  PRIMARY KEY
  (JC_ID)
  USING INDEX MASTER.EUL_JC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_OBJS 
-- 
ALTER TABLE MASTER.EUL_OBJS ADD (
  CONSTRAINT EUL_OBJ_CHECK_1
  CHECK ( obj_type IN ( 'COBJ' ,  'SOBJ',  'CUO' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CONSTRAINT EUL_OBJ_CHECK_2
  CHECK ( obj_hidden IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CONSTRAINT EUL_OBJ_CHECK_3
  CHECK ( obj_distinct_flag IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CHECK ("OBJ_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CHECK ("OBJ_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CHECK ("OBJ_HIDDEN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CHECK ("OBJ_DISTINCT_FLAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CONSTRAINT EUL_OBJ_PK
  PRIMARY KEY
  (OBJ_ID)
  USING INDEX MASTER.EUL_OBJ_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_OBJS ADD (
  CONSTRAINT EUL_OBJ_OBJ1_UK
  UNIQUE (OBJ_NAME)
  USING INDEX MASTER.EUL_OBJ_OBJ1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_QPP_STATISTICS 
-- 
ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CONSTRAINT EUL_QS_CHECK_1
  CHECK ( nvl(qs_cost,  0) >= 0 and nvl(qs_act_cpu_time,  0) >= 0 and qs_act_elap_time >= 0 and qs_est_elap_time >= 0 )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CONSTRAINT EUL_QS_CHECK_2
  CHECK ( qs_summary_fit IN ( 0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CHECK ("QS_ACT_ELAP_TIME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CHECK ("QS_EST_ELAP_TIME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CHECK ("QS_DATE_STAMP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CHECK ("QS_OBJECT_USE_KEY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CHECK ("QS_USERNAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_QPP_STATISTICS ADD (
  CONSTRAINT EUL_QS_PK
  PRIMARY KEY
  (QS_ID)
  USING INDEX MASTER.EUL_QS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SEQUENCES 
-- 
ALTER TABLE MASTER.EUL_SEQUENCES ADD (
  CHECK ("SEQ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEQUENCES ADD (
  CHECK ("SEQ_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEQUENCES ADD (
  CHECK ("SEQ_NEXTVAL" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SUM_RFRSH_SETS 
-- 
ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_CHECK_1
  CHECK ( srs_state IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_CHECK_2
  CHECK ( srs_online IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_CHECK_3
  CHECK ( srs_auto_refresh IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_CHECK_4
  CHECK ( srs_upgrade_reqd IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CHECK ("SRS_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CHECK ("SRS_STATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CHECK ("SRS_ONLINE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CHECK ("SRS_AUTO_REFRESH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CHECK ("SRS_EU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CHECK ("SRS_UPGRADE_REQD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_PK
  PRIMARY KEY
  (SRS_ID)
  USING INDEX MASTER.EUL_SRS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_SRS2_UK
  UNIQUE (SRS_NAME)
  USING INDEX MASTER.EUL_SRS_SRS2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_VERSIONS 
-- 
ALTER TABLE MASTER.EUL_VERSIONS ADD (
  CHECK ("VER_EUL_TIMESTAMP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_VERSIONS ADD (
  CHECK ("VER_MIN_CODE_VER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_VERSIONS ADD (
  CHECK ("VER_RELEASE" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table EXPORT2INFIN 
-- 
ALTER TABLE MASTER.EXPORT2INFIN ADD (
  CHECK ("KLS_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EXPORT2INFIN ADD (
  CHECK ("QUERY_TEXT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EXPORT2INFIN ADD (
  CHECK ("FNAME" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table FORMULA 
-- 
ALTER TABLE MASTER.FORMULA ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.FORMULA ADD (
  CHECK ("FORMULA_KIND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.FORMULA ADD (
  CONSTRAINT PK_FORMULA
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_FORMULA
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GD_TIME 
-- 
ALTER TABLE MASTER.GD_TIME ADD (
  CHECK ("DATE_OFORML" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_TIME ADD (
  CONSTRAINT PK_GD_TIME
  PRIMARY KEY
  (MESTO_ID, NUM_OTGR, DATE_OTGR)
  USING INDEX MASTER.PK_GD_TIME
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GU12_A 
-- 
ALTER TABLE MASTER.GU12_A ADD (
  CHECK ("FROM_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_A ADD (
  CHECK ("TO_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_A ADD (
  CHECK ("PROD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_A ADD (
  CHECK ("FOX_KOD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_A ADD (
  CONSTRAINT GU12_A_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GU12_A_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GU12_B 
-- 
ALTER TABLE MASTER.GU12_B ADD (
  CHECK ("STAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_B ADD (
  CHECK ("KOL_VAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_B ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_B ADD (
  CHECK ("ID_A" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_B ADD (
  CHECK ("FOX_KOD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_B ADD (
  CONSTRAINT GU12_B_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GU12_B_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GU12_BR 
-- 
ALTER TABLE MASTER.GU12_BR ADD (
  CHECK ("ID_B" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_BR ADD (
  CHECK ("DATE_R" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_BR ADD (
  CHECK ("KOL_VAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_BR ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GU12_BR ADD (
  CONSTRAINT GU12_BR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GU12_BR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table INF2PB_SCH 
-- 
ALTER TABLE MASTER.INF2PB_SCH ADD (
  CHECK ("SCH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_SCH ADD (
  CHECK ("CONT_AN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_SCH ADD (
  CHECK ("RAS_AN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_SCH ADD (
  CONSTRAINT INF2PB_SCH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.INF2PB_SCH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_BILL_POS 
-- 
ALTER TABLE MASTER.ISU_BILL_POS ADD (
  CONSTRAINT ISU_BILL_POS_PK
  PRIMARY KEY
  (ISU_KOD_POS)
  USING INDEX MASTER.ISU_BILL_POS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_BILL_POS_ROW 
-- 
ALTER TABLE MASTER.ISU_BILL_POS_ROW ADD (
  CONSTRAINT ISU_BILL_POS_ROW_PK
  PRIMARY KEY
  (ISU_KOD, ISU_KOD_POS, ISU_TTN_ID)
  USING INDEX MASTER.ISU_BILL_POS_ROW_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_BILLS 
-- 
ALTER TABLE MASTER.ISU_BILLS ADD (
  CONSTRAINT ISU_BILLS_PK
  PRIMARY KEY
  (ISU_KOD)
  USING INDEX MASTER.ISU_BILLS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_DOCS 
-- 
ALTER TABLE MASTER.ISU_TAX_DOCS ADD (
  CONSTRAINT ISU_TAX_DODCS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ISU_TAX_DODCS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_FILES 
-- 
ALTER TABLE MASTER.ISU_TAX_FILES ADD (
  CONSTRAINT ISU_TAX_FILES_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ISU_TAX_FILES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_PACKAGE 
-- 
ALTER TABLE MASTER.ISU_TAX_PACKAGE ADD (
  CONSTRAINT ISU_TAX_PACK_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ISU_TAX_PACK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_REASON 
-- 
ALTER TABLE MASTER.ISU_TAX_REASON ADD (
  CONSTRAINT ISU_TAX_REASON_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ISU_TAX_REASON_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_SOURCE 
-- 
ALTER TABLE MASTER.ISU_TAX_SOURCE ADD (
  CONSTRAINT ISU_DOCSOURCE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ISU_DOCSOURCE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_TMP_NEW_PACKAGE 
-- 
ALTER TABLE MASTER.ISU_TAX_TMP_NEW_PACKAGE ADD (
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ISU_TAX_USER 
-- 
ALTER TABLE MASTER.ISU_TAX_USER ADD (
  CONSTRAINT ISU_TAX_USER_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ISU_TAX_USER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT_PLAN2DOG 
-- 
ALTER TABLE MASTER.JKCOMMIT_PLAN2DOG ADD (
  CHECK ("PLANSTRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PLAN2DOG ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PLAN2DOG ADD (
  CONSTRAINT PLAN2DOG_PLAN2DOG_UK
  UNIQUE (DOG_ID, PLANSTRU_ID)
  USING INDEX MASTER.PLAN2DOG_PLAN2DOG_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT_SESSION 
-- 
ALTER TABLE MASTER.JKCOMMIT_SESSION ADD (
  CHECK ("SESSION_TIME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SESSION ADD (
  CONSTRAINT JKC_SES_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.JKC_SES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT_SPROKUSHEV 
-- 
ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("FLG_COMMIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("SVED_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("SVED_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("SVED_CNT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("SVED_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("PROD_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_SPROKUSHEV ADD (
  CHECK ("NOM_ZD_COMMIT" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ANALIT 
-- 
ALTER TABLE MASTER.KLS_ANALIT ADD (
  CHECK ("ANALIT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ANALIT ADD (
  CONSTRAINT ANALIT_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ANALIT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_AR_TOV 
-- 
ALTER TABLE MASTER.KLS_AR_TOV ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_AR_TOV ADD (
  CONSTRAINT AR_TOV_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.AR_TOV_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_BANK 
-- 
ALTER TABLE MASTER.KLS_BANK ADD (
  CHECK ("BANK_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_BANK ADD (
  CONSTRAINT BANK_PK
  PRIMARY KEY
  (KORS)
  USING INDEX MASTER.BANK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_BANKS 
-- 
ALTER TABLE MASTER.KLS_BANKS ADD (
  CHECK ("KORS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_BANKS ADD (
  CHECK ("BANK_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_BANKS ADD (
  CONSTRAINT BANKS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.BANKS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_BILL_POS_TYPE 
-- 
ALTER TABLE MASTER.KLS_BILL_POS_TYPE ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_BILL_POS_TYPE ADD (
  CONSTRAINT PK_KLS_PAYMENTS_DEST
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PAYMENTS_DEST
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_BILLS_ALGORTHMS 
-- 
ALTER TABLE MASTER.KLS_BILLS_ALGORTHMS ADD (
  CONSTRAINT PK_KLS_BILLS_ALGORTHMS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_BILLS_ALGORTHMS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_CAT_CEN 
-- 
ALTER TABLE MASTER.KLS_CAT_CEN ADD (
  CHECK ("CAT_CEN_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_CAT_CEN ADD (
  CHECK ("CAT_CEN_GROUP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_CAT_CEN ADD (
  CONSTRAINT CAT_CEN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.CAT_CEN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_CAT_CEN_GROUP 
-- 
ALTER TABLE MASTER.KLS_CAT_CEN_GROUP ADD (
  CHECK ("CAT_CEN_GROUP_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_CAT_CEN_GROUP ADD (
  CONSTRAINT CAT_CEN_GR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.CAT_CEN_GR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_CIST 
-- 
ALTER TABLE MASTER.KLS_CIST ADD (
  CHECK ("AXES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_CIST ADD (
  CONSTRAINT KLS_CIST_PK
  PRIMARY KEY
  (NUM_CIST)
  USING INDEX MASTER.KLS_CIST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_CIST_DENI 
-- 
ALTER TABLE MASTER.KLS_CIST_DENI ADD (
  CONSTRAINT CIST_DENI_PK
  PRIMARY KEY
  (NUM_CIST, BEG_DENI)
  USING INDEX MASTER.CIST_DENI_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_COUNTER 
-- 
ALTER TABLE MASTER.KLS_COUNTER ADD (
  CONSTRAINT PK_KLS_COUNTER
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_COUNTER
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DATES 
-- 
ALTER TABLE MASTER.KLS_DATES ADD (
  CHECK ("IS_WORK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DATES ADD (
  CONSTRAINT PK_KLS_DATES
  PRIMARY KEY
  (VALUE)
  USING INDEX MASTER.PK_KLS_DATES
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DECADA 
-- 
ALTER TABLE MASTER.KLS_DECADA ADD (
  CHECK ("DATEPLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DECADA ADD (
  CHECK ("DEC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DECADA ADD (
  CHECK ("DATEDECN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DECADA ADD (
  CHECK ("DATEDECK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DECADA ADD (
  CONSTRAINT DEC_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.DEC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DEFI_MASS 
-- 
ALTER TABLE MASTER.KLS_DEFI_MASS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DEFI_MASS ADD (
  CONSTRAINT PK_KLS_DEFI_MASS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_DEFI_MASS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DIAGRAM_KIND 
-- 
ALTER TABLE MASTER.KLS_DIAGRAM_KIND ADD (
  CONSTRAINT PK_KLS_DIAGRAM_KIND
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_DIAGRAM_KIND
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DIAGRAM_TYPE 
-- 
ALTER TABLE MASTER.KLS_DIAGRAM_TYPE ADD (
  CONSTRAINT PK_KLS_DIAGRAM_TYPE
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_DIAGRAM_TYPE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOC_RESERV 
-- 
ALTER TABLE MASTER.KLS_DOC_RESERV ADD (
  CHECK ("NEXT_DOC_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_RESERV ADD (
  CONSTRAINT KLS_DOC_RESERV_PK
  PRIMARY KEY
  (TERMINAL_NAME, OSUSER_NAME, DOC_TYPE_ID, MESTO_ID)
  USING INDEX MASTER.KLS_DOC_RESERV_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOC_RULES 
-- 
ALTER TABLE MASTER.KLS_DOC_RULES ADD (
  CONSTRAINT PK_KLS_DOC_RULES
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_DOC_RULES
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOC_TYPES 
-- 
ALTER TABLE MASTER.KLS_DOC_TYPES ADD (
  CONSTRAINT PK_KLS_DOC_TYPES
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_DOC_TYPES
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOG_PARUS 
-- 
ALTER TABLE MASTER.KLS_DOG_PARUS ADD (
  CHECK ("BASE_NUMB" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG_PARUS ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOVER 
-- 
ALTER TABLE MASTER.KLS_DOVER ADD (
  CHECK ("NUM_DOVER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOVER ADD (
  CHECK ("DATE_DOVER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOVER ADD (
  CHECK ("DATE_END" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOVER ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOVER ADD (
  CHECK ("IS_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOVER ADD (
  CONSTRAINT DOVER_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.DOVER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOVER_DATES 
-- 
ALTER TABLE MASTER.KLS_DOVER_DATES ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOVER_DATES ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOV_LINE 
-- 
ALTER TABLE MASTER.KLS_DOV_LINE ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOV_LINE ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOV_LINE ADD (
  CHECK ("DOVER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOV_LINE ADD (
  CHECK ("IS_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOV_LINE ADD (
  CONSTRAINT DOV_LINE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.DOV_LINE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_EVENT 
-- 
ALTER TABLE MASTER.KLS_EVENT ADD (
  CHECK ("EVENT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_EVENT ADD (
  CONSTRAINT KLS_EVENT_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_EVENT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_FORMA_2 
-- 
ALTER TABLE MASTER.KLS_FORMA_2 ADD (
  CONSTRAINT FORMA_2_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.FORMA_2_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_FORMNAKL 
-- 
ALTER TABLE MASTER.KLS_FORMNAKL ADD (
  CHECK ("FLG_DOSTUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMNAKL ADD (
  CHECK ("FORM_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMNAKL ADD (
  CHECK ("FLG_GROUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMNAKL ADD (
  CHECK ("IS_RUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMNAKL ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMNAKL ADD (
  CONSTRAINT FORMNAKL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.FORMNAKL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_FORMSHAB 
-- 
ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CHECK ("FORMNAKL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CHECK ("DOSTUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CHECK ("IS_RUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CHECK ("IS_OPD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_FORMSHAB ADD (
  CONSTRAINT PK_KLS_FORMSHAB
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_FORMSHAB
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_GROUP 
-- 
ALTER TABLE MASTER.KLS_GD_GROUP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_GROUP ADD (
  CONSTRAINT GD_GROUP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_GROUP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GDOR 
-- 
ALTER TABLE MASTER.KLS_GDOR ADD (
  CHECK ("GDOR_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GDOR ADD (
  CHECK ("SHORT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GDOR ADD (
  CONSTRAINT GDOR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GDOR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_OTPR 
-- 
ALTER TABLE MASTER.KLS_GD_OTPR ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_OTPR ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_OTPR ADD (
  CONSTRAINT GD_OTPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_OTPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_PODACH 
-- 
ALTER TABLE MASTER.KLS_GD_PODACH ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_PODACH ADD (
  CONSTRAINT GD_PODACH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_PODACH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_PRICH 
-- 
ALTER TABLE MASTER.KLS_GD_PRICH ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_PRICH ADD (
  CHECK ("SORTBY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_PRICH ADD (
  CONSTRAINT GD_PRICH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_PRICH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_PRINVAG 
-- 
ALTER TABLE MASTER.KLS_GD_PRINVAG ADD (
  CHECK ("ABBR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_PRINVAG ADD (
  CONSTRAINT GD_PRINVAG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_PRINVAG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_SOOB 
-- 
ALTER TABLE MASTER.KLS_GD_SOOB ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_SOOB ADD (
  CONSTRAINT GD_SOOB_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_SOOB_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_TIP_PATH 
-- 
ALTER TABLE MASTER.KLS_GD_TIP_PATH ADD (
  CHECK ("NAME_STAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_TIP_PATH ADD (
  CONSTRAINT TIP_PATH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TIP_PATH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_VID_OTPR 
-- 
ALTER TABLE MASTER.KLS_GD_VID_OTPR ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_VID_OTPR ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_VID_OTPR ADD (
  CONSTRAINT VID_OTPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VID_OTPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GOSPROG 
-- 
ALTER TABLE MASTER.KLS_GOSPROG ADD (
  CHECK ("GOSPROG_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GOSPROG ADD (
  CONSTRAINT GOSPROG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GOSPROG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GOST 
-- 
ALTER TABLE MASTER.KLS_GOST ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GOST ADD (
  CONSTRAINT PK_KLS_GOST
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_GOST
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GOST_OLD 
-- 
ALTER TABLE MASTER.KLS_GOST_OLD ADD (
  CHECK ("KOEF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GOST_OLD ADD (
  CONSTRAINT PK_KLS_GOST_OLD
  PRIMARY KEY
  (PL1, PL2)
  USING INDEX MASTER.PK_KLS_GOST_OLD
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GOST_390085 
-- 
ALTER TABLE MASTER.KLS_GOST_390085 ADD (
  CONSTRAINT GOST_390085_PK
  PRIMARY KEY
  (TEMPER, PL20)
  USING INDEX MASTER.GOST_390085_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GOST_8595_54A 
-- 
ALTER TABLE MASTER.KLS_GOST_8595_54A ADD (
  CONSTRAINT GOST_8595_54A_PK
  PRIMARY KEY
  (TEMPER, PL15)
  USING INDEX MASTER.GOST_8595_54A_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GOST_8595_54B 
-- 
ALTER TABLE MASTER.KLS_GOST_8595_54B ADD (
  CONSTRAINT GOST_8595_54B_PK
  PRIMARY KEY
  (TEMPER, PL15)
  USING INDEX MASTER.GOST_8595_54B_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GP_NAPR 
-- 
ALTER TABLE MASTER.KLS_GP_NAPR ADD (
  CHECK ("GOSPROG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GP_NAPR ADD (
  CONSTRAINT GP_NAPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GP_NAPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GROUPDOG 
-- 
ALTER TABLE MASTER.KLS_GROUPDOG ADD (
  CHECK ("GROUPDOG_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GROUPDOG ADD (
  CONSTRAINT GROUPDOG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GROUPDOG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GTD 
-- 
ALTER TABLE MASTER.KLS_GTD ADD (
  CONSTRAINT GTD_PK
  PRIMARY KEY
  (GTD)
  USING INDEX MASTER.GTD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_HOLDING 
-- 
ALTER TABLE MASTER.KLS_HOLDING ADD (
  CHECK ("HOLDING_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_HOLDING ADD (
  CHECK ("BOSS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_HOLDING ADD (
  CHECK ("SORTBY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_HOLDING ADD (
  CONSTRAINT HOLDING_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.HOLDING_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_INCOTERM 
-- 
ALTER TABLE MASTER.KLS_INCOTERM ADD (
  CONSTRAINT PK_KLS_INCOTERM
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_INCOTERM
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_INSURE 
-- 
ALTER TABLE MASTER.KLS_INSURE ADD (
  CHECK ("INSURE_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_INSURE ADD (
  CHECK ("INSURE_YEAR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_INSURE ADD (
  CHECK ("INSURE_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_INSURE ADD (
  CHECK ("FULL_SUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_INSURE ADD (
  CONSTRAINT INSURE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.INSURE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ISKL_TAR 
-- 
ALTER TABLE MASTER.KLS_ISKL_TAR ADD (
  CONSTRAINT PK_KLS_ISKL_TAR
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_ISKL_TAR
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_KALIBR 
-- 
ALTER TABLE MASTER.KLS_KALIBR ADD (
  CONSTRAINT KALIBR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KALIBR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_KODIF 
-- 
ALTER TABLE MASTER.KLS_KODIF ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_KODIF ADD (
  CONSTRAINT KODIF_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KODIF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_KODIF_PASP_UNP 
-- 
ALTER TABLE MASTER.KLS_KODIF_PASP_UNP ADD (
  CHECK ("KODIF_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_KODIF_PASP_UNP ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_KODIF_PASP_UNP ADD (
  CONSTRAINT PK_KLS_KODIF_PASP_UNP
  PRIMARY KEY
  (KOD_POKAZATEL)
  USING INDEX MASTER.PK_KLS_KODIF_PASP_UNP
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_KTS 
-- 
ALTER TABLE MASTER.KLS_KTS ADD (
  CHECK ("GTD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_KTS ADD (
  CONSTRAINT KTS_PK
  PRIMARY KEY
  (KTS)
  USING INDEX MASTER.KTS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_LOAD_TYPE_MOS 
-- 
ALTER TABLE MASTER.KLS_LOAD_TYPE_MOS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_LOAD_TYPE_MOS ADD (
  CONSTRAINT LOAD_MOS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.LOAD_MOS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_MASTER_POGR 
-- 
ALTER TABLE MASTER.KLS_MASTER_POGR ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_MASTER_SGS 
-- 
ALTER TABLE MASTER.KLS_MASTER_SGS ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_MESTO 
-- 
ALTER TABLE MASTER.KLS_MESTO ADD (
  CHECK ("MESTO_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_MESTO ADD (
  CONSTRAINT MESTO_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.MESTO_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_NAPR_MOS 
-- 
ALTER TABLE MASTER.KLS_NAPR_MOS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAPR_MOS ADD (
  CONSTRAINT NAPR_MOS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NAPR_MOS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_NAPR_POST 
-- 
ALTER TABLE MASTER.KLS_NAPR_POST ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAPR_POST ADD (
  CONSTRAINT PK_KLS_NAPR_POST
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_NAPR_POST
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_NARIAD 
-- 
ALTER TABLE MASTER.KLS_NARIAD ADD (
  CHECK ("NUM_NAR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NARIAD ADD (
  CHECK ("DATE_NAR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NARIAD ADD (
  CHECK ("DATE_END" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NARIAD ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NARIAD ADD (
  CHECK ("IS_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NARIAD ADD (
  CONSTRAINT NARIAD_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NARIAD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_NAR_LINE 
-- 
ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("NARIAD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("IS_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("FACT_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CHECK ("FACT_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAR_LINE ADD (
  CONSTRAINT NAR_LINE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NAR_LINE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_NAZN_OTG 
-- 
ALTER TABLE MASTER.KLS_NAZN_OTG ADD (
  CHECK ("NAZN_OTG_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NAZN_OTG ADD (
  CONSTRAINT NAZN_OTG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NAZN_OTG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ORATODBF 
-- 
ALTER TABLE MASTER.KLS_ORATODBF ADD (
  CONSTRAINT KLS_ORATODBF_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_ORATODBF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ORG_KIND 
-- 
ALTER TABLE MASTER.KLS_ORG_KIND ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ORG_KIND ADD (
  CONSTRAINT ORG_KIND_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ORG_KIND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ORG_KIND_RELATIONS 
-- 
ALTER TABLE MASTER.KLS_ORG_KIND_RELATIONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ORG_KIND_RELATIONS ADD (
  CONSTRAINT KIND_RELA_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KIND_RELA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ORG_TYPE 
-- 
ALTER TABLE MASTER.KLS_ORG_TYPE ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ORG_TYPE ADD (
  CONSTRAINT ORG_TYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ORG_TYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_OTGR_POST_KONS 
-- 
ALTER TABLE MASTER.KLS_OTGR_POST_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_OTGR_POST_KONS ADD (
  CONSTRAINT OTGR_POST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.OTGR_POST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_OWNERSHIP 
-- 
ALTER TABLE MASTER.KLS_OWNERSHIP ADD (
  CHECK ("OWNERSHIP_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_OWNERSHIP ADD (
  CONSTRAINT OWNERSHIP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.OWNERSHIP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PASP 
-- 
ALTER TABLE MASTER.KLS_PASP ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PASP ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PASP ADD (
  CHECK ("DATEUPLOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PASP ADD (
  CHECK ("PASP_TYP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PASP ADD (
  CHECK ("VZLIV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PASP ADD (
  CONSTRAINT PASP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PASP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PASP_INSP 
-- 
ALTER TABLE MASTER.KLS_PASP_INSP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PASP_INSP ADD (
  CONSTRAINT PK_KLS_PASP_INSP
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PASP_INSP
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PAYDELAY 
-- 
ALTER TABLE MASTER.KLS_PAYDELAY ADD (
  CHECK ("PAYDELAY_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PAYDELAY ADD (
  CHECK ("SHORT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PAYDELAY ADD (
  CONSTRAINT PAYDELAY_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PAYDELAY_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PAYFORM_GRP 
-- 
ALTER TABLE MASTER.KLS_PAYFORM_GRP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PAYFORM_GRP ADD (
  CONSTRAINT PAYFORM_GR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PAYFORM_GR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PERTYPE 
-- 
ALTER TABLE MASTER.KLS_PERTYPE ADD (
  CHECK ("PERTYPE_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PERTYPE ADD (
  CHECK ("SORTBY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PERTYPE ADD (
  CONSTRAINT PERTYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PERTYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PLAN_KIND 
-- 
ALTER TABLE MASTER.KLS_PLAN_KIND ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLAN_KIND ADD (
  CONSTRAINT PLAN_KIND_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_KIND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PLANSTRU 
-- 
ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("LEVEL_POS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("KOD_SGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("KOD_SPG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("KOD_RZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("KOD_PRZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("KOD_GRP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("KOD_PGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("PARENT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CHECK ("IS_RESURS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CONSTRAINT PLANSTRU_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLANSTRU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CONSTRAINT PLANSTRU_PLANSTRU_AK_UK
  UNIQUE (LEVEL_POS, KOD_SGR, KOD_SPG, KOD_RZD, KOD_PRZ, KOD_GRP, KOD_PGR)
  USING INDEX MASTER.PLANSTRU_PLANSTRU_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PREDPR_AKCIZ 
-- 
ALTER TABLE MASTER.KLS_PREDPR_AKCIZ ADD (
  CHECK ("PLAT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_AKCIZ ADD (
  CHECK ("DATE_BEG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_AKCIZ ADD (
  CHECK ("DATE_END" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_AKCIZ ADD (
  CHECK ("EX_SVID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_AKCIZ ADD (
  CONSTRAINT KLS_PREDPR_AKCIZ_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_PREDPR_AKCIZ_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PREDPR_CLASS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_CLASS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_CLASS ADD (
  CONSTRAINT PK_KLS_PREDPR_CLASS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PREDPR_CLASS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PRICHIN 
-- 
ALTER TABLE MASTER.KLS_PRICHIN ADD (
  CONSTRAINT KLS_PRICHIN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_PRICHIN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PRIORITY_MONTH_REESTR 
-- 
ALTER TABLE MASTER.KLS_PRIORITY_MONTH_REESTR ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PRIORITY_MONTH_REESTR ADD (
  CONSTRAINT PK_KLS_MONTH_REESTR_PRIORITY
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_MONTH_REESTR_PRIORITY
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_AKCIZ 
-- 
ALTER TABLE MASTER.KLS_PROD_AKCIZ ADD (
  CHECK ("VALUE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_AKCIZ ADD (
  CONSTRAINT PK_KLS_PROD_AKCIZ
  PRIMARY KEY
  (FROM_DATE, TO_DATE, PROD_GROUPS_ID)
  USING INDEX MASTER.PK_KLS_PROD_AKCIZ
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_GR_KONS 
-- 
ALTER TABLE MASTER.KLS_PROD_GR_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GR_KONS ADD (
  CHECK ("ABBR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GR_KONS ADD (
  CONSTRAINT PROD_GR_PK
  PRIMARY KEY
  (ID_GR)
  USING INDEX MASTER.PROD_GR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_GROUPS 
-- 
ALTER TABLE MASTER.KLS_PROD_GROUPS ADD (
  CHECK ("PROD_TYPE_GRP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GROUPS ADD (
  CHECK ("GROUP_ORDER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GROUPS ADD (
  CHECK ("GROUP_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GROUPS ADD (
  CHECK ("GROUP_VISIBLE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GROUPS ADD (
  CONSTRAINT PK_KLS_PROD_GROUPS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PROD_GROUPS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_GROUPS_DESC 
-- 
ALTER TABLE MASTER.KLS_PROD_GROUPS_DESC ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GROUPS_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GROUPS_DESC ADD (
  CONSTRAINT PK_KLS_PROD_GROUPS_DESC
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PROD_GROUPS_DESC
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_GR2GR_DESC 
-- 
ALTER TABLE MASTER.KLS_PROD_GR2GR_DESC ADD (
  CHECK ("PROD_GROUPS_ID_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GR2GR_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GR2GR_DESC ADD (
  CONSTRAINT PK_KLS_PROD_GR2GR_DESC
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PROD_GR2GR_DESC
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_KONS_GROUPS_DESC 
-- 
ALTER TABLE MASTER.KLS_PROD_KONS_GROUPS_DESC ADD (
  CHECK ("PROD_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS_GROUPS_DESC ADD (
  CHECK ("PROD_GROUPS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS_GROUPS_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS_GROUPS_DESC ADD (
  CONSTRAINT PK_KLS_PROD_KONS_GROUPS_DESC
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PROD_KONS_GROUPS_DESC
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_MOSGRP 
-- 
ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CHECK ("ORDER_GDPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CHECK ("NAME_GDPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CHECK ("COLOR_GDPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CHECK ("COLOR_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CHECK ("IS_SEND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_MOSGRP ADD (
  CONSTRAINT MOS_GRP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.MOS_GRP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_NAR 
-- 
ALTER TABLE MASTER.KLS_PROD_NAR ADD (
  CHECK ("NAME_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_NAR ADD (
  CHECK ("ORDER_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_NAR ADD (
  CONSTRAINT PROD_NAR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PROD_NAR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_NOMENKLATOR 
-- 
ALTER TABLE MASTER.KLS_PROD_NOMENKLATOR ADD (
  CHECK ("MODIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_NOMENKLATOR ADD (
  CHECK ("NAME_PR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_NOMENKLATOR ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_NOMENKLATOR ADD (
  CONSTRAINT PROD_NOMEN_PK
  PRIMARY KEY
  (PARUS_RN, PARUS_PRN)
  USING INDEX MASTER.PROD_NOMEN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_PASP_UNP 
-- 
ALTER TABLE MASTER.KLS_PROD_PASP_UNP ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_PASP_UNP ADD (
  CONSTRAINT PK_KLS_PROD_PASP_UNP
  PRIMARY KEY
  (KOD_OIL_PRODUCT)
  USING INDEX MASTER.PK_KLS_PROD_PASP_UNP
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_PLAN 
-- 
ALTER TABLE MASTER.KLS_PROD_PLAN ADD (
  CHECK ("NAME_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_PLAN ADD (
  CHECK ("ORDER_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_PLAN ADD (
  CHECK ("FLG_ALLOWED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_PLAN ADD (
  CONSTRAINT PROD_PLAN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PROD_PLAN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_RAZMET 
-- 
ALTER TABLE MASTER.KLS_PROD_RAZMET ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_RAZMET ADD (
  CONSTRAINT PROD_RAZMET_PK
  PRIMARY KEY
  (RAZMET)
  USING INDEX MASTER.PROD_RAZMET_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_TYPE_GRP 
-- 
ALTER TABLE MASTER.KLS_PROD_TYPE_GRP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_TYPE_GRP ADD (
  CONSTRAINT PK_KLS_PROD_TYPE_GRP
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PROD_TYPE_GRP
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_RASST 
-- 
ALTER TABLE MASTER.KLS_RASST ADD (
  CHECK ("MIN_RASST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_RASST ADD (
  CHECK ("MAX_RASST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_RASST ADD (
  CHECK ("NAME_RASST" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_RIGHTS 
-- 
ALTER TABLE MASTER.KLS_RIGHTS ADD (
  CONSTRAINT PK_KLS_RIGHTS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_RIGHTS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ROLE 
-- 
ALTER TABLE MASTER.KLS_ROLE ADD (
  CHECK ("PREDPR_ROLE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ROLE ADD (
  CONSTRAINT ROLE_SPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ROLE_SPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_RS 
-- 
ALTER TABLE MASTER.KLS_RS ADD (
  CHECK ("RS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_RS ADD (
  CONSTRAINT PK_KLS_RS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_RS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_SHABVOZ 
-- 
ALTER TABLE MASTER.KLS_SHABVOZ ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_STATUS_MONTH_REESTR 
-- 
ALTER TABLE MASTER.KLS_STATUS_MONTH_REESTR ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STATUS_MONTH_REESTR ADD (
  CONSTRAINT PK_KLS_STATUS_MONTH_REESTR
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_STATUS_MONTH_REESTR
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_STATUS_ZAKAZ 
-- 
ALTER TABLE MASTER.KLS_STATUS_ZAKAZ ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STATUS_ZAKAZ ADD (
  CONSTRAINT PK_KLS_STATUS_ZAKAZ
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_STATUS_ZAKAZ
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ST_PRIH_KONS 
-- 
ALTER TABLE MASTER.KLS_ST_PRIH_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ST_PRIH_KONS ADD (
  CONSTRAINT ST_PRIH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ST_PRIH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ST_RASH_KONS 
-- 
ALTER TABLE MASTER.KLS_ST_RASH_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ST_RASH_KONS ADD (
  CONSTRAINT ST_RASH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ST_RASH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_TABLPOK 
-- 
ALTER TABLE MASTER.KLS_TABLPOK ADD (
  CHECK ("DATEUPLOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TABLPOK ADD (
  CONSTRAINT TABLPOK_PK
  PRIMARY KEY
  (PROD_ID_NPR, KODIF_ID)
  USING INDEX MASTER.TABLPOK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_TIP_AKCIZ 
-- 
ALTER TABLE MASTER.KLS_TIP_AKCIZ ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TIP_AKCIZ ADD (
  CONSTRAINT TIP_AKCIZ_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TIP_AKCIZ_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_TIP_OP_KONS 
-- 
ALTER TABLE MASTER.KLS_TIP_OP_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TIP_OP_KONS ADD (
  CONSTRAINT TIP_OP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TIP_OP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_TIP_REAL_KONS 
-- 
ALTER TABLE MASTER.KLS_TIP_REAL_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TIP_REAL_KONS ADD (
  CONSTRAINT TIP_REAL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TIP_REAL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_TYPE_ZAKAZ 
-- 
ALTER TABLE MASTER.KLS_TYPE_ZAKAZ ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TYPE_ZAKAZ ADD (
  CONSTRAINT PK_KLS_TYPE_ZAKAZ
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_TYPE_ZAKAZ
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_UPAK 
-- 
ALTER TABLE MASTER.KLS_UPAK ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_UPAK ADD (
  CONSTRAINT UPAK_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.UPAK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_USER 
-- 
ALTER TABLE MASTER.KLS_USER ADD (
  CHECK ("USER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_USER ADD (
  CONSTRAINT KLS_USER_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_USER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_USL_OPL 
-- 
ALTER TABLE MASTER.KLS_USL_OPL ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_USL_OPL ADD (
  CHECK ("KOL_DN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_USL_OPL ADD (
  CONSTRAINT USL_OPL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.USL_OPL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VAGONTYPE 
-- 
ALTER TABLE MASTER.KLS_VAGONTYPE ADD (
  CHECK ("VAGONTYPE_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGONTYPE ADD (
  CONSTRAINT VAGONTYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VAGONTYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VAGON_VZLIV 
-- 
ALTER TABLE MASTER.KLS_VAGON_VZLIV ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGON_VZLIV ADD (
  CONSTRAINT PK_KLS_CIST_VZLIV
  PRIMARY KEY
  (KALIBR_ID, VZLIV)
  USING INDEX MASTER.PK_KLS_CIST_VZLIV
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VAGOWNER_MOS 
-- 
ALTER TABLE MASTER.KLS_VAGOWNER_MOS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER_MOS ADD (
  CONSTRAINT VAGOWN_MOS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VAGOWN_MOS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VAGOWNER_TYPES 
-- 
ALTER TABLE MASTER.KLS_VAGOWNER_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER_TYPES ADD (
  CONSTRAINT VAGOWN_TYP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VAGOWN_TYP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VAG_STATUS 
-- 
ALTER TABLE MASTER.KLS_VAG_STATUS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAG_STATUS ADD (
  CONSTRAINT PK_KLS_VAG_STATUS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_VAG_STATUS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VALPASP 
-- 
ALTER TABLE MASTER.KLS_VALPASP ADD (
  CONSTRAINT VALPASP_PK
  PRIMARY KEY
  (PASP_ID, KODIF_ID)
  USING INDEX MASTER.VALPASP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VALSVED 
-- 
ALTER TABLE MASTER.KLS_VALSVED ADD (
  CHECK ("DATEUPLOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VALSVED ADD (
  CHECK ("FROM_DBF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VALSVED ADD (
  CONSTRAINT VALSVED_PK
  PRIMARY KEY
  (SVED_ID, KODIF_ID, SVED_FLG_OPERDATA)
  USING INDEX MASTER.VALSVED_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VIDDOG 
-- 
ALTER TABLE MASTER.KLS_VIDDOG ADD (
  CHECK ("VIDDOG_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VIDDOG ADD (
  CONSTRAINT VIDDOG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VIDDOG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VID_POST_KONS 
-- 
ALTER TABLE MASTER.KLS_VID_POST_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VID_POST_KONS ADD (
  CONSTRAINT VID_POST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VID_POST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VID_REAL_KONS 
-- 
ALTER TABLE MASTER.KLS_VID_REAL_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VID_REAL_KONS ADD (
  CONSTRAINT VID_REAL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VID_REAL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VID_USL 
-- 
ALTER TABLE MASTER.KLS_VID_USL ADD (
  CHECK ("USL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VID_USL ADD (
  CONSTRAINT VID_USL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VID_USL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VOZN_RST 
-- 
ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("IS_AGENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("VAGOWN_TYP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("RAST_MIN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("RAST_MAX" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CHECK ("CENA_VOZN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VOZN_RST ADD (
  CONSTRAINT VOZN_RST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VOZN_RST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VZISKTXT 
-- 
ALTER TABLE MASTER.KLS_VZISKTXT ADD (
  CONSTRAINT PK_KLS_VZISKTXT
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_VZISKTXT
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ZAKAZ_PERIOD 
-- 
ALTER TABLE MASTER.KLS_ZAKAZ_PERIOD ADD (
  CONSTRAINT KLS_ZAKAZ_PERIOD_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_ZAKAZ_PERIOD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ZAKAZ_TIP_CORP 
-- 
ALTER TABLE MASTER.KLS_ZAKAZ_TIP_CORP ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ZAKAZ_TIP_CORP ADD (
  CONSTRAINT PK_ID
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_ID
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_ZPU_TYPES 
-- 
ALTER TABLE MASTER.KLS_ZPU_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_ZPU_TYPES ADD (
  CONSTRAINT PK_KLS_ZPU_TYPES
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_ZPU_TYPES
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KSSS_MATERIAL 
-- 
ALTER TABLE MASTER.KSSS_MATERIAL ADD (
  CONSTRAINT MATERIAL_ID_PK
  PRIMARY KEY
  (MATERIAL_ID)
  USING INDEX MASTER.MATERIAL_ID_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KSSS_PREDPR 
-- 
ALTER TABLE MASTER.KSSS_PREDPR ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KSSS_PREDPR ADD (
  CONSTRAINT KSSS_PREDPR_PK
  PRIMARY KEY
  (KSSS_PREDPR_ID)
  USING INDEX MASTER.KSSS_PREDPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KSSS_PROD 
-- 
ALTER TABLE MASTER.KSSS_PROD ADD (
  CHECK ("IS_MAIN" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KTU_2_NPO_PREF_KVIT 
-- 
ALTER TABLE MASTER.KTU_2_NPO_PREF_KVIT ADD (
  CONSTRAINT PK_KTU_2_NPO_PREF_KVIT
  PRIMARY KEY
  (PREF_NAME)
  USING INDEX MASTER.PK_KTU_2_NPO_PREF_KVIT
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KTU_2_NPO_PREF_SVED 
-- 
ALTER TABLE MASTER.KTU_2_NPO_PREF_SVED ADD (
  CONSTRAINT PK_KTU_2_NPO_PREF_SVED
  PRIMARY KEY
  (PREF_NAME)
  USING INDEX MASTER.PK_KTU_2_NPO_PREF_SVED
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KVIT_ALFA 
-- 
ALTER TABLE MASTER.KVIT_ALFA ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_ALFA ADD (
  CHECK ("KOL_NET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_ALFA ADD (
  CONSTRAINT KVIT_ALFA_PK
  PRIMARY KEY
  (CON_ID, KVIT_ID)
  USING INDEX MASTER.KVIT_ALFA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KVIT_DATE_VIR 
-- 
ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("BILL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("KVIT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("BILL_POS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("DATE_VIR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("VES_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("VZLIV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("KOL_NET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_GSM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF_ORIG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF_ALT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF_GUARD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF_GUARD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_VOZN11" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_VOZN11_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_VOZN12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_VOZN12_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("SUM_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("TARIF19" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("VES_BRUTTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CHECK ("OWNERSHIP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT_DATE_VIR ADD (
  CONSTRAINT PK_KVIT_DATE_VIR
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KVIT_DATE_VIR
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KVIT_VNEPLAN 
-- 
ALTER TABLE MASTER.KVIT_VNEPLAN ADD (
  CONSTRAINT KVIT_VNEPLAN_PK
  PRIMARY KEY
  (NUM_KVIT, NOM_Z)
  USING INDEX MASTER.KVIT_VNEPLAN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LINK_PARUS_PREDPR 
-- 
ALTER TABLE MASTER.LINK_PARUS_PREDPR ADD (
  CHECK ("RN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LINK_PARUS_PREDPR ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LINK_PARUS_PREDPR ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LINK_PARUS_PREDPR ADD (
  CONSTRAINT PK_PARUS_PREDPR_LINK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_PARUS_PREDPR_LINK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LOAD_FILE 
-- 
ALTER TABLE MASTER.LOAD_FILE ADD (
  CHECK ("LINE" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table LOAD_FIL_PROD 
-- 
ALTER TABLE MASTER.LOAD_FIL_PROD ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_PROD ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_PROD ADD (
  CONSTRAINT FIL_PROD_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.FIL_PROD_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.LOAD_FIL_PROD ADD (
  CONSTRAINT FIL_PROD_FIL_PROD_AK_UK
  UNIQUE (TAG)
  USING INDEX MASTER.FIL_PROD_FIL_PROD_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LOAD_FIL_REP_TYPES 
-- 
ALTER TABLE MASTER.LOAD_FIL_REP_TYPES ADD (
  CONSTRAINT REP_TYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.REP_TYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MAP_AZS 
-- 
ALTER TABLE MASTER.MAP_AZS ADD (
  CONSTRAINT MAP_AZS
  PRIMARY KEY
  (AZS_ID)
  USING INDEX MASTER.MAP_AZS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MAP_PRIMITIVES 
-- 
ALTER TABLE MASTER.MAP_PRIMITIVES ADD (
  CHECK ("X" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_PRIMITIVES ADD (
  CHECK ("Y" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_PRIMITIVES ADD (
  CHECK ("ORDER_REC" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table MAP_REGIONS 
-- 
ALTER TABLE MASTER.MAP_REGIONS ADD (
  CONSTRAINT PK_MAP_REGIONS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_MAP_REGIONS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MAP_SETTLEMENTS 
-- 
ALTER TABLE MASTER.MAP_SETTLEMENTS ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_SETTLEMENTS ADD (
  CHECK ("X" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_SETTLEMENTS ADD (
  CHECK ("Y" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_SETTLEMENTS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_SETTLEMENTS ADD (
  CHECK ("SIZE1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MAP_SETTLEMENTS ADD (
  CHECK ("SIZE2" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table MASTER_KLS_FIELD_STRUCTURE 
-- 
ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CHECK ("STRUCTURE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CHECK ("FIELD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CHECK ("FIELD_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CHECK ("FIELD_CAPTION" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CHECK ("FIELD_READONLY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CHECK ("FIELD_KIND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_FIELD_STRUCTURE ADD (
  CONSTRAINT MASTER_KLS_FIELD_STRUCTURE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.MASTER_KLS_FIELD_STRUCTURE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MASTER_KLS_STRUCTURE 
-- 
ALTER TABLE MASTER.MASTER_KLS_STRUCTURE ADD (
  CHECK ("CAPTION" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_STRUCTURE ADD (
  CHECK ("UNIQUE_FIELD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_STRUCTURE ADD (
  CHECK ("QUERY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_STRUCTURE ADD (
  CHECK ("VIEW_TIME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_KLS_STRUCTURE ADD (
  CONSTRAINT PK_MASTER_KLS_STRUCTURE
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_MASTER_KLS_STRUCTURE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MASTER_LINKS_STRUCTURE 
-- 
ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("CAPTION" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_LINK_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_LINK_PK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_LINK_PK_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_LINK_ONE_PK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_ONE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_LINK_TWO_PK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_LINKS_STRUCTURE ADD (
  CHECK ("TABLE_TWO" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table MASTER_QUERY_TYPES 
-- 
ALTER TABLE MASTER.MASTER_QUERY_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_QUERY_TYPES ADD (
  CONSTRAINT PK_MASTER_QUERY_TYPES
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_MASTER_QUERY_TYPES
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MASTER_QUERY_TYPES_DESC 
-- 
ALTER TABLE MASTER.MASTER_QUERY_TYPES_DESC ADD (
  CHECK ("STRUCTURE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_QUERY_TYPES_DESC ADD (
  CHECK ("TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_QUERY_TYPES_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_QUERY_TYPES_DESC ADD (
  CONSTRAINT PK_MASTER_QUERY_TYPES_DESC
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_MASTER_QUERY_TYPES_DESC
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MASTER_REPORTS 
-- 
ALTER TABLE MASTER.MASTER_REPORTS ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_REPORTS ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_REPORTS ADD (
  CHECK ("REP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_REPORTS ADD (
  CHECK ("REPORT_FILE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MASTER_REPORTS ADD (
  CONSTRAINT MASTER_REPORTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.MASTER_REPORTS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MESTO_LOG 
-- 
ALTER TABLE MASTER.MESTO_LOG ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MESTO_LOG ADD (
  CHECK ("LOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MESTO_LOG ADD (
  CHECK ("DATE_LOG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MESTO_LOG ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MESTO_LOG ADD (
  CHECK ("EVENT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MESTO_LOG ADD (
  CHECK ("USER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_ALFA 
-- 
ALTER TABLE MASTER.MONTH_ALFA ADD (
  CHECK ("XCONFIRM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_ALFA ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_ALFA ADD (
  CHECK ("KOL_NET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_ALFA ADD (
  CHECK ("MON_DOB" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_ALFA ADD (
  CHECK ("MON_DELIV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_ALFA ADD (
  CHECK ("STATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_ALFA ADD (
  CONSTRAINT MONTH_ALFA_PK
  PRIMARY KEY
  (CON_ID)
  USING INDEX MASTER.MONTH_ALFA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_OILSPACE 
-- 
ALTER TABLE MASTER.MONTH_OILSPACE ADD (
  CONSTRAINT PK_MONTH_OILSPACE
  PRIMARY KEY
  (LUKOIL_ID)
  USING INDEX MASTER.PK_MONTH_OILSPACE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_REE 
-- 
ALTER TABLE MASTER.MONTH_REE ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REE ADD (
  CONSTRAINT MONTH_REE_PK
  PRIMARY KEY
  (DATE_REE, DOP_REE, NOM_ZD)
  USING INDEX MASTER.MONTH_REE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_REESTR 
-- 
ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("NUM_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("DATE_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("DATE_TO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("USE_GRAFIK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("STATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CHECK ("DOP_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR ADD (
  CONSTRAINT PK_MONTH_REESTR
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_MONTH_REESTR
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_REESTR_POS 
-- 
ALTER TABLE MASTER.MONTH_REESTR_POS ADD (
  CHECK ("TONN_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR_POS ADD (
  CHECK ("TONN_MOS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR_POS ADD (
  CONSTRAINT PK_MONTH_REESTR_POS
  PRIMARY KEY
  (MONTH_REESTR_ID, NOM_ZD)
  USING INDEX MASTER.PK_MONTH_REESTR_POS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_VISIR 
-- 
ALTER TABLE MASTER.MONTH_VISIR ADD (
  CHECK ("DATE_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR ADD (
  CHECK ("DOP_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR ADD (
  CHECK ("APP_USERS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR ADD (
  CONSTRAINT MON_VISIR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.MON_VISIR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH_VISIR_LOC 
-- 
ALTER TABLE MASTER.MONTH_VISIR_LOC ADD (
  CHECK ("DATE_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR_LOC ADD (
  CHECK ("DOP_REE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR_LOC ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR_LOC ADD (
  CHECK ("APP_USERS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_VISIR_LOC ADD (
  CONSTRAINT MON_VISIR_LOC_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.MON_VISIR_LOC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table NPR_PRICES_KTU 
-- 
ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("CAT_CEN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("NGSM25" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("CENA_OTP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("OWNERSHIP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("SUPPLIER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CHECK ("IS_ORIGINAL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES_KTU ADD (
  CONSTRAINT NPR_PRICES_KTU_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NPR_PRICES_KTU_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OBOROT_KONS 
-- 
ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("KG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("LIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("CENA_POKUP_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("CENA_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_POKUP_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_POKUP_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_POKUP_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("CENA_REALIZ_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("CENA_REALIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_REALIZ_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_REALIZ_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_REALIZ_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_REALIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("CENA_UCHET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("SUMMA_UCHET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("UPDATE_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("AKCIZ_SVED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("PREDPR_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("PROD_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("PREDPR_CLASS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("TIP_OP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CHECK ("ORG_POLUCH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OBOROT_KONS ADD (
  CONSTRAINT OBOROT_PK
  PRIMARY KEY
  (FILIAL_ID, ID_OPER)
  USING INDEX MASTER.OBOROT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_GRAFIK 
-- 
ALTER TABLE MASTER.OIL_GRAFIK ADD (
  CONSTRAINT OIL_GRAFIK_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.OIL_GRAFIK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_MESTOR 
-- 
ALTER TABLE MASTER.OIL_MESTOR ADD (
  CONSTRAINT OIL_MESTOR_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.OIL_MESTOR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_PPRIEMA 
-- 
ALTER TABLE MASTER.OIL_PPRIEMA ADD (
  CONSTRAINT OIL_PPRIEMA_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.OIL_PPRIEMA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_QUALITY 
-- 
ALTER TABLE MASTER.OIL_QUALITY ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OIL_QUALITY ADD (
  CONSTRAINT OIL_QUALITY_PK
  PRIMARY KEY
  (OIL_QUALITY_ID)
  USING INDEX MASTER.OIL_QUALITY_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_TRACE 
-- 
ALTER TABLE MASTER.OIL_TRACE ADD (
  CONSTRAINT OIL_TRACE_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.OIL_TRACE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OPL 
-- 
ALTER TABLE MASTER.OPL ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OPL ADD (
  CHECK ("DATA_POST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OPL ADD (
  CHECK ("NOM_DOG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OPL ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table OSTAT_KONS 
-- 
ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("DATE_OST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("KG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("LIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("SUMMA_POKUP_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("SUMMA_POKUP_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("SUMMA_POKUP_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("SUMMA_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("SUMMA_UCHET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("PREDPR_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CHECK ("PROD_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_KONS ADD (
  CONSTRAINT OSTAT_PK
  PRIMARY KEY
  (FILIAL_ID, ID_OST)
  USING INDEX MASTER.OSTAT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PARUS_FIN 
-- 
ALTER TABLE MASTER.PARUS_FIN ADD (
  CONSTRAINT I_ID
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.I_ID
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PARUS_NOMEN_PROD_LINK 
-- 
ALTER TABLE MASTER.PARUS_NOMEN_PROD_LINK ADD (
  CHECK ("NOMEN_RN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_NOMEN_PROD_LINK ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_NOMEN_PROD_LINK ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_NOMEN_PROD_LINK ADD (
  CHECK ("IS_MAIN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_NOMEN_PROD_LINK ADD (
  CONSTRAINT PK_PARUS_NOMEN_PROD_LINK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_PARUS_NOMEN_PROD_LINK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PARUS_STORE_ORG_STRU_LINK 
-- 
ALTER TABLE MASTER.PARUS_STORE_ORG_STRU_LINK ADD (
  CHECK ("STORE_RN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_STORE_ORG_STRU_LINK ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_STORE_ORG_STRU_LINK ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_STORE_ORG_STRU_LINK ADD (
  CHECK ("IS_MAIN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PARUS_STORE_ORG_STRU_LINK ADD (
  CONSTRAINT PK_PARUS_STORE_ORG_STRU_LINK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_PARUS_STORE_ORG_STRU_LINK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PAYMENTS_ON_BILL_050208 
-- 
ALTER TABLE MASTER.PAYMENTS_ON_BILL_050208 ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILL_050208 ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILL_050208 ADD (
  CHECK ("BILL_POS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILL_050208 ADD (
  CHECK ("PAYMENTS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILL_050208 ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILL_050208 ADD (
  CHECK ("DATE_REALIZ" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_FACT 
-- 
ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("TIP_ROW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_MON_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_MON_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_MON_SOBS_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_MON_SOBS_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_NAR_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_NAR_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_NAR_SOBS_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_NAR_SOBS_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("ZAYV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("BEG_OST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_SOBS_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_SOBS_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("MAX_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("DEAD_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("EMPTY_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("OST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_DECADA_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_DECADA_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("FACT_DECADA_3" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_DECADA_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_DECADA_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("PLAN_DECADA_3" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CHECK ("NUM_DECADA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT ADD (
  CONSTRAINT PLAN_FACT_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_FACT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_FACT_REALIZ 
-- 
ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("BEGIN_OST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("PLAN_POST_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("NORMA_POST_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("FACT_POST_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("RESURS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("PLAN_REAL_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("NORMA_REAL_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("FACT_REAL_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("END_OST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_FACT_REALIZ ADD (
  CHECK ("AVG_SUT_REAL_VES" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_POST_PRICHIN 
-- 
ALTER TABLE MASTER.PLAN_POST_PRICHIN ADD (
  CHECK ("BEG_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_PRICHIN ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_PRICHIN ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_PRICHIN ADD (
  CHECK ("PLANSTRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_PRICHIN ADD (
  CHECK ("OWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_PRICHIN ADD (
  CONSTRAINT PLAN_POST_PRICHIN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_POST_PRICHIN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_REALIZ 
-- 
ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("SUPPLIER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("TIP_REAL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("IS_SIGN1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("IS_SIGN2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CHECK ("FIRST_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_REALIZ ADD (
  CONSTRAINT PLAN_REAL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_REAL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_REFINERY 
-- 
ALTER TABLE MASTER.PLAN_REFINERY ADD (
  CONSTRAINT PLAN_REF_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.PLAN_REF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PREDPR_TEMP 
-- 
ALTER TABLE MASTER.PREDPR_TEMP ADD (
  CHECK ("NAIM" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table PROGRAM_USERS 
-- 
ALTER TABLE MASTER.PROGRAM_USERS ADD (
  CONSTRAINT PROGRAM_USERS_PK
  PRIMARY KEY
  (ORGANIZATION, APPLICATION, FIO)
  USING INDEX MASTER.PROGRAM_USERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RAZNAR 
-- 
ALTER TABLE MASTER.RAZNAR ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.RAZNAR ADD (
  CHECK ("DATE_RAZN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.RAZNAR ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.RAZNAR ADD (
  CHECK ("FLAG_SEND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.RAZNAR ADD (
  CHECK ("TONN_RAZNAR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.RAZNAR ADD (
  CHECK ("CIST_RAZNAR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.RAZNAR ADD (
  CONSTRAINT RAZNAR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.RAZNAR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REAL_OPL 
-- 
ALTER TABLE MASTER.REAL_OPL ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REAL_OPL ADD (
  CHECK ("UN_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table REAL_OPL_KTU 
-- 
ALTER TABLE MASTER.REAL_OPL_KTU ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REAL_OPL_KTU ADD (
  CHECK ("UN_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR_RAIL 
-- 
ALTER TABLE MASTER.REESTR_RAIL ADD (
  CONSTRAINT REESTR_RAIL_PK
  PRIMARY KEY
  (REESTR_RAIL_ID)
  USING INDEX MASTER.REESTR_RAIL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR_RAIL_DOP_SF 
-- 
ALTER TABLE MASTER.REESTR_RAIL_DOP_SF ADD (
  CHECK ("V_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_RAIL_DOP_SF ADD (
  CHECK ("V_PLAY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_RAIL_DOP_SF ADD (
  CONSTRAINT REESTR_RAIL_DOP_SF_PK
  PRIMARY KEY
  (REESTR_RAIL_DOP_SF_ID)
  USING INDEX MASTER.REESTR_RAIL_DOP_SF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR_RAIL_RGD_SF 
-- 
ALTER TABLE MASTER.REESTR_RAIL_RGD_SF ADD (
  CONSTRAINT REESTR_RAIL_RGD_SF_PK
  PRIMARY KEY
  (REESTR_RAIL_RGD_SF_ID)
  USING INDEX MASTER.REESTR_RAIL_RGD_SF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR_RAIL_SF 
-- 
ALTER TABLE MASTER.REESTR_RAIL_SF ADD (
  CONSTRAINT REESTR_RAIL_SF_PK
  PRIMARY KEY
  (REESTR_RAIL_SF_ID)
  USING INDEX MASTER.REESTR_RAIL_SF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR_TEMP 
-- 
ALTER TABLE MASTER.REESTR_TEMP ADD (
  PRIMARY KEY
  (REESTR_TEMP_ID)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_CHECK_MODES 
-- 
ALTER TABLE MASTER.REPL_CHECK_MODES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CHECK_MODES ADD (
  CONSTRAINT R_CHK_M_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_CHK_M_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_DEPENDENCE 
-- 
ALTER TABLE MASTER.REPL_DEPENDENCE ADD (
  CHECK ("REPL_PARENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_DEPENDENCE ADD (
  CHECK ("REPL_CHILD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_DEPENDENCE ADD (
  CONSTRAINT R_DEPEND_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_DEPEND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_DSN_TYPES 
-- 
ALTER TABLE MASTER.REPL_DSN_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_DSN_TYPES ADD (
  CHECK ("CHECK_FILE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_DSN_TYPES ADD (
  CONSTRAINT R_DSNTYP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_DSNTYP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_FILE_KINDS 
-- 
ALTER TABLE MASTER.REPL_FILE_KINDS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_FILE_KINDS ADD (
  CONSTRAINT R_FILKND_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_FILKND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_FILE_TYPES 
-- 
ALTER TABLE MASTER.REPL_FILE_TYPES ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_FILE_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_FILE_TYPES ADD (
  CHECK ("FILE_KIND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_FILE_TYPES ADD (
  CONSTRAINT R_FILETYP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_FILETYP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_INFO_TYPES 
-- 
ALTER TABLE MASTER.REPL_INFO_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_INFO_TYPES ADD (
  CONSTRAINT R_INFO_T_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_INFO_T_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_KINDS 
-- 
ALTER TABLE MASTER.REPL_KINDS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_KINDS ADD (
  CONSTRAINT R_KIND_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_KIND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_PROC_TYPES 
-- 
ALTER TABLE MASTER.REPL_PROC_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_PROC_TYPES ADD (
  CONSTRAINT R_P_TYPE_1_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_P_TYPE_1_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_SESSION 
-- 
ALTER TABLE MASTER.REPL_SESSION ADD (
  CHECK ("STATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SESSION ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SESSION ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SESSION ADD (
  CONSTRAINT R_SESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_SESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_SESSION_LOG 
-- 
ALTER TABLE MASTER.REPL_SESSION_LOG ADD (
  CHECK ("SESSION_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SESSION_LOG ADD (
  CHECK ("STATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SESSION_LOG ADD (
  CHECK ("LOG_TIME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SESSION_LOG ADD (
  CONSTRAINT R_SESS_L_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_SESS_L_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_SITE_TYPES 
-- 
ALTER TABLE MASTER.REPL_SITE_TYPES ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE_TYPES ADD (
  CONSTRAINT R_S_TYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_S_TYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_TABLE 
-- 
ALTER TABLE MASTER.REPL_TABLE ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_TABLE ADD (
  CHECK ("REPL_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_TABLE ADD (
  CHECK ("REPL_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_TABLE ADD (
  CHECK ("REPL_LIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_TABLE ADD (
  CONSTRAINT R_TABLE_PK
  PRIMARY KEY
  (REPL_ID)
  USING INDEX MASTER.R_TABLE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORT_GROUPS 
-- 
ALTER TABLE MASTER.REPORT_GROUPS ADD (
  CHECK ("REPORT_GROUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORT_GROUPS ADD (
  CHECK ("REPORT_GROUP_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORT_GROUPS ADD (
  CONSTRAINT PK_REPORT_GROUPS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_REPORT_GROUPS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORTS 
-- 
ALTER TABLE MASTER.REPORTS ADD (
  CHECK ("REPORT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS ADD (
  CHECK ("REPORT_FILE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS ADD (
  CHECK ("IS_MSSQL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS ADD (
  CHECK ("IS_VIP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS ADD (
  CHECK ("ASK_RUN_PROC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS ADD (
  CHECK ("ZIP_CSV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS ADD (
  CONSTRAINT PK_REPORTS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_REPORTS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORTS_NUM_REP 
-- 
ALTER TABLE MASTER.REPORTS_NUM_REP ADD (
  CHECK ("REP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_NUM_REP ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_NUM_REP ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_NUM_REP ADD (
  CHECK ("IS_CRT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_NUM_REP ADD (
  CHECK ("NUM_REP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_NUM_REP ADD (
  CONSTRAINT REPORTS_NUM_REP_UK
  UNIQUE (REP_ID, BEGIN_DATE, END_DATE, IS_CRT)
  USING INDEX MASTER.REPORTS_NUM_REP_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORTS_PARAM 
-- 
ALTER TABLE MASTER.REPORTS_PARAM ADD (
  CHECK ("REPORTS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_PARAM ADD (
  CONSTRAINT PK_REPORTS_PARAM
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_REPORTS_PARAM
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORTS_REALIZ 
-- 
ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("IS_CRT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("NUM_REP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("INN_SRC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("REP_ROW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("REP_CRT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("KVIT_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("KV_DATA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("INN_CNTR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("PLT_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("PLT_DATA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("TOVAR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("PACK_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("TOV_SRC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("TOV_CLS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("WEGHT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("CLR_PRC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("FULL_PRC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("CLR_CST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("FULL_CST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("INN_RES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("REG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("USERCREATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("DATECREATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CHECK ("BILL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORTS_REALIZ ADD (
  CONSTRAINT PK_REPORTS_REALIZ
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_REPORTS_REALIZ
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORT_TAGS 
-- 
ALTER TABLE MASTER.REPORT_TAGS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPORT_TIP_DATES 
-- 
ALTER TABLE MASTER.REPORT_TIP_DATES ADD (
  CHECK ("REP_KIND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORT_TIP_DATES ADD (
  CHECK ("TIP_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORT_TIP_DATES ADD (
  CHECK ("DEF_TIP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPORT_TIP_DATES ADD (
  CHECK ("VIEW_TIME" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_AUART 
-- 
ALTER TABLE MASTER.R3_AUART ADD (
  CONSTRAINT AUART_PK
  PRIMARY KEY
  (VBAK_AUART)
  USING INDEX MASTER.AUART_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_BILLS 
-- 
ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("NOM_R3" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_VOZN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_VOZN_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("SUMMA_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CONSTRAINT R3_BILLS_PK
  PRIMARY KEY
  (VBELN)
  USING INDEX MASTER.R3_BILLS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.R3_BILLS ADD (
  CONSTRAINT R3_BILLS_UK
  UNIQUE (NOM_DOK)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_BLOCKS 
-- 
ALTER TABLE MASTER.R3_BLOCKS ADD (
  CONSTRAINT BLOCKS_PK
  PRIMARY KEY
  (V_TJ30_TXT04)
  USING INDEX MASTER.BLOCKS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_CAT_CEN 
-- 
ALTER TABLE MASTER.R3_CAT_CEN ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_CAT_CEN ADD (
  CONSTRAINT PK_R3_CAT_CEN
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_R3_CAT_CEN
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_GD 
-- 
ALTER TABLE MASTER.R3_GD ADD (
  CONSTRAINT R3_GD_PK
  PRIMARY KEY
  (BAHNR)
  USING INDEX MASTER.R3_GD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_LPRIO 
-- 
ALTER TABLE MASTER.R3_LPRIO ADD (
  CONSTRAINT LPRIO_PK
  PRIMARY KEY
  (VBAP_LPRIO)
  USING INDEX MASTER.LPRIO_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_MATERIALS_GRP 
-- 
ALTER TABLE MASTER.R3_MATERIALS_GRP ADD (
  CONSTRAINT R3_MAT_GRP_PK
  PRIMARY KEY
  (GROUP_S)
  USING INDEX MASTER.R3_MAT_GRP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_ROUTENODES 
-- 
ALTER TABLE MASTER.R3_ROUTENODES ADD (
  CONSTRAINT ROUTENODES_PK
  PRIMARY KEY
  (KNOTE)
  USING INDEX MASTER.ROUTENODES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_ROUTES 
-- 
ALTER TABLE MASTER.R3_ROUTES ADD (
  CONSTRAINT ROUTES_PK
  PRIMARY KEY
  (ROUTE)
  USING INDEX MASTER.ROUTES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_TRATY 
-- 
ALTER TABLE MASTER.R3_TRATY ADD (
  CONSTRAINT TRATY_PK
  PRIMARY KEY
  (VBKD_TRATY)
  USING INDEX MASTER.TRATY_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_VSART 
-- 
ALTER TABLE MASTER.R3_VSART ADD (
  CONSTRAINT VSART_PK
  PRIMARY KEY
  (VBKD_VSART)
  USING INDEX MASTER.VSART_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_VSBED 
-- 
ALTER TABLE MASTER.R3_VSBED ADD (
  CONSTRAINT VSBED_PK
  PRIMARY KEY
  (VBAK_VSBED)
  USING INDEX MASTER.VSBED_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_VSTEL 
-- 
ALTER TABLE MASTER.R3_VSTEL ADD (
  CONSTRAINT VSTEL_PK
  PRIMARY KEY
  (VBAP_VSTEL)
  USING INDEX MASTER.VSTEL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_WERKS_LGORT 
-- 
ALTER TABLE MASTER.R3_WERKS_LGORT ADD (
  CONSTRAINT WERK_LGORT_PK
  PRIMARY KEY
  (VBAP_WERKS, LGORT)
  USING INDEX MASTER.WERK_LGORT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table SAIO_CHECK 
-- 
ALTER TABLE MASTER.SAIO_CHECK ADD (
  CHECK ("SELECTQUERY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SAIO_CHECK ADD (
  CHECK ("CREATEQUERY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SAIO_CHECK ADD (
  CHECK ("IS_ACTIVE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SAIO_CHECK ADD (
  CONSTRAINT PK_SAIO_CHECK
  PRIMARY KEY
  (OUTPUTFILE)
  USING INDEX MASTER.PK_SAIO_CHECK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table SF_NUMBERS 
-- 
ALTER TABLE MASTER.SF_NUMBERS ADD (
  CHECK ("FROM_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SF_NUMBERS ADD (
  CHECK ("TO_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SF_NUMBERS ADD (
  CHECK ("START_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SF_NUMBERS ADD (
  CHECK ("CURR_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SF_NUMBERS ADD (
  CHECK ("RANGE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SF_NUMBERS ADD (
  UNIQUE (FROM_DATE)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);

ALTER TABLE MASTER.SF_NUMBERS ADD (
  UNIQUE (TO_DATE)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table SOOB_EXP 
-- 
ALTER TABLE MASTER.SOOB_EXP ADD (
  CHECK ("REP_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SOOB_EXP ADD (
  CHECK ("POS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SOOB_EXP ADD (
  CONSTRAINT SOOB_EXP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.SOOB_EXP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table STAN_ROLE 
-- 
ALTER TABLE MASTER.STAN_ROLE ADD (
  CHECK ("STAN_KOD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_ROLE ADD (
  CHECK ("KLS_ROLE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table SVED_IN 
-- 
ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("SVED_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("SVED_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("SVED_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("SVED_CNT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("VES_NETTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CHECK ("VES_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED_IN ADD (
  CONSTRAINT PK_SVED_OIL
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_SVED_OIL
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEMP_BILL_KVIT 
-- 
ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("TARIF19" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_VOZN11" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_VOZN11_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_VOZN12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_VOZN12_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT ADD (
  CHECK ("SUM_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEMP_BILL_KVIT_POSSIBLE 
-- 
ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("TARIF19" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_VOZN11" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_VOZN11_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_VOZN12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_VOZN12_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_BILL_KVIT_POSSIBLE ADD (
  CHECK ("SUM_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEMP_PAYMENTS_PROD 
-- 
ALTER TABLE MASTER.TEMP_PAYMENTS_PROD ADD (
  CONSTRAINT PK_TEMP_PAYMENTS_PROD
  PRIMARY KEY
  (OSUSER_NAME, TERMINAL_NAME, PAYMENTS_ID, PROD_ID_NPR)
  USING INDEX MASTER.PK_TEMP_PAYMENTS_PROD
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEMP_PAYMENTS_TO_BILLS 
-- 
ALTER TABLE MASTER.TEMP_PAYMENTS_TO_BILLS ADD (
  CHECK ("PAYMENTS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_PAYMENTS_TO_BILLS ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEMP_REESTR_PARAMS 
-- 
ALTER TABLE MASTER.TEMP_REESTR_PARAMS ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_REESTR_PARAMS ADD (
  CHECK ("DATETIME_REPORT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMP_REESTR_PARAMS ADD (
  CONSTRAINT PK_TEMP_REESTR_PARAMS
  PRIMARY KEY
  (TERMINAL_NAME, OSUSER_NAME)
  USING INDEX MASTER.PK_TEMP_REESTR_PARAMS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEMPVARI 
-- 
ALTER TABLE MASTER.TEMPVARI ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMPVARI ADD (
  CHECK ("OSUSER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMPVARI ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMPVARI ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMPVARI ADD (
  CHECK ("VARI_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TEMPVARI ADD (
  CONSTRAINT PK_TEMPVARI
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_TEMPVARI
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TEST 
-- 
ALTER TABLE MASTER.TEST ADD (
  CONSTRAINT TEST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TEST_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.TEST ADD (
  CONSTRAINT TEST_TEST_AK_UK
  UNIQUE (NAME)
  USING INDEX MASTER.TEST_TEST_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TO_SS 
-- 
ALTER TABLE MASTER.TO_SS ADD (
  CHECK ("NOM_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TO_SS ADD (
  CONSTRAINT TO_SS_PK
  PRIMARY KEY
  (NOM_DOK)
  USING INDEX MASTER.TO_SS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TOW_PUT_KONS 
-- 
ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("KOL_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("KG_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("CENA_POK_BN_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("CENA_POK_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_BN_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_NDS_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_AKCIZ_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("KOL_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("KG_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("CENA_POK_BN_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("CENA_POK_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_BN_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_NDS_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_AKCIZ_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("SUMMA_POK_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("PREDPR_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("PROD_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CHECK ("ORG_POLUCH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TOW_PUT_KONS ADD (
  CONSTRAINT TOW_PUT_PK
  PRIMARY KEY
  (FILIAL_ID, ID_OPER)
  USING INDEX MASTER.TOW_PUT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table T_SNPORDEXP_UPLOAD_KSE 
-- 
ALTER TABLE MASTER.T_SNPORDEXP_UPLOAD_KSE ADD (
  CONSTRAINT T_SNPORDEXP_UPLOAD_PK_KSE
  PRIMARY KEY
  (UPLOADID)
  USING INDEX MASTER.T_SNPORDEXP_UPLOAD_PK_KSE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table USER_RIGHTS 
-- 
ALTER TABLE MASTER.USER_RIGHTS ADD (
  CHECK ("GIVENRIGHT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USER_RIGHTS ADD (
  CHECK ("USERNAME" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table UVED 
-- 
ALTER TABLE MASTER.UVED ADD (
  CHECK ("UVED_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.UVED ADD (
  CHECK ("UVED_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.UVED ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.UVED ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.UVED ADD (
  CONSTRAINT PK_UVED
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_UVED
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VAL_INT 
-- 
ALTER TABLE MASTER.VAL_INT ADD (
  CONSTRAINT VAL_INT_PK
  PRIMARY KEY
  (DD_MM_YYYY, SYB_RNK, N_OB, N_GR_INTEGR, MIN_0, MIN_1)
  USING INDEX MASTER.VAL_INT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VED_OSMOTR_PODPIS 
-- 
ALTER TABLE MASTER.VED_OSMOTR_PODPIS ADD (
  CONSTRAINT VED_OSM_PODPIS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VED_OSM_PODPIS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VED_OSMOTR_SMENA 
-- 
ALTER TABLE MASTER.VED_OSMOTR_SMENA ADD (
  CONSTRAINT VED_OSMOTR_SMENA_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VED_OSMOTR_SMENA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VOZVRAT 
-- 
ALTER TABLE MASTER.VOZVRAT ADD (
  CHECK ("NUM_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VOZVRAT ADD (
  CHECK ("NUM_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VOZVRAT ADD (
  CONSTRAINT VOZVRAT_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VOZVRAT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table XX100A 
-- 
ALTER TABLE MASTER.XX100A ADD (
  PRIMARY KEY
  (ANAME)
  USING INDEX
    TABLESPACE USERS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table XX101_MONTH 
-- 
ALTER TABLE MASTER.XX101_MONTH ADD (
  PRIMARY KEY
  (NOM_ZD)
  USING INDEX
    TABLESPACE USERS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table XX101_STATISTICS 
-- 
ALTER TABLE MASTER.XX101_STATISTICS ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE USERS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table XX101_ZKERP_DATA 
-- 
ALTER TABLE MASTER.XX101_ZKERP_DATA ADD (
  PRIMARY KEY
  (FILENAME, FILEROWNUM)
  USING INDEX
    TABLESPACE USERS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table XX101_ZKERP_DATA_X 
-- 
ALTER TABLE MASTER.XX101_ZKERP_DATA_X ADD (
  PRIMARY KEY
  (FILENAME, FILEROWNUM)
  USING INDEX
    TABLESPACE USERS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table XX101_ZRAZNAR 
-- 
ALTER TABLE MASTER.XX101_ZRAZNAR ADD (
  CONSTRAINT XX101_ZRAZNAR_PK
  PRIMARY KEY
  (ORDERNUM)
  USING INDEX MASTER.XX101_ZRAZNAR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ 
-- 
ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("IS_AGENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("INPUT_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("IS_ACCEPT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("FILIAL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("PLAT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("SPEED_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("SPEED_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("FACT_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("FACT_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("LOAD_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("LOAD_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("PERIOD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CHECK ("TIP_CORP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CONSTRAINT ZAKAZ_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ZAKAZ_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_GRAFIK_TEMP 
-- 
ALTER TABLE MASTER.ZAKAZ_GRAFIK_TEMP ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK_TEMP ADD (
  CHECK ("USER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK_TEMP ADD (
  CHECK ("DATE_LOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK_TEMP ADD (
  CHECK ("TONN_LOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK_TEMP ADD (
  CHECK ("CIST_LOAD" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_HIST 
-- 
ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("ZAKAZ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("STATUS_ZAKAZ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("INPUT_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("SPEED_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("SPEED_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("FACT_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("FACT_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("IS_AUTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("LOAD_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CHECK ("LOAD_KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CONSTRAINT ZAKAZ_HIST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ZAKAZ_HIST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_HIST_ISU 
-- 
ALTER TABLE MASTER.ZAKAZ_HIST_ISU ADD (
  CONSTRAINT ZAKAZ_HIST_ISU_PK
  PRIMARY KEY
  (ZAKAZ_HIST_ID)
  USING INDEX MASTER.ZAKAZ_HIST_ISU_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_PARUS 
-- 
ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CHECK ("INPUT_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CHECK ("IS_ACCEPT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CHECK ("FACT_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_PARUS ADD (
  CONSTRAINT ZAKAZ_PARUS_RN_I
  PRIMARY KEY
  (PARUS_RN)
  USING INDEX MASTER.ZAKAZ_PARUS_RN_I
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_SNP_LINKS 
-- 
ALTER TABLE MASTER.ZAKAZ_SNP_LINKS ADD (
  CONSTRAINT ZAKAZ_SNP_LINKS_PK
  PRIMARY KEY
  (DOC301_ID)
  USING INDEX MASTER.ZAKAZ_SNP_LINKS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_TEMP 
-- 
ALTER TABLE MASTER.ZAKAZ_TEMP ADD (
  CHECK ("TERMINAL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_TEMP ADD (
  CHECK ("USER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_SYS_COMM 
-- 
ALTER TABLE MASTER.AZC_SYS_COMM ADD (
  CHECK ("ID_PAGE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_SYS_COMM ADD (
  CHECK ("ID_FIELD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_SYS_COMM ADD (
  CONSTRAINT PK_AZC_SYS_COMM
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_AZC_SYS_COMM
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILL_POS_PREPAY 
-- 
ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("CENA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("SUMMA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("SUMMA_NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("SUMMA_GSM25" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CHECK ("OWNERSHIP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CONSTRAINT BILLPOS_PP_PK
  PRIMARY KEY
  (NOM_DOK, BILL_POS_PREPAY_ID)
  USING INDEX MASTER.BILLPOS_PP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_ACCESS_PRIVS 
-- 
ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_AP_CHECK_1
  CHECK ( ap_type IN ( 'GBA' ,  'GP' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_AP_CHECK_2
  CHECK ( gba_admin_priv IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CHECK ("AP_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CHECK ("AP_EU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_AP_PK
  PRIMARY KEY
  (AP_ID)
  USING INDEX MASTER.EUL_AP_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_AP_AP1_UK
  UNIQUE (GP_APP_ID, GBA_BA_ID, AP_EU_ID)
  USING INDEX MASTER.EUL_AP_AP1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BA_OBJ_LINKS 
-- 
ALTER TABLE MASTER.EUL_BA_OBJ_LINKS ADD (
  CHECK ("BOL_BA_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BA_OBJ_LINKS ADD (
  CHECK ("BOL_OBJ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BA_OBJ_LINKS ADD (
  CONSTRAINT EUL_BOL_PK
  PRIMARY KEY
  (BOL_ID)
  USING INDEX MASTER.EUL_BOL_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BA_OBJ_LINKS ADD (
  CONSTRAINT EUL_BOL_BOL1_UK
  UNIQUE (BOL_BA_ID, BOL_OBJ_ID)
  USING INDEX MASTER.EUL_BOL_BOL1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BATCH_REPORTS 
-- 
ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CONSTRAINT EUL_BR_CHECK_1
  CHECK ( br_auto_refresh IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CHECK ("BR_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CHECK ("BR_WORKBOOK_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CHECK ("BR_EU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CHECK ("BR_RFU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CHECK ("BR_AUTO_REFRESH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CHECK ("BR_REPORT_SCHEMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CONSTRAINT EUL_BR_PK
  PRIMARY KEY
  (BR_ID)
  USING INDEX MASTER.EUL_BR_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CONSTRAINT EUL_BR_BR2_UK
  UNIQUE (BR_NAME)
  USING INDEX MASTER.EUL_BR_BR2_UK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CONSTRAINT EUL_BR_BR3_UK
  UNIQUE (BR_JOB_ID)
  USING INDEX MASTER.EUL_BR_BR3_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BATCH_SHEETS 
-- 
ALTER TABLE MASTER.EUL_BATCH_SHEETS ADD (
  CHECK ("BS_BR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_SHEETS ADD (
  CHECK ("BS_SHEET_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_SHEETS ADD (
  CHECK ("BS_SHEET_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_SHEETS ADD (
  CONSTRAINT EUL_BS_PK
  PRIMARY KEY
  (BS_ID)
  USING INDEX MASTER.EUL_BS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BATCH_SHEETS ADD (
  CONSTRAINT EUL_BS_BS2_UK
  UNIQUE (BS_BR_ID, BS_SHEET_ID)
  USING INDEX MASTER.EUL_BS_BS2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BR_RUNS 
-- 
ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CONSTRAINT EUL_BRR_CHECK_1
  CHECK ( brr_state in (0,  1,  2,  3,  4,  5,  6,  7,  8,  9) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CHECK ("BRR_BR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CHECK ("BRR_RUN_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CHECK ("BRR_STATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CONSTRAINT EUL_BRR_PK
  PRIMARY KEY
  (BRR_ID)
  USING INDEX MASTER.EUL_BRR_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CONSTRAINT EUL_BRR_BRR2_UK
  UNIQUE (BRR_BR_ID, BRR_RUN_NUMBER)
  USING INDEX MASTER.EUL_BRR_BRR2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_DBH_NODES 
-- 
ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CHECK ("DHN_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CHECK ("DHN_DATA_FMT_MSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CHECK ("DHN_DISP_FMT_MSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CHECK ("DHN_HI_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CONSTRAINT EUL_DHN_PK
  PRIMARY KEY
  (DHN_ID)
  USING INDEX MASTER.EUL_DHN_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CONSTRAINT EUL_DHN_DHN1_UK
  UNIQUE (DHN_HI_ID, DHN_NAME)
  USING INDEX MASTER.EUL_DHN_DHN1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_FUN_ARGUMENTS 
-- 
ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_CHECK_1
  CHECK ( fa_name_s is not null or fa_name_mn is not null )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_CHECK_2
  CHECK ( fa_data_type IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_CHECK_3
  CHECK ( fa_optional IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CHECK ("FA_DATA_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CHECK ("FA_OPTIONAL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CHECK ("FA_POSITION" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CHECK ("FA_FUN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_PK
  PRIMARY KEY
  (FA_ID)
  USING INDEX MASTER.EUL_FA_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_FA1_UK
  UNIQUE (FA_POSITION, FA_FUN_ID)
  USING INDEX MASTER.EUL_FA_FA1_UK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_FA2_UK
  UNIQUE (FA_NAME_MN, FA_NAME_S, FA_FUN_ID)
  USING INDEX MASTER.EUL_FA_FA2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_HI_SEGMENTS 
-- 
ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_HS_CHECK_1
  CHECK ( (hs_type != 'DHS' or dhs_dhn_id_child != dhs_dhn_id_parent) and (hs_type != 'IHS' or ihs_hn_id_child != ihs_hn_id_parent) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_HS_CHECK_2
  CHECK ( hs_type IN ( 'IHS' ,  'DHS' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CHECK ("HS_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_HS_PK
  PRIMARY KEY
  (HS_ID)
  USING INDEX MASTER.EUL_HS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_HS_HS1_UK
  UNIQUE (IHS_HN_ID_CHILD, IHS_HN_ID_PARENT, IHS_HI_ID, DHS_HI_ID, DHS_DHN_ID_CHILD, DHS_DHN_ID_PARENT)
  USING INDEX MASTER.EUL_HS_HS1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_KEY_CONS 
-- 
ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_1
  CHECK ( key_type IN ( 'PK' ,  'CK' ,  'FK' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_2
  CHECK ( key_type != 'FK' or key_obj_id != fk_obj_id_remote )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_3
  CHECK ( key_type != 'FK' or fk_mandatory = 0 or fk_outer_detail = 0 )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_4
  CHECK ( fk_mandatory IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_5
  CHECK ( fk_one_to_one IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_6
  CHECK ( fk_outer_detail IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_CHECK_7
  CHECK ( fk_outer_master IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CHECK ("KEY_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CHECK ("KEY_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CHECK ("KEY_OBJ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_PK
  PRIMARY KEY
  (KEY_ID)
  USING INDEX MASTER.EUL_KEY_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_OBJ_DEPS 
-- 
ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CONSTRAINT EUL_OD_CHECK_1
  CHECK ( od_obj_id_from != od_obj_id_to )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CHECK ("OD_OBJ_ID_FROM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CHECK ("OD_OBJ_ID_TO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CONSTRAINT EUL_OD_PK
  PRIMARY KEY
  (OD_ID)
  USING INDEX MASTER.EUL_OD_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CONSTRAINT EUL_OD_OD1_UK
  UNIQUE (OD_OBJ_ID_FROM, OD_OBJ_ID_TO)
  USING INDEX MASTER.EUL_OD_OD1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SUMMARY_OBJS 
-- 
ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_1
  CHECK ( sumo_type = 'SBO' or sdo_bitmap_pos is not null )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_2
  CHECK ( sumo_type IN ( 'SBO' ,  'MSDO' ,  'NMSDO' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_3
  CHECK ( sumo_internal IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_4
  CHECK ( sumo_item_deleted IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_5
  CHECK ( sumo_item_modified IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_6
  CHECK ( sumo_join_state IN ( 1 ,  2 ,  3 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_7
  CHECK ( sumo_validity IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_CHECK_8
  CHECK ( sdo_state IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CHECK ("SUMO_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CHECK ("SUMO_INTERNAL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CHECK ("SUMO_ITEM_DELETED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CHECK ("SUMO_ITEM_MODIFIED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CHECK ("SUMO_JOIN_STATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CHECK ("SUMO_VALIDITY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_PK
  PRIMARY KEY
  (SUMO_ID)
  USING INDEX MASTER.EUL_SUMO_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SUMO_SUMO1_UK
  UNIQUE (SBO_SRS_ID, SDO_BITMAP_POS, SBO_NAME)
  USING INDEX MASTER.EUL_SUMO_SUMO1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table INF2PB_ACCOUNTS 
-- 
ALTER TABLE MASTER.INF2PB_ACCOUNTS ADD (
  CHECK ("INF2PB_SCH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_ACCOUNTS ADD (
  CHECK ("PROMIS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_ACCOUNTS ADD (
  CHECK ("PAY_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_ACCOUNTS ADD (
  CHECK ("STATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.INF2PB_ACCOUNTS ADD (
  CONSTRAINT INF2PB_ACC_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.INF2PB_ACC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKALLOW 
-- 
ALTER TABLE MASTER.JKALLOW ADD (
  CHECK ("DATE_ALLOW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKALLOW ADD (
  CHECK ("SROK_ALLOW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKALLOW ADD (
  CHECK ("USERNAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKALLOW ADD (
  CONSTRAINT JKA_PK
  PRIMARY KEY
  (MESTO_ID, JKA_DATE, SVED_NUM)
  USING INDEX MASTER.JKA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT 
-- 
ALTER TABLE MASTER.JKCOMMIT ADD (
  CHECK ("SVED_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT ADD (
  CHECK ("SVED_CNT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT ADD (
  CHECK ("SVED_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT ADD (
  CONSTRAINT JKC_PK
  PRIMARY KEY
  (JKC_SES_ID, MESTO_ID, NOM_ZD, SVED_NUM)
  USING INDEX MASTER.JKC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT_PLAN2CENN 
-- 
ALTER TABLE MASTER.JKCOMMIT_PLAN2CENN ADD (
  CONSTRAINT PLAN2CENN_PK
  PRIMARY KEY
  (CAT_CEN_ID, PLANSTRU_ID)
  USING INDEX MASTER.PLAN2CENN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT_PLAN2PROG 
-- 
ALTER TABLE MASTER.JKCOMMIT_PLAN2PROG ADD (
  CHECK ("PLANSTRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PLAN2PROG ADD (
  CHECK ("GOSPROG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PLAN2PROG ADD (
  CONSTRAINT PLAN2PROG_PLAN2PROG_UK
  UNIQUE (GOSPROG_ID, PLANSTRU_ID)
  USING INDEX MASTER.PLAN2PROG_PLAN2PROG_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOC_NUMS 
-- 
ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CHECK ("DOC_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CHECK ("LAST_DOC_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CHECK ("MIN_DOC_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CHECK ("DOC_RULE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CONSTRAINT KLS_DOC_NUMS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.KLS_DOC_NUMS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CONSTRAINT KLS_DOC_NUMS_UK
  UNIQUE (DOC_TYPE_ID, MESTO_ID, DOC_PREFIX, FROM_DATE, TO_DATE)
  USING INDEX MASTER.KLS_DOC_NUMS_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_GD_VAGTYPE 
-- 
ALTER TABLE MASTER.KLS_GD_VAGTYPE ADD (
  CHECK ("ABBR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_VAGTYPE ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_VAGTYPE ADD (
  CHECK ("COLOR_GDPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_VAGTYPE ADD (
  CHECK ("COLOR_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_GD_VAGTYPE ADD (
  CONSTRAINT GD_VAGTYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_VAGTYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_LOAD_TYPE 
-- 
ALTER TABLE MASTER.KLS_LOAD_TYPE ADD (
  CHECK ("TYPE_OTGR_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_LOAD_TYPE ADD (
  CONSTRAINT LOAD_TYPE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.LOAD_TYPE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_NAPR 
-- 
ALTER TABLE MASTER.KLS_NAPR ADD (
  CONSTRAINT NAPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NAPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PAYFORM 
-- 
ALTER TABLE MASTER.KLS_PAYFORM ADD (
  CHECK ("PAYFORM_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PAYFORM ADD (
  CHECK ("PAYFORM_GR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PAYFORM ADD (
  CONSTRAINT PAYFORM_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PAYFORM_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_GU12 
-- 
ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CHECK ("NAME_GU12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CHECK ("ORDER_GDPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CHECK ("NAME_GDPL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CHECK ("STAT_NAGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CHECK ("GD_GROUP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CONSTRAINT PROD_GU12_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PROD_GU12_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_STATES 
-- 
ALTER TABLE MASTER.KLS_STATES ADD (
  CHECK ("STATE_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STATES ADD (
  CHECK ("NAPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STATES ADD (
  CONSTRAINT STATES_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.STATES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VID_OTGR 
-- 
ALTER TABLE MASTER.KLS_VID_OTGR ADD (
  CHECK ("LOAD_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VID_OTGR ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VID_OTGR ADD (
  CONSTRAINT VID_OTGR_PK
  PRIMARY KEY
  (LOAD_ABBR)
  USING INDEX MASTER.VID_OTGR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR_IN 
-- 
ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("SVED_IN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("DATE_OTGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("NUM_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("EMPTY_VOZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("GOST_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CHECK ("BAD_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CONSTRAINT REESTR_IN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.REESTR_IN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_SITE 
-- 
ALTER TABLE MASTER.REPL_SITE ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE ADD (
  CHECK ("DSN_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE ADD (
  CHECK ("SITE_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE ADD (
  CONSTRAINT R_SITE_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_SITE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_SITE_DESC 
-- 
ALTER TABLE MASTER.REPL_SITE_DESC ADD (
  CHECK ("REPL_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE_DESC ADD (
  CHECK ("REPL_LIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE_DESC ADD (
  CHECK ("ACTIVE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE_DESC ADD (
  CONSTRAINT R_SITE_DS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_SITE_DS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_ROUTE_FULL 
-- 
ALTER TABLE MASTER.R3_ROUTE_FULL ADD (
  CONSTRAINT ROUTE_FULL_PK
  PRIMARY KEY
  (ROUTE, ANFRF)
  USING INDEX MASTER.ROUTE_FULL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TRANS 
-- 
ALTER TABLE MASTER.TRANS ADD (
  CHECK ("DATE_REP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("PLAN_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("PLAN_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("PLANDAY_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("PLANDAY_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("FACTDAY_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("FACTDAY_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("PLANNAR_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("PLANNAR_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("FACTNAR_C" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("FACTNAR_V" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("CIST_EMPTY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("CIST_READY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("VAGOWN_MOS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("LOAD_MOS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CHECK ("NAPR_MOS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CONSTRAINT TRANS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.TRANS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table T_SNPORDEXP_UPLOADORD_KSE 
-- 
ALTER TABLE MASTER.T_SNPORDEXP_UPLOADORD_KSE ADD (
  CONSTRAINT T_SNPORDEXP_UPLOADORD_UK1_KSE
  UNIQUE (ORDERID, LOAD_VES)
  USING INDEX MASTER.T_SNPORDEXP_UPLOADORD_UK1_KSE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VED_OSMOTR 
-- 
ALTER TABLE MASTER.VED_OSMOTR ADD (
  CHECK ("VED_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR ADD (
  CHECK ("VED_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR ADD (
  CONSTRAINT VED_OSMOTR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VED_OSMOTR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ZAKAZ_GRAFIK 
-- 
ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CHECK ("ZAKAZ_HIST_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CHECK ("DATE_LOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CHECK ("TONN_LOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CHECK ("CIST_LOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CONSTRAINT PK_ZAKAZ_GRAFIK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_ZAKAZ_GRAFIK
  ENABLE VALIDATE);

ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CONSTRAINT ZAKAZ_GRAFIK_UK
  UNIQUE (ZAKAZ_HIST_ID, DATE_LOAD)
  USING INDEX MASTER.ZAKAZ_GRAFIK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BATCH_PARAMS 
-- 
ALTER TABLE MASTER.EUL_BATCH_PARAMS ADD (
  CHECK ("BP_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_PARAMS ADD (
  CHECK ("BP_VALUE1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_PARAMS ADD (
  CHECK ("BP_BS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_PARAMS ADD (
  CONSTRAINT EUL_BP_PK
  PRIMARY KEY
  (BP_ID)
  USING INDEX MASTER.EUL_BP_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BATCH_PARAMS ADD (
  CONSTRAINT EUL_BP_BP1_UK
  UNIQUE (BP_BS_ID, BP_NAME)
  USING INDEX MASTER.EUL_BP_BP1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BATCH_QUERIES 
-- 
ALTER TABLE MASTER.EUL_BATCH_QUERIES ADD (
  CHECK ("BQ_BS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_QUERIES ADD (
  CHECK ("BQ_QUERY_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_QUERIES ADD (
  CONSTRAINT EUL_BQ_PK
  PRIMARY KEY
  (BQ_ID)
  USING INDEX MASTER.EUL_BQ_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BATCH_QUERIES ADD (
  CONSTRAINT EUL_BQ_BQ1_UK
  UNIQUE (BQ_BS_ID, BQ_QUERY_ID)
  USING INDEX MASTER.EUL_BQ_BQ1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BQ_TABLES 
-- 
ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CHECK ("BQT_BQ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CHECK ("BQT_BRR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CHECK ("BQT_TABLE_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CONSTRAINT EUL_BQT_PK
  PRIMARY KEY
  (BQT_ID)
  USING INDEX MASTER.EUL_BQT_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CONSTRAINT EUL_BQT_BQT2_UK
  UNIQUE (BQT_TABLE_NAME)
  USING INDEX MASTER.EUL_BQT_BQT2_UK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CONSTRAINT EUL_BQT_BQT3_UK
  UNIQUE (BQT_BQ_ID, BQT_BRR_ID)
  USING INDEX MASTER.EUL_BQT_BQT3_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_JC_JOIN_LINKS 
-- 
ALTER TABLE MASTER.EUL_JC_JOIN_LINKS ADD (
  CHECK ("JJL_JC_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_JC_JOIN_LINKS ADD (
  CHECK ("JJL_KEY_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_JC_JOIN_LINKS ADD (
  CONSTRAINT EUL_JJL_PK
  PRIMARY KEY
  (JJL_ID)
  USING INDEX MASTER.EUL_JJL_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_JC_JOIN_LINKS ADD (
  CONSTRAINT EUL_JJL_JJL1_UK
  UNIQUE (JJL_KEY_ID, JJL_JC_ID)
  USING INDEX MASTER.EUL_JJL_JJL1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_NMSDO_JC_USGS 
-- 
ALTER TABLE MASTER.EUL_NMSDO_JC_USGS ADD (
  CHECK ("NJU_JC_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_NMSDO_JC_USGS ADD (
  CHECK ("NJU_NMSDO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_NMSDO_JC_USGS ADD (
  CONSTRAINT EUL_NJU_PK
  PRIMARY KEY
  (NJU_ID)
  USING INDEX MASTER.EUL_NJU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_NMSDO_JC_USGS ADD (
  CONSTRAINT EUL_NJU_NJU1_UK
  UNIQUE (NJU_JC_ID, NJU_NMSDO_ID)
  USING INDEX MASTER.EUL_NJU_NJU1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_OBJ_JOIN_USGS 
-- 
ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_CHECK_1
  CHECK ( (oju_obj_id is null and oju_sumo_id is not null) or (oju_obj_id is not null and oju_sumo_id is null) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_CHECK_2
  CHECK ( oju_join_modified IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CHECK ("OJU_JOIN_MODIFIED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CHECK ("OJU_KEY_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_PK
  PRIMARY KEY
  (OJU_ID)
  USING INDEX MASTER.EUL_OJU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_OJU2_UK
  UNIQUE (OJU_OBJ_ID, OJU_KEY_ID, OJU_SUMO_ID)
  USING INDEX MASTER.EUL_OJU_OJU2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD 
-- 
ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("ID_GROUP_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("NAME_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("LONG_NAME_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("FLG_ALLOWED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("PROD_NAR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("SF_GROTP_VIEW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("SF_POLUCH_VIEW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CHECK ("SF_NDS_VIEW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_PK
  PRIMARY KEY
  (ID_NPR)
  USING INDEX MASTER.PROD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PROD_KONS 
-- 
ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CHECK ("PROD_KONS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CHECK ("FLAG_FAS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CHECK ("KOEF_KG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CHECK ("KOEF_LIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CHECK ("TIP_AKCIZ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CONSTRAINT PROD_KONS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PROD_KONS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_REGION 
-- 
ALTER TABLE MASTER.KLS_REGION ADD (
  CHECK ("REGION_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_REGION ADD (
  CHECK ("KOD_MOSCOW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_REGION ADD (
  CHECK ("SHORT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_REGION ADD (
  CHECK ("STATES_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_REGION ADD (
  CONSTRAINT REGION_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.REGION_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_STAN 
-- 
ALTER TABLE MASTER.KLS_STAN ADD (
  CHECK ("STAN_KOD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STAN ADD (
  CHECK ("STAN_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STAN ADD (
  CHECK ("RAST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STAN ADD (
  CHECK ("REGION_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STAN ADD (
  CHECK ("GDOR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STAN ADD (
  CONSTRAINT STAN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.STAN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_PLAN 
-- 
ALTER TABLE MASTER.OIL_PLAN ADD (
  CHECK ("SOBSTVEN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OIL_PLAN ADD (
  CHECK ("POSTAV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OIL_PLAN ADD (
  CHECK ("PER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OIL_PLAN ADD (
  CHECK ("MESTOR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OIL_PLAN ADD (
  CHECK ("ID_PROD_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OIL_PLAN ADD (
  CONSTRAINT OIL_PLAN_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.OIL_PLAN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OIL_RESURS 
-- 
ALTER TABLE MASTER.OIL_RESURS ADD (
  CONSTRAINT OIL_RESURS_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.OIL_RESURS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table OSTAT_VYRAB 
-- 
ALTER TABLE MASTER.OSTAT_VYRAB ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.OSTAT_VYRAB ADD (
  UNIQUE (ID)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_ANSW_IN 
-- 
ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("REPL_LIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("SRC_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("DST_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("REPL_ANSW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("REPLSTATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("OSUSER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CHECK ("FILE_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CONSTRAINT R_ANSW_I_PK
  PRIMARY KEY
  (REPL_ID)
  USING INDEX MASTER.R_ANSW_I_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_ANSW_OUT 
-- 
ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("REPL_LIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("SRC_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("DST_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("REPL_ANSW" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("REPLSTATUS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("OSUSER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CHECK ("FILE_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CONSTRAINT R_ANSW_O_PK
  PRIMARY KEY
  (REPL_ID)
  USING INDEX MASTER.R_ANSW_O_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_CALL_IN 
-- 
ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("REPL_LIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("SRC_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("DST_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("REPL_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("REPL_SQL1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("OSUSER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CHECK ("FILE_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CONSTRAINT R_CALL_I_PK
  PRIMARY KEY
  (REPL_ID)
  USING INDEX MASTER.R_CALL_I_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_CALL_OUT 
-- 
ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("REPL_LIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("SRC_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("DST_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("REPL_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("REPL_SQL1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("OSUSER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CHECK ("FILE_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CONSTRAINT R_CALL_O_PK
  PRIMARY KEY
  (REPL_ID)
  USING INDEX MASTER.R_CALL_O_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_CONFIG 
-- 
ALTER TABLE MASTER.REPL_CONFIG ADD (
  CONSTRAINT R_CONFIG_PK
  PRIMARY KEY
  (REPL_SITE)
  USING INDEX MASTER.R_CONFIG_R_SITE_FK_I
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REPL_LIST 
-- 
ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("REPL_KIND" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("SRC_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("DST_SITE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("SP_TYPE_BF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("SP_TYPE_AF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("CHECK_MODE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("F_APPL_TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("F_CONFIRM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("IS_ACTIVE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CHECK ("IS_TRACKING" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.R_LIST_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_R_LIST_AK_UK
  UNIQUE (TAG)
  USING INDEX MASTER.R_LIST_R_LIST_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_MATERIALS 
-- 
ALTER TABLE MASTER.R3_MATERIALS ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_MATERIALS ADD (
  CONSTRAINT MATERIALS_PK
  PRIMARY KEY
  (VBAP_MATNR)
  USING INDEX MASTER.MATERIALS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table SVED 
-- 
ALTER TABLE MASTER.SVED ADD (
  CHECK ("SVED_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("SVED_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("SVED_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("SVED_CNT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("VES_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("KOL_NET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("VES_ALL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CHECK ("FROM_DBF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CONSTRAINT SVED_PK
  PRIMARY KEY
  (ID, FLG_OPERDATA)
  USING INDEX MASTER.SVED_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILLS 
-- 
ALTER TABLE MASTER.BILLS ADD (
  CHECK ("NOM_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("DATE_VYP_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("DATE_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("DATE_BUXG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("SUMMA_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("NDS_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("GSM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("AKCIZ_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("KOL_DN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("OWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("PROD_SUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("PROD_GSM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("PROD_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("DATE_MOS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("IS_KORR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CHECK ("TO_KORR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS ADD (
  CONSTRAINT BILLS_PK
  PRIMARY KEY
  (NOM_DOK)
  USING INDEX MASTER.BILLS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILLS_SNP 
-- 
ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("NOM_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("DATE_VYP_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("DATE_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("DATE_BUXG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("DATE_MOS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("SUMMA_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("NDS_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("GSM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("AKCIZ_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("OWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CHECK ("USL_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_SNP ADD (
  CONSTRAINT BILLS_SNP_PK
  PRIMARY KEY
  (NOM_DOK)
  USING INDEX MASTER.BILLS_SNP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DAYLY_FACT 
-- 
ALTER TABLE MASTER.DAYLY_FACT ADD (
  CHECK ("KOD_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CHECK ("KOD_DEC" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CHECK ("PERER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CHECK ("DATA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CHECK ("PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CHECK ("SOBSTV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CONSTRAINT D_FACT_PK
  PRIMARY KEY
  (KOD)
  USING INDEX MASTER.D_FACT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table JKCOMMIT_PROD2CENN 
-- 
ALTER TABLE MASTER.JKCOMMIT_PROD2CENN ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PROD2CENN ADD (
  CHECK ("CAT_CEN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PROD2CENN ADD (
  CONSTRAINT PROD2CENN_PROD2CENN_UK
  UNIQUE (CAT_CEN_ID, PROD_ID_NPR)
  USING INDEX MASTER.PROD2CENN_PROD2CENN_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PREDPR 
-- 
ALTER TABLE MASTER.KLS_PREDPR ADD (
  CHECK ("PREDPR_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CHECK ("REGION_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CHECK ("HOLDING_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CHECK ("PERTYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CHECK ("EX_SVID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CHECK ("IS_BLOCK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PREDPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PREDPR_CONTACTS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_CONTACTS ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_CONTACTS ADD (
  CONSTRAINT PK_KLS_PREDPR_CONTACTS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PREDPR_CONTACTS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PREDPR_KONS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_KONS ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_KONS ADD (
  CHECK ("INN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_KONS ADD (
  CHECK ("IS_AUTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_KONS ADD (
  CONSTRAINT PREDPRKONS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PREDPRKONS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PREDPR_RS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_RS ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_RS ADD (
  CHECK ("BANKS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_RS ADD (
  CHECK ("RS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_RS ADD (
  CHECK ("IS_MAIN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR_RS ADD (
  CONSTRAINT PK_KLS_PREDPR_RS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_PREDPR_RS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_SHABEXP 
-- 
ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CHECK ("FLG_DOSTUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CHECK ("STAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CONSTRAINT SHABEXP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.SHABEXP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_TEX_PD 
-- 
ALTER TABLE MASTER.KLS_TEX_PD ADD (
  CHECK ("PLATTARIF_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TEX_PD ADD (
  CHECK ("TEX_PD_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TEX_PD ADD (
  CONSTRAINT TEX_PD_PK
  PRIMARY KEY
  (ID, GROTP_ID)
  USING INDEX MASTER.TEX_PD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VAGOWNER 
-- 
ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CHECK ("VAGOWNER_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CHECK ("VAGOWN_TYP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CHECK ("OWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CONSTRAINT VAGOWNER_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VAGOWNER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VETKA 
-- 
ALTER TABLE MASTER.KLS_VETKA ADD (
  CHECK ("VETKA_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA ADD (
  CONSTRAINT VETKA_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VETKA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_VETKA_OTP 
-- 
ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CHECK ("VETKA_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CHECK ("SHORT_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CHECK ("DOSTUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CHECK ("ORDNUNG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CONSTRAINT VETKA_OTP_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VETKA_OTP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table NAKL 
-- 
ALTER TABLE MASTER.NAKL ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("NAKL_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("NAKL_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("FORMNAKL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("VES_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("UPAK_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CHECK ("VES_ALL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CONSTRAINT NAKL_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NAKL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table NPR_PRICES 
-- 
ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("CAT_CEN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("NGSM25" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("CENA_OTP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("OWNERSHIP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("SUPPLIER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CHECK ("IS_ORIGINAL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CONSTRAINT NPR_PRICES_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.NPR_PRICES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ORG_STRUCTURE 
-- 
ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CONSTRAINT CHECK_LOAD_FAS
  CHECK (LOAD_FAS_FROM_PARUS+LOAD_FAS_FROM_XLS<2)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CONSTRAINT CHECK_LOAD_NALIV
  CHECK (LOAD_NALIV_FROM_PARUS+LOAD_NALIV_FROM_XLS<2)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CHECK ("ADRESS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CHECK ("NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CHECK ("ORG_KIND_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CHECK ("ORG_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CONSTRAINT ORG_STRU_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.ORG_STRU_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_POST_SVOD 
-- 
ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("HRAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("SUPPLIER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("PLANSTRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CHECK ("IS_KORR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CONSTRAINT PLANPOST_S_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLANPOST_S_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PODACHA 
-- 
ALTER TABLE MASTER.PODACHA ADD (
  CHECK ("POD_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CHECK ("POD_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CHECK ("VETKA_OTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CONSTRAINT PODACHA_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PODACHA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PODACHA_ROWS 
-- 
ALTER TABLE MASTER.PODACHA_ROWS ADD (
  CHECK ("PODACHA_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA_ROWS ADD (
  CHECK ("NUM_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA_ROWS ADD (
  CONSTRAINT POD_ROWS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.POD_ROWS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PREDPR_ROLE 
-- 
ALTER TABLE MASTER.PREDPR_ROLE ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PREDPR_ROLE ADD (
  CHECK ("KLS_ROLE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PREDPR_ROLE ADD (
  CONSTRAINT ROLE_PR_ROLE_PR_UK
  UNIQUE (PREDPR_ID, KLS_ROLE_ID)
  USING INDEX MASTER.ROLE_PR_ROLE_PR_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REESTR 
-- 
ALTER TABLE MASTER.REESTR ADD (
  CHECK ("SVED_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("NUM_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("VAG_STATUS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("KOL_NET" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("VES_ALL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("VES_ED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("KOL_ED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("UPAK_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("UPAK_VES_ED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("PODDONS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("PODDON_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("SHIELDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("SHIELD_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("TARIF_GUARD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("BAD_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("GOST_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("CTLV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("VOLUME15" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CHECK ("IS_AUTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.REESTR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_BILL_POS 
-- 
ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("CENA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("SUMMA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("SUMMA_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("VBAP_MATNR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CONSTRAINT R3_BILLPOS_PK
  PRIMARY KEY
  (VBELN, R3_BILL_POS_ID)
  USING INDEX MASTER.R3_BILLPOS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table STAN_PREDPR 
-- 
ALTER TABLE MASTER.STAN_PREDPR ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_PREDPR ADD (
  CHECK ("STAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_PREDPR ADD (
  CHECK ("VETKA_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_PREDPR ADD (
  CHECK ("IS_MAIN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_PREDPR ADD (
  CONSTRAINT STAN_PREDPR_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.STAN_PREDPR_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VED_OSMOTR_ROW 
-- 
ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CHECK ("VED_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CHECK ("POD_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CHECK ("NUM_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CHECK ("VAG_STATUS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMOTR_ROW_C06
  CHECK (gost1510 in (1,2,3,4,5))
  ENABLE VALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMORT_ROW_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VED_OSMORT_ROW_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VED_POD 
-- 
ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("VETKA_OTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("POD_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("POD_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CHECK ("VES_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CONSTRAINT VED_POD_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VED_POD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table VED_POD_ROW 
-- 
ALTER TABLE MASTER.VED_POD_ROW ADD (
  CHECK ("VED_POD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD_ROW ADD (
  CHECK ("NUM_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD_ROW ADD (
  CONSTRAINT VED_POD_ROW_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VED_POD_ROW_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ARC_REZ 
-- 
ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("DATEUPLOAD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("REZ_NUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("DEAD_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("MAX_VOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("AR_TOV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_GOOD_IN_WAY 
-- 
ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("DENCITY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("PLACE_SEND_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CONSTRAINT IN_WAY_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.IN_WAY_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_OPERATION 
-- 
ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("DENCITY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("TYPE_OPER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CONSTRAINT OPERATION_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.OPERATION_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table AZC_REALIZ_LIKARD 
-- 
ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("DATE_OPER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("DENCITY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("VOLUME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("ORG_STRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CONSTRAINT REL_LIKARD_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.REL_LIKARD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILL_POS 
-- 
ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("CENA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_GSM25" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("CENA_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_BN_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_NDS20_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("SUMMA_GSM25_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("DATE_REALIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("OWNERSHIP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("IS_AGENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("NO_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CHECK ("IS_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS ADD (
  CONSTRAINT BILL_POS_PK
  PRIMARY KEY
  (BILL_POS_ID, NOM_DOK)
  USING INDEX MASTER.BILL_POS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILL_POS_SNP 
-- 
ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("KVIT_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("CENA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_GSM25" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("CENA_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_BN_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_NDS20_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("SUMMA_GSM25_POKUP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("DATE_REALIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("OWNERSHIP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CHECK ("IS_AGENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CONSTRAINT BILL_POS_SNP_PK
  PRIMARY KEY
  (NOM_DOK, BILL_POS_SNP_ID)
  USING INDEX MASTER.BILL_POS_SNP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GD_PLAN 
-- 
ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("FROM_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("TO_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("GROTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("NAPR_MOS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("VAGOWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("STANOTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CHECK ("TIP_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_PLAN_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_GD_PLAN_AK_UK
  UNIQUE (TIP_PLAN, DATE_PLAN, GROTP_ID, NAPR_MOS_ID, PROD_ID_NPR, LOAD_TYPE_ID, VAGOWNER_ID, STANOTP_ID)
  USING INDEX MASTER.GD_PLAN_GD_PLAN_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GD_RAZN 
-- 
ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("FROM_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("TO_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("STAN_OTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("GD_OTPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("LOAD_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("GD_SOOB_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("GD_PODACH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CHECK ("NAPR_MOS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_RAZN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GD_RAZN_POS 
-- 
ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CHECK ("GD_RAZN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CHECK ("KOL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CHECK ("GD_PRINVAG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_RAZNPOS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOG 
-- 
ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT KLS_DOG_CHECK_UNP
  CHECK (AGENT_ID<>8 OR PREDPR_ID=8 OR UNP_ID>0)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("DOG_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("SHORT_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("DOG_BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("DOG_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("DOG_YEAR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("PREDPR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("INSURE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("VIDDOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("GROUPDOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("GOSPROG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("LUKDOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("USL_OPL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("SALDO_01072002" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("SALDO_01_07_2002" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("SALDO_01122002" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("IS_AGENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CHECK ("AGENT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT DOG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.DOG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_DOG_MAIN 
-- 
ALTER TABLE MASTER.KLS_DOG_MAIN ADD (
  CHECK ("IS_AGENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG_MAIN ADD (
  CHECK ("FROM_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG_MAIN ADD (
  CONSTRAINT PK_KLS_DOG_MAIN
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_KLS_DOG_MAIN
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KLS_PLAN 
-- 
ALTER TABLE MASTER.KLS_PLAN ADD (
  CHECK ("PLAN_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLAN ADD (
  CHECK ("PLAN_KIND_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLAN ADD (
  CHECK ("ONLY_UNP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLAN ADD (
  CONSTRAINT PLAN_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.KLS_PLAN ADD (
  CONSTRAINT PLAN_PLAN_AK_UK
  UNIQUE (PLAN_KIND_ID, PLAN_NAME)
  USING INDEX MASTER.PLAN_PLAN_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LOAD_FIL_ORG 
-- 
ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CHECK ("TAG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CHECK ("ORG_KIND_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CHECK ("FILIAL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CONSTRAINT FIL_ORG_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.FIL_ORG_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CONSTRAINT FIL_ORG_FIL_ORG_AK_UK
  UNIQUE (FILIAL_ID, TAG)
  USING INDEX MASTER.FIL_ORG_FIL_ORG_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LOAD_FIL_PERIODS 
-- 
ALTER TABLE MASTER.LOAD_FIL_PERIODS ADD (
  CHECK ("DATE_REPORT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_PERIODS ADD (
  CONSTRAINT FIL_PERIOD_PK
  PRIMARY KEY
  (ID, FILIAL_ID, REP_TYPE_ID)
  USING INDEX MASTER.FIL_PERIOD_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.LOAD_FIL_PERIODS ADD (
  CONSTRAINT FIL_PERIOD_FIL_PERIOD_AK_UK
  UNIQUE (FILIAL_ID, DATE_REPORT, REP_TYPE_ID)
  USING INDEX MASTER.FIL_PERIOD_FIL_PERIOD_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LOAD_FIL_REALIZ 
-- 
ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("FILIAL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("FIL_PERIOD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("FIL_ORG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("FIL_PROD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("REP_TYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("TYPE_OPER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("FACT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CHECK ("FACT_SUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CONSTRAINT FIL_REALIZ_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.FIL_REALIZ_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ORG_RELATIONS 
-- 
ALTER TABLE MASTER.ORG_RELATIONS ADD (
  CHECK ("KIND_RELA_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_RELATIONS ADD (
  CONSTRAINT ORG_REL_PK
  PRIMARY KEY
  (ORG_STRU_1_ID, ORG_STRU_2_ID)
  USING INDEX MASTER.ORG_REL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PAYMENTS 
-- 
ALTER TABLE MASTER.PAYMENTS ADD (
  CHECK ("PAYFORM_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  CHECK ("DEST_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  CHECK ("RS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  CONSTRAINT PK_PAYMENTS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_PAYMENTS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PAYMENTS_ON_BILLS 
-- 
ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CHECK ("NOM_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CHECK ("BILL_POS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CHECK ("PAYMENTS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CHECK ("DATE_REALIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CONSTRAINT PK_PAYMENTS_ON_BILLS
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PK_PAYMENTS_ON_BILLS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PAYMENTS_PROD 
-- 
ALTER TABLE MASTER.PAYMENTS_PROD ADD (
  CONSTRAINT PK_PAYMENTS_DEST
  PRIMARY KEY
  (PAYMENTS_ID, PROD_ID_NPR)
  USING INDEX MASTER.PK_PAYMENTS_DEST
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PAYMENTS_TO_BILLS 
-- 
ALTER TABLE MASTER.PAYMENTS_TO_BILLS ADD (
  CONSTRAINT PK_PAYMENTS_TO_BILLS
  PRIMARY KEY
  (PAYMENTS_ID, NOM_DOK)
  USING INDEX MASTER.PK_PAYMENTS_TO_BILLS
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_PERIODS 
-- 
ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CHECK ("NUM_IZM_POST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CHECK ("NUM_IZM_RESU" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CONSTRAINT PLAN_PER_PK
  PRIMARY KEY
  (PLAN_ID, ID)
  USING INDEX MASTER.PLAN_PER_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CONSTRAINT PLAN_PER_PLAN_PER_AK_UK
  UNIQUE (PLAN_ID, DATE_PLAN, BEGIN_DATE)
  USING INDEX MASTER.PLAN_PER_PLAN_PER_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_POST 
-- 
ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PLAN_CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PLAN_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PLAN_SUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PLAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PLAN_PER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PLANSTRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CHECK ("PAYFORM_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_POST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_POST_HIST 
-- 
ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PLAN_CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PLAN_VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PLAN_SUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PLAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PLAN_PER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PLANSTRU_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CHECK ("PAYFORM_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_PK
  PRIMARY KEY
  (ID, NUM_IZM)
  USING INDEX MASTER.PL_PST_HST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_RESU 
-- 
ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("PLAN_UTMSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("HRAN_UTMSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("OSTAT_UTMSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("PLAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("PLAN_PER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CHECK ("REFINER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CONSTRAINT PLAN_RESU_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.PLAN_RESU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CONSTRAINT PLAN_RESU_PLAN_RESU_AK_UK
  UNIQUE (PLAN_ID, PLAN_PER_ID, PROD_ID_NPR, REFINER_ID, SOBSTV_ID)
  USING INDEX MASTER.PLAN_RESU_PLAN_RESU_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_RESU_HIST 
-- 
ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("PLAN_UTMSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("HRAN_UTMSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("OSTAT_UTMSK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("PLAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("PLAN_PER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CHECK ("REFINER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CONSTRAINT PL_RES_HST_PK
  PRIMARY KEY
  (ID, NUM_IZM)
  USING INDEX MASTER.PL_RES_HST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PLAN_STRU_RELATIONS 
-- 
ALTER TABLE MASTER.PLAN_STRU_RELATIONS ADD (
  CONSTRAINT PLAN_RELA_PK
  PRIMARY KEY
  (PLAN_FROM_ID, PLANSTRU_FROM_ID, PLAN_TO_ID, PLANSTRU_TO_ID)
  USING INDEX MASTER.PLAN_RELA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table SPECIF 
-- 
ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("STANOTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("STAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("VETKA_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("POLUCH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("POTREB_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("PRIM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("END_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M3" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M4" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M5" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M6" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M7" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M8" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M9" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M10" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M11" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("M12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("KV1" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("KV2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("KV3" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("KV4" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("VES_ALL" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CHECK ("UPDATE_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.SPECIF_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table USL_DOG 
-- 
ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("USL_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("USL_BEGIN_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("VID_USL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("PAYDELAY_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("KOL_DN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("USL_AKT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("USL_UTV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("USL_BAZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("PROC_PRED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("USL_SUM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("PAYFORM_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("CAT_CEN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CONSTRAINT USL_DOG_PK
  PRIMARY KEY
  (DOG_ID, USL_NUMBER)
  USING INDEX MASTER.USL_DOG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILLS_PARUS 
-- 
ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("PREF_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("NOM_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("NPO_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("DATE_VYP_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("DATE_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("DATE_BUXG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_DOK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_GSM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_VOZN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_VOZN_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("SUMMA_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("KOL_DN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CHECK ("USL_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CONSTRAINT BILLS_P_PK
  PRIMARY KEY
  (NOM_DOK)
  USING INDEX MASTER.BILLS_P_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GD_RAZN_PATH 
-- 
ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CHECK ("GD_RAZNPOS_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CHECK ("SORTBY" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CHECK ("TIP_PATH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CHECK ("STAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CONSTRAINT GD_RZ_PATH_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.GD_RZ_PATH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MONTH 
-- 
ALTER TABLE MASTER.MONTH ADD (
  CHECK ("STANOTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("NPR_SOBSTV_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("STAN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("VETKA_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("POLUCH_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("TEX_PD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("NAZN_OTG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("LOAD_ABBR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("DOG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("USL_NUMBER" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("GOSPROG_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("TONN_DECLARED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("TONN_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("CIST_DECLARED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("CIST_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("FLG_ALLOW_8_AXES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("FLG_UPPER_SLIV" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("FLG_DOP_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("FLG_FORMA_2" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("FLG_OBOGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("DATE_PLAN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("INPUT_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("UPDATE_DATE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("POTREB_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("GROTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("IS_EXP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("CIST_FACT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CHECK ("TONN_FACT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_PK
  PRIMARY KEY
  (NOM_ZD)
  USING INDEX MASTER.MONTH_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table BILL_POS_PARUS 
-- 
ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("DATE_VYP_SF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("DATE_OTGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("CENA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("CENA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("SUMMA_BN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("SUMMA_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("SUMMA_NDS20" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("SUMMA_GSM25" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("SUMMA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("FOOD_RN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("FOOD_PRN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CHECK ("FOOD_CODE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CONSTRAINT BILL_POS_P_PK
  PRIMARY KEY
  (NOM_DOK, PARUS_RN, BILL_POS_PARUS_ID)
  USING INDEX MASTER.BILL_POS_P_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOP_KVIT 
-- 
ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("FLG_OPERDATA" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("TEX_PD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("DATE_OTGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("VES_BRUTTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("TARIF19" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("TARIF_ORIG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("NUM_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("FLG_DOP_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("FLG_VAG_KLIENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("VAGOWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("VAGONTYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("KALIBR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("FORMNAKL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SHABEXP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("EXPED_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("GROTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_VOZN11" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_VOZN11_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_VOZN12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_VOZN12_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("SUM_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CHECK ("CENA_VOZN" IS NOT NULL)
  DISABLE NOVALIDATE);


-- 
-- Non Foreign Key Constraints for Table KVIT 
-- 
ALTER TABLE MASTER.KVIT ADD (
  CHECK ("MESTO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("NOM_ZD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("PROD_ID_NPR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TEX_PD_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("DATE_OTGR" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("VES" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("VES_BRUTTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TARIF" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TARIF19" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TARIF_ORIG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("NUM_KVIT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("FLG_DOP_CIST" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("FLG_VAG_KLIENT" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("VAGOWNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("VAGONTYPE_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("KALIBR_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("FORMNAKL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SHABEXP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("EXPED_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("GROTP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_PROD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_AKCIZ" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_PROD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TARIF_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_VOZN11" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_VOZN11_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_VOZN12" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_VOZN12_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("SUM_STRAH" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("CENA_VOZN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TARIF_GUARD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TARIF_GUARD_NDS" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("TTN_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CHECK ("IS_LOADED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_PK
  PRIMARY KEY
  (ID, FLG_OPERDATA)
  USING INDEX MASTER.KVIT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_BQ_DEPS 
-- 
ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BQD_CHECK_1
  CHECK ( bqd_type IN ('BFUND',  'BFILD',  'BID') )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CHECK ("BQD_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CHECK ("BQD_BQ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BQD_PK
  PRIMARY KEY
  (BQD_ID)
  USING INDEX MASTER.EUL_BQD_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BQD_BQD1_UK
  UNIQUE (BQD_TYPE, BQD_BQ_ID, BFILD_FIL_ID, BID_IT_ID, BFUND_FUN_ID)
  USING INDEX MASTER.EUL_BQD_BQD1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_DOMAINS 
-- 
ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_CHECK_2
  CHECK ( dom_data_type IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_CHECK_3
  CHECK ( dom_logical_item IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_CHECK_4
  CHECK ( dom_sys_generated IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CHECK ("DOM_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CHECK ("DOM_DATA_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CHECK ("DOM_LOGICAL_ITEM" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CHECK ("DOM_SYS_GENERATED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_PK
  PRIMARY KEY
  (DOM_ID)
  USING INDEX MASTER.EUL_DOM_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_DOM2_UK
  UNIQUE (DOM_NAME)
  USING INDEX MASTER.EUL_DOM_DOM2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_EXP_DEPS 
-- 
ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_ED_CHECK_1
  CHECK ( ed_type IN ( 'PSD' ,  'PFD' ,  'CFD' ,  'CPD' ,  'CID' ,  'PED' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CHECK ("ED_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_ED_PK
  PRIMARY KEY
  (ED_ID)
  USING INDEX MASTER.EUL_ED_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_ED_ED1_UK
  UNIQUE (PSD_SQ_ID, PFD_FUN_ID, CD_EXP_ID, PED_EXP_ID, PD_P_ID, CFD_FUN_ID, CPD_EXP_ID, CID_EXP_ID)
  USING INDEX MASTER.EUL_ED_ED1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_EXPRESSIONS 
-- 
ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_1
  CHECK ( exp_type IN ( 'CI' ,  'CO' ,  'JP' ,  'FIL' ,  'PAR' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_10
  CHECK ( it_case_display IN ( 1 ,  2 ,  3 ,  4 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_11
  CHECK ( co_nullable IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_12
  CHECK ( p_case_sensitive IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_13
  CHECK ( fil_mandatory IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_14
  CHECK ( ci_aggregate_item in (1, 0) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_2
  CHECK ( exp_data_type IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_3
  CHECK ( ite_alignment IN ( 1 ,  2 ,  3 ,  4 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_4
  CHECK ( ite_word_wrap IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_5
  CHECK ( par_multiple_vals IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_6
  CHECK ( it_hidden IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_7
  CHECK ( it_ord_direction IN ( 1 ,  2 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_8
  CHECK ( it_placement IN ( 0 ,  1 ,  2 ,  3 ,  4 ,  5 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_CHECK_9
  CHECK ( it_case_storage IN ( 0 ,  1 ,  2 ,  3 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CHECK ("EXP_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CHECK ("EXP_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CHECK ("EXP_DATA_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_PK
  PRIMARY KEY
  (EXP_ID)
  USING INDEX MASTER.EUL_EXP_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_EXP_EXP1_UK
  UNIQUE (ITE_EU_ID, NJP_EU_ID, JP_KEY_ID, NJP_OBJ_ID_OWNER, ITE_OBJ_ID, EXP_NAME)
  USING INDEX MASTER.EUL_EXP_EXP1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_IG_EXP_LINKS 
-- 
ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_IEL_CHECK_1
  CHECK ( iel_type in ('HIL',  'KIL') )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CHECK ("IEL_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_IEL_PK
  PRIMARY KEY
  (IEL_ID)
  USING INDEX MASTER.EUL_IEL_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_IEL_IEL1_UK
  UNIQUE (KIL_EXP_ID, KIL_KEY_ID, HIL_EXP_ID, HIL_HN_ID)
  USING INDEX MASTER.EUL_IEL_IEL1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SBO_DSGN_ELEMS 
-- 
ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SDE_CHECK_1
  CHECK ( sde_type IN ( 'SAIL' ,  'SMIL' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SDE_CHECK_2
  CHECK ( sde_formula_mod IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CHECK ("SDE_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CHECK ("SDE_SUMO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CHECK ("SDE_FORMULA_MOD" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SDE_PK
  PRIMARY KEY
  (SDE_ID)
  USING INDEX MASTER.EUL_SDE_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SDE_SDE1_UK
  UNIQUE (SDE_SUMO_ID, SAIL_EXP_ID, SMIL_EXP_ID, SMIL_FUN_ID)
  USING INDEX MASTER.EUL_SDE_SDE1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SEGMENTS 
-- 
ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_CHECK_1
  CHECK ( (oss_obj_id is null or oss_seg_type in (1, 2)) and (oss_sumo_id is null or oss_seg_type = 3) and (oss_bq_id is null or oss_seg_type = 4) and (oss_cuo_id is null or oss_seg_type = 5) and (oss_exp_id is null or oss_seg_type = 6) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_CHECK_2
  CHECK ( oss_obj_id is not null or oss_sumo_id is not null or oss_bq_id is not null or oss_cuo_id is not null or oss_exp_id is not null )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_CHECK_3
  CHECK ( oss_seg_type IN (1, 2, 3, 4, 5, 6, 0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CHECK ("OSS_SEG_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CHECK ("OSS_SEQUENCE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_PK
  PRIMARY KEY
  (OSS_ID)
  USING INDEX MASTER.EUL_OSS_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_OSS2_UK
  UNIQUE (OSS_SUMO_ID, OSS_SEG_TYPE, OSS_SEQUENCE, OSS_OBJ_ID, OSS_CUO_ID, OSS_BQ_ID, OSS_EXP_ID)
  USING INDEX MASTER.EUL_OSS_OSS2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SQ_CRRLTNS 
-- 
ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CHECK ("SQC_SQ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CHECK ("SQC_IT_INNER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CHECK ("SQC_IT_OUTER_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CONSTRAINT EUL_SQC_PK
  PRIMARY KEY
  (SQC_ID)
  USING INDEX MASTER.EUL_SQC_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CONSTRAINT EUL_SQC_SQC2_UK
  UNIQUE (SQC_SQ_ID, SQC_IT_INNER_ID, SQC_IT_OUTER_ID)
  USING INDEX MASTER.EUL_SQC_SQC2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SUB_QUERIES 
-- 
ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CHECK ("SQ_NAME" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CHECK ("SQ_OBJ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CHECK ("SQ_IT_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CHECK ("SQ_FIL_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CONSTRAINT EUL_SQ_PK
  PRIMARY KEY
  (SQ_ID)
  USING INDEX MASTER.EUL_SQ_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SUM_BITMAPS 
-- 
ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_CHECK_1
  CHECK ( sb_exp_id is null or sb_key_id is null )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_CHECK_2
  CHECK ( sb_fun_id is null or sb_key_id is null )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CHECK ("SB_BITMAP" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CHECK ("SB_SEQUENCE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_PK
  PRIMARY KEY
  (SB_ID)
  USING INDEX MASTER.EUL_SB_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_SB2_UK
  UNIQUE (SB_EXP_ID, SB_KEY_ID, SB_FUN_ID, SB_SEQUENCE)
  USING INDEX MASTER.EUL_SB_SB2_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table EUL_SUMO_ITEM_USGS 
-- 
ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SIU_CHECK_1
  CHECK ( siu_type IN ( 'SAIU' ,  'SMIU' ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SIU_CHECK_2
  CHECK ( siu_item_modified IN ( 1 ,  0 ) )
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CHECK ("SIU_TYPE" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CHECK ("SIU_SUMO_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CHECK ("SIU_EXP_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CHECK ("SIU_EXT_COLUMN" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CHECK ("SIU_ITEM_MODIFIED" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SIU_PK
  PRIMARY KEY
  (SIU_ID)
  USING INDEX MASTER.EUL_SIU_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SIU_SIU1_UK
  UNIQUE (SIU_TYPE, SIU_SUMO_ID, SIU_EXP_ID, SMIU_FUN_ID, SMIU_MEASURE_SET)
  USING INDEX MASTER.EUL_SIU_SIU1_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KSSS_PREDPR_R3_CUSTOMERS_DESC 
-- 
ALTER TABLE MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC ADD (
  CONSTRAINT KSSS_PREDPR_R3_CUST_DESC_PK
  PRIMARY KEY
  (KSSS_PREDPR_ID, R3_CUSTOMERS)
  USING INDEX MASTER.KSSS_PREDPR_R3_CUST_DESC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table KSSS_PREDPR_R3_VENDORS_DESC 
-- 
ALTER TABLE MASTER.KSSS_PREDPR_R3_VENDORS_DESC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KSSS_PREDPR_R3_VENDORS_DESC ADD (
  CONSTRAINT KSSS_PREDPR_R3_VENDORS_DESC_PK
  PRIMARY KEY
  (KSSS_PREDPR_ID, R3_VENDORS)
  USING INDEX MASTER.KSSS_PREDPR_R3_VENDORS_DESC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_CC 
-- 
ALTER TABLE MASTER.R3_CC ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_CC ADD (
  CONSTRAINT CC_PK
  PRIMARY KEY
  (EKKO_ZZ021)
  USING INDEX MASTER.CC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_CUSTOMERS 
-- 
ALTER TABLE MASTER.R3_CUSTOMERS ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_CUSTOMERS ADD (
  CONSTRAINT CUSTOMERS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.CUSTOMERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_KONV 
-- 
ALTER TABLE MASTER.R3_KONV ADD (
  CONSTRAINT KONV_PK
  PRIMARY KEY
  (KSCHL)
  USING INDEX MASTER.KONV_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_KVIT2SAP 
-- 
ALTER TABLE MASTER.R3_KVIT2SAP ADD (
  CONSTRAINT KVIT2SAP_PK
  PRIMARY KEY
  (ID_MS)
  USING INDEX MASTER.KVIT2SAP_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_OA 
-- 
ALTER TABLE MASTER.R3_OA ADD (
  CONSTRAINT OA_PK
  PRIMARY KEY
  (ZZZZ_ID)
  USING INDEX MASTER.OA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_OD 
-- 
ALTER TABLE MASTER.R3_OD ADD (
  CHECK ("ZZZZ_ID" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CHECK ("VBAP_KWMENG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CHECK ("VBAP_UEBTO" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CHECK ("VBAP_KBMENG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CONSTRAINT OD_PK
  PRIMARY KEY
  (VBAK_VBELN, VBAP_POSNR)
  USING INDEX MASTER.OD_PK
  ENABLE VALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CONSTRAINT OD_R3_OD_AK_UK
  UNIQUE (ZZZZ_ID)
  USING INDEX MASTER.OD_R3_OD_AK_UK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_SC 
-- 
ALTER TABLE MASTER.R3_SC ADD (
  CONSTRAINT SC_PK
  PRIMARY KEY
  (ASNUM)
  USING INDEX MASTER.SC_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_VAGOWNER 
-- 
ALTER TABLE MASTER.R3_VAGOWNER ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VAGOWNER ADD (
  CONSTRAINT PK_R3_VAGOWNER
  PRIMARY KEY
  (R3_VENDORS_ID, VAGOWNER_ID)
  USING INDEX MASTER.PK_R3_VAGOWNER
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_VBAK 
-- 
ALTER TABLE MASTER.R3_VBAK ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CHECK ("VBAP_KBMENG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CHECK ("VBAP_KWMENG" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_PK
  PRIMARY KEY
  (VBELN)
  USING INDEX MASTER.VBAK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table R3_VENDORS 
-- 
ALTER TABLE MASTER.R3_VENDORS ADD (
  CHECK ("IS_AUTO_LINK" IS NOT NULL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VENDORS ADD (
  CONSTRAINT VENDORS_PK
  PRIMARY KEY
  (ID)
  USING INDEX MASTER.VENDORS_PK
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table DIS_GRANTS_ 
-- 
ALTER TABLE MASTER.DIS_GRANTS_ ADD (
  CONSTRAINT DIS_DG_DD_FK 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES MASTER.DIS_DOCS_ (DOCUMENT_ID)
  DISABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ENVIRONMENT 
-- 
ALTER TABLE MASTER.ENVIRONMENT ADD (
  CONSTRAINT ENV_ENV_FK 
  FOREIGN KEY (MASTER_ID) 
  REFERENCES MASTER.ENVIRONMENT (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_FUN_FC_LINKS 
-- 
ALTER TABLE MASTER.EUL_FUN_FC_LINKS ADD (
  CONSTRAINT EUL_FFL_FC_FK 
  FOREIGN KEY (FFL_FC_ID) 
  REFERENCES MASTER.EUL_FUN_CATEGORIES (FC_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_FUN_FC_LINKS ADD (
  CONSTRAINT EUL_FFL_FUN_FK 
  FOREIGN KEY (FFL_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_HIERARCHIES 
-- 
ALTER TABLE MASTER.EUL_HIERARCHIES ADD (
  CONSTRAINT EUL_IBH_DBH_FK 
  FOREIGN KEY (IBH_DBH_ID) 
  REFERENCES MASTER.EUL_HIERARCHIES (HI_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_HI_NODES 
-- 
ALTER TABLE MASTER.EUL_HI_NODES ADD (
  CONSTRAINT EUL_HN_IBH_FK 
  FOREIGN KEY (HN_HI_ID) 
  REFERENCES MASTER.EUL_HIERARCHIES (HI_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SUM_RFRSH_SETS 
-- 
ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_EU_FK 
  FOREIGN KEY (SRS_EU_ID) 
  REFERENCES MASTER.EUL_EUL_USERS (EU_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_RFRSH_SETS ADD (
  CONSTRAINT EUL_SRS_RFU_FK 
  FOREIGN KEY (SRS_RFU_ID) 
  REFERENCES MASTER.EUL_FREQ_UNITS (RFU_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table GU12_BR 
-- 
ALTER TABLE MASTER.GU12_BR ADD (
  CONSTRAINT GU12_BR_GU12_B_FK 
  FOREIGN KEY (ID_B) 
  REFERENCES MASTER.GU12_B (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_DOV_LINE 
-- 
ALTER TABLE MASTER.KLS_DOV_LINE ADD (
  CONSTRAINT DOV_LINE_DOVER_FK 
  FOREIGN KEY (DOVER_ID) 
  REFERENCES MASTER.KLS_DOVER (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_GP_NAPR 
-- 
ALTER TABLE MASTER.KLS_GP_NAPR ADD (
  CONSTRAINT GP_NAPR_GOSPROG_FK 
  FOREIGN KEY (GOSPROG_ID) 
  REFERENCES MASTER.KLS_GOSPROG (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_KTS 
-- 
ALTER TABLE MASTER.KLS_KTS ADD (
  CONSTRAINT KTS_GTD_FK 
  FOREIGN KEY (GTD) 
  REFERENCES MASTER.KLS_GTD (GTD)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_NARIAD 
-- 
ALTER TABLE MASTER.KLS_NARIAD ADD (
  CONSTRAINT NARIAD_DOVER_FK 
  FOREIGN KEY (DOVER_ID) 
  REFERENCES MASTER.KLS_DOVER (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_NARIAD ADD (
  CONSTRAINT NARIAD_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PASP 
-- 
ALTER TABLE MASTER.KLS_PASP ADD (
  CONSTRAINT PASP_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PLANSTRU 
-- 
ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CONSTRAINT PLANSTRU_NAZN_OTG_FK 
  FOREIGN KEY (NAZN_OTG_ID) 
  REFERENCES MASTER.KLS_NAZN_OTG (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLANSTRU ADD (
  CONSTRAINT PLANSTRU_PARENT_FK 
  FOREIGN KEY (PARENT_ID) 
  REFERENCES MASTER.KLS_PLANSTRU (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PROD_PLAN 
-- 
ALTER TABLE MASTER.KLS_PROD_PLAN ADD (
  CONSTRAINT PROD_PLAN_PARENT_FK 
  FOREIGN KEY (PARENT_ID) 
  REFERENCES MASTER.KLS_PROD_PLAN (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_VALPASP 
-- 
ALTER TABLE MASTER.KLS_VALPASP ADD (
  CONSTRAINT VALPASP_KODIF_FK 
  FOREIGN KEY (KODIF_ID) 
  REFERENCES MASTER.KLS_KODIF (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_VALSVED 
-- 
ALTER TABLE MASTER.KLS_VALSVED ADD (
  CONSTRAINT VALSVED_KODIF_FK 
  FOREIGN KEY (KODIF_ID) 
  REFERENCES MASTER.KLS_KODIF (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table MONTH_REESTR 
-- 
ALTER TABLE MASTER.MONTH_REESTR ADD (
  CONSTRAINT MONTH_REESTR_STATUS_FK 
  FOREIGN KEY (STATUS) 
  REFERENCES MASTER.KLS_STATUS_MONTH_REESTR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table MONTH_REESTR_POS 
-- 
ALTER TABLE MASTER.MONTH_REESTR_POS ADD (
  CONSTRAINT MON_REE_POS_MON_REE_FK 
  FOREIGN KEY (MONTH_REESTR_ID) 
  REFERENCES MASTER.MONTH_REESTR (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH_REESTR_POS ADD (
  CONSTRAINT MON_REE_POS_PRIORITY_FK 
  FOREIGN KEY (PRIORITY) 
  REFERENCES MASTER.KLS_PRIORITY_MONTH_REESTR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table MONTH_VISIR 
-- 
ALTER TABLE MASTER.MONTH_VISIR ADD (
  CONSTRAINT MON_VISIR_APP_USERS_FK 
  FOREIGN KEY (APP_USERS_ID) 
  REFERENCES MASTER.APP_USERS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table MONTH_VISIR_LOC 
-- 
ALTER TABLE MASTER.MONTH_VISIR_LOC ADD (
  CONSTRAINT MON_VISIR_LOC_APP_USERS_FK 
  FOREIGN KEY (APP_USERS_ID) 
  REFERENCES MASTER.APP_USERS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_FILE_TYPES 
-- 
ALTER TABLE MASTER.REPL_FILE_TYPES ADD (
  CONSTRAINT R_FILETYP_R_FILKND_FK 
  FOREIGN KEY (FILE_KIND) 
  REFERENCES MASTER.REPL_FILE_KINDS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_SESSION_LOG 
-- 
ALTER TABLE MASTER.REPL_SESSION_LOG ADD (
  CONSTRAINT R_SESS_L_R_SESS_FK 
  FOREIGN KEY (SESSION_ID) 
  REFERENCES MASTER.REPL_SESSION (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table R3_ROUTENODES 
-- 
ALTER TABLE MASTER.R3_ROUTENODES ADD (
  CONSTRAINT ROUTENODES_R3_GD_FK 
  FOREIGN KEY (BAHNR) 
  REFERENCES MASTER.R3_GD (BAHNR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_ROUTES 
-- 
ALTER TABLE MASTER.R3_ROUTES ADD (
  CONSTRAINT ROUTES_KNANF_FK 
  FOREIGN KEY (KNANF) 
  REFERENCES MASTER.R3_ROUTENODES (KNOTE)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_ROUTES ADD (
  CONSTRAINT ROUTES_KNEND_FK 
  FOREIGN KEY (KNEND) 
  REFERENCES MASTER.R3_ROUTENODES (KNOTE)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table USER_RIGHTS 
-- 
ALTER TABLE MASTER.USER_RIGHTS ADD (
  CONSTRAINT USER_RIGHTS_FK_I 
  FOREIGN KEY (GIVENRIGHT) 
  REFERENCES MASTER.KLS_RIGHTS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ZAKAZ 
-- 
ALTER TABLE MASTER.ZAKAZ ADD (
  CONSTRAINT FK_TIP_CORP 
  FOREIGN KEY (TIP_CORP_ID) 
  REFERENCES MASTER.KLS_ZAKAZ_TIP_CORP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ZAKAZ ADD (
  CONSTRAINT ZAKAZ_R01 
  FOREIGN KEY (PERIOD_ID) 
  REFERENCES MASTER.KLS_ZAKAZ_PERIOD (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ZAKAZ_HIST 
-- 
ALTER TABLE MASTER.ZAKAZ_HIST ADD (
  CONSTRAINT ZAKAZ_HIST_ZAKAZ_FK 
  FOREIGN KEY (ZAKAZ_ID) 
  REFERENCES MASTER.ZAKAZ (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table AZC_SYS_COMM 
-- 
ALTER TABLE MASTER.AZC_SYS_COMM ADD (
  CONSTRAINT PK_AZC_SYS_COMM_RF1 
  FOREIGN KEY (ID_FIELD) 
  REFERENCES MASTER.AZC_SYS_FIELDS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_SYS_COMM ADD (
  CONSTRAINT PK_AZC_SYS_FIELDS_RF2 
  FOREIGN KEY (ID_PAGE) 
  REFERENCES MASTER.AZC_SYS_PAGE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILL_POS_PREPAY 
-- 
ALTER TABLE MASTER.BILL_POS_PREPAY ADD (
  CONSTRAINT BILLPOS_PP_BILLS_PREP_FK 
  FOREIGN KEY (NOM_DOK) 
  REFERENCES MASTER.BILLS_PREPAY (NOM_DOK)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_ACCESS_PRIVS 
-- 
ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_AP_EU_FK 
  FOREIGN KEY (AP_EU_ID) 
  REFERENCES MASTER.EUL_EUL_USERS (EU_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_GBA_BA_FK 
  FOREIGN KEY (GBA_BA_ID) 
  REFERENCES MASTER.EUL_BUSINESS_AREAS (BA_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_ACCESS_PRIVS ADD (
  CONSTRAINT EUL_GP_PRI_FK 
  FOREIGN KEY (GP_APP_ID) 
  REFERENCES MASTER.EUL_APP_PARAMS (APP_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BA_OBJ_LINKS 
-- 
ALTER TABLE MASTER.EUL_BA_OBJ_LINKS ADD (
  CONSTRAINT EUL_BOL_BA_FK 
  FOREIGN KEY (BOL_BA_ID) 
  REFERENCES MASTER.EUL_BUSINESS_AREAS (BA_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BA_OBJ_LINKS ADD (
  CONSTRAINT EUL_BOL_OBJ_FK 
  FOREIGN KEY (BOL_OBJ_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BATCH_REPORTS 
-- 
ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CONSTRAINT EUL_BR_EU_FK 
  FOREIGN KEY (BR_EU_ID) 
  REFERENCES MASTER.EUL_EUL_USERS (EU_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BATCH_REPORTS ADD (
  CONSTRAINT EUL_BR_RFU_FK 
  FOREIGN KEY (BR_RFU_ID) 
  REFERENCES MASTER.EUL_FREQ_UNITS (RFU_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BATCH_SHEETS 
-- 
ALTER TABLE MASTER.EUL_BATCH_SHEETS ADD (
  CONSTRAINT EUL_BS_BR_FK 
  FOREIGN KEY (BS_BR_ID) 
  REFERENCES MASTER.EUL_BATCH_REPORTS (BR_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BR_RUNS 
-- 
ALTER TABLE MASTER.EUL_BR_RUNS ADD (
  CONSTRAINT EUL_BRR_BR_FK 
  FOREIGN KEY (BRR_BR_ID) 
  REFERENCES MASTER.EUL_BATCH_REPORTS (BR_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_DBH_NODES 
-- 
ALTER TABLE MASTER.EUL_DBH_NODES ADD (
  CONSTRAINT EUL_DHN_DBH_FK 
  FOREIGN KEY (DHN_HI_ID) 
  REFERENCES MASTER.EUL_HIERARCHIES (HI_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_FUN_ARGUMENTS 
-- 
ALTER TABLE MASTER.EUL_FUN_ARGUMENTS ADD (
  CONSTRAINT EUL_FA_FUN_FK 
  FOREIGN KEY (FA_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_HI_SEGMENTS 
-- 
ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_DHS_DBH_FK 
  FOREIGN KEY (DHS_HI_ID) 
  REFERENCES MASTER.EUL_HIERARCHIES (HI_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_DHS_DHN_C_FK 
  FOREIGN KEY (DHS_DHN_ID_PARENT) 
  REFERENCES MASTER.EUL_DBH_NODES (DHN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_DHS_DHN_P_FK 
  FOREIGN KEY (DHS_DHN_ID_CHILD) 
  REFERENCES MASTER.EUL_DBH_NODES (DHN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_IHS_HN_C_FK 
  FOREIGN KEY (IHS_HN_ID_PARENT) 
  REFERENCES MASTER.EUL_HI_NODES (HN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_IHS_HN_P_FK 
  FOREIGN KEY (IHS_HN_ID_CHILD) 
  REFERENCES MASTER.EUL_HI_NODES (HN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_IHS_HSP_FK 
  FOREIGN KEY (IHS_JC_ID) 
  REFERENCES MASTER.EUL_JOIN_COMBS (JC_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_HI_SEGMENTS ADD (
  CONSTRAINT EUL_IHS_IBH_FK 
  FOREIGN KEY (IHS_HI_ID) 
  REFERENCES MASTER.EUL_HIERARCHIES (HI_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_KEY_CONS 
-- 
ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_FK_OBJ_FK 
  FOREIGN KEY (FK_OBJ_ID_REMOTE) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_FK_UK_FK 
  FOREIGN KEY (FK_KEY_ID_REMOTE) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_KEY_CONS ADD (
  CONSTRAINT EUL_KEY_OBJ_FK 
  FOREIGN KEY (KEY_OBJ_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_OBJ_DEPS 
-- 
ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CONSTRAINT EUL_OD_COBJ_FK 
  FOREIGN KEY (OD_OBJ_ID_FROM) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_DEPS ADD (
  CONSTRAINT EUL_OD_OBJ_FK 
  FOREIGN KEY (OD_OBJ_ID_TO) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SUMMARY_OBJS 
-- 
ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_NMSDO_SDO_FK 
  FOREIGN KEY (NMSDO_SDO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SBO_SRS_FK 
  FOREIGN KEY (SBO_SRS_ID) 
  REFERENCES MASTER.EUL_SUM_RFRSH_SETS (SRS_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMMARY_OBJS ADD (
  CONSTRAINT EUL_SDO_SBO_FK 
  FOREIGN KEY (SDO_SBO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table INF2PB_ACCOUNTS 
-- 
ALTER TABLE MASTER.INF2PB_ACCOUNTS ADD (
  CONSTRAINT INF2PB_ACC_INF2PB_SCH_FK 
  FOREIGN KEY (INF2PB_SCH_ID) 
  REFERENCES MASTER.INF2PB_SCH (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table JKALLOW 
-- 
ALTER TABLE MASTER.JKALLOW ADD (
  CONSTRAINT JKA_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table JKCOMMIT 
-- 
ALTER TABLE MASTER.JKCOMMIT ADD (
  CONSTRAINT JKC_JKC_SES_FK 
  FOREIGN KEY (JKC_SES_ID) 
  REFERENCES MASTER.JKCOMMIT_SESSION (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT ADD (
  CONSTRAINT JKC_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table JKCOMMIT_PLAN2CENN 
-- 
ALTER TABLE MASTER.JKCOMMIT_PLAN2CENN ADD (
  CONSTRAINT PLAN2CENN_CAT_CEN_FK 
  FOREIGN KEY (CAT_CEN_ID) 
  REFERENCES MASTER.KLS_CAT_CEN (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table JKCOMMIT_PLAN2PROG 
-- 
ALTER TABLE MASTER.JKCOMMIT_PLAN2PROG ADD (
  CONSTRAINT PLAN2PROG_GOSPROG_FK 
  FOREIGN KEY (GOSPROG_ID) 
  REFERENCES MASTER.KLS_GOSPROG (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_DOC_NUMS 
-- 
ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CONSTRAINT KLS_DOC_NUMS_DOC_TYPE_FK 
  FOREIGN KEY (DOC_TYPE_ID) 
  REFERENCES MASTER.KLS_DOC_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOC_NUMS ADD (
  CONSTRAINT KLS_DOC_NUMS_RULE_FK 
  FOREIGN KEY (DOC_RULE_ID) 
  REFERENCES MASTER.KLS_DOC_RULES (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_GD_VAGTYPE 
-- 
ALTER TABLE MASTER.KLS_GD_VAGTYPE ADD (
  CONSTRAINT GD_VAGTYPE_VAGONTYPE_FK 
  FOREIGN KEY (VAGONTYPE_ID) 
  REFERENCES MASTER.KLS_VAGONTYPE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_LOAD_TYPE 
-- 
ALTER TABLE MASTER.KLS_LOAD_TYPE ADD (
  CONSTRAINT LOAD_TYPE_LOAD_MOS_FK 
  FOREIGN KEY (LOAD_MOS_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE_MOS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_NAPR 
-- 
ALTER TABLE MASTER.KLS_NAPR ADD (
  CONSTRAINT NAPR_NAPR_MOS_FK 
  FOREIGN KEY (NAPR_MOS_ID) 
  REFERENCES MASTER.KLS_NAPR_MOS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PAYFORM 
-- 
ALTER TABLE MASTER.KLS_PAYFORM ADD (
  CONSTRAINT PAYFORM_PAYFORM_GR_FK 
  FOREIGN KEY (PAYFORM_GR_ID) 
  REFERENCES MASTER.KLS_PAYFORM_GRP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PROD_GU12 
-- 
ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CONSTRAINT PROD_GU12_GD_GROUP_FK 
  FOREIGN KEY (GD_GROUP_ID) 
  REFERENCES MASTER.KLS_GD_GROUP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_GU12 ADD (
  CONSTRAINT PROD_GU12_GD_VAGTYPE_FK 
  FOREIGN KEY (GD_VAGTYPE_ID) 
  REFERENCES MASTER.KLS_GD_VAGTYPE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_STATES 
-- 
ALTER TABLE MASTER.KLS_STATES ADD (
  CONSTRAINT STATES_NAPR_FK 
  FOREIGN KEY (NAPR_ID) 
  REFERENCES MASTER.KLS_NAPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_VID_OTGR 
-- 
ALTER TABLE MASTER.KLS_VID_OTGR ADD (
  CONSTRAINT VID_OTGR_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REESTR_IN 
-- 
ALTER TABLE MASTER.REESTR_IN ADD (
  CONSTRAINT REESTR_IN_KALIBR_FK_I 
  FOREIGN KEY (KALIBR_ID) 
  REFERENCES MASTER.KLS_KALIBR (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR_IN ADD (
  CONSTRAINT REESTR_IN_SVED_IN_FK 
  FOREIGN KEY (SVED_IN_ID) 
  REFERENCES MASTER.SVED_IN (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_SITE 
-- 
ALTER TABLE MASTER.REPL_SITE ADD (
  CONSTRAINT R_SITE_R_DSNTYP_FK 
  FOREIGN KEY (DSN_TYPE) 
  REFERENCES MASTER.REPL_DSN_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_SITE ADD (
  CONSTRAINT R_SITE_R_S_TYPE_FK 
  FOREIGN KEY (SITE_TYPE) 
  REFERENCES MASTER.REPL_SITE_TYPES (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_SITE_DESC 
-- 
ALTER TABLE MASTER.REPL_SITE_DESC ADD (
  CONSTRAINT R_SITE_DS_R_SITE_FK 
  FOREIGN KEY (REPL_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_ROUTE_FULL 
-- 
ALTER TABLE MASTER.R3_ROUTE_FULL ADD (
  CONSTRAINT ROUTE_FULL_KNANF_FK 
  FOREIGN KEY (KNANF) 
  REFERENCES MASTER.R3_ROUTENODES (KNOTE)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_ROUTE_FULL ADD (
  CONSTRAINT ROUTE_FULL_KNEND_FK 
  FOREIGN KEY (KNEND) 
  REFERENCES MASTER.R3_ROUTENODES (KNOTE)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_ROUTE_FULL ADD (
  CONSTRAINT ROUTE_FULL_ROUTES_FK 
  FOREIGN KEY (ROUTE) 
  REFERENCES MASTER.R3_ROUTES (ROUTE)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table TRANS 
-- 
ALTER TABLE MASTER.TRANS ADD (
  CONSTRAINT TRANS_LOAD_MOS_FK 
  FOREIGN KEY (LOAD_MOS_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE_MOS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CONSTRAINT TRANS_MOS_GRP_FK 
  FOREIGN KEY (MOS_GRP_ID) 
  REFERENCES MASTER.KLS_PROD_MOSGRP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CONSTRAINT TRANS_NAPR_MOS_FK 
  FOREIGN KEY (NAPR_MOS_ID) 
  REFERENCES MASTER.KLS_NAPR_MOS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CONSTRAINT TRANS_PROD_GU12_FK 
  FOREIGN KEY (PROD_GU12_ID) 
  REFERENCES MASTER.KLS_PROD_GU12 (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.TRANS ADD (
  CONSTRAINT TRANS_VAGOWN_MOS_FK 
  FOREIGN KEY (VAGOWN_MOS_ID) 
  REFERENCES MASTER.KLS_VAGOWNER_MOS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table T_SNPORDEXP_UPLOADORD_KSE 
-- 
ALTER TABLE MASTER.T_SNPORDEXP_UPLOADORD_KSE ADD (
  CONSTRAINT T_SNPORDEXP_UPLOADORD_FK1_KSE 
  FOREIGN KEY (UPLOADID) 
  REFERENCES MASTER.T_SNPORDEXP_UPLOAD_KSE (UPLOADID)
  ON DELETE SET NULL
  ENABLE VALIDATE);

ALTER TABLE MASTER.T_SNPORDEXP_UPLOADORD_KSE ADD (
  CONSTRAINT T_SNPORDEXP_UPLOADORD_FK2_KSE 
  FOREIGN KEY (ORDERID) 
  REFERENCES MASTER.ZAKAZ_HIST (ID)
  ON DELETE SET NULL
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table VED_OSMOTR 
-- 
ALTER TABLE MASTER.VED_OSMOTR ADD (
  CONSTRAINT VED_OSMOTR_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR ADD (
  CONSTRAINT VED_OSMOTR_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ZAKAZ_GRAFIK 
-- 
ALTER TABLE MASTER.ZAKAZ_GRAFIK ADD (
  CONSTRAINT ZAKAZ_GRAFIK_ZAKAZ_HIST_FK 
  FOREIGN KEY (ZAKAZ_HIST_ID) 
  REFERENCES MASTER.ZAKAZ_HIST (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BATCH_PARAMS 
-- 
ALTER TABLE MASTER.EUL_BATCH_PARAMS ADD (
  CONSTRAINT EUL_BP_BS_FK 
  FOREIGN KEY (BP_BS_ID) 
  REFERENCES MASTER.EUL_BATCH_SHEETS (BS_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BATCH_QUERIES 
-- 
ALTER TABLE MASTER.EUL_BATCH_QUERIES ADD (
  CONSTRAINT EUL_BQ_BS_FK 
  FOREIGN KEY (BQ_BS_ID) 
  REFERENCES MASTER.EUL_BATCH_SHEETS (BS_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BQ_TABLES 
-- 
ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CONSTRAINT EUL_BQT_BQ_FK 
  FOREIGN KEY (BQT_BQ_ID) 
  REFERENCES MASTER.EUL_BATCH_QUERIES (BQ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_TABLES ADD (
  CONSTRAINT EUL_BQT_BRR_FK 
  FOREIGN KEY (BQT_BRR_ID) 
  REFERENCES MASTER.EUL_BR_RUNS (BRR_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_JC_JOIN_LINKS 
-- 
ALTER TABLE MASTER.EUL_JC_JOIN_LINKS ADD (
  CONSTRAINT EUL_JJL_FK_FK 
  FOREIGN KEY (JJL_KEY_ID) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_JC_JOIN_LINKS ADD (
  CONSTRAINT EUL_JJL_JC_FK 
  FOREIGN KEY (JJL_JC_ID) 
  REFERENCES MASTER.EUL_JOIN_COMBS (JC_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_NMSDO_JC_USGS 
-- 
ALTER TABLE MASTER.EUL_NMSDO_JC_USGS ADD (
  CONSTRAINT EUL_NJU_JC_FK 
  FOREIGN KEY (NJU_JC_ID) 
  REFERENCES MASTER.EUL_JOIN_COMBS (JC_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_NMSDO_JC_USGS ADD (
  CONSTRAINT EUL_NJU_NMSDO_FK 
  FOREIGN KEY (NJU_NMSDO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_OBJ_JOIN_USGS 
-- 
ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_COBJ_FK 
  FOREIGN KEY (OJU_OBJ_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_FK_FK 
  FOREIGN KEY (OJU_KEY_ID) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_OBJ_JOIN_USGS ADD (
  CONSTRAINT EUL_OJU_SUMO_FK 
  FOREIGN KEY (OJU_SUMO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PROD 
-- 
ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_AZC_PR_GRP_FK 
  FOREIGN KEY (AZC_PR_GRP_ID) 
  REFERENCES MASTER.AZC_PROD_GROUP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_MOS_GRP_FK 
  FOREIGN KEY (MOS_GRP_ID) 
  REFERENCES MASTER.KLS_PROD_MOSGRP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_PROD_GR_FK 
  FOREIGN KEY (KOD_OKDP) 
  REFERENCES MASTER.KLS_PROD_GR_KONS (ID_GR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_PROD_GU12_FK 
  FOREIGN KEY (PROD_GU12_ID) 
  REFERENCES MASTER.KLS_PROD_GU12 (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_PROD_NAR_FK 
  FOREIGN KEY (PROD_NAR_ID) 
  REFERENCES MASTER.KLS_PROD_NAR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD ADD (
  CONSTRAINT PROD_PROD_PLAN_FK 
  FOREIGN KEY (PROD_PLAN_ID) 
  REFERENCES MASTER.KLS_PROD_PLAN (ID)
  DISABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PROD_KONS 
-- 
ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CONSTRAINT PROD_KONS_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CONSTRAINT PROD_KONS_PROD_GR_FK 
  FOREIGN KEY (GR_KONS_ID) 
  REFERENCES MASTER.KLS_PROD_GR_KONS (ID_GR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PROD_KONS ADD (
  CONSTRAINT PROD_KONS_TIP_AKCIZ_FK 
  FOREIGN KEY (TIP_AKCIZ_ID) 
  REFERENCES MASTER.KLS_TIP_AKCIZ (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_REGION 
-- 
ALTER TABLE MASTER.KLS_REGION ADD (
  CONSTRAINT REGION_STATES_FK 
  FOREIGN KEY (STATES_ID) 
  REFERENCES MASTER.KLS_STATES (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_STAN 
-- 
ALTER TABLE MASTER.KLS_STAN ADD (
  CONSTRAINT STAN_GDOR_FK 
  FOREIGN KEY (GDOR_ID) 
  REFERENCES MASTER.KLS_GDOR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_STAN ADD (
  CONSTRAINT STAN_REGION_FK 
  FOREIGN KEY (REGION_ID) 
  REFERENCES MASTER.KLS_REGION (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table OIL_PLAN 
-- 
ALTER TABLE MASTER.OIL_PLAN ADD (
  FOREIGN KEY (ID_PROD_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table OIL_RESURS 
-- 
ALTER TABLE MASTER.OIL_RESURS ADD (
  CONSTRAINT OIL_RESURS_R01 
  FOREIGN KEY (KOD_PLAN) 
  REFERENCES MASTER.OIL_PLAN (KOD)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table OSTAT_VYRAB 
-- 
ALTER TABLE MASTER.OSTAT_VYRAB ADD (
  CONSTRAINT OSTAT_VYRAB_PROD 
  FOREIGN KEY (ID_PROD_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_ANSW_IN 
-- 
ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CONSTRAINT R_ANSW_I_DST_SITE_FK 
  FOREIGN KEY (DST_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CONSTRAINT R_ANSW_I_R_FILETYP_FK 
  FOREIGN KEY (FILE_TYPE) 
  REFERENCES MASTER.REPL_FILE_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_IN ADD (
  CONSTRAINT R_ANSW_I_SRC_SITE_FK 
  FOREIGN KEY (SRC_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_ANSW_OUT 
-- 
ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CONSTRAINT R_ANSW_O_DST_SITE_FK 
  FOREIGN KEY (DST_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CONSTRAINT R_ANSW_O_R_FILETYP_FK 
  FOREIGN KEY (FILE_TYPE) 
  REFERENCES MASTER.REPL_FILE_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_ANSW_OUT ADD (
  CONSTRAINT R_ANSW_O_SRC_SITE_FK 
  FOREIGN KEY (SRC_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_CALL_IN 
-- 
ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CONSTRAINT R_CALL_I_DST_SITE_FK 
  FOREIGN KEY (DST_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CONSTRAINT R_CALL_I_R_FILETYP_FK 
  FOREIGN KEY (FILE_TYPE) 
  REFERENCES MASTER.REPL_FILE_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_IN ADD (
  CONSTRAINT R_CALL_I_SRC_SITE_FK 
  FOREIGN KEY (SRC_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_CALL_OUT 
-- 
ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CONSTRAINT R_CALL_O_DST_SITE_FK 
  FOREIGN KEY (DST_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CONSTRAINT R_CALL_O_R_FILETYP_FK 
  FOREIGN KEY (FILE_TYPE) 
  REFERENCES MASTER.REPL_FILE_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_CALL_OUT ADD (
  CONSTRAINT R_CALL_O_SRC_SITE_FK 
  FOREIGN KEY (SRC_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_CONFIG 
-- 
ALTER TABLE MASTER.REPL_CONFIG ADD (
  CONSTRAINT R_CONFIG_R_SITE_FK 
  FOREIGN KEY (REPL_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REPL_LIST 
-- 
ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_DST_SITE_FK 
  FOREIGN KEY (DST_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_FILE_TYPE_I_FK 
  FOREIGN KEY (FILE_TYPE_I) 
  REFERENCES MASTER.REPL_FILE_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_FILE_TYPE_O_FK 
  FOREIGN KEY (FILE_TYPE_O) 
  REFERENCES MASTER.REPL_FILE_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_R_CHK_M_FK 
  FOREIGN KEY (CHECK_MODE) 
  REFERENCES MASTER.REPL_CHECK_MODES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_R_INFO_T_FK 
  FOREIGN KEY (SRC_INFO_T) 
  REFERENCES MASTER.REPL_INFO_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_R_KIND_FK 
  FOREIGN KEY (REPL_KIND) 
  REFERENCES MASTER.REPL_KINDS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_R_P_TYPE_1_FK 
  FOREIGN KEY (SP_TYPE_AF) 
  REFERENCES MASTER.REPL_PROC_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_SP_TYPE_FK 
  FOREIGN KEY (SP_TYPE_BF) 
  REFERENCES MASTER.REPL_PROC_TYPES (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REPL_LIST ADD (
  CONSTRAINT R_LIST_SRC_SITE_FK 
  FOREIGN KEY (SRC_SITE) 
  REFERENCES MASTER.REPL_SITE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_MATERIALS 
-- 
ALTER TABLE MASTER.R3_MATERIALS ADD (
  CONSTRAINT MATERIALS_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_MATERIALS ADD (
  CONSTRAINT MATERIALS_R3_MAT_GRP_FK 
  FOREIGN KEY (GROUP_S) 
  REFERENCES MASTER.R3_MATERIALS_GRP (GROUP_S)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table SVED 
-- 
ALTER TABLE MASTER.SVED ADD (
  CONSTRAINT SVED_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SVED ADD (
  CONSTRAINT SVED_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILLS 
-- 
ALTER TABLE MASTER.BILLS ADD (
  CONSTRAINT BILLS_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILLS_SNP 
-- 
ALTER TABLE MASTER.BILLS_SNP ADD (
  CONSTRAINT BILLS_SNP_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table DAYLY_FACT 
-- 
ALTER TABLE MASTER.DAYLY_FACT ADD (
  CONSTRAINT D_FACT_PLAN_REF_FK 
  FOREIGN KEY (KOD_PLAN) 
  REFERENCES MASTER.PLAN_REFINERY (KOD)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DAYLY_FACT ADD (
  CONSTRAINT D_FACT_PROD_FK 
  FOREIGN KEY (PROD) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table JKCOMMIT_PROD2CENN 
-- 
ALTER TABLE MASTER.JKCOMMIT_PROD2CENN ADD (
  CONSTRAINT PROD2CENN_CAT_CEN_FK 
  FOREIGN KEY (CAT_CEN_ID) 
  REFERENCES MASTER.KLS_CAT_CEN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.JKCOMMIT_PROD2CENN ADD (
  CONSTRAINT PROD2CENN_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PREDPR 
-- 
ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_BANK_FK 
  FOREIGN KEY (BANK_KORS) 
  REFERENCES MASTER.KLS_BANK (KORS)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_BANKS_FK 
  FOREIGN KEY (BANKS_ID) 
  REFERENCES MASTER.KLS_BANKS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_HOLDING_FK 
  FOREIGN KEY (HOLDING_ID) 
  REFERENCES MASTER.KLS_HOLDING (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_PERTYPE_FK 
  FOREIGN KEY (PERTYPE_ID) 
  REFERENCES MASTER.KLS_PERTYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_REGION_FK 
  FOREIGN KEY (REGION_ID) 
  REFERENCES MASTER.KLS_REGION (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PREDPR ADD (
  CONSTRAINT PREDPR_STATES_FK 
  FOREIGN KEY (STATES_ID) 
  REFERENCES MASTER.KLS_STATES (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PREDPR_CONTACTS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_CONTACTS ADD (
  CONSTRAINT PREDPR_CONTACTS_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PREDPR_KONS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_KONS ADD (
  CONSTRAINT PREDPRKONS_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PREDPR_RS 
-- 
ALTER TABLE MASTER.KLS_PREDPR_RS ADD (
  CONSTRAINT PREDPR_RS_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_SHABEXP 
-- 
ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CONSTRAINT SHABEXP_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_SHABEXP ADD (
  CONSTRAINT SHABEXP_STAN_FK 
  FOREIGN KEY (STAN_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_TEX_PD 
-- 
ALTER TABLE MASTER.KLS_TEX_PD ADD (
  CONSTRAINT TEX_PD_GROTP_FK 
  FOREIGN KEY (GROTP_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_TEX_PD ADD (
  CONSTRAINT TEX_PD_PLATTARIF_FK 
  FOREIGN KEY (PLATTARIF_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_VAGOWNER 
-- 
ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CONSTRAINT VAGOWNER_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CONSTRAINT VAGOWNER_VAGOWNER_FK 
  FOREIGN KEY (SOBSTV_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CONSTRAINT VAGOWNER_VAGOWN_MOS_FK 
  FOREIGN KEY (VAGOWN_MOS_ID) 
  REFERENCES MASTER.KLS_VAGOWNER_MOS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VAGOWNER ADD (
  CONSTRAINT VAGOWNER_VAGOWN_TYP_FK 
  FOREIGN KEY (VAGOWN_TYP_ID) 
  REFERENCES MASTER.KLS_VAGOWNER_TYPES (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_VETKA 
-- 
ALTER TABLE MASTER.KLS_VETKA ADD (
  CONSTRAINT VETKA_OWNER_FK 
  FOREIGN KEY (OWNER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_VETKA_OTP 
-- 
ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CONSTRAINT VETKA_OTP_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CONSTRAINT VETKA_OTP_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_VETKA_OTP ADD (
  CONSTRAINT VETKA_OTP_OWNER_FK 
  FOREIGN KEY (OWNER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table NAKL 
-- 
ALTER TABLE MASTER.NAKL ADD (
  CONSTRAINT NAKL_FORMNAKL_FK 
  FOREIGN KEY (FORMNAKL_ID) 
  REFERENCES MASTER.KLS_FORMNAKL (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CONSTRAINT NAKL_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.NAKL ADD (
  CONSTRAINT NAKL_SHABEXP_FK 
  FOREIGN KEY (SHABEXP_ID) 
  REFERENCES MASTER.KLS_SHABEXP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table NPR_PRICES 
-- 
ALTER TABLE MASTER.NPR_PRICES ADD (
  CONSTRAINT NPR_PRICES_CAT_CEN_FK 
  FOREIGN KEY (CAT_CEN_ID) 
  REFERENCES MASTER.KLS_CAT_CEN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CONSTRAINT NPR_PRICES_OWNERSHIP_FK 
  FOREIGN KEY (OWNERSHIP_ID) 
  REFERENCES MASTER.KLS_OWNERSHIP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CONSTRAINT NPR_PRICES_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.NPR_PRICES ADD (
  CONSTRAINT NPR_PRICES_SUPPLIER_FK 
  FOREIGN KEY (SUPPLIER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ORG_STRUCTURE 
-- 
ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CONSTRAINT ORG_STRU_ORG_KIND_FK 
  FOREIGN KEY (ORG_KIND_ID) 
  REFERENCES MASTER.KLS_ORG_KIND (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CONSTRAINT ORG_STRU_ORG_TYPE_FK 
  FOREIGN KEY (ORG_TYPE_ID) 
  REFERENCES MASTER.KLS_ORG_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_STRUCTURE ADD (
  CONSTRAINT ORG_STRU_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_POST_SVOD 
-- 
ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CONSTRAINT PLANPOST_S_PREDPR_FK 
  FOREIGN KEY (SUPPLIER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_SVOD ADD (
  CONSTRAINT PLANPOST_S_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PODACHA 
-- 
ALTER TABLE MASTER.PODACHA ADD (
  CONSTRAINT PODACHA_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CONSTRAINT PODACHA_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA ADD (
  CONSTRAINT PODACHA_VETKA_OTP_FK 
  FOREIGN KEY (VETKA_OTP_ID) 
  REFERENCES MASTER.KLS_VETKA_OTP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PODACHA_ROWS 
-- 
ALTER TABLE MASTER.PODACHA_ROWS ADD (
  CONSTRAINT PODACHA_ROW_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA_ROWS ADD (
  CONSTRAINT PODACHA_ROWS_PODACHA_FK 
  FOREIGN KEY (PODACHA_ID) 
  REFERENCES MASTER.PODACHA (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PODACHA_ROWS ADD (
  CONSTRAINT PODACHA_ROWS_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PREDPR_ROLE 
-- 
ALTER TABLE MASTER.PREDPR_ROLE ADD (
  CONSTRAINT ROLE_PR_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PREDPR_ROLE ADD (
  CONSTRAINT ROLE_PR_ROLE_SPR_FK 
  FOREIGN KEY (KLS_ROLE_ID) 
  REFERENCES MASTER.KLS_ROLE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table REESTR 
-- 
ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_FORMNAKL_FK 
  FOREIGN KEY (FORMNAKL_ID) 
  REFERENCES MASTER.KLS_FORMNAKL (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_NAR_LINE_FK 
  FOREIGN KEY (NAR_LINE_ID) 
  REFERENCES MASTER.KLS_NAR_LINE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_UPAK_FK 
  FOREIGN KEY (UPAK_ID) 
  REFERENCES MASTER.KLS_UPAK (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_VAGONTYPE_FK 
  FOREIGN KEY (VAGONTYPE_ID) 
  REFERENCES MASTER.KLS_VAGONTYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.REESTR ADD (
  CONSTRAINT REESTR_VETKA_OTP_FK 
  FOREIGN KEY (VETKA_OTP_ID) 
  REFERENCES MASTER.KLS_VETKA_OTP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_BILL_POS 
-- 
ALTER TABLE MASTER.R3_BILL_POS ADD (
  CONSTRAINT R3_BILLPOS_MATERIALS_FK 
  FOREIGN KEY (VBAP_MATNR) 
  REFERENCES MASTER.R3_MATERIALS (VBAP_MATNR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_BILL_POS ADD (
  CONSTRAINT R3_BILLPOS_R3_BILLS_FK 
  FOREIGN KEY (VBELN) 
  REFERENCES MASTER.R3_BILLS (VBELN)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table STAN_PREDPR 
-- 
ALTER TABLE MASTER.STAN_PREDPR ADD (
  CONSTRAINT STAN_PRED_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_PREDPR ADD (
  CONSTRAINT STAN_PRED_STAN_FK 
  FOREIGN KEY (STAN_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.STAN_PREDPR ADD (
  CONSTRAINT STAN_PRED_VETKA_FK 
  FOREIGN KEY (VETKA_ID) 
  REFERENCES MASTER.KLS_VETKA (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table VED_OSMOTR_ROW 
-- 
ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMORT_ROW_VED_FK 
  FOREIGN KEY (VED_ID) 
  REFERENCES MASTER.VED_OSMOTR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMOTR_ROW_KALIBR_FK 
  FOREIGN KEY (KALIBR_ID) 
  REFERENCES MASTER.KLS_KALIBR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMOTR_ROW_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMOTR_ROW_VAGONTYPE_FK 
  FOREIGN KEY (VAGONTYPE_ID) 
  REFERENCES MASTER.KLS_VAGONTYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_OSMOTR_ROW ADD (
  CONSTRAINT VED_OSMOTR_ROW_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table VED_POD 
-- 
ALTER TABLE MASTER.VED_POD ADD (
  CONSTRAINT VED_POD_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CONSTRAINT VED_POD_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD ADD (
  CONSTRAINT VED_POD_VETKA_OTP_FK 
  FOREIGN KEY (VETKA_OTP_ID) 
  REFERENCES MASTER.KLS_VETKA_OTP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table VED_POD_ROW 
-- 
ALTER TABLE MASTER.VED_POD_ROW ADD (
  CONSTRAINT VED_POD_ROW_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD_ROW ADD (
  CONSTRAINT VED_POD_ROW_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD_ROW ADD (
  CONSTRAINT VED_POD_ROW_VED_POD_FK 
  FOREIGN KEY (VED_POD_ID) 
  REFERENCES MASTER.VED_POD (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.VED_POD_ROW ADD (
  CONSTRAINT VED_POD_ROW_VOR_FK 
  FOREIGN KEY (VED_OSMOTR_ROW_ID) 
  REFERENCES MASTER.VED_OSMOTR_ROW (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ARC_REZ 
-- 
ALTER TABLE MASTER.ARC_REZ ADD (
  CONSTRAINT ARC_REZ_AR_TOV_FK 
  FOREIGN KEY (AR_TOV_ID) 
  REFERENCES MASTER.KLS_AR_TOV (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CONSTRAINT ARC_REZ_ORG_STRU_FK 
  FOREIGN KEY (ORG_STRU_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ARC_REZ ADD (
  CONSTRAINT ARC_REZ_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table AZC_GOOD_IN_WAY 
-- 
ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CONSTRAINT IN_WAY_ORG_STRU_FK 
  FOREIGN KEY (ORG_STRU_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CONSTRAINT IN_WAY_PLACE_SEND_FK 
  FOREIGN KEY (PLACE_SEND_ID) 
  REFERENCES MASTER.AZC_PLACE_SEND (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CONSTRAINT IN_WAY_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_GOOD_IN_WAY ADD (
  CONSTRAINT IN_WAY_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table AZC_OPERATION 
-- 
ALTER TABLE MASTER.AZC_OPERATION ADD (
  CONSTRAINT OPERATION_ORG_STRU_FK 
  FOREIGN KEY (ORG_STRU_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CONSTRAINT OPERATION_PLACE_SEND_FK 
  FOREIGN KEY (PLACE_SEND_ID) 
  REFERENCES MASTER.AZC_PLACE_SEND (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CONSTRAINT OPERATION_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CONSTRAINT OPERATION_SOBSTV_FK 
  FOREIGN KEY (SOBSTV_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_OPERATION ADD (
  CONSTRAINT OPERATION_TYPE_OPER_FK 
  FOREIGN KEY (TYPE_OPER_ID) 
  REFERENCES MASTER.AZC_TYPE_OPERATION (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table AZC_REALIZ_LIKARD 
-- 
ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CONSTRAINT REL_LIKARD_ORG_STRU_FK 
  FOREIGN KEY (ORG_STRU_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CONSTRAINT REL_LIKARD_PREDPR_FK 
  FOREIGN KEY (SOBSTV_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.AZC_REALIZ_LIKARD ADD (
  CONSTRAINT REL_LIKARD_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILL_POS 
-- 
ALTER TABLE MASTER.BILL_POS ADD (
  CONSTRAINT BILL_POS_BILLS_FK 
  FOREIGN KEY (NOM_DOK) 
  REFERENCES MASTER.BILLS (NOM_DOK)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILL_POS_SNP 
-- 
ALTER TABLE MASTER.BILL_POS_SNP ADD (
  CONSTRAINT BILL_POS_SNP_BILLS_FK 
  FOREIGN KEY (NOM_DOK) 
  REFERENCES MASTER.BILLS_SNP (NOM_DOK)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table GD_PLAN 
-- 
ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_NAPR_MOS_FK 
  FOREIGN KEY (NAPR_MOS_ID) 
  REFERENCES MASTER.KLS_NAPR_MOS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_PREDPR_FK 
  FOREIGN KEY (GROTP_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_STAN_FK 
  FOREIGN KEY (STANOTP_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_PLAN ADD (
  CONSTRAINT GD_PLAN_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table GD_RAZN 
-- 
ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_EXPED_FK 
  FOREIGN KEY (EXPED_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_GD_GROUP_FK 
  FOREIGN KEY (GD_GROUP_ID) 
  REFERENCES MASTER.KLS_GD_GROUP (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_GD_OTPR_FK 
  FOREIGN KEY (GD_OTPR_ID) 
  REFERENCES MASTER.KLS_GD_OTPR (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_GD_PODACH_FK 
  FOREIGN KEY (GD_PODACH_ID) 
  REFERENCES MASTER.KLS_GD_PODACH (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_GD_SOOB_FK 
  FOREIGN KEY (GD_SOOB_ID) 
  REFERENCES MASTER.KLS_GD_SOOB (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_STAN_OTP_FK 
  FOREIGN KEY (STAN_OTP_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_TRANSPORTER_FK 
  FOREIGN KEY (TRANSPORTER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN ADD (
  CONSTRAINT GD_RAZN_VETKA_OTP_FK 
  FOREIGN KEY (VETKA_OTP_ID) 
  REFERENCES MASTER.KLS_VETKA_OTP (ID)
  DISABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table GD_RAZN_POS 
-- 
ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_GD_PRINVAG_FK 
  FOREIGN KEY (GD_PRINVAG_ID) 
  REFERENCES MASTER.KLS_GD_PRINVAG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_GD_RAZN_FK 
  FOREIGN KEY (GD_RAZN_ID) 
  REFERENCES MASTER.GD_RAZN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_GD_VAGTYPE_FK 
  FOREIGN KEY (GD_VAGTYPE_ID) 
  REFERENCES MASTER.KLS_GD_VAGTYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_POLUCH_FK 
  FOREIGN KEY (POLUCH_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_STAN_FK 
  FOREIGN KEY (STAN_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_VETKA_FK 
  FOREIGN KEY (VETKA_ID) 
  REFERENCES MASTER.KLS_VETKA (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_POS ADD (
  CONSTRAINT GD_RAZNPOS_VID_OTPR_FK 
  FOREIGN KEY (VID_OTPR_ID) 
  REFERENCES MASTER.KLS_GD_VID_OTPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_DOG 
-- 
ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT DOG_GOSPROG_FK 
  FOREIGN KEY (GOSPROG_ID) 
  REFERENCES MASTER.KLS_GOSPROG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT DOG_GROUPDOG_FK 
  FOREIGN KEY (GROUPDOG_ID) 
  REFERENCES MASTER.KLS_GROUPDOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT DOG_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT DOG_USL_OPL_FK 
  FOREIGN KEY (USL_OPL_ID) 
  REFERENCES MASTER.KLS_USL_OPL (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_DOG ADD (
  CONSTRAINT DOG_VIDDOG_FK 
  FOREIGN KEY (VIDDOG_ID) 
  REFERENCES MASTER.KLS_VIDDOG (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_DOG_MAIN 
-- 
ALTER TABLE MASTER.KLS_DOG_MAIN ADD (
  CONSTRAINT KLS_DOG_MAIN_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KLS_PLAN 
-- 
ALTER TABLE MASTER.KLS_PLAN ADD (
  CONSTRAINT PLAN_BROTHER_FK 
  FOREIGN KEY (BROTHER_ID) 
  REFERENCES MASTER.KLS_PLAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLAN ADD (
  CONSTRAINT PLAN_PLAN_KIND_FK 
  FOREIGN KEY (PLAN_KIND_ID) 
  REFERENCES MASTER.KLS_PLAN_KIND (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KLS_PLAN ADD (
  CONSTRAINT PLAN_PLAN_OWNER_FK 
  FOREIGN KEY (PLAN_OWNER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table LOAD_FIL_ORG 
-- 
ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CONSTRAINT FIL_ORG_FILIAL_FK 
  FOREIGN KEY (FILIAL_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_ORG ADD (
  CONSTRAINT FIL_ORG_ORG_STRU_FK 
  FOREIGN KEY (ORG_STRU_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table LOAD_FIL_PERIODS 
-- 
ALTER TABLE MASTER.LOAD_FIL_PERIODS ADD (
  CONSTRAINT FIL_PERIOD_ORG_STRU_FK 
  FOREIGN KEY (FILIAL_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_PERIODS ADD (
  CONSTRAINT FIL_PERIOD_REP_TYPE_FK 
  FOREIGN KEY (REP_TYPE_ID) 
  REFERENCES MASTER.LOAD_FIL_REP_TYPES (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table LOAD_FIL_REALIZ 
-- 
ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CONSTRAINT FIL_REALIZ_FIL_ORG_FK 
  FOREIGN KEY (FIL_ORG_ID) 
  REFERENCES MASTER.LOAD_FIL_ORG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CONSTRAINT FIL_REALIZ_FIL_PERIOD_FK 
  FOREIGN KEY (FIL_PERIOD_ID, FILIAL_ID, REP_TYPE_ID) 
  REFERENCES MASTER.LOAD_FIL_PERIODS (ID,FILIAL_ID,REP_TYPE_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.LOAD_FIL_REALIZ ADD (
  CONSTRAINT FIL_REALIZ_FIL_PROD_FK 
  FOREIGN KEY (FIL_PROD_ID) 
  REFERENCES MASTER.LOAD_FIL_PROD (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table ORG_RELATIONS 
-- 
ALTER TABLE MASTER.ORG_RELATIONS ADD (
  CONSTRAINT ORG_REL_KIND_RELA_FK 
  FOREIGN KEY (KIND_RELA_ID) 
  REFERENCES MASTER.KLS_ORG_KIND_RELATIONS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_RELATIONS ADD (
  CONSTRAINT ORG_REL_ORG_STRU_1_FK 
  FOREIGN KEY (ORG_STRU_1_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.ORG_RELATIONS ADD (
  CONSTRAINT ORG_REL_ORG_STRU_2_FK 
  FOREIGN KEY (ORG_STRU_2_ID) 
  REFERENCES MASTER.ORG_STRUCTURE (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PAYMENTS 
-- 
ALTER TABLE MASTER.PAYMENTS ADD (
  CONSTRAINT PAYMENTS_BANKS_FK 
  FOREIGN KEY (BANK_ID) 
  REFERENCES MASTER.KLS_BANKS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  CONSTRAINT PAYMENTS_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  CONSTRAINT PAYMENTS_OURBANK_FK 
  FOREIGN KEY (OURBANK_ID) 
  REFERENCES MASTER.KLS_BANKS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  FOREIGN KEY (RS_ID) 
  REFERENCES MASTER.KLS_RS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS ADD (
  FOREIGN KEY (PAYFORM_ID) 
  REFERENCES MASTER.KLS_PAYFORM (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PAYMENTS_ON_BILLS 
-- 
ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CONSTRAINT PAYMENTS_ON_BILLS_FK1 
  FOREIGN KEY (BILL_POS_ID, NOM_DOK) 
  REFERENCES MASTER.BILL_POS (BILL_POS_ID,NOM_DOK)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_ON_BILLS ADD (
  CONSTRAINT PAYMENTS_ON_BILLS_FK2 
  FOREIGN KEY (PAYMENTS_ID) 
  REFERENCES MASTER.PAYMENTS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PAYMENTS_PROD 
-- 
ALTER TABLE MASTER.PAYMENTS_PROD ADD (
  CONSTRAINT PAYMENTS_PROD_NPR_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_PROD ADD (
  CONSTRAINT PAYMENTS_PROD_PAY_FK 
  FOREIGN KEY (PAYMENTS_ID) 
  REFERENCES MASTER.PAYMENTS (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PAYMENTS_TO_BILLS 
-- 
ALTER TABLE MASTER.PAYMENTS_TO_BILLS ADD (
  CONSTRAINT PAYMENTS_TO_BILLS_FK1 
  FOREIGN KEY (NOM_DOK) 
  REFERENCES MASTER.BILLS (NOM_DOK)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PAYMENTS_TO_BILLS ADD (
  CONSTRAINT PAYMETS_TO_BILLS_FK2 
  FOREIGN KEY (PAYMENTS_ID) 
  REFERENCES MASTER.PAYMENTS (ID)
  ON DELETE CASCADE
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_PERIODS 
-- 
ALTER TABLE MASTER.PLAN_PERIODS ADD (
  CONSTRAINT PLAN_PER_PLAN_FK 
  FOREIGN KEY (PLAN_ID) 
  REFERENCES MASTER.KLS_PLAN (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_POST 
-- 
ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_CAT_CEN_FK 
  FOREIGN KEY (CAT_CEN_ID) 
  REFERENCES MASTER.KLS_CAT_CEN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_PAYFORM_FK 
  FOREIGN KEY (PAYFORM_ID) 
  REFERENCES MASTER.KLS_PAYFORM (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_PLAN_PER_FK 
  FOREIGN KEY (PLAN_ID, PLAN_PER_ID) 
  REFERENCES MASTER.PLAN_PERIODS (PLAN_ID,ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_PLANSTRU_FK 
  FOREIGN KEY (PLANSTRU_ID) 
  REFERENCES MASTER.KLS_PLANSTRU (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST ADD (
  CONSTRAINT PLAN_POST_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_POST_HIST 
-- 
ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_CAT_CEN_FK 
  FOREIGN KEY (CAT_CEN_ID) 
  REFERENCES MASTER.KLS_CAT_CEN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_PAYFORM_FK 
  FOREIGN KEY (PAYFORM_ID) 
  REFERENCES MASTER.KLS_PAYFORM (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_PLAN_PER_FK 
  FOREIGN KEY (PLAN_ID, PLAN_PER_ID) 
  REFERENCES MASTER.PLAN_PERIODS (PLAN_ID,ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_PLANSTRU_FK 
  FOREIGN KEY (PLANSTRU_ID) 
  REFERENCES MASTER.KLS_PLANSTRU (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_POST_HIST ADD (
  CONSTRAINT PL_PST_HST_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_RESU 
-- 
ALTER TABLE MASTER.PLAN_RESU ADD (
  CONSTRAINT PLAN_RESU_PLAN_PER_FK 
  FOREIGN KEY (PLAN_ID, PLAN_PER_ID) 
  REFERENCES MASTER.PLAN_PERIODS (PLAN_ID,ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CONSTRAINT PLAN_RESU_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CONSTRAINT PLAN_RESU_REFINER_FK 
  FOREIGN KEY (REFINER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU ADD (
  CONSTRAINT PLAN_RESU_SOBSTV_FK 
  FOREIGN KEY (SOBSTV_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_RESU_HIST 
-- 
ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CONSTRAINT PL_RES_HST_PLAN_PER_FK 
  FOREIGN KEY (PLAN_ID, PLAN_PER_ID) 
  REFERENCES MASTER.PLAN_PERIODS (PLAN_ID,ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CONSTRAINT PL_RES_HST_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CONSTRAINT PL_RES_HST_REFINER_FK 
  FOREIGN KEY (REFINER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_RESU_HIST ADD (
  CONSTRAINT PL_RES_HST_SOBSTV_FK 
  FOREIGN KEY (SOBSTV_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table PLAN_STRU_RELATIONS 
-- 
ALTER TABLE MASTER.PLAN_STRU_RELATIONS ADD (
  CONSTRAINT PLAN_RELA_PLAN_FROM_FK 
  FOREIGN KEY (PLAN_FROM_ID) 
  REFERENCES MASTER.KLS_PLAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_STRU_RELATIONS ADD (
  CONSTRAINT PLAN_RELA_PLANSTRU_FROM_FK 
  FOREIGN KEY (PLANSTRU_FROM_ID) 
  REFERENCES MASTER.KLS_PLANSTRU (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_STRU_RELATIONS ADD (
  CONSTRAINT PLAN_RELA_PLANSTRU_TO_FK 
  FOREIGN KEY (PLANSTRU_TO_ID) 
  REFERENCES MASTER.KLS_PLANSTRU (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.PLAN_STRU_RELATIONS ADD (
  CONSTRAINT PLAN_RELA_PLAN_TO_FK 
  FOREIGN KEY (PLAN_TO_ID) 
  REFERENCES MASTER.KLS_PLAN (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table SPECIF 
-- 
ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_POLUCH_FK 
  FOREIGN KEY (POLUCH_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_POTREB_FK 
  FOREIGN KEY (POTREB_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_STAN_FK 
  FOREIGN KEY (STAN_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_STANOTP_FK 
  FOREIGN KEY (STANOTP_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_VETKA_FK 
  FOREIGN KEY (VETKA_ID) 
  REFERENCES MASTER.KLS_VETKA (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.SPECIF ADD (
  CONSTRAINT SPECIF_VID_OTGR_FK 
  FOREIGN KEY (LOAD_ABBR) 
  REFERENCES MASTER.KLS_VID_OTGR (LOAD_ABBR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table USL_DOG 
-- 
ALTER TABLE MASTER.USL_DOG ADD (
  CONSTRAINT USL_DOG_CAT_CEN_FK 
  FOREIGN KEY (CAT_CEN_ID) 
  REFERENCES MASTER.KLS_CAT_CEN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CONSTRAINT USL_DOG_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CONSTRAINT USL_DOG_PAYDELAY_FK 
  FOREIGN KEY (PAYDELAY_ID) 
  REFERENCES MASTER.KLS_PAYDELAY (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.USL_DOG ADD (
  CONSTRAINT USL_DOG_VID_USL_FK 
  FOREIGN KEY (VID_USL_ID) 
  REFERENCES MASTER.KLS_VID_USL (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILLS_PARUS 
-- 
ALTER TABLE MASTER.BILLS_PARUS ADD (
  CONSTRAINT BILLS_P_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.BILLS_PARUS ADD (
  CONSTRAINT BILLS_P_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table GD_RAZN_PATH 
-- 
ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CONSTRAINT GD_RZ_PATH_GD_RAZNPOS_FK 
  FOREIGN KEY (GD_RAZNPOS_ID) 
  REFERENCES MASTER.GD_RAZN_POS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CONSTRAINT GD_RZ_PATH_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CONSTRAINT GD_RZ_PATH_TIP_PATH_FK 
  FOREIGN KEY (TIP_PATH_ID) 
  REFERENCES MASTER.KLS_GD_TIP_PATH (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.GD_RAZN_PATH ADD (
  CONSTRAINT GD_RZ_PATH_VETKA_FK 
  FOREIGN KEY (VETKA_ID) 
  REFERENCES MASTER.KLS_VETKA (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table MONTH 
-- 
ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_FORMA_2_FK 
  FOREIGN KEY (FLG_FORMA_2) 
  REFERENCES MASTER.KLS_FORMA_2 (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_GOSPROG_FK 
  FOREIGN KEY (GOSPROG_ID) 
  REFERENCES MASTER.KLS_GOSPROG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_GP_NAPR_FK 
  FOREIGN KEY (GP_NAPR_ID) 
  REFERENCES MASTER.KLS_GP_NAPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_NAZN_OTG_FK 
  FOREIGN KEY (NAZN_OTG_ID) 
  REFERENCES MASTER.KLS_NAZN_OTG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_NPR_SOBSTV_FK 
  FOREIGN KEY (NPR_SOBSTV_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_PLANSTRU_FK 
  FOREIGN KEY (PLANSTRU_ID) 
  REFERENCES MASTER.KLS_PLANSTRU (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_POLUCH_FK 
  FOREIGN KEY (POLUCH_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_POTREB_FK 
  FOREIGN KEY (POTREB_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_STAN_FK 
  FOREIGN KEY (STAN_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_STANOTP_FK 
  FOREIGN KEY (STANOTP_ID) 
  REFERENCES MASTER.KLS_STAN (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_SUPPLIER_FK 
  FOREIGN KEY (SUPPLIER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_USL_DOG_FK 
  FOREIGN KEY (DOG_ID, USL_NUMBER) 
  REFERENCES MASTER.USL_DOG (DOG_ID,USL_NUMBER)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_VETKA_FK 
  FOREIGN KEY (VETKA_ID) 
  REFERENCES MASTER.KLS_VETKA (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT MONTH_VID_OTGR_FK 
  FOREIGN KEY (LOAD_ABBR) 
  REFERENCES MASTER.KLS_VID_OTGR (LOAD_ABBR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.MONTH ADD (
  CONSTRAINT NPODOG_FK 
  FOREIGN KEY (NPODOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table BILL_POS_PARUS 
-- 
ALTER TABLE MASTER.BILL_POS_PARUS ADD (
  CONSTRAINT BILL_POS_P_BILLS_P_FK 
  FOREIGN KEY (NOM_DOK) 
  REFERENCES MASTER.BILLS_PARUS (NOM_DOK)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table DOP_KVIT 
-- 
ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_EXPED_FK 
  FOREIGN KEY (EXPED_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_FORMNAKL_FK 
  FOREIGN KEY (FORMNAKL_ID) 
  REFERENCES MASTER.KLS_FORMNAKL (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_MONTH_FK 
  FOREIGN KEY (NOM_ZD) 
  REFERENCES MASTER.MONTH (NOM_ZD)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_PERER_FK 
  FOREIGN KEY (PERER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_SHABEXP_FK 
  FOREIGN KEY (SHABEXP_ID) 
  REFERENCES MASTER.KLS_SHABEXP (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_UPAK_FK 
  FOREIGN KEY (UPAK_ID) 
  REFERENCES MASTER.KLS_UPAK (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_VAGONTYPE_FK 
  FOREIGN KEY (VAGONTYPE_ID) 
  REFERENCES MASTER.KLS_VAGONTYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.DOP_KVIT ADD (
  CONSTRAINT DOP_KVIT_VETKA_OTP_FK 
  FOREIGN KEY (VETKA_OTP_ID) 
  REFERENCES MASTER.KLS_VETKA_OTP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KVIT 
-- 
ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_EXPED_FK 
  FOREIGN KEY (EXPED_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_FORMNAKL_FK 
  FOREIGN KEY (FORMNAKL_ID) 
  REFERENCES MASTER.KLS_FORMNAKL (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_MESTO_FK 
  FOREIGN KEY (MESTO_ID) 
  REFERENCES MASTER.KLS_MESTO (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_MONTH_FK 
  FOREIGN KEY (NOM_ZD) 
  REFERENCES MASTER.MONTH (NOM_ZD)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_PERER_FK 
  FOREIGN KEY (PERER_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_UPAK_FK 
  FOREIGN KEY (UPAK_ID) 
  REFERENCES MASTER.KLS_UPAK (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_VAGONTYPE_FK 
  FOREIGN KEY (VAGONTYPE_ID) 
  REFERENCES MASTER.KLS_VAGONTYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_VAGOWNER_FK 
  FOREIGN KEY (VAGOWNER_ID) 
  REFERENCES MASTER.KLS_VAGOWNER (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KVIT ADD (
  CONSTRAINT KVIT_VETKA_OTP_FK 
  FOREIGN KEY (VETKA_OTP_ID) 
  REFERENCES MASTER.KLS_VETKA_OTP (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_BQ_DEPS 
-- 
ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BFILD_FIL_FK 
  FOREIGN KEY (BFILD_FIL_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BFUND_FUN_FK 
  FOREIGN KEY (BFUND_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BID_IT_FK 
  FOREIGN KEY (BID_IT_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_BQ_DEPS ADD (
  CONSTRAINT EUL_BQD_BQ_FK 
  FOREIGN KEY (BQD_BQ_ID) 
  REFERENCES MASTER.EUL_BATCH_QUERIES (BQ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_DOMAINS 
-- 
ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_IT_L_FK 
  FOREIGN KEY (DOM_IT_ID_LOV) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_DOMAINS ADD (
  CONSTRAINT EUL_DOM_IT_R_FK 
  FOREIGN KEY (DOM_IT_ID_RANK) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_EXP_DEPS 
-- 
ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_CD_CI_FK 
  FOREIGN KEY (CD_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_CFD_FUN_FK 
  FOREIGN KEY (CFD_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_CID_IT_FK 
  FOREIGN KEY (CID_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_CPD_PAR_FK 
  FOREIGN KEY (CPD_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_PD_P_FK 
  FOREIGN KEY (PD_P_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_PED_EXP_FK 
  FOREIGN KEY (PED_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_PFD_FUN_FK 
  FOREIGN KEY (PFD_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXP_DEPS ADD (
  CONSTRAINT EUL_PSD_SQ_FK 
  FOREIGN KEY (PSD_SQ_ID) 
  REFERENCES MASTER.EUL_SUB_QUERIES (SQ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_EXPRESSIONS 
-- 
ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_CI_IT_FK 
  FOREIGN KEY (CI_IT_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_ITE_DOM_FK 
  FOREIGN KEY (ITE_DOM_ID) 
  REFERENCES MASTER.EUL_DOMAINS (DOM_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_ITE_EU_FK 
  FOREIGN KEY (ITE_EU_ID) 
  REFERENCES MASTER.EUL_EUL_USERS (EU_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_ITE_OBJ_FK 
  FOREIGN KEY (ITE_OBJ_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_IT_FUN_FK 
  FOREIGN KEY (IT_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_IT_IT_FK 
  FOREIGN KEY (IT_EXP_ID_DESC_FOR) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_IT_KEY_FK 
  FOREIGN KEY (IT_KEY_ID_DESC_FOR) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_JP_FK_FK 
  FOREIGN KEY (JP_KEY_ID) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_NJP_EU_FK 
  FOREIGN KEY (NJP_EU_ID) 
  REFERENCES MASTER.EUL_EUL_USERS (EU_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_NJP_OBJ_FK 
  FOREIGN KEY (NJP_OBJ_ID_OWNER) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_EXPRESSIONS ADD (
  CONSTRAINT EUL_PAR_IT_FK 
  FOREIGN KEY (PAR_EXP_ID_ASSOC) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_IG_EXP_LINKS 
-- 
ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_HIL_HN_FK 
  FOREIGN KEY (HIL_HN_ID) 
  REFERENCES MASTER.EUL_HI_NODES (HN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_HIL_IT_FK 
  FOREIGN KEY (HIL_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_KIL_IT_FK 
  FOREIGN KEY (KIL_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_IG_EXP_LINKS ADD (
  CONSTRAINT EUL_KIL_KEY_FK 
  FOREIGN KEY (KIL_KEY_ID) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SBO_DSGN_ELEMS 
-- 
ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SAIL_IT_FK 
  FOREIGN KEY (SAIL_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SDE_SBO_FK 
  FOREIGN KEY (SDE_SUMO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SMIL_FUN_FK 
  FOREIGN KEY (SMIL_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SBO_DSGN_ELEMS ADD (
  CONSTRAINT EUL_SMIL_IT_FK 
  FOREIGN KEY (SMIL_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SEGMENTS 
-- 
ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_BQ_FK 
  FOREIGN KEY (OSS_BQ_ID) 
  REFERENCES MASTER.EUL_BATCH_QUERIES (BQ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_CUO_FK 
  FOREIGN KEY (OSS_CUO_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_EXP_FK 
  FOREIGN KEY (OSS_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_OBJ_FK 
  FOREIGN KEY (OSS_OBJ_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SEGMENTS ADD (
  CONSTRAINT EUL_OSS_SDO_FK 
  FOREIGN KEY (OSS_SUMO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SQ_CRRLTNS 
-- 
ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CONSTRAINT EUL_SQC_IT_I_FK 
  FOREIGN KEY (SQC_IT_INNER_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CONSTRAINT EUL_SQC_IT_O_FK 
  FOREIGN KEY (SQC_IT_OUTER_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SQ_CRRLTNS ADD (
  CONSTRAINT EUL_SQC_SQ_FK 
  FOREIGN KEY (SQC_SQ_ID) 
  REFERENCES MASTER.EUL_SUB_QUERIES (SQ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SUB_QUERIES 
-- 
ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CONSTRAINT EUL_SQ_FIL_FK 
  FOREIGN KEY (SQ_FIL_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CONSTRAINT EUL_SQ_IT_FK 
  FOREIGN KEY (SQ_IT_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUB_QUERIES ADD (
  CONSTRAINT EUL_SQ_OBJ_FK 
  FOREIGN KEY (SQ_OBJ_ID) 
  REFERENCES MASTER.EUL_OBJS (OBJ_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SUM_BITMAPS 
-- 
ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_FK_FK 
  FOREIGN KEY (SB_KEY_ID) 
  REFERENCES MASTER.EUL_KEY_CONS (KEY_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_FUN_FK 
  FOREIGN KEY (SB_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUM_BITMAPS ADD (
  CONSTRAINT EUL_SB_IT_FK 
  FOREIGN KEY (SB_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table EUL_SUMO_ITEM_USGS 
-- 
ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SIU_IT_FK 
  FOREIGN KEY (SIU_EXP_ID) 
  REFERENCES MASTER.EUL_EXPRESSIONS (EXP_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SIU_SUMO_FK 
  FOREIGN KEY (SIU_SUMO_ID) 
  REFERENCES MASTER.EUL_SUMMARY_OBJS (SUMO_ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.EUL_SUMO_ITEM_USGS ADD (
  CONSTRAINT EUL_SMIU_FUN_FK 
  FOREIGN KEY (SMIU_FUN_ID) 
  REFERENCES MASTER.EUL_FUNCTIONS (FUN_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KSSS_PREDPR_R3_CUSTOMERS_DESC 
-- 
ALTER TABLE MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC ADD (
  CONSTRAINT KSSS_PREDPR_R3_CUSTOMERS_FK 
  FOREIGN KEY (R3_CUSTOMERS) 
  REFERENCES MASTER.R3_CUSTOMERS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KSSS_PREDPR_R3_CUSTOMERS_DESC ADD (
  CONSTRAINT KSSS_PREDPR_R3_CUST_PREDPR_FK 
  FOREIGN KEY (KSSS_PREDPR_ID) 
  REFERENCES MASTER.KSSS_PREDPR (KSSS_PREDPR_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table KSSS_PREDPR_R3_VENDORS_DESC 
-- 
ALTER TABLE MASTER.KSSS_PREDPR_R3_VENDORS_DESC ADD (
  CONSTRAINT KSSS_PREDPR_R3_VENDORS_FK 
  FOREIGN KEY (R3_VENDORS) 
  REFERENCES MASTER.R3_VENDORS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.KSSS_PREDPR_R3_VENDORS_DESC ADD (
  CONSTRAINT KSSS_PREDPR_R3_VEND_PREDPR_FK 
  FOREIGN KEY (KSSS_PREDPR_ID) 
  REFERENCES MASTER.KSSS_PREDPR (KSSS_PREDPR_ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_CC 
-- 
ALTER TABLE MASTER.R3_CC ADD (
  CONSTRAINT CC_CUSTOMERS_FK 
  FOREIGN KEY (CUSTOMERS_ID) 
  REFERENCES MASTER.R3_CUSTOMERS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_CC ADD (
  CONSTRAINT CC_DOG_FK 
  FOREIGN KEY (DOG_ID) 
  REFERENCES MASTER.KLS_DOG (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_CC ADD (
  CONSTRAINT CC_EKKO_LIFNR_FK 
  FOREIGN KEY (EKKO_LIFNR) 
  REFERENCES MASTER.R3_VENDORS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_CUSTOMERS 
-- 
ALTER TABLE MASTER.R3_CUSTOMERS ADD (
  CONSTRAINT CUSTOMERS_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_CUSTOMERS ADD (
  CONSTRAINT CUSTOMERS_VENDORS_FK 
  FOREIGN KEY (VENDORS_ID) 
  REFERENCES MASTER.R3_VENDORS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_KONV 
-- 
ALTER TABLE MASTER.R3_KONV ADD (
  CONSTRAINT KONV_SC_FK 
  FOREIGN KEY (MATCH_ASNUM) 
  REFERENCES MASTER.R3_SC (ASNUM)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_KVIT2SAP 
-- 
ALTER TABLE MASTER.R3_KVIT2SAP ADD (
  CONSTRAINT KVIT2SAP_LOAD_TYPE_FK 
  FOREIGN KEY (LOAD_TYPE_ID) 
  REFERENCES MASTER.KLS_LOAD_TYPE (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_KVIT2SAP ADD (
  CONSTRAINT KVIT2SAP_MONTH_FK 
  FOREIGN KEY (NOM_ZD) 
  REFERENCES MASTER.MONTH (NOM_ZD)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_KVIT2SAP ADD (
  CONSTRAINT KVIT2SAP_OD_FK 
  FOREIGN KEY (VBAK_VBELN, VBAP_POSNR) 
  REFERENCES MASTER.R3_OD (VBAK_VBELN,VBAP_POSNR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_KVIT2SAP ADD (
  CONSTRAINT KVIT2SAP_PROD_FK 
  FOREIGN KEY (PROD_ID_NPR) 
  REFERENCES MASTER.KLS_PROD (ID_NPR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_KVIT2SAP ADD (
  CONSTRAINT KVIT2SAP_VSTEL_FK 
  FOREIGN KEY (VSTEL) 
  REFERENCES MASTER.R3_VSTEL (VBAP_VSTEL)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_OA 
-- 
ALTER TABLE MASTER.R3_OA ADD (
  CONSTRAINT OA_KONV_FK 
  FOREIGN KEY (KONV_KSCHL) 
  REFERENCES MASTER.R3_KONV (KSCHL)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OA ADD (
  CONSTRAINT OA_OD_FK 
  FOREIGN KEY (VBAK_VBELN, VBAP_POSNR) 
  REFERENCES MASTER.R3_OD (VBAK_VBELN,VBAP_POSNR)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_OD 
-- 
ALTER TABLE MASTER.R3_OD ADD (
  CONSTRAINT OD_BLOCKS_FK 
  FOREIGN KEY (V_TJ30_TXT04) 
  REFERENCES MASTER.R3_BLOCKS (V_TJ30_TXT04)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CONSTRAINT OD_LPRIO_FK 
  FOREIGN KEY (VBAP_LPRIO) 
  REFERENCES MASTER.R3_LPRIO (VBAP_LPRIO)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CONSTRAINT OD_MATERIALS_FK 
  FOREIGN KEY (VBAP_MATNR) 
  REFERENCES MASTER.R3_MATERIALS (VBAP_MATNR)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_OD ADD (
  CONSTRAINT OD_VBAK_FK 
  FOREIGN KEY (VBAK_VBELN) 
  REFERENCES MASTER.R3_VBAK (VBELN)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_SC 
-- 
ALTER TABLE MASTER.R3_SC ADD (
  CONSTRAINT SC_CC_FK 
  FOREIGN KEY (EKKO_ZZ021) 
  REFERENCES MASTER.R3_CC (EKKO_ZZ021)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_VAGOWNER 
-- 
ALTER TABLE MASTER.R3_VAGOWNER ADD (
  CONSTRAINT R3_VAGOWNER_R3_VENDORS_FK 
  FOREIGN KEY (R3_VENDORS_ID) 
  REFERENCES MASTER.R3_VENDORS (ID)
  ENABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_VBAK 
-- 
ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_AUART_FK 
  FOREIGN KEY (VBAK_AUART) 
  REFERENCES MASTER.R3_AUART (VBAK_AUART)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_BLOCKS_FK 
  FOREIGN KEY (V_TJ30_TXT04) 
  REFERENCES MASTER.R3_BLOCKS (V_TJ30_TXT04)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_CC_FK 
  FOREIGN KEY (VBAK_ZZ021) 
  REFERENCES MASTER.R3_CC (EKKO_ZZ021)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_MATERIALS_FK 
  FOREIGN KEY (VBAP_MATNR) 
  REFERENCES MASTER.R3_MATERIALS (VBAP_MATNR)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_NP_OWNER_FK 
  FOREIGN KEY (NP_OWNER) 
  REFERENCES MASTER.R3_VENDORS (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_NP_PRODR_FK 
  FOREIGN KEY (NP_PRODR) 
  REFERENCES MASTER.R3_VENDORS (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_OT_LIFNR_FK 
  FOREIGN KEY (OT_LIFNR) 
  REFERENCES MASTER.R3_VENDORS (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_ROUTES_FK 
  FOREIGN KEY (VBAP_ROUTE) 
  REFERENCES MASTER.R3_ROUTES (ROUTE)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_SH_KUNNR_FK 
  FOREIGN KEY (SH_KUNNR) 
  REFERENCES MASTER.R3_CUSTOMERS (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_TRATY_FK 
  FOREIGN KEY (VBKD_TRATY) 
  REFERENCES MASTER.R3_TRATY (VBKD_TRATY)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_VBPA_KUNNR_FK 
  FOREIGN KEY (VBPA_KUNNR) 
  REFERENCES MASTER.R3_CUSTOMERS (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_VBPA_KUNNR_SP_FK 
  FOREIGN KEY (VBPA_KUNNR_SP) 
  REFERENCES MASTER.R3_CUSTOMERS (ID)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_VSART_FK 
  FOREIGN KEY (VBKD_VSART) 
  REFERENCES MASTER.R3_VSART (VBKD_VSART)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_VSBED_FK 
  FOREIGN KEY (VBAK_VSBED) 
  REFERENCES MASTER.R3_VSBED (VBAK_VSBED)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_VSTEL_FK 
  FOREIGN KEY (VBAP_VSTEL) 
  REFERENCES MASTER.R3_VSTEL (VBAP_VSTEL)
  DISABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VBAK ADD (
  CONSTRAINT VBAK_WERK_LGORT_FK 
  FOREIGN KEY (VBAP_WERKS, LGORT) 
  REFERENCES MASTER.R3_WERKS_LGORT (VBAP_WERKS,LGORT)
  DISABLE NOVALIDATE);


-- 
-- Foreign Key Constraints for Table R3_VENDORS 
-- 
ALTER TABLE MASTER.R3_VENDORS ADD (
  CONSTRAINT VENDORS_CUSTOMERS_FK 
  FOREIGN KEY (CUSTOMERS_ID) 
  REFERENCES MASTER.R3_CUSTOMERS (ID)
  ENABLE NOVALIDATE);

ALTER TABLE MASTER.R3_VENDORS ADD (
  CONSTRAINT VENDORS_PREDPR_FK 
  FOREIGN KEY (PREDPR_ID) 
  REFERENCES MASTER.KLS_PREDPR (ID)
  ENABLE NOVALIDATE);


--
-- UNP_DISPETCHER  (Materialized View) 
--
CREATE MATERIALIZED VIEW MASTER.UNP_DISPETCHER 
TABLESPACE USERS2
NOCOMPRESS
BUILD IMMEDIATE
USING INDEX
            TABLESPACE USERSINDX
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT USERNAME, FAMILIYA, IMYA, OTCHESTVO FROM PASP.DISPETCHER@ORA.LUNP.RU

;


COMMENT ON MATERIALIZED VIEW MASTER.UNP_DISPETCHER IS 'snapshot table for snapshot MASTER.UNP_DISPETCHER';

--
-- UNP_FACT_PASP  (Materialized View) 
--
CREATE MATERIALIZED VIEW MASTER.UNP_FACT_PASP 
TABLESPACE USERS2
NOCOMPRESS
BUILD IMMEDIATE
USING INDEX
            TABLESPACE USERSINDX
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT "FACT_PASP"."ID_FACT_PASP" "ID_FACT_PASP","FACT_PASP"."ID_PASPORT" "ID_PASPORT","FACT_PASP"."KOD_POKAZATEL" "KOD_POKAZATEL","FACT_PASP"."FACT_PASP" "FACT_PASP","FACT_PASP"."TEXT_VAL" "TEXT_VAL","FACT_PASP"."GARANT" "GARANT","FACT_PASP"."PRIMECHANIE" "PRIMECHANIE" FROM "PASP"."FACT_PASP"@ORA.LUNP.RU "FACT_PASP"
;


COMMENT ON MATERIALIZED VIEW MASTER.UNP_FACT_PASP IS 'snapshot table for snapshot MASTER.UNP_FACT_PASP';

--
-- UNP_NORM_PASP  (Materialized View) 
--
CREATE MATERIALIZED VIEW MASTER.UNP_NORM_PASP 
TABLESPACE USERS2
NOCOMPRESS
BUILD IMMEDIATE
USING INDEX
            TABLESPACE USERSINDX
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT "NORM_PASP"."ID_NORM" "ID_NORM","NORM_PASP"."KOD_OIL_PRODUCT" "KOD_OIL_PRODUCT","NORM_PASP"."KOD_POKAZATEL" "KOD_POKAZATEL","NORM_PASP"."UPPER_LIMIT" "UPPER_LIMIT","NORM_PASP"."LOWER_LIMIT" "LOWER_LIMIT","NORM_PASP"."NORM_POKAZATEL" "NORM_POKAZATEL","NORM_PASP"."NOMER_PP" "NOMER_PP","NORM_PASP"."TITLE" "TITLE","NORM_PASP"."NOMER_INSIDE" "NOMER_INSIDE","NORM_PASP"."GARANT" "GARANT" FROM "PASP"."NORM_PASP"@ORA.LUNP.RU "NORM_PASP"
;


COMMENT ON MATERIALIZED VIEW MASTER.UNP_NORM_PASP IS 'snapshot table for snapshot MASTER.UNP_NORM_PASP';

--
-- UNP_PASPORT  (Materialized View) 
--
CREATE MATERIALIZED VIEW MASTER.UNP_PASPORT 
TABLESPACE USERS2
NOCOMPRESS
BUILD IMMEDIATE
USING INDEX
            TABLESPACE USERSINDX
REFRESH FORCE ON DEMAND
WITH ROWID
AS 
SELECT "V_PASPORT_FOR_MASTER"."ID_PASPORT" "ID_PASPORT","V_PASPORT_FOR_MASTER"."NOMER_RESERVUAR" "NOMER_RESERVUAR","V_PASPORT_FOR_MASTER"."KOD_OIL_PRODUCT" "KOD_OIL_PRODUCT","V_PASPORT_FOR_MASTER"."NOMER_PASPORT" "NOMER_PASPORT","V_PASPORT_FOR_MASTER"."DATE_PASPORT" "DATE_PASPORT","V_PASPORT_FOR_MASTER"."DATE_IZGOTOVL" "DATE_IZGOTOVL","V_PASPORT_FOR_MASTER"."NOMER_CISTERN" "NOMER_CISTERN","V_PASPORT_FOR_MASTER"."INSPEKTOR" "INSPEKTOR" FROM "PASP"."V_PASPORT_FOR_MASTER"@ORA.LUNP.RU "V_PASPORT_FOR_MASTER"
;


COMMENT ON MATERIALIZED VIEW MASTER.UNP_PASPORT IS 'snapshot table for snapshot MASTER.UNP_PASPORT';

--
-- UNP_SPRAV_OIL_PRODUCT  (Materialized View) 
--
CREATE MATERIALIZED VIEW MASTER.UNP_SPRAV_OIL_PRODUCT 
TABLESPACE USERS2
NOCOMPRESS
BUILD IMMEDIATE
USING INDEX
            TABLESPACE USERSINDX
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT "SPRAV_OIL_PRODUCT"."KOD_OIL_PRODUCT" "KOD_OIL_PRODUCT","SPRAV_OIL_PRODUCT"."NAME_OIL_PRODUCT" "NAME_OIL_PRODUCT","SPRAV_OIL_PRODUCT"."KOD_SERTIFICAT" "KOD_SERTIFICAT","SPRAV_OIL_PRODUCT"."GOST" "GOST","SPRAV_OIL_PRODUCT"."KOD_KATEGORY" "KOD_KATEGORY","SPRAV_OIL_PRODUCT"."PRIMECHANIE" "PRIMECHANIE","SPRAV_OIL_PRODUCT"."OKP" "OKP","SPRAV_OIL_PRODUCT"."OLD" "OLD","SPRAV_OIL_PRODUCT"."PRIMECHANIE1" "PRIMECHANIE1" FROM "PASP"."SPRAV_OIL_PRODUCT"@ORA.LUNP.RU "SPRAV_OIL_PRODUCT"
;


COMMENT ON MATERIALIZED VIEW MASTER.UNP_SPRAV_OIL_PRODUCT IS 'snapshot table for snapshot MASTER.UNP_SPRAV_OIL_PRODUCT';

--
-- UNP_SPRAV_POKAZATEL  (Materialized View) 
--
CREATE MATERIALIZED VIEW MASTER.UNP_SPRAV_POKAZATEL 
TABLESPACE USERS2
NOCOMPRESS
BUILD IMMEDIATE
USING INDEX
            TABLESPACE USERSINDX
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
select a.*,1 as ttt from pasp.SPRAV_POKAZATEL@ora.lunp.ru a

;


COMMENT ON MATERIALIZED VIEW MASTER.UNP_SPRAV_POKAZATEL IS 'snapshot table for snapshot MASTER.UNP_SPRAV_POKAZATEL';

--
-- UNP_PASPORT  (Refresh Group) 
--
DECLARE
  SnapArray SYS.DBMS_UTILITY.UNCL_ARRAY;
BEGIN
  Begin
    SnapArray(1) := 'MASTER.UNP_DISPETCHER';
    SnapArray(2) := 'MASTER.UNP_FACT_PASP';
    SnapArray(3) := 'MASTER.UNP_SPRAV_POKAZATEL';
    SnapArray(4) := 'MASTER.UNP_PASPORT';
    SnapArray(5) := 'MASTER.UNP_SPRAV_OIL_PRODUCT';
    SnapArray(6) := 'MASTER.UNP_NORM_PASP';
    SnapArray(7) := NULL;
    SYS.DBMS_REFRESH.MAKE (
      name => 'MASTER.UNP_PASPORT'
      ,tab  => SnapArray
      ,next_date => NULL
      ,interval  => NULL
      ,implicit_destroy => TRUE
      ,lax => TRUE
      ,job => 0
      ,rollback_seg => NULL
      ,push_deferred_rpc => TRUE
      ,refresh_after_errors => FALSE
      ,purge_option => 1
      ,parallelism => 0
      ,heap_size => 0
    );
    Commit;
  exception
    when others then
    begin
      raise;
    end;
  end;
END;
/


-- Note: Index I_SNAP$_UNP_PASPORT will be created/dropped automatically by Oracle with the associated materialized view.

--
-- PRIM  (Index) 
--
CREATE UNIQUE INDEX MASTER.PRIM ON MASTER.UNP_DISPETCHER
(USERNAME)
TABLESPACE USERSINDX;

--
-- SYS_C008331  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C008331 ON MASTER.UNP_SPRAV_OIL_PRODUCT
(KOD_OIL_PRODUCT)
TABLESPACE USERSINDX;

--
-- SYS_C008333  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C008333 ON MASTER.UNP_NORM_PASP
(ID_NORM)
TABLESPACE USERSINDX;

--
-- SYS_C008338  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C008338 ON MASTER.UNP_SPRAV_POKAZATEL
(KOD_POKAZATEL)
TABLESPACE USERSINDX;

--
-- SYS_C008340  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C008340 ON MASTER.UNP_FACT_PASP
(ID_FACT_PASP)
TABLESPACE USERSINDX;

--
-- SYS_C008342  (Index) 
--
CREATE UNIQUE INDEX MASTER.SYS_C008342 ON MASTER.UNP_PASPORT
(ID_PASPORT)
TABLESPACE USERSINDX;

--
-- UNP_FACT_PASP_PASPORT_FK_I  (Index) 
--
CREATE INDEX MASTER.UNP_FACT_PASP_PASPORT_FK_I ON MASTER.UNP_FACT_PASP
(ID_PASPORT)
TABLESPACE USERSINDX;

--
-- UNP_NORM_PASP_OIL_FK_I  (Index) 
--
CREATE INDEX MASTER.UNP_NORM_PASP_OIL_FK_I ON MASTER.UNP_NORM_PASP
(KOD_OIL_PRODUCT)
TABLESPACE USERSINDX;

--
-- UNP_PASP_DATE_I  (Index) 
--
CREATE INDEX MASTER.UNP_PASP_DATE_I ON MASTER.UNP_PASPORT
(DATE_PASPORT)
TABLESPACE USERSINDX;

--
-- UNP_PASP_NOMER_I  (Index) 
--
CREATE INDEX MASTER.UNP_PASP_NOMER_I ON MASTER.UNP_PASPORT
(NOMER_PASPORT)
TABLESPACE USERSINDX;

--
-- UNP_PASP_OIL_FK_I  (Index) 
--
CREATE INDEX MASTER.UNP_PASP_OIL_FK_I ON MASTER.UNP_PASPORT
(KOD_OIL_PRODUCT)
TABLESPACE USERSINDX;

--
-- UNP_PASP_RES_I  (Index) 
--
CREATE INDEX MASTER.UNP_PASP_RES_I ON MASTER.UNP_PASPORT
(NOMER_RESERVUAR)
TABLESPACE USERSINDX;

-- 
-- Non Foreign Key Constraints for Table UNP_DISPETCHER 
-- 
ALTER MATERIALIZED VIEW MASTER.UNP_DISPETCHER ADD (
  CONSTRAINT PRIM
  PRIMARY KEY
  (USERNAME)
  USING INDEX MASTER.PRIM
  ENABLE VALIDATE);
-- 
-- Non Foreign Key Constraints for Table UNP_FACT_PASP 
-- 
ALTER MATERIALIZED VIEW MASTER.UNP_FACT_PASP ADD (
  CONSTRAINT SYS_C008340
  PRIMARY KEY
  (ID_FACT_PASP)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);
-- 
-- Non Foreign Key Constraints for Table UNP_NORM_PASP 
-- 
ALTER MATERIALIZED VIEW MASTER.UNP_NORM_PASP ADD (
  CONSTRAINT SYS_C008333
  PRIMARY KEY
  (ID_NORM)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);
-- 
-- Non Foreign Key Constraints for Table UNP_SPRAV_OIL_PRODUCT 
-- 
ALTER MATERIALIZED VIEW MASTER.UNP_SPRAV_OIL_PRODUCT ADD (
  CONSTRAINT SYS_C008331
  PRIMARY KEY
  (KOD_OIL_PRODUCT)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);
-- 
-- Non Foreign Key Constraints for Table UNP_SPRAV_POKAZATEL 
-- 
ALTER MATERIALIZED VIEW MASTER.UNP_SPRAV_POKAZATEL ADD (
  CONSTRAINT SYS_C008338
  PRIMARY KEY
  (KOD_POKAZATEL)
  USING INDEX
    TABLESPACE USERSINDX
  ENABLE VALIDATE);
GRANT SELECT ON MASTER.KLS_MESTO TO ART;

GRANT SELECT ON MASTER.XX101_ZVZAV_DATA TO ART;

GRANT READ, WRITE ON DIRECTORY DATA_PUMP_DIR TO EXP_FULL_DATABASE;

GRANT READ, WRITE ON DIRECTORY DATA_PUMP_DIR TO IMP_FULL_DATABASE;

GRANT REFERENCES ON MASTER.APP_USERS TO MASTER_GD;

GRANT SELECT ON MASTER.MONTH_REE TO MASTER_GD;

GRANT DELETE, INSERT, SELECT, UPDATE ON MASTER.MONTH_VISIR TO MASTER_GD;

GRANT SELECT ON MASTER.V_MONTH_REE TO MASTER_GD;

GRANT SELECT ON MASTER.APP_USERS TO PUBLIC WITH GRANT OPTION;

GRANT EXECUTE ON MASTER.FOR_INIT TO PUBLIC;

GRANT DELETE, INSERT, SELECT, UPDATE ON MASTER.TOAD_PLAN_SQL TO PUBLIC;

GRANT SELECT ON MASTER.KSSS_PROD TO SFDBF;

GRANT READ ON DIRECTORY QUEST_SOO_ADUMP_DIR TO SQLLAB;

GRANT READ ON DIRECTORY QUEST_SOO_BDUMP_DIR TO SQLLAB;

GRANT READ ON DIRECTORY QUEST_SOO_CDUMP_DIR TO SQLLAB;

GRANT READ ON DIRECTORY QUEST_SOO_UDUMP_DIR TO SQLLAB;

GRANT SELECT ON MASTER.KSSS_PROD TO SVETA;

GRANT SELECT ON MASTER.REPORTS TO TEL;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE ON MASTER.TEMPVARI TO TEL;

GRANT SELECT ON MASTER.USER_RIGHTS TO TEL;

GRANT DELETE, INSERT, SELECT, UPDATE ON MASTER.V_TEMPTABLE TO TEL;

GRANT DELETE, INSERT, SELECT, UPDATE ON MASTER.V_TEMPVARI TO TEL;

GRANT EXECUTE ON MASTER.FOR_SESSION TO PUBLIC;

GRANT EXECUTE ON MASTER.FOR_TEMP TO TEL;

GRANT SELECT ON MASTER.KLS_PROD TO ART;

GRANT SELECT ON MASTER.KLS_PROD TO PASP;

GRANT SELECT ON MASTER.KLS_PREDPR TO ART;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH ON MASTER.ORG_STRUCTURE TO AZSBUFFER;

GRANT SELECT ON MASTER.DAYLY_FACT TO PASP;

GRANT SELECT ON MASTER.ARC_REZ TO ART;

GRANT SELECT ON MASTER.MONTH TO ART;

GRANT SELECT ON MASTER.V_MONTH_GD TO MASTER_GD;

GRANT SELECT ON MASTER.KVIT TO ART;

GRANT SELECT ON MASTER.DOP_KVIT TO LOAD_BUFFER WITH GRANT OPTION;

GRANT SELECT ON MASTER.KVIT TO LOAD_BUFFER WITH GRANT OPTION;

GRANT SELECT ON MASTER.V_KVIT_ALL TO LOAD_BUFFER WITH GRANT OPTION;

GRANT EXECUTE, DEBUG ON MASTER.FOR_KVIT TO SFDBF;

GRANT EXECUTE ON MASTER.FOR_REPORTS TO TEL;

--
-- Note: 
-- The following objects may not be sorted properly in the script due to cirular references
--
--  EUL_BQ_DEPS  (Table) 
--  EUL_DOMAINS  (Table) 
--  EUL_EXP_DEPS  (Table) 
--  EUL_EXPRESSIONS  (Table) 
--  EUL_IG_EXP_LINKS  (Table) 
--  EUL_SBO_DSGN_ELEMS  (Table) 
--  EUL_SEGMENTS  (Table) 
--  EUL_SQ_CRRLTNS  (Table) 
--  EUL_SUB_QUERIES  (Table) 
--  EUL_SUM_BITMAPS  (Table) 
--  EUL_SUMO_ITEM_USGS  (Table) 
--  KSSS_PREDPR_R3_CUSTOMERS_DESC  (Table) 
--  KSSS_PREDPR_R3_VENDORS_DESC  (Table) 
--  R3_CC  (Table) 
--  R3_CUSTOMERS  (Table) 
--  R3_KONV  (Table) 
--  R3_KVIT2SAP  (Table) 
--  R3_OA  (Table) 
--  R3_OD  (Table) 
--  R3_SC  (Table) 
--  R3_VAGOWNER  (Table) 
--  R3_VBAK  (Table) 
--  R3_VENDORS  (Table) 
--  CC_CUSTOMERS_FK_I  (Index) 
--  CC_DOG_FK_I  (Index) 
--  CC_PK  (Index) 
--  CC_VENDORS_FK_I  (Index) 
--  CUSTOMERS_PK  (Index) 
--  CUSTOMERS_PREDPR_FK_I  (Index) 
--  CUSTOMERS_VENDORS_FK_I  (Index) 
--  EUL_BFILD_FIL_FK_I  (Index) 
--  EUL_BFUND_FUN_FK_I  (Index) 
--  EUL_BID_IT_FK_I  (Index) 
--  EUL_BQD_BQD1_UK  (Index) 
--  EUL_BQD_BQ_FK_I  (Index) 
--  EUL_BQD_PK  (Index) 
--  EUL_CD_CI_FK_I  (Index) 
--  EUL_CFD_FUN_FK_I  (Index) 
--  EUL_CID_IT_FK_I  (Index) 
--  EUL_CI_IT_FK_I  (Index) 
--  EUL_CO1_I  (Index) 
--  EUL_CPD_PAR_FK_I  (Index) 
--  EUL_DOM_DOM2_UK  (Index) 
--  EUL_DOM_IT_L_FK_I  (Index) 
--  EUL_DOM_IT_R_FK_I  (Index) 
--  EUL_DOM_PK  (Index) 
--  EUL_ED_ED1_UK  (Index) 
--  EUL_ED_PK  (Index) 
--  EUL_EXP_EXP1_UK  (Index) 
--  EUL_EXP_PK  (Index) 
--  EUL_HIL_HN_FK_I  (Index) 
--  EUL_HIL_IT_FK_I  (Index) 
--  EUL_IEL_IEL1_UK  (Index) 
--  EUL_IEL_PK  (Index) 
--  EUL_ITE_DOM_FK_I  (Index) 
--  EUL_ITE_EU_FK_I  (Index) 
--  EUL_ITE_OBJ_FK_I  (Index) 
--  EUL_IT_FUN_FK_I  (Index) 
--  EUL_IT_IT_FK_I  (Index) 
--  EUL_IT_KEY_FK_I  (Index) 
--  EUL_JP_FK_FK_I  (Index) 
--  EUL_KIL_IT_FK_I  (Index) 
--  EUL_KIL_KEY_FK_I  (Index) 
--  EUL_NJP_EU_FK_I  (Index) 
--  EUL_NJP_OBJ_FK_I  (Index) 
--  EUL_OSS_BQ_FK_I  (Index) 
--  EUL_OSS_CUO_FK_I  (Index) 
--  EUL_OSS_EXP_FK_I  (Index) 
--  EUL_OSS_OBJ_FK_I  (Index) 
--  EUL_OSS_OSS2_UK  (Index) 
--  EUL_OSS_PK  (Index) 
--  EUL_OSS_SDO_FK_I  (Index) 
--  EUL_PAR_IT_FK_I  (Index) 
--  EUL_PD_P_FK_I  (Index) 
--  EUL_PED_EXP_FK_I  (Index) 
--  EUL_PFD_FUN_FK_I  (Index) 
--  EUL_PSD_SQ_FK_I  (Index) 
--  EUL_SAIL_IT_FK_I  (Index) 
--  EUL_SB_FK_FK_I  (Index) 
--  EUL_SB_FUN_FK_I  (Index) 
--  EUL_SB_IT_FK_I  (Index) 
--  EUL_SB_PK  (Index) 
--  EUL_SB_SB2_UK  (Index) 
--  EUL_SDE_PK  (Index) 
--  EUL_SDE_SBO_FK_I  (Index) 
--  EUL_SDE_SDE1_UK  (Index) 
--  EUL_SIU_IT_FK_I  (Index) 
--  EUL_SIU_PK  (Index) 
--  EUL_SIU_SIU1_UK  (Index) 
--  EUL_SIU_SUMO_FK_I  (Index) 
--  EUL_SMIL_FUN_FK_I  (Index) 
--  EUL_SMIL_IT_FK_I  (Index) 
--  EUL_SMIU_FUN_FK_I  (Index) 
--  EUL_SQC_IT_I_FK_I  (Index) 
--  EUL_SQC_IT_O_FK_I  (Index) 
--  EUL_SQC_PK  (Index) 
--  EUL_SQC_SQC2_UK  (Index) 
--  EUL_SQC_SQ_FK_I  (Index) 
--  EUL_SQ_FIL_FK_I  (Index) 
--  EUL_SQ_IT_FK_I  (Index) 
--  EUL_SQ_OBJ_FK_I  (Index) 
--  EUL_SQ_PK  (Index) 
--  KONV_PK  (Index) 
--  KONV_SC_FK_I  (Index) 
--  KSSS_PREDPR_R3_CUST_DESC_PK  (Index) 
--  KSSS_PREDPR_R3_VENDORS_DESC_PK  (Index) 
--  KVIT2SAP_LOAD_TYPE_FK_I  (Index) 
--  KVIT2SAP_MONTH_FK_I  (Index) 
--  KVIT2SAP_OD_FK_I  (Index) 
--  KVIT2SAP_PK  (Index) 
--  KVIT2SAP_PROD_FK_I  (Index) 
--  KVIT2SAP_VSTEL_FK_I  (Index) 
--  OA_KONV_FK_I  (Index) 
--  OA_OD_FK_I  (Index) 
--  OA_PK  (Index) 
--  OD_BLOCKS_FK_I  (Index) 
--  OD_LPRIO_FK_I  (Index) 
--  OD_MATERIALS_FK_I  (Index) 
--  OD_PK  (Index) 
--  OD_R3_OD_AK_UK  (Index) 
--  OD_VBAK_FK_I  (Index) 
--  PK_R3_VAGOWNER  (Index) 
--  R3_CC_ZZZZ_DATE_I  (Index) 
--  R3_CUSTOMERS_ZZZZ_DATE_I  (Index) 
--  R3_KVIT2SAP_KVIT_ID_I  (Index) 
--  R3_OA_ZZZZ_DATE_I  (Index) 
--  R3_OD_ZZZZ_DATE_I  (Index) 
--  R3_VENDORS_ZZZZ_DATE_I  (Index) 
--  SC_CC_FK_I  (Index) 
--  SC_PK  (Index) 
--  VBAK_AUART_FK_I  (Index) 
--  VBAK_BLOCKS_FK_I  (Index) 
--  VBAK_CC_FK_I  (Index) 
--  VBAK_MATERIALS_FK_I  (Index) 
--  VBAK_MONTH_FK_I  (Index) 
--  VBAK_NP_OWNER_FK_I  (Index) 
--  VBAK_NP_PRODR_FK_I  (Index) 
--  VBAK_OT_LIFNR_FK_I  (Index) 
--  VBAK_PK  (Index) 
--  VBAK_ROUTES_FK_I  (Index) 
--  VBAK_SH_KUNNR_FK_I  (Index) 
--  VBAK_TRATY_FK_I  (Index) 
--  VBAK_VBPA_KUNNR_FK_I  (Index) 
--  VBAK_VBPA_KUNNR_SP_FK_I  (Index) 
--  VBAK_VSART_FK_I  (Index) 
--  VBAK_VSBED_FK_I  (Index) 
--  VBAK_VSTEL_FK_I  (Index) 
--  VBAK_WERK_LGORT_FK_I  (Index) 
--  VBAK_ZZZZ_DATE_I  (Index) 
--  VENDORS_CUSTOMERS_FK_I  (Index) 
--  VENDORS_PK  (Index) 
--  VENDORS_PREDPR_FK_I  (Index) 
--  FOR_R3  (Package) 
--  FOR_R3  (Package Body) 
--  EUL_GET_OBJECT_NAME  (Function) 
--  V_NEW_MONTH_MONTH  (View) 
--  V_NEW_MONTH_R3_VBAK  (View) 
--  V_R3_YFRT  (View) 
--  V_VBAK_LAST_POSNR  (View)