--
-- TRG_BIUDR_REESTR  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_REESTR
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.REESTR
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID NUMBER;
 vOTHER_SVED_NUM SVED.SVED_NUM%TYPE;
 vSVED_DATE SVED.SVED_DATE%TYPE;
BEGIN
  -- Считываем значения из других таблиц
  BEGIN
	SELECT LOAD_TYPE_ID,SVED_DATE INTO vLOAD_TYPE_ID,vSVED_DATE
	  FROM SVED
	 WHERE ID=:NEW.SVED_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
	  vSVED_DATE:=NULL;
  END;

  -- Корректируем значения полей
  IF INSERTING() OR (UPDATING('CAPACITY') AND :NEW.CAPACITY||' '<>:OLD.CAPACITY||' ') THEN
	BEGIN
      :NEW.CAPACITY:=ORA_NUM_TO_CHAR(ora_char_to_num(:NEW.CAPACITY,'999.999'));
	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Неверное значение грузоподъемности!');
	END;
  END IF;

  IF INSERTING() OR UPDATING('VES_CIST') THEN
    :NEW.VES_CIST:=NVL(:NEW.VES_CIST,0);
  END IF;

  IF UPDATING('NUM_CIST') AND :NEW.NUM_CIST||' '<>:OLD.NUM_CIST||' ' AND :NEW.VED_POD_ROW_ID IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер вагона в сведении! Вагон '||:OLD.NUM_CIST||' связан с ведомостью подачи!');
  END IF;
  
  IF INSERTING() OR (UPDATING('NUM_CIST') AND :NEW.NUM_CIST||' '<>:OLD.NUM_CIST||' ') THEN
    IF FOR_CIST.CHECK_NUM_CIST(:NEW.NUM_CIST, vLOAD_TYPE_ID, NVL(:NEW.VAGONTYPE_ID,0))=0 THEN
      :NEW.BAD_NUM:=1;
	ELSE
	  :NEW.BAD_NUM:=0;
	END IF;
	vOTHER_SVED_NUM:=FOR_SVED.CHECK_UNIQ(vLOAD_TYPE_ID,:NEW.NUM_CIST,:NEW.ID,vSVED_DATE);
	IF NVL(vOTHER_SVED_NUM,0)<>0 THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Вагон '||:NEW.NUM_CIST||' уже есть в сведении N '||TO_CHAR(vOTHER_SVED_NUM));
	END IF;
  END IF;

  IF INSERTING() OR (UPDATING('KALIBR_ID') AND :NEW.KALIBR_ID||' '<>:OLD.KALIBR_ID||' ') THEN
    :NEW.KALIBR_ID:=NLS_UPPER(:NEW.KALIBR_ID);
	IF :NEW.KALIBR_ID='25A' THEN
	  :NEW.KALIBR_ID:='25А';
	END IF;
  END IF;	

  IF INSERTING() OR (UPDATING('VAGONTYPE_ID') AND NVL(:NEW.VAGONTYPE_ID,0)<>NVL(:OLD.VAGONTYPE_ID,0)) THEN
	IF NVL(:NEW.VAGONTYPE_ID,0) IN (1,2,5,9) THEN
	  :NEW.KALIBR_ID:=FOR_CIST.GET_KALIBR_BY_VAGONTYPE(vLOAD_TYPE_ID, NVL(:NEW.VAGONTYPE_ID,0));
	END IF;
  END IF;

  IF INSERTING() OR 
     (UPDATING('KALIBR_ID') AND :NEW.KALIBR_ID||' '<>:OLD.KALIBR_ID||' ') OR 
	 (UPDATING('VZLIV') AND NVL(:NEW.VZLIV,0)<>NVL(:OLD.VZLIV,0)) THEN
    :NEW.VOLUME:=FOR_CIST.GET_VOLUME(:NEW.KALIBR_ID, NVL(:NEW.VZLIV,0), vLOAD_TYPE_ID, NVL(:NEW.VAGONTYPE_ID,0));
  END IF;

  IF INSERTING() OR UPDATING('AXES') THEN
    IF vLOAD_TYPE_ID=1 AND NVL(:NEW.AXES,0) NOT IN (4,8) THEN
	  :NEW.AXES:=4;
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('VES') THEN
    IF vLOAD_TYPE_ID=1 AND NVL(:NEW.VES,0)>0 AND NVL(:NEW.VES,0)<100 THEN
	  :NEW.AXES:=4;
	END IF;
    IF vLOAD_TYPE_ID=1 AND NVL(:NEW.VES,0)>0 AND NVL(:NEW.VES,0)>=100 THEN
	  :NEW.AXES:=8;
	END IF;
	IF NVL(:NEW.VES,0)=0 THEN
	  :NEW.KOL_NET:=0;
	END IF;  
  END IF;
  
  IF INSERTING() OR UPDATING('ZPU_TYPE1') THEN
    :NEW.ZPU_TYPE1:=NVL(:NEW.ZPU_TYPE1,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE1',FOR_INIT.GetCurrUser));
  END IF;
  IF INSERTING() OR UPDATING('ZPU_TYPE2') THEN
--    IF :NEW.AXES>4 THEN
      :NEW.ZPU_TYPE2:=NVL(:NEW.ZPU_TYPE2,FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','ZPU_TYPE2',FOR_INIT.GetCurrUser));
--	END IF;
  END IF;

  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;

	-- Изменение адреса
    IF NVL(:NEW.NAR_LINE_ID,0)<>NVL(:OLD.NAR_LINE_ID,0) THEN
      IF NVL(:NEW.NAR_LINE_ID,0)<>0 AND NVL(:NEW.VAG_STATUS_ID,0)<>0 THEN
	    -- Попытка адресации бракованного вагона
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя присвоить Разрешение (адрес) бракованному вагону!');
	  END IF;
	 
	  IF NVL(:NEW.NAR_LINE_ID,0)=0 AND NVL(:NEW.NAKL_ID,0)<>0 THEN
	    -- попытка снять адрес с вагона в накладной
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя отменить Разрешение (адрес) с вагона в Накладной!');
	  END IF;
	END IF;

	-- Изменение накладной
    IF NVL(:NEW.NAKL_ID,0)<>NVL(:OLD.NAKL_ID,0) THEN
	  IF NVL(:NEW.NAKL_ID,0)=0 AND NVL(:NEW.UVED_ID,0)<>0 THEN
	    -- попытка снять адрес с вагона в накладной
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изъять отгрузку из Накладной, если она включена в Уведомление!');
	  END IF;
    END IF;
		
    -- Проверка статуса вагона
    IF UPDATING('VAG_STATUS_ID') AND NVL(:NEW.VAG_STATUS_ID,0)<>NVL(:OLD.VAG_STATUS_ID,0) THEN
	  IF NVL(:NEW.NAKL_ID,0)<>0 THEN
        RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя сменить статус отгрузки ' || :NEW.NUM_CIST || ' - она уже входит в накладную!');
      END IF;
      IF NVL(:NEW.VAG_STATUS_ID,0)<>0 THEN
  	    :NEW.NAR_LINE_ID:=NULL;
		:NEW.VES:=0;
		:NEW.KOL_NET:=0;
	  END IF;
	END IF;

  END IF;
END;
/


