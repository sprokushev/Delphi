--
-- TRG_BIUDR_VED_OSMOTR_ROW  (Trigger) 
--
CREATE OR REPLACE TRIGGER MASTER.TRG_BIUDR_VED_OSMOTR_ROW
BEFORE INSERT OR DELETE OR UPDATE
ON MASTER.VED_OSMOTR_ROW
FOR EACH ROW
DECLARE
 vLOAD_TYPE_ID VED_OSMOTR.LOAD_TYPE_ID%TYPE;
 vVED_POD_ROW_ID VED_POD_ROW.ID%TYPE;
 vVED_POD_NUM VED_POD.POD_NUM%TYPE;
 vOTHER_VED_NUM VED_OSMOTR.VED_NUM%TYPE;
 vVED_DATE VED_OSMOTR.VED_DATE%TYPE;
BEGIN
  -- Считываем значения из других таблиц
  BEGIN
	SELECT LOAD_TYPE_ID,VED_DATE INTO vLOAD_TYPE_ID,vVED_DATE
	  FROM VED_OSMOTR
	 WHERE ID=:NEW.VED_ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vLOAD_TYPE_ID:=NULL;
	  vVED_DATE:=NULL;
  END;

  BEGIN
	SELECT b.ID, a.POD_NUM INTO vVED_POD_ROW_ID, vVED_POD_NUM
	  FROM VED_POD_ROW b, VED_POD a
	 WHERE b.VED_POD_ID=a.ID AND b.VED_OSMOTR_ROW_ID=:NEW.ID;
  EXCEPTION
    WHEN OTHERS THEN
	  vVED_POD_ROW_ID:=NULL;
	  vVED_POD_NUM:=NULL;
  END;

  -- Корректируем значения полей
  IF INSERTING() OR UPDATING('CAPACITY') THEN
	BEGIN
      :NEW.CAPACITY:=ORA_NUM_TO_CHAR(ora_char_to_num(:NEW.CAPACITY,'999.999'));
	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Неверное значение грузоподъемности!');
	END;
  END IF;

  IF UPDATING('NUM_CIST') AND vVED_POD_ROW_ID IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Нельзя изменить номер вагона в ведомости осмотра! Вагон '||:OLD.NUM_CIST||' уже включен в ведомость подачи N '||TO_CHAR(vVED_POD_NUM));
  END IF;

  IF INSERTING() OR UPDATING('VES_CIST') THEN
    :NEW.VES_CIST:=NVL(:NEW.VES_CIST,0);
  END IF;

  IF INSERTING() OR UPDATING('NUM_CIST') THEN
    IF FOR_CIST.CHECK_NUM_CIST(:NEW.NUM_CIST, vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID)=0 THEN
      :NEW.BAD_NUM:=1;
	ELSE
	  :NEW.BAD_NUM:=0;
	END IF;
	vOTHER_VED_NUM:=FOR_VED_OSMOTR.CHECK_UNIQ(vLOAD_TYPE_ID,:NEW.NUM_CIST,:NEW.ID,vVED_DATE);
	IF vOTHER_VED_NUM||' '<>' ' THEN
      RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, 'Вагон '||:NEW.NUM_CIST||' уже есть в ведомости осмотра N '||TO_CHAR(vOTHER_VED_NUM));
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('KALIBR_ID') OR UPDATING('VAGONTYPE_ID') THEN
    :NEW.KALIBR_ID:=NLS_UPPER(:NEW.KALIBR_ID);
	IF :NEW.KALIBR_ID='25A' THEN
	  :NEW.KALIBR_ID:='25А';
	END IF;
	IF :NEW.VAGONTYPE_ID IN (1,2,5,9) THEN
	  :NEW.KALIBR_ID:=FOR_CIST.GET_KALIBR_BY_VAGONTYPE(vLOAD_TYPE_ID, :NEW.VAGONTYPE_ID);
	END IF;
  END IF;

  IF INSERTING() OR UPDATING('AXES') THEN
    IF vLOAD_TYPE_ID=1 AND :NEW.AXES NOT IN (4,8) THEN
	  :NEW.AXES:=4;
	END IF;
  END IF;
 
  IF INSERTING() OR UPDATING() THEN
    -- Уникальный ID
    IF :new.ID=0 OR :new.ID IS NULL THEN
      SELECT SEQ_ID.nextval INTO :new.ID FROM DUAL;
    END IF;
  END IF;

END;
/


