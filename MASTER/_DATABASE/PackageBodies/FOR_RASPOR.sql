--
-- FOR_RASPOR  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_RASPOR AS

  /* РАЗРЕШЕНИЕ на отгрузку */

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR WHERE NAR_LINE_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Позицию разрешения нельзя удалить - есть отгрузка!');
	END IF;

    DELETE FROM KLS_NAR_LINE WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM KLS_NAR_LINE WHERE NARIAD_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Разрешение нельзя удалить - есть позиции!');
	END IF;

    DELETE FROM KLS_NARIAD WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Заполнить временную таблицу TEMP_NAR_LINE */
  PROCEDURE FILL_TEMPNL (pNARIAD_ID NUMBER, pDATE_BEG DATE, pDATE_END DATE, pLOAD_TYPE_ID NUMBER) AS
  BEGIN
    DELETE FROM TEMP_NAR_LINE;

	INSERT INTO TEMP_NAR_LINE (NOM_ZD,KOL,VES,FACT_KOL,FACT_VES,TONN_REE)
    SELECT /*+ RULE */
      NOM_ZD,
      SUM(KOL) as KOL,
      SUM(VES) as VES,
      SUM(FACT_KOL) as FACT_KOL,
      SUM(FACT_VES) as FACT_VES,
	  SUM(TONN_REE) as TONN_REE
    FROM
    (
	  SELECT
	    b.NOM_ZD,
   	    0 as KOL,
	    0 as VES,
	    0 as FACT_KOL,
	    0 as FACT_VES,
  	    SUM(b.TONN_REE) as TONN_REE
	  FROM MONTH_REESTR a, MONTH_REESTR_POS b
	  WHERE a.ID=b.MONTH_REESTR_ID
	    AND a.DATE_REE BETWEEN pDATE_BEG AND pDATE_END
	    AND b.PRIORITY>=0
	  GROUP BY b.NOM_ZD
	  UNION ALL
	  SELECT
	    b.NOM_ZD,
   	    SUM(b.KOL) as KOL,
	    SUM(b.VES) as VES,
	    SUM(b.FACT_KOL) as FACT_KOL,
	    SUM(b.FACT_VES) as FACT_VES,
	    0 as TONN_REE
       FROM KLS_NAR_LINE b, KLS_NARIAD a
	   WHERE a.ID=b.NARIAD_ID
	     AND b.NARIAD_ID=pNARIAD_ID
	   GROUP BY b.NOM_ZD
    )
    GROUP BY NOM_ZD;

	UPDATE TEMP_NAR_LINE a SET (MON_KOL,MON_VES,MON_FACT_KOL,MON_FACT_VES,STAN_NAME,PROD_NAME,POLUCH_NAME,NORMOTGR,LOAD_TYPE_ID)=
	(SELECT MONTH.CIST_RAZNAR, MONTH.TONN_RAZNAR, MONTH.CIST_FACT, MONTH.TONN_FACT, KLS_STAN.STAN_NAME,
            KLS_PROD.ABBR_NPR, KLS_PREDPR.SHORT_NAME, NVL(KLS_PROD.NORMOTGR,0),KLS_VID_OTGR.LOAD_TYPE_ID
	   FROM MONTH, KLS_STAN, KLS_PROD, KLS_PREDPR, KLS_VID_OTGR
	  WHERE MONTH.NOM_ZD=a.NOM_ZD
	    AND MONTH.STAN_ID=KLS_STAN.ID
		AND MONTH.PROD_ID_NPR=KLS_PROD.ID_NPR
		AND MONTH.POLUCH_ID=KLS_PREDPR.ID
		AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR)
	WHERE EXISTS
	(SELECT NULL FROM MONTH WHERE MONTH.NOM_ZD=a.NOM_ZD);
	
	DELETE FROM TEMP_NAR_LINE WHERE LOAD_TYPE_ID<>pLOAD_TYPE_ID;
  END;

  /* Перенести значения из TEMP_NAR_LINE в KLS_NAR_LINE */
  PROCEDURE SAVE_TEMPNL (pNARIAD_ID NUMBER) AS
  BEGIN
    IF NVL(pNARIAD_ID,0)<>0 THEN
	  FOR lcur IN (SELECT * FROM TEMP_NAR_LINE) LOOP
	    IF lcur.KOL>0 OR lcur.VES>0 THEN
		  -- Добавим позицию
          UPDATE KLS_NAR_LINE SET VES=lcur.VES, KOL=lcur.KOL
		  WHERE NARIAD_ID=pNARIAD_ID AND NOM_ZD=lcur.NOM_ZD;
          IF SQL%NOTFOUND THEN
		    INSERT INTO KLS_NAR_LINE (NARIAD_ID,NOM_ZD,KOL,VES)
			 VALUES (pNARIAD_ID,lcur.NOM_ZD,lcur.KOL,lcur.VES);
		  END IF;
		ELSE
		  -- Удалить позицию
		  BEGIN
            DELETE FROM  KLS_NAR_LINE WHERE NARIAD_ID=pNARIAD_ID AND NOM_ZD=lcur.NOM_ZD;
		  EXCEPTION
		    WHEN OTHERS THEN
              UPDATE KLS_NAR_LINE SET VES=0, KOL=0
		      WHERE NARIAD_ID=pNARIAD_ID AND NOM_ZD=lcur.NOM_ZD;
		  END;
		END IF;
	  END LOOP;
	END IF;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID NUMBER, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER,
       pNUM_NAR NUMBER, pDATE_NAR DATE,
	   pDATE_BEG DATE, pDATE_END DATE, pDOVER_ID NUMBER DEFAULT NULL)
    RETURN VARCHAR2 AS

	vID KLS_NARIAD.ID%TYPE;
	vADD NUMBER(1);
	vTmp NUMBER;
  BEGIN

    -- ID
	IF NVL(pID,0)=0 THEN
	  vADD:=1;
      SELECT SEQ_NARIAD.nextval INTO vID FROM DUAL;
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ 1
        INTO vTmp
	 	FROM KLS_NARIAD
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Разрешение на отгрузку нельзя отредактировать - оно удалено!');
		END IF;
	END;

	-- Обновляем документ
	UPDATE KLS_NARIAD SET (NUM_NAR, DATE_NAR, DATE_BEG, DATE_END, MESTO_ID, LOAD_TYPE_ID,DOVER_ID)=
	  (SELECT pNUM_NAR, pDATE_NAR, pDATE_BEG, pDATE_END, pMESTO_ID, pLOAD_TYPE_ID, pDOVER_ID FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем документ
      INSERT INTO KLS_NARIAD (ID,NUM_NAR, DATE_NAR, DATE_BEG, DATE_END, MESTO_ID, LOAD_TYPE_ID,DOVER_ID)
	  VALUES (vID, pNUM_NAR, pDATE_NAR, pDATE_BEG, pDATE_END, pMESTO_ID, pLOAD_TYPE_ID, pDOVER_ID);
	END IF;

	-- Сохранение показателей паспорта в сведении
	SAVE_TEMPNL(vID);

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;

  /* Определить дату начала действия распоряжения */
  FUNCTION GetDATE_BEG (pDATE DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN DATE AS
	vRES DATE;
  BEGIN
    IF pLOAD_TYPE_ID<>1 THEN
	  RETURN TRUNC(pDATE,'MONTH');
	END IF;
    BEGIN
      SELECT
	    MAX(a.DATE_REE) INTO vRES
      FROM MONTH_REESTR a, MONTH_REESTR_POS b
	  WHERE a.ID=b.MONTH_REESTR_ID;
    EXCEPTION
	  WHEN OTHERS THEN
	    vRES:=pDATE;
	END;
	IF vRES IS NULL THEN
	  vRES:=pDATE;
	END IF;
    RETURN vRES;
  END;


  /* Определить дату окончания действия распоряжения */
  FUNCTION GetDATE_END (pDATE_BEG DATE, pMESTO_ID NUMBER, pLOAD_TYPE_ID NUMBER) RETURN DATE AS
    vS VARCHAR2(100);
	vDN NUMBER;
	vRES DATE;
  BEGIN
    BEGIN
      IF pLOAD_TYPE_ID=1 THEN
	    vS:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','RASPOR_AGE#1',FOR_INIT.GetCurrUser);
	  ELSE
	    vS:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','RASPOR_AGE#2',FOR_INIT.GetCurrUser);
	  END IF;
	  IF vS='END_MONTH' THEN
	    RETURN LAST_DAY(pDATE_BEG);
	  ELSE
	    vDN:=TO_NUMBER(vS);
	  END IF;
	EXCEPTION
	  WHEN OTHERS THEN
  	    vDN:=1;
	END;
	IF vDN<=0 THEN
	  vDN:=1;
	END IF;
    BEGIN
	  select max(value) into vRES
	  from (select value from kls_dates a where is_work=1 and value>=pDATE_BEG order by value) where rownum<=vDN;
	EXCEPTION
	  WHEN OTHERS THEN
	    vRES:=pDATE_BEG+vDN-1;
	END;
    RETURN vRES;
  END;

END;

/

