--
-- FOR_REPORTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_REPORTS AS

-- Определить номер отчета
FUNCTION GetNumRep (pREP_ID NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pIS_CRT NUMBER DEFAULT 0) RETURN NUMBER AS
  vNUM_REP NUMBER;
BEGIN
  BEGIN
    SELECT NUM_REP INTO vNUM_REP
	  FROM REPORTS_NUM_REP
	 WHERE rep_id=pREP_ID
	   AND BEGIN_DATE=pBEGIN_DATE
	   AND END_DATE=pEND_DATE
	   AND IS_CRT=pIS_CRT;
  EXCEPTION
    WHEN OTHERS THEN
	  -- Отчет за данный период не формировался
      SELECT NVL(MAX(NUM_REP),0) INTO vNUM_REP
	    FROM REPORTS_NUM_REP
	   WHERE rep_id=pREP_ID
	     AND BEGIN_DATE>=DECODE(pREP_ID,146,TRUNC(pBEGIN_DATE,'MONTH'),TRUNC(pBEGIN_DATE,'YEAR'))
		 AND END_DATE<=pEND_DATE;
	  vNUM_REP:=vNUM_REP+1;
  END;
  RETURN vNUM_REP;	  	 
END;

-- Сохранить номер отчета
PROCEDURE SetNumRep (pREP_ID NUMBER, pBEGIN_DATE DATE, pEND_DATE DATE, pIS_CRT NUMBER DEFAULT 0, pNum_Rep NUMBER DEFAULT 0) AS
BEGIN
  UPDATE REPORTS_NUM_REP SET NUM_REP=pNum_Rep
   WHERE REP_ID=pRep_ID AND BEGIN_DATE=pBEGIN_DATE
     AND END_DATE=pEND_DATE AND IS_CRT=pIS_CRT;
  IF SQL%NOTFOUND THEN
    INSERT INTO REPORTS_NUM_REP (REP_ID,BEGIN_DATE,END_DATE,IS_CRT,NUM_REP)
	VALUES (pREP_ID,pBEGIN_DATE,pEND_DATE,pIS_CRT,pNUM_REP);
  END IF;
  COMMIT;		   
END;

-- Заполнить Отчет о реализации
PROCEDURE FILL_REALIZ (pBEGIN_DATE VARCHAR2, pEND_DATE VARCHAR2, pIS_CRT NUMBER) AS
  vBEGIN_DATE DATE;
  vEND_DATE DATE;
BEGIN
  vBEGIN_DATE:=TO_DATE(pBEGIN_DATE,'dd.mm.yyyy');
  vEND_DATE:=TO_DATE(pEND_DATE,'dd.mm.yyyy');
  
  -- Очистить предыдущий
  DELETE FROM REPORTS_REALIZ WHERE BEGIN_DATE=vBEGIN_DATE AND END_DATE=vEND_DATE AND IS_CRT=pIS_CRT;
  
  -- Заполнить новый
  INSERT INTO REPORTS_REALIZ (BEGIN_DATE, END_DATE, IS_CRT, NUM_REP, INN_SRC, SRC, REP_ROW, REP_CRT, 
    KVIT_NUM, KV_DATA, CNTR, INN_CNTR, DOG_NUM, DOG_ID, PLT_NUM, PLT_DATA, PROT_NUM, TOVAR, TOVAR_ID, 
    PACK, PACK_ID, TOV_SRC, TOV_CLS, WEGHT, CLR_PRC, NDS, AKCIZ, FULL_PRC, CLR_CST, FULL_CST, INN_RES, 
    RES, STANTION, REG_ID, REG, USERCREATE, DATECREATE, BILL_ID, INCO1_ID, INCO1, INCO2_ID, INCO2)
  SELECT BEGIN_DATE, END_DATE, IS_CRT, NUM_REP, INN_SRC, SRC, rownum, REP_CRT, 
    KVIT_NUM, KV_DATA, CNTR, INN_CNTR, DOG_NUM, DOG_ID, PLT_NUM, PLT_DATA, PROT_NUM, TOVAR, TOVAR_ID, 
    PACK, PACK_ID, TOV_SRC, TOV_CLS, WEGHT, CLR_PRC, NDS, AKCIZ, FULL_PRC, CLR_CST, FULL_CST, INN_RES, 
    RES, STANTION, REG_ID, REG, USERCREATE, DATECREATE, BILL_ID, INCO1_ID, INCO1, INCO2_ID, INCO2
  FROM ( 	 
  SELECT 
    vBEGIN_DATE as BEGIN_DATE,
	vEND_DATE as END_DATE,
	pIS_CRT as IS_CRT,  
    0 as NUM_REP,
    MAX(TO_NUMBER(NVL(POST.INN,'0'))) as INN_SRC,
    MAX(POST.SF_NAME) as SRC,
    0 as REP_ROW,
    MAX(NVL((SELECT NUM_REP FROM REPORTS_REALIZ 
            WHERE END_DATE<vBEGIN_DATE
	          AND IS_CRT=0
		      AND BILL_ID=a.BILL_ID
		      AND NUM_KVIT=NVL(a.NUM_KVIT,0)
		      AND TOV_SRC=(a.OWNERSHIP_ID-1)),0)) as REP_CRT,
    NVL(DECODE(b.PROD_ID_NPR,'10080',a.NUM_AKT,a.NUM_KVIT),0) as KVIT_NUM,
    b.DATE_KVIT as KV_DATA,
    MAX(PLAT.SF_NAME) as CNTR,
    MAX(TO_NUMBER(NVL(PLAT.INN,'0'))) as INN_CNTR,
    MAX(d.DOG_NUMBER) as DOG_NUM,
    MAX(d.ID) as DOG_ID,
    b.NOM_SF as PLT_NUM,
    MAX(b.DATE_VYP_SF) as PLT_DATA,
    MAX(NVL(b.PROTO_NUM,a.PROTO_NUM)) as PROT_NUM,
    KLS_PROD.SF_NAME as TOVAR,
    MAX(TO_NUMBER(KLS_PROD.ID_NPR)) as TOVAR_ID,
    '' as pack,
    0 as PACK_ID,
    MAX(a.OWNERSHIP_ID-1) as TOV_SRC,
    0 as TOV_CLS,
    SUM(a.VES) as WEGHT,
    MAX(NVL(a.CENA,0)) as CLR_PRC,
    MAX(ROUND(NVL(a.CENA,0)*FOR_BILLS.GetNDSValue(b.date_kvit)/100,2)) as NDS,
	MAX(CASE
	   WHEN b.NO_AKCIZ=0 OR (b.PROD_ID_NPR='10080' AND a.NO_AKCIZ=0) THEN 0
	   ELSE (NVL((SELECT VALUE FROM KLS_PROD_AKCIZ WHERE b.DATE_KVIT BETWEEN FROM_DATE AND TO_DATE AND PROD_GROUPS_ID=grp.PROD_GROUPS_ID),0))
	 END) as AKCIZ,
    MAX(NVL(a.CENA,0)+ROUND(NVL(a.CENA,0)*FOR_BILLS.GetNDSValue(b.date_kvit)/100,2)) as FULL_PRC,
    SUM(NVL(A.SUM_PROD,0)) AS CLR_CST,
    SUM(NVL(A.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0)) AS FULL_CST,
    MAX(TO_NUMBER(NVL(poluch.INN,0))) as INN_RES,
    MAX(poluch.SF_NAME) as RES,
    MAX(KLS_STAN.STAN_NAME) as STANTION,
    MAX(NVL(KLS_REGION.ID,0)) as REG_ID,
    MAX(kls_region.REGION_NAME) as REG,
	SUBSTR(FOR_INIT.GetCurrUser,1,30) as USERCREATE,
	SYSDATE as DATECREATE,
    a.BILL_ID,
	MAX(NVL(stan_per.ID,2250)) as INCO1_ID, -- по умолчанию Ветласян
	MAX((CASE WHEN stan_per.stan_kod>=10000 THEN 'СТАНЦИЯ ' ELSE '' END) || stan_per.STAN_NAME) as INCO1,
	MAX(NVL(inco.ID,1)) as INCO2_ID, -- по умолчанию FCA
	MAX(inco.NAME) as INCO2 
  FROM BILLS b,V_KVIT_DATE_VIR_ALL A, KLS_DOG d, KLS_PREDPR plat, KLS_PREDPR post, KLS_PROD, MONTH m, KLS_PREDPR poluch,KLS_STAN,kls_region,
       (SELECT PROD_ID_NPR,PROD_GROUPS_ID FROM KLS_PROD_GROUPS_DESC WHERE PROD_TYPE_GRP_ID=6) grp,
	   KLS_STAN stan_per, KLS_INCOTERM inco 
  WHERE B.DATE_MOS BETWEEN vBEGIN_DATE AND vEND_DATE
    AND B.DATE_KVIT <= (CASE WHEN pIS_CRT=1 THEN vBEGIN_DATE-1 ELSE vEND_DATE END)
    AND B.DATE_KVIT >= (CASE WHEN pIS_CRT=1 THEN TO_DATE('01.01.2005','dd.mm.yyyy') ELSE vBEGIN_DATE END)
    AND b.nom_dok=a.bill_id
    AND b.OWNER_ID=post.ID
    AND b.DOG_ID=d.ID
    AND d.PREDPR_ID=plat.ID
    AND a.PROD_ID_NPR=KLS_PROD.ID_NPR
    AND KLS_PROD.ID_NPR=grp.PROD_ID_NPR(+)
    AND a.nom_zd=m.nom_zd
    AND m.poluch_id=poluch.ID(+)
    AND m.STAN_ID=kls_stan.ID
    AND kls_stan.REGION_ID=kls_region.id(+)
	AND m.STAN_PER_ID=stan_per.ID(+)
	AND m.INCOTERM_ID=inco.ID(+)
  GROUP BY
    (a.OWNERSHIP_ID-1),
	a.BILL_ID,
    KLS_PROD.SF_NAME,
	b.NOM_SF,
	b.DATE_KVIT,
    NVL(DECODE(b.PROD_ID_NPR,'10080',a.NUM_AKT,a.NUM_KVIT),0)
  HAVING SUM(NVL(A.SUM_PROD_NDS,0)+NVL(a.SUM_PROD,0))<>0	
  ORDER BY TOV_SRC,PLT_NUM,BILL_ID,KV_DATA,KVIT_NUM,TOVAR_ID	
  );
   				   
  
  COMMIT;
END;    


END; 
/

