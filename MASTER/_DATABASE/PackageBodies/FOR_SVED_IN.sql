--
-- FOR_SVED_IN  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.FOR_SVED_IN AS

  /* СВЕДЕНИЯ о разгрузке */ 

  -- Ошибка
  PROCEDURE RaiseError (pText VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(For_Scripts.SG$NO_CORRECT, pText);
  END;

  
  -- Максимальный номер позиции ДОКУМЕНТА
  FUNCTION GetMaxNumPos(pSVED_IN_ID VARCHAR2) RETURN NUMBER AS
    MaxNum NUMBER;
    CurNum NUMBER;
  BEGIN
    CurNum:=0;
    FOR lcur IN (SELECT MAX(REESTR_IN.SVED_POS) as MAX_NUM
                 FROM REESTR_IN
				WHERE SVED_IN_ID=pSVED_IN_ID)
    LOOP
      CurNum:=NVL(lcur.MAX_NUM,0);
	  EXIT;
    END LOOP;
	MaxNum:=CurNum+1;
    RETURN MaxNum;
  END;
  
  /* Удалить позицию ДОКУМЕНТА */
  PROCEDURE DelRow(pCOMMIT NUMBER, pID NUMBER) AS
  BEGIN
    DELETE FROM REESTR_IN WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* УДАЛИТЬ заголовок ДОКУМЕНТА */
  PROCEDURE DelTitle(pCOMMIT NUMBER, pID VARCHAR2) AS
    vCNT NUMBER;
  BEGIN
    -- Проверяем наличие позиций
	SELECT COUNT(*) INTO vCNT FROM REESTR_IN WHERE SVED_IN_ID=pID;
	IF vCNT>0 THEN
      RaiseError('Сведение нельзя удалить - есть позиции!');
	END IF;
	 
    DELETE FROM SVED_IN WHERE ID=pID;
	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	  NULL;
  END;

  /* Добавить/Изменить заголовок ДОКУМЕНТА */
  FUNCTION AddTitle(pCOMMIT NUMBER, pID VARCHAR2, pMESTO_ID NUMBER, 
     pSVED_NUM NUMBER, pSVED_DATE DATE, pGOTOV_TIME VARCHAR2, pBEG_NALIV_TIME VARCHAR2, 
	 pEND_NALIV_TIME VARCHAR2, pDATE_OFORML DATE, pPROD_ID_NPR VARCHAR2, pPASP_NUM VARCHAR2, 
	 pREZ_NUM VARCHAR2, pPASP_DATE DATE, pPL20 NUMBER, pPL15 NUMBER, pP_VOD NUMBER, pP_DIRT NUMBER, 
	 pMG_SOL NUMBER, pP_SOL NUMBER) RETURN VARCHAR2 AS

	vID VARCHAR2(9);
	vADD NUMBER;
	vTmp NUMBER;
	vGOTOV_TIME DATE;
	vBEG_NALIV_TIME DATE;
	vEND_NALIV_TIME DATE;
  BEGIN

    IF pGOTOV_TIME='' THEN
	  vGOTOV_TIME:=NULL;
	ELSE
	  vGOTOV_TIME:=TO_DATE(pGOTOV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pBEG_NALIV_TIME='' THEN
	  vBEG_NALIV_TIME:=NULL;
	ELSE
	  vBEG_NALIV_TIME:=TO_DATE(pBEG_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
    IF pEND_NALIV_TIME='' THEN
	  vEND_NALIV_TIME:=NULL;
	ELSE
	  vEND_NALIV_TIME:=TO_DATE(pEND_NALIV_TIME,'dd.mm.yyyy hh24:mi');
	END IF; 
	
    -- ID
	IF pID||' '=' ' OR pID IS NULL THEN
	  vADD:=1;
      SELECT SEQ_SVED_IN.nextval INTO vTmp FROM DUAL;
	  vID:=SUBSTR(TO_CHAR(vTmp),1,9);	  
	ELSE
	  vADD:=0;
	  vID:=pID;
	END IF;

	-- Проверка существования
	BEGIN
	  SELECT /*+ RULE */ SVED_NUM
        INTO vTmp
	 	FROM SVED_IN
	   WHERE ID=vID;
	EXCEPTION
	  WHEN OTHERS THEN
	    IF vAdd=0 THEN
          RaiseError('Сведение нельзя отредактировать - оно удалена!');
		END IF;
	END;

	-- Обновляем 
	UPDATE SVED_IN SET (SVED_NUM, SVED_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML, 
	    PROD_ID_NPR, MESTO_ID, PASP_NUM, REZ_NUM, PASP_DATE, PL, PL15, P_VOD, P_DIRT, MG_SOL, P_SOL)=
	  (SELECT pSVED_NUM, pSVED_DATE, vGOTOV_TIME, vBEG_NALIV_TIME, vEND_NALIV_TIME, pDATE_OFORML, 
	    pPROD_ID_NPR, pMESTO_ID, pPASP_NUM, pREZ_NUM, pPASP_DATE, pPL20, pPL15, pP_VOD, pP_DIRT, pMG_SOL, pP_SOL FROM dual)
	 WHERE ID=vID;

	IF SQL%NOTFOUND THEN
	  -- Добавляем 
      INSERT INTO SVED_IN (ID, SVED_NUM, SVED_DATE, GOTOV_TIME, BEG_NALIV_TIME, END_NALIV_TIME, DATE_OFORML, 
	    PROD_ID_NPR, MESTO_ID, PASP_NUM, REZ_NUM, PASP_DATE, PL, PL15, P_VOD, P_DIRT, MG_SOL, P_SOL)
	  VALUES (vID, pSVED_NUM, pSVED_DATE, vGOTOV_TIME, vBEG_NALIV_TIME, vEND_NALIV_TIME, pDATE_OFORML, 
	    pPROD_ID_NPR, pMESTO_ID, pPASP_NUM, pREZ_NUM, pPASP_DATE, pPL20, pPL15, pP_VOD, pP_DIRT, pMG_SOL, pP_SOL);
	END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	RETURN vID;
  END;
  
  /* Проверка вагона на уникальность
     Возвращаемое значение - номер сведения, в которой данный вагон уже есть */
  FUNCTION CHECK_UNIQ (pLOAD_TYPE_ID NUMBER, pNUM_CIST VARCHAR2, pID NUMBER, pDATE DATE) RETURN NUMBER AS
  PRAGMA AUTONOMOUS_TRANSACTION;
    vRes NUMBER;
	vWorklen NUMBER;
  BEGIN
    IF pLOAD_TYPE_ID=1 THEN
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#1',FOR_INIT.GetCurrUser);
	ELSE
	  vWorklen:=FOR_ENVIRONMENT.GET_ENV('MASTER','VARI','WORKLEN#2',FOR_INIT.GetCurrUser);
	END IF;
    SELECT /*+ RULE */ a.SVED_NUM INTO vRes
	  FROM REESTR_IN b,SVED_IN a
	 WHERE b.SVED_IN_ID=a.ID
	   AND a.SVED_DATE>=pDATE-2
	   AND b.NUM_CIST=pNUM_CIST
--	   AND b.VAG_STATUS_ID IN (0,14)
	   AND b.ID<>NVL(pID,0)
	   AND (TRUNC(a.DATE_OFORML)=TRUNC(pDATE) OR
	        ABS(hours_between(a.DATE_OFORML,pDATE))<vWorklen);
    ROLLBACK;
    RETURN vRes;
  EXCEPTION
    WHEN OTHERS THEN
	  ROLLBACK;
	  RETURN NULL;
  END;
  

  /* Скопировать позиции СВЕДЕНИЯ */
  PROCEDURE CopySvedRow (pCOMMIT NUMBER, pSVED_OLD_ID VARCHAR2, pSVED_ID VARCHAR2)  AS
    vID REESTR_IN.ID%TYPE;   
 	vOld SVED_IN%ROWTYPE;
	vNew SVED_IN%ROWTYPE;
	vTmp NUMBER;
  BEGIN
    vID:=NULL;

	-- Считываем сведение-источник
	BEGIN
	  SELECT * INTO vOld
	    FROM SVED_IN
	   WHERE ID=TRIM(pSVED_OLD_ID);
	EXCEPTION
	  WHEN OTHERS THEN
	    vOld.ID:=NULL;
	END;
	-- Считываем сведение-назначение
	BEGIN
	  SELECT * INTO vNew
	    FROM SVED_IN
	   WHERE ID=TRIM(pSVED_ID);
	EXCEPTION
	  WHEN OTHERS THEN
	    vNew.ID:=NULL;
	END;

	IF vOld.ID IS NULL OR vNew.ID IS NULL OR vOld.ID||' '=vNew.ID||' ' THEN
	  -- Копировать нечего
	  RETURN;
	END IF;

	IF vOld.PROD_ID_NPR='90004' THEN  
      FOR lcur IN (SELECT * FROM REESTR_IN WHERE SVED_IN_ID=vOld.ID) LOOP 
        -- Добавляем вагон в новое сведение
		INSERT INTO REESTR_IN (SVED_IN_ID, MESTO_ID, FORMNAKL_ID,  
  		  NUM_CIST, VAGONTYPE_ID, KALIBR_ID, VES_CIST, VAGOWNER_ID, CAPACITY,  
		  SVED_POS, ZPU_TYPE1, ZPU_TYPE2,DATE_OTGR)
		VALUES (vNew.ID, lcur.MESTO_ID, lcur.FORMNAKL_ID,  
  		  lcur.NUM_CIST, lcur.VAGONTYPE_ID, lcur.KALIBR_ID, lcur.VES_CIST, lcur.VAGOWNER_ID, lcur.CAPACITY,  
		  lcur.SVED_POS, lcur.ZPU_TYPE1, lcur.ZPU_TYPE2, vNew.SVED_DATE);  
      END LOOP;
    END IF;

	-- COMMIT
	IF pCOMMIT=1 THEN
	  COMMIT;
	END IF;
	
  END;
  
END;
/

