--
-- FOR_BILLS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MASTER.For_Bills AS

-- Возвращает № счета СНП к счету от ЛУКОЙЛа 
FUNCTION NPO_SF$BILLS(AIS_AGENT NUMBER, ADATE_KVIT DATE, ANPO_SF VARCHAR2, ANOM_SF NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF AIS_AGENT=0 THEN
    IF ADATE_KVIT>TO_DATE('10.04.2002','dd.mm.yyyy') THEN
	  RETURN ANPO_SF;
	ELSE
	  RETURN '02003К/'||TO_CHAR((ANOM_SF-6009000)*2-1);
	END IF;
  ELSE
    RETURN ANPO_SF;
  END IF;	
END;

-- Обновляет BILLS_SNP 
PROCEDURE FIELDS$BILLS_SNP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

  -- Обновление из процедуры RENEW_BILLS_SNP
    UPDATE BILLS_SNP C SET 
      (KOL_DN, DOG_ID, USL_NUMBER, CAT_CEN_ID) = 
      (SELECT NPO_USL_OPL.KOL_DN,MONTH.NPODOG_ID,1,npo_usl.NPOCAT_CEN_ID
       FROM BILLS,MONTH,USL_DOG npo_usl,KLS_USL_OPL NPO_USL_OPL,KLS_DOG NPO_DOG
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
		AND MONTH.NPODOG_ID = NPO_DOG.ID
		AND NPO_DOG.USL_OPL_ID = NPO_USL_OPL.ID  
	    AND BILLS.NOM_DOK = C.NOM_DOK)
    WHERE EXISTS (SELECT BILLS.NOM_DOK
       FROM BILLS,MONTH,USL_DOG npo_usl
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
	    AND BILLS.NOM_DOK = C.NOM_DOK);
    COMMIT;

  -- Обновление из тригера
/*  IF AFIELD='MAINDOG_ID' THEN
  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.MAINDOG_ID по договорам комиссии и поставки
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT FOR_BILLS.NPO_SF$BILLS_LUK(KLS_VIDDOG.IS_AGENT,B.DATE_KVIT,B.NPO_SF,B.NOM_SF),
	            B.PROD_SUM, B.PROD_NDS, B.PROD_GSM, B.PROD_AKCIZ,
	            p_new.MAINDOG_ID, DECODE(p_new.ID,p_new.MAINDOG_ID,B.USL_NUMBER,1)
         FROM bills B,kls_dog_shadow luk_dog,kls_viddog
         WHERE B.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
	       AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow luk_dog,kls_viddog
         WHERE С.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
           AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.MAINDOG_ID по агентскому договору
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT B.NPO_SF,B.SUMMA_DOK, B.NDS_DOK, B.GSM_DOK, B.AKCIZ_DOK,
	            B.DOG_ID, B.USL_NUMBER
         FROM bills B,kls_dog_shadow luk_dog,kls_viddog
         WHERE B.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
	       AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow luk_dog,kls_viddog
         WHERE С.DOG_ID = p_new.ID
           AND p_new.MAINDOG_ID=LUK_DOG.ID
           AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;
  END IF;  

  -- Обновление из тригера
  IF AFIELD='VIDDOG_ID' THEN
  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.VIDDOG_ID по договорам комиссии и поставки
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT FOR_BILLS.NPO_SF$BILLS_LUK(KLS_VIDDOG.IS_AGENT,B.DATE_KVIT,B.NPO_SF,B.NOM_SF),
	            B.PROD_SUM, B.PROD_NDS, B.PROD_GSM, B.PROD_AKCIZ,
	            dog.MAINDOG_ID, DECODE(dog.ID,dog.MAINDOG_ID,B.USL_NUMBER,1)
         FROM bills B,kls_dog_shadow dog,kls_viddog
         WHERE B.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
	       AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow dog,kls_viddog
         WHERE С.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
           AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT<>1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILLS_LUK зависящих от KLS_DOG.MAINDOG_ID по агентскому договору
  --  BEGIN
      UPDATE bills_snp A SET (NPO_SF, SUMMA_DOK, NDS_DOK, GSM_DOK, AKCIZ_DOK, DOG_ID, USL_NUMBER)=
        (SELECT B.NPO_SF,B.SUMMA_DOK, B.NDS_DOK, B.GSM_DOK, B.AKCIZ_DOK,
	            B.DOG_ID, B.USL_NUMBER
         FROM bills B,kls_dog_shadow dog,kls_viddog
         WHERE B.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
	       AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
	       AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = B.NOM_DOK)
      WHERE EXISTS
        (SELECT С.NOM_DOK
	     FROM bills С,kls_dog_shadow dog,kls_viddog
         WHERE С.DOG_ID = dog.ID
           AND dog.MAINDOG_ID=p_new.ID
           AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
	       AND KLS_VIDDOG.IS_AGENT=1
           AND С.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
		   AND A.NOM_DOK = С.NOM_DOK);
  --  EXCEPTION
  --    WHEN OTHERS THEN
  --	  NULL;
  --  END;
  END IF;*/
  
END;


-- Обновляет BILL_POS_SNP
PROCEDURE FIELDS$BILL_POS_SNP(DATE_BEG DATE:=TRUNC(SYSDATE,'MONTH') ,DATE_END DATE:=SYSDATE, param1 VARCHAR2:='', param2 VARCHAR2:='', param3 VARCHAR2:='') IS
BEGIN

    -- Обновление позиций - отгрузка
    UPDATE BILL_POS_SNP C SET
      (KVIT_VES,SVED_NUM,DATE_OTGR) =
	  (SELECT SUM(DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,NVL(KVIT.VES,0),0)) AS KVIT_VES, 
		    MAX(KVIT.SVED_NUM) AS SVED_NUM, 
		    MAX(KVIT.DATE_OTGR) AS DATE_OTGR
       FROM BILL_POS,KVIT
      WHERE BILL_POS.NOM_DOK = KVIT.BILL_ID
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID)
     WHERE EXISTS (SELECT BILL_POS.NOM_DOK
       FROM BILL_POS,KVIT
      WHERE BILL_POS.NOM_DOK = KVIT.BILL_ID
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID);
  --  COMMIT;

    -- Проставление сумм и цен 
    UPDATE BILL_POS_SNP C SET 
      (NPR_PRICES_ID,CENA_BN,CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20,SUMMA_GSM25, SUMMA) = 
      (SELECT NVL(PRICES.ID,0),
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.CENA_BN,NVL(PRICES.CENA_NPO,0)),BILL_POS.CENA_BN) AS CENA_BN, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.CENA,NVL(PRICES.CENA_OTP_NPO,0)),BILL_POS.CENA) AS CENA, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_BN,ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES,2)),BILL_POS.SUMMA_BN) AS SUMMA_BN, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_AKCIZ,0),BILL_POS.SUMMA_AKCIZ) AS SUMMA_AKCIZ, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_NDS20,ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES*FOR_BILLS.GetNDSValue(bills.date_kvit),2)),BILL_POS.SUMMA_NDS20) AS SUMMA_NDS20, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA_GSM25,0),BILL_POS.SUMMA_GSM25) AS SUMMA_GSM25, 
            DECODE(SIGN(BILL_POS.BILL_POS_ID-10),-1,DECODE(NVL(MONTH.NPODOG_ID,0),0,BILL_POS.SUMMA,ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES,2)+ROUND(NVL(PRICES.CENA_NPO,0)*BILL_POS.VES*FOR_BILLS.GetNDSValue(bills.date_kvit),2)),BILL_POS.SUMMA) AS SUMMA 
       FROM BILL_POS,BILLS,MONTH,USL_DOG npo_usl,V_NPR_PRICES_SNP prices
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
        AND npo_usl.NPOCAT_CEN_ID = prices.CAT_CEN_ID   
        AND BILLS.PROD_ID_NPR = prices.PROD_ID_NPR 
        AND BILLS.DATE_KVIT >= prices.BEGIN_DATE  
        AND BILLS.DATE_KVIT <= prices.END_DATE 
	    AND BILL_POS.NOM_DOK = BILLS.NOM_DOK
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID)
     WHERE EXISTS (SELECT BILL_POS.NOM_DOK
       FROM BILL_POS,BILLS,MONTH,USL_DOG npo_usl,V_NPR_PRICES_SNP prices
      WHERE BILLS.NOM_ZD = MONTH.NOM_ZD 
	    AND MONTH.NPODOG_ID = npo_usl.DOG_ID 
	    AND 1 = npo_usl.USL_NUMBER
        AND npo_usl.NPOCAT_CEN_ID = prices.CAT_CEN_ID   
        AND BILLS.PROD_ID_NPR = prices.PROD_ID_NPR 
        AND BILLS.DATE_KVIT >= prices.BEGIN_DATE  
        AND BILLS.DATE_KVIT <= prices.END_DATE 
	    AND BILL_POS.NOM_DOK = BILLS.NOM_DOK
	    AND BILL_POS.NOM_DOK = C.NOM_DOK
		AND BILL_POS.BILL_POS_ID = C.BILL_POS_SNP_ID);
    COMMIT;

/*  -- Обновление из тригера
  IF AFIELD='MAINDOG_ID' THEN
  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.MAINDOG_ID по договорам комиссии и поставки
  --  BEGIN
      DELETE FROM bill_pos_snp C
      WHERE exists
        (SELECT a.NOM_DOK 
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW LUK_DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=p_new.ID AND p_new.MAINDOG_ID=LUK_DOG.ID AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT<>1 AND a.bill_pos_id>=10 AND A.nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_SNP_ID);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.MAINDOG_ID по агентскому договору
    BEGIN
      INSERT INTO BILL_POS_SNP
	    (NOM_DOK,BILL_POS_SNP_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
         SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
         ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID)
        SELECT A.NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
           SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
           ID_OLD,A.PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW LUK_DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=p_new.ID AND p_new.MAINDOG_ID=LUK_DOG.ID AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT=1 AND a.bill_pos_id>=10;
    EXCEPTION
  	  WHEN OTHERS THEN
  	    NULL;
    END;
  END IF;  

  -- Обновление из тригера
  IF AFIELD='VIDDOG_ID' THEN
  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.VIDDOG_ID по договорам комиссии и поставки
  --  BEGIN
      DELETE FROM bill_pos_snp C
      WHERE exists
        (SELECT a.NOM_DOK 
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=DOG.ID AND DOG.MAINDOG_ID=p_new.ID AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT<>1 AND a.bill_pos_id>=10 AND A.nom_dok=C.nom_dok AND a.bill_pos_id=c.BILL_POS_SNP_ID);
  --  EXCEPTION
  --	WHEN OTHERS THEN
  --	  NULL;
  --  END;

  -- Обновление полей в BILL_POS_LUK зависящих от KLS_DOG.VIDDOG_ID по агентскому договору
    BEGIN
      INSERT INTO BILL_POS_SNP
	    (NOM_DOK,BILL_POS_SNP_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
         SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
         ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID)
        SELECT A.NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20,SUMMA_GSM25, 
           SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,DATE_REALIZ, 
           ID_OLD,A.PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID
  	     FROM BILL_POS A, BILLS B, KLS_DOG_SHADOW DOG, KLS_VIDDOG
	     WHERE A.NOM_DOK = B.NOM_DOK AND B.DOG_ID=dog.ID AND dog.MAINDOG_ID=p_new.ID AND p_new.VIDDOG_ID=KLS_VIDDOG.ID
           AND B.DATE_KVIT>=TO_DATE('01.04.2002','dd.mm.yyyy')
	       AND KLS_VIDDOG.IS_AGENT=1 AND a.bill_pos_id>=10;
    EXCEPTION
      WHEN OTHERS THEN
   	    NULL;
    END;
  END IF;*/
  
END;

-- Формирование/обновление счетов на предоплату
PROCEDURE ADD_BILL_PREPAY(ANOM_ZD VARCHAR2, ASVED_NUM NUMBER) AS

 /* -- Курсор: ЗАЯВКИ
  CURSOR tmp_cur_m IS    
      SELECT MONTH.DATE_PLAN, -- Дата плана
	         MONTH.DATE)RAZN, -- Дата разнарядки 
	         MONTH.NOM_ZD, -- Номер разнарядки
			 NVL(KLS_VIDDOG.ID,3) AS IS_AGENT, -- Принадлежность к договорам ЛУОКЙЛ (0-комиссия, 1-агент, 2-поставка, 3-собственный договор НПО)
			 NVL(LUK_DOG.ID,0) AS LUK_DOG_ID, -- Договор ЛУКОЙЛ-НПО, в рамках которого осуществляется отгрузка
			 NVL(LUK_DOG.DOG_NUMBER,'') AS LUK_DOG_NUMBER, -- Договор ЛУКОЙЛ-НПО, в рамках которого осуществляется отгрузка
			 NVL(LUK_DOG.PREDPR_ID,0) AS LUK_PLAT_ID, -- Покупатель по договору ЛУКОЙЛ-НПО, в рамках которого осуществляется отгрузка
			 KLS_DOG.ID AS DOG_ID, -- Договор разнарядки
			 KLS_DOG.DOG_NUMBER AS DOG_NUMBER, -- Договор разнарядки
			 KLS_DOG.PREDPR_ID AS PLAT_ID, -- Покупатель по договору разнарядки
			 NVL(NPO_DOG.ID,0) AS NPO_DOG_ID, -- Договор НПО-Клиент (по поставке)
			 NVL(NPO_DOG.DOG_NUMBER,'') AS NPO_DOG_NUMBER, -- Договор НПО-Клиент (по поставке)
			 NVL(NPO_DOG.PREDPR_ID,0) AS NPO_PLAT_ID, -- Покупатель по договору НПО-Клиент (по поставке)
			 MONTH.GROTP_ID, -- Грузоотправитель
			 MONTH.STANOTP_ID, -- Станция отправления
			 STAN_OTP.STAN_KOD AS STANOTP_KOD, 
			 MONTH.STAN_ID,
			 STAN.STAN_KOD,
			 MONTH.POLUCH_ID,
			 MONTH.POTREB_ID,
			 MONTH.PROD_ID_NPR,
			 USL_DOG.CAT_CEN_ID,
			 USL_DOG.NPOCAT_CEN_ID,
			 USL_DOG.PROC_INSURE, 
			 
			   
        FROM MONTH, KLS_DOG, KLS_DOG LUK_DOG, KLS_DOG NPO_DOG, KLS_VIDDOG  
		WHERE MONTH.DOG_ID=KLS_DOG.ID
		  AND MONTH.NPODOG_ID=NPO_DOG.ID(+)
		  AND KLS_DOG.MAINDOG_ID=LUK_DOG.ID(+)
		  AND LUK_DOG.VIDDOG_ID=KLS_VIDDOG.ID
		  
		  AND A.kst = ST.KOD
		  AND ST.KSTRAN = S.KOD
		  AND A.KOD_NPR = P.KOD;
*/
BEGIN
  -- Проверка наличия
  NULL;   
END;
/*
PROCEDURE FILL_TEMP_BILL_KVIT (DATE_KVIT# VARCHAR2,NUM_KVIT# VARCHAR2) IS
BEGIN
  DELETE FROM TEMP_BILL_KVIT WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  INSERT INTO TEMP_BILL_KVIT (kvit_id,num_kvit)
    (SELECT id,num_kvit FROM KVIT WHERE (sved_id)=
	  (SELECT MAX(sved_id) FROM KVIT WHERE date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') AND num_kvit=TO_NUMBER(num_kvit#) AND bill_id=0));
	  
  COMMIT;
END FILL_TEMP_BILL_KVIT;
*/
--- Определение вознаграждения в зависимости от расстояния
FUNCTION GET_VOZN_RST(pKVIT_ID NUMBER, pERR_TXT OUT VARCHAR2) RETURN NUMBER IS
  DateKvit DATE;
  IsAgent NUMBER;
  ProdGrp KLS_PROD.ID_GROUP_NPR_GD%TYPE;
  ProdId KLS_PROD.ID_NPR%TYPE;
  OwnType NUMBER;
  StanKod NUMBER;
  StanName KLS_STAN.STAN_NAME%TYPE;
  Rast NUMBER;
  CenaVozn NUMBER;
BEGIN
  -- поиск отгрузки
  BEGIN
    -- Затычка
    pERR_TXT:=For_Bills.VR$OLD_ALGORITM_TXT;
    RETURN For_Bills.VR$OLD_ALGORITM;
    -- Затычка  
    SELECT DECODE(KVIT.FLG_OPERDATA,1,KVIT.DATE_OTGR,KVIT.DATE_KVIT) AS DATE_KVIT,
	       KLS_DOG.IS_AGENT,
		   KLS_PROD.ID_GROUP_NPR_GD,
		   KVIT.PROD_ID_NPR,
		   KLS_VAGOWNER.VAGOWN_TYP_ID,
		   KLS_STAN.STAN_KOD,
		   KLS_STAN.STAN_NAME,
		   NVL(KLS_STAN.RAST,0) AS RAST
	  INTO DateKvit,IsAgent,ProdGrp,ProdId,OwnType,StanKod,StanName,Rast	   
      FROM KVIT,MONTH,KLS_STAN,KLS_DOG,KLS_PROD,KLS_VAGOWNER
	 WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	   AND MONTH.STAN_ID=KLS_STAN.ID
	   AND MONTH.DOG_ID=KLS_DOG.ID
	   AND KVIT.PROD_ID_NPR=KLS_PROD.ID_NPR
	   AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID
	   AND KVIT.ID=pKVIT_ID; 			  
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
	  pERR_TXT:=For_Bills.VR$KVIT_NOT_FOUND_TXT;
	  RETURN For_Bills.VR$KVIT_NOT_FOUND;
  END;
  
  -- проверки
  -- дата
  IF DateKvit<TO_DATE('01.07.2003','dd.mm.yyyy') THEN
    pERR_TXT:=For_Bills.VR$OLD_ALGORITM_TXT;
	RETURN For_Bills.VR$OLD_ALGORITM;
  END IF;  	  
  
  -- договор
  IF IsAgent<>1 THEN
    pERR_TXT:=For_Bills.VR$OLD_ALGORITM_TXT;
	RETURN For_Bills.VR$OLD_ALGORITM;
  END IF;
  
  -- расстояние
  IF Rast=0 AND StanKod>100 AND StanKod<>285706 THEN
    pERR_TXT:=For_Bills.VR$BAD_RAST_TXT;
	RETURN For_Bills.VR$BAD_RAST;
  END IF;	

  -- поиск вознаграждения
  BEGIN
    SELECT CENA_VOZN
	  INTO CenaVozn	   
      FROM KLS_VOZN_RST
	 WHERE DateKvit BETWEEN BEGIN_DATE AND END_DATE
	   AND IS_AGENT = IsAgent
	   AND ID_GROUP_NPR = ProdGrp  
	   AND VAGOWN_TYP_ID = OwnType
	   AND Rast BETWEEN RAST_MIN AND RAST_MAX;
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
	  pERR_TXT:=For_Bills.VR$VOZN_NOT_FOUND_TXT;
	  RETURN For_Bills.VR$VOZN_NOT_FOUND;
  END;
  
  pERR_TXT:=' ';
  IF OwnType=0 THEN
    pERR_TXT:=VR$OK_0_TXT;
  END IF;
  IF OwnType=1 THEN
    pERR_TXT:=VR$OK_1_TXT;
  END IF;
  IF OwnType=2 THEN
    pERR_TXT:=VR$OK_2_TXT;
  END IF;
  IF OwnType=3 THEN
    pERR_TXT:=VR$OK_3_TXT;
  END IF;
  RETURN NVL(CenaVozn,0);    	  
END;

PROCEDURE FILL_TEMP_BILL_KVIT (DATE_KVIT# VARCHAR2,NUM_KVIT# VARCHAR2,NOM_DOK# NUMBER) IS
BEGIN
  DELETE FROM TEMP_BILL_KVIT WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  DELETE FROM TEMP_BILL_KVIT_POSSIBLE WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  COMMIT;
  IF nom_dok#=0 THEN -- Выставляем новый счет
    INSERT INTO TEMP_BILL_KVIT 
    (kvit_id,num_kvit,NUM_CIST,VES,TARIF,TARIF19,SVED_NUM, 
     SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11, 
     SUM_VOZN11_NDS,SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH, 
     CENA,CENA_OTP,DATE_CENA,DATE_KVIT,TARIF_GUARD,
	 TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ  
    )
      (SELECT 
	     id,num_kvit,NUM_CIST,VES,TARIF,TARIF19, 
         SVED_NUM,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS, 
         TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,SUM_VOZN12, 
         SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,DATE_KVIT,
		 TARIF_GUARD,TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ     
	     FROM KVIT WHERE
		 date_kvit=TO_DATE(DATE_KVIT#,'dd.mm.yyyy') and  
		 (sved_id=(SELECT MAX(sved_id) FROM KVIT,month WHERE kvit.nom_zd=month.nom_zd
		          AND date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') 
  	              AND num_kvit=TO_NUMBER(num_kvit#) 
				  AND month.nazn_otg_id<>5 AND bill_id=0) or
		  id in (SELECT id FROM kvit,month WHERE kvit.nom_zd=month.nom_zd 
		          AND date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy')
				  AND month.nazn_otg_id=(SELECT MAX(nazn_otg_id) FROM kvit,month WHERE kvit.nom_zd=month.nom_zd 
				  	                                                             AND date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') 
                                                               	                 AND num_kvit=TO_NUMBER(num_kvit#))
		          AND month.nazn_otg_id=5 AND bill_id=0
				  AND kvit.prod_id_npr<>'90000')));
	  
    INSERT INTO TEMP_BILL_KVIT_POSSIBLE 
    (kvit_id,num_kvit,NUM_CIST,VES,TARIF,TARIF19,SVED_NUM, 
     SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11, 
     SUM_VOZN11_NDS,SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH, 
     CENA,CENA_OTP,DATE_CENA,DATE_KVIT,TARIF_GUARD,
	 TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ  
    )
      (SELECT 
	     id,num_kvit,NUM_CIST,VES,TARIF,TARIF19, 
         SVED_NUM,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS, 
         TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,SUM_VOZN12, 
         SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,DATE_KVIT,
		 TARIF_GUARD,TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ     
	     FROM KVIT WHERE 
		   date_kvit=TO_DATE(date_kvit#,'dd.mm.yyyy') 
		   AND bill_id=0
	       AND nom_zd IN (SELECT nom_zd FROM KVIT WHERE id IN (SELECT kvit_id FROM v_temp_bill_kvit)));
    COMMIT;
  ELSE -- Корректируем счет
    INSERT INTO TEMP_BILL_KVIT 
    (kvit_id,num_kvit,NUM_CIST,VES,TARIF,TARIF19,SVED_NUM, 
     SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11, 
     SUM_VOZN11_NDS,SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH, 
     CENA,CENA_OTP,DATE_CENA,DATE_KVIT,TARIF_GUARD,
	 TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ  
    )
      (SELECT 
	     id,num_kvit,NUM_CIST,VES,TARIF,TARIF19, 
         SVED_NUM,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS, 
         TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,SUM_VOZN12, 
         SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,DATE_KVIT,
		 TARIF_GUARD,TARIF_GUARD_NDS,NACENKA,NUM_AKT,BILL_POS_ID,NO_AKCIZ     
	     FROM KVIT WHERE bill_id=nom_dok#);
  END IF;
END FILL_TEMP_BILL_KVIT;

PROCEDURE SET_TEMP_BILL_KVIT_PRICE(ID_NPR# VARCHAR2,CENA_ID# NUMBER) IS
BEGIN
	
  UPDATE TEMP_BILL_KVIT SET
    (CENA,CENA_OTP,DATE_CENA,PROTO_NUM,PROTO_DATE,NO_AKCIZ,NPR_PRICES_ID,CAT_CEN_ID)=
	(SELECT CENA,CENA_OTP,INPUT_DATE,PROTOKOL_NUM,PROTOKOL_DATE,NO_AKCIZ,ID,CAT_CEN_ID FROM npr_prices WHERE id=CENA_id#)
  	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit) AND 
	      (SELECT prod_id_npr FROM kvit WHERE id=kvit_id)=id_npr#;
  COMMIT;
END;

PROCEDURE CALC_TEMP_BILL_KVIT (CENA_ID# NUMBER) IS
/*
CENA# NUMBER;
AKCIZ# NUMBER;
PROTO_NUM# VARCHAR2(15);
PROTO_DATE# DATE;
NO_AKCIZ# NUMBER(1);
*/
BEGIN

/*  SELECT
    NPR_PRICES.CENA,
	NPR_PRICES.AKCIZ,
	NPR_PRICES.PROTOKOL_NUM,
	NPR_PRICES.PROTOKOL_DATE,
	NPR_PRICES.NO_AKCIZ
	INTO CENA#,AKCIZ#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#
	FROM NPR_PRICES
	WHERE ID=CENA_ID#;
*/
	
  UPDATE TEMP_BILL_KVIT SET
    TEMP_BILL_KVIT.SUM_PROD=ROUND((CENA)*TEMP_BILL_KVIT.VES,2),
    --TEMP_BILL_KVIT.SUM_AKCIZ=ROUND((AKCIZ#)*TEMP_BILL_KVIT.VES,2),
    TEMP_BILL_KVIT.SUM_AKCIZ=0,
	TEMP_BILL_KVIT.SUM_VOZN11=GET_VOZN_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID,1),
	TEMP_BILL_KVIT.SUM_VOZN12=GET_VOZN_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID,2),
	TEMP_BILL_KVIT.CENA_VOZN=GET_VOZN_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID,3)
	/*TEMP_BILL_KVIT.PROTO_NUM=PROTO_NUM#,
	TEMP_BILL_KVIT.PROTO_DATE=PROTO_DATE#,
	TEMP_BILL_KVIT.NO_AKCIZ=NO_AKCIZ#*/
	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit);

  UPDATE TEMP_BILL_KVIT SET
    TEMP_BILL_KVIT.SUM_PROD_NDS=ROUND(TEMP_BILL_KVIT.SUM_PROD*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),
	TEMP_BILL_KVIT.TARIF_NDS=ROUND(TEMP_BILL_KVIT.TARIF*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),	
	TEMP_BILL_KVIT.SUM_VOZN11_NDS=ROUND(TEMP_BILL_KVIT.SUM_VOZN11*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),	
	TEMP_BILL_KVIT.SUM_VOZN12_NDS=ROUND(TEMP_BILL_KVIT.SUM_VOZN12*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2),
	TEMP_BILL_KVIT.TARIF_GUARD_NDS=ROUND(TEMP_BILL_KVIT.TARIF_GUARD*GetNDSValue(TEMP_BILL_KVIT.date_kvit)/100,2)		
	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit);

  UPDATE TEMP_BILL_KVIT SET
    TEMP_BILL_KVIT.SUM_STRAH=ROUND((
	    TEMP_BILL_KVIT.SUM_PROD+
		TEMP_BILL_KVIT.SUM_AKCIZ+
        GET_STRH_KOEF_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID)*TEMP_BILL_KVIT.SUM_PROD_NDS)
		*GET_STRH_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID)/100,2),
	TEMP_BILL_KVIT.NACENKA=GET_STRH_FOR_A_KVIT(TEMP_BILL_KVIT.KVIT_ID)	
	WHERE TEMP_BILL_KVIT.KVIT_ID IN (SELECT kvit_id FROM v_temp_bill_kvit);
  COMMIT; 
END;

FUNCTION GetNDSValue(DATE# DATE) RETURN FLOAT IS
BEGIN
  IF DATE#>=TO_DATE('01.01.2004','dd.mm.yyyy') THEN
    RETURN 18;
  ELSE	
    RETURN 20;
  END IF;	  
END;

FUNCTION GetNDSValueSTR(pDATE VARCHAR2) RETURN FLOAT IS
  dat DATE;
BEGIN
  dat:=TO_DATE(pDATE,'dd.mm.yyyy');
  RETURN GetNDSValue(dat);
END;

-- Определение вознаграждения в вагонах МПС
FUNCTION GET_VOZN_FOR_A_KVIT(pKVIT_ID NUMBER,KINDA_VOZN NUMBER) RETURN NUMBER IS
 -- KINDA_VOZN 1-МПС, 2-не МПС, 3-возвратить цену вознаграждения
 ERR_TXT VARCHAR(150);
 VOZN_VALUE NUMBER;
 UslSum NUMBER;
 OwnType NUMBER;
 VagVes NUMBER;
 Trf NUMBER;
 Trf19 NUMBER;
 DopCist NUMBER;
BEGIN
  VOZN_VALUE:=GET_VOZN_RST(pKVIT_ID,ERR_TXT);

  IF vozn_value=VR$BAD_RAST THEN -- Расстояние до станции равно 0
    RETURN 0;
  END IF;
  
  BEGIN
    SELECT
      USL_DOG.USL_SUM, 
	  KLS_VAGOWNER.VAGOWN_TYP_ID,	
	  KVIT.Ves,
	  KVIT.Tarif,
	  KVIT.Tarif19,
	  KVIT.FLG_DOP_CIST
	   INTO UslSum,OwnType,VagVes,Trf,Trf19,DopCist	   
       FROM KVIT,MONTH,USL_DOG,KLS_VAGOWNER
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=USL_DOG.DOG_ID 
	    AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
	    AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 0;
  END;

  IF vozn_value=VR$OLD_ALGORITM THEN -- Вознаграждение считать по старому (как до 01.07.2003)
    IF (OwnType=0) AND (KINDA_VOZN=1) THEN -- МПС
	  IF DopCist=0 THEN
  	    RETURN ROUND(UslSum*vagVes*2,2);
	  ELSE
  	    RETURN ROUND(UslSum*vagVes,2);
	  END IF;
 	END IF;
    IF (OwnType<>0) AND (KINDA_VOZN=2) AND (Trf19>Trf) THEN -- не МПС
	  RETURN Trf19-Trf;
 	END IF;
  END IF;

  IF (vozn_value>=0) AND (ERR_TXT=VR$OK_0_TXT) AND (KINDA_VOZN=1) THEN
    RETURN ROUND(vozn_value*VagVes,2);
  END IF;

  IF (vozn_value>=0) AND (ERR_TXT IN (VR$OK_1_TXT,VR$OK_2_TXT,VR$OK_3_TXT)) AND (KINDA_VOZN=2) THEN
    RETURN ROUND(vozn_value*VagVes,2);
  END IF;

  IF (vozn_value>=0) AND (KINDA_VOZN=3) THEN
    RETURN ROUND(vozn_value,2);
  END IF;
  RETURN 0; -- На всякий случай
END;


-- Определение страховки
FUNCTION GET_STRH_FOR_A_KVIT(pKVIT_ID NUMBER) RETURN NUMBER IS
 StrhValue NUMBER;
 LoadType NUMBER;
BEGIN
  BEGIN
    SELECT
      USL_DOG.PROC_INSURE,
	  KLS_VID_OTGR.LOAD_TYPE_ID 
	   INTO StrhValue,LoadType	   
       FROM KVIT,MONTH,USL_DOG,KLS_VID_OTGR
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=USL_DOG.DOG_ID 
	    AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
	    AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 0;
  END;

  IF LoadType IN (1,6) THEN
    RETURN StrhValue;
  END IF;
  RETURN 0; -- На всякий случай
END;

-- Определение страховки на предмет исчисления оной с полной суммы
FUNCTION GET_STRH_KOEF_FOR_A_KVIT(pKVIT_ID NUMBER) RETURN NUMBER IS
 StrhValue NUMBER;
BEGIN
  BEGIN
    SELECT
	  KLS_INSURE.FULL_SUM
	   INTO StrhValue	   
       FROM KVIT,MONTH,KLS_DOG,KLS_INSURE
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=KLS_DOG.ID 
	    AND KLS_DOG.INSURE_ID=KLS_INSURE.ID
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 1;
  END;

  RETURN StrhValue;
END;

-- Запись нового счета, возвращает NOM_DOK + BONUS - запись редактированного счета :)
FUNCTION NEW_BILL(CDATE_VYP_SF# VARCHAR2,CDATE_BUXG# VARCHAR2,NOM_DOK_ED# NUMBER, STORNO# NUMBER) RETURN NUMBER IS
NOM_DOK# NUMBER;
NOM_SF# NUMBER;
DATE_KVIT# DATE;
SUMMA_DOK# NUMBER;
NDS_DOK# NUMBER;
GSM_DOK# NUMBER;
AKCIZ_DOK# NUMBER;
PRIM# VARCHAR2(100);
FIO_ISPOL# VARCHAR2(50);       
KOL_DN# NUMBER;
OLD_NOM_DOK# NUMBER;
NOM_ZD# VARCHAR2(12);
OWNER_ID# NUMBER;
DOG_ID# NUMBER;
USL_NUMBER# NUMBER;      
PROD_ID_NPR# VARCHAR2(5);
PROD_ID_NPR_ORIG# VARCHAR2(5);
PROD_SUM# NUMBER;
PROD_NDS# NUMBER;
PROD_GSM# NUMBER;
PROD_AKCIZ# NUMBER;
DATE_MOS# DATE;
NPO_SF# VARCHAR2(50);
OLD_NOM_SF# NUMBER;
IS_AGENT# NUMBER;
NUM_5_DAY# NUMBER;
LUK_DOG_ID# NUMBER;
LUK_USL_NUMBER# NUMBER;
LUK_SUMMA_DOK# NUMBER;
LUK_NDS_DOK# NUMBER;
SNP_DOG_ID# NUMBER;
SNP_USL_NUMBER# NUMBER;
LUK_KOL_DN# NUMBER;
SNP_KOL_DN# NUMBER;
NAZN_OTG_ID# NUMBER;     
KORR_5_DAY# NUMBER;
PROTO_NUM# VARCHAR2(30);
PROTO_DATE# DATE;
NO_AKCIZ# NUMBER;
DATE_VYP_SF# DATE;
DATE_BUXG# DATE;
VES# NUMBER;
CENA# NUMBER;
CENA_BN# NUMBER;
TARIF# NUMBER;
TARIF_NDS# NUMBER;
SUM_VOZN11# NUMBER;
SUM_VOZN11_NDS# NUMBER;
SUM_VOZN12# NUMBER;
SUM_VOZN12_NDS# NUMBER;
SUM_STRH# NUMBER;
TARIF_GUARD# NUMBER;
TARIF_GUARD_NDS# NUMBER;
NUM_AKT# NUMBER;
BEGIN
  COMMIT;
  RETURN 0;


  OWNER_ID#:=0;
  DATE_VYP_SF#:=TO_DATE(CDATE_VYP_SF#,'dd.mm.yyyy');
  DATE_BUXG#:=TO_DATE(CDATE_BUXG#,'dd.mm.yyyy');
  IF nom_dok_ed#=0 THEN
    SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
  ELSE
    nom_dok#:=nom_dok_ed#;
  END IF;
  
  SELECT
    KVIT.DATE_KVIT INTO DATE_KVIT# FROM KVIT WHERE KVIT.ID= 
      (SELECT MIN(v_temp_bill_kvit.KVIT_ID) FROM v_temp_bill_kvit);
  
  SELECT
    SUM(SUM_PROD+TARIF+SUM_VOZN11+SUM_VOZN12+SUM_STRAH+TARIF_GUARD),
	SUM(SUM_PROD_NDS+TARIF_NDS+SUM_VOZN11_NDS+SUM_VOZN12_NDS+TARIF_GUARD_NDS),
    SUM(SUM_AKCIZ),
	SUM(SUM_PROD),
	SUM(SUM_PROD_NDS),
    SUM(SUM_AKCIZ),
	MAX(PROTO_NUM),
	MAX(PROTO_DATE),
	SUM(VES),
	MAX(CENA),
	MAX(CENA_OTP),
	SUM(TARIF),
	SUM(TARIF_NDS),
	SUM(SUM_VOZN11),
	SUM(SUM_VOZN11_NDS),
	SUM(SUM_VOZN12),
	SUM(SUM_VOZN12_NDS),
	SUM(SUM_STRAH),
	SUM(TARIF_GUARD),
	SUM(TARIF_GUARD_NDS)
	INTO SUMMA_DOK#,NDS_DOK#,AKCIZ_DOK#,
	  PROD_SUM#,PROD_NDS#,PROD_AKCIZ#,PROTO_NUM#,PROTO_DATE#,VES#,CENA_BN#,CENA#,TARIF#,TARIF_NDS#,
	  SUM_VOZN11#,SUM_VOZN11_NDS#,SUM_VOZN12#,SUM_VOZN12_NDS#,SUM_STRH#,TARIF_GUARD#,TARIF_GUARD_NDS#
	FROM v_temp_bill_kvit;
	
	SUMMA_DOK#:=SUMMA_DOK#+NDS_DOK#+AKCIZ_DOK#;	
  GSM_DOK#:=0;
  PROD_GSM#:=0;
  prim#:='';
  fio_ispol#:=For_Init.GetCurrUser;
  OLD_NOM_DOK#:=0;
  OLD_NOM_SF#:=0;
  DATE_MOS#:=DATE_KVIT#;
  NPO_SF#:='';
  IF TO_NUMBER(TO_CHAR(DATE_MOS#,'DD'))=31 THEN
    NUM_5_DAY#:=6;
  ELSE
    NUM_5_DAY#:=TRUNC(TO_NUMBER(TO_CHAR(DATE_MOS#,'DD'))-1)/5+1;
  END IF;
  
  BEGIN
    -- Считаем, что если заполнен POKUP_DOG_ID значит это отгрузка Лукойлу
    SELECT
      USL_DOG.KOL_DN,
      DECODE(MONTH.POKUP_DOG_ID,NULL,KVIT.NOM_ZD,'?'),
	  USL_DOG.DOG_ID,
	  USL_DOG.USL_NUMBER,
	  DECODE(MONTH.POKUP_DOG_ID,NULL,KVIT.PROD_ID_NPR,'10080'),
	  KVIT.PROD_ID_NPR,
	  MONTH.NPR_SOBSTV_ID,
	  KLS_DOG.IS_AGENT,
	  DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.NAZN_OTG_ID,1)	  
	   INTO Kol_DN#,nom_zd#,dog_id#,usl_number#,PROD_ID_NPR#,PROD_ID_NPR_ORIG#,OWNER_ID#,is_agent#,NAZN_OTG_ID#	   
       FROM KVIT,MONTH,USL_DOG,KLS_DOG
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
        AND USL_DOG.DOG_ID=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.DOG_ID,MONTH.POKUP_DOG_ID)
        AND USL_DOG.USL_NUMBER=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.USL_NUMBER,MONTH.POKUP_USL_NUMBER)
        AND KLS_DOG.ID=DECODE(MONTH.POKUP_DOG_ID,NULL,MONTH.DOG_ID,MONTH.POKUP_DOG_ID)	    
		AND KVIT.ID=(SELECT MIN(v_temp_bill_kvit.KVIT_ID) FROM v_temp_bill_kvit); 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 0;
  END;
  IF PROD_ID_NPR#='10080' THEN
    PROTO_NUM#:=NULL;
    PROTO_DATE#:=NULL;
    SELECT seq_num_akt.NEXTVAL INTO NUM_AKT# FROM dual;
  END IF;
  LUK_DOG_ID#:=DOG_ID#;
  LUK_USL_NUMBER#:=USL_NUMBER#;
  IF IS_AGENT# IN (1,3) THEN 
     LUK_SUMMA_DOK#:=SUMMA_DOK#;
	 LUK_NDS_DOK#:=NDS_DOK#;
  ELSE
    LUK_SUMMA_DOK#:=PROD_SUM#+PROD_NDS#+PROD_AKCIZ#;
    LUK_NDS_DOK#:=PROD_NDS#;
  END IF;
  SNP_DOG_ID#:=0;
  SNP_USL_NUMBER#:=0;
  LUK_KOL_DN#:=KOL_DN#;
  SNP_KOL_DN#:=999;
  KORR_5_DAY#:=0;
  NO_AKCIZ#:=0; -- исправить

  IF nom_dok_ed#=0 THEN
    NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  
    INSERT INTO BILLS 
      (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,
	   PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,
	   PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	   LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,SNP_DOG_ID,SNP_USL_NUMBER,
	   LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
    VALUES (
       NOM_DOK#,NOM_SF#,DATE_VYP_SF#,DATE_KVIT#,DATE_BUXG#,SUMMA_DOK#,NDS_DOK#,GSM_DOK#,AKCIZ_DOK#,
	   PRIM#,FIO_ISPOL#,KOL_DN#,OLD_NOM_DOK#,NOM_ZD#,OWNER_ID#,DOG_ID#,USL_NUMBER#,PROD_ID_NPR#,
	   PROD_SUM#,PROD_NDS#,PROD_GSM#,PROD_AKCIZ#,DATE_MOS#,NPO_SF#,OLD_NOM_SF#,IS_AGENT#,NUM_5_DAY#,
	   LUK_DOG_ID#,LUK_USL_NUMBER#,LUK_SUMMA_DOK#,LUK_NDS_DOK#,SNP_DOG_ID#,SNP_USL_NUMBER#,
	   LUK_KOL_DN#,SNP_KOL_DN#,NAZN_OTG_ID#,KORR_5_DAY#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,DATE_KVIT#+KOL_DN#);
  ELSE
    IF STORNO#=0 THEN -- Сторно нет.
      UPDATE BILLS SET 
        (DATE_VYP_SF,DATE_KVIT,DATE_BUXG,
	     SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,
	     DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,
         SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)=
  	   ( SELECT 
         DATE_VYP_SF#,DATE_KVIT#,DATE_BUXG#,
   	     SUMMA_DOK#,NDS_DOK#,GSM_DOK#,AKCIZ_DOK#,PRIM#,FIO_ISPOL#,       
         KOL_DN#,OLD_NOM_DOK#,NOM_ZD#,OWNER_ID#,DOG_ID#,USL_NUMBER#,      
         PROD_ID_NPR#,PROD_SUM#,PROD_NDS#,PROD_GSM#,PROD_AKCIZ#,
	     DATE_MOS#,NPO_SF#,OLD_NOM_SF#,IS_AGENT#,NUM_5_DAY#,
	     LUK_DOG_ID#,LUK_USL_NUMBER#,LUK_SUMMA_DOK#,LUK_NDS_DOK#,
	     SNP_DOG_ID#,SNP_USL_NUMBER#,LUK_KOL_DN#,SNP_KOL_DN#,NAZN_OTG_ID#,     
         KORR_5_DAY#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,DATE_KVIT#+KOL_DN# FROM dual) WHERE nom_dok=nom_dok_ed#;
      -- Это криво, а что делать?
      IF nom_dok_ed#<>0 THEN
        DELETE FROM BILL_POS WHERE nom_dok=nom_dok_ed#;
      END IF;
	ELSE -- Сторно есть
      SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  SELECT nom_sf,nom_dok INTO old_nom_sf#,old_nom_dok# FROM BILLS WHERE nom_dok=nom_dok_ed#;
      INSERT INTO BILLS -- Вставляем минусовой счет 
        (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,
	     SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,
	     DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,
         SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
  	   ( SELECT 
         NOM_DOK#,OLD_NOM_SF#,DATE_VYP_SF,DATE_KVIT,DATE_BUXG#,
   	     -SUMMA_DOK,-NDS_DOK,-GSM_DOK,-AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK#,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,-PROD_SUM,-PROD_NDS,-PROD_GSM,-PROD_AKCIZ,
	     DATE_VYP_SF#,NPO_SF#,OLD_NOM_SF#,IS_AGENT,NUM_5_DAY,
	     LUK_DOG_ID,LUK_USL_NUMBER,-LUK_SUMMA_DOK,-LUK_NDS_DOK,
	     SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT FROM BILLS WHERE nom_dok=nom_dok_ed#);	  	  

      INSERT INTO BILL_POS ( -- Вставляем минусовые позиции
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP, IS_POKUP)
      (SELECT 
        NOM_DOK#,BILL_POS_ID,-VES,CENA_BN,CENA,-SUMMA_BN,-SUMMA_AKCIZ,-SUMMA_NDS20, 
        -SUMMA_GSM25,-SUMMA,CENA_POKUP,-SUMMA_BN_POKUP,-SUMMA_NDS20_POKUP,-SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP,IS_POKUP FROM BILL_POS WHERE nom_dok=nom_dok_ed#);
	  
	  INSERT INTO DOP_KVIT -- Это будут минусовые позиции
 	    (SELECT * FROM KVIT WHERE bill_id=nom_dok_ed#);
	  
	  UPDATE KVIT SET -- вот они ими становяться         
		 BILL_ID=nom_dok#,
		 SUM_PROD=-SUM_PROD,
		 SUM_AKCIZ=-SUM_AKCIZ,
		 SUM_PROD_NDS=-SUM_PROD_NDS,
		 TARIF_NDS=-TARIF_NDS,
		 SUM_VOZN11=-SUM_VOZN11,
		 SUM_VOZN11_NDS=-SUM_VOZN11_NDS,
         SUM_VOZN12=-SUM_VOZN12,
		 SUM_VOZN12_NDS=-SUM_VOZN12_NDS,
		 SUM_STRAH=-SUM_STRAH,
		 CENA_VOZN=-CENA_VOZN
	    WHERE bill_id=nom_dok_ed#;	    
	  
	  INSERT INTO DOP_KVIT -- Это будут плюсовые старые позиции
 	    (SELECT * FROM KVIT WHERE bill_id=nom_dok_ed#);

      SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
      NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  
      INSERT INTO BILLS -- Вставляем плюсовой счет 
        (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,
	     PRIM,FIO_ISPOL,KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,
	     PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
   	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,SNP_DOG_ID,SNP_USL_NUMBER,
	     LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
      VALUES (
         NOM_DOK#,NOM_SF#,DATE_VYP_SF#,DATE_KVIT#,DATE_BUXG#,SUMMA_DOK#,NDS_DOK#,GSM_DOK#,AKCIZ_DOK#,
	     PRIM#,FIO_ISPOL#,KOL_DN#,OLD_NOM_DOK#,NOM_ZD#,OWNER_ID#,DOG_ID#,USL_NUMBER#,PROD_ID_NPR#,
	     PROD_SUM#,PROD_NDS#,PROD_GSM#,PROD_AKCIZ#,DATE_MOS#,NPO_SF#,OLD_NOM_SF#,IS_AGENT#,NUM_5_DAY#,
	     LUK_DOG_ID#,LUK_USL_NUMBER#,LUK_SUMMA_DOK#,LUK_NDS_DOK#,SNP_DOG_ID#,SNP_USL_NUMBER#,
	     LUK_KOL_DN#,SNP_KOL_DN#,NAZN_OTG_ID#,KORR_5_DAY#,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,DATE_KVIT#+KOL_DN#);
	END IF;
  END IF;
  -- Вставляем продукт 
  INSERT INTO BILL_POS (
      NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
      SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	  DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
	  NACENKA,PROTO_NUM,PROTO_DATE,NO_AKCIZ,NUM_AKT)
  VALUES (
    NOM_DOK#,1,VES#,CENA_BN#,CENA#,PROD_SUM#-PROD_AKCIZ#-PROD_NDS#-PROD_GSM#,PROD_AKCIZ#,PROD_NDS#,
	PROD_GSM#,PROD_SUM#,0,0,0,0,
	DATE_VYP_SF#,0,PROD_ID_NPR_ORIG#,1,1,IS_AGENT#,1,0,PROTO_NUM#,PROTO_DATE#,NO_AKCIZ#,NUM_AKT#);
  -- Вставляем тариф
  IF TARIF#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,10,0,0,0,TARIF#,0,TARIF_NDS#,
	  0,TARIF#+TARIF_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10010',13,68,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем возн МПС
  IF SUM_VOZN11#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,11,0,0,0,SUM_VOZN11#,0,SUM_VOZN11_NDS#,
	  0,SUM_VOZN11#+SUM_VOZN11_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10011',13,48,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем возн не МПС
  IF SUM_VOZN12#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,12,0,0,0,SUM_VOZN12#,0,SUM_VOZN11_NDS#,
	  0,SUM_VOZN12#+SUM_VOZN12_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10012',13,48,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем охрану МПС
  IF TARIF_GUARD#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,13,0,0,0,TARIF_GUARD#,0,TARIF_GUARD_NDS#,
	  0,TARIF_GUARD#+TARIF_GUARD_NDS#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10013',13,48,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  -- Вставляем страховку
  IF SUM_STRH#<>0 THEN 
    INSERT INTO BILL_POS (
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK)
    VALUES (
      NOM_DOK#,20,0,0,0,SUM_STRH#,0,0,
	  0,SUM_STRH#,0,0,0,0,
  	  DATE_VYP_SF#,0,'10020',13,69,IS_AGENT#,DECODE(IS_AGENT#,1,1,3,1,0));
  END IF;
  
  UPDATE KVIT
    SET (BILL_ID,SUM_PROD,SUM_AKCIZ,SUM_PROD_NDS,TARIF_NDS,SUM_VOZN11,SUM_VOZN11_NDS,
      SUM_VOZN12,SUM_VOZN12_NDS,SUM_STRAH,CENA,CENA_OTP,DATE_CENA,CENA_VOZN,
	  tarif_guard,tarif_guard_nds,nacenka,num_akt,bill_pos_id,no_akciz,PROTO_NUM,PROTO_DATE) =
    (SELECT NOM_DOK#,a.SUM_PROD,a.SUM_AKCIZ,a.SUM_PROD_NDS,a.TARIF_NDS,a.SUM_VOZN11,a.SUM_VOZN11_NDS,
  a.SUM_VOZN12,a.SUM_VOZN12_NDS,a.SUM_STRAH,a.CENA,a.CENA_OTP,a.DATE_CENA,a.cena_vozn,
  a.tarif_guard,a.tarif_guard_nds,a.nacenka,NUM_AKT#,a.bill_pos_id,a.no_akciz,a.PROTO_NUM,a.PROTO_DATE
  FROM v_temp_bill_kvit a WHERE a.KVIT_ID=KVIT.ID)
--  WHERE EXISTS (SELECT b.kvit_id FROM v_temp_bill_kvit b WHERE b.kvit_id=KVIT.id);	  
  WHERE kvit.id in (SELECT b.kvit_id FROM v_temp_bill_kvit b /*WHERE b.kvit_id = kvit.ID*/);
  COMMIT;
  RETURN nom_dok#;
END;

-- Удаление счета
FUNCTION DEL_BILL(NOM_DOK# NUMBER) RETURN NUMBER IS
BEGIN
/*  UPDATE kvit SET bill_id=0 WHERE bill_id=nom_dok#;
  DELETE FROM bill_pos WHERE nom_dok=nom_dok#;
  DELETE FROM bills WHERE nom_dok=nom_dok#;*/
  COMMIT; 
  RETURN 0;
END;

-- Добавление квитанции в счет
FUNCTION ADD_KVIT(NUM_KVIT# NUMBER) RETURN NUMBER IS
KvitCount NUMBER;
BEGIN
  SELECT COUNT(*) INTO KvitCount FROM v_temp_bill_kvit_possible WHERE
    v_temp_bill_kvit_possible.NUM_KVIT=NUM_KVIT# AND
    NOT EXISTS (SELECT num_kvit FROM v_temp_bill_kvit WHERE num_kvit=num_kvit#);
  IF KvitCount>0 THEN
    INSERT INTO TEMP_BILL_KVIT 
	  SELECT * FROM v_temp_bill_kvit_possible WHERE
        v_temp_bill_kvit_possible.NUM_KVIT=NUM_KVIT#;
	COMMIT;
  END IF;
  RETURN KvitCount;
END;

-- Удаление квитанции из счета
FUNCTION DEL_KVIT(NUM_KVIT# NUMBER) RETURN NUMBER IS
BEGIN
  DELETE FROM TEMP_BILL_KVIT WHERE num_kvit=num_kvit#;
  COMMIT;
  RETURN 0;
END;

FUNCTION GET_VOZN_OLD(pKVIT_ID NUMBER) RETURN VARCHAR2 IS
UslSum  NUMBER;
OwnType NUMBER;
DopCist NUMBER;
VidOtgr NUMBER;
BEGIN
  BEGIN
    SELECT
      USL_DOG.USL_SUM, 
	  KLS_VAGOWNER.VAGOWN_TYP_ID,	
	  KVIT.FLG_DOP_CIST,
 	  KLS_VID_OTGR.LOAD_TYPE_ID 
	   INTO UslSum,OwnType,DopCist,VidOtgr	   
       FROM KVIT,MONTH,USL_DOG,KLS_VAGOWNER,KLS_VID_OTGR
	  WHERE KVIT.NOM_ZD=MONTH.NOM_ZD
	    AND MONTH.DOG_ID=USL_DOG.DOG_ID 
	    AND MONTH.USL_NUMBER=USL_DOG.USL_NUMBER
	    AND KVIT.VAGOWNER_ID=KLS_VAGOWNER.ID
		AND MONTH.LOAD_ABBR=KLS_VID_OTGR.LOAD_ABBR
	    AND KVIT.ID=pKVIT_ID; 			  
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
  	    RETURN 'Нет квитанции';
  END;
  IF VidOtgr<>1 AND VidOtgr<>6 THEN
    RETURN 'Нет вознаграждения';
  END IF; 
  IF OwnType=0 THEN
    RETURN TO_CHAR(USLSUM,'999,99') || 'руб/тн';
  ELSE
    RETURN 'Сх19-Сх20';
  END IF; 
  RETURN 'Не понятно...';
END;

-- Получить новый номер счет фактуры 
FUNCTION GET_NOM_SF(DATE_VYP_SF# DATE) RETURN NUMBER IS
NOM_SF# NUMBER;
BEGIN
  BEGIN
    SELECT Curr_Num INTO NOM_SF# FROM SF_NUMBERS
	  WHERE DATE_VYP_SF# BETWEEN FROM_DATE AND TO_DATE;
    EXCEPTION 
      WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20000, 'Номер счета-фактуры не определен!');
  END;  
  UPDATE SF_NUMBERS SET Curr_Num=Curr_Num+1
	  WHERE DATE_VYP_SF# BETWEEN FROM_DATE AND TO_DATE;
  RETURN NOM_SF#;
END;

FUNCTION Place_Payments_on_Bills (dog_id# NUMBER, nom_dok# NUMBER, 
  payments_id# NUMBER, realiz_d VARCHAR2)
RETURN VARCHAR2
AS
  sum_to_close# FLOAT;
  sum_to_close_now# FLOAT;
  nds_to_close_now# FLOAT;
  akciz_to_close_now# FLOAT;
  ves_to_close_now# FLOAT;
  koef# FLOAT;
  realiz_date# DATE;

  CURSOR temp_pay IS -- неразнесенные оплаты
    SELECT id,date_post,summa,dest_id
	FROM 
	  V_PAYMENTS_UNUSED WHERE DOG_ID=dog_id# AND 
	  (summa<>0 /*or EXISTS (SELECT * FROM v_payments_to_bills WHERE 
	                         v_payments_to_bills.payments_id=V_PAYMENTS_UNUSED.id)*/) AND 
	  ID=DECODE(payments_id#,0,id,null,id,payments_id#) 	
	ORDER BY date_plat;
	
  dest_pay temp_pay%ROWTYPE;

  -- неоплаченные счета
  CURSOR temp_bill (dest_id# NUMBER) IS 
    SELECT nom_dok,luk_summa_dok,date_vyp_sf
	FROM V_PAYMENTS_UNCLOSED_BILLS 
	  WHERE DOG_ID=dog_id# 
	    AND luk_summa_dok<>0 
	    AND nom_dok=DECODE(nom_dok#,0,nom_dok,nom_dok#) 
 	    AND (prod_bill_pos=DECODE(dest_id#,0,prod_bill_pos,dest_id#) or
		     prod_bill_pos in (10,11,12,13) and dest_id#=21)  
	  ORDER BY pay_date,nom_sf;
  	
  -- отбираем счета по признаку оплаты DEST_ID	
  
  CURSOR temp_bill2 (payments_id# IN NUMBER, dest_id# NUMBER) IS -- неоплаченные счета привязанные к оплате
    SELECT nom_dok,luk_summa_dok,date_vyp_sf
	FROM V_PAYMENTS_UNCLOSED_BILLS_PAY WHERE DOG_ID=dog_id# AND 
      nom_dok=DECODE(nom_dok#,0,nom_dok,nom_dok#) AND 
	  (prod_bill_pos=DECODE(dest_id#,0,prod_bill_pos,dest_id#) or	  
       prod_bill_pos in (10,11,12,13) and dest_id#=21) AND -- отбираем счета по признаку оплаты DEST_ID 
	  luk_summa_dok<>0 AND payments_id=payments_id# ORDER BY pay_date,nom_sf;
  
  dest_bill temp_bill%ROWTYPE;  

  CURSOR temp_bill_pos (nom_dok# IN NUMBER) IS -- неоплаченные позиции
     SELECT bill_pos_id,summa_nds20,summa_akciz,summa,ves FROM V_PAYMENTS_UNCLOSED_BILL_POS
	 WHERE nom_dok=nom_dok# ORDER BY bill_pos_id;	

  dest_bill_pos temp_bill_pos%ROWTYPE;  

BEGIN
  OPEN temp_pay;
  FETCH temp_pay INTO dest_pay;
  OPEN temp_bill(dest_pay.DEST_ID);
  IF (dest_pay.summa IS NOT NULL) THEN
    OPEN temp_bill2 (dest_pay.ID,dest_pay.DEST_ID);
    FETCH temp_bill2 INTO dest_bill;
    IF (dest_bill.luk_summa_dok IS NULL) THEN
      FETCH temp_bill INTO dest_bill;
	END IF;
  END IF;
  IF (dest_pay.summa IS NOT NULL) AND (dest_bill.luk_summa_dok IS NOT NULL) THEN
    IF dest_pay.summa>=dest_bill.luk_summa_dok THEN
	  -- хватает оплаты на весь счет
      sum_to_close#:=dest_bill.luk_summa_dok;
  	  koef#:=1;
    ELSE
	  -- оплаты НЕ хватает на счет
      sum_to_close#:=dest_pay.summa;
	  koef#:=dest_pay.summa/dest_bill.luk_summa_dok;
    END IF;
    OPEN temp_bill_pos(dest_bill.nom_dok);
    LOOP
      FETCH temp_bill_pos INTO dest_bill_pos;
      EXIT WHEN temp_bill_pos%NOTFOUND;

	  sum_to_close_now#:=ROUND(dest_bill_pos.summa*koef#,2);
	  nds_to_close_now#:=ROUND(dest_bill_pos.summa_nds20*koef#,2);
	  akciz_to_close_now#:=ROUND(dest_bill_pos.summa_akciz*koef#,2);
	  ves_to_close_now#:=ROUND(dest_bill_pos.ves*koef#,3);
	  sum_to_close#:=sum_to_close#-sum_to_close_now#;
	  IF (ABS(sum_to_close#)<0.03) and (koef#<>1) THEN
	    -- оставшаяся сумма менее 3-х копеек. приклеиваем ее к последней позиции
	    sum_to_close_now#:=sum_to_close_now#+sum_to_close#;
	    sum_to_close#:=0;
	  END IF;
	  IF dest_pay.date_post>=dest_bill.date_vyp_sf THEN 
	    realiz_date#:=dest_pay.date_post;
	  ELSE
	    realiz_date#:=dest_bill.date_vyp_sf;
	  END IF;
	  INSERT INTO payments_on_bills (NOM_DOK,BILL_POS_ID,PAYMENTS_ID,SUMMA,DATE_REALIZ,SUMMA_NDS,SUMMA_AKCIZ,VES) 
	    VALUES (dest_bill.nom_dok,dest_bill_pos.bill_pos_id,dest_pay.id,sum_to_close_now#,realiz_date# /*TO_DATE(realiz_d,'dd.mm.yyyy')*/,nds_to_close_now#,akciz_to_close_now#,ves_to_close_now#);	
    END LOOP;
    COMMIT;
    CLOSE temp_bill_pos;
    CLOSE temp_bill;
    CLOSE temp_bill2;
    CLOSE temp_pay;
    RETURN 'OK';
  ELSE
    CLOSE temp_bill;
    CLOSE temp_pay;
    RETURN 'ERROR';
  END IF;
END Place_Payments_on_Bills;

FUNCTION Del_Payments_from_Bill
 (nom_dok# NUMBER, payment_id# NUMBER)
RETURN VARCHAR2   
AS
BEGIN
  DELETE FROM Payments_on_bills WHERE nom_dok=nom_dok# and payments_id=payment_id#;
  COMMIT;
  RETURN 'GOOD';
END;

FUNCTION Del_Payments_from_Bill_Period
  (date1# VARCHAR2, date2# VARCHAR2)
RETURN VARCHAR2
AS
BEGIN
  DELETE FROM payments_on_bills WHERE
    nom_dok in (select nom_dok from bills where date_vyp_sf between TO_DATE(date1#,'dd.mm.yyyy') and TO_DATE(date2#,'dd.mm.yyyy'));
  COMMIT;
  RETURN 'GOOD';
END;

FUNCTION NEW_BILL_NO_OTGR(date_vyp_sf# VARCHAR2,dog_id# NUMBER,usl_number# NUMBER,nom_dok_ed# NUMBER, STORNO# NUMBER) RETURN NUMBER 
AS
NOM_DOK# NUMBER;
NOM_SF# NUMBER;
OLD_NOM_DOK# NUMBER;
OLD_NOM_SF# NUMBER;
BEGIN

  IF nom_dok_ed#=0 THEN
	  SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  	
	  INSERT INTO BILLS (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,DATE_MOS,summa_dok,nds_dok,fio_ispol,
	    kol_dn,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,is_agent,NUM_5_DAY,LUK_DOG_ID, 
	    LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,LUK_KOL_DN,NAZN_OTG_ID,DATE_PLAT)    
		SELECT 
		  NOM_DOK# AS NOM_DOK, 
		  NOM_SF# AS NOM_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_VYP_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_KVIT, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_BUXG,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_MOS, 
		  v_temp_bill_pos_sum.SUMMA AS summa_dok,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS nds_dok,
		  For_Init.GetCurrUser AS fio_ispol,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS kol_dn,
		  8 as OWNER_ID,  
		  DOG_ID# AS DOG_ID, 
		  USL_NUMBER# AS USL_NUMBER,   
		  v_temp_bill_pos_sum.PROD_ID_NPR AS PROD_ID_NPR,
		  (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS is_agent,
		  DECODE(TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2)),31,6,
		    TRUNC((TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2))-1)/5)+1) AS NUM_5_DAY,
		  DOG_ID# AS LUK_DOG_ID, 
		  USL_NUMBER# AS LUK_USL_NUMBER, 
		  v_temp_bill_pos_sum.SUMMA AS LUK_SUMMA_DOK,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS LUK_NDS_DOK,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS LUK_KOL_DN,
		  1 AS NAZN_OTG_ID,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy')+
		    (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS DATE_PLAT
		  FROM v_temp_bill_pos_sum;
  ELSE -- ed_nom_dok<>0
    IF storno#=0 THEN
	  UPDATE BILLS SET(DATE_VYP_SF,DATE_KVIT,DATE_BUXG,DATE_MOS,summa_dok,nds_dok,fio_ispol,
	    kol_dn,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,is_agent,NUM_5_DAY,LUK_DOG_ID, 
	    LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,LUK_KOL_DN,NAZN_OTG_ID,DATE_PLAT)=    
		(SELECT 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_VYP_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_KVIT, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_BUXG,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_MOS, 
		  v_temp_bill_pos_sum.SUMMA AS summa_dok,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS nds_dok,
		  For_Init.GetCurrUser AS fio_ispol,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS kol_dn,
		  8 as OWNER_ID,  
		  DOG_ID# AS DOG_ID, 
		  USL_NUMBER# AS USL_NUMBER,   
		  v_temp_bill_pos_sum.PROD_ID_NPR AS PROD_ID_NPR,
		  (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS is_agent,
		  DECODE(TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2)),31,6,
		    TRUNC((TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2))-1)/5)+1) AS NUM_5_DAY,
		  DOG_ID# AS LUK_DOG_ID, 
		  USL_NUMBER# AS LUK_USL_NUMBER, 
		  v_temp_bill_pos_sum.SUMMA AS LUK_SUMMA_DOK,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS LUK_NDS_DOK,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS LUK_KOL_DN,
		  1 AS NAZN_OTG_ID,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy')+
		    (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS DATE_PLAT
		  FROM v_temp_bill_pos_sum) WHERE bills.nom_dok=nom_dok_ed#;
      NOM_DOK#:=nom_dok_ed#;
      DELETE FROM BILL_POS WHERE nom_dok=nom_dok_ed#;
	ELSE --storno<>0
      SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  SELECT nom_sf,nom_dok INTO old_nom_sf#,old_nom_dok# FROM BILLS WHERE nom_dok=nom_dok_ed#;
      INSERT INTO BILLS -- Вставляем минусовой счет 
        (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,
	     SUMMA_DOK,NDS_DOK,GSM_DOK,AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,PROD_SUM,PROD_NDS,PROD_GSM,PROD_AKCIZ,
	     DATE_MOS,NPO_SF,OLD_NOM_SF,IS_AGENT,NUM_5_DAY,
  	     LUK_DOG_ID,LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,
         SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT)
  	   ( SELECT 
         NOM_DOK#,OLD_NOM_SF#,DATE_VYP_SF,DATE_KVIT,TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy'),
   	     -SUMMA_DOK,-NDS_DOK,-GSM_DOK,-AKCIZ_DOK,PRIM,FIO_ISPOL,       
         KOL_DN,OLD_NOM_DOK#,NOM_ZD,OWNER_ID,DOG_ID,USL_NUMBER,      
         PROD_ID_NPR,-PROD_SUM,-PROD_NDS,-PROD_GSM,-PROD_AKCIZ,
	     DATE_VYP_SF#,NPO_SF,OLD_NOM_SF#,IS_AGENT,NUM_5_DAY,
	     LUK_DOG_ID,LUK_USL_NUMBER,-LUK_SUMMA_DOK,-LUK_NDS_DOK,
	     SNP_DOG_ID,SNP_USL_NUMBER,LUK_KOL_DN,SNP_KOL_DN,NAZN_OTG_ID,     
         KORR_5_DAY,PROTO_NUM,PROTO_DATE,NO_AKCIZ,DATE_PLAT FROM BILLS WHERE nom_dok=nom_dok_ed#);	  	  

      INSERT INTO BILL_POS ( -- Вставляем минусовые позиции
        NOM_DOK,BILL_POS_ID,VES,CENA_BN,CENA,SUMMA_BN,SUMMA_AKCIZ,SUMMA_NDS20, 
        SUMMA_GSM25,SUMMA,CENA_POKUP,SUMMA_BN_POKUP,SUMMA_NDS20_POKUP,SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP, IS_POKUP)
      (SELECT 
        NOM_DOK#,BILL_POS_ID,-VES,CENA_BN,CENA,-SUMMA_BN,-SUMMA_AKCIZ,-SUMMA_NDS20, 
        -SUMMA_GSM25,-SUMMA,CENA_POKUP,-SUMMA_BN_POKUP,-SUMMA_NDS20_POKUP,-SUMMA_GSM25_POKUP,
	    DATE_REALIZ,ID_OLD,PROD_ID_NPR,OWNERSHIP_ID,ANALIT_ID,IS_AGENT,IS_LUK,
		NACENKA,NUM_AKT,PROTO_NUM,PROTO_DATE,NO_AKCIZ,SUPPLIER_ID,NOM_SF_POKUP,NOM_DOK_POKUP,IS_POKUP FROM BILL_POS WHERE nom_dok=nom_dok_ed#);
	  
	  SELECT seq_bills.NEXTVAL INTO NOM_DOK# FROM dual;
	  NOM_SF#:=GET_NOM_SF(DATE_VYP_SF#);  	
	  INSERT INTO BILLS (NOM_DOK,NOM_SF,DATE_VYP_SF,DATE_KVIT,DATE_BUXG,DATE_MOS,summa_dok,nds_dok,fio_ispol,
	    kol_dn,OWNER_ID,DOG_ID,USL_NUMBER,PROD_ID_NPR,is_agent,NUM_5_DAY,LUK_DOG_ID, 
	    LUK_USL_NUMBER,LUK_SUMMA_DOK,LUK_NDS_DOK,LUK_KOL_DN,NAZN_OTG_ID,DATE_PLAT,OLD_NOM_SF,OLD_NOM_DOK)    
		SELECT 
		  NOM_DOK# AS NOM_DOK, 
		  NOM_SF# AS NOM_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_VYP_SF, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_KVIT, 
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_BUXG,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy') AS DATE_MOS, 
		  v_temp_bill_pos_sum.SUMMA AS summa_dok,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS nds_dok,
		  For_Init.GetCurrUser AS fio_ispol,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS kol_dn,
		  8 as OWNER_ID,  
		  DOG_ID# AS DOG_ID, 
		  USL_NUMBER# AS USL_NUMBER,   
		  v_temp_bill_pos_sum.PROD_ID_NPR AS PROD_ID_NPR,
		  (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS is_agent,
		  DECODE(TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2)),31,6,
		    TRUNC((TO_NUMBER(SUBSTR(DATE_VYP_SF#,1,2))-1)/5)+1) AS NUM_5_DAY,
		  DOG_ID# AS LUK_DOG_ID, 
		  USL_NUMBER# AS LUK_USL_NUMBER, 
		  v_temp_bill_pos_sum.SUMMA AS LUK_SUMMA_DOK,
		  v_temp_bill_pos_sum.SUMMA_NDS20 AS LUK_NDS_DOK,
		  (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS LUK_KOL_DN,
		  1 AS NAZN_OTG_ID,
		  TO_DATE(DATE_VYP_SF#,'dd.mm.yyyy')+
		    (SELECT kol_dn FROM usl_dog WHERE dog_id=dog_id# AND usl_number=usl_number#) AS DATE_PLAT,
		  OLD_NOM_SF# AS OLD_NOM_SF,
		  OLD_NOM_DOK# AS OLD_NOM_DOK
		  FROM v_temp_bill_pos_sum;						
	END IF;
  END IF; -- ed_nom_dok=0

INSERT INTO BILL_POS
	(NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA_GSM25, SUMMA, CENA_POKUP, 
	SUMMA_BN_POKUP, SUMMA_NDS20_POKUP, SUMMA_GSM25_POKUP, DATE_REALIZ, ID_OLD, PROD_ID_NPR, OWNERSHIP_ID, 
	ANALIT_ID, IS_AGENT, IS_LUK, NACENKA, NUM_AKT, PROTO_NUM, PROTO_DATE, NO_AKCIZ, SUPPLIER_ID, NOM_SF_POKUP, 
	NOM_DOK_POKUP, IS_POKUP)
SELECT
   NOM_DOK# AS nom_dok,
   (SELECT bill_pos FROM kls_prod WHERE id_npr=v_temp_bill_pos.prod_id_npr) AS bill_pos_id,
   v_temp_bill_pos.VES,
   v_temp_bill_pos.CENA_BN,
   v_temp_bill_pos.CENA,
   v_temp_bill_pos.SUMMA_BN,
   v_temp_bill_pos.SUMMA_AKCIZ,
   v_temp_bill_pos.SUMMA_NDS20,
   0 AS summa_gsm25,
   v_temp_bill_pos.SUMMA,
   0 AS cena_pokup,
   0 as summa_bn_pokup,
   0 as SUMMA_NDS20_POKUP, 
   0 as SUMMA_GSM25_POKUP, 
   DATE_VYP_SF# AS DATE_REALIZ, 
   0 AS ID_OLD, 
   v_temp_bill_pos.PROD_ID_NPR AS PROD_ID_NPR, 
   (SELECT ownership_id FROM kls_vid_usl,kls_prod WHERE kls_prod.id_npr=v_temp_bill_pos.prod_id_npr AND kls_prod.vid_usl_id=kls_vid_usl.id) AS OWNERSHIP_ID, 
   0 AS ANALIT_ID, 
   (SELECT is_agent FROM kls_dog WHERE id=dog_id#) AS IS_AGENT, 
   1 AS IS_LUK, 
   0 AS NACENKA, 
   0 AS NUM_AKT, 
   '' AS PROTO_NUM, 
   NULL AS PROTO_DATE, 
   0 AS NO_AKCIZ, 
   0 AS SUPPLIER_ID, 
   NULL AS NOM_SF_POKUP, 
   0 AS NOM_DOK_POKUP, 
   0 AS IS_POKUP
   FROM v_temp_bill_pos;
	  
  COMMIT;
  RETURN NOM_DOK#;
END;

PROCEDURE CLEAR_TEMP_BILL_POS(ed_nom_dok# NUMBER) IS
BEGIN
  DELETE FROM TEMP_BILL_POS WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;

  IF ed_nom_dok#=0 THEN
    INSERT INTO temp_bill_pos (NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, PROD_ID_NPR)
      VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, '10001');
  ELSE
    INSERT INTO temp_bill_pos (NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, PROD_ID_NPR)
      SELECT NOM_DOK, BILL_POS_ID, VES, CENA_BN, CENA, SUMMA_BN, SUMMA_AKCIZ, SUMMA_NDS20, SUMMA, PROD_ID_NPR FROM bill_pos WHERE nom_dok=ed_nom_dok#;    
  END IF;
  COMMIT;
END;

PROCEDURE FILL_TEMP_BILL_POS(date_vyp_sf# VARCHAR2,dog_id# NUMBER,usl_number# NUMBER,ALG_ID# NUMBER)  
AS
BEGIN
  DELETE FROM TEMP_BILL_POS WHERE
     terminal_name=For_Init.GetCurrTerm AND
     osuser_name=For_Init.GetCurrUser;
  IF alg_id#=1 THEN -- ЖД тариф общий
    INSERT INTO temp_bill_pos (PROD_ID_NPR,SUMMA_BN,SUMMA_NDS20,SUMMA)
      SELECT '10006',SUM(kvit.tarif),SUM(kvit.tarif_nds),SUM(kvit.tarif+kvit.tarif_nds) 
	    FROM kvit,month WHERE kvit.nom_zd=month.nom_zd AND
		  month.dog_id=dog_id# AND
		  TRUNC(kvit.date_kvit,'Month')=TRUNC(TO_DATE(date_vyp_sf#,'dd.mm.yyyy'),'Month');
  END IF;
  COMMIT;  
END;
END; 
/

